#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkeletalMerging

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct SkeletalMerging.SkeletalMeshMergeParams
// 0x0040 (0x0040 - 0x0000)
struct FSkeletalMeshMergeParams final
{
public:
	TArray<struct FSkelMeshMergeSectionMapping>   MeshSectionMappings;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSkelMeshMergeMeshUVTransforms> UVTransformsPerMesh;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  MeshesToMerge;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         StripTopLODS;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNeedsCpuAccess : 1;                               // 0x0034(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSkeletonBefore : 1;                               // 0x0034(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              Skeleton;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkeletalMeshMergeParams) == 0x000008, "Wrong alignment on FSkeletalMeshMergeParams");
static_assert(sizeof(FSkeletalMeshMergeParams) == 0x000040, "Wrong size on FSkeletalMeshMergeParams");
static_assert(offsetof(FSkeletalMeshMergeParams, MeshSectionMappings) == 0x000000, "Member 'FSkeletalMeshMergeParams::MeshSectionMappings' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeParams, UVTransformsPerMesh) == 0x000010, "Member 'FSkeletalMeshMergeParams::UVTransformsPerMesh' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeParams, MeshesToMerge) == 0x000020, "Member 'FSkeletalMeshMergeParams::MeshesToMerge' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeParams, StripTopLODS) == 0x000030, "Member 'FSkeletalMeshMergeParams::StripTopLODS' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeParams, Skeleton) == 0x000038, "Member 'FSkeletalMeshMergeParams::Skeleton' has a wrong offset!");

// ScriptStruct SkeletalMerging.SkeletonMergeParams
// 0x0018 (0x0018 - 0x0000)
struct FSkeletonMergeParams final
{
public:
	TArray<class USkeleton*>                      SkeletonsToMerge;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bMergeSockets;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMergeVirtualBones;                                // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMergeCurveNames;                                  // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMergeBlendProfiles;                               // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMergeAnimSlotGroups;                              // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckSkeletonsCompatibility;                      // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkeletonMergeParams) == 0x000008, "Wrong alignment on FSkeletonMergeParams");
static_assert(sizeof(FSkeletonMergeParams) == 0x000018, "Wrong size on FSkeletonMergeParams");
static_assert(offsetof(FSkeletonMergeParams, SkeletonsToMerge) == 0x000000, "Member 'FSkeletonMergeParams::SkeletonsToMerge' has a wrong offset!");
static_assert(offsetof(FSkeletonMergeParams, bMergeSockets) == 0x000010, "Member 'FSkeletonMergeParams::bMergeSockets' has a wrong offset!");
static_assert(offsetof(FSkeletonMergeParams, bMergeVirtualBones) == 0x000011, "Member 'FSkeletonMergeParams::bMergeVirtualBones' has a wrong offset!");
static_assert(offsetof(FSkeletonMergeParams, bMergeCurveNames) == 0x000012, "Member 'FSkeletonMergeParams::bMergeCurveNames' has a wrong offset!");
static_assert(offsetof(FSkeletonMergeParams, bMergeBlendProfiles) == 0x000013, "Member 'FSkeletonMergeParams::bMergeBlendProfiles' has a wrong offset!");
static_assert(offsetof(FSkeletonMergeParams, bMergeAnimSlotGroups) == 0x000014, "Member 'FSkeletonMergeParams::bMergeAnimSlotGroups' has a wrong offset!");
static_assert(offsetof(FSkeletonMergeParams, bCheckSkeletonsCompatibility) == 0x000015, "Member 'FSkeletonMergeParams::bCheckSkeletonsCompatibility' has a wrong offset!");

}


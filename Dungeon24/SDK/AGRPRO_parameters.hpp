#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AGRPRO

#include "Basic.hpp"

#include "AGRPRO_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AGRPRO.AGRAnimMasterComponent.AddTag
// 0x0008 (0x0008 - 0x0000)
struct AGRAnimMasterComponent_AddTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_AddTag) == 0x000004, "Wrong alignment on AGRAnimMasterComponent_AddTag");
static_assert(sizeof(AGRAnimMasterComponent_AddTag) == 0x000008, "Wrong size on AGRAnimMasterComponent_AddTag");
static_assert(offsetof(AGRAnimMasterComponent_AddTag, InTag) == 0x000000, "Member 'AGRAnimMasterComponent_AddTag::InTag' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.ChangeAimOffset
// 0x0001 (0x0001 - 0x0000)
struct AGRAnimMasterComponent_ChangeAimOffset final
{
public:
	EAGR_AimOffsets                               InAimOffsetType;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_ChangeAimOffset) == 0x000001, "Wrong alignment on AGRAnimMasterComponent_ChangeAimOffset");
static_assert(sizeof(AGRAnimMasterComponent_ChangeAimOffset) == 0x000001, "Wrong size on AGRAnimMasterComponent_ChangeAimOffset");
static_assert(offsetof(AGRAnimMasterComponent_ChangeAimOffset, InAimOffsetType) == 0x000000, "Member 'AGRAnimMasterComponent_ChangeAimOffset::InAimOffsetType' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.ChangeRotation
// 0x0001 (0x0001 - 0x0000)
struct AGRAnimMasterComponent_ChangeRotation final
{
public:
	EAGR_RotationMethod                           InRotationMethod;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_ChangeRotation) == 0x000001, "Wrong alignment on AGRAnimMasterComponent_ChangeRotation");
static_assert(sizeof(AGRAnimMasterComponent_ChangeRotation) == 0x000001, "Wrong size on AGRAnimMasterComponent_ChangeRotation");
static_assert(offsetof(AGRAnimMasterComponent_ChangeRotation, InRotationMethod) == 0x000000, "Member 'AGRAnimMasterComponent_ChangeRotation::InRotationMethod' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.NetMultiSetAimOffset
// 0x0018 (0x0018 - 0x0000)
struct AGRAnimMasterComponent_NetMultiSetAimOffset final
{
public:
	struct FRotator                               InAimOffset;                                       // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_NetMultiSetAimOffset) == 0x000008, "Wrong alignment on AGRAnimMasterComponent_NetMultiSetAimOffset");
static_assert(sizeof(AGRAnimMasterComponent_NetMultiSetAimOffset) == 0x000018, "Wrong size on AGRAnimMasterComponent_NetMultiSetAimOffset");
static_assert(offsetof(AGRAnimMasterComponent_NetMultiSetAimOffset, InAimOffset) == 0x000000, "Member 'AGRAnimMasterComponent_NetMultiSetAimOffset::InAimOffset' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.NetMultiSetLookAt
// 0x0018 (0x0018 - 0x0000)
struct AGRAnimMasterComponent_NetMultiSetLookAt final
{
public:
	struct FVector                                LookAt;                                            // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_NetMultiSetLookAt) == 0x000008, "Wrong alignment on AGRAnimMasterComponent_NetMultiSetLookAt");
static_assert(sizeof(AGRAnimMasterComponent_NetMultiSetLookAt) == 0x000018, "Wrong size on AGRAnimMasterComponent_NetMultiSetLookAt");
static_assert(offsetof(AGRAnimMasterComponent_NetMultiSetLookAt, LookAt) == 0x000000, "Member 'AGRAnimMasterComponent_NetMultiSetLookAt::LookAt' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.RemoveTag
// 0x000C (0x000C - 0x0000)
struct AGRAnimMasterComponent_RemoveTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGRAnimMasterComponent_RemoveTag) == 0x000004, "Wrong alignment on AGRAnimMasterComponent_RemoveTag");
static_assert(sizeof(AGRAnimMasterComponent_RemoveTag) == 0x00000C, "Wrong size on AGRAnimMasterComponent_RemoveTag");
static_assert(offsetof(AGRAnimMasterComponent_RemoveTag, InTag) == 0x000000, "Member 'AGRAnimMasterComponent_RemoveTag::InTag' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_RemoveTag, ReturnValue) == 0x000008, "Member 'AGRAnimMasterComponent_RemoveTag::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.ServerChangeAimOffset
// 0x0001 (0x0001 - 0x0000)
struct AGRAnimMasterComponent_ServerChangeAimOffset final
{
public:
	EAGR_AimOffsets                               InAimOffsetType;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_ServerChangeAimOffset) == 0x000001, "Wrong alignment on AGRAnimMasterComponent_ServerChangeAimOffset");
static_assert(sizeof(AGRAnimMasterComponent_ServerChangeAimOffset) == 0x000001, "Wrong size on AGRAnimMasterComponent_ServerChangeAimOffset");
static_assert(offsetof(AGRAnimMasterComponent_ServerChangeAimOffset, InAimOffsetType) == 0x000000, "Member 'AGRAnimMasterComponent_ServerChangeAimOffset::InAimOffsetType' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.ServerChangeRotation
// 0x0001 (0x0001 - 0x0000)
struct AGRAnimMasterComponent_ServerChangeRotation final
{
public:
	EAGR_RotationMethod                           InRotationMethod;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_ServerChangeRotation) == 0x000001, "Wrong alignment on AGRAnimMasterComponent_ServerChangeRotation");
static_assert(sizeof(AGRAnimMasterComponent_ServerChangeRotation) == 0x000001, "Wrong size on AGRAnimMasterComponent_ServerChangeRotation");
static_assert(offsetof(AGRAnimMasterComponent_ServerChangeRotation, InRotationMethod) == 0x000000, "Member 'AGRAnimMasterComponent_ServerChangeRotation::InRotationMethod' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.ServerSetAimOffset
// 0x0018 (0x0018 - 0x0000)
struct AGRAnimMasterComponent_ServerSetAimOffset final
{
public:
	struct FRotator                               InAimOffset;                                       // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_ServerSetAimOffset) == 0x000008, "Wrong alignment on AGRAnimMasterComponent_ServerSetAimOffset");
static_assert(sizeof(AGRAnimMasterComponent_ServerSetAimOffset) == 0x000018, "Wrong size on AGRAnimMasterComponent_ServerSetAimOffset");
static_assert(offsetof(AGRAnimMasterComponent_ServerSetAimOffset, InAimOffset) == 0x000000, "Member 'AGRAnimMasterComponent_ServerSetAimOffset::InAimOffset' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.ServerSetBasePose
// 0x0008 (0x0008 - 0x0000)
struct AGRAnimMasterComponent_ServerSetBasePose final
{
public:
	struct FGameplayTag                           InBasePose;                                        // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_ServerSetBasePose) == 0x000004, "Wrong alignment on AGRAnimMasterComponent_ServerSetBasePose");
static_assert(sizeof(AGRAnimMasterComponent_ServerSetBasePose) == 0x000008, "Wrong size on AGRAnimMasterComponent_ServerSetBasePose");
static_assert(offsetof(AGRAnimMasterComponent_ServerSetBasePose, InBasePose) == 0x000000, "Member 'AGRAnimMasterComponent_ServerSetBasePose::InBasePose' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.ServerSetLookAt
// 0x0018 (0x0018 - 0x0000)
struct AGRAnimMasterComponent_ServerSetLookAt final
{
public:
	struct FVector                                LookAt;                                            // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_ServerSetLookAt) == 0x000008, "Wrong alignment on AGRAnimMasterComponent_ServerSetLookAt");
static_assert(sizeof(AGRAnimMasterComponent_ServerSetLookAt) == 0x000018, "Wrong size on AGRAnimMasterComponent_ServerSetLookAt");
static_assert(offsetof(AGRAnimMasterComponent_ServerSetLookAt, LookAt) == 0x000000, "Member 'AGRAnimMasterComponent_ServerSetLookAt::LookAt' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.ServerSetOverlayPose
// 0x0008 (0x0008 - 0x0000)
struct AGRAnimMasterComponent_ServerSetOverlayPose final
{
public:
	struct FGameplayTag                           InOverlayPose;                                     // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_ServerSetOverlayPose) == 0x000004, "Wrong alignment on AGRAnimMasterComponent_ServerSetOverlayPose");
static_assert(sizeof(AGRAnimMasterComponent_ServerSetOverlayPose) == 0x000008, "Wrong size on AGRAnimMasterComponent_ServerSetOverlayPose");
static_assert(offsetof(AGRAnimMasterComponent_ServerSetOverlayPose, InOverlayPose) == 0x000000, "Member 'AGRAnimMasterComponent_ServerSetOverlayPose::InOverlayPose' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.ServerSetRotation
// 0x0010 (0x0010 - 0x0000)
struct AGRAnimMasterComponent_ServerSetRotation final
{
public:
	EAGR_RotationMethod                           InRotationMethod;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InRotationSpeed;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTurnStartAngle;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTurnStopTolerance;                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_ServerSetRotation) == 0x000004, "Wrong alignment on AGRAnimMasterComponent_ServerSetRotation");
static_assert(sizeof(AGRAnimMasterComponent_ServerSetRotation) == 0x000010, "Wrong size on AGRAnimMasterComponent_ServerSetRotation");
static_assert(offsetof(AGRAnimMasterComponent_ServerSetRotation, InRotationMethod) == 0x000000, "Member 'AGRAnimMasterComponent_ServerSetRotation::InRotationMethod' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_ServerSetRotation, InRotationSpeed) == 0x000004, "Member 'AGRAnimMasterComponent_ServerSetRotation::InRotationSpeed' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_ServerSetRotation, InTurnStartAngle) == 0x000008, "Member 'AGRAnimMasterComponent_ServerSetRotation::InTurnStartAngle' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_ServerSetRotation, InTurnStopTolerance) == 0x00000C, "Member 'AGRAnimMasterComponent_ServerSetRotation::InTurnStopTolerance' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.ServerSetupAimOffset
// 0x0002 (0x0002 - 0x0000)
struct AGRAnimMasterComponent_ServerSetupAimOffset final
{
public:
	EAGR_AimOffsets                               InAimOffsetType;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAGR_AimOffsetClamp                           InAimBehavior;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_ServerSetupAimOffset) == 0x000001, "Wrong alignment on AGRAnimMasterComponent_ServerSetupAimOffset");
static_assert(sizeof(AGRAnimMasterComponent_ServerSetupAimOffset) == 0x000002, "Wrong size on AGRAnimMasterComponent_ServerSetupAimOffset");
static_assert(offsetof(AGRAnimMasterComponent_ServerSetupAimOffset, InAimOffsetType) == 0x000000, "Member 'AGRAnimMasterComponent_ServerSetupAimOffset::InAimOffsetType' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_ServerSetupAimOffset, InAimBehavior) == 0x000001, "Member 'AGRAnimMasterComponent_ServerSetupAimOffset::InAimBehavior' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.SetupAimOffset
// 0x001C (0x001C - 0x0000)
struct AGRAnimMasterComponent_SetupAimOffset final
{
public:
	EAGR_AimOffsets                               InAimOffsetType;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAGR_AimOffsetClamp                           InAimBehavior;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAimClamp;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCameraBased;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InAimSocketName;                                   // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLookAtSocketName;                                // 0x0014(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_SetupAimOffset) == 0x000004, "Wrong alignment on AGRAnimMasterComponent_SetupAimOffset");
static_assert(sizeof(AGRAnimMasterComponent_SetupAimOffset) == 0x00001C, "Wrong size on AGRAnimMasterComponent_SetupAimOffset");
static_assert(offsetof(AGRAnimMasterComponent_SetupAimOffset, InAimOffsetType) == 0x000000, "Member 'AGRAnimMasterComponent_SetupAimOffset::InAimOffsetType' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_SetupAimOffset, InAimBehavior) == 0x000001, "Member 'AGRAnimMasterComponent_SetupAimOffset::InAimBehavior' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_SetupAimOffset, InAimClamp) == 0x000004, "Member 'AGRAnimMasterComponent_SetupAimOffset::InAimClamp' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_SetupAimOffset, InCameraBased) == 0x000008, "Member 'AGRAnimMasterComponent_SetupAimOffset::InCameraBased' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_SetupAimOffset, InAimSocketName) == 0x00000C, "Member 'AGRAnimMasterComponent_SetupAimOffset::InAimSocketName' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_SetupAimOffset, InLookAtSocketName) == 0x000014, "Member 'AGRAnimMasterComponent_SetupAimOffset::InLookAtSocketName' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.SetupBasePose
// 0x0008 (0x0008 - 0x0000)
struct AGRAnimMasterComponent_SetupBasePose final
{
public:
	struct FGameplayTag                           InBasePose;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_SetupBasePose) == 0x000004, "Wrong alignment on AGRAnimMasterComponent_SetupBasePose");
static_assert(sizeof(AGRAnimMasterComponent_SetupBasePose) == 0x000008, "Wrong size on AGRAnimMasterComponent_SetupBasePose");
static_assert(offsetof(AGRAnimMasterComponent_SetupBasePose, InBasePose) == 0x000000, "Member 'AGRAnimMasterComponent_SetupBasePose::InBasePose' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.SetupFpp
// 0x0001 (0x0001 - 0x0000)
struct AGRAnimMasterComponent_SetupFpp final
{
public:
	bool                                          bInFirstPerson;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_SetupFpp) == 0x000001, "Wrong alignment on AGRAnimMasterComponent_SetupFpp");
static_assert(sizeof(AGRAnimMasterComponent_SetupFpp) == 0x000001, "Wrong size on AGRAnimMasterComponent_SetupFpp");
static_assert(offsetof(AGRAnimMasterComponent_SetupFpp, bInFirstPerson) == 0x000000, "Member 'AGRAnimMasterComponent_SetupFpp::bInFirstPerson' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.SetupOverlayPose
// 0x0008 (0x0008 - 0x0000)
struct AGRAnimMasterComponent_SetupOverlayPose final
{
public:
	struct FGameplayTag                           InOverlayPose;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_SetupOverlayPose) == 0x000004, "Wrong alignment on AGRAnimMasterComponent_SetupOverlayPose");
static_assert(sizeof(AGRAnimMasterComponent_SetupOverlayPose) == 0x000008, "Wrong size on AGRAnimMasterComponent_SetupOverlayPose");
static_assert(offsetof(AGRAnimMasterComponent_SetupOverlayPose, InOverlayPose) == 0x000000, "Member 'AGRAnimMasterComponent_SetupOverlayPose::InOverlayPose' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.SetupRotation
// 0x0010 (0x0010 - 0x0000)
struct AGRAnimMasterComponent_SetupRotation final
{
public:
	EAGR_RotationMethod                           InRotationMethod;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InRotationSpeed;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTurnStartAngle;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTurnStopTolerance;                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_SetupRotation) == 0x000004, "Wrong alignment on AGRAnimMasterComponent_SetupRotation");
static_assert(sizeof(AGRAnimMasterComponent_SetupRotation) == 0x000010, "Wrong size on AGRAnimMasterComponent_SetupRotation");
static_assert(offsetof(AGRAnimMasterComponent_SetupRotation, InRotationMethod) == 0x000000, "Member 'AGRAnimMasterComponent_SetupRotation::InRotationMethod' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_SetupRotation, InRotationSpeed) == 0x000004, "Member 'AGRAnimMasterComponent_SetupRotation::InRotationSpeed' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_SetupRotation, InTurnStartAngle) == 0x000008, "Member 'AGRAnimMasterComponent_SetupRotation::InTurnStartAngle' has a wrong offset!");
static_assert(offsetof(AGRAnimMasterComponent_SetupRotation, InTurnStopTolerance) == 0x00000C, "Member 'AGRAnimMasterComponent_SetupRotation::InTurnStopTolerance' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.OnRep_BasePose
// 0x0008 (0x0008 - 0x0000)
struct AGRAnimMasterComponent_OnRep_BasePose final
{
public:
	struct FGameplayTag                           OldValue;                                          // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_OnRep_BasePose) == 0x000004, "Wrong alignment on AGRAnimMasterComponent_OnRep_BasePose");
static_assert(sizeof(AGRAnimMasterComponent_OnRep_BasePose) == 0x000008, "Wrong size on AGRAnimMasterComponent_OnRep_BasePose");
static_assert(offsetof(AGRAnimMasterComponent_OnRep_BasePose, OldValue) == 0x000000, "Member 'AGRAnimMasterComponent_OnRep_BasePose::OldValue' has a wrong offset!");

// Function AGRPRO.AGRAnimMasterComponent.OnRep_OverlayPose
// 0x0008 (0x0008 - 0x0000)
struct AGRAnimMasterComponent_OnRep_OverlayPose final
{
public:
	struct FGameplayTag                           OldValue;                                          // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRAnimMasterComponent_OnRep_OverlayPose) == 0x000004, "Wrong alignment on AGRAnimMasterComponent_OnRep_OverlayPose");
static_assert(sizeof(AGRAnimMasterComponent_OnRep_OverlayPose) == 0x000008, "Wrong size on AGRAnimMasterComponent_OnRep_OverlayPose");
static_assert(offsetof(AGRAnimMasterComponent_OnRep_OverlayPose, OldValue) == 0x000000, "Member 'AGRAnimMasterComponent_OnRep_OverlayPose::OldValue' has a wrong offset!");

// Function AGRPRO.AGRLibrary.K2_GetAnimationMaster
// 0x0010 (0x0010 - 0x0000)
struct AGRLibrary_K2_GetAnimationMaster final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGRAnimMasterComponent*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRLibrary_K2_GetAnimationMaster) == 0x000008, "Wrong alignment on AGRLibrary_K2_GetAnimationMaster");
static_assert(sizeof(AGRLibrary_K2_GetAnimationMaster) == 0x000010, "Wrong size on AGRLibrary_K2_GetAnimationMaster");
static_assert(offsetof(AGRLibrary_K2_GetAnimationMaster, Actor) == 0x000000, "Member 'AGRLibrary_K2_GetAnimationMaster::Actor' has a wrong offset!");
static_assert(offsetof(AGRLibrary_K2_GetAnimationMaster, ReturnValue) == 0x000008, "Member 'AGRLibrary_K2_GetAnimationMaster::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGRLibrary.K2_GetCombatManager
// 0x0010 (0x0010 - 0x0000)
struct AGRLibrary_K2_GetCombatManager final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGR_CombatManager*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRLibrary_K2_GetCombatManager) == 0x000008, "Wrong alignment on AGRLibrary_K2_GetCombatManager");
static_assert(sizeof(AGRLibrary_K2_GetCombatManager) == 0x000010, "Wrong size on AGRLibrary_K2_GetCombatManager");
static_assert(offsetof(AGRLibrary_K2_GetCombatManager, Actor) == 0x000000, "Member 'AGRLibrary_K2_GetCombatManager::Actor' has a wrong offset!");
static_assert(offsetof(AGRLibrary_K2_GetCombatManager, ReturnValue) == 0x000008, "Member 'AGRLibrary_K2_GetCombatManager::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGRLibrary.K2_GetEquipment
// 0x0010 (0x0010 - 0x0000)
struct AGRLibrary_K2_GetEquipment final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGR_EquipmentManager*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRLibrary_K2_GetEquipment) == 0x000008, "Wrong alignment on AGRLibrary_K2_GetEquipment");
static_assert(sizeof(AGRLibrary_K2_GetEquipment) == 0x000010, "Wrong size on AGRLibrary_K2_GetEquipment");
static_assert(offsetof(AGRLibrary_K2_GetEquipment, Actor) == 0x000000, "Member 'AGRLibrary_K2_GetEquipment::Actor' has a wrong offset!");
static_assert(offsetof(AGRLibrary_K2_GetEquipment, ReturnValue) == 0x000008, "Member 'AGRLibrary_K2_GetEquipment::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGRLibrary.K2_GetInventory
// 0x0010 (0x0010 - 0x0000)
struct AGRLibrary_K2_GetInventory final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGR_InventoryManager*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRLibrary_K2_GetInventory) == 0x000008, "Wrong alignment on AGRLibrary_K2_GetInventory");
static_assert(sizeof(AGRLibrary_K2_GetInventory) == 0x000010, "Wrong size on AGRLibrary_K2_GetInventory");
static_assert(offsetof(AGRLibrary_K2_GetInventory, Actor) == 0x000000, "Member 'AGRLibrary_K2_GetInventory::Actor' has a wrong offset!");
static_assert(offsetof(AGRLibrary_K2_GetInventory, ReturnValue) == 0x000008, "Member 'AGRLibrary_K2_GetInventory::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGRLibrary.K2_GetItemComponent
// 0x0010 (0x0010 - 0x0000)
struct AGRLibrary_K2_GetItemComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGR_ItemComponent*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRLibrary_K2_GetItemComponent) == 0x000008, "Wrong alignment on AGRLibrary_K2_GetItemComponent");
static_assert(sizeof(AGRLibrary_K2_GetItemComponent) == 0x000010, "Wrong size on AGRLibrary_K2_GetItemComponent");
static_assert(offsetof(AGRLibrary_K2_GetItemComponent, Actor) == 0x000000, "Member 'AGRLibrary_K2_GetItemComponent::Actor' has a wrong offset!");
static_assert(offsetof(AGRLibrary_K2_GetItemComponent, ReturnValue) == 0x000008, "Member 'AGRLibrary_K2_GetItemComponent::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGRLibrary.K2_GetSound
// 0x0010 (0x0010 - 0x0000)
struct AGRLibrary_K2_GetSound final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGR_SoundMaster*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGRLibrary_K2_GetSound) == 0x000008, "Wrong alignment on AGRLibrary_K2_GetSound");
static_assert(sizeof(AGRLibrary_K2_GetSound) == 0x000010, "Wrong size on AGRLibrary_K2_GetSound");
static_assert(offsetof(AGRLibrary_K2_GetSound, Actor) == 0x000000, "Member 'AGRLibrary_K2_GetSound::Actor' has a wrong offset!");
static_assert(offsetof(AGRLibrary_K2_GetSound, ReturnValue) == 0x000008, "Member 'AGRLibrary_K2_GetSound::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_CombatManager.AddTraceMesh
// 0x0020 (0x0020 - 0x0000)
struct AGR_CombatManager_AddTraceMesh final
{
public:
	class UPrimitiveComponent*                    Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InStart;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEnd;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAGR_CombatColliderType                       CollisionHandling;                                 // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_CombatManager_AddTraceMesh) == 0x000008, "Wrong alignment on AGR_CombatManager_AddTraceMesh");
static_assert(sizeof(AGR_CombatManager_AddTraceMesh) == 0x000020, "Wrong size on AGR_CombatManager_AddTraceMesh");
static_assert(offsetof(AGR_CombatManager_AddTraceMesh, Mesh) == 0x000000, "Member 'AGR_CombatManager_AddTraceMesh::Mesh' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_AddTraceMesh, InStart) == 0x000008, "Member 'AGR_CombatManager_AddTraceMesh::InStart' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_AddTraceMesh, InEnd) == 0x000010, "Member 'AGR_CombatManager_AddTraceMesh::InEnd' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_AddTraceMesh, CollisionHandling) == 0x000018, "Member 'AGR_CombatManager_AddTraceMesh::CollisionHandling' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_AddTraceMesh, ReturnValue) == 0x00001C, "Member 'AGR_CombatManager_AddTraceMesh::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_CombatManager.AddWeapopnTraceMesh
// 0x0100 (0x0100 - 0x0000)
struct AGR_CombatManager_AddWeapopnTraceMesh final
{
public:
	class UPrimitiveComponent*                    Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InStart;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEnd;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachBoneName;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAGR_CombatColliderType                       CollisionHandling;                                 // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartOffset;                                       // 0x0030(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             EndOffset;                                         // 0x0090(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00F0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_CombatManager_AddWeapopnTraceMesh) == 0x000010, "Wrong alignment on AGR_CombatManager_AddWeapopnTraceMesh");
static_assert(sizeof(AGR_CombatManager_AddWeapopnTraceMesh) == 0x000100, "Wrong size on AGR_CombatManager_AddWeapopnTraceMesh");
static_assert(offsetof(AGR_CombatManager_AddWeapopnTraceMesh, Mesh) == 0x000000, "Member 'AGR_CombatManager_AddWeapopnTraceMesh::Mesh' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_AddWeapopnTraceMesh, InStart) == 0x000008, "Member 'AGR_CombatManager_AddWeapopnTraceMesh::InStart' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_AddWeapopnTraceMesh, InEnd) == 0x000010, "Member 'AGR_CombatManager_AddWeapopnTraceMesh::InEnd' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_AddWeapopnTraceMesh, AttachBoneName) == 0x000018, "Member 'AGR_CombatManager_AddWeapopnTraceMesh::AttachBoneName' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_AddWeapopnTraceMesh, CollisionHandling) == 0x000020, "Member 'AGR_CombatManager_AddWeapopnTraceMesh::CollisionHandling' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_AddWeapopnTraceMesh, StartOffset) == 0x000030, "Member 'AGR_CombatManager_AddWeapopnTraceMesh::StartOffset' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_AddWeapopnTraceMesh, EndOffset) == 0x000090, "Member 'AGR_CombatManager_AddWeapopnTraceMesh::EndOffset' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_AddWeapopnTraceMesh, ReturnValue) == 0x0000F0, "Member 'AGR_CombatManager_AddWeapopnTraceMesh::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_CombatManager.GetAllWeapons
// 0x0010 (0x0010 - 0x0000)
struct AGR_CombatManager_GetAllWeapons final
{
public:
	TArray<class AActor*>                         OutWeapons;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_CombatManager_GetAllWeapons) == 0x000008, "Wrong alignment on AGR_CombatManager_GetAllWeapons");
static_assert(sizeof(AGR_CombatManager_GetAllWeapons) == 0x000010, "Wrong size on AGR_CombatManager_GetAllWeapons");
static_assert(offsetof(AGR_CombatManager_GetAllWeapons, OutWeapons) == 0x000000, "Member 'AGR_CombatManager_GetAllWeapons::OutWeapons' has a wrong offset!");

// Function AGRPRO.AGR_CombatManager.RemoveTraceMesh
// 0x0008 (0x0008 - 0x0000)
struct AGR_CombatManager_RemoveTraceMesh final
{
public:
	int32                                         KeyIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_CombatManager_RemoveTraceMesh) == 0x000004, "Wrong alignment on AGR_CombatManager_RemoveTraceMesh");
static_assert(sizeof(AGR_CombatManager_RemoveTraceMesh) == 0x000008, "Wrong size on AGR_CombatManager_RemoveTraceMesh");
static_assert(offsetof(AGR_CombatManager_RemoveTraceMesh, KeyIndex) == 0x000000, "Member 'AGR_CombatManager_RemoveTraceMesh::KeyIndex' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_RemoveTraceMesh, ReturnValue) == 0x000004, "Member 'AGR_CombatManager_RemoveTraceMesh::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_CombatManager.SetupDebug
// 0x0001 (0x0001 - 0x0000)
struct AGR_CombatManager_SetupDebug final
{
public:
	bool                                          bInDebug;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_CombatManager_SetupDebug) == 0x000001, "Wrong alignment on AGR_CombatManager_SetupDebug");
static_assert(sizeof(AGR_CombatManager_SetupDebug) == 0x000001, "Wrong size on AGR_CombatManager_SetupDebug");
static_assert(offsetof(AGR_CombatManager_SetupDebug, bInDebug) == 0x000000, "Member 'AGR_CombatManager_SetupDebug::bInDebug' has a wrong offset!");

// Function AGRPRO.AGR_CombatManager.StartTrace
// 0x0050 (0x0050 - 0x0000)
struct AGR_CombatManager_StartTrace final
{
public:
	const class UAnimSequenceBase*                Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimMontage*                     Montage;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InOnlyEffectiveStart;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InOnlyEffectiveEnd;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAGRAttackNotifyStateDataExtra         ExtraData;                                         // 0x0028(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_CombatManager_StartTrace) == 0x000008, "Wrong alignment on AGR_CombatManager_StartTrace");
static_assert(sizeof(AGR_CombatManager_StartTrace) == 0x000050, "Wrong size on AGR_CombatManager_StartTrace");
static_assert(offsetof(AGR_CombatManager_StartTrace, Animation) == 0x000000, "Member 'AGR_CombatManager_StartTrace::Animation' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_StartTrace, Montage) == 0x000008, "Member 'AGR_CombatManager_StartTrace::Montage' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_StartTrace, InOnlyEffectiveStart) == 0x000010, "Member 'AGR_CombatManager_StartTrace::InOnlyEffectiveStart' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_StartTrace, InOnlyEffectiveEnd) == 0x000018, "Member 'AGR_CombatManager_StartTrace::InOnlyEffectiveEnd' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_StartTrace, StartTime) == 0x000020, "Member 'AGR_CombatManager_StartTrace::StartTime' has a wrong offset!");
static_assert(offsetof(AGR_CombatManager_StartTrace, ExtraData) == 0x000028, "Member 'AGR_CombatManager_StartTrace::ExtraData' has a wrong offset!");

// Function AGRPRO.AGR_EquipmentManager.EquipItemInSlot
// 0x0028 (0x0028 - 0x0000)
struct AGR_EquipmentManager_EquipItemInSlot final
{
public:
	class FName                                   Slot;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ItemActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OutPreviousItem;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OutNewItem;                                        // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_EquipmentManager_EquipItemInSlot) == 0x000008, "Wrong alignment on AGR_EquipmentManager_EquipItemInSlot");
static_assert(sizeof(AGR_EquipmentManager_EquipItemInSlot) == 0x000028, "Wrong size on AGR_EquipmentManager_EquipItemInSlot");
static_assert(offsetof(AGR_EquipmentManager_EquipItemInSlot, Slot) == 0x000000, "Member 'AGR_EquipmentManager_EquipItemInSlot::Slot' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_EquipItemInSlot, ItemActor) == 0x000008, "Member 'AGR_EquipmentManager_EquipItemInSlot::ItemActor' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_EquipItemInSlot, OutPreviousItem) == 0x000010, "Member 'AGR_EquipmentManager_EquipItemInSlot::OutPreviousItem' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_EquipItemInSlot, OutNewItem) == 0x000018, "Member 'AGR_EquipmentManager_EquipItemInSlot::OutNewItem' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_EquipItemInSlot, ReturnValue) == 0x000020, "Member 'AGR_EquipmentManager_EquipItemInSlot::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_EquipmentManager.GetAllItems
// 0x0018 (0x0018 - 0x0000)
struct AGR_EquipmentManager_GetAllItems final
{
public:
	TArray<class AActor*>                         OutItems;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_EquipmentManager_GetAllItems) == 0x000008, "Wrong alignment on AGR_EquipmentManager_GetAllItems");
static_assert(sizeof(AGR_EquipmentManager_GetAllItems) == 0x000018, "Wrong size on AGR_EquipmentManager_GetAllItems");
static_assert(offsetof(AGR_EquipmentManager_GetAllItems, OutItems) == 0x000000, "Member 'AGR_EquipmentManager_GetAllItems::OutItems' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_GetAllItems, ReturnValue) == 0x000010, "Member 'AGR_EquipmentManager_GetAllItems::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_EquipmentManager.GetItemInSlot
// 0x0018 (0x0018 - 0x0000)
struct AGR_EquipmentManager_GetItemInSlot final
{
public:
	class FName                                   Slot;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OutItem;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_EquipmentManager_GetItemInSlot) == 0x000008, "Wrong alignment on AGR_EquipmentManager_GetItemInSlot");
static_assert(sizeof(AGR_EquipmentManager_GetItemInSlot) == 0x000018, "Wrong size on AGR_EquipmentManager_GetItemInSlot");
static_assert(offsetof(AGR_EquipmentManager_GetItemInSlot, Slot) == 0x000000, "Member 'AGR_EquipmentManager_GetItemInSlot::Slot' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_GetItemInSlot, OutItem) == 0x000008, "Member 'AGR_EquipmentManager_GetItemInSlot::OutItem' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_GetItemInSlot, ReturnValue) == 0x000010, "Member 'AGR_EquipmentManager_GetItemInSlot::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_EquipmentManager.GetShortcutReference
// 0x0018 (0x0018 - 0x0000)
struct AGR_EquipmentManager_GetShortcutReference final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OutActor;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_EquipmentManager_GetShortcutReference) == 0x000008, "Wrong alignment on AGR_EquipmentManager_GetShortcutReference");
static_assert(sizeof(AGR_EquipmentManager_GetShortcutReference) == 0x000018, "Wrong size on AGR_EquipmentManager_GetShortcutReference");
static_assert(offsetof(AGR_EquipmentManager_GetShortcutReference, Key) == 0x000000, "Member 'AGR_EquipmentManager_GetShortcutReference::Key' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_GetShortcutReference, OutActor) == 0x000008, "Member 'AGR_EquipmentManager_GetShortcutReference::OutActor' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_GetShortcutReference, ReturnValue) == 0x000010, "Member 'AGR_EquipmentManager_GetShortcutReference::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_EquipmentManager.SaveShortcutReference
// 0x0010 (0x0010 - 0x0000)
struct AGR_EquipmentManager_SaveShortcutReference final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_EquipmentManager_SaveShortcutReference) == 0x000008, "Wrong alignment on AGR_EquipmentManager_SaveShortcutReference");
static_assert(sizeof(AGR_EquipmentManager_SaveShortcutReference) == 0x000010, "Wrong size on AGR_EquipmentManager_SaveShortcutReference");
static_assert(offsetof(AGR_EquipmentManager_SaveShortcutReference, Key) == 0x000000, "Member 'AGR_EquipmentManager_SaveShortcutReference::Key' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_SaveShortcutReference, Item) == 0x000008, "Member 'AGR_EquipmentManager_SaveShortcutReference::Item' has a wrong offset!");

// Function AGRPRO.AGR_EquipmentManager.SetupDefineSlots
// 0x0010 (0x0010 - 0x0000)
struct AGR_EquipmentManager_SetupDefineSlots final
{
public:
	TArray<struct FEquipment>                     InEquipmentList;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_EquipmentManager_SetupDefineSlots) == 0x000008, "Wrong alignment on AGR_EquipmentManager_SetupDefineSlots");
static_assert(sizeof(AGR_EquipmentManager_SetupDefineSlots) == 0x000010, "Wrong size on AGR_EquipmentManager_SetupDefineSlots");
static_assert(offsetof(AGR_EquipmentManager_SetupDefineSlots, InEquipmentList) == 0x000000, "Member 'AGR_EquipmentManager_SetupDefineSlots::InEquipmentList' has a wrong offset!");

// Function AGRPRO.AGR_EquipmentManager.UnEquipByReference
// 0x0028 (0x0028 - 0x0000)
struct AGR_EquipmentManager_UnEquipByReference final
{
public:
	class AActor*                                 ItemActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutNote;                                           // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_EquipmentManager_UnEquipByReference) == 0x000008, "Wrong alignment on AGR_EquipmentManager_UnEquipByReference");
static_assert(sizeof(AGR_EquipmentManager_UnEquipByReference) == 0x000028, "Wrong size on AGR_EquipmentManager_UnEquipByReference");
static_assert(offsetof(AGR_EquipmentManager_UnEquipByReference, ItemActor) == 0x000000, "Member 'AGR_EquipmentManager_UnEquipByReference::ItemActor' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_UnEquipByReference, OutNote) == 0x000008, "Member 'AGR_EquipmentManager_UnEquipByReference::OutNote' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_UnEquipByReference, ReturnValue) == 0x000020, "Member 'AGR_EquipmentManager_UnEquipByReference::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_EquipmentManager.UnEquipItemFromSlot
// 0x0018 (0x0018 - 0x0000)
struct AGR_EquipmentManager_UnEquipItemFromSlot final
{
public:
	class FName                                   Slot;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OutItemUnequipped;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_EquipmentManager_UnEquipItemFromSlot) == 0x000008, "Wrong alignment on AGR_EquipmentManager_UnEquipItemFromSlot");
static_assert(sizeof(AGR_EquipmentManager_UnEquipItemFromSlot) == 0x000018, "Wrong size on AGR_EquipmentManager_UnEquipItemFromSlot");
static_assert(offsetof(AGR_EquipmentManager_UnEquipItemFromSlot, Slot) == 0x000000, "Member 'AGR_EquipmentManager_UnEquipItemFromSlot::Slot' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_UnEquipItemFromSlot, OutItemUnequipped) == 0x000008, "Member 'AGR_EquipmentManager_UnEquipItemFromSlot::OutItemUnequipped' has a wrong offset!");
static_assert(offsetof(AGR_EquipmentManager_UnEquipItemFromSlot, ReturnValue) == 0x000010, "Member 'AGR_EquipmentManager_UnEquipItemFromSlot::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_InventoryManager.AddItemsOfClass
// 0x0030 (0x0030 - 0x0000)
struct AGR_InventoryManager_AddItemsOfClass final
{
public:
	TSubclassOf<class AActor>                     Param_Class;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutNote;                                           // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_InventoryManager_AddItemsOfClass) == 0x000008, "Wrong alignment on AGR_InventoryManager_AddItemsOfClass");
static_assert(sizeof(AGR_InventoryManager_AddItemsOfClass) == 0x000030, "Wrong size on AGR_InventoryManager_AddItemsOfClass");
static_assert(offsetof(AGR_InventoryManager_AddItemsOfClass, Param_Class) == 0x000000, "Member 'AGR_InventoryManager_AddItemsOfClass::Param_Class' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_AddItemsOfClass, Quantity) == 0x000008, "Member 'AGR_InventoryManager_AddItemsOfClass::Quantity' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_AddItemsOfClass, OutNote) == 0x000010, "Member 'AGR_InventoryManager_AddItemsOfClass::OutNote' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_AddItemsOfClass, ReturnValue) == 0x000028, "Member 'AGR_InventoryManager_AddItemsOfClass::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_InventoryManager.AddItemToInventoryDirectly
// 0x0008 (0x0008 - 0x0000)
struct AGR_InventoryManager_AddItemToInventoryDirectly final
{
public:
	class AActor*                                 Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_InventoryManager_AddItemToInventoryDirectly) == 0x000008, "Wrong alignment on AGR_InventoryManager_AddItemToInventoryDirectly");
static_assert(sizeof(AGR_InventoryManager_AddItemToInventoryDirectly) == 0x000008, "Wrong size on AGR_InventoryManager_AddItemToInventoryDirectly");
static_assert(offsetof(AGR_InventoryManager_AddItemToInventoryDirectly, Item) == 0x000000, "Member 'AGR_InventoryManager_AddItemToInventoryDirectly::Item' has a wrong offset!");

// Function AGRPRO.AGR_InventoryManager.GetAllItems
// 0x0010 (0x0010 - 0x0000)
struct AGR_InventoryManager_GetAllItems final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_InventoryManager_GetAllItems) == 0x000008, "Wrong alignment on AGR_InventoryManager_GetAllItems");
static_assert(sizeof(AGR_InventoryManager_GetAllItems) == 0x000010, "Wrong size on AGR_InventoryManager_GetAllItems");
static_assert(offsetof(AGR_InventoryManager_GetAllItems, ReturnValue) == 0x000000, "Member 'AGR_InventoryManager_GetAllItems::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_InventoryManager.GetAllItemsOfClass
// 0x0020 (0x0020 - 0x0000)
struct AGR_InventoryManager_GetAllItemsOfClass final
{
public:
	TSubclassOf<class AActor>                     Param_Class;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutFilteredArray;                                  // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_InventoryManager_GetAllItemsOfClass) == 0x000008, "Wrong alignment on AGR_InventoryManager_GetAllItemsOfClass");
static_assert(sizeof(AGR_InventoryManager_GetAllItemsOfClass) == 0x000020, "Wrong size on AGR_InventoryManager_GetAllItemsOfClass");
static_assert(offsetof(AGR_InventoryManager_GetAllItemsOfClass, Param_Class) == 0x000000, "Member 'AGR_InventoryManager_GetAllItemsOfClass::Param_Class' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_GetAllItemsOfClass, OutFilteredArray) == 0x000008, "Member 'AGR_InventoryManager_GetAllItemsOfClass::OutFilteredArray' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_GetAllItemsOfClass, ReturnValue) == 0x000018, "Member 'AGR_InventoryManager_GetAllItemsOfClass::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_InventoryManager.GetAllItemsOfTagSlotType
// 0x0020 (0x0020 - 0x0000)
struct AGR_InventoryManager_GetAllItemsOfTagSlotType final
{
public:
	struct FGameplayTag                           SlotTypeFilter;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutItemsWithTag;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_InventoryManager_GetAllItemsOfTagSlotType) == 0x000008, "Wrong alignment on AGR_InventoryManager_GetAllItemsOfTagSlotType");
static_assert(sizeof(AGR_InventoryManager_GetAllItemsOfTagSlotType) == 0x000020, "Wrong size on AGR_InventoryManager_GetAllItemsOfTagSlotType");
static_assert(offsetof(AGR_InventoryManager_GetAllItemsOfTagSlotType, SlotTypeFilter) == 0x000000, "Member 'AGR_InventoryManager_GetAllItemsOfTagSlotType::SlotTypeFilter' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_GetAllItemsOfTagSlotType, OutItemsWithTag) == 0x000008, "Member 'AGR_InventoryManager_GetAllItemsOfTagSlotType::OutItemsWithTag' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_GetAllItemsOfTagSlotType, ReturnValue) == 0x000018, "Member 'AGR_InventoryManager_GetAllItemsOfTagSlotType::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_InventoryManager.HasEnoughItems
// 0x0030 (0x0030 - 0x0000)
struct AGR_InventoryManager_HasEnoughItems final
{
public:
	TSubclassOf<class AActor>                     Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutNote;                                           // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_InventoryManager_HasEnoughItems) == 0x000008, "Wrong alignment on AGR_InventoryManager_HasEnoughItems");
static_assert(sizeof(AGR_InventoryManager_HasEnoughItems) == 0x000030, "Wrong size on AGR_InventoryManager_HasEnoughItems");
static_assert(offsetof(AGR_InventoryManager_HasEnoughItems, Item) == 0x000000, "Member 'AGR_InventoryManager_HasEnoughItems::Item' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_HasEnoughItems, Quantity) == 0x000008, "Member 'AGR_InventoryManager_HasEnoughItems::Quantity' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_HasEnoughItems, OutNote) == 0x000010, "Member 'AGR_InventoryManager_HasEnoughItems::OutNote' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_HasEnoughItems, ReturnValue) == 0x000028, "Member 'AGR_InventoryManager_HasEnoughItems::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_InventoryManager.HasExactItem
// 0x0010 (0x0010 - 0x0000)
struct AGR_InventoryManager_HasExactItem final
{
public:
	class AActor*                                 Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_InventoryManager_HasExactItem) == 0x000008, "Wrong alignment on AGR_InventoryManager_HasExactItem");
static_assert(sizeof(AGR_InventoryManager_HasExactItem) == 0x000010, "Wrong size on AGR_InventoryManager_HasExactItem");
static_assert(offsetof(AGR_InventoryManager_HasExactItem, Item) == 0x000000, "Member 'AGR_InventoryManager_HasExactItem::Item' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_HasExactItem, ReturnValue) == 0x000008, "Member 'AGR_InventoryManager_HasExactItem::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_InventoryManager.OverwriteId
// 0x0010 (0x0010 - 0x0000)
struct AGR_InventoryManager_OverwriteId final
{
public:
	struct FGuid                                  InInventoryId;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_InventoryManager_OverwriteId) == 0x000004, "Wrong alignment on AGR_InventoryManager_OverwriteId");
static_assert(sizeof(AGR_InventoryManager_OverwriteId) == 0x000010, "Wrong size on AGR_InventoryManager_OverwriteId");
static_assert(offsetof(AGR_InventoryManager_OverwriteId, InInventoryId) == 0x000000, "Member 'AGR_InventoryManager_OverwriteId::InInventoryId' has a wrong offset!");

// Function AGRPRO.AGR_InventoryManager.RemoveItemsOfClass
// 0x0030 (0x0030 - 0x0000)
struct AGR_InventoryManager_RemoveItemsOfClass final
{
public:
	TSubclassOf<class AActor>                     Param_Class;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutNote;                                           // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_InventoryManager_RemoveItemsOfClass) == 0x000008, "Wrong alignment on AGR_InventoryManager_RemoveItemsOfClass");
static_assert(sizeof(AGR_InventoryManager_RemoveItemsOfClass) == 0x000030, "Wrong size on AGR_InventoryManager_RemoveItemsOfClass");
static_assert(offsetof(AGR_InventoryManager_RemoveItemsOfClass, Param_Class) == 0x000000, "Member 'AGR_InventoryManager_RemoveItemsOfClass::Param_Class' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_RemoveItemsOfClass, Quantity) == 0x000008, "Member 'AGR_InventoryManager_RemoveItemsOfClass::Quantity' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_RemoveItemsOfClass, OutNote) == 0x000010, "Member 'AGR_InventoryManager_RemoveItemsOfClass::OutNote' has a wrong offset!");
static_assert(offsetof(AGR_InventoryManager_RemoveItemsOfClass, ReturnValue) == 0x000028, "Member 'AGR_InventoryManager_RemoveItemsOfClass::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_ItemComponent.PickUpItem
// 0x0008 (0x0008 - 0x0000)
struct AGR_ItemComponent_PickUpItem final
{
public:
	class UAGR_InventoryManager*                  InventoryPicking;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_ItemComponent_PickUpItem) == 0x000008, "Wrong alignment on AGR_ItemComponent_PickUpItem");
static_assert(sizeof(AGR_ItemComponent_PickUpItem) == 0x000008, "Wrong size on AGR_ItemComponent_PickUpItem");
static_assert(offsetof(AGR_ItemComponent_PickUpItem, InventoryPicking) == 0x000000, "Member 'AGR_ItemComponent_PickUpItem::InventoryPicking' has a wrong offset!");

// Function AGRPRO.AGR_ItemComponent.SplitItems
// 0x0008 (0x0008 - 0x0000)
struct AGR_ItemComponent_SplitItems final
{
public:
	int32                                         SplitSize;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_ItemComponent_SplitItems) == 0x000004, "Wrong alignment on AGR_ItemComponent_SplitItems");
static_assert(sizeof(AGR_ItemComponent_SplitItems) == 0x000008, "Wrong size on AGR_ItemComponent_SplitItems");
static_assert(offsetof(AGR_ItemComponent_SplitItems, SplitSize) == 0x000000, "Member 'AGR_ItemComponent_SplitItems::SplitSize' has a wrong offset!");
static_assert(offsetof(AGR_ItemComponent_SplitItems, ReturnValue) == 0x000004, "Member 'AGR_ItemComponent_SplitItems::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_ItemComponent.UseItem
// 0x0010 (0x0010 - 0x0000)
struct AGR_ItemComponent_UseItem final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_ItemComponent_UseItem) == 0x000008, "Wrong alignment on AGR_ItemComponent_UseItem");
static_assert(sizeof(AGR_ItemComponent_UseItem) == 0x000010, "Wrong size on AGR_ItemComponent_UseItem");
static_assert(offsetof(AGR_ItemComponent_UseItem, User) == 0x000000, "Member 'AGR_ItemComponent_UseItem::User' has a wrong offset!");
static_assert(offsetof(AGR_ItemComponent_UseItem, GameplayTag) == 0x000008, "Member 'AGR_ItemComponent_UseItem::GameplayTag' has a wrong offset!");

// Function AGRPRO.AGR_SoundMaster.FootstepEffect
// 0x00F8 (0x00F8 - 0x0000)
struct AGR_SoundMaster_FootstepEffect final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UAudioComponent*                        Sound;                                             // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Particle;                                          // 0x00F0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_SoundMaster_FootstepEffect) == 0x000008, "Wrong alignment on AGR_SoundMaster_FootstepEffect");
static_assert(sizeof(AGR_SoundMaster_FootstepEffect) == 0x0000F8, "Wrong size on AGR_SoundMaster_FootstepEffect");
static_assert(offsetof(AGR_SoundMaster_FootstepEffect, Hit) == 0x000000, "Member 'AGR_SoundMaster_FootstepEffect::Hit' has a wrong offset!");
static_assert(offsetof(AGR_SoundMaster_FootstepEffect, Sound) == 0x0000E8, "Member 'AGR_SoundMaster_FootstepEffect::Sound' has a wrong offset!");
static_assert(offsetof(AGR_SoundMaster_FootstepEffect, Particle) == 0x0000F0, "Member 'AGR_SoundMaster_FootstepEffect::Particle' has a wrong offset!");

// Function AGRPRO.AGR_SoundMaster.OverwritePickSurface
// 0x0002 (0x0002 - 0x0000)
struct AGR_SoundMaster_OverwritePickSurface final
{
public:
	EPhysicalSurface                              InSurface;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              OutSurface;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_SoundMaster_OverwritePickSurface) == 0x000001, "Wrong alignment on AGR_SoundMaster_OverwritePickSurface");
static_assert(sizeof(AGR_SoundMaster_OverwritePickSurface) == 0x000002, "Wrong size on AGR_SoundMaster_OverwritePickSurface");
static_assert(offsetof(AGR_SoundMaster_OverwritePickSurface, InSurface) == 0x000000, "Member 'AGR_SoundMaster_OverwritePickSurface::InSurface' has a wrong offset!");
static_assert(offsetof(AGR_SoundMaster_OverwritePickSurface, OutSurface) == 0x000001, "Member 'AGR_SoundMaster_OverwritePickSurface::OutSurface' has a wrong offset!");

// Function AGRPRO.AGR_SoundMaster.TryTraceFootstep
// 0x000C (0x000C - 0x0000)
struct AGR_SoundMaster_TryTraceFootstep final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGR_SoundMaster_TryTraceFootstep) == 0x000004, "Wrong alignment on AGR_SoundMaster_TryTraceFootstep");
static_assert(sizeof(AGR_SoundMaster_TryTraceFootstep) == 0x00000C, "Wrong size on AGR_SoundMaster_TryTraceFootstep");
static_assert(offsetof(AGR_SoundMaster_TryTraceFootstep, Key) == 0x000000, "Member 'AGR_SoundMaster_TryTraceFootstep::Key' has a wrong offset!");
static_assert(offsetof(AGR_SoundMaster_TryTraceFootstep, ReturnValue) == 0x000008, "Member 'AGR_SoundMaster_TryTraceFootstep::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_SoundMaster.OverwriteCalcVolume
// 0x0004 (0x0004 - 0x0000)
struct AGR_SoundMaster_OverwriteCalcVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_SoundMaster_OverwriteCalcVolume) == 0x000004, "Wrong alignment on AGR_SoundMaster_OverwriteCalcVolume");
static_assert(sizeof(AGR_SoundMaster_OverwriteCalcVolume) == 0x000004, "Wrong size on AGR_SoundMaster_OverwriteCalcVolume");
static_assert(offsetof(AGR_SoundMaster_OverwriteCalcVolume, ReturnValue) == 0x000000, "Member 'AGR_SoundMaster_OverwriteCalcVolume::ReturnValue' has a wrong offset!");

// Function AGRPRO.AGR_SoundMaster.OverwriteParticleScale
// 0x0018 (0x0018 - 0x0000)
struct AGR_SoundMaster_OverwriteParticleScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGR_SoundMaster_OverwriteParticleScale) == 0x000008, "Wrong alignment on AGR_SoundMaster_OverwriteParticleScale");
static_assert(sizeof(AGR_SoundMaster_OverwriteParticleScale) == 0x000018, "Wrong size on AGR_SoundMaster_OverwriteParticleScale");
static_assert(offsetof(AGR_SoundMaster_OverwriteParticleScale, ReturnValue) == 0x000000, "Member 'AGR_SoundMaster_OverwriteParticleScale::ReturnValue' has a wrong offset!");

// Function AGRPRO.DA_AGR_FootstepConfig.GetSurfaceReaction
// 0x0018 (0x0018 - 0x0000)
struct DA_AGR_FootstepConfig_GetSurfaceReaction final
{
public:
	EPhysicalSurface                              InputParam;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              Sound;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         Particle;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DA_AGR_FootstepConfig_GetSurfaceReaction) == 0x000008, "Wrong alignment on DA_AGR_FootstepConfig_GetSurfaceReaction");
static_assert(sizeof(DA_AGR_FootstepConfig_GetSurfaceReaction) == 0x000018, "Wrong size on DA_AGR_FootstepConfig_GetSurfaceReaction");
static_assert(offsetof(DA_AGR_FootstepConfig_GetSurfaceReaction, InputParam) == 0x000000, "Member 'DA_AGR_FootstepConfig_GetSurfaceReaction::InputParam' has a wrong offset!");
static_assert(offsetof(DA_AGR_FootstepConfig_GetSurfaceReaction, Sound) == 0x000008, "Member 'DA_AGR_FootstepConfig_GetSurfaceReaction::Sound' has a wrong offset!");
static_assert(offsetof(DA_AGR_FootstepConfig_GetSurfaceReaction, Particle) == 0x000010, "Member 'DA_AGR_FootstepConfig_GetSurfaceReaction::Particle' has a wrong offset!");

// Function AGRPRO.DA_AGR_FootstepConfig.GetFootStepSettings
// 0x0010 (0x0010 - 0x0000)
struct DA_AGR_FootstepConfig_GetFootStepSettings final
{
public:
	class USoundAttenuation*                      AttenuationRef;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencyRef;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DA_AGR_FootstepConfig_GetFootStepSettings) == 0x000008, "Wrong alignment on DA_AGR_FootstepConfig_GetFootStepSettings");
static_assert(sizeof(DA_AGR_FootstepConfig_GetFootStepSettings) == 0x000010, "Wrong size on DA_AGR_FootstepConfig_GetFootStepSettings");
static_assert(offsetof(DA_AGR_FootstepConfig_GetFootStepSettings, AttenuationRef) == 0x000000, "Member 'DA_AGR_FootstepConfig_GetFootStepSettings::AttenuationRef' has a wrong offset!");
static_assert(offsetof(DA_AGR_FootstepConfig_GetFootStepSettings, ConcurrencyRef) == 0x000008, "Member 'DA_AGR_FootstepConfig_GetFootStepSettings::ConcurrencyRef' has a wrong offset!");

// Function AGRPRO.DA_AGR_FootstepConfig.GetVelocityRange
// 0x0008 (0x0008 - 0x0000)
struct DA_AGR_FootstepConfig_GetVelocityRange final
{
public:
	float                                         MinRange;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DA_AGR_FootstepConfig_GetVelocityRange) == 0x000004, "Wrong alignment on DA_AGR_FootstepConfig_GetVelocityRange");
static_assert(sizeof(DA_AGR_FootstepConfig_GetVelocityRange) == 0x000008, "Wrong size on DA_AGR_FootstepConfig_GetVelocityRange");
static_assert(offsetof(DA_AGR_FootstepConfig_GetVelocityRange, MinRange) == 0x000000, "Member 'DA_AGR_FootstepConfig_GetVelocityRange::MinRange' has a wrong offset!");
static_assert(offsetof(DA_AGR_FootstepConfig_GetVelocityRange, MaxRange) == 0x000004, "Member 'DA_AGR_FootstepConfig_GetVelocityRange::MaxRange' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PortalSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct PortalSystem.PortalZonesGridCell
// 0x0010 (0x0010 - 0x0000)
struct FPortalZonesGridCell final
{
public:
	TArray<class APortalSystemZone*>              Zones;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPortalZonesGridCell) == 0x000008, "Wrong alignment on FPortalZonesGridCell");
static_assert(sizeof(FPortalZonesGridCell) == 0x000010, "Wrong size on FPortalZonesGridCell");
static_assert(offsetof(FPortalZonesGridCell, Zones) == 0x000000, "Member 'FPortalZonesGridCell::Zones' has a wrong offset!");

// ScriptStruct PortalSystem.PortalZonesGrid
// 0x0020 (0x0020 - 0x0000)
struct FPortalZonesGrid final
{
public:
	int32                                         HalfWidth;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HalfLength;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CellSize;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPortalZonesGridCell>           Cells;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPortalZonesGrid) == 0x000008, "Wrong alignment on FPortalZonesGrid");
static_assert(sizeof(FPortalZonesGrid) == 0x000020, "Wrong size on FPortalZonesGrid");
static_assert(offsetof(FPortalZonesGrid, HalfWidth) == 0x000000, "Member 'FPortalZonesGrid::HalfWidth' has a wrong offset!");
static_assert(offsetof(FPortalZonesGrid, HalfLength) == 0x000004, "Member 'FPortalZonesGrid::HalfLength' has a wrong offset!");
static_assert(offsetof(FPortalZonesGrid, CellSize) == 0x000008, "Member 'FPortalZonesGrid::CellSize' has a wrong offset!");
static_assert(offsetof(FPortalZonesGrid, Cells) == 0x000010, "Member 'FPortalZonesGrid::Cells' has a wrong offset!");

// ScriptStruct PortalSystem.BasicLine
// 0x0030 (0x0030 - 0x0000)
struct FBasicLine final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBasicLine) == 0x000008, "Wrong alignment on FBasicLine");
static_assert(sizeof(FBasicLine) == 0x000030, "Wrong size on FBasicLine");
static_assert(offsetof(FBasicLine, Start) == 0x000000, "Member 'FBasicLine::Start' has a wrong offset!");
static_assert(offsetof(FBasicLine, End) == 0x000018, "Member 'FBasicLine::End' has a wrong offset!");

}


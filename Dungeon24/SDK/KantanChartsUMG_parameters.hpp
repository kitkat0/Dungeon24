#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KantanChartsUMG

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KantanChartsSlate_structs.hpp"


namespace SDK::Params
{

// Function KantanChartsUMG.KantanChart.SetChartTitle
// 0x0018 (0x0018 - 0x0000)
struct KantanChart_SetChartTitle final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanChart_SetChartTitle) == 0x000008, "Wrong alignment on KantanChart_SetChartTitle");
static_assert(sizeof(KantanChart_SetChartTitle) == 0x000018, "Wrong size on KantanChart_SetChartTitle");
static_assert(offsetof(KantanChart_SetChartTitle, InTitle) == 0x000000, "Member 'KantanChart_SetChartTitle::InTitle' has a wrong offset!");

// Function KantanChartsUMG.KantanChart.SetChartTitlePadding
// 0x0010 (0x0010 - 0x0000)
struct KantanChart_SetChartTitlePadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanChart_SetChartTitlePadding) == 0x000004, "Wrong alignment on KantanChart_SetChartTitlePadding");
static_assert(sizeof(KantanChart_SetChartTitlePadding) == 0x000010, "Wrong size on KantanChart_SetChartTitlePadding");
static_assert(offsetof(KantanChart_SetChartTitlePadding, InPadding) == 0x000000, "Member 'KantanChart_SetChartTitlePadding::InPadding' has a wrong offset!");

// Function KantanChartsUMG.KantanChart.SetMargins
// 0x0010 (0x0010 - 0x0000)
struct KantanChart_SetMargins final
{
public:
	struct FMargin                                InMargins;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanChart_SetMargins) == 0x000004, "Wrong alignment on KantanChart_SetMargins");
static_assert(sizeof(KantanChart_SetMargins) == 0x000010, "Wrong size on KantanChart_SetMargins");
static_assert(offsetof(KantanChart_SetMargins, InMargins) == 0x000000, "Member 'KantanChart_SetMargins::InMargins' has a wrong offset!");

// Function KantanChartsUMG.KantanChart.SetUpdateTickRate
// 0x0004 (0x0004 - 0x0000)
struct KantanChart_SetUpdateTickRate final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanChart_SetUpdateTickRate) == 0x000004, "Wrong alignment on KantanChart_SetUpdateTickRate");
static_assert(sizeof(KantanChart_SetUpdateTickRate) == 0x000004, "Wrong size on KantanChart_SetUpdateTickRate");
static_assert(offsetof(KantanChart_SetUpdateTickRate, InRate) == 0x000000, "Member 'KantanChart_SetUpdateTickRate::InRate' has a wrong offset!");

// Function KantanChartsUMG.KantanCategoryChart.AddCategoryStyleOverride
// 0x0018 (0x0018 - 0x0000)
struct KantanCategoryChart_AddCategoryStyleOverride final
{
public:
	class FName                                   CategoryId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanCategoryChart_AddCategoryStyleOverride) == 0x000004, "Wrong alignment on KantanCategoryChart_AddCategoryStyleOverride");
static_assert(sizeof(KantanCategoryChart_AddCategoryStyleOverride) == 0x000018, "Wrong size on KantanCategoryChart_AddCategoryStyleOverride");
static_assert(offsetof(KantanCategoryChart_AddCategoryStyleOverride, CategoryId) == 0x000000, "Member 'KantanCategoryChart_AddCategoryStyleOverride::CategoryId' has a wrong offset!");
static_assert(offsetof(KantanCategoryChart_AddCategoryStyleOverride, Color) == 0x000008, "Member 'KantanCategoryChart_AddCategoryStyleOverride::Color' has a wrong offset!");

// Function KantanChartsUMG.KantanBarChartBase.SetBarToGapRatio
// 0x0004 (0x0004 - 0x0000)
struct KantanBarChartBase_SetBarToGapRatio final
{
public:
	float                                         InRatio;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanBarChartBase_SetBarToGapRatio) == 0x000004, "Wrong alignment on KantanBarChartBase_SetBarToGapRatio");
static_assert(sizeof(KantanBarChartBase_SetBarToGapRatio) == 0x000004, "Wrong size on KantanBarChartBase_SetBarToGapRatio");
static_assert(offsetof(KantanBarChartBase_SetBarToGapRatio, InRatio) == 0x000000, "Member 'KantanBarChartBase_SetBarToGapRatio::InRatio' has a wrong offset!");

// Function KantanChartsUMG.KantanBarChartBase.SetExtentsDisplay
// 0x0001 (0x0001 - 0x0000)
struct KantanBarChartBase_SetExtentsDisplay final
{
public:
	EKantanBarValueExtents                        InExtents;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanBarChartBase_SetExtentsDisplay) == 0x000001, "Wrong alignment on KantanBarChartBase_SetExtentsDisplay");
static_assert(sizeof(KantanBarChartBase_SetExtentsDisplay) == 0x000001, "Wrong size on KantanBarChartBase_SetExtentsDisplay");
static_assert(offsetof(KantanBarChartBase_SetExtentsDisplay, InExtents) == 0x000000, "Member 'KantanBarChartBase_SetExtentsDisplay::InExtents' has a wrong offset!");

// Function KantanChartsUMG.KantanBarChartBase.SetLabelPosition
// 0x0001 (0x0001 - 0x0000)
struct KantanBarChartBase_SetLabelPosition final
{
public:
	EKantanBarLabelPosition                       InPosition;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanBarChartBase_SetLabelPosition) == 0x000001, "Wrong alignment on KantanBarChartBase_SetLabelPosition");
static_assert(sizeof(KantanBarChartBase_SetLabelPosition) == 0x000001, "Wrong size on KantanBarChartBase_SetLabelPosition");
static_assert(offsetof(KantanBarChartBase_SetLabelPosition, InPosition) == 0x000000, "Member 'KantanBarChartBase_SetLabelPosition::InPosition' has a wrong offset!");

// Function KantanChartsUMG.KantanBarChartBase.SetMaxBarValue
// 0x0004 (0x0004 - 0x0000)
struct KantanBarChartBase_SetMaxBarValue final
{
public:
	float                                         InMaxValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanBarChartBase_SetMaxBarValue) == 0x000004, "Wrong alignment on KantanBarChartBase_SetMaxBarValue");
static_assert(sizeof(KantanBarChartBase_SetMaxBarValue) == 0x000004, "Wrong size on KantanBarChartBase_SetMaxBarValue");
static_assert(offsetof(KantanBarChartBase_SetMaxBarValue, InMaxValue) == 0x000000, "Member 'KantanBarChartBase_SetMaxBarValue::InMaxValue' has a wrong offset!");

// Function KantanChartsUMG.KantanBarChartBase.SetOrientation
// 0x0001 (0x0001 - 0x0000)
struct KantanBarChartBase_SetOrientation final
{
public:
	EKantanBarChartOrientation                    InOrientation;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanBarChartBase_SetOrientation) == 0x000001, "Wrong alignment on KantanBarChartBase_SetOrientation");
static_assert(sizeof(KantanBarChartBase_SetOrientation) == 0x000001, "Wrong size on KantanBarChartBase_SetOrientation");
static_assert(offsetof(KantanBarChartBase_SetOrientation, InOrientation) == 0x000000, "Member 'KantanBarChartBase_SetOrientation::InOrientation' has a wrong offset!");

// Function KantanChartsUMG.KantanBarChartBase.SetValueAxisConfig
// 0x0048 (0x0048 - 0x0000)
struct KantanBarChartBase_SetValueAxisConfig final
{
public:
	struct FCartesianAxisConfig                   InCfg;                                             // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanBarChartBase_SetValueAxisConfig) == 0x000008, "Wrong alignment on KantanBarChartBase_SetValueAxisConfig");
static_assert(sizeof(KantanBarChartBase_SetValueAxisConfig) == 0x000048, "Wrong size on KantanBarChartBase_SetValueAxisConfig");
static_assert(offsetof(KantanBarChartBase_SetValueAxisConfig, InCfg) == 0x000000, "Member 'KantanBarChartBase_SetValueAxisConfig::InCfg' has a wrong offset!");

// Function KantanChartsUMG.BarChart.SetDatasource
// 0x0010 (0x0010 - 0x0000)
struct BarChart_SetDatasource final
{
public:
	class UObject*                                InDatasource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BarChart_SetDatasource) == 0x000008, "Wrong alignment on BarChart_SetDatasource");
static_assert(sizeof(BarChart_SetDatasource) == 0x000010, "Wrong size on BarChart_SetDatasource");
static_assert(offsetof(BarChart_SetDatasource, InDatasource) == 0x000000, "Member 'BarChart_SetDatasource::InDatasource' has a wrong offset!");
static_assert(offsetof(BarChart_SetDatasource, ReturnValue) == 0x000008, "Member 'BarChart_SetDatasource::ReturnValue' has a wrong offset!");

// Function KantanChartsUMG.KantanCartesianChartBase.AddSeriesStyleOverride
// 0x0020 (0x0020 - 0x0000)
struct KantanCartesianChartBase_AddSeriesStyleOverride final
{
public:
	class FName                                   SeriesId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKantanPointStyle*                      PointStyle;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanCartesianChartBase_AddSeriesStyleOverride) == 0x000008, "Wrong alignment on KantanCartesianChartBase_AddSeriesStyleOverride");
static_assert(sizeof(KantanCartesianChartBase_AddSeriesStyleOverride) == 0x000020, "Wrong size on KantanCartesianChartBase_AddSeriesStyleOverride");
static_assert(offsetof(KantanCartesianChartBase_AddSeriesStyleOverride, SeriesId) == 0x000000, "Member 'KantanCartesianChartBase_AddSeriesStyleOverride::SeriesId' has a wrong offset!");
static_assert(offsetof(KantanCartesianChartBase_AddSeriesStyleOverride, PointStyle) == 0x000008, "Member 'KantanCartesianChartBase_AddSeriesStyleOverride::PointStyle' has a wrong offset!");
static_assert(offsetof(KantanCartesianChartBase_AddSeriesStyleOverride, Color) == 0x000010, "Member 'KantanCartesianChartBase_AddSeriesStyleOverride::Color' has a wrong offset!");

// Function KantanChartsUMG.KantanCartesianChartBase.ConfigureSeries
// 0x000C (0x000C - 0x0000)
struct KantanCartesianChartBase_ConfigureSeries final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPoints;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawLines;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KantanCartesianChartBase_ConfigureSeries) == 0x000004, "Wrong alignment on KantanCartesianChartBase_ConfigureSeries");
static_assert(sizeof(KantanCartesianChartBase_ConfigureSeries) == 0x00000C, "Wrong size on KantanCartesianChartBase_ConfigureSeries");
static_assert(offsetof(KantanCartesianChartBase_ConfigureSeries, ID) == 0x000000, "Member 'KantanCartesianChartBase_ConfigureSeries::ID' has a wrong offset!");
static_assert(offsetof(KantanCartesianChartBase_ConfigureSeries, bDrawPoints) == 0x000008, "Member 'KantanCartesianChartBase_ConfigureSeries::bDrawPoints' has a wrong offset!");
static_assert(offsetof(KantanCartesianChartBase_ConfigureSeries, bDrawLines) == 0x000009, "Member 'KantanCartesianChartBase_ConfigureSeries::bDrawLines' has a wrong offset!");

// Function KantanChartsUMG.KantanCartesianChartBase.EnableSeries
// 0x000C (0x000C - 0x0000)
struct KantanCartesianChartBase_EnableSeries final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KantanCartesianChartBase_EnableSeries) == 0x000004, "Wrong alignment on KantanCartesianChartBase_EnableSeries");
static_assert(sizeof(KantanCartesianChartBase_EnableSeries) == 0x00000C, "Wrong size on KantanCartesianChartBase_EnableSeries");
static_assert(offsetof(KantanCartesianChartBase_EnableSeries, ID) == 0x000000, "Member 'KantanCartesianChartBase_EnableSeries::ID' has a wrong offset!");
static_assert(offsetof(KantanCartesianChartBase_EnableSeries, bEnable) == 0x000008, "Member 'KantanCartesianChartBase_EnableSeries::bEnable' has a wrong offset!");

// Function KantanChartsUMG.KantanCartesianChartBase.SetAxisTitlePadding
// 0x0010 (0x0010 - 0x0000)
struct KantanCartesianChartBase_SetAxisTitlePadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanCartesianChartBase_SetAxisTitlePadding) == 0x000004, "Wrong alignment on KantanCartesianChartBase_SetAxisTitlePadding");
static_assert(sizeof(KantanCartesianChartBase_SetAxisTitlePadding) == 0x000010, "Wrong size on KantanCartesianChartBase_SetAxisTitlePadding");
static_assert(offsetof(KantanCartesianChartBase_SetAxisTitlePadding, InPadding) == 0x000000, "Member 'KantanCartesianChartBase_SetAxisTitlePadding::InPadding' has a wrong offset!");

// Function KantanChartsUMG.KantanCartesianChartBase.SetDataPointSize
// 0x0001 (0x0001 - 0x0000)
struct KantanCartesianChartBase_SetDataPointSize final
{
public:
	EKantanDataPointSize                          InSize;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanCartesianChartBase_SetDataPointSize) == 0x000001, "Wrong alignment on KantanCartesianChartBase_SetDataPointSize");
static_assert(sizeof(KantanCartesianChartBase_SetDataPointSize) == 0x000001, "Wrong size on KantanCartesianChartBase_SetDataPointSize");
static_assert(offsetof(KantanCartesianChartBase_SetDataPointSize, InSize) == 0x000000, "Member 'KantanCartesianChartBase_SetDataPointSize::InSize' has a wrong offset!");

// Function KantanChartsUMG.KantanCartesianChartBase.SetPlotScale
// 0x0020 (0x0020 - 0x0000)
struct KantanCartesianChartBase_SetPlotScale final
{
public:
	struct FVector2D                              InScale;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InFocalCoords;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanCartesianChartBase_SetPlotScale) == 0x000008, "Wrong alignment on KantanCartesianChartBase_SetPlotScale");
static_assert(sizeof(KantanCartesianChartBase_SetPlotScale) == 0x000020, "Wrong size on KantanCartesianChartBase_SetPlotScale");
static_assert(offsetof(KantanCartesianChartBase_SetPlotScale, InScale) == 0x000000, "Member 'KantanCartesianChartBase_SetPlotScale::InScale' has a wrong offset!");
static_assert(offsetof(KantanCartesianChartBase_SetPlotScale, InFocalCoords) == 0x000010, "Member 'KantanCartesianChartBase_SetPlotScale::InFocalCoords' has a wrong offset!");

// Function KantanChartsUMG.KantanCartesianChartBase.SetPlotScaleByRange
// 0x0010 (0x0010 - 0x0000)
struct KantanCartesianChartBase_SetPlotScaleByRange final
{
public:
	struct FCartesianAxisRange                    InRangeX;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCartesianAxisRange                    InRangeY;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanCartesianChartBase_SetPlotScaleByRange) == 0x000004, "Wrong alignment on KantanCartesianChartBase_SetPlotScaleByRange");
static_assert(sizeof(KantanCartesianChartBase_SetPlotScaleByRange) == 0x000010, "Wrong size on KantanCartesianChartBase_SetPlotScaleByRange");
static_assert(offsetof(KantanCartesianChartBase_SetPlotScaleByRange, InRangeX) == 0x000000, "Member 'KantanCartesianChartBase_SetPlotScaleByRange::InRangeX' has a wrong offset!");
static_assert(offsetof(KantanCartesianChartBase_SetPlotScaleByRange, InRangeY) == 0x000008, "Member 'KantanCartesianChartBase_SetPlotScaleByRange::InRangeY' has a wrong offset!");

// Function KantanChartsUMG.KantanCartesianChartBase.SetXAxisConfig
// 0x0048 (0x0048 - 0x0000)
struct KantanCartesianChartBase_SetXAxisConfig final
{
public:
	struct FCartesianAxisConfig                   InCfg;                                             // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanCartesianChartBase_SetXAxisConfig) == 0x000008, "Wrong alignment on KantanCartesianChartBase_SetXAxisConfig");
static_assert(sizeof(KantanCartesianChartBase_SetXAxisConfig) == 0x000048, "Wrong size on KantanCartesianChartBase_SetXAxisConfig");
static_assert(offsetof(KantanCartesianChartBase_SetXAxisConfig, InCfg) == 0x000000, "Member 'KantanCartesianChartBase_SetXAxisConfig::InCfg' has a wrong offset!");

// Function KantanChartsUMG.KantanCartesianChartBase.SetYAxisConfig
// 0x0048 (0x0048 - 0x0000)
struct KantanCartesianChartBase_SetYAxisConfig final
{
public:
	struct FCartesianAxisConfig                   InCfg;                                             // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanCartesianChartBase_SetYAxisConfig) == 0x000008, "Wrong alignment on KantanCartesianChartBase_SetYAxisConfig");
static_assert(sizeof(KantanCartesianChartBase_SetYAxisConfig) == 0x000048, "Wrong size on KantanCartesianChartBase_SetYAxisConfig");
static_assert(offsetof(KantanCartesianChartBase_SetYAxisConfig, InCfg) == 0x000000, "Member 'KantanCartesianChartBase_SetYAxisConfig::InCfg' has a wrong offset!");

// Function KantanChartsUMG.CartesianPlot.SetDatasource
// 0x0010 (0x0010 - 0x0000)
struct CartesianPlot_SetDatasource final
{
public:
	class UObject*                                InDatasource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CartesianPlot_SetDatasource) == 0x000008, "Wrong alignment on CartesianPlot_SetDatasource");
static_assert(sizeof(CartesianPlot_SetDatasource) == 0x000010, "Wrong size on CartesianPlot_SetDatasource");
static_assert(offsetof(CartesianPlot_SetDatasource, InDatasource) == 0x000000, "Member 'CartesianPlot_SetDatasource::InDatasource' has a wrong offset!");
static_assert(offsetof(CartesianPlot_SetDatasource, ReturnValue) == 0x000008, "Member 'CartesianPlot_SetDatasource::ReturnValue' has a wrong offset!");

// Function KantanChartsUMG.KantanChartLegend.SetBackground
// 0x00D0 (0x00D0 - 0x0000)
struct KantanChartLegend_SetBackground final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanChartLegend_SetBackground) == 0x000010, "Wrong alignment on KantanChartLegend_SetBackground");
static_assert(sizeof(KantanChartLegend_SetBackground) == 0x0000D0, "Wrong size on KantanChartLegend_SetBackground");
static_assert(offsetof(KantanChartLegend_SetBackground, InBrush) == 0x000000, "Member 'KantanChartLegend_SetBackground::InBrush' has a wrong offset!");

// Function KantanChartsUMG.KantanChartLegend.SetChart
// 0x0008 (0x0008 - 0x0000)
struct KantanChartLegend_SetChart final
{
public:
	class UKantanCartesianChartBase*              InChart;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanChartLegend_SetChart) == 0x000008, "Wrong alignment on KantanChartLegend_SetChart");
static_assert(sizeof(KantanChartLegend_SetChart) == 0x000008, "Wrong size on KantanChartLegend_SetChart");
static_assert(offsetof(KantanChartLegend_SetChart, InChart) == 0x000000, "Member 'KantanChartLegend_SetChart::InChart' has a wrong offset!");

// Function KantanChartsUMG.KantanChartLegend.SetFontSize
// 0x0004 (0x0004 - 0x0000)
struct KantanChartLegend_SetFontSize final
{
public:
	int32                                         InFontSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanChartLegend_SetFontSize) == 0x000004, "Wrong alignment on KantanChartLegend_SetFontSize");
static_assert(sizeof(KantanChartLegend_SetFontSize) == 0x000004, "Wrong size on KantanChartLegend_SetFontSize");
static_assert(offsetof(KantanChartLegend_SetFontSize, InFontSize) == 0x000000, "Member 'KantanChartLegend_SetFontSize::InFontSize' has a wrong offset!");

// Function KantanChartsUMG.KantanChartLegend.SetMargins
// 0x0010 (0x0010 - 0x0000)
struct KantanChartLegend_SetMargins final
{
public:
	struct FMargin                                InMargins;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanChartLegend_SetMargins) == 0x000004, "Wrong alignment on KantanChartLegend_SetMargins");
static_assert(sizeof(KantanChartLegend_SetMargins) == 0x000010, "Wrong size on KantanChartLegend_SetMargins");
static_assert(offsetof(KantanChartLegend_SetMargins, InMargins) == 0x000000, "Member 'KantanChartLegend_SetMargins::InMargins' has a wrong offset!");

// Function KantanChartsUMG.KantanChartLegend.SetSeriesPadding
// 0x0010 (0x0010 - 0x0000)
struct KantanChartLegend_SetSeriesPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanChartLegend_SetSeriesPadding) == 0x000004, "Wrong alignment on KantanChartLegend_SetSeriesPadding");
static_assert(sizeof(KantanChartLegend_SetSeriesPadding) == 0x000010, "Wrong size on KantanChartLegend_SetSeriesPadding");
static_assert(offsetof(KantanChartLegend_SetSeriesPadding, InPadding) == 0x000000, "Member 'KantanChartLegend_SetSeriesPadding::InPadding' has a wrong offset!");

// Function KantanChartsUMG.KantanTimeSeriesPlotBase.SetLowerTimeBound
// 0x0008 (0x0008 - 0x0000)
struct KantanTimeSeriesPlotBase_SetLowerTimeBound final
{
public:
	struct FCartesianRangeBound                   InLowerBound;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanTimeSeriesPlotBase_SetLowerTimeBound) == 0x000004, "Wrong alignment on KantanTimeSeriesPlotBase_SetLowerTimeBound");
static_assert(sizeof(KantanTimeSeriesPlotBase_SetLowerTimeBound) == 0x000008, "Wrong size on KantanTimeSeriesPlotBase_SetLowerTimeBound");
static_assert(offsetof(KantanTimeSeriesPlotBase_SetLowerTimeBound, InLowerBound) == 0x000000, "Member 'KantanTimeSeriesPlotBase_SetLowerTimeBound::InLowerBound' has a wrong offset!");

// Function KantanChartsUMG.KantanTimeSeriesPlotBase.SetLowerValueBound
// 0x0008 (0x0008 - 0x0000)
struct KantanTimeSeriesPlotBase_SetLowerValueBound final
{
public:
	struct FCartesianRangeBound                   InLowerBound;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanTimeSeriesPlotBase_SetLowerValueBound) == 0x000004, "Wrong alignment on KantanTimeSeriesPlotBase_SetLowerValueBound");
static_assert(sizeof(KantanTimeSeriesPlotBase_SetLowerValueBound) == 0x000008, "Wrong size on KantanTimeSeriesPlotBase_SetLowerValueBound");
static_assert(offsetof(KantanTimeSeriesPlotBase_SetLowerValueBound, InLowerBound) == 0x000000, "Member 'KantanTimeSeriesPlotBase_SetLowerValueBound::InLowerBound' has a wrong offset!");

// Function KantanChartsUMG.KantanTimeSeriesPlotBase.SetUpperTimeBound
// 0x0008 (0x0008 - 0x0000)
struct KantanTimeSeriesPlotBase_SetUpperTimeBound final
{
public:
	struct FCartesianRangeBound                   InUpperBound;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanTimeSeriesPlotBase_SetUpperTimeBound) == 0x000004, "Wrong alignment on KantanTimeSeriesPlotBase_SetUpperTimeBound");
static_assert(sizeof(KantanTimeSeriesPlotBase_SetUpperTimeBound) == 0x000008, "Wrong size on KantanTimeSeriesPlotBase_SetUpperTimeBound");
static_assert(offsetof(KantanTimeSeriesPlotBase_SetUpperTimeBound, InUpperBound) == 0x000000, "Member 'KantanTimeSeriesPlotBase_SetUpperTimeBound::InUpperBound' has a wrong offset!");

// Function KantanChartsUMG.KantanTimeSeriesPlotBase.SetUpperValueBound
// 0x0008 (0x0008 - 0x0000)
struct KantanTimeSeriesPlotBase_SetUpperValueBound final
{
public:
	struct FCartesianRangeBound                   InUpperBound;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KantanTimeSeriesPlotBase_SetUpperValueBound) == 0x000004, "Wrong alignment on KantanTimeSeriesPlotBase_SetUpperValueBound");
static_assert(sizeof(KantanTimeSeriesPlotBase_SetUpperValueBound) == 0x000008, "Wrong size on KantanTimeSeriesPlotBase_SetUpperValueBound");
static_assert(offsetof(KantanTimeSeriesPlotBase_SetUpperValueBound, InUpperBound) == 0x000000, "Member 'KantanTimeSeriesPlotBase_SetUpperValueBound::InUpperBound' has a wrong offset!");

// Function KantanChartsUMG.SimpleBarChart.BP_AddCategory
// 0x0020 (0x0020 - 0x0000)
struct SimpleBarChart_BP_AddCategory final
{
public:
	class FText                                   Param_Name;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FName                                   CatId;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleBarChart_BP_AddCategory) == 0x000008, "Wrong alignment on SimpleBarChart_BP_AddCategory");
static_assert(sizeof(SimpleBarChart_BP_AddCategory) == 0x000020, "Wrong size on SimpleBarChart_BP_AddCategory");
static_assert(offsetof(SimpleBarChart_BP_AddCategory, Param_Name) == 0x000000, "Member 'SimpleBarChart_BP_AddCategory::Param_Name' has a wrong offset!");
static_assert(offsetof(SimpleBarChart_BP_AddCategory, CatId) == 0x000018, "Member 'SimpleBarChart_BP_AddCategory::CatId' has a wrong offset!");

// Function KantanChartsUMG.SimpleBarChart.BP_AddCategoryWithId
// 0x0028 (0x0028 - 0x0000)
struct SimpleBarChart_BP_AddCategoryWithId final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Param_Name;                                        // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleBarChart_BP_AddCategoryWithId) == 0x000008, "Wrong alignment on SimpleBarChart_BP_AddCategoryWithId");
static_assert(sizeof(SimpleBarChart_BP_AddCategoryWithId) == 0x000028, "Wrong size on SimpleBarChart_BP_AddCategoryWithId");
static_assert(offsetof(SimpleBarChart_BP_AddCategoryWithId, ID) == 0x000000, "Member 'SimpleBarChart_BP_AddCategoryWithId::ID' has a wrong offset!");
static_assert(offsetof(SimpleBarChart_BP_AddCategoryWithId, Param_Name) == 0x000008, "Member 'SimpleBarChart_BP_AddCategoryWithId::Param_Name' has a wrong offset!");
static_assert(offsetof(SimpleBarChart_BP_AddCategoryWithId, bSuccess) == 0x000020, "Member 'SimpleBarChart_BP_AddCategoryWithId::bSuccess' has a wrong offset!");

// Function KantanChartsUMG.SimpleBarChart.BP_RemoveCategory
// 0x000C (0x000C - 0x0000)
struct SimpleBarChart_BP_RemoveCategory final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleBarChart_BP_RemoveCategory) == 0x000004, "Wrong alignment on SimpleBarChart_BP_RemoveCategory");
static_assert(sizeof(SimpleBarChart_BP_RemoveCategory) == 0x00000C, "Wrong size on SimpleBarChart_BP_RemoveCategory");
static_assert(offsetof(SimpleBarChart_BP_RemoveCategory, ID) == 0x000000, "Member 'SimpleBarChart_BP_RemoveCategory::ID' has a wrong offset!");
static_assert(offsetof(SimpleBarChart_BP_RemoveCategory, bSuccess) == 0x000008, "Member 'SimpleBarChart_BP_RemoveCategory::bSuccess' has a wrong offset!");

// Function KantanChartsUMG.SimpleBarChart.BP_UpdateCategoryValue
// 0x0010 (0x0010 - 0x0000)
struct SimpleBarChart_BP_UpdateCategoryValue final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleBarChart_BP_UpdateCategoryValue) == 0x000004, "Wrong alignment on SimpleBarChart_BP_UpdateCategoryValue");
static_assert(sizeof(SimpleBarChart_BP_UpdateCategoryValue) == 0x000010, "Wrong size on SimpleBarChart_BP_UpdateCategoryValue");
static_assert(offsetof(SimpleBarChart_BP_UpdateCategoryValue, ID) == 0x000000, "Member 'SimpleBarChart_BP_UpdateCategoryValue::ID' has a wrong offset!");
static_assert(offsetof(SimpleBarChart_BP_UpdateCategoryValue, Value) == 0x000008, "Member 'SimpleBarChart_BP_UpdateCategoryValue::Value' has a wrong offset!");
static_assert(offsetof(SimpleBarChart_BP_UpdateCategoryValue, bSuccess) == 0x00000C, "Member 'SimpleBarChart_BP_UpdateCategoryValue::bSuccess' has a wrong offset!");

// Function KantanChartsUMG.SimpleCartesianPlot.BP_AddDatapoint
// 0x0020 (0x0020 - 0x0000)
struct SimpleCartesianPlot_BP_AddDatapoint final
{
public:
	class FName                                   SeriesId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Point;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleCartesianPlot_BP_AddDatapoint) == 0x000008, "Wrong alignment on SimpleCartesianPlot_BP_AddDatapoint");
static_assert(sizeof(SimpleCartesianPlot_BP_AddDatapoint) == 0x000020, "Wrong size on SimpleCartesianPlot_BP_AddDatapoint");
static_assert(offsetof(SimpleCartesianPlot_BP_AddDatapoint, SeriesId) == 0x000000, "Member 'SimpleCartesianPlot_BP_AddDatapoint::SeriesId' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_AddDatapoint, Point) == 0x000008, "Member 'SimpleCartesianPlot_BP_AddDatapoint::Point' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_AddDatapoint, bSuccess) == 0x000018, "Member 'SimpleCartesianPlot_BP_AddDatapoint::bSuccess' has a wrong offset!");

// Function KantanChartsUMG.SimpleCartesianPlot.BP_AddSeries
// 0x0028 (0x0028 - 0x0000)
struct SimpleCartesianPlot_BP_AddSeries final
{
public:
	class FName                                   SeriesId;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Param_Name;                                        // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPoints;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLines;                                        // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleCartesianPlot_BP_AddSeries) == 0x000008, "Wrong alignment on SimpleCartesianPlot_BP_AddSeries");
static_assert(sizeof(SimpleCartesianPlot_BP_AddSeries) == 0x000028, "Wrong size on SimpleCartesianPlot_BP_AddSeries");
static_assert(offsetof(SimpleCartesianPlot_BP_AddSeries, SeriesId) == 0x000000, "Member 'SimpleCartesianPlot_BP_AddSeries::SeriesId' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_AddSeries, Param_Name) == 0x000008, "Member 'SimpleCartesianPlot_BP_AddSeries::Param_Name' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_AddSeries, bEnabled) == 0x000020, "Member 'SimpleCartesianPlot_BP_AddSeries::bEnabled' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_AddSeries, bShowPoints) == 0x000021, "Member 'SimpleCartesianPlot_BP_AddSeries::bShowPoints' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_AddSeries, bShowLines) == 0x000022, "Member 'SimpleCartesianPlot_BP_AddSeries::bShowLines' has a wrong offset!");

// Function KantanChartsUMG.SimpleCartesianPlot.BP_AddSeriesWithId
// 0x0030 (0x0030 - 0x0000)
struct SimpleCartesianPlot_BP_AddSeriesWithId final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Param_Name;                                        // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPoints;                                       // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLines;                                        // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleCartesianPlot_BP_AddSeriesWithId) == 0x000008, "Wrong alignment on SimpleCartesianPlot_BP_AddSeriesWithId");
static_assert(sizeof(SimpleCartesianPlot_BP_AddSeriesWithId) == 0x000030, "Wrong size on SimpleCartesianPlot_BP_AddSeriesWithId");
static_assert(offsetof(SimpleCartesianPlot_BP_AddSeriesWithId, bSuccess) == 0x000000, "Member 'SimpleCartesianPlot_BP_AddSeriesWithId::bSuccess' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_AddSeriesWithId, ID) == 0x000004, "Member 'SimpleCartesianPlot_BP_AddSeriesWithId::ID' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_AddSeriesWithId, Param_Name) == 0x000010, "Member 'SimpleCartesianPlot_BP_AddSeriesWithId::Param_Name' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_AddSeriesWithId, bEnabled) == 0x000028, "Member 'SimpleCartesianPlot_BP_AddSeriesWithId::bEnabled' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_AddSeriesWithId, bShowPoints) == 0x000029, "Member 'SimpleCartesianPlot_BP_AddSeriesWithId::bShowPoints' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_AddSeriesWithId, bShowLines) == 0x00002A, "Member 'SimpleCartesianPlot_BP_AddSeriesWithId::bShowLines' has a wrong offset!");

// Function KantanChartsUMG.SimpleCartesianPlot.BP_RemoveSeries
// 0x000C (0x000C - 0x0000)
struct SimpleCartesianPlot_BP_RemoveSeries final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleCartesianPlot_BP_RemoveSeries) == 0x000004, "Wrong alignment on SimpleCartesianPlot_BP_RemoveSeries");
static_assert(sizeof(SimpleCartesianPlot_BP_RemoveSeries) == 0x00000C, "Wrong size on SimpleCartesianPlot_BP_RemoveSeries");
static_assert(offsetof(SimpleCartesianPlot_BP_RemoveSeries, ID) == 0x000000, "Member 'SimpleCartesianPlot_BP_RemoveSeries::ID' has a wrong offset!");
static_assert(offsetof(SimpleCartesianPlot_BP_RemoveSeries, bSuccess) == 0x000008, "Member 'SimpleCartesianPlot_BP_RemoveSeries::bSuccess' has a wrong offset!");

// Function KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddDatapoint
// 0x0020 (0x0020 - 0x0000)
struct SimpleTimeSeriesPlot_BP_AddDatapoint final
{
public:
	class FName                                   SeriesId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Point;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleTimeSeriesPlot_BP_AddDatapoint) == 0x000008, "Wrong alignment on SimpleTimeSeriesPlot_BP_AddDatapoint");
static_assert(sizeof(SimpleTimeSeriesPlot_BP_AddDatapoint) == 0x000020, "Wrong size on SimpleTimeSeriesPlot_BP_AddDatapoint");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddDatapoint, SeriesId) == 0x000000, "Member 'SimpleTimeSeriesPlot_BP_AddDatapoint::SeriesId' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddDatapoint, Point) == 0x000008, "Member 'SimpleTimeSeriesPlot_BP_AddDatapoint::Point' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddDatapoint, bSuccess) == 0x000018, "Member 'SimpleTimeSeriesPlot_BP_AddDatapoint::bSuccess' has a wrong offset!");

// Function KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddDatapointNow
// 0x0010 (0x0010 - 0x0000)
struct SimpleTimeSeriesPlot_BP_AddDatapointNow final
{
public:
	class FName                                   SeriesId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleTimeSeriesPlot_BP_AddDatapointNow) == 0x000004, "Wrong alignment on SimpleTimeSeriesPlot_BP_AddDatapointNow");
static_assert(sizeof(SimpleTimeSeriesPlot_BP_AddDatapointNow) == 0x000010, "Wrong size on SimpleTimeSeriesPlot_BP_AddDatapointNow");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddDatapointNow, SeriesId) == 0x000000, "Member 'SimpleTimeSeriesPlot_BP_AddDatapointNow::SeriesId' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddDatapointNow, Value) == 0x000008, "Member 'SimpleTimeSeriesPlot_BP_AddDatapointNow::Value' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddDatapointNow, bSuccess) == 0x00000C, "Member 'SimpleTimeSeriesPlot_BP_AddDatapointNow::bSuccess' has a wrong offset!");

// Function KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddSeries
// 0x0028 (0x0028 - 0x0000)
struct SimpleTimeSeriesPlot_BP_AddSeries final
{
public:
	class FName                                   SeriesId;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Param_Name;                                        // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPoints;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLines;                                        // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleTimeSeriesPlot_BP_AddSeries) == 0x000008, "Wrong alignment on SimpleTimeSeriesPlot_BP_AddSeries");
static_assert(sizeof(SimpleTimeSeriesPlot_BP_AddSeries) == 0x000028, "Wrong size on SimpleTimeSeriesPlot_BP_AddSeries");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddSeries, SeriesId) == 0x000000, "Member 'SimpleTimeSeriesPlot_BP_AddSeries::SeriesId' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddSeries, Param_Name) == 0x000008, "Member 'SimpleTimeSeriesPlot_BP_AddSeries::Param_Name' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddSeries, bEnabled) == 0x000020, "Member 'SimpleTimeSeriesPlot_BP_AddSeries::bEnabled' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddSeries, bShowPoints) == 0x000021, "Member 'SimpleTimeSeriesPlot_BP_AddSeries::bShowPoints' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddSeries, bShowLines) == 0x000022, "Member 'SimpleTimeSeriesPlot_BP_AddSeries::bShowLines' has a wrong offset!");

// Function KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddSeriesWithId
// 0x0030 (0x0030 - 0x0000)
struct SimpleTimeSeriesPlot_BP_AddSeriesWithId final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Param_Name;                                        // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPoints;                                       // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLines;                                        // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleTimeSeriesPlot_BP_AddSeriesWithId) == 0x000008, "Wrong alignment on SimpleTimeSeriesPlot_BP_AddSeriesWithId");
static_assert(sizeof(SimpleTimeSeriesPlot_BP_AddSeriesWithId) == 0x000030, "Wrong size on SimpleTimeSeriesPlot_BP_AddSeriesWithId");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddSeriesWithId, bSuccess) == 0x000000, "Member 'SimpleTimeSeriesPlot_BP_AddSeriesWithId::bSuccess' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddSeriesWithId, ID) == 0x000004, "Member 'SimpleTimeSeriesPlot_BP_AddSeriesWithId::ID' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddSeriesWithId, Param_Name) == 0x000010, "Member 'SimpleTimeSeriesPlot_BP_AddSeriesWithId::Param_Name' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddSeriesWithId, bEnabled) == 0x000028, "Member 'SimpleTimeSeriesPlot_BP_AddSeriesWithId::bEnabled' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddSeriesWithId, bShowPoints) == 0x000029, "Member 'SimpleTimeSeriesPlot_BP_AddSeriesWithId::bShowPoints' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_AddSeriesWithId, bShowLines) == 0x00002A, "Member 'SimpleTimeSeriesPlot_BP_AddSeriesWithId::bShowLines' has a wrong offset!");

// Function KantanChartsUMG.SimpleTimeSeriesPlot.BP_RemoveSeries
// 0x000C (0x000C - 0x0000)
struct SimpleTimeSeriesPlot_BP_RemoveSeries final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleTimeSeriesPlot_BP_RemoveSeries) == 0x000004, "Wrong alignment on SimpleTimeSeriesPlot_BP_RemoveSeries");
static_assert(sizeof(SimpleTimeSeriesPlot_BP_RemoveSeries) == 0x00000C, "Wrong size on SimpleTimeSeriesPlot_BP_RemoveSeries");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_RemoveSeries, ID) == 0x000000, "Member 'SimpleTimeSeriesPlot_BP_RemoveSeries::ID' has a wrong offset!");
static_assert(offsetof(SimpleTimeSeriesPlot_BP_RemoveSeries, bSuccess) == 0x000008, "Member 'SimpleTimeSeriesPlot_BP_RemoveSeries::bSuccess' has a wrong offset!");

// Function KantanChartsUMG.TimeSeriesPlot.SetDatasource
// 0x0010 (0x0010 - 0x0000)
struct TimeSeriesPlot_SetDatasource final
{
public:
	class UObject*                                InDatasource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeSeriesPlot_SetDatasource) == 0x000008, "Wrong alignment on TimeSeriesPlot_SetDatasource");
static_assert(sizeof(TimeSeriesPlot_SetDatasource) == 0x000010, "Wrong size on TimeSeriesPlot_SetDatasource");
static_assert(offsetof(TimeSeriesPlot_SetDatasource, InDatasource) == 0x000000, "Member 'TimeSeriesPlot_SetDatasource::InDatasource' has a wrong offset!");
static_assert(offsetof(TimeSeriesPlot_SetDatasource, ReturnValue) == 0x000008, "Member 'TimeSeriesPlot_SetDatasource::ReturnValue' has a wrong offset!");

}


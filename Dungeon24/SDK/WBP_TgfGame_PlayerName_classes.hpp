#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_TgfGame_PlayerName

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_TgfGame_PlayerName.WBP_TgfGame_PlayerName_C
// 0x0058 (0x02D0 - 0x0278)
class UWBP_TgfGame_PlayerName_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UProgressBar*                           HealthBar;                                         // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               HealthBarOverlay;                                  // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Name_WBP_TgfGame_PlayerName_C;                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay;                                           // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class APawn*                                  Pawn;                                              // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 NameText;                                          // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          HideOwnerName;                                     // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowTeamNamesOnly;                                 // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BA[0x6];                                      // 0x02BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceThreshold;                                 // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InWaitingRoom;                                     // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHit;                                              // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindIndicator(class UIndicatorDescriptor* Indicator);
	void DeathStarted(class AActor* OwningActor);
	void ExecuteUbergraph_WBP_TgfGame_PlayerName(int32 EntryPoint);
	void ExtractPortal(class APawn* TargetPawn, bool Waiting);
	void GetOverlayScale(struct FVector2D* Rate);
	void InitializeNameplate(class APawn* Param_Pawn);
	void OnRebirth(class AActor* OwningActor);
	void PawnReady();
	void SetHealthBar();
	void SetNameVisibility(bool Visible);
	void SetPawn(class APawn* Param_Pawn);
	void SetPlayerName();
	void SetVisibilityByScale(bool Visible);
	void Should_Show_Names(class ALyraCharacter* Character, bool* Show);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UnbindIndicator(const class UIndicatorDescriptor* Indicator);
	void UpdateVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_TgfGame_PlayerName_C">();
	}
	static class UWBP_TgfGame_PlayerName_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_TgfGame_PlayerName_C>();
	}
};
static_assert(alignof(UWBP_TgfGame_PlayerName_C) == 0x000008, "Wrong alignment on UWBP_TgfGame_PlayerName_C");
static_assert(sizeof(UWBP_TgfGame_PlayerName_C) == 0x0002D0, "Wrong size on UWBP_TgfGame_PlayerName_C");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, UberGraphFrame) == 0x000278, "Member 'UWBP_TgfGame_PlayerName_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, HealthBar) == 0x000280, "Member 'UWBP_TgfGame_PlayerName_C::HealthBar' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, HealthBarOverlay) == 0x000288, "Member 'UWBP_TgfGame_PlayerName_C::HealthBarOverlay' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, Name_WBP_TgfGame_PlayerName_C) == 0x000290, "Member 'UWBP_TgfGame_PlayerName_C::Name_WBP_TgfGame_PlayerName_C' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, Overlay) == 0x000298, "Member 'UWBP_TgfGame_PlayerName_C::Overlay' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, Pawn) == 0x0002A0, "Member 'UWBP_TgfGame_PlayerName_C::Pawn' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, NameText) == 0x0002A8, "Member 'UWBP_TgfGame_PlayerName_C::NameText' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, HideOwnerName) == 0x0002B8, "Member 'UWBP_TgfGame_PlayerName_C::HideOwnerName' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, ShowTeamNamesOnly) == 0x0002B9, "Member 'UWBP_TgfGame_PlayerName_C::ShowTeamNamesOnly' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, DistanceThreshold) == 0x0002C0, "Member 'UWBP_TgfGame_PlayerName_C::DistanceThreshold' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, IsValid) == 0x0002C8, "Member 'UWBP_TgfGame_PlayerName_C::IsValid' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, InWaitingRoom) == 0x0002C9, "Member 'UWBP_TgfGame_PlayerName_C::InWaitingRoom' has a wrong offset!");
static_assert(offsetof(UWBP_TgfGame_PlayerName_C, bHit) == 0x0002CA, "Member 'UWBP_TgfGame_PlayerName_C::bHit' has a wrong offset!");

}


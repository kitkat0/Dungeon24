#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Tgf_Hero_Default

#include "Basic.hpp"

#include "BP_Tgf_Character_Default_classes.hpp"
#include "Engine_structs.hpp"
#include "RangedWeaponSpawnProjectileParam_structs.hpp"
#include "AbilityFailedData_structs.hpp"
#include "LyraGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Tgf_Hero_Default.BP_Tgf_Hero_Default_C
// 0x0140 (0x0AF0 - 0x09B0)
class ABP_Tgf_Hero_Default_C : public ABP_Tgf_Character_Default_C
{
public:
	uint8                                         Pad_9A1[0x7];                                      // 0x09A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Tgf_Hero_Default_C;              // 0x09A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_TgfHeroMaterialManagerComponent_C*  TgfHeroMaterialManager;                            // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ShellMesh;                                         // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterSelectionComponent_C*      BP_CharacterSelectionComponent;                    // 0x09C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   TgfTileTarget;                                     // 0x09D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       FlybySphere;                                       // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioObstacleDetectionComponent*       AudioObstacleDetection;                            // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTgfTargetToSnapComponent*              TgfTargetToSnap;                                   // 0x09E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULyraCameraComponent*                   Character_Camera;                                  // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         PVPDeath_Disappear_0A2CF7134EDFD1D5930C729EE830D117; // 0x09F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            PVPDeath__Direction_0A2CF7134EDFD1D5930C729EE830D117; // 0x09FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FD[0x3];                                      // 0x09FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PVPDeath;                                          // 0x0A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         BuffStone_FossRadius_D491A61849A3EB316967BD99A3033049; // 0x0A08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BuffStone__Direction_D491A61849A3EB316967BD99A3033049; // 0x0A0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A0D[0x3];                                      // 0x0A0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BuffStone;                                         // 0x0A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         PortalFade_CharacterOpacity_FA7D219A47F9046A53897DB04D8F448F; // 0x0A18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            PortalFade__Direction_FA7D219A47F9046A53897DB04D8F448F; // 0x0A1C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1D[0x3];                                      // 0x0A1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PortalFade;                                        // 0x0A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Inited;                                            // 0x0A28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A29[0x7];                                      // 0x0A29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AbilitySelectionComponent_C*        AbilitySelectionComponent;                         // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          MoveNoiseEventEnabled;                             // 0x0A38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A39[0x7];                                      // 0x0A39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoveNoiseEventInterval;                            // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           Player_State;                                      // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineMeshComponent*>           SplineMeshes;                                      // 0x0A50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        TangentMag;                                        // 0x0A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attach_Actor;                                      // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AbilityTargetActor;                                // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRangedWeaponSpawnProjectileParam      SpawnParam;                                        // 0x0A78(0x0038)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         PreviewActors;                                     // 0x0AB0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        PreviewActorSize;                                  // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UsedSplineMeshCount;                               // 0x0AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingAbilityFailMontage;                       // 0x0ACC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ACD[0x3];                                      // 0x0ACD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAbilityFailedData>             AbilityFailMontageSet;                             // 0x0AD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AB_MarkPoint_Base_C*                    CachedMarkPoint;                                   // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ProjectileRotMax;                                  // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Added_AB5809B54209015B1C6BF0BCDF832972();
	void ApplyAbilityIgnore();
	void BndEvt__BP_Fighter_HeroSample_AttributeComponent_K2Node_ComponentBoundEvent_6_TgfAttribute_DeathEvent__DelegateSignature(class AActor* OwningActor);
	void BndEvt__BP_Tgf_Hero_Default_AttributeComponent_K2Node_ComponentBoundEvent_2_TgfAttribute_DeathEvent__DelegateSignature(class AActor* OwningActor);
	void BndEvt__BP_Tgf_Hero_Default_FlybySphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Tgf_Hero_Default_FlybySphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_Tgf_Hero_Default_TgfHeroMaterialManager_K2Node_ComponentBoundEvent_1_TgfCharaMatStateTypeEvent__DelegateSignature(ETgfCharaMatStateType MatStateType);
	void BuffStone__FinishedFunc();
	void BuffStone__UpdateFunc();
	void ClearPath();
	void CompensateTrail(const struct FVector& StartPos, const struct FVector& EndPos);
	void DeInitPath();
	void DoBreak();
	void DoSendWeaponTriggerEventToOwningClient(const struct FGameplayTag& WeaponTrigggerEvent);
	void DoSendWeaponTriggerEventToServer(const struct FGameplayTag& WeaponTrigggerEvent);
	void EndExtarctBluePortal();
	void EndExtractRedPortal();
	void EventReceived_F7F6121E4AB95949BACE5BA999CA4E1F(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_BP_Tgf_Hero_Default(int32 EntryPoint);
	void GetOneSplineMesh(class USplineMeshComponent** Result);
	void InitAbilityFail();
	void InitAbilitySelection();
	void InitDisconnect();
	void InitFlybyCollision();
	void InitPath();
	void InitSplineMesh();
	void InitSplineMeshComponents();
	void InpActEvt_IA_InteractWithMap_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Weapon_Fire_E_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Weapon_Fire_Left_By_Press_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Weapon_Fire_Left_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Weapon_Fire_Q_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Weapon_Fire_Right_By_Press_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Weapon_Fire_Right_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void OnBlendOut_893BFA204269212FC84A00B859BD1C38(class FName NotifyName);
	void OnCompleted_893BFA204269212FC84A00B859BD1C38(class FName NotifyName);
	void OnHitExtractPortal(double DisappearDuration, const struct FGameplayTag& ExtractPortalTag);
	void OnInterrupted_893BFA204269212FC84A00B859BD1C38(class FName NotifyName);
	void OnNotifyBegin_893BFA204269212FC84A00B859BD1C38(class FName NotifyName);
	void OnNotifyEnd_893BFA204269212FC84A00B859BD1C38(class FName NotifyName);
	void OnReady_7E0A8FA9496C1EC097B3C591D67AA8E1();
	void OnRepMyOpenId();
	void PortalFade__FinishedFunc();
	void PortalFade__UpdateFunc();
	void ProcessDisconnect(class ALyraPlayerController* PlayerController);
	void PVPDeath__FinishedFunc();
	void PVPDeath__UpdateFunc();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void RegisterVoiceChatObject();
	void ServerStopAnimMontage(class UAnimMontage* Montage);
	void SetAttachActor(class AActor* AttachActor);
	void SetAvatarAttachmentVisible(bool Hidden);
	void SetEquippedWeaponsVisible(bool bVisible, bool bAllowInClient, bool bForceAll, ETgfWeaponHandType WeaponHandType);
	void SetPreviewActor(const TArray<class AActor*>& Param_PreviewActors, const double Size);
	void SetPreviewActorLocationAndRotation(const struct FVector& Endpoint);
	void ShowPath(const struct FVector& StartPos, const struct FVector& Velocity, double Param_TangentMag);
	void SpawnKillingEffect(const struct FTgfItemEffectDefinition& KillingEffect);
	void SpawnMarkPointWithClientParams(const struct FVector& Location, bool IsDangerType);
	void SpawnProjectileWithClientParam(const struct FRangedWeaponSpawnProjectileParam& InputParam);
	void StopAdditiveGroupMontage(double BlendOutTime);
	void StopGroupMontage(class FName GroupName, double BlendOutTime);
	void TrapFallCosmetic();
	void TriggerInput(const class FString& InputStr);
	void UnregisterVoiceChatObject();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Tgf_Hero_Default_C">();
	}
	static class ABP_Tgf_Hero_Default_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Tgf_Hero_Default_C>();
	}
};
static_assert(alignof(ABP_Tgf_Hero_Default_C) == 0x000010, "Wrong alignment on ABP_Tgf_Hero_Default_C");
static_assert(sizeof(ABP_Tgf_Hero_Default_C) == 0x000AF0, "Wrong size on ABP_Tgf_Hero_Default_C");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, UberGraphFrame_BP_Tgf_Hero_Default_C) == 0x0009A8, "Member 'ABP_Tgf_Hero_Default_C::UberGraphFrame_BP_Tgf_Hero_Default_C' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, TgfHeroMaterialManager) == 0x0009B0, "Member 'ABP_Tgf_Hero_Default_C::TgfHeroMaterialManager' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, ShellMesh) == 0x0009B8, "Member 'ABP_Tgf_Hero_Default_C::ShellMesh' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, BP_CharacterSelectionComponent) == 0x0009C0, "Member 'ABP_Tgf_Hero_Default_C::BP_CharacterSelectionComponent' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, Spline) == 0x0009C8, "Member 'ABP_Tgf_Hero_Default_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, TgfTileTarget) == 0x0009D0, "Member 'ABP_Tgf_Hero_Default_C::TgfTileTarget' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, FlybySphere) == 0x0009D8, "Member 'ABP_Tgf_Hero_Default_C::FlybySphere' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, AudioObstacleDetection) == 0x0009E0, "Member 'ABP_Tgf_Hero_Default_C::AudioObstacleDetection' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, TgfTargetToSnap) == 0x0009E8, "Member 'ABP_Tgf_Hero_Default_C::TgfTargetToSnap' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, Character_Camera) == 0x0009F0, "Member 'ABP_Tgf_Hero_Default_C::Character_Camera' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, PVPDeath_Disappear_0A2CF7134EDFD1D5930C729EE830D117) == 0x0009F8, "Member 'ABP_Tgf_Hero_Default_C::PVPDeath_Disappear_0A2CF7134EDFD1D5930C729EE830D117' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, PVPDeath__Direction_0A2CF7134EDFD1D5930C729EE830D117) == 0x0009FC, "Member 'ABP_Tgf_Hero_Default_C::PVPDeath__Direction_0A2CF7134EDFD1D5930C729EE830D117' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, PVPDeath) == 0x000A00, "Member 'ABP_Tgf_Hero_Default_C::PVPDeath' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, BuffStone_FossRadius_D491A61849A3EB316967BD99A3033049) == 0x000A08, "Member 'ABP_Tgf_Hero_Default_C::BuffStone_FossRadius_D491A61849A3EB316967BD99A3033049' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, BuffStone__Direction_D491A61849A3EB316967BD99A3033049) == 0x000A0C, "Member 'ABP_Tgf_Hero_Default_C::BuffStone__Direction_D491A61849A3EB316967BD99A3033049' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, BuffStone) == 0x000A10, "Member 'ABP_Tgf_Hero_Default_C::BuffStone' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, PortalFade_CharacterOpacity_FA7D219A47F9046A53897DB04D8F448F) == 0x000A18, "Member 'ABP_Tgf_Hero_Default_C::PortalFade_CharacterOpacity_FA7D219A47F9046A53897DB04D8F448F' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, PortalFade__Direction_FA7D219A47F9046A53897DB04D8F448F) == 0x000A1C, "Member 'ABP_Tgf_Hero_Default_C::PortalFade__Direction_FA7D219A47F9046A53897DB04D8F448F' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, PortalFade) == 0x000A20, "Member 'ABP_Tgf_Hero_Default_C::PortalFade' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, Inited) == 0x000A28, "Member 'ABP_Tgf_Hero_Default_C::Inited' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, AbilitySelectionComponent) == 0x000A30, "Member 'ABP_Tgf_Hero_Default_C::AbilitySelectionComponent' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, MoveNoiseEventEnabled) == 0x000A38, "Member 'ABP_Tgf_Hero_Default_C::MoveNoiseEventEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, MoveNoiseEventInterval) == 0x000A40, "Member 'ABP_Tgf_Hero_Default_C::MoveNoiseEventInterval' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, Player_State) == 0x000A48, "Member 'ABP_Tgf_Hero_Default_C::Player_State' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, SplineMeshes) == 0x000A50, "Member 'ABP_Tgf_Hero_Default_C::SplineMeshes' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, TangentMag) == 0x000A60, "Member 'ABP_Tgf_Hero_Default_C::TangentMag' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, Attach_Actor) == 0x000A68, "Member 'ABP_Tgf_Hero_Default_C::Attach_Actor' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, AbilityTargetActor) == 0x000A70, "Member 'ABP_Tgf_Hero_Default_C::AbilityTargetActor' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, SpawnParam) == 0x000A78, "Member 'ABP_Tgf_Hero_Default_C::SpawnParam' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, PreviewActors) == 0x000AB0, "Member 'ABP_Tgf_Hero_Default_C::PreviewActors' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, PreviewActorSize) == 0x000AC0, "Member 'ABP_Tgf_Hero_Default_C::PreviewActorSize' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, UsedSplineMeshCount) == 0x000AC8, "Member 'ABP_Tgf_Hero_Default_C::UsedSplineMeshCount' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, IsPlayingAbilityFailMontage) == 0x000ACC, "Member 'ABP_Tgf_Hero_Default_C::IsPlayingAbilityFailMontage' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, AbilityFailMontageSet) == 0x000AD0, "Member 'ABP_Tgf_Hero_Default_C::AbilityFailMontageSet' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, CachedMarkPoint) == 0x000AE0, "Member 'ABP_Tgf_Hero_Default_C::CachedMarkPoint' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Hero_Default_C, ProjectileRotMax) == 0x000AE8, "Member 'ABP_Tgf_Hero_Default_C::ProjectileRotMax' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.ConvertDecibelsToLinear
// 0x0008 (0x0008 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_ConvertDecibelsToLinear final
{
public:
	float                                         InDecibels;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_ConvertDecibelsToLinear) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_ConvertDecibelsToLinear");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_ConvertDecibelsToLinear) == 0x000008, "Wrong size on SoundUtilitiesBPFunctionLibrary_ConvertDecibelsToLinear");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_ConvertDecibelsToLinear, InDecibels) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_ConvertDecibelsToLinear::InDecibels' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_ConvertDecibelsToLinear, ReturnValue) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_ConvertDecibelsToLinear::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.ConvertLinearToDecibels
// 0x000C (0x000C - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_ConvertLinearToDecibels final
{
public:
	float                                         InLinear;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloor;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_ConvertLinearToDecibels) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_ConvertLinearToDecibels");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_ConvertLinearToDecibels) == 0x00000C, "Wrong size on SoundUtilitiesBPFunctionLibrary_ConvertLinearToDecibels");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_ConvertLinearToDecibels, InLinear) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_ConvertLinearToDecibels::InLinear' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_ConvertLinearToDecibels, InFloor) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_ConvertLinearToDecibels::InFloor' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_ConvertLinearToDecibels, ReturnValue) == 0x000008, "Member 'SoundUtilitiesBPFunctionLibrary_ConvertLinearToDecibels::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetBandwidthFromQ
// 0x0008 (0x0008 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetBandwidthFromQ final
{
public:
	float                                         InQ;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetBandwidthFromQ) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetBandwidthFromQ");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetBandwidthFromQ) == 0x000008, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetBandwidthFromQ");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetBandwidthFromQ, InQ) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetBandwidthFromQ::InQ' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetBandwidthFromQ, ReturnValue) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetBandwidthFromQ::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetBeatTempo
// 0x0010 (0x0010 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetBeatTempo final
{
public:
	float                                         BeatsPerMinute;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeatMultiplier;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DivisionsOfWholeNote;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetBeatTempo");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo) == 0x000010, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetBeatTempo");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo, BeatsPerMinute) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetBeatTempo::BeatsPerMinute' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo, BeatMultiplier) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetBeatTempo::BeatMultiplier' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo, DivisionsOfWholeNote) == 0x000008, "Member 'SoundUtilitiesBPFunctionLibrary_GetBeatTempo::DivisionsOfWholeNote' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo, ReturnValue) == 0x00000C, "Member 'SoundUtilitiesBPFunctionLibrary_GetBeatTempo::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetFrequencyFromMIDIPitch
// 0x0008 (0x0008 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch final
{
public:
	int32                                         MidiNote;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch) == 0x000008, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch, MidiNote) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch::MidiNote' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch, ReturnValue) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetFrequencyMultiplierFromSemitones
// 0x0008 (0x0008 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetFrequencyMultiplierFromSemitones final
{
public:
	float                                         InPitchSemitones;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetFrequencyMultiplierFromSemitones) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetFrequencyMultiplierFromSemitones");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetFrequencyMultiplierFromSemitones) == 0x000008, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetFrequencyMultiplierFromSemitones");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetFrequencyMultiplierFromSemitones, InPitchSemitones) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetFrequencyMultiplierFromSemitones::InPitchSemitones' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetFrequencyMultiplierFromSemitones, ReturnValue) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetFrequencyMultiplierFromSemitones::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetGainFromMidiVelocity
// 0x0008 (0x0008 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetGainFromMidiVelocity final
{
public:
	int32                                         InVelocity;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetGainFromMidiVelocity) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetGainFromMidiVelocity");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetGainFromMidiVelocity) == 0x000008, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetGainFromMidiVelocity");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetGainFromMidiVelocity, InVelocity) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetGainFromMidiVelocity::InVelocity' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetGainFromMidiVelocity, ReturnValue) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetGainFromMidiVelocity::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetLinearFrequencyClamped
// 0x0030 (0x0030 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDomain;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InRange;                                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped) == 0x000008, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped) == 0x000030, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped, InValue) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped::InValue' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped, InDomain) == 0x000008, "Member 'SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped::InDomain' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped, InRange) == 0x000018, "Member 'SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped::InRange' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped, ReturnValue) == 0x000028, "Member 'SoundUtilitiesBPFunctionLibrary_GetLinearFrequencyClamped::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetLogFrequencyClamped
// 0x0030 (0x0030 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDomain;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InRange;                                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped) == 0x000008, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped) == 0x000030, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped, InValue) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped::InValue' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped, InDomain) == 0x000008, "Member 'SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped::InDomain' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped, InRange) == 0x000018, "Member 'SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped::InRange' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped, ReturnValue) == 0x000028, "Member 'SoundUtilitiesBPFunctionLibrary_GetLogFrequencyClamped::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetMIDIPitchFromFrequency
// 0x0008 (0x0008 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency final
{
public:
	float                                         Frequency;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency) == 0x000008, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency, Frequency) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency::Frequency' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency, ReturnValue) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetPitchScaleFromMIDIPitch
// 0x000C (0x000C - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch final
{
public:
	int32                                         BaseMidiNote;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetMidiNote;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch) == 0x00000C, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch, BaseMidiNote) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch::BaseMidiNote' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch, TargetMidiNote) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch::TargetMidiNote' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch, ReturnValue) == 0x000008, "Member 'SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetQFromBandwidth
// 0x0008 (0x0008 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetQFromBandwidth final
{
public:
	float                                         InBandwidth;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetQFromBandwidth) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetQFromBandwidth");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetQFromBandwidth) == 0x000008, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetQFromBandwidth");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetQFromBandwidth, InBandwidth) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetQFromBandwidth::InBandwidth' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetQFromBandwidth, ReturnValue) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetQFromBandwidth::ReturnValue' has a wrong offset!");

}


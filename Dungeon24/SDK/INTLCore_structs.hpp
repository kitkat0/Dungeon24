#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTLCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum INTLCore.EINTLAccountType
// NumValues: 0x0004
enum class EINTLAccountType : uint8
{
	KINTLAccountTypeNone                     = 0,
	KINTLAccountTypeEmail                    = 1,
	KINTLAccountTypeMobilePhone              = 2,
	EINTLAccountType_MAX                     = 3,
};

// Enum INTLCore.EVerifyCodeType
// NumValues: 0x0007
enum class EVerifyCodeType : uint8
{
	KVerifyCodeTypeRegister                  = 0,
	KVerifyCodeTypeResetPassword             = 1,
	KVerifyCodeTypeRegisterThenLogin         = 2,
	KVerifyCodeTypeModifyAccount             = 3,
	KVerifyCodeTypeUnBindLI                  = 4,
	KVerifyCodeTypeUnbindThirdChannel        = 5,
	EVerifyCodeType_MAX                      = 6,
};

// Enum INTLCore.EINTLLoginChannel
// NumValues: 0x0023
enum class EINTLLoginChannel : uint8
{
	KChannelDefault                          = 0,
	KChannelW                                = 1,
	KChannelQ                                = 2,
	KChannelGuest                            = 3,
	KChannelFacebook                         = 4,
	KChannelGameCenter                       = 5,
	KChannelGoogle                           = 6,
	KChannelIEGPassport                      = 7,
	KChannelFirebase                         = 8,
	KChannelTwitter                          = 9,
	KChannelGarena                           = 10,
	KChannelCustomAccount                    = 11,
	KChannelEGame                            = 12,
	KChannelSwitch                           = 13,
	KChannelLine                             = 14,
	KChannelApple                            = 15,
	KChannelVK                               = 19,
	KChannelXbox                             = 20,
	KChannelSteam                            = 21,
	KChannelPS4                              = 22,
	KChannelEpic                             = 24,
	KChannelDiscord                          = 26,
	KChannelPS5                              = 27,
	KChannelDmm                              = 30,
	KChannelSquareEnix                       = 32,
	KChannelSupercell                        = 33,
	KChannelAppsFlyer                        = 34,
	KChannelKaKao                            = 35,
	KChannelUbisoft                          = 37,
	KChannelVNG                              = 38,
	KChannelGooglePGS                        = 39,
	KChannelEA                               = 40,
	KChannelNintendo                         = 41,
	KChannelLevelInfinite                    = 131,
	EINTLLoginChannel_MAX                    = 132,
};

// Enum INTLCore.EComplianceAgeStatus
// NumValues: 0x0005
enum class EComplianceAgeStatus : uint8
{
	KMinor                                   = 0,
	KUnknown                                 = 1,
	KAdult                                   = 2,
	KBelowGrade                              = 3,
	EComplianceAgeStatus_MAX                 = 4,
};

// Enum INTLCore.EComplianceAgreeStatus
// NumValues: 0x0004
enum class EComplianceAgreeStatus : uint8
{
	KDeny                                    = 0,
	KUnknown                                 = 1,
	KAgree                                   = 2,
	EComplianceAgreeStatus_MAX               = 3,
};

// Enum INTLCore.EComplianceParentCertificateStatus
// NumValues: 0x0004
enum class EComplianceParentCertificateStatus : uint8
{
	KDeny                                    = 0,
	KUnknown                                 = 1,
	KAgree                                   = 2,
	EComplianceParentCertificateStatus_MAX   = 3,
};

// Enum INTLCore.EPermissionType
// NumValues: 0x0033
enum class EPermissionType : uint8
{
	KPermissionTypeNone                      = 0,
	KPermissionTypeCamera                    = 1,
	KPermissionTypePhoto                     = 2,
	KPermissionTypeMicrophone                = 3,
	KPermissionTypeLocation                  = 4,
	KPermissionTypeBluetooth                 = 5,
	KPermissionTypeCalendar                  = 6,
	KPermissionTypeRemind                    = 7,
	KPermissionTypeContacts                  = 8,
	KPermissionTypeTrack                     = 99,
	KPermissionTypeCameraAndroid             = 101,
	KPermissionTypeReadPhoneState            = 102,
	KPermissionTypeRecordAudio               = 103,
	KPermissionTypeReadExternalStorage       = 104,
	KPermissionTypeWriteExternalStorage      = 105,
	KPermissionTypeAccessBackgroundLocation  = 106,
	KPermissionTypeAccessCoarseLocation      = 107,
	KPermissionTypeAccessFineLocation        = 108,
	KPermissionTypeAccessMediaLoaction       = 109,
	KPermissionTypeReadCalendar              = 110,
	KPermissionTypeWriteCalendar             = 111,
	KPermissionTypeBluetoothAdvertise        = 112,
	KPermissionTypeBluetoothConnect          = 113,
	KPermissionTypeBluetoothScan             = 114,
	KPermissionTypeBodySensors               = 115,
	KPermissionTypeBodySensorsBackground     = 116,
	KPermissionTypeCallPhone                 = 117,
	KPermissionTypeReadCallLog               = 118,
	KPermissionTypeReadContacts              = 119,
	KPermissionTypeWriteContacts             = 120,
	KPermissionTypeWriteCallLog              = 121,
	KPermissionTypeAddVoicemail              = 122,
	KPermissionTypeAnswerPhoneCalls          = 123,
	KPermissionTypeGetAccounts               = 124,
	KPermissionTypeNearbyWifyDevices         = 125,
	KPermissionTypePostNotifications         = 126,
	KPermissionTypeProcessOutgoingCalls      = 127,
	KPermissionTypeReadMediaAudio            = 128,
	KPermissionTypeReadMediaImages           = 129,
	KPermissionTypeReadMediaVideo            = 130,
	KPermissionTypeReadPhoneNumbers          = 131,
	KPermissionTypeReadSMS                   = 132,
	KPermissionTypeReveiveMMS                = 133,
	KPermissionTypeRceiveSMS                 = 134,
	KPermissionTypeReceiveWapPush            = 135,
	KPermissionTypeSendSMS                   = 136,
	KPermissionTypeUseSIP                    = 137,
	KPermissionTypeUWBRanging                = 138,
	KPermissionTypeActivityRecognition       = 139,
	KPermissionTypeAcceptHandover            = 140,
	EPermissionType_MAX                      = 141,
};

// Enum INTLCore.EINTLFriendReqType
// NumValues: 0x0006
enum class EINTLFriendReqType : uint8
{
	KReqText                                 = 0,
	KReqLink                                 = 1,
	KReqImage                                = 2,
	KReqInvite                               = 3,
	KReqVideo                                = 4,
	EINTLFriendReqType_MAX                   = 5,
};

// Enum INTLCore.EINTLWebViewOrientation
// NumValues: 0x0004
enum class EINTLWebViewOrientation : uint8
{
	KAuto                                    = 0,
	KPortrait                                = 1,
	KLandscape                               = 2,
	EINTLWebViewOrientation_MAX              = 3,
};

// Enum INTLCore.EINTLCrashLevel
// NumValues: 0x0002
enum class EINTLCrashLevel : uint8
{
	LogLevelZero                             = 0,
	EINTLCrashLevel_MAX                      = 1,
};

// Enum INTLCore.EINTLUpdateNewVersionType
// NumValues: 0x0005
enum class EINTLUpdateNewVersionType : uint8
{
	KUnknown                                 = 0,
	KNoNeedUpdate                            = 1,
	KOptionalUpdate                          = 2,
	KForcibleUpdate                          = 3,
	EINTLUpdateNewVersionType_MAX            = 4,
};

// Enum INTLCore.EINTLUpdateActionType
// NumValues: 0x0005
enum class EINTLUpdateActionType : uint8
{
	KUnknown                                 = 0,
	KAppUpdate                               = 1,
	KResourceUpdate                          = 2,
	KResourceRepair                          = 3,
	EINTLUpdateActionType_MAX                = 4,
};

// Enum INTLCore.EINTLUpdateResourceCopyType
// NumValues: 0x0004
enum class EINTLUpdateResourceCopyType : uint8
{
	KUnknown                                 = 0,
	KCopyAll                                 = 1,
	KCopyOnDemand                            = 2,
	EINTLUpdateResourceCopyType_MAX          = 3,
};

// Enum INTLCore.EINTLUpdateStep
// NumValues: 0x0005
enum class EINTLUpdateStep : uint8
{
	KUnknown                                 = 0,
	KFirstResourceAnalyze                    = 1,
	KCheckUpdate                             = 2,
	KDownload                                = 3,
	EINTLUpdateStep_MAX                      = 4,
};

// Enum INTLCore.EPGNAModule
// NumValues: 0x0005
enum class EPGNAModule : uint8
{
	KPGNAModuleUnknow                        = 0,
	KPGNAModuleDialTest                      = 1,
	KPGNAModuleAccelerator                   = 2,
	KPGNAModuleAll                           = 3,
	EPGNAModule_MAX                          = 4,
};

// Enum INTLCore.FINTLFunnelStep
// NumValues: 0x0020
enum class EFINTLFunnelStep : uint8
{
	KStartAppLaunch                          = 0,
	KAgreementShowUserAgreement              = 1,
	KAgreementFinishUserAgreement            = 2,
	KUpdateCheckForUpdates                   = 3,
	KUpdateDownloadUpdates                   = 4,
	KUpdateUnzipFiles                        = 5,
	KUpdateCompleteUpdates                   = 6,
	KAuthConfirmLoginChannel                 = 7,
	KAuthChannelAuthSuccess                  = 8,
	KAuthLoginAuthSuccess                    = 9,
	KPolicyQueryCompliance                   = 10,
	KPolicySelectRegionAndAge                = 11,
	KPolicyAgreePrivacyPolicy                = 12,
	KPolicyPrivacyAuthSucess                 = 13,
	KNavigateShowServerList                  = 14,
	KNavigateSubmitArea                      = 15,
	KNavigateConfirmArea                     = 16,
	KNavigateConnectSvrSuccess               = 17,
	KEnterGameShowEnterGame                  = 18,
	KEnterGameClickIntoGame                  = 19,
	KLobbyEnterLobbySuccess                  = 20,
	KPayAuthentication                       = 21,
	KPayPullUpTheListOfGoods                 = 22,
	KPayPullUpPriceList                      = 23,
	KPayStartOrder                           = 24,
	KPaySuccessfulOrder                      = 25,
	KPayStartPayment                         = 26,
	KPaySuccessfulPayment                    = 27,
	KPayStartDelivery                        = 28,
	KPaySuccessfulDelivery                   = 29,
	KAuthRegisterSuccess                     = 30,
	FINTLFunnelStep_MAX                      = 31,
};

// Enum INTLCore.FINTLConsentStatus
// NumValues: 0x0003
enum class EFINTLConsentStatus : uint8
{
	KConsentStatusDenied                     = 0,
	KConsentStatusGranted                    = 1,
	FINTLConsentStatus_MAX                   = 2,
};

// ScriptStruct INTLCore.INTLDeleteAccountParams
// 0x000C (0x000C - 0x0000)
struct FINTLDeleteAccountParams final
{
public:
	int32                                         AreaId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZoneId;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowDeletion;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FINTLDeleteAccountParams) == 0x000004, "Wrong alignment on FINTLDeleteAccountParams");
static_assert(sizeof(FINTLDeleteAccountParams) == 0x00000C, "Wrong size on FINTLDeleteAccountParams");
static_assert(offsetof(FINTLDeleteAccountParams, AreaId) == 0x000000, "Member 'FINTLDeleteAccountParams::AreaId' has a wrong offset!");
static_assert(offsetof(FINTLDeleteAccountParams, ZoneId) == 0x000004, "Member 'FINTLDeleteAccountParams::ZoneId' has a wrong offset!");
static_assert(offsetof(FINTLDeleteAccountParams, AllowDeletion) == 0x000008, "Member 'FINTLDeleteAccountParams::AllowDeletion' has a wrong offset!");

// ScriptStruct INTLCore.INTLBaseResult
// 0x0040 (0x0040 - 0x0000)
struct FINTLBaseResult
{
public:
	int32                                         MethodId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetCode;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RetMsg;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThirdCode;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThirdMsg;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraJson;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLBaseResult) == 0x000008, "Wrong alignment on FINTLBaseResult");
static_assert(sizeof(FINTLBaseResult) == 0x000040, "Wrong size on FINTLBaseResult");
static_assert(offsetof(FINTLBaseResult, MethodId) == 0x000000, "Member 'FINTLBaseResult::MethodId' has a wrong offset!");
static_assert(offsetof(FINTLBaseResult, RetCode) == 0x000004, "Member 'FINTLBaseResult::RetCode' has a wrong offset!");
static_assert(offsetof(FINTLBaseResult, RetMsg) == 0x000008, "Member 'FINTLBaseResult::RetMsg' has a wrong offset!");
static_assert(offsetof(FINTLBaseResult, ThirdCode) == 0x000018, "Member 'FINTLBaseResult::ThirdCode' has a wrong offset!");
static_assert(offsetof(FINTLBaseResult, ThirdMsg) == 0x000020, "Member 'FINTLBaseResult::ThirdMsg' has a wrong offset!");
static_assert(offsetof(FINTLBaseResult, ExtraJson) == 0x000030, "Member 'FINTLBaseResult::ExtraJson' has a wrong offset!");

// ScriptStruct INTLCore.INTLGroupReqInfo
// 0x0020 (0x0060 - 0x0040)
struct FINTLGroupReqInfo final : public FINTLBaseResult
{
public:
	class FString                                 WorldId;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildId;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLGroupReqInfo) == 0x000008, "Wrong alignment on FINTLGroupReqInfo");
static_assert(sizeof(FINTLGroupReqInfo) == 0x000060, "Wrong size on FINTLGroupReqInfo");
static_assert(offsetof(FINTLGroupReqInfo, WorldId) == 0x000040, "Member 'FINTLGroupReqInfo::WorldId' has a wrong offset!");
static_assert(offsetof(FINTLGroupReqInfo, GuildId) == 0x000050, "Member 'FINTLGroupReqInfo::GuildId' has a wrong offset!");

// ScriptStruct INTLCore.INTLWebSocketResult
// 0x0040 (0x0080 - 0x0040)
struct FINTLWebSocketResult final : public FINTLBaseResult
{
public:
	class FString                                 URL;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Headers;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Code;                                              // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FINTLWebSocketResult) == 0x000008, "Wrong alignment on FINTLWebSocketResult");
static_assert(sizeof(FINTLWebSocketResult) == 0x000080, "Wrong size on FINTLWebSocketResult");
static_assert(offsetof(FINTLWebSocketResult, URL) == 0x000040, "Member 'FINTLWebSocketResult::URL' has a wrong offset!");
static_assert(offsetof(FINTLWebSocketResult, Status) == 0x000050, "Member 'FINTLWebSocketResult::Status' has a wrong offset!");
static_assert(offsetof(FINTLWebSocketResult, Headers) == 0x000058, "Member 'FINTLWebSocketResult::Headers' has a wrong offset!");
static_assert(offsetof(FINTLWebSocketResult, Payload) == 0x000068, "Member 'FINTLWebSocketResult::Payload' has a wrong offset!");
static_assert(offsetof(FINTLWebSocketResult, Code) == 0x000078, "Member 'FINTLWebSocketResult::Code' has a wrong offset!");

// ScriptStruct INTLCore.INTLAuthResult
// 0x0130 (0x0170 - 0x0040)
struct FINTLAuthResult final : public FINTLBaseResult
{
public:
	class FString                                 OpenID;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TokenExpireTime;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstLogin;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegChannelDis;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gender;                                            // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Birthday;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PicUrl;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pf;                                                // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PfKey;                                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedRealNameAuth;                                  // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChannelID;                                         // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EINTLLoginChannel                             ChannelName;                                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChannelInfo;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConfirmCode;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConfirmCodeExpireTime;                             // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BindList;                                          // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LegalDocumentsAcceptedVersion;                     // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeleteAccountStatus;                               // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeleteAccountInfo;                                 // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeleteLIAccountStatus;                             // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TransferCode;                                      // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransferCodeExpireTime;                            // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Email;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLAuthResult) == 0x000008, "Wrong alignment on FINTLAuthResult");
static_assert(sizeof(FINTLAuthResult) == 0x000170, "Wrong size on FINTLAuthResult");
static_assert(offsetof(FINTLAuthResult, OpenID) == 0x000040, "Member 'FINTLAuthResult::OpenID' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, Token) == 0x000050, "Member 'FINTLAuthResult::Token' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, TokenExpireTime) == 0x000060, "Member 'FINTLAuthResult::TokenExpireTime' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, FirstLogin) == 0x000064, "Member 'FINTLAuthResult::FirstLogin' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, RegChannelDis) == 0x000068, "Member 'FINTLAuthResult::RegChannelDis' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, UserName) == 0x000078, "Member 'FINTLAuthResult::UserName' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, Gender) == 0x000088, "Member 'FINTLAuthResult::Gender' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, Birthday) == 0x000090, "Member 'FINTLAuthResult::Birthday' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, PicUrl) == 0x0000A0, "Member 'FINTLAuthResult::PicUrl' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, Pf) == 0x0000B0, "Member 'FINTLAuthResult::Pf' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, PfKey) == 0x0000C0, "Member 'FINTLAuthResult::PfKey' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, NeedRealNameAuth) == 0x0000D0, "Member 'FINTLAuthResult::NeedRealNameAuth' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, ChannelID) == 0x0000D4, "Member 'FINTLAuthResult::ChannelID' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, ChannelName) == 0x0000D8, "Member 'FINTLAuthResult::ChannelName' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, ChannelInfo) == 0x0000E0, "Member 'FINTLAuthResult::ChannelInfo' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, ConfirmCode) == 0x0000F0, "Member 'FINTLAuthResult::ConfirmCode' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, ConfirmCodeExpireTime) == 0x000100, "Member 'FINTLAuthResult::ConfirmCodeExpireTime' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, BindList) == 0x000108, "Member 'FINTLAuthResult::BindList' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, LegalDocumentsAcceptedVersion) == 0x000118, "Member 'FINTLAuthResult::LegalDocumentsAcceptedVersion' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, DeleteAccountStatus) == 0x000128, "Member 'FINTLAuthResult::DeleteAccountStatus' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, DeleteAccountInfo) == 0x000130, "Member 'FINTLAuthResult::DeleteAccountInfo' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, DeleteLIAccountStatus) == 0x000140, "Member 'FINTLAuthResult::DeleteLIAccountStatus' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, TransferCode) == 0x000148, "Member 'FINTLAuthResult::TransferCode' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, TransferCodeExpireTime) == 0x000158, "Member 'FINTLAuthResult::TransferCodeExpireTime' has a wrong offset!");
static_assert(offsetof(FINTLAuthResult, Email) == 0x000160, "Member 'FINTLAuthResult::Email' has a wrong offset!");

// ScriptStruct INTLCore.INTLIDTokenResult
// 0x0010 (0x0050 - 0x0040)
struct FINTLIDTokenResult final : public FINTLBaseResult
{
public:
	class FString                                 IdToken;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLIDTokenResult) == 0x000008, "Wrong alignment on FINTLIDTokenResult");
static_assert(sizeof(FINTLIDTokenResult) == 0x000050, "Wrong size on FINTLIDTokenResult");
static_assert(offsetof(FINTLIDTokenResult, IdToken) == 0x000040, "Member 'FINTLIDTokenResult::IdToken' has a wrong offset!");

// ScriptStruct INTLCore.INTLDeviceLevelResult
// 0x0008 (0x0048 - 0x0040)
struct FINTLDeviceLevelResult final : public FINTLBaseResult
{
public:
	int32                                         DeviceLevel;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FINTLDeviceLevelResult) == 0x000008, "Wrong alignment on FINTLDeviceLevelResult");
static_assert(sizeof(FINTLDeviceLevelResult) == 0x000048, "Wrong size on FINTLDeviceLevelResult");
static_assert(offsetof(FINTLDeviceLevelResult, DeviceLevel) == 0x000040, "Member 'FINTLDeviceLevelResult::DeviceLevel' has a wrong offset!");

// ScriptStruct INTLCore.INTLAccountProfile
// 0x00D8 (0x00D8 - 0x0000)
struct FINTLAccountProfile final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Birthday;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BirthdayYear;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BirthdayMonth;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BirthdayDay;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsReceiveEmail;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LangType;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraJson;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Phone;                                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PhoneAreaCode;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountType;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NickName;                                          // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrivacyPolicy;                                     // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TermsOfService;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrivacyUpdateTime;                                 // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TermsUpdateTime;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsernamePassVerify;                                // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FINTLAccountProfile) == 0x000008, "Wrong alignment on FINTLAccountProfile");
static_assert(sizeof(FINTLAccountProfile) == 0x0000D8, "Wrong size on FINTLAccountProfile");
static_assert(offsetof(FINTLAccountProfile, UserName) == 0x000000, "Member 'FINTLAccountProfile::UserName' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, Birthday) == 0x000010, "Member 'FINTLAccountProfile::Birthday' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, BirthdayYear) == 0x000020, "Member 'FINTLAccountProfile::BirthdayYear' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, BirthdayMonth) == 0x000024, "Member 'FINTLAccountProfile::BirthdayMonth' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, BirthdayDay) == 0x000028, "Member 'FINTLAccountProfile::BirthdayDay' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, IsReceiveEmail) == 0x00002C, "Member 'FINTLAccountProfile::IsReceiveEmail' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, Region) == 0x000030, "Member 'FINTLAccountProfile::Region' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, LangType) == 0x000040, "Member 'FINTLAccountProfile::LangType' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, ExtraJson) == 0x000050, "Member 'FINTLAccountProfile::ExtraJson' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, Email) == 0x000060, "Member 'FINTLAccountProfile::Email' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, Phone) == 0x000070, "Member 'FINTLAccountProfile::Phone' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, PhoneAreaCode) == 0x000080, "Member 'FINTLAccountProfile::PhoneAreaCode' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, AccountType) == 0x000090, "Member 'FINTLAccountProfile::AccountType' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, NickName) == 0x000098, "Member 'FINTLAccountProfile::NickName' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, PrivacyPolicy) == 0x0000A8, "Member 'FINTLAccountProfile::PrivacyPolicy' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, TermsOfService) == 0x0000B8, "Member 'FINTLAccountProfile::TermsOfService' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, PrivacyUpdateTime) == 0x0000C8, "Member 'FINTLAccountProfile::PrivacyUpdateTime' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, TermsUpdateTime) == 0x0000CC, "Member 'FINTLAccountProfile::TermsUpdateTime' has a wrong offset!");
static_assert(offsetof(FINTLAccountProfile, UsernamePassVerify) == 0x0000D0, "Member 'FINTLAccountProfile::UsernamePassVerify' has a wrong offset!");

// ScriptStruct INTLCore.INTLAccountResult
// 0x0238 (0x0278 - 0x0040)
struct FINTLAccountResult final : public FINTLBaseResult
{
public:
	int32                                         ChannelID;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Channel;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeqID;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Uid;                                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expiretime;                                        // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsRegister;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsSetPassword;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsReceiveEmail;                                    // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VerifyCodeExpireTime;                              // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequestIsLogin;                                    // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CanBind;                                           // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoginDays;                                         // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PpAcceptanceVersion;                               // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TosAcceptanceVersion;                              // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PpAcceptanceTime;                                  // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TosAcceptanceTime;                                 // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FINTLAccountProfile                    Profile;                                           // 0x00E8(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         IsUserNameAvailable;                               // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasGameSaccUid;                                    // 0x01C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameSaccUid;                                       // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasGameSaccOpenId;                                 // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameSaccOpenId;                                    // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasLiUid;                                          // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LiUid;                                             // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasLiOpenId;                                       // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LiOpenId;                                          // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedNotify;                                        // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserAgreedGameTos;                                 // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAgreedGamePP;                                  // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAgreedLiPP;                                    // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAgreedLiDt;                                    // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAgreedLiTos;                                   // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLAccountResult) == 0x000008, "Wrong alignment on FINTLAccountResult");
static_assert(sizeof(FINTLAccountResult) == 0x000278, "Wrong size on FINTLAccountResult");
static_assert(offsetof(FINTLAccountResult, ChannelID) == 0x000040, "Member 'FINTLAccountResult::ChannelID' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, Channel) == 0x000048, "Member 'FINTLAccountResult::Channel' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, SeqID) == 0x000058, "Member 'FINTLAccountResult::SeqID' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, UserName) == 0x000068, "Member 'FINTLAccountResult::UserName' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, Uid) == 0x000078, "Member 'FINTLAccountResult::Uid' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, Token) == 0x000088, "Member 'FINTLAccountResult::Token' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, Expiretime) == 0x000098, "Member 'FINTLAccountResult::Expiretime' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, IsRegister) == 0x00009C, "Member 'FINTLAccountResult::IsRegister' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, IsSetPassword) == 0x0000A0, "Member 'FINTLAccountResult::IsSetPassword' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, IsReceiveEmail) == 0x0000A4, "Member 'FINTLAccountResult::IsReceiveEmail' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, VerifyCodeExpireTime) == 0x0000A8, "Member 'FINTLAccountResult::VerifyCodeExpireTime' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, RequestIsLogin) == 0x0000AC, "Member 'FINTLAccountResult::RequestIsLogin' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, CanBind) == 0x0000B0, "Member 'FINTLAccountResult::CanBind' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, LoginDays) == 0x0000B4, "Member 'FINTLAccountResult::LoginDays' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, PpAcceptanceVersion) == 0x0000B8, "Member 'FINTLAccountResult::PpAcceptanceVersion' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, TosAcceptanceVersion) == 0x0000C8, "Member 'FINTLAccountResult::TosAcceptanceVersion' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, PpAcceptanceTime) == 0x0000D8, "Member 'FINTLAccountResult::PpAcceptanceTime' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, TosAcceptanceTime) == 0x0000E0, "Member 'FINTLAccountResult::TosAcceptanceTime' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, Profile) == 0x0000E8, "Member 'FINTLAccountResult::Profile' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, IsUserNameAvailable) == 0x0001C0, "Member 'FINTLAccountResult::IsUserNameAvailable' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, HasGameSaccUid) == 0x0001C4, "Member 'FINTLAccountResult::HasGameSaccUid' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, GameSaccUid) == 0x0001C8, "Member 'FINTLAccountResult::GameSaccUid' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, HasGameSaccOpenId) == 0x0001D8, "Member 'FINTLAccountResult::HasGameSaccOpenId' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, GameSaccOpenId) == 0x0001E0, "Member 'FINTLAccountResult::GameSaccOpenId' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, HasLiUid) == 0x0001F0, "Member 'FINTLAccountResult::HasLiUid' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, LiUid) == 0x0001F8, "Member 'FINTLAccountResult::LiUid' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, HasLiOpenId) == 0x000208, "Member 'FINTLAccountResult::HasLiOpenId' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, LiOpenId) == 0x000210, "Member 'FINTLAccountResult::LiOpenId' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, NeedNotify) == 0x000220, "Member 'FINTLAccountResult::NeedNotify' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, UserAgreedGameTos) == 0x000228, "Member 'FINTLAccountResult::UserAgreedGameTos' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, UserAgreedGamePP) == 0x000238, "Member 'FINTLAccountResult::UserAgreedGamePP' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, UserAgreedLiPP) == 0x000248, "Member 'FINTLAccountResult::UserAgreedLiPP' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, UserAgreedLiDt) == 0x000258, "Member 'FINTLAccountResult::UserAgreedLiDt' has a wrong offset!");
static_assert(offsetof(FINTLAccountResult, UserAgreedLiTos) == 0x000268, "Member 'FINTLAccountResult::UserAgreedLiTos' has a wrong offset!");

// ScriptStruct INTLCore.INTLNoticePicture
// 0x0040 (0x0040 - 0x0000)
struct FINTLNoticePicture final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Hash;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectUrl;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraData;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLNoticePicture) == 0x000008, "Wrong alignment on FINTLNoticePicture");
static_assert(sizeof(FINTLNoticePicture) == 0x000040, "Wrong size on FINTLNoticePicture");
static_assert(offsetof(FINTLNoticePicture, URL) == 0x000000, "Member 'FINTLNoticePicture::URL' has a wrong offset!");
static_assert(offsetof(FINTLNoticePicture, Hash) == 0x000010, "Member 'FINTLNoticePicture::Hash' has a wrong offset!");
static_assert(offsetof(FINTLNoticePicture, RedirectUrl) == 0x000020, "Member 'FINTLNoticePicture::RedirectUrl' has a wrong offset!");
static_assert(offsetof(FINTLNoticePicture, ExtraData) == 0x000030, "Member 'FINTLNoticePicture::ExtraData' has a wrong offset!");

// ScriptStruct INTLCore.INTLNoticeContent
// 0x0070 (0x0070 - 0x0000)
struct FINTLNoticeContent final
{
public:
	int32                                         ContentId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AppContentId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LangType;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateTime;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExtraData;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FINTLNoticePicture>             PictureList;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLNoticeContent) == 0x000008, "Wrong alignment on FINTLNoticeContent");
static_assert(sizeof(FINTLNoticeContent) == 0x000070, "Wrong size on FINTLNoticeContent");
static_assert(offsetof(FINTLNoticeContent, ContentId) == 0x000000, "Member 'FINTLNoticeContent::ContentId' has a wrong offset!");
static_assert(offsetof(FINTLNoticeContent, AppContentId) == 0x000008, "Member 'FINTLNoticeContent::AppContentId' has a wrong offset!");
static_assert(offsetof(FINTLNoticeContent, Title) == 0x000018, "Member 'FINTLNoticeContent::Title' has a wrong offset!");
static_assert(offsetof(FINTLNoticeContent, Content) == 0x000028, "Member 'FINTLNoticeContent::Content' has a wrong offset!");
static_assert(offsetof(FINTLNoticeContent, LangType) == 0x000038, "Member 'FINTLNoticeContent::LangType' has a wrong offset!");
static_assert(offsetof(FINTLNoticeContent, UpdateTime) == 0x000048, "Member 'FINTLNoticeContent::UpdateTime' has a wrong offset!");
static_assert(offsetof(FINTLNoticeContent, ExtraData) == 0x000050, "Member 'FINTLNoticeContent::ExtraData' has a wrong offset!");
static_assert(offsetof(FINTLNoticeContent, PictureList) == 0x000060, "Member 'FINTLNoticeContent::PictureList' has a wrong offset!");

// ScriptStruct INTLCore.INTLNoticeInfo
// 0x0078 (0x0078 - 0x0000)
struct FINTLNoticeInfo final
{
public:
	int32                                         NoticeId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AppId;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppNoticeId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTime;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndTime;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateTime;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AreaList;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FINTLNoticePicture>             PictureList;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ExtraData;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FINTLNoticeContent>             ContentList;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLNoticeInfo) == 0x000008, "Wrong alignment on FINTLNoticeInfo");
static_assert(sizeof(FINTLNoticeInfo) == 0x000078, "Wrong size on FINTLNoticeInfo");
static_assert(offsetof(FINTLNoticeInfo, NoticeId) == 0x000000, "Member 'FINTLNoticeInfo::NoticeId' has a wrong offset!");
static_assert(offsetof(FINTLNoticeInfo, AppId) == 0x000008, "Member 'FINTLNoticeInfo::AppId' has a wrong offset!");
static_assert(offsetof(FINTLNoticeInfo, AppNoticeId) == 0x000018, "Member 'FINTLNoticeInfo::AppNoticeId' has a wrong offset!");
static_assert(offsetof(FINTLNoticeInfo, Status) == 0x000028, "Member 'FINTLNoticeInfo::Status' has a wrong offset!");
static_assert(offsetof(FINTLNoticeInfo, StartTime) == 0x00002C, "Member 'FINTLNoticeInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FINTLNoticeInfo, EndTime) == 0x000030, "Member 'FINTLNoticeInfo::EndTime' has a wrong offset!");
static_assert(offsetof(FINTLNoticeInfo, UpdateTime) == 0x000034, "Member 'FINTLNoticeInfo::UpdateTime' has a wrong offset!");
static_assert(offsetof(FINTLNoticeInfo, AreaList) == 0x000038, "Member 'FINTLNoticeInfo::AreaList' has a wrong offset!");
static_assert(offsetof(FINTLNoticeInfo, PictureList) == 0x000048, "Member 'FINTLNoticeInfo::PictureList' has a wrong offset!");
static_assert(offsetof(FINTLNoticeInfo, ExtraData) == 0x000058, "Member 'FINTLNoticeInfo::ExtraData' has a wrong offset!");
static_assert(offsetof(FINTLNoticeInfo, ContentList) == 0x000068, "Member 'FINTLNoticeInfo::ContentList' has a wrong offset!");

// ScriptStruct INTLCore.INTLNoticeResult
// 0x0020 (0x0060 - 0x0040)
struct FINTLNoticeResult final : public FINTLBaseResult
{
public:
	class FString                                 SeqID;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FINTLNoticeInfo>                NoticeInfoList;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLNoticeResult) == 0x000008, "Wrong alignment on FINTLNoticeResult");
static_assert(sizeof(FINTLNoticeResult) == 0x000060, "Wrong size on FINTLNoticeResult");
static_assert(offsetof(FINTLNoticeResult, SeqID) == 0x000040, "Member 'FINTLNoticeResult::SeqID' has a wrong offset!");
static_assert(offsetof(FINTLNoticeResult, NoticeInfoList) == 0x000050, "Member 'FINTLNoticeResult::NoticeInfoList' has a wrong offset!");

// ScriptStruct INTLCore.INTLPersonInfo
// 0x0088 (0x0088 - 0x0000)
struct FINTLPersonInfo final
{
public:
	class FString                                 OpenID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gender;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PictureUrl;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Province;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 City;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraJson;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLPersonInfo) == 0x000008, "Wrong alignment on FINTLPersonInfo");
static_assert(sizeof(FINTLPersonInfo) == 0x000088, "Wrong size on FINTLPersonInfo");
static_assert(offsetof(FINTLPersonInfo, OpenID) == 0x000000, "Member 'FINTLPersonInfo::OpenID' has a wrong offset!");
static_assert(offsetof(FINTLPersonInfo, UserName) == 0x000010, "Member 'FINTLPersonInfo::UserName' has a wrong offset!");
static_assert(offsetof(FINTLPersonInfo, Gender) == 0x000020, "Member 'FINTLPersonInfo::Gender' has a wrong offset!");
static_assert(offsetof(FINTLPersonInfo, PictureUrl) == 0x000028, "Member 'FINTLPersonInfo::PictureUrl' has a wrong offset!");
static_assert(offsetof(FINTLPersonInfo, Country) == 0x000038, "Member 'FINTLPersonInfo::Country' has a wrong offset!");
static_assert(offsetof(FINTLPersonInfo, Province) == 0x000048, "Member 'FINTLPersonInfo::Province' has a wrong offset!");
static_assert(offsetof(FINTLPersonInfo, City) == 0x000058, "Member 'FINTLPersonInfo::City' has a wrong offset!");
static_assert(offsetof(FINTLPersonInfo, Language) == 0x000068, "Member 'FINTLPersonInfo::Language' has a wrong offset!");
static_assert(offsetof(FINTLPersonInfo, ExtraJson) == 0x000078, "Member 'FINTLPersonInfo::ExtraJson' has a wrong offset!");

// ScriptStruct INTLCore.INTLFriendResult
// 0x0010 (0x0050 - 0x0040)
struct FINTLFriendResult final : public FINTLBaseResult
{
public:
	TArray<struct FINTLPersonInfo>                FriendInfoList;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLFriendResult) == 0x000008, "Wrong alignment on FINTLFriendResult");
static_assert(sizeof(FINTLFriendResult) == 0x000050, "Wrong size on FINTLFriendResult");
static_assert(offsetof(FINTLFriendResult, FriendInfoList) == 0x000040, "Member 'FINTLFriendResult::FriendInfoList' has a wrong offset!");

// ScriptStruct INTLCore.INTLFriendReqInfo
// 0x0088 (0x0088 - 0x0000)
struct FINTLFriendReqInfo final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 User;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImagePath;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbPath;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MediaPath;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Link;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraJson;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLFriendReqInfo) == 0x000008, "Wrong alignment on FINTLFriendReqInfo");
static_assert(sizeof(FINTLFriendReqInfo) == 0x000088, "Wrong size on FINTLFriendReqInfo");
static_assert(offsetof(FINTLFriendReqInfo, Type) == 0x000000, "Member 'FINTLFriendReqInfo::Type' has a wrong offset!");
static_assert(offsetof(FINTLFriendReqInfo, User) == 0x000008, "Member 'FINTLFriendReqInfo::User' has a wrong offset!");
static_assert(offsetof(FINTLFriendReqInfo, Title) == 0x000018, "Member 'FINTLFriendReqInfo::Title' has a wrong offset!");
static_assert(offsetof(FINTLFriendReqInfo, Description) == 0x000028, "Member 'FINTLFriendReqInfo::Description' has a wrong offset!");
static_assert(offsetof(FINTLFriendReqInfo, ImagePath) == 0x000038, "Member 'FINTLFriendReqInfo::ImagePath' has a wrong offset!");
static_assert(offsetof(FINTLFriendReqInfo, ThumbPath) == 0x000048, "Member 'FINTLFriendReqInfo::ThumbPath' has a wrong offset!");
static_assert(offsetof(FINTLFriendReqInfo, MediaPath) == 0x000058, "Member 'FINTLFriendReqInfo::MediaPath' has a wrong offset!");
static_assert(offsetof(FINTLFriendReqInfo, Link) == 0x000068, "Member 'FINTLFriendReqInfo::Link' has a wrong offset!");
static_assert(offsetof(FINTLFriendReqInfo, ExtraJson) == 0x000078, "Member 'FINTLFriendReqInfo::ExtraJson' has a wrong offset!");

// ScriptStruct INTLCore.INTLLocalNotification
// 0x0078 (0x0078 - 0x0000)
struct FINTLLocalNotification final
{
public:
	int32                                         NotificationID;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionType;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundEnabled;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lights;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vibrate;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTime;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TickerText;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionParameter;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RingUri;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SmallIcon;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLLocalNotification) == 0x000008, "Wrong alignment on FINTLLocalNotification");
static_assert(sizeof(FINTLLocalNotification) == 0x000078, "Wrong size on FINTLLocalNotification");
static_assert(offsetof(FINTLLocalNotification, NotificationID) == 0x000000, "Member 'FINTLLocalNotification::NotificationID' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotification, ActionType) == 0x000004, "Member 'FINTLLocalNotification::ActionType' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotification, SoundEnabled) == 0x000008, "Member 'FINTLLocalNotification::SoundEnabled' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotification, Lights) == 0x00000C, "Member 'FINTLLocalNotification::Lights' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotification, Vibrate) == 0x000010, "Member 'FINTLLocalNotification::Vibrate' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotification, FireTime) == 0x000014, "Member 'FINTLLocalNotification::FireTime' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotification, Title) == 0x000018, "Member 'FINTLLocalNotification::Title' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotification, Content) == 0x000028, "Member 'FINTLLocalNotification::Content' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotification, TickerText) == 0x000038, "Member 'FINTLLocalNotification::TickerText' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotification, ActionParameter) == 0x000048, "Member 'FINTLLocalNotification::ActionParameter' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotification, RingUri) == 0x000058, "Member 'FINTLLocalNotification::RingUri' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotification, SmallIcon) == 0x000068, "Member 'FINTLLocalNotification::SmallIcon' has a wrong offset!");

// ScriptStruct INTLCore.INTLDetectNetworkResult
// 0x0010 (0x0050 - 0x0040)
struct FINTLDetectNetworkResult final : public FINTLBaseResult
{
public:
	float                                         LocalRouterTime;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InternetRouterTime;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InternetDelay;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FINTLDetectNetworkResult) == 0x000008, "Wrong alignment on FINTLDetectNetworkResult");
static_assert(sizeof(FINTLDetectNetworkResult) == 0x000050, "Wrong size on FINTLDetectNetworkResult");
static_assert(offsetof(FINTLDetectNetworkResult, LocalRouterTime) == 0x000040, "Member 'FINTLDetectNetworkResult::LocalRouterTime' has a wrong offset!");
static_assert(offsetof(FINTLDetectNetworkResult, InternetRouterTime) == 0x000044, "Member 'FINTLDetectNetworkResult::InternetRouterTime' has a wrong offset!");
static_assert(offsetof(FINTLDetectNetworkResult, InternetDelay) == 0x000048, "Member 'FINTLDetectNetworkResult::InternetDelay' has a wrong offset!");

// ScriptStruct INTLCore.INTLLocalNotificationIOS
// 0x00A0 (0x00A0 - 0x0000)
struct FINTLLocalNotificationIOS final
{
public:
	int32                                         RepeatType;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AlertTitle;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTime;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Badge;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AlertBody;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AlertAction;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NotificationID;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            UserInfo;                                          // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLLocalNotificationIOS) == 0x000008, "Wrong alignment on FINTLLocalNotificationIOS");
static_assert(sizeof(FINTLLocalNotificationIOS) == 0x0000A0, "Wrong size on FINTLLocalNotificationIOS");
static_assert(offsetof(FINTLLocalNotificationIOS, RepeatType) == 0x000000, "Member 'FINTLLocalNotificationIOS::RepeatType' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotificationIOS, AlertTitle) == 0x000008, "Member 'FINTLLocalNotificationIOS::AlertTitle' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotificationIOS, FireTime) == 0x000018, "Member 'FINTLLocalNotificationIOS::FireTime' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotificationIOS, Badge) == 0x00001C, "Member 'FINTLLocalNotificationIOS::Badge' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotificationIOS, AlertBody) == 0x000020, "Member 'FINTLLocalNotificationIOS::AlertBody' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotificationIOS, AlertAction) == 0x000030, "Member 'FINTLLocalNotificationIOS::AlertAction' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotificationIOS, NotificationID) == 0x000040, "Member 'FINTLLocalNotificationIOS::NotificationID' has a wrong offset!");
static_assert(offsetof(FINTLLocalNotificationIOS, UserInfo) == 0x000050, "Member 'FINTLLocalNotificationIOS::UserInfo' has a wrong offset!");

// ScriptStruct INTLCore.INTLPushResult
// 0x0018 (0x0058 - 0x0040)
struct FINTLPushResult final : public FINTLBaseResult
{
public:
	int32                                         Type;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Notification;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLPushResult) == 0x000008, "Wrong alignment on FINTLPushResult");
static_assert(sizeof(FINTLPushResult) == 0x000058, "Wrong size on FINTLPushResult");
static_assert(offsetof(FINTLPushResult, Type) == 0x000040, "Member 'FINTLPushResult::Type' has a wrong offset!");
static_assert(offsetof(FINTLPushResult, Notification) == 0x000048, "Member 'FINTLPushResult::Notification' has a wrong offset!");

// ScriptStruct INTLCore.INTLUpdateOptionalRepoInitResult
// 0x0008 (0x0048 - 0x0040)
struct FINTLUpdateOptionalRepoInitResult final : public FINTLBaseResult
{
public:
	EINTLUpdateActionType                         ActionType;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepoID;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLUpdateOptionalRepoInitResult) == 0x000008, "Wrong alignment on FINTLUpdateOptionalRepoInitResult");
static_assert(sizeof(FINTLUpdateOptionalRepoInitResult) == 0x000048, "Wrong size on FINTLUpdateOptionalRepoInitResult");
static_assert(offsetof(FINTLUpdateOptionalRepoInitResult, ActionType) == 0x000040, "Member 'FINTLUpdateOptionalRepoInitResult::ActionType' has a wrong offset!");
static_assert(offsetof(FINTLUpdateOptionalRepoInitResult, RepoID) == 0x000044, "Member 'FINTLUpdateOptionalRepoInitResult::RepoID' has a wrong offset!");

// ScriptStruct INTLCore.INTLWebViewResult
// 0x0018 (0x0058 - 0x0040)
struct FINTLWebViewResult final : public FINTLBaseResult
{
public:
	int32                                         MsgType;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MsgJsonData;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLWebViewResult) == 0x000008, "Wrong alignment on FINTLWebViewResult");
static_assert(sizeof(FINTLWebViewResult) == 0x000058, "Wrong size on FINTLWebViewResult");
static_assert(offsetof(FINTLWebViewResult, MsgType) == 0x000040, "Member 'FINTLWebViewResult::MsgType' has a wrong offset!");
static_assert(offsetof(FINTLWebViewResult, MsgJsonData) == 0x000048, "Member 'FINTLWebViewResult::MsgJsonData' has a wrong offset!");

// ScriptStruct INTLCore.INTLComplianceResult
// 0x00B8 (0x00F8 - 0x0040)
struct FINTLComplianceResult final : public FINTLBaseResult
{
public:
	int32                                         AdultStatus;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentCertificateStatus;                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentCertificateStatusExpiration;                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EUUserAgreeStatus;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CountryCode;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdultAge;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameGrade;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CertificateType;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdultStatusExpiration;                             // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TS;                                                // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEEA;                                             // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDMA;                                             // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealNameAuthStatus;                                // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedRealNameAuth;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedLICertification;                               // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdultAgeMap;                                       // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameGradeMap;                                      // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLComplianceResult) == 0x000008, "Wrong alignment on FINTLComplianceResult");
static_assert(sizeof(FINTLComplianceResult) == 0x0000F8, "Wrong size on FINTLComplianceResult");
static_assert(offsetof(FINTLComplianceResult, AdultStatus) == 0x000040, "Member 'FINTLComplianceResult::AdultStatus' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, ParentCertificateStatus) == 0x000044, "Member 'FINTLComplianceResult::ParentCertificateStatus' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, ParentCertificateStatusExpiration) == 0x000048, "Member 'FINTLComplianceResult::ParentCertificateStatusExpiration' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, EUUserAgreeStatus) == 0x000058, "Member 'FINTLComplianceResult::EUUserAgreeStatus' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, CountryCode) == 0x000060, "Member 'FINTLComplianceResult::CountryCode' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, AdultAge) == 0x000070, "Member 'FINTLComplianceResult::AdultAge' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, GameGrade) == 0x000074, "Member 'FINTLComplianceResult::GameGrade' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, CertificateType) == 0x000078, "Member 'FINTLComplianceResult::CertificateType' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, AdultStatusExpiration) == 0x000080, "Member 'FINTLComplianceResult::AdultStatusExpiration' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, TS) == 0x000090, "Member 'FINTLComplianceResult::TS' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, IsEEA) == 0x0000A0, "Member 'FINTLComplianceResult::IsEEA' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, IsDMA) == 0x0000A1, "Member 'FINTLComplianceResult::IsDMA' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, Region) == 0x0000A8, "Member 'FINTLComplianceResult::Region' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, Email) == 0x0000B8, "Member 'FINTLComplianceResult::Email' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, RealNameAuthStatus) == 0x0000C8, "Member 'FINTLComplianceResult::RealNameAuthStatus' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, NeedRealNameAuth) == 0x0000CC, "Member 'FINTLComplianceResult::NeedRealNameAuth' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, NeedLICertification) == 0x0000D0, "Member 'FINTLComplianceResult::NeedLICertification' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, AdultAgeMap) == 0x0000D8, "Member 'FINTLComplianceResult::AdultAgeMap' has a wrong offset!");
static_assert(offsetof(FINTLComplianceResult, GameGradeMap) == 0x0000E8, "Member 'FINTLComplianceResult::GameGradeMap' has a wrong offset!");

// ScriptStruct INTLCore.INTLCustomerResult
// 0x0008 (0x0048 - 0x0040)
struct FINTLCustomerResult final : public FINTLBaseResult
{
public:
	int32                                         MsgType;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FINTLCustomerResult) == 0x000008, "Wrong alignment on FINTLCustomerResult");
static_assert(sizeof(FINTLCustomerResult) == 0x000048, "Wrong size on FINTLCustomerResult");
static_assert(offsetof(FINTLCustomerResult, MsgType) == 0x000040, "Member 'FINTLCustomerResult::MsgType' has a wrong offset!");

// ScriptStruct INTLCore.INTLCustomerUserProfile
// 0x0100 (0x0100 - 0x0000)
struct FINTLCustomerUserProfile final
{
public:
	class FString                                 LangType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sign;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpenID;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameLevel;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NickName;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleID;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AreaId;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZoneId;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameSvrId;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PictureUrl;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomParam1;                                      // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomParam2;                                      // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomParam3;                                      // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomParam4;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomParam5;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLCustomerUserProfile) == 0x000008, "Wrong alignment on FINTLCustomerUserProfile");
static_assert(sizeof(FINTLCustomerUserProfile) == 0x000100, "Wrong size on FINTLCustomerUserProfile");
static_assert(offsetof(FINTLCustomerUserProfile, LangType) == 0x000000, "Member 'FINTLCustomerUserProfile::LangType' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, Sign) == 0x000010, "Member 'FINTLCustomerUserProfile::Sign' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, OpenID) == 0x000020, "Member 'FINTLCustomerUserProfile::OpenID' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, GameLevel) == 0x000030, "Member 'FINTLCustomerUserProfile::GameLevel' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, NickName) == 0x000040, "Member 'FINTLCustomerUserProfile::NickName' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, RoleID) == 0x000050, "Member 'FINTLCustomerUserProfile::RoleID' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, AreaId) == 0x000060, "Member 'FINTLCustomerUserProfile::AreaId' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, ZoneId) == 0x000070, "Member 'FINTLCustomerUserProfile::ZoneId' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, GameSvrId) == 0x000080, "Member 'FINTLCustomerUserProfile::GameSvrId' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, Region) == 0x000090, "Member 'FINTLCustomerUserProfile::Region' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, PictureUrl) == 0x0000A0, "Member 'FINTLCustomerUserProfile::PictureUrl' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, CustomParam1) == 0x0000B0, "Member 'FINTLCustomerUserProfile::CustomParam1' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, CustomParam2) == 0x0000C0, "Member 'FINTLCustomerUserProfile::CustomParam2' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, CustomParam3) == 0x0000D0, "Member 'FINTLCustomerUserProfile::CustomParam3' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, CustomParam4) == 0x0000E0, "Member 'FINTLCustomerUserProfile::CustomParam4' has a wrong offset!");
static_assert(offsetof(FINTLCustomerUserProfile, CustomParam5) == 0x0000F0, "Member 'FINTLCustomerUserProfile::CustomParam5' has a wrong offset!");

// ScriptStruct INTLCore.INTLDirTreeNode
// 0x0060 (0x0060 - 0x0000)
struct FINTLDirTreeNode final
{
public:
	int32                                         NodeID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentId;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeaf;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tag;                                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomInt1;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomInt2;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomStr;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ChildrenIdSet;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLDirTreeNode) == 0x000008, "Wrong alignment on FINTLDirTreeNode");
static_assert(sizeof(FINTLDirTreeNode) == 0x000060, "Wrong size on FINTLDirTreeNode");
static_assert(offsetof(FINTLDirTreeNode, NodeID) == 0x000000, "Member 'FINTLDirTreeNode::NodeID' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeNode, ParentId) == 0x000004, "Member 'FINTLDirTreeNode::ParentId' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeNode, IsLeaf) == 0x000008, "Member 'FINTLDirTreeNode::IsLeaf' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeNode, Name) == 0x000010, "Member 'FINTLDirTreeNode::Name' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeNode, URL) == 0x000020, "Member 'FINTLDirTreeNode::URL' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeNode, Status) == 0x000030, "Member 'FINTLDirTreeNode::Status' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeNode, Tag) == 0x000034, "Member 'FINTLDirTreeNode::Tag' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeNode, CustomInt1) == 0x000038, "Member 'FINTLDirTreeNode::CustomInt1' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeNode, CustomInt2) == 0x00003C, "Member 'FINTLDirTreeNode::CustomInt2' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeNode, CustomStr) == 0x000040, "Member 'FINTLDirTreeNode::CustomStr' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeNode, ChildrenIdSet) == 0x000050, "Member 'FINTLDirTreeNode::ChildrenIdSet' has a wrong offset!");

// ScriptStruct INTLCore.INTLUpdateStartRepoNewVersionInfo
// 0x0040 (0x0040 - 0x0000)
struct FINTLUpdateStartRepoNewVersionInfo final
{
public:
	int32                                         MethodId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EINTLUpdateActionType                         ActionType;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewVersionType;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedDownloadSize;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameDefinedStr;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLUpdateStartRepoNewVersionInfo) == 0x000008, "Wrong alignment on FINTLUpdateStartRepoNewVersionInfo");
static_assert(sizeof(FINTLUpdateStartRepoNewVersionInfo) == 0x000040, "Wrong size on FINTLUpdateStartRepoNewVersionInfo");
static_assert(offsetof(FINTLUpdateStartRepoNewVersionInfo, MethodId) == 0x000000, "Member 'FINTLUpdateStartRepoNewVersionInfo::MethodId' has a wrong offset!");
static_assert(offsetof(FINTLUpdateStartRepoNewVersionInfo, ActionType) == 0x000004, "Member 'FINTLUpdateStartRepoNewVersionInfo::ActionType' has a wrong offset!");
static_assert(offsetof(FINTLUpdateStartRepoNewVersionInfo, NewVersionType) == 0x000008, "Member 'FINTLUpdateStartRepoNewVersionInfo::NewVersionType' has a wrong offset!");
static_assert(offsetof(FINTLUpdateStartRepoNewVersionInfo, Version) == 0x000010, "Member 'FINTLUpdateStartRepoNewVersionInfo::Version' has a wrong offset!");
static_assert(offsetof(FINTLUpdateStartRepoNewVersionInfo, NeedDownloadSize) == 0x000020, "Member 'FINTLUpdateStartRepoNewVersionInfo::NeedDownloadSize' has a wrong offset!");
static_assert(offsetof(FINTLUpdateStartRepoNewVersionInfo, GameDefinedStr) == 0x000030, "Member 'FINTLUpdateStartRepoNewVersionInfo::GameDefinedStr' has a wrong offset!");

// ScriptStruct INTLCore.INTLUpdateProgress
// 0x0068 (0x0068 - 0x0000)
struct FINTLUpdateProgress final
{
public:
	int32                                         MethodId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EINTLUpdateActionType                         ActionType;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UpdateStep;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepoID;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaskId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FinishedSize;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TotalSize;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Speed;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainTime;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepProgress;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalProgress;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMsg;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLUpdateProgress) == 0x000008, "Wrong alignment on FINTLUpdateProgress");
static_assert(sizeof(FINTLUpdateProgress) == 0x000068, "Wrong size on FINTLUpdateProgress");
static_assert(offsetof(FINTLUpdateProgress, MethodId) == 0x000000, "Member 'FINTLUpdateProgress::MethodId' has a wrong offset!");
static_assert(offsetof(FINTLUpdateProgress, ActionType) == 0x000004, "Member 'FINTLUpdateProgress::ActionType' has a wrong offset!");
static_assert(offsetof(FINTLUpdateProgress, UpdateStep) == 0x000008, "Member 'FINTLUpdateProgress::UpdateStep' has a wrong offset!");
static_assert(offsetof(FINTLUpdateProgress, RepoID) == 0x00000C, "Member 'FINTLUpdateProgress::RepoID' has a wrong offset!");
static_assert(offsetof(FINTLUpdateProgress, TaskId) == 0x000010, "Member 'FINTLUpdateProgress::TaskId' has a wrong offset!");
static_assert(offsetof(FINTLUpdateProgress, FinishedSize) == 0x000018, "Member 'FINTLUpdateProgress::FinishedSize' has a wrong offset!");
static_assert(offsetof(FINTLUpdateProgress, TotalSize) == 0x000028, "Member 'FINTLUpdateProgress::TotalSize' has a wrong offset!");
static_assert(offsetof(FINTLUpdateProgress, Speed) == 0x000038, "Member 'FINTLUpdateProgress::Speed' has a wrong offset!");
static_assert(offsetof(FINTLUpdateProgress, RemainTime) == 0x000048, "Member 'FINTLUpdateProgress::RemainTime' has a wrong offset!");
static_assert(offsetof(FINTLUpdateProgress, StepProgress) == 0x00004C, "Member 'FINTLUpdateProgress::StepProgress' has a wrong offset!");
static_assert(offsetof(FINTLUpdateProgress, TotalProgress) == 0x000050, "Member 'FINTLUpdateProgress::TotalProgress' has a wrong offset!");
static_assert(offsetof(FINTLUpdateProgress, ErrorMsg) == 0x000058, "Member 'FINTLUpdateProgress::ErrorMsg' has a wrong offset!");

// ScriptStruct INTLCore.INTLUpdateResult
// 0x0010 (0x0050 - 0x0040)
struct FINTLUpdateResult final : public FINTLBaseResult
{
public:
	EINTLUpdateActionType                         ActionType;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepoID;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaskId;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FINTLUpdateResult) == 0x000008, "Wrong alignment on FINTLUpdateResult");
static_assert(sizeof(FINTLUpdateResult) == 0x000050, "Wrong size on FINTLUpdateResult");
static_assert(offsetof(FINTLUpdateResult, ActionType) == 0x000040, "Member 'FINTLUpdateResult::ActionType' has a wrong offset!");
static_assert(offsetof(FINTLUpdateResult, RepoID) == 0x000044, "Member 'FINTLUpdateResult::RepoID' has a wrong offset!");
static_assert(offsetof(FINTLUpdateResult, TaskId) == 0x000048, "Member 'FINTLUpdateResult::TaskId' has a wrong offset!");

// ScriptStruct INTLCore.INTLUpdateInitInfo
// 0x0030 (0x0030 - 0x0000)
struct FINTLUpdateInitInfo final
{
public:
	EINTLUpdateActionType                         ActionType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepoID;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourceCopyType;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ResourceSavePath;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FirstResourceDirPath;                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLUpdateInitInfo) == 0x000008, "Wrong alignment on FINTLUpdateInitInfo");
static_assert(sizeof(FINTLUpdateInitInfo) == 0x000030, "Wrong size on FINTLUpdateInitInfo");
static_assert(offsetof(FINTLUpdateInitInfo, ActionType) == 0x000000, "Member 'FINTLUpdateInitInfo::ActionType' has a wrong offset!");
static_assert(offsetof(FINTLUpdateInitInfo, RepoID) == 0x000004, "Member 'FINTLUpdateInitInfo::RepoID' has a wrong offset!");
static_assert(offsetof(FINTLUpdateInitInfo, ResourceCopyType) == 0x000008, "Member 'FINTLUpdateInitInfo::ResourceCopyType' has a wrong offset!");
static_assert(offsetof(FINTLUpdateInitInfo, ResourceSavePath) == 0x000010, "Member 'FINTLUpdateInitInfo::ResourceSavePath' has a wrong offset!");
static_assert(offsetof(FINTLUpdateInitInfo, FirstResourceDirPath) == 0x000020, "Member 'FINTLUpdateInitInfo::FirstResourceDirPath' has a wrong offset!");

// ScriptStruct INTLCore.INTLUpdateOptionalRepoFilesStatus
// 0x0028 (0x0028 - 0x0000)
struct FINTLUpdateOptionalRepoFilesStatus final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFileNum;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValidFileNum;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedDownloadSize;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLUpdateOptionalRepoFilesStatus) == 0x000008, "Wrong alignment on FINTLUpdateOptionalRepoFilesStatus");
static_assert(sizeof(FINTLUpdateOptionalRepoFilesStatus) == 0x000028, "Wrong size on FINTLUpdateOptionalRepoFilesStatus");
static_assert(offsetof(FINTLUpdateOptionalRepoFilesStatus, FilePath) == 0x000000, "Member 'FINTLUpdateOptionalRepoFilesStatus::FilePath' has a wrong offset!");
static_assert(offsetof(FINTLUpdateOptionalRepoFilesStatus, TotalFileNum) == 0x000010, "Member 'FINTLUpdateOptionalRepoFilesStatus::TotalFileNum' has a wrong offset!");
static_assert(offsetof(FINTLUpdateOptionalRepoFilesStatus, ValidFileNum) == 0x000014, "Member 'FINTLUpdateOptionalRepoFilesStatus::ValidFileNum' has a wrong offset!");
static_assert(offsetof(FINTLUpdateOptionalRepoFilesStatus, NeedDownloadSize) == 0x000018, "Member 'FINTLUpdateOptionalRepoFilesStatus::NeedDownloadSize' has a wrong offset!");

// ScriptStruct INTLCore.INTLDirTreeResult
// 0x0030 (0x0070 - 0x0040)
struct FINTLDirTreeResult final : public FINTLBaseResult
{
public:
	int32                                         TreeId;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TreeInfo;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleInfo;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expiretime;                                        // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FINTLDirTreeResult) == 0x000008, "Wrong alignment on FINTLDirTreeResult");
static_assert(sizeof(FINTLDirTreeResult) == 0x000070, "Wrong size on FINTLDirTreeResult");
static_assert(offsetof(FINTLDirTreeResult, TreeId) == 0x000040, "Member 'FINTLDirTreeResult::TreeId' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeResult, NodeID) == 0x000044, "Member 'FINTLDirTreeResult::NodeID' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeResult, TreeInfo) == 0x000048, "Member 'FINTLDirTreeResult::TreeInfo' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeResult, RoleInfo) == 0x000058, "Member 'FINTLDirTreeResult::RoleInfo' has a wrong offset!");
static_assert(offsetof(FINTLDirTreeResult, Expiretime) == 0x000068, "Member 'FINTLDirTreeResult::Expiretime' has a wrong offset!");

// ScriptStruct INTLCore.INTLLBSIPInfoResult
// 0x0028 (0x0068 - 0x0040)
struct FINTLLBSIPInfoResult final : public FINTLBaseResult
{
public:
	class FString                                 Region;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Alpha2;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timestamp;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FINTLLBSIPInfoResult) == 0x000008, "Wrong alignment on FINTLLBSIPInfoResult");
static_assert(sizeof(FINTLLBSIPInfoResult) == 0x000068, "Wrong size on FINTLLBSIPInfoResult");
static_assert(offsetof(FINTLLBSIPInfoResult, Region) == 0x000040, "Member 'FINTLLBSIPInfoResult::Region' has a wrong offset!");
static_assert(offsetof(FINTLLBSIPInfoResult, Alpha2) == 0x000050, "Member 'FINTLLBSIPInfoResult::Alpha2' has a wrong offset!");
static_assert(offsetof(FINTLLBSIPInfoResult, Timestamp) == 0x000060, "Member 'FINTLLBSIPInfoResult::Timestamp' has a wrong offset!");

// ScriptStruct INTLCore.INTLStartUdpSocketResult
// 0x0018 (0x0058 - 0x0040)
struct FINTLStartUdpSocketResult final : public FINTLBaseResult
{
public:
	class FString                                 Ip;                                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Net_delay;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLStartUdpSocketResult) == 0x000008, "Wrong alignment on FINTLStartUdpSocketResult");
static_assert(sizeof(FINTLStartUdpSocketResult) == 0x000058, "Wrong size on FINTLStartUdpSocketResult");
static_assert(offsetof(FINTLStartUdpSocketResult, Ip) == 0x000040, "Member 'FINTLStartUdpSocketResult::Ip' has a wrong offset!");
static_assert(offsetof(FINTLStartUdpSocketResult, Net_delay) == 0x000050, "Member 'FINTLStartUdpSocketResult::Net_delay' has a wrong offset!");
static_assert(offsetof(FINTLStartUdpSocketResult, Port) == 0x000054, "Member 'FINTLStartUdpSocketResult::Port' has a wrong offset!");

// ScriptStruct INTLCore.INTLToolsResult
// 0x0020 (0x0060 - 0x0040)
struct FINTLToolsResult final : public FINTLBaseResult
{
public:
	class FString                                 DeepLinkUrl;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortLinkUrl;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLToolsResult) == 0x000008, "Wrong alignment on FINTLToolsResult");
static_assert(sizeof(FINTLToolsResult) == 0x000060, "Wrong size on FINTLToolsResult");
static_assert(offsetof(FINTLToolsResult, DeepLinkUrl) == 0x000040, "Member 'FINTLToolsResult::DeepLinkUrl' has a wrong offset!");
static_assert(offsetof(FINTLToolsResult, ShortLinkUrl) == 0x000050, "Member 'FINTLToolsResult::ShortLinkUrl' has a wrong offset!");

// ScriptStruct INTLCore.INTLDNSResult
// 0x0030 (0x0070 - 0x0040)
struct FINTLDNSResult final : public FINTLBaseResult
{
public:
	class FString                                 V4;                                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 V6;                                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Host;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLDNSResult) == 0x000008, "Wrong alignment on FINTLDNSResult");
static_assert(sizeof(FINTLDNSResult) == 0x000070, "Wrong size on FINTLDNSResult");
static_assert(offsetof(FINTLDNSResult, V4) == 0x000040, "Member 'FINTLDNSResult::V4' has a wrong offset!");
static_assert(offsetof(FINTLDNSResult, V6) == 0x000050, "Member 'FINTLDNSResult::V6' has a wrong offset!");
static_assert(offsetof(FINTLDNSResult, Host) == 0x000060, "Member 'FINTLDNSResult::Host' has a wrong offset!");

// ScriptStruct INTLCore.INTLExtendResult
// 0x0018 (0x0058 - 0x0040)
struct FINTLExtendResult final : public FINTLBaseResult
{
public:
	EINTLLoginChannel                             Channel;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExtendMethodName;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLExtendResult) == 0x000008, "Wrong alignment on FINTLExtendResult");
static_assert(sizeof(FINTLExtendResult) == 0x000058, "Wrong size on FINTLExtendResult");
static_assert(offsetof(FINTLExtendResult, Channel) == 0x000040, "Member 'FINTLExtendResult::Channel' has a wrong offset!");
static_assert(offsetof(FINTLExtendResult, ExtendMethodName) == 0x000048, "Member 'FINTLExtendResult::ExtendMethodName' has a wrong offset!");

// ScriptStruct INTLCore.CutoutRect
// 0x0010 (0x0010 - 0x0000)
struct FCutoutRect final
{
public:
	int32                                         Top;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bottom;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Left;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Right;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCutoutRect) == 0x000004, "Wrong alignment on FCutoutRect");
static_assert(sizeof(FCutoutRect) == 0x000010, "Wrong size on FCutoutRect");
static_assert(offsetof(FCutoutRect, Top) == 0x000000, "Member 'FCutoutRect::Top' has a wrong offset!");
static_assert(offsetof(FCutoutRect, Bottom) == 0x000004, "Member 'FCutoutRect::Bottom' has a wrong offset!");
static_assert(offsetof(FCutoutRect, Left) == 0x000008, "Member 'FCutoutRect::Left' has a wrong offset!");
static_assert(offsetof(FCutoutRect, Right) == 0x00000C, "Member 'FCutoutRect::Right' has a wrong offset!");

// ScriptStruct INTLCore.CutoutInfoResult
// 0x0030 (0x0070 - 0x0040)
struct FCutoutInfoResult final : public FINTLBaseResult
{
public:
	bool                                          HasCutout;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCutoutHidden;                                    // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScreenHeight;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScreenWidth;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusBarHeight;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCutoutRect>                    CutoutRects;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCutoutRect                            SafeArea;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCutoutInfoResult) == 0x000008, "Wrong alignment on FCutoutInfoResult");
static_assert(sizeof(FCutoutInfoResult) == 0x000070, "Wrong size on FCutoutInfoResult");
static_assert(offsetof(FCutoutInfoResult, HasCutout) == 0x000040, "Member 'FCutoutInfoResult::HasCutout' has a wrong offset!");
static_assert(offsetof(FCutoutInfoResult, IsCutoutHidden) == 0x000041, "Member 'FCutoutInfoResult::IsCutoutHidden' has a wrong offset!");
static_assert(offsetof(FCutoutInfoResult, ScreenHeight) == 0x000044, "Member 'FCutoutInfoResult::ScreenHeight' has a wrong offset!");
static_assert(offsetof(FCutoutInfoResult, ScreenWidth) == 0x000048, "Member 'FCutoutInfoResult::ScreenWidth' has a wrong offset!");
static_assert(offsetof(FCutoutInfoResult, StatusBarHeight) == 0x00004C, "Member 'FCutoutInfoResult::StatusBarHeight' has a wrong offset!");
static_assert(offsetof(FCutoutInfoResult, CutoutRects) == 0x000050, "Member 'FCutoutInfoResult::CutoutRects' has a wrong offset!");
static_assert(offsetof(FCutoutInfoResult, SafeArea) == 0x000060, "Member 'FCutoutInfoResult::SafeArea' has a wrong offset!");

// ScriptStruct INTLCore.INTLPermissionResult
// 0x0010 (0x0050 - 0x0040)
struct FINTLPermissionResult final : public FINTLBaseResult
{
public:
	class FString                                 Permission_json_;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLPermissionResult) == 0x000008, "Wrong alignment on FINTLPermissionResult");
static_assert(sizeof(FINTLPermissionResult) == 0x000050, "Wrong size on FINTLPermissionResult");
static_assert(offsetof(FINTLPermissionResult, Permission_json_) == 0x000040, "Member 'FINTLPermissionResult::Permission_json_' has a wrong offset!");

// ScriptStruct INTLCore.INTLRewardItem
// 0x0028 (0x0028 - 0x0000)
struct FINTLRewardItem final
{
public:
	class FString                                 Desc;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Icon;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLRewardItem) == 0x000008, "Wrong alignment on FINTLRewardItem");
static_assert(sizeof(FINTLRewardItem) == 0x000028, "Wrong size on FINTLRewardItem");
static_assert(offsetof(FINTLRewardItem, Desc) == 0x000000, "Member 'FINTLRewardItem::Desc' has a wrong offset!");
static_assert(offsetof(FINTLRewardItem, Icon) == 0x000010, "Member 'FINTLRewardItem::Icon' has a wrong offset!");
static_assert(offsetof(FINTLRewardItem, ID) == 0x000020, "Member 'FINTLRewardItem::ID' has a wrong offset!");
static_assert(offsetof(FINTLRewardItem, Num) == 0x000024, "Member 'FINTLRewardItem::Num' has a wrong offset!");

// ScriptStruct INTLCore.INTLEventsInfoItem
// 0x0040 (0x0040 - 0x0000)
struct FINTLEventsInfoItem final
{
public:
	uint8                                         CanSend;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsSent;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Image;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventId;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FINTLRewardItem>                Rewards;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLEventsInfoItem) == 0x000008, "Wrong alignment on FINTLEventsInfoItem");
static_assert(sizeof(FINTLEventsInfoItem) == 0x000040, "Wrong size on FINTLEventsInfoItem");
static_assert(offsetof(FINTLEventsInfoItem, CanSend) == 0x000000, "Member 'FINTLEventsInfoItem::CanSend' has a wrong offset!");
static_assert(offsetof(FINTLEventsInfoItem, IsSent) == 0x000001, "Member 'FINTLEventsInfoItem::IsSent' has a wrong offset!");
static_assert(offsetof(FINTLEventsInfoItem, Image) == 0x000008, "Member 'FINTLEventsInfoItem::Image' has a wrong offset!");
static_assert(offsetof(FINTLEventsInfoItem, Content) == 0x000018, "Member 'FINTLEventsInfoItem::Content' has a wrong offset!");
static_assert(offsetof(FINTLEventsInfoItem, EventId) == 0x000028, "Member 'FINTLEventsInfoItem::EventId' has a wrong offset!");
static_assert(offsetof(FINTLEventsInfoItem, Rewards) == 0x000030, "Member 'FINTLEventsInfoItem::Rewards' has a wrong offset!");

// ScriptStruct INTLCore.INTLLIBindRewardResult
// 0x0040 (0x0080 - 0x0040)
struct FINTLLIBindRewardResult final : public FINTLBaseResult
{
public:
	class FString                                 Image;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CanSend;                                           // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsSent;                                            // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromNetwork;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventId;                                           // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FINTLEventsInfoItem>            Events;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLLIBindRewardResult) == 0x000008, "Wrong alignment on FINTLLIBindRewardResult");
static_assert(sizeof(FINTLLIBindRewardResult) == 0x000080, "Wrong size on FINTLLIBindRewardResult");
static_assert(offsetof(FINTLLIBindRewardResult, Image) == 0x000040, "Member 'FINTLLIBindRewardResult::Image' has a wrong offset!");
static_assert(offsetof(FINTLLIBindRewardResult, Content) == 0x000050, "Member 'FINTLLIBindRewardResult::Content' has a wrong offset!");
static_assert(offsetof(FINTLLIBindRewardResult, CanSend) == 0x000060, "Member 'FINTLLIBindRewardResult::CanSend' has a wrong offset!");
static_assert(offsetof(FINTLLIBindRewardResult, IsSent) == 0x000064, "Member 'FINTLLIBindRewardResult::IsSent' has a wrong offset!");
static_assert(offsetof(FINTLLIBindRewardResult, FromNetwork) == 0x000068, "Member 'FINTLLIBindRewardResult::FromNetwork' has a wrong offset!");
static_assert(offsetof(FINTLLIBindRewardResult, EventId) == 0x00006C, "Member 'FINTLLIBindRewardResult::EventId' has a wrong offset!");
static_assert(offsetof(FINTLLIBindRewardResult, Events) == 0x000070, "Member 'FINTLLIBindRewardResult::Events' has a wrong offset!");

// ScriptStruct INTLCore.INTLTabExpEntity
// 0x0120 (0x0120 - 0x0000)
struct FINTLTabExpEntity final
{
public:
	class FString                                 ExpName;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Assignment;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpGrayId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LayerName;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExpParams;                                         // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ExpId;                                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bucket;                                            // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModuleBucketNum;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percentage;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpKey;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpGroupKey;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModuleCode;                                        // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Params;                                            // 0x00D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLTabExpEntity) == 0x000008, "Wrong alignment on FINTLTabExpEntity");
static_assert(sizeof(FINTLTabExpEntity) == 0x000120, "Wrong size on FINTLTabExpEntity");
static_assert(offsetof(FINTLTabExpEntity, ExpName) == 0x000000, "Member 'FINTLTabExpEntity::ExpName' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, Assignment) == 0x000010, "Member 'FINTLTabExpEntity::Assignment' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, ExpGrayId) == 0x000020, "Member 'FINTLTabExpEntity::ExpGrayId' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, LayerName) == 0x000030, "Member 'FINTLTabExpEntity::LayerName' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, ExpParams) == 0x000040, "Member 'FINTLTabExpEntity::ExpParams' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, ExpId) == 0x000090, "Member 'FINTLTabExpEntity::ExpId' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, Bucket) == 0x000094, "Member 'FINTLTabExpEntity::Bucket' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, ModuleBucketNum) == 0x000098, "Member 'FINTLTabExpEntity::ModuleBucketNum' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, Percentage) == 0x00009C, "Member 'FINTLTabExpEntity::Percentage' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, ExpKey) == 0x0000A0, "Member 'FINTLTabExpEntity::ExpKey' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, ExpGroupKey) == 0x0000B0, "Member 'FINTLTabExpEntity::ExpGroupKey' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, ModuleCode) == 0x0000C0, "Member 'FINTLTabExpEntity::ModuleCode' has a wrong offset!");
static_assert(offsetof(FINTLTabExpEntity, Params) == 0x0000D0, "Member 'FINTLTabExpEntity::Params' has a wrong offset!");

// ScriptStruct INTLCore.INTLAdjustAttrsChangedResult
// 0x0010 (0x0050 - 0x0040)
struct FINTLAdjustAttrsChangedResult final : public FINTLBaseResult
{
public:
	class FString                                 AdjustAttribution;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FINTLAdjustAttrsChangedResult) == 0x000008, "Wrong alignment on FINTLAdjustAttrsChangedResult");
static_assert(sizeof(FINTLAdjustAttrsChangedResult) == 0x000050, "Wrong size on FINTLAdjustAttrsChangedResult");
static_assert(offsetof(FINTLAdjustAttrsChangedResult, AdjustAttribution) == 0x000040, "Member 'FINTLAdjustAttrsChangedResult::AdjustAttribution' has a wrong offset!");

}


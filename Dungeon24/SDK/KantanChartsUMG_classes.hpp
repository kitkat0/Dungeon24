#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KantanChartsUMG

#include "Basic.hpp"

#include "KantanChartsUMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"
#include "KantanChartsSlate_structs.hpp"


namespace SDK
{

// Class KantanChartsUMG.KantanChart
// 0x0050 (0x01A0 - 0x0150)
class UKantanChart : public UWidget
{
public:
	struct FMargin                                Margins;                                           // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   ChartTitle;                                        // 0x0160(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                TitlePadding;                                      // 0x0178(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         UpdateTickRate;                                    // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x14];                                     // 0x018C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetChartTitle(const class FText& InTitle);
	void SetChartTitlePadding(const struct FMargin& InPadding);
	void SetMargins(const struct FMargin& InMargins);
	void SetUpdateTickRate(float InRate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KantanChart">();
	}
	static class UKantanChart* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKantanChart>();
	}
};
static_assert(alignof(UKantanChart) == 0x000008, "Wrong alignment on UKantanChart");
static_assert(sizeof(UKantanChart) == 0x0001A0, "Wrong size on UKantanChart");
static_assert(offsetof(UKantanChart, Margins) == 0x000150, "Member 'UKantanChart::Margins' has a wrong offset!");
static_assert(offsetof(UKantanChart, ChartTitle) == 0x000160, "Member 'UKantanChart::ChartTitle' has a wrong offset!");
static_assert(offsetof(UKantanChart, TitlePadding) == 0x000178, "Member 'UKantanChart::TitlePadding' has a wrong offset!");
static_assert(offsetof(UKantanChart, UpdateTickRate) == 0x000188, "Member 'UKantanChart::UpdateTickRate' has a wrong offset!");

// Class KantanChartsUMG.KantanCategoryChart
// 0x0020 (0x01C0 - 0x01A0)
class UKantanCategoryChart : public UKantanChart
{
public:
	bool                                          bAutoPerCategoryStyles;                            // 0x01A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UKantanCategoryStyleSet*                CategoryStyleSet;                                  // 0x01A8(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCategoryStyleManualMapping>    ManualStyleMappings;                               // 0x01B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void AddCategoryStyleOverride(class FName CategoryId, const struct FLinearColor& Color);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KantanCategoryChart">();
	}
	static class UKantanCategoryChart* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKantanCategoryChart>();
	}
};
static_assert(alignof(UKantanCategoryChart) == 0x000008, "Wrong alignment on UKantanCategoryChart");
static_assert(sizeof(UKantanCategoryChart) == 0x0001C0, "Wrong size on UKantanCategoryChart");
static_assert(offsetof(UKantanCategoryChart, bAutoPerCategoryStyles) == 0x0001A0, "Member 'UKantanCategoryChart::bAutoPerCategoryStyles' has a wrong offset!");
static_assert(offsetof(UKantanCategoryChart, CategoryStyleSet) == 0x0001A8, "Member 'UKantanCategoryChart::CategoryStyleSet' has a wrong offset!");
static_assert(offsetof(UKantanCategoryChart, ManualStyleMappings) == 0x0001B0, "Member 'UKantanCategoryChart::ManualStyleMappings' has a wrong offset!");

// Class KantanChartsUMG.KantanBarChartBase
// 0x01E0 (0x03A0 - 0x01C0)
class UKantanBarChartBase : public UKantanCategoryChart
{
public:
	struct FKantanBarChartStyle                   WidgetStyle;                                       // 0x01C0(0x0180)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EKantanBarChartOrientation                    Orientation;                                       // 0x0340(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBarValue;                                       // 0x0344(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKantanBarLabelPosition                       LabelPosition;                                     // 0x0348(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BarToGapRatio;                                     // 0x034C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKantanBarValueExtents                        ValueExtentsDisplay;                               // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCartesianAxisConfig                   ValueAxisCfg;                                      // 0x0358(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetBarToGapRatio(float InRatio);
	void SetExtentsDisplay(EKantanBarValueExtents InExtents);
	void SetLabelPosition(EKantanBarLabelPosition InPosition);
	void SetMaxBarValue(float InMaxValue);
	void SetOrientation(EKantanBarChartOrientation InOrientation);
	void SetValueAxisConfig(const struct FCartesianAxisConfig& InCfg);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KantanBarChartBase">();
	}
	static class UKantanBarChartBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKantanBarChartBase>();
	}
};
static_assert(alignof(UKantanBarChartBase) == 0x000010, "Wrong alignment on UKantanBarChartBase");
static_assert(sizeof(UKantanBarChartBase) == 0x0003A0, "Wrong size on UKantanBarChartBase");
static_assert(offsetof(UKantanBarChartBase, WidgetStyle) == 0x0001C0, "Member 'UKantanBarChartBase::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UKantanBarChartBase, Orientation) == 0x000340, "Member 'UKantanBarChartBase::Orientation' has a wrong offset!");
static_assert(offsetof(UKantanBarChartBase, MaxBarValue) == 0x000344, "Member 'UKantanBarChartBase::MaxBarValue' has a wrong offset!");
static_assert(offsetof(UKantanBarChartBase, LabelPosition) == 0x000348, "Member 'UKantanBarChartBase::LabelPosition' has a wrong offset!");
static_assert(offsetof(UKantanBarChartBase, BarToGapRatio) == 0x00034C, "Member 'UKantanBarChartBase::BarToGapRatio' has a wrong offset!");
static_assert(offsetof(UKantanBarChartBase, ValueExtentsDisplay) == 0x000350, "Member 'UKantanBarChartBase::ValueExtentsDisplay' has a wrong offset!");
static_assert(offsetof(UKantanBarChartBase, ValueAxisCfg) == 0x000358, "Member 'UKantanBarChartBase::ValueAxisCfg' has a wrong offset!");

// Class KantanChartsUMG.BarChart
// 0x0010 (0x03B0 - 0x03A0)
class UBarChart final : public UKantanBarChartBase
{
public:
	class UObject*                                DataSource;                                        // 0x03A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetDatasource(class UObject* InDatasource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BarChart">();
	}
	static class UBarChart* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBarChart>();
	}
};
static_assert(alignof(UBarChart) == 0x000010, "Wrong alignment on UBarChart");
static_assert(sizeof(UBarChart) == 0x0003B0, "Wrong size on UBarChart");
static_assert(offsetof(UBarChart, DataSource) == 0x0003A0, "Member 'UBarChart::DataSource' has a wrong offset!");

// Class KantanChartsUMG.KantanCartesianChartBase
// 0x0280 (0x0420 - 0x01A0)
class UKantanCartesianChartBase : public UKantanChart
{
public:
	struct FKantanCartesianChartStyle             WidgetStyle;                                       // 0x01A0(0x0180)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKantanCartesianPlotScale              PlotScale;                                         // 0x0320(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EKantanDataPointSize                          DataPointSize;                                     // 0x0358(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCartesianAxisConfig                   XAxisCfg;                                          // 0x0360(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCartesianAxisConfig                   YAxisCfg;                                          // 0x03A8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                AxisTitlePadding;                                  // 0x03F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UKantanSeriesStyleSet*                  SeriesStyleSet;                                    // 0x0400(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSeriesStyleManualMapping>      ManualStyleMappings;                               // 0x0408(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAntiAlias;                                        // 0x0418(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSeriesStyleOverride(class FName SeriesId, class UKantanPointStyle* PointStyle, const struct FLinearColor& Color);
	void ConfigureSeries(class FName ID, bool bDrawPoints, bool bDrawLines);
	void EnableSeries(class FName ID, bool bEnable);
	void SetAxisTitlePadding(const struct FMargin& InPadding);
	void SetDataPointSize(EKantanDataPointSize InSize);
	void SetPlotScale(const struct FVector2D& InScale, const struct FVector2D& InFocalCoords);
	void SetPlotScaleByRange(const struct FCartesianAxisRange& InRangeX, const struct FCartesianAxisRange& InRangeY);
	void SetXAxisConfig(const struct FCartesianAxisConfig& InCfg);
	void SetYAxisConfig(const struct FCartesianAxisConfig& InCfg);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KantanCartesianChartBase">();
	}
	static class UKantanCartesianChartBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKantanCartesianChartBase>();
	}
};
static_assert(alignof(UKantanCartesianChartBase) == 0x000010, "Wrong alignment on UKantanCartesianChartBase");
static_assert(sizeof(UKantanCartesianChartBase) == 0x000420, "Wrong size on UKantanCartesianChartBase");
static_assert(offsetof(UKantanCartesianChartBase, WidgetStyle) == 0x0001A0, "Member 'UKantanCartesianChartBase::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UKantanCartesianChartBase, PlotScale) == 0x000320, "Member 'UKantanCartesianChartBase::PlotScale' has a wrong offset!");
static_assert(offsetof(UKantanCartesianChartBase, DataPointSize) == 0x000358, "Member 'UKantanCartesianChartBase::DataPointSize' has a wrong offset!");
static_assert(offsetof(UKantanCartesianChartBase, XAxisCfg) == 0x000360, "Member 'UKantanCartesianChartBase::XAxisCfg' has a wrong offset!");
static_assert(offsetof(UKantanCartesianChartBase, YAxisCfg) == 0x0003A8, "Member 'UKantanCartesianChartBase::YAxisCfg' has a wrong offset!");
static_assert(offsetof(UKantanCartesianChartBase, AxisTitlePadding) == 0x0003F0, "Member 'UKantanCartesianChartBase::AxisTitlePadding' has a wrong offset!");
static_assert(offsetof(UKantanCartesianChartBase, SeriesStyleSet) == 0x000400, "Member 'UKantanCartesianChartBase::SeriesStyleSet' has a wrong offset!");
static_assert(offsetof(UKantanCartesianChartBase, ManualStyleMappings) == 0x000408, "Member 'UKantanCartesianChartBase::ManualStyleMappings' has a wrong offset!");
static_assert(offsetof(UKantanCartesianChartBase, bAntiAlias) == 0x000418, "Member 'UKantanCartesianChartBase::bAntiAlias' has a wrong offset!");

// Class KantanChartsUMG.KantanCartesianPlotBase
// 0x0000 (0x0420 - 0x0420)
class UKantanCartesianPlotBase : public UKantanCartesianChartBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KantanCartesianPlotBase">();
	}
	static class UKantanCartesianPlotBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKantanCartesianPlotBase>();
	}
};
static_assert(alignof(UKantanCartesianPlotBase) == 0x000010, "Wrong alignment on UKantanCartesianPlotBase");
static_assert(sizeof(UKantanCartesianPlotBase) == 0x000420, "Wrong size on UKantanCartesianPlotBase");

// Class KantanChartsUMG.CartesianPlot
// 0x0010 (0x0430 - 0x0420)
class UCartesianPlot final : public UKantanCartesianPlotBase
{
public:
	class UObject*                                DataSource;                                        // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetDatasource(class UObject* InDatasource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CartesianPlot">();
	}
	static class UCartesianPlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCartesianPlot>();
	}
};
static_assert(alignof(UCartesianPlot) == 0x000010, "Wrong alignment on UCartesianPlot");
static_assert(sizeof(UCartesianPlot) == 0x000430, "Wrong size on UCartesianPlot");
static_assert(offsetof(UCartesianPlot, DataSource) == 0x000420, "Member 'UCartesianPlot::DataSource' has a wrong offset!");

// Class KantanChartsUMG.KantanChartLegend
// 0x0110 (0x0260 - 0x0150)
class UKantanChartLegend final : public UWidget
{
public:
	struct FMargin                                Margins;                                           // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                SeriesPadding;                                     // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Background;                                        // 0x0170(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UKantanCartesianChartBase> Chart;                                             // 0x0244(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x14];                                     // 0x024C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBackground(const struct FSlateBrush& InBrush);
	void SetChart(class UKantanCartesianChartBase* InChart);
	void SetFontSize(int32 InFontSize);
	void SetMargins(const struct FMargin& InMargins);
	void SetSeriesPadding(const struct FMargin& InPadding);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KantanChartLegend">();
	}
	static class UKantanChartLegend* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKantanChartLegend>();
	}
};
static_assert(alignof(UKantanChartLegend) == 0x000010, "Wrong alignment on UKantanChartLegend");
static_assert(sizeof(UKantanChartLegend) == 0x000260, "Wrong size on UKantanChartLegend");
static_assert(offsetof(UKantanChartLegend, Margins) == 0x000150, "Member 'UKantanChartLegend::Margins' has a wrong offset!");
static_assert(offsetof(UKantanChartLegend, SeriesPadding) == 0x000160, "Member 'UKantanChartLegend::SeriesPadding' has a wrong offset!");
static_assert(offsetof(UKantanChartLegend, Background) == 0x000170, "Member 'UKantanChartLegend::Background' has a wrong offset!");
static_assert(offsetof(UKantanChartLegend, FontSize) == 0x000240, "Member 'UKantanChartLegend::FontSize' has a wrong offset!");
static_assert(offsetof(UKantanChartLegend, Chart) == 0x000244, "Member 'UKantanChartLegend::Chart' has a wrong offset!");

// Class KantanChartsUMG.KantanTimeSeriesPlotBase
// 0x0030 (0x0450 - 0x0420)
class UKantanTimeSeriesPlotBase : public UKantanCartesianChartBase
{
public:
	bool                                          bUseFixedTimeRange;                                // 0x0420(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_421[0x3];                                      // 0x0421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisplayTimeRange;                                  // 0x0424(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCartesianRangeBound                   LowerTimeBound;                                    // 0x0428(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCartesianRangeBound                   UpperTimeBound;                                    // 0x0430(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCartesianRangeBound                   LowerValueBound;                                   // 0x0438(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCartesianRangeBound                   UpperValueBound;                                   // 0x0440(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExtendValueRangeToZero;                           // 0x0448(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLowerTimeBound(const struct FCartesianRangeBound& InLowerBound);
	void SetLowerValueBound(const struct FCartesianRangeBound& InLowerBound);
	void SetUpperTimeBound(const struct FCartesianRangeBound& InUpperBound);
	void SetUpperValueBound(const struct FCartesianRangeBound& InUpperBound);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KantanTimeSeriesPlotBase">();
	}
	static class UKantanTimeSeriesPlotBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKantanTimeSeriesPlotBase>();
	}
};
static_assert(alignof(UKantanTimeSeriesPlotBase) == 0x000010, "Wrong alignment on UKantanTimeSeriesPlotBase");
static_assert(sizeof(UKantanTimeSeriesPlotBase) == 0x000450, "Wrong size on UKantanTimeSeriesPlotBase");
static_assert(offsetof(UKantanTimeSeriesPlotBase, bUseFixedTimeRange) == 0x000420, "Member 'UKantanTimeSeriesPlotBase::bUseFixedTimeRange' has a wrong offset!");
static_assert(offsetof(UKantanTimeSeriesPlotBase, DisplayTimeRange) == 0x000424, "Member 'UKantanTimeSeriesPlotBase::DisplayTimeRange' has a wrong offset!");
static_assert(offsetof(UKantanTimeSeriesPlotBase, LowerTimeBound) == 0x000428, "Member 'UKantanTimeSeriesPlotBase::LowerTimeBound' has a wrong offset!");
static_assert(offsetof(UKantanTimeSeriesPlotBase, UpperTimeBound) == 0x000430, "Member 'UKantanTimeSeriesPlotBase::UpperTimeBound' has a wrong offset!");
static_assert(offsetof(UKantanTimeSeriesPlotBase, LowerValueBound) == 0x000438, "Member 'UKantanTimeSeriesPlotBase::LowerValueBound' has a wrong offset!");
static_assert(offsetof(UKantanTimeSeriesPlotBase, UpperValueBound) == 0x000440, "Member 'UKantanTimeSeriesPlotBase::UpperValueBound' has a wrong offset!");
static_assert(offsetof(UKantanTimeSeriesPlotBase, bExtendValueRangeToZero) == 0x000448, "Member 'UKantanTimeSeriesPlotBase::bExtendValueRangeToZero' has a wrong offset!");

// Class KantanChartsUMG.SimpleBarChart
// 0x0020 (0x03C0 - 0x03A0)
class USimpleBarChart final : public UKantanBarChartBase
{
public:
	uint8                                         Pad_3A0[0x20];                                     // 0x03A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_AddCategory(const class FText& Param_Name, class FName* CatId);
	void BP_AddCategoryWithId(class FName ID, const class FText& Param_Name, bool* bSuccess);
	void BP_RemoveAllCategories();
	void BP_RemoveCategory(class FName ID, bool* bSuccess);
	void BP_UpdateCategoryValue(class FName ID, float Value, bool* bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleBarChart">();
	}
	static class USimpleBarChart* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleBarChart>();
	}
};
static_assert(alignof(USimpleBarChart) == 0x000010, "Wrong alignment on USimpleBarChart");
static_assert(sizeof(USimpleBarChart) == 0x0003C0, "Wrong size on USimpleBarChart");

// Class KantanChartsUMG.SimpleCartesianPlot
// 0x0020 (0x0440 - 0x0420)
class USimpleCartesianPlot final : public UKantanCartesianPlotBase
{
public:
	uint8                                         Pad_420[0x20];                                     // 0x0420(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_AddDatapoint(class FName SeriesId, const struct FVector2D& Point, bool* bSuccess);
	void BP_AddSeries(class FName* SeriesId, const class FText& Param_Name, bool bEnabled, bool bShowPoints, bool bShowLines);
	void BP_AddSeriesWithId(bool* bSuccess, class FName ID, const class FText& Param_Name, bool bEnabled, bool bShowPoints, bool bShowLines);
	void BP_RemoveAllSeries();
	void BP_RemoveSeries(class FName ID, bool* bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleCartesianPlot">();
	}
	static class USimpleCartesianPlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleCartesianPlot>();
	}
};
static_assert(alignof(USimpleCartesianPlot) == 0x000010, "Wrong alignment on USimpleCartesianPlot");
static_assert(sizeof(USimpleCartesianPlot) == 0x000440, "Wrong size on USimpleCartesianPlot");

// Class KantanChartsUMG.SimpleTimeSeriesPlot
// 0x0020 (0x0470 - 0x0450)
class USimpleTimeSeriesPlot final : public UKantanTimeSeriesPlotBase
{
public:
	uint8                                         Pad_450[0x20];                                     // 0x0450(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_AddDatapoint(class FName SeriesId, const struct FVector2D& Point, bool* bSuccess);
	void BP_AddDatapointNow(class FName SeriesId, float Value, bool* bSuccess);
	void BP_AddSeries(class FName* SeriesId, const class FText& Param_Name, bool bEnabled, bool bShowPoints, bool bShowLines);
	void BP_AddSeriesWithId(bool* bSuccess, class FName ID, const class FText& Param_Name, bool bEnabled, bool bShowPoints, bool bShowLines);
	void BP_RemoveAllSeries();
	void BP_RemoveSeries(class FName ID, bool* bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleTimeSeriesPlot">();
	}
	static class USimpleTimeSeriesPlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleTimeSeriesPlot>();
	}
};
static_assert(alignof(USimpleTimeSeriesPlot) == 0x000010, "Wrong alignment on USimpleTimeSeriesPlot");
static_assert(sizeof(USimpleTimeSeriesPlot) == 0x000470, "Wrong size on USimpleTimeSeriesPlot");

// Class KantanChartsUMG.TimeSeriesPlot
// 0x0010 (0x0460 - 0x0450)
class UTimeSeriesPlot final : public UKantanTimeSeriesPlotBase
{
public:
	class UObject*                                DataSource;                                        // 0x0450(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_458[0x8];                                      // 0x0458(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetDatasource(class UObject* InDatasource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeSeriesPlot">();
	}
	static class UTimeSeriesPlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeSeriesPlot>();
	}
};
static_assert(alignof(UTimeSeriesPlot) == 0x000010, "Wrong alignment on UTimeSeriesPlot");
static_assert(sizeof(UTimeSeriesPlot) == 0x000460, "Wrong size on UTimeSeriesPlot");
static_assert(offsetof(UTimeSeriesPlot, DataSource) == 0x000450, "Member 'UTimeSeriesPlot::DataSource' has a wrong offset!");

}


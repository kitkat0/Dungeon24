#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameSettings

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function GameSettings.GameSetting.GetDisplayNameVisibility
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_GetDisplayNameVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_GetDisplayNameVisibility) == 0x000001, "Wrong alignment on GameSetting_GetDisplayNameVisibility");
static_assert(sizeof(GameSetting_GetDisplayNameVisibility) == 0x000001, "Wrong size on GameSetting_GetDisplayNameVisibility");
static_assert(offsetof(GameSetting_GetDisplayNameVisibility, ReturnValue) == 0x000000, "Member 'GameSetting_GetDisplayNameVisibility::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSetting.SetLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct GameSetting_SetLocalPlayer final
{
public:
	class ULocalPlayer*                           InLocalPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetLocalPlayer) == 0x000008, "Wrong alignment on GameSetting_SetLocalPlayer");
static_assert(sizeof(GameSetting_SetLocalPlayer) == 0x000008, "Wrong size on GameSetting_SetLocalPlayer");
static_assert(offsetof(GameSetting_SetLocalPlayer, InLocalPlayer) == 0x000000, "Member 'GameSetting_SetLocalPlayer::InLocalPlayer' has a wrong offset!");

// Function GameSettings.GameSetting.GetDescriptionRichText
// 0x0018 (0x0018 - 0x0000)
struct GameSetting_GetDescriptionRichText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_GetDescriptionRichText) == 0x000008, "Wrong alignment on GameSetting_GetDescriptionRichText");
static_assert(sizeof(GameSetting_GetDescriptionRichText) == 0x000018, "Wrong size on GameSetting_GetDescriptionRichText");
static_assert(offsetof(GameSetting_GetDescriptionRichText, ReturnValue) == 0x000000, "Member 'GameSetting_GetDescriptionRichText::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSetting.GetDevName
// 0x0008 (0x0008 - 0x0000)
struct GameSetting_GetDevName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_GetDevName) == 0x000004, "Wrong alignment on GameSetting_GetDevName");
static_assert(sizeof(GameSetting_GetDevName) == 0x000008, "Wrong size on GameSetting_GetDevName");
static_assert(offsetof(GameSetting_GetDevName, ReturnValue) == 0x000000, "Member 'GameSetting_GetDevName::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSetting.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct GameSetting_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_GetDisplayName) == 0x000008, "Wrong alignment on GameSetting_GetDisplayName");
static_assert(sizeof(GameSetting_GetDisplayName) == 0x000018, "Wrong size on GameSetting_GetDisplayName");
static_assert(offsetof(GameSetting_GetDisplayName, ReturnValue) == 0x000000, "Member 'GameSetting_GetDisplayName::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSetting.GetDynamicDetails
// 0x0018 (0x0018 - 0x0000)
struct GameSetting_GetDynamicDetails final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_GetDynamicDetails) == 0x000008, "Wrong alignment on GameSetting_GetDynamicDetails");
static_assert(sizeof(GameSetting_GetDynamicDetails) == 0x000018, "Wrong size on GameSetting_GetDynamicDetails");
static_assert(offsetof(GameSetting_GetDynamicDetails, ReturnValue) == 0x000000, "Member 'GameSetting_GetDynamicDetails::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSetting.GetTags
// 0x0020 (0x0020 - 0x0000)
struct GameSetting_GetTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_GetTags) == 0x000008, "Wrong alignment on GameSetting_GetTags");
static_assert(sizeof(GameSetting_GetTags) == 0x000020, "Wrong size on GameSetting_GetTags");
static_assert(offsetof(GameSetting_GetTags, ReturnValue) == 0x000000, "Member 'GameSetting_GetTags::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSetting.GetWarningRichText
// 0x0018 (0x0018 - 0x0000)
struct GameSetting_GetWarningRichText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_GetWarningRichText) == 0x000008, "Wrong alignment on GameSetting_GetWarningRichText");
static_assert(sizeof(GameSetting_GetWarningRichText) == 0x000018, "Wrong size on GameSetting_GetWarningRichText");
static_assert(offsetof(GameSetting_GetWarningRichText, ReturnValue) == 0x000000, "Member 'GameSetting_GetWarningRichText::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSettingValueDiscrete.GetDiscreteOptionDefaultIndex
// 0x0004 (0x0004 - 0x0000)
struct GameSettingValueDiscrete_GetDiscreteOptionDefaultIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingValueDiscrete_GetDiscreteOptionDefaultIndex) == 0x000004, "Wrong alignment on GameSettingValueDiscrete_GetDiscreteOptionDefaultIndex");
static_assert(sizeof(GameSettingValueDiscrete_GetDiscreteOptionDefaultIndex) == 0x000004, "Wrong size on GameSettingValueDiscrete_GetDiscreteOptionDefaultIndex");
static_assert(offsetof(GameSettingValueDiscrete_GetDiscreteOptionDefaultIndex, ReturnValue) == 0x000000, "Member 'GameSettingValueDiscrete_GetDiscreteOptionDefaultIndex::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSettingValueDiscrete.GetDiscreteOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct GameSettingValueDiscrete_GetDiscreteOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingValueDiscrete_GetDiscreteOptionIndex) == 0x000004, "Wrong alignment on GameSettingValueDiscrete_GetDiscreteOptionIndex");
static_assert(sizeof(GameSettingValueDiscrete_GetDiscreteOptionIndex) == 0x000004, "Wrong size on GameSettingValueDiscrete_GetDiscreteOptionIndex");
static_assert(offsetof(GameSettingValueDiscrete_GetDiscreteOptionIndex, ReturnValue) == 0x000000, "Member 'GameSettingValueDiscrete_GetDiscreteOptionIndex::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSettingValueDiscrete.GetDiscreteOptions
// 0x0010 (0x0010 - 0x0000)
struct GameSettingValueDiscrete_GetDiscreteOptions final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingValueDiscrete_GetDiscreteOptions) == 0x000008, "Wrong alignment on GameSettingValueDiscrete_GetDiscreteOptions");
static_assert(sizeof(GameSettingValueDiscrete_GetDiscreteOptions) == 0x000010, "Wrong size on GameSettingValueDiscrete_GetDiscreteOptions");
static_assert(offsetof(GameSettingValueDiscrete_GetDiscreteOptions, ReturnValue) == 0x000000, "Member 'GameSettingValueDiscrete_GetDiscreteOptions::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSettingDetailExtension.OnSettingAssigned
// 0x0008 (0x0008 - 0x0000)
struct GameSettingDetailExtension_OnSettingAssigned final
{
public:
	class UGameSetting*                           InSetting;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingDetailExtension_OnSettingAssigned) == 0x000008, "Wrong alignment on GameSettingDetailExtension_OnSettingAssigned");
static_assert(sizeof(GameSettingDetailExtension_OnSettingAssigned) == 0x000008, "Wrong size on GameSettingDetailExtension_OnSettingAssigned");
static_assert(offsetof(GameSettingDetailExtension_OnSettingAssigned, InSetting) == 0x000000, "Member 'GameSettingDetailExtension_OnSettingAssigned::InSetting' has a wrong offset!");

// Function GameSettings.GameSettingDetailExtension.OnSettingValueChanged
// 0x0008 (0x0008 - 0x0000)
struct GameSettingDetailExtension_OnSettingValueChanged final
{
public:
	class UGameSetting*                           InSetting;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingDetailExtension_OnSettingValueChanged) == 0x000008, "Wrong alignment on GameSettingDetailExtension_OnSettingValueChanged");
static_assert(sizeof(GameSettingDetailExtension_OnSettingValueChanged) == 0x000008, "Wrong size on GameSettingDetailExtension_OnSettingValueChanged");
static_assert(offsetof(GameSettingDetailExtension_OnSettingValueChanged, InSetting) == 0x000000, "Member 'GameSettingDetailExtension_OnSettingValueChanged::InSetting' has a wrong offset!");

// Function GameSettings.GameSettingListEntryBase.GetPrimaryGamepadFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct GameSettingListEntryBase_GetPrimaryGamepadFocusWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingListEntryBase_GetPrimaryGamepadFocusWidget) == 0x000008, "Wrong alignment on GameSettingListEntryBase_GetPrimaryGamepadFocusWidget");
static_assert(sizeof(GameSettingListEntryBase_GetPrimaryGamepadFocusWidget) == 0x000008, "Wrong size on GameSettingListEntryBase_GetPrimaryGamepadFocusWidget");
static_assert(offsetof(GameSettingListEntryBase_GetPrimaryGamepadFocusWidget, ReturnValue) == 0x000000, "Member 'GameSettingListEntryBase_GetPrimaryGamepadFocusWidget::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSettingListEntrySetting_Scalar.HandleSliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct GameSettingListEntrySetting_Scalar_HandleSliderValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingListEntrySetting_Scalar_HandleSliderValueChanged) == 0x000004, "Wrong alignment on GameSettingListEntrySetting_Scalar_HandleSliderValueChanged");
static_assert(sizeof(GameSettingListEntrySetting_Scalar_HandleSliderValueChanged) == 0x000004, "Wrong size on GameSettingListEntrySetting_Scalar_HandleSliderValueChanged");
static_assert(offsetof(GameSettingListEntrySetting_Scalar_HandleSliderValueChanged, Value) == 0x000000, "Member 'GameSettingListEntrySetting_Scalar_HandleSliderValueChanged::Value' has a wrong offset!");

// Function GameSettings.GameSettingListEntrySetting_Scalar.OnDefaultValueChanged
// 0x0004 (0x0004 - 0x0000)
struct GameSettingListEntrySetting_Scalar_OnDefaultValueChanged final
{
public:
	float                                         DefaultValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingListEntrySetting_Scalar_OnDefaultValueChanged) == 0x000004, "Wrong alignment on GameSettingListEntrySetting_Scalar_OnDefaultValueChanged");
static_assert(sizeof(GameSettingListEntrySetting_Scalar_OnDefaultValueChanged) == 0x000004, "Wrong size on GameSettingListEntrySetting_Scalar_OnDefaultValueChanged");
static_assert(offsetof(GameSettingListEntrySetting_Scalar_OnDefaultValueChanged, DefaultValue) == 0x000000, "Member 'GameSettingListEntrySetting_Scalar_OnDefaultValueChanged::DefaultValue' has a wrong offset!");

// Function GameSettings.GameSettingListEntrySetting_Scalar.OnValueChanged
// 0x0004 (0x0004 - 0x0000)
struct GameSettingListEntrySetting_Scalar_OnValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingListEntrySetting_Scalar_OnValueChanged) == 0x000004, "Wrong alignment on GameSettingListEntrySetting_Scalar_OnValueChanged");
static_assert(sizeof(GameSettingListEntrySetting_Scalar_OnValueChanged) == 0x000004, "Wrong size on GameSettingListEntrySetting_Scalar_OnValueChanged");
static_assert(offsetof(GameSettingListEntrySetting_Scalar_OnValueChanged, Value) == 0x000000, "Member 'GameSettingListEntrySetting_Scalar_OnValueChanged::Value' has a wrong offset!");

// Function GameSettings.GameSettingListEntrySetting_Action.OnSettingAssigned
// 0x0018 (0x0018 - 0x0000)
struct GameSettingListEntrySetting_Action_OnSettingAssigned final
{
public:
	class FText                                   ActionText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingListEntrySetting_Action_OnSettingAssigned) == 0x000008, "Wrong alignment on GameSettingListEntrySetting_Action_OnSettingAssigned");
static_assert(sizeof(GameSettingListEntrySetting_Action_OnSettingAssigned) == 0x000018, "Wrong size on GameSettingListEntrySetting_Action_OnSettingAssigned");
static_assert(offsetof(GameSettingListEntrySetting_Action_OnSettingAssigned, ActionText) == 0x000000, "Member 'GameSettingListEntrySetting_Action_OnSettingAssigned::ActionText' has a wrong offset!");

// Function GameSettings.GameSettingListEntrySetting_Navigation.OnSettingAssigned
// 0x0018 (0x0018 - 0x0000)
struct GameSettingListEntrySetting_Navigation_OnSettingAssigned final
{
public:
	class FText                                   ActionText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingListEntrySetting_Navigation_OnSettingAssigned) == 0x000008, "Wrong alignment on GameSettingListEntrySetting_Navigation_OnSettingAssigned");
static_assert(sizeof(GameSettingListEntrySetting_Navigation_OnSettingAssigned) == 0x000018, "Wrong size on GameSettingListEntrySetting_Navigation_OnSettingAssigned");
static_assert(offsetof(GameSettingListEntrySetting_Navigation_OnSettingAssigned, ActionText) == 0x000000, "Member 'GameSettingListEntrySetting_Navigation_OnSettingAssigned::ActionText' has a wrong offset!");

// Function GameSettings.GameSettingScreen.AttemptToPopNavigation
// 0x0001 (0x0001 - 0x0000)
struct GameSettingScreen_AttemptToPopNavigation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingScreen_AttemptToPopNavigation) == 0x000001, "Wrong alignment on GameSettingScreen_AttemptToPopNavigation");
static_assert(sizeof(GameSettingScreen_AttemptToPopNavigation) == 0x000001, "Wrong size on GameSettingScreen_AttemptToPopNavigation");
static_assert(offsetof(GameSettingScreen_AttemptToPopNavigation, ReturnValue) == 0x000000, "Member 'GameSettingScreen_AttemptToPopNavigation::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSettingScreen.GetSettingCollection
// 0x0018 (0x0018 - 0x0000)
struct GameSettingScreen_GetSettingCollection final
{
public:
	class FName                                   SettingDevName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasAnySettings;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameSettingCollection*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingScreen_GetSettingCollection) == 0x000008, "Wrong alignment on GameSettingScreen_GetSettingCollection");
static_assert(sizeof(GameSettingScreen_GetSettingCollection) == 0x000018, "Wrong size on GameSettingScreen_GetSettingCollection");
static_assert(offsetof(GameSettingScreen_GetSettingCollection, SettingDevName) == 0x000000, "Member 'GameSettingScreen_GetSettingCollection::SettingDevName' has a wrong offset!");
static_assert(offsetof(GameSettingScreen_GetSettingCollection, HasAnySettings) == 0x000008, "Member 'GameSettingScreen_GetSettingCollection::HasAnySettings' has a wrong offset!");
static_assert(offsetof(GameSettingScreen_GetSettingCollection, ReturnValue) == 0x000010, "Member 'GameSettingScreen_GetSettingCollection::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSettingScreen.NavigateToSetting
// 0x0008 (0x0008 - 0x0000)
struct GameSettingScreen_NavigateToSetting final
{
public:
	class FName                                   SettingDevName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingScreen_NavigateToSetting) == 0x000004, "Wrong alignment on GameSettingScreen_NavigateToSetting");
static_assert(sizeof(GameSettingScreen_NavigateToSetting) == 0x000008, "Wrong size on GameSettingScreen_NavigateToSetting");
static_assert(offsetof(GameSettingScreen_NavigateToSetting, SettingDevName) == 0x000000, "Member 'GameSettingScreen_NavigateToSetting::SettingDevName' has a wrong offset!");

// Function GameSettings.GameSettingScreen.NavigateToSettings
// 0x0010 (0x0010 - 0x0000)
struct GameSettingScreen_NavigateToSettings final
{
public:
	TArray<class FName>                           SettingDevNames;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingScreen_NavigateToSettings) == 0x000008, "Wrong alignment on GameSettingScreen_NavigateToSettings");
static_assert(sizeof(GameSettingScreen_NavigateToSettings) == 0x000010, "Wrong size on GameSettingScreen_NavigateToSettings");
static_assert(offsetof(GameSettingScreen_NavigateToSettings, SettingDevNames) == 0x000000, "Member 'GameSettingScreen_NavigateToSettings::SettingDevNames' has a wrong offset!");

// Function GameSettings.GameSettingScreen.OnSettingsDirtyStateChanged
// 0x0001 (0x0001 - 0x0000)
struct GameSettingScreen_OnSettingsDirtyStateChanged final
{
public:
	bool                                          bSettingsDirty;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingScreen_OnSettingsDirtyStateChanged) == 0x000001, "Wrong alignment on GameSettingScreen_OnSettingsDirtyStateChanged");
static_assert(sizeof(GameSettingScreen_OnSettingsDirtyStateChanged) == 0x000001, "Wrong size on GameSettingScreen_OnSettingsDirtyStateChanged");
static_assert(offsetof(GameSettingScreen_OnSettingsDirtyStateChanged, bSettingsDirty) == 0x000000, "Member 'GameSettingScreen_OnSettingsDirtyStateChanged::bSettingsDirty' has a wrong offset!");

// Function GameSettings.GameSettingScreen.HaveSettingsBeenChanged
// 0x0001 (0x0001 - 0x0000)
struct GameSettingScreen_HaveSettingsBeenChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingScreen_HaveSettingsBeenChanged) == 0x000001, "Wrong alignment on GameSettingScreen_HaveSettingsBeenChanged");
static_assert(sizeof(GameSettingScreen_HaveSettingsBeenChanged) == 0x000001, "Wrong size on GameSettingScreen_HaveSettingsBeenChanged");
static_assert(offsetof(GameSettingScreen_HaveSettingsBeenChanged, ReturnValue) == 0x000000, "Member 'GameSettingScreen_HaveSettingsBeenChanged::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSettingActionInterface.ExecuteActionForSetting
// 0x0018 (0x0018 - 0x0000)
struct GameSettingActionInterface_ExecuteActionForSetting final
{
public:
	struct FGameplayTag                           ActionTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameSetting*                           InSetting;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameSettingActionInterface_ExecuteActionForSetting) == 0x000008, "Wrong alignment on GameSettingActionInterface_ExecuteActionForSetting");
static_assert(sizeof(GameSettingActionInterface_ExecuteActionForSetting) == 0x000018, "Wrong size on GameSettingActionInterface_ExecuteActionForSetting");
static_assert(offsetof(GameSettingActionInterface_ExecuteActionForSetting, ActionTag) == 0x000000, "Member 'GameSettingActionInterface_ExecuteActionForSetting::ActionTag' has a wrong offset!");
static_assert(offsetof(GameSettingActionInterface_ExecuteActionForSetting, InSetting) == 0x000008, "Member 'GameSettingActionInterface_ExecuteActionForSetting::InSetting' has a wrong offset!");
static_assert(offsetof(GameSettingActionInterface_ExecuteActionForSetting, ReturnValue) == 0x000010, "Member 'GameSettingActionInterface_ExecuteActionForSetting::ReturnValue' has a wrong offset!");

// Function GameSettings.GameSettingRotator.BP_OnDefaultOptionSpecified
// 0x0004 (0x0004 - 0x0000)
struct GameSettingRotator_BP_OnDefaultOptionSpecified final
{
public:
	int32                                         DefaultOptionIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSettingRotator_BP_OnDefaultOptionSpecified) == 0x000004, "Wrong alignment on GameSettingRotator_BP_OnDefaultOptionSpecified");
static_assert(sizeof(GameSettingRotator_BP_OnDefaultOptionSpecified) == 0x000004, "Wrong size on GameSettingRotator_BP_OnDefaultOptionSpecified");
static_assert(offsetof(GameSettingRotator_BP_OnDefaultOptionSpecified, DefaultOptionIndex) == 0x000000, "Member 'GameSettingRotator_BP_OnDefaultOptionSpecified::DefaultOptionIndex' has a wrong offset!");

// Function GameSettings.GameResponsivePanel.AddChildToGameResponsivePanel
// 0x0010 (0x0010 - 0x0000)
struct GameResponsivePanel_AddChildToGameResponsivePanel final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameResponsivePanelSlot*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameResponsivePanel_AddChildToGameResponsivePanel) == 0x000008, "Wrong alignment on GameResponsivePanel_AddChildToGameResponsivePanel");
static_assert(sizeof(GameResponsivePanel_AddChildToGameResponsivePanel) == 0x000010, "Wrong size on GameResponsivePanel_AddChildToGameResponsivePanel");
static_assert(offsetof(GameResponsivePanel_AddChildToGameResponsivePanel, Content) == 0x000000, "Member 'GameResponsivePanel_AddChildToGameResponsivePanel::Content' has a wrong offset!");
static_assert(offsetof(GameResponsivePanel_AddChildToGameResponsivePanel, ReturnValue) == 0x000008, "Member 'GameResponsivePanel_AddChildToGameResponsivePanel::ReturnValue' has a wrong offset!");

}


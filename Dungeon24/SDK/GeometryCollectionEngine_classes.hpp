#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryCollectionEngine

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "GeometryCollectionEngine_structs.hpp"
#include "Chaos_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "ChaosSolverEngine_structs.hpp"


namespace SDK
{

// Class GeometryCollectionEngine.GeometryCollectionISMPoolActor
// 0x0008 (0x02A0 - 0x0298)
class AGeometryCollectionISMPoolActor final : public AActor
{
public:
	class UGeometryCollectionISMPoolComponent*    ISMPoolComp;                                       // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionISMPoolActor">();
	}
	static class AGeometryCollectionISMPoolActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometryCollectionISMPoolActor>();
	}
};
static_assert(alignof(AGeometryCollectionISMPoolActor) == 0x000008, "Wrong alignment on AGeometryCollectionISMPoolActor");
static_assert(sizeof(AGeometryCollectionISMPoolActor) == 0x0002A0, "Wrong size on AGeometryCollectionISMPoolActor");
static_assert(offsetof(AGeometryCollectionISMPoolActor, ISMPoolComp) == 0x000298, "Member 'AGeometryCollectionISMPoolActor::ISMPoolComp' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionISMPoolComponent
// 0x00C0 (0x0360 - 0x02A0)
class UGeometryCollectionISMPoolComponent final : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0xC0];                                     // 0x02A0(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionISMPoolComponent">();
	}
	static class UGeometryCollectionISMPoolComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionISMPoolComponent>();
	}
};
static_assert(alignof(UGeometryCollectionISMPoolComponent) == 0x000010, "Wrong alignment on UGeometryCollectionISMPoolComponent");
static_assert(sizeof(UGeometryCollectionISMPoolComponent) == 0x000360, "Wrong size on UGeometryCollectionISMPoolComponent");

// Class GeometryCollectionEngine.ChaosDestructionListener
// 0x02B0 (0x0550 - 0x02A0)
class UChaosDestructionListener final : public USceneComponent
{
public:
	uint8                                         bIsCollisionEventListeningEnabled : 1;             // 0x02A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBreakingEventListeningEnabled : 1;              // 0x02A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsTrailingEventListeningEnabled : 1;              // 0x02A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsRemovalEventListeningEnabled : 1;               // 0x02A0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChaosCollisionEventRequestSettings    CollisionEventRequestSettings;                     // 0x02A4(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FChaosBreakingEventRequestSettings     BreakingEventRequestSettings;                      // 0x02BC(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FChaosTrailingEventRequestSettings     TrailingEventRequestSettings;                      // 0x02D4(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FChaosRemovalEventRequestSettings      RemovalEventRequestSettings;                       // 0x02EC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AChaosSolverActor*>                ChaosSolverActors;                                 // 0x0300(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<class AGeometryCollectionActor*>         GeometryCollectionActors;                          // 0x0350(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCollisionEvents;                                 // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBreakingEvents;                                  // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTrailingEvents;                                  // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRemovalEvents;                                   // 0x03D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E0[0x170];                                    // 0x03E0(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddChaosSolverActor(class AChaosSolverActor* ChaosSolverActor);
	void AddGeometryCollectionActor(class AGeometryCollectionActor* GeometryCollectionActor);
	void RemoveChaosSolverActor(class AChaosSolverActor* ChaosSolverActor);
	void RemoveGeometryCollectionActor(class AGeometryCollectionActor* GeometryCollectionActor);
	void SetBreakingEventEnabled(bool bIsEnabled);
	void SetBreakingEventRequestSettings(const struct FChaosBreakingEventRequestSettings& InSettings);
	void SetCollisionEventEnabled(bool bIsEnabled);
	void SetCollisionEventRequestSettings(const struct FChaosCollisionEventRequestSettings& InSettings);
	void SetRemovalEventEnabled(bool bIsEnabled);
	void SetRemovalEventRequestSettings(const struct FChaosRemovalEventRequestSettings& InSettings);
	void SetTrailingEventEnabled(bool bIsEnabled);
	void SetTrailingEventRequestSettings(const struct FChaosTrailingEventRequestSettings& InSettings);
	void SortBreakingEvents(TArray<struct FChaosBreakingEventData>& BreakingEvents, EChaosBreakingSortMethod SortMethod);
	void SortCollisionEvents(TArray<struct FChaosCollisionEventData>& CollisionEvents, EChaosCollisionSortMethod SortMethod);
	void SortRemovalEvents(TArray<struct FChaosRemovalEventData>& RemovalEvents, EChaosRemovalSortMethod SortMethod);
	void SortTrailingEvents(TArray<struct FChaosTrailingEventData>& TrailingEvents, EChaosTrailingSortMethod SortMethod);

	bool IsEventListening() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosDestructionListener">();
	}
	static class UChaosDestructionListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosDestructionListener>();
	}
};
static_assert(alignof(UChaosDestructionListener) == 0x000010, "Wrong alignment on UChaosDestructionListener");
static_assert(sizeof(UChaosDestructionListener) == 0x000550, "Wrong size on UChaosDestructionListener");
static_assert(offsetof(UChaosDestructionListener, CollisionEventRequestSettings) == 0x0002A4, "Member 'UChaosDestructionListener::CollisionEventRequestSettings' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, BreakingEventRequestSettings) == 0x0002BC, "Member 'UChaosDestructionListener::BreakingEventRequestSettings' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, TrailingEventRequestSettings) == 0x0002D4, "Member 'UChaosDestructionListener::TrailingEventRequestSettings' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, RemovalEventRequestSettings) == 0x0002EC, "Member 'UChaosDestructionListener::RemovalEventRequestSettings' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, ChaosSolverActors) == 0x000300, "Member 'UChaosDestructionListener::ChaosSolverActors' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, GeometryCollectionActors) == 0x000350, "Member 'UChaosDestructionListener::GeometryCollectionActors' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, OnCollisionEvents) == 0x0003A0, "Member 'UChaosDestructionListener::OnCollisionEvents' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, OnBreakingEvents) == 0x0003B0, "Member 'UChaosDestructionListener::OnBreakingEvents' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, OnTrailingEvents) == 0x0003C0, "Member 'UChaosDestructionListener::OnTrailingEvents' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, OnRemovalEvents) == 0x0003D0, "Member 'UChaosDestructionListener::OnRemovalEvents' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionActor
// 0x0010 (0x02A8 - 0x0298)
class AGeometryCollectionActor final : public AActor
{
public:
	class UGeometryCollectionComponent*           GeometryCollectionComponent;                       // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryCollectionDebugDrawComponent*  GeometryCollectionDebugDrawComponent;              // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool RaycastSingle(const struct FVector& Start, const struct FVector& End, struct FHitResult* OutHit) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionActor">();
	}
	static class AGeometryCollectionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometryCollectionActor>();
	}
};
static_assert(alignof(AGeometryCollectionActor) == 0x000008, "Wrong alignment on AGeometryCollectionActor");
static_assert(sizeof(AGeometryCollectionActor) == 0x0002A8, "Wrong size on AGeometryCollectionActor");
static_assert(offsetof(AGeometryCollectionActor, GeometryCollectionComponent) == 0x000298, "Member 'AGeometryCollectionActor::GeometryCollectionComponent' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionActor, GeometryCollectionDebugDrawComponent) == 0x0002A0, "Member 'AGeometryCollectionActor::GeometryCollectionDebugDrawComponent' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionCache
// 0x0028 (0x0050 - 0x0028)
class UGeometryCollectionCache final : public UObject
{
public:
	struct FRecordedTransformTrack                RecordedData;                                      // 0x0028(0x0010)(NativeAccessSpecifierPrivate)
	class UGeometryCollection*                    SupportedCollection;                               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  CompatibleCollectionState;                         // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionCache">();
	}
	static class UGeometryCollectionCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionCache>();
	}
};
static_assert(alignof(UGeometryCollectionCache) == 0x000008, "Wrong alignment on UGeometryCollectionCache");
static_assert(sizeof(UGeometryCollectionCache) == 0x000050, "Wrong size on UGeometryCollectionCache");
static_assert(offsetof(UGeometryCollectionCache, RecordedData) == 0x000028, "Member 'UGeometryCollectionCache::RecordedData' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionCache, SupportedCollection) == 0x000038, "Member 'UGeometryCollectionCache::SupportedCollection' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionCache, CompatibleCollectionState) == 0x000040, "Member 'UGeometryCollectionCache::CompatibleCollectionState' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionComponent
// 0x0590 (0x0B10 - 0x0580)
class UGeometryCollectionComponent final : public UMeshComponent
{
public:
	uint8                                         Pad_578[0x8];                                      // 0x0578(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AChaosSolverActor*                      ChaosSolverActor;                                  // 0x0580(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_588[0xE8];                                     // 0x0588(0x00E8)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryCollection*                    RestCollection;                                    // 0x0670(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFieldSystemActor*>              InitializationFields;                              // 0x0678(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          Simulating;                                        // 0x0688(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	EObjectStateTypeEnum                          ObjectType;                                        // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceMotionBlur;                                  // 0x0691(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableClustering;                                  // 0x0692(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_693[0x1];                                      // 0x0693(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClusterGroupIndex;                                 // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxClusterLevel;                                   // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 DamageThreshold;                                   // 0x06A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseSizeSpecificDamageThreshold;                   // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B1[0x3];                                      // 0x06B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryCollectionDamagePropagationData DamagePropagationData;                             // 0x06B4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowRemovalOnSleep;                              // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRemovalOnBreak;                              // 0x06C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClusterConnectionTypeEnum                    ClusterConnectionType;                             // 0x06C2(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C3[0x1];                                      // 0x06C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CollisionGroup;                                    // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionSampleFraction;                           // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearEtherDrag;                                   // 0x06CC(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularEtherDrag;                                  // 0x06D0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UChaosPhysicalMaterial*                 PhysicalMaterial;                                  // 0x06D8(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInitialVelocityTypeEnum                      InitialVelocityType;                               // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E1[0x7];                                      // 0x06E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialLinearVelocity;                             // 0x06E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialAngularVelocity;                            // 0x0700(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysicalMaterialOverride;                          // 0x0718(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeomComponentCacheParameters          CacheParameters;                                   // 0x0720(0x0050)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     RestTransforms;                                    // 0x0770(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             NotifyGeometryCollectionPhysicsStateChange;        // 0x0780(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             NotifyGeometryCollectionPhysicsLoadingStateChange; // 0x0790(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A0[0x18];                                     // 0x07A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChaosBreakEvent;                                 // 0x07B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChaosRemovalEvent;                               // 0x07C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChaosCrumblingEvent;                             // 0x07D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         DesiredCacheTime;                                  // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CachePlayback;                                     // 0x07EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7ED[0x3];                                      // 0x07ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChaosPhysicsCollision;                           // 0x07F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bNotifyBreaks;                                     // 0x0800(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyCollisions;                                 // 0x0801(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyTrailing;                                   // 0x0802(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyRemovals;                                   // 0x0803(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyCrumblings;                                 // 0x0804(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrumblingEventIncludesChildren;                   // 0x0805(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoreVelocities;                                  // 0x0806(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBoneColors;                                   // 0x0807(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AGeometryCollectionISMPoolActor*        ISMPool;                                           // 0x0808(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_810[0x4];                                      // 0x0810(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableReplication;                                // 0x0814(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableAbandonAfterLevel;                          // 0x0815(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_816[0x2];                                      // 0x0816(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReplicationAbandonClusterLevel;                    // 0x0818(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReplicationAbandonAfterLevel;                      // 0x081C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGeometryCollectionRepData             RepData;                                           // 0x0820(0x0028)(Net, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_848[0x288];                                    // 0x0848(0x0288)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodySetup*                             DummyBodySetup;                                    // 0x0AD0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AD8[0x8];                                      // 0x0AD8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UInstancedStaticMeshComponent*>  EmbeddedGeometryComponents;                        // 0x0AE0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AF0[0x20];                                     // 0x0AF0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyAngularVelocity(int32 ItemIndex, const struct FVector& AngularVelocity);
	void ApplyBreakingAngularVelocity(int32 ItemIndex, const struct FVector& AngularVelocity);
	void ApplyBreakingLinearVelocity(int32 ItemIndex, const struct FVector& LinearVelocity);
	void ApplyExternalStrain(int32 ItemIndex, const struct FVector& Location, float Radius, int32 PropagationDepth, float PropagationFactor, float Strain);
	void ApplyInternalStrain(int32 ItemIndex, const struct FVector& Location, float Radius, int32 PropagationDepth, float PropagationFactor, float Strain);
	void ApplyKinematicField(float Radius, const struct FVector& Position);
	void ApplyLinearVelocity(int32 ItemIndex, const struct FVector& LinearVelocity);
	void ApplyPhysicsField(bool Enabled, EGeometryCollectionPhysicsTypeEnum Target, class UFieldSystemMetaData* MetaData, class UFieldNodeBase* Field);
	void CrumbleActiveClusters();
	void CrumbleCluster(int32 ItemIndex);
	int32 GetInitialLevel(int32 ItemIndex);
	void GetMassAndExtents(int32 ItemIndex, float* OutMass, struct FBox* OutExtents);
	void NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature(class UGeometryCollectionComponent* FracturedComponent);
	void NotifyGeometryCollectionPhysicsStateChange__DelegateSignature(class UGeometryCollectionComponent* FracturedComponent);
	void ReceivePhysicsCollision(const struct FChaosPhysicsCollisionInfo& CollisionInfo);
	void RemoveAllAnchors();
	void SetNotifyBreaks(bool bNewNotifyBreaks);
	void SetNotifyCrumblings(bool bNewNotifyCrumblings);
	void SetNotifyRemovals(bool bNewNotifyRemovals);
	void SetRestCollection(const class UGeometryCollection* RestCollectionIn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionComponent">();
	}
	static class UGeometryCollectionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionComponent>();
	}
};
static_assert(alignof(UGeometryCollectionComponent) == 0x000010, "Wrong alignment on UGeometryCollectionComponent");
static_assert(sizeof(UGeometryCollectionComponent) == 0x000B10, "Wrong size on UGeometryCollectionComponent");
static_assert(offsetof(UGeometryCollectionComponent, ChaosSolverActor) == 0x000580, "Member 'UGeometryCollectionComponent::ChaosSolverActor' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, RestCollection) == 0x000670, "Member 'UGeometryCollectionComponent::RestCollection' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitializationFields) == 0x000678, "Member 'UGeometryCollectionComponent::InitializationFields' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, Simulating) == 0x000688, "Member 'UGeometryCollectionComponent::Simulating' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ObjectType) == 0x000690, "Member 'UGeometryCollectionComponent::ObjectType' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bForceMotionBlur) == 0x000691, "Member 'UGeometryCollectionComponent::bForceMotionBlur' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, EnableClustering) == 0x000692, "Member 'UGeometryCollectionComponent::EnableClustering' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ClusterGroupIndex) == 0x000694, "Member 'UGeometryCollectionComponent::ClusterGroupIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, MaxClusterLevel) == 0x000698, "Member 'UGeometryCollectionComponent::MaxClusterLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DamageThreshold) == 0x0006A0, "Member 'UGeometryCollectionComponent::DamageThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bUseSizeSpecificDamageThreshold) == 0x0006B0, "Member 'UGeometryCollectionComponent::bUseSizeSpecificDamageThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DamagePropagationData) == 0x0006B4, "Member 'UGeometryCollectionComponent::DamagePropagationData' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bAllowRemovalOnSleep) == 0x0006C0, "Member 'UGeometryCollectionComponent::bAllowRemovalOnSleep' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bAllowRemovalOnBreak) == 0x0006C1, "Member 'UGeometryCollectionComponent::bAllowRemovalOnBreak' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ClusterConnectionType) == 0x0006C2, "Member 'UGeometryCollectionComponent::ClusterConnectionType' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CollisionGroup) == 0x0006C4, "Member 'UGeometryCollectionComponent::CollisionGroup' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CollisionSampleFraction) == 0x0006C8, "Member 'UGeometryCollectionComponent::CollisionSampleFraction' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, LinearEtherDrag) == 0x0006CC, "Member 'UGeometryCollectionComponent::LinearEtherDrag' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, AngularEtherDrag) == 0x0006D0, "Member 'UGeometryCollectionComponent::AngularEtherDrag' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, PhysicalMaterial) == 0x0006D8, "Member 'UGeometryCollectionComponent::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitialVelocityType) == 0x0006E0, "Member 'UGeometryCollectionComponent::InitialVelocityType' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitialLinearVelocity) == 0x0006E8, "Member 'UGeometryCollectionComponent::InitialLinearVelocity' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitialAngularVelocity) == 0x000700, "Member 'UGeometryCollectionComponent::InitialAngularVelocity' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, PhysicalMaterialOverride) == 0x000718, "Member 'UGeometryCollectionComponent::PhysicalMaterialOverride' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CacheParameters) == 0x000720, "Member 'UGeometryCollectionComponent::CacheParameters' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, RestTransforms) == 0x000770, "Member 'UGeometryCollectionComponent::RestTransforms' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange) == 0x000780, "Member 'UGeometryCollectionComponent::NotifyGeometryCollectionPhysicsStateChange' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange) == 0x000790, "Member 'UGeometryCollectionComponent::NotifyGeometryCollectionPhysicsLoadingStateChange' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, OnChaosBreakEvent) == 0x0007B8, "Member 'UGeometryCollectionComponent::OnChaosBreakEvent' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, OnChaosRemovalEvent) == 0x0007C8, "Member 'UGeometryCollectionComponent::OnChaosRemovalEvent' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, OnChaosCrumblingEvent) == 0x0007D8, "Member 'UGeometryCollectionComponent::OnChaosCrumblingEvent' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DesiredCacheTime) == 0x0007E8, "Member 'UGeometryCollectionComponent::DesiredCacheTime' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CachePlayback) == 0x0007EC, "Member 'UGeometryCollectionComponent::CachePlayback' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, OnChaosPhysicsCollision) == 0x0007F0, "Member 'UGeometryCollectionComponent::OnChaosPhysicsCollision' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyBreaks) == 0x000800, "Member 'UGeometryCollectionComponent::bNotifyBreaks' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyCollisions) == 0x000801, "Member 'UGeometryCollectionComponent::bNotifyCollisions' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyTrailing) == 0x000802, "Member 'UGeometryCollectionComponent::bNotifyTrailing' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyRemovals) == 0x000803, "Member 'UGeometryCollectionComponent::bNotifyRemovals' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyCrumblings) == 0x000804, "Member 'UGeometryCollectionComponent::bNotifyCrumblings' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bCrumblingEventIncludesChildren) == 0x000805, "Member 'UGeometryCollectionComponent::bCrumblingEventIncludesChildren' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bStoreVelocities) == 0x000806, "Member 'UGeometryCollectionComponent::bStoreVelocities' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bShowBoneColors) == 0x000807, "Member 'UGeometryCollectionComponent::bShowBoneColors' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ISMPool) == 0x000808, "Member 'UGeometryCollectionComponent::ISMPool' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bEnableReplication) == 0x000814, "Member 'UGeometryCollectionComponent::bEnableReplication' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bEnableAbandonAfterLevel) == 0x000815, "Member 'UGeometryCollectionComponent::bEnableAbandonAfterLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ReplicationAbandonClusterLevel) == 0x000818, "Member 'UGeometryCollectionComponent::ReplicationAbandonClusterLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ReplicationAbandonAfterLevel) == 0x00081C, "Member 'UGeometryCollectionComponent::ReplicationAbandonAfterLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, RepData) == 0x000820, "Member 'UGeometryCollectionComponent::RepData' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DummyBodySetup) == 0x000AD0, "Member 'UGeometryCollectionComponent::DummyBodySetup' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, EmbeddedGeometryComponents) == 0x000AE0, "Member 'UGeometryCollectionComponent::EmbeddedGeometryComponents' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionDebugDrawActor
// 0x00C0 (0x0358 - 0x0298)
class AGeometryCollectionDebugDrawActor final : public AActor
{
public:
	struct FGeometryCollectionDebugDrawWarningMessage WarningMessage;                                    // 0x0298(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryCollectionDebugDrawActorSelectedRigidBody SelectedRigidBody;                                 // 0x02A0(0x0018)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawWholeCollection;                         // 0x02B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawHierarchy;                               // 0x02B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawClustering;                              // 0x02BA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryCollectionDebugDrawActorHideGeometry HideGeometry;                                      // 0x02BB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyId;                                  // 0x02BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyCollision;                           // 0x02BD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollisionAtOrigin;                                // 0x02BE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyTransform;                           // 0x02BF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyInertia;                             // 0x02C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyVelocity;                            // 0x02C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyForce;                               // 0x02C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyInfos;                               // 0x02C3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTransformIndex;                               // 0x02C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTransform;                                    // 0x02C5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowParent;                                       // 0x02C6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLevel;                                        // 0x02C7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowConnectivityEdges;                            // 0x02C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowGeometryIndex;                                // 0x02C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowGeometryTransform;                            // 0x02CA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBoundingBox;                                  // 0x02CB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFaces;                                        // 0x02CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFaceIndices;                                  // 0x02CD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFaceNormals;                                  // 0x02CE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowSingleFace;                                   // 0x02CF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SingleFaceIndex;                                   // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowVertices;                                     // 0x02D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowVertexIndices;                                // 0x02D5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowVertexNormals;                                // 0x02D6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseActiveVisualization;                           // 0x02D7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointThickness;                                    // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTextShadow;                                       // 0x02E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TextScale;                                         // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalScale;                                       // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisScale;                                         // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowScale;                                        // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyIdColor;                                  // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RigidBodyTransformScale;                           // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyCollisionColor;                           // 0x02FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyInertiaColor;                             // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyVelocityColor;                            // 0x0304(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyForceColor;                               // 0x0308(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyInfoColor;                                // 0x030C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TransformIndexColor;                               // 0x0310(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformScale;                                    // 0x0314(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LevelColor;                                        // 0x0318(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ParentColor;                                       // 0x031C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConnectivityEdgeThickness;                         // 0x0320(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GeometryIndexColor;                                // 0x0324(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeometryTransformScale;                            // 0x0328(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BoundingBoxColor;                                  // 0x032C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FaceColor;                                         // 0x0330(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FaceIndexColor;                                    // 0x0334(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FaceNormalColor;                                   // 0x0338(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 SingleFaceColor;                                   // 0x033C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VertexColor;                                       // 0x0340(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VertexIndexColor;                                  // 0x0344(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VertexNormalColor;                                 // 0x0348(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBillboardComponent*                    SpriteComponent;                                   // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionDebugDrawActor">();
	}
	static class AGeometryCollectionDebugDrawActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometryCollectionDebugDrawActor>();
	}
};
static_assert(alignof(AGeometryCollectionDebugDrawActor) == 0x000008, "Wrong alignment on AGeometryCollectionDebugDrawActor");
static_assert(sizeof(AGeometryCollectionDebugDrawActor) == 0x000358, "Wrong size on AGeometryCollectionDebugDrawActor");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, WarningMessage) == 0x000298, "Member 'AGeometryCollectionDebugDrawActor::WarningMessage' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, SelectedRigidBody) == 0x0002A0, "Member 'AGeometryCollectionDebugDrawActor::SelectedRigidBody' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection) == 0x0002B8, "Member 'AGeometryCollectionDebugDrawActor::bDebugDrawWholeCollection' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bDebugDrawHierarchy) == 0x0002B9, "Member 'AGeometryCollectionDebugDrawActor::bDebugDrawHierarchy' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bDebugDrawClustering) == 0x0002BA, "Member 'AGeometryCollectionDebugDrawActor::bDebugDrawClustering' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, HideGeometry) == 0x0002BB, "Member 'AGeometryCollectionDebugDrawActor::HideGeometry' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyId) == 0x0002BC, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyId' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyCollision) == 0x0002BD, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyCollision' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bCollisionAtOrigin) == 0x0002BE, "Member 'AGeometryCollectionDebugDrawActor::bCollisionAtOrigin' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyTransform) == 0x0002BF, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyTransform' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyInertia) == 0x0002C0, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyInertia' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity) == 0x0002C1, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyVelocity' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyForce) == 0x0002C2, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyForce' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyInfos) == 0x0002C3, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyInfos' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowTransformIndex) == 0x0002C4, "Member 'AGeometryCollectionDebugDrawActor::bShowTransformIndex' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowTransform) == 0x0002C5, "Member 'AGeometryCollectionDebugDrawActor::bShowTransform' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowParent) == 0x0002C6, "Member 'AGeometryCollectionDebugDrawActor::bShowParent' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowLevel) == 0x0002C7, "Member 'AGeometryCollectionDebugDrawActor::bShowLevel' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowConnectivityEdges) == 0x0002C8, "Member 'AGeometryCollectionDebugDrawActor::bShowConnectivityEdges' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowGeometryIndex) == 0x0002C9, "Member 'AGeometryCollectionDebugDrawActor::bShowGeometryIndex' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowGeometryTransform) == 0x0002CA, "Member 'AGeometryCollectionDebugDrawActor::bShowGeometryTransform' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowBoundingBox) == 0x0002CB, "Member 'AGeometryCollectionDebugDrawActor::bShowBoundingBox' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowFaces) == 0x0002CC, "Member 'AGeometryCollectionDebugDrawActor::bShowFaces' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowFaceIndices) == 0x0002CD, "Member 'AGeometryCollectionDebugDrawActor::bShowFaceIndices' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowFaceNormals) == 0x0002CE, "Member 'AGeometryCollectionDebugDrawActor::bShowFaceNormals' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowSingleFace) == 0x0002CF, "Member 'AGeometryCollectionDebugDrawActor::bShowSingleFace' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, SingleFaceIndex) == 0x0002D0, "Member 'AGeometryCollectionDebugDrawActor::SingleFaceIndex' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowVertices) == 0x0002D4, "Member 'AGeometryCollectionDebugDrawActor::bShowVertices' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowVertexIndices) == 0x0002D5, "Member 'AGeometryCollectionDebugDrawActor::bShowVertexIndices' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowVertexNormals) == 0x0002D6, "Member 'AGeometryCollectionDebugDrawActor::bShowVertexNormals' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bUseActiveVisualization) == 0x0002D7, "Member 'AGeometryCollectionDebugDrawActor::bUseActiveVisualization' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, PointThickness) == 0x0002D8, "Member 'AGeometryCollectionDebugDrawActor::PointThickness' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, LineThickness) == 0x0002DC, "Member 'AGeometryCollectionDebugDrawActor::LineThickness' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bTextShadow) == 0x0002E0, "Member 'AGeometryCollectionDebugDrawActor::bTextShadow' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, TextScale) == 0x0002E4, "Member 'AGeometryCollectionDebugDrawActor::TextScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, NormalScale) == 0x0002E8, "Member 'AGeometryCollectionDebugDrawActor::NormalScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, AxisScale) == 0x0002EC, "Member 'AGeometryCollectionDebugDrawActor::AxisScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, ArrowScale) == 0x0002F0, "Member 'AGeometryCollectionDebugDrawActor::ArrowScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyIdColor) == 0x0002F4, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyIdColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyTransformScale) == 0x0002F8, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyTransformScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyCollisionColor) == 0x0002FC, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyCollisionColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyInertiaColor) == 0x000300, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyInertiaColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyVelocityColor) == 0x000304, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyVelocityColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyForceColor) == 0x000308, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyForceColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyInfoColor) == 0x00030C, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyInfoColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, TransformIndexColor) == 0x000310, "Member 'AGeometryCollectionDebugDrawActor::TransformIndexColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, TransformScale) == 0x000314, "Member 'AGeometryCollectionDebugDrawActor::TransformScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, LevelColor) == 0x000318, "Member 'AGeometryCollectionDebugDrawActor::LevelColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, ParentColor) == 0x00031C, "Member 'AGeometryCollectionDebugDrawActor::ParentColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness) == 0x000320, "Member 'AGeometryCollectionDebugDrawActor::ConnectivityEdgeThickness' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, GeometryIndexColor) == 0x000324, "Member 'AGeometryCollectionDebugDrawActor::GeometryIndexColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, GeometryTransformScale) == 0x000328, "Member 'AGeometryCollectionDebugDrawActor::GeometryTransformScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, BoundingBoxColor) == 0x00032C, "Member 'AGeometryCollectionDebugDrawActor::BoundingBoxColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, FaceColor) == 0x000330, "Member 'AGeometryCollectionDebugDrawActor::FaceColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, FaceIndexColor) == 0x000334, "Member 'AGeometryCollectionDebugDrawActor::FaceIndexColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, FaceNormalColor) == 0x000338, "Member 'AGeometryCollectionDebugDrawActor::FaceNormalColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, SingleFaceColor) == 0x00033C, "Member 'AGeometryCollectionDebugDrawActor::SingleFaceColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, VertexColor) == 0x000340, "Member 'AGeometryCollectionDebugDrawActor::VertexColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, VertexIndexColor) == 0x000344, "Member 'AGeometryCollectionDebugDrawActor::VertexIndexColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, VertexNormalColor) == 0x000348, "Member 'AGeometryCollectionDebugDrawActor::VertexNormalColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, SpriteComponent) == 0x000350, "Member 'AGeometryCollectionDebugDrawActor::SpriteComponent' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionDebugDrawComponent
// 0x0018 (0x00C0 - 0x00A8)
class UGeometryCollectionDebugDrawComponent final : public UActorComponent
{
public:
	class AGeometryCollectionDebugDrawActor*      GeometryCollectionDebugDrawActor;                  // 0x00A8(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSetActor;             // 0x00B0(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionDebugDrawComponent">();
	}
	static class UGeometryCollectionDebugDrawComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionDebugDrawComponent>();
	}
};
static_assert(alignof(UGeometryCollectionDebugDrawComponent) == 0x000008, "Wrong alignment on UGeometryCollectionDebugDrawComponent");
static_assert(sizeof(UGeometryCollectionDebugDrawComponent) == 0x0000C0, "Wrong size on UGeometryCollectionDebugDrawComponent");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor) == 0x0000A8, "Member 'UGeometryCollectionDebugDrawComponent::GeometryCollectionDebugDrawActor' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor) == 0x0000B0, "Member 'UGeometryCollectionDebugDrawComponent::GeometryCollectionRenderLevelSetActor' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollection
// 0x0138 (0x0160 - 0x0028)
class UGeometryCollection final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EnableClustering;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClusterGroupIndex;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxClusterLevel;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 DamageThreshold;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseSizeSpecificDamageThreshold;                   // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerClusterOnlyDamageThreshold;                     // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryCollectionDamagePropagationData DamagePropagationData;                             // 0x0054(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EClusterConnectionTypeEnum                    ClusterConnectionType;                             // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConnectionGraphBoundsFilteringMargin;              // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0068(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FGeometryCollectionEmbeddedExemplar> EmbeddedGeometryExemplar;                          // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseFullPrecisionUVs;                              // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGeometryCollectionAutoInstanceMesh> AutoInstanceMeshes;                                // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        RootProxy;                                         // 0x00A0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStripOnCook;                                      // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableNanite;                                      // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMassAsDensity;                                    // 0x00C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mass;                                              // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumMassClamp;                                  // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImportCollisionFromSource;                        // 0x00CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveOnMaxSleep;                                 // 0x00CD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MaximumSleepTime;                                  // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RemovalDuration;                                   // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlowMovingAsSleeping;                             // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlowMovingVelocityThreshold;                       // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGeometryCollectionSizeSpecificData> SizeSpecificData;                                  // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          EnableRemovePiecesOnFracture;                      // 0x0108(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             RemoveOnFractureMaterials;                         // 0x0110(0x0010)(ZeroConstructor, Deprecated, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDataflow*                              Dataflow;                                          // 0x0120(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PersistentGuid;                                    // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  StateGuid;                                         // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BoneSelectedMaterialIndex;                         // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14C[0x14];                                     // 0x014C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollection">();
	}
	static class UGeometryCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollection>();
	}
};
static_assert(alignof(UGeometryCollection) == 0x000008, "Wrong alignment on UGeometryCollection");
static_assert(sizeof(UGeometryCollection) == 0x000160, "Wrong size on UGeometryCollection");
static_assert(offsetof(UGeometryCollection, EnableClustering) == 0x000030, "Member 'UGeometryCollection::EnableClustering' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, ClusterGroupIndex) == 0x000034, "Member 'UGeometryCollection::ClusterGroupIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, MaxClusterLevel) == 0x000038, "Member 'UGeometryCollection::MaxClusterLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, DamageThreshold) == 0x000040, "Member 'UGeometryCollection::DamageThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bUseSizeSpecificDamageThreshold) == 0x000050, "Member 'UGeometryCollection::bUseSizeSpecificDamageThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, PerClusterOnlyDamageThreshold) == 0x000051, "Member 'UGeometryCollection::PerClusterOnlyDamageThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, DamagePropagationData) == 0x000054, "Member 'UGeometryCollection::DamagePropagationData' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, ClusterConnectionType) == 0x000060, "Member 'UGeometryCollection::ClusterConnectionType' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, ConnectionGraphBoundsFilteringMargin) == 0x000064, "Member 'UGeometryCollection::ConnectionGraphBoundsFilteringMargin' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, Materials) == 0x000068, "Member 'UGeometryCollection::Materials' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, EmbeddedGeometryExemplar) == 0x000078, "Member 'UGeometryCollection::EmbeddedGeometryExemplar' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bUseFullPrecisionUVs) == 0x000088, "Member 'UGeometryCollection::bUseFullPrecisionUVs' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, AutoInstanceMeshes) == 0x000090, "Member 'UGeometryCollection::AutoInstanceMeshes' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, RootProxy) == 0x0000A0, "Member 'UGeometryCollection::RootProxy' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bStripOnCook) == 0x0000C0, "Member 'UGeometryCollection::bStripOnCook' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, EnableNanite) == 0x0000C1, "Member 'UGeometryCollection::EnableNanite' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bMassAsDensity) == 0x0000C2, "Member 'UGeometryCollection::bMassAsDensity' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, Mass) == 0x0000C4, "Member 'UGeometryCollection::Mass' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, MinimumMassClamp) == 0x0000C8, "Member 'UGeometryCollection::MinimumMassClamp' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bImportCollisionFromSource) == 0x0000CC, "Member 'UGeometryCollection::bImportCollisionFromSource' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bRemoveOnMaxSleep) == 0x0000CD, "Member 'UGeometryCollection::bRemoveOnMaxSleep' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, MaximumSleepTime) == 0x0000D0, "Member 'UGeometryCollection::MaximumSleepTime' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, RemovalDuration) == 0x0000E0, "Member 'UGeometryCollection::RemovalDuration' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bSlowMovingAsSleeping) == 0x0000F0, "Member 'UGeometryCollection::bSlowMovingAsSleeping' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, SlowMovingVelocityThreshold) == 0x0000F4, "Member 'UGeometryCollection::SlowMovingVelocityThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, SizeSpecificData) == 0x0000F8, "Member 'UGeometryCollection::SizeSpecificData' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, EnableRemovePiecesOnFracture) == 0x000108, "Member 'UGeometryCollection::EnableRemovePiecesOnFracture' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, RemoveOnFractureMaterials) == 0x000110, "Member 'UGeometryCollection::RemoveOnFractureMaterials' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, Dataflow) == 0x000120, "Member 'UGeometryCollection::Dataflow' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, PersistentGuid) == 0x000128, "Member 'UGeometryCollection::PersistentGuid' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, StateGuid) == 0x000138, "Member 'UGeometryCollection::StateGuid' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, BoneSelectedMaterialIndex) == 0x000148, "Member 'UGeometryCollection::BoneSelectedMaterialIndex' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionRenderLevelSetActor
// 0x00F8 (0x0390 - 0x0298)
class alignas(0x10) AGeometryCollectionRenderLevelSetActor final : public AActor
{
public:
	class UVolumeTexture*                         TargetVolumeTexture;                               // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              RayMarchMaterial;                                  // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceTolerance;                                  // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Isovalue;                                          // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RenderVolumeBoundingBox;                           // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2[0xDE];                                     // 0x02B2(0x00DE)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionRenderLevelSetActor">();
	}
	static class AGeometryCollectionRenderLevelSetActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometryCollectionRenderLevelSetActor>();
	}
};
static_assert(alignof(AGeometryCollectionRenderLevelSetActor) == 0x000010, "Wrong alignment on AGeometryCollectionRenderLevelSetActor");
static_assert(sizeof(AGeometryCollectionRenderLevelSetActor) == 0x000390, "Wrong size on AGeometryCollectionRenderLevelSetActor");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture) == 0x000298, "Member 'AGeometryCollectionRenderLevelSetActor::TargetVolumeTexture' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, RayMarchMaterial) == 0x0002A0, "Member 'AGeometryCollectionRenderLevelSetActor::RayMarchMaterial' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, SurfaceTolerance) == 0x0002A8, "Member 'AGeometryCollectionRenderLevelSetActor::SurfaceTolerance' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, Isovalue) == 0x0002AC, "Member 'AGeometryCollectionRenderLevelSetActor::Isovalue' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, Enabled) == 0x0002B0, "Member 'AGeometryCollectionRenderLevelSetActor::Enabled' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox) == 0x0002B1, "Member 'AGeometryCollectionRenderLevelSetActor::RenderVolumeBoundingBox' has a wrong offset!");

}


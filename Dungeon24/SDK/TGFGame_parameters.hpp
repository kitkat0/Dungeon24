#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TGFGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "LyraGame_structs.hpp"
#include "TGFGame_structs.hpp"
#include "InputCore_structs.hpp"
#include "TGFBattleProtocol_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Niagara_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function TGFGame.ACEReportService.Lua_ACEReportPlayerInBattle
// 0x0028 (0x0028 - 0x0000)
struct ACEReportService_Lua_ACEReportPlayerInBattle final
{
public:
	int64                                         TargetOpenId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetZoneId;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetPlayerName;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      SourcePC;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ACEReportService_Lua_ACEReportPlayerInBattle) == 0x000008, "Wrong alignment on ACEReportService_Lua_ACEReportPlayerInBattle");
static_assert(sizeof(ACEReportService_Lua_ACEReportPlayerInBattle) == 0x000028, "Wrong size on ACEReportService_Lua_ACEReportPlayerInBattle");
static_assert(offsetof(ACEReportService_Lua_ACEReportPlayerInBattle, TargetOpenId) == 0x000000, "Member 'ACEReportService_Lua_ACEReportPlayerInBattle::TargetOpenId' has a wrong offset!");
static_assert(offsetof(ACEReportService_Lua_ACEReportPlayerInBattle, TargetZoneId) == 0x000008, "Member 'ACEReportService_Lua_ACEReportPlayerInBattle::TargetZoneId' has a wrong offset!");
static_assert(offsetof(ACEReportService_Lua_ACEReportPlayerInBattle, TargetPlayerName) == 0x000010, "Member 'ACEReportService_Lua_ACEReportPlayerInBattle::TargetPlayerName' has a wrong offset!");
static_assert(offsetof(ACEReportService_Lua_ACEReportPlayerInBattle, SourcePC) == 0x000020, "Member 'ACEReportService_Lua_ACEReportPlayerInBattle::SourcePC' has a wrong offset!");

// Function TGFGame.ACEReportService.SendACEReportRequest
// 0x0008 (0x0008 - 0x0000)
struct ACEReportService_SendACEReportRequest final
{
public:
	class UTGFProtoTgfCSReportActionReqReportBodyPublic* Body;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ACEReportService_SendACEReportRequest) == 0x000008, "Wrong alignment on ACEReportService_SendACEReportRequest");
static_assert(sizeof(ACEReportService_SendACEReportRequest) == 0x000008, "Wrong size on ACEReportService_SendACEReportRequest");
static_assert(offsetof(ACEReportService_SendACEReportRequest, Body) == 0x000000, "Member 'ACEReportService_SendACEReportRequest::Body' has a wrong offset!");

// Function TGFGame.ACEService.OnGameLoginSuccess
// 0x0008 (0x0008 - 0x0000)
struct ACEService_OnGameLoginSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ACEService_OnGameLoginSuccess) == 0x000008, "Wrong alignment on ACEService_OnGameLoginSuccess");
static_assert(sizeof(ACEService_OnGameLoginSuccess) == 0x000008, "Wrong size on ACEService_OnGameLoginSuccess");
static_assert(offsetof(ACEService_OnGameLoginSuccess, Args) == 0x000000, "Member 'ACEService_OnGameLoginSuccess::Args' has a wrong offset!");

// Function TGFGame.ACEService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct ACEService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ACEService_OnGameLogout) == 0x000008, "Wrong alignment on ACEService_OnGameLogout");
static_assert(sizeof(ACEService_OnGameLogout) == 0x000008, "Wrong size on ACEService_OnGameLogout");
static_assert(offsetof(ACEService_OnGameLogout, Args) == 0x000000, "Member 'ACEService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.ACEService.OnNetworkManagerEnterState
// 0x0008 (0x0008 - 0x0000)
struct ACEService_OnNetworkManagerEnterState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ACEService_OnNetworkManagerEnterState) == 0x000008, "Wrong alignment on ACEService_OnNetworkManagerEnterState");
static_assert(sizeof(ACEService_OnNetworkManagerEnterState) == 0x000008, "Wrong size on ACEService_OnNetworkManagerEnterState");
static_assert(offsetof(ACEService_OnNetworkManagerEnterState, Args) == 0x000000, "Member 'ACEService_OnNetworkManagerEnterState::Args' has a wrong offset!");

// Function TGFGame.ACEService.OnNetworkManagerExitState
// 0x0008 (0x0008 - 0x0000)
struct ACEService_OnNetworkManagerExitState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ACEService_OnNetworkManagerExitState) == 0x000008, "Wrong alignment on ACEService_OnNetworkManagerExitState");
static_assert(sizeof(ACEService_OnNetworkManagerExitState) == 0x000008, "Wrong size on ACEService_OnNetworkManagerExitState");
static_assert(offsetof(ACEService_OnNetworkManagerExitState, Args) == 0x000000, "Member 'ACEService_OnNetworkManagerExitState::Args' has a wrong offset!");

// Function TGFGame.ActivityCenterService.GetActivityCenterData
// 0x0008 (0x0008 - 0x0000)
struct ActivityCenterService_GetActivityCenterData final
{
public:
	class UTGFProtoTgfDUserActivityDataList*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivityCenterService_GetActivityCenterData) == 0x000008, "Wrong alignment on ActivityCenterService_GetActivityCenterData");
static_assert(sizeof(ActivityCenterService_GetActivityCenterData) == 0x000008, "Wrong size on ActivityCenterService_GetActivityCenterData");
static_assert(offsetof(ActivityCenterService_GetActivityCenterData, ReturnValue) == 0x000000, "Member 'ActivityCenterService_GetActivityCenterData::ReturnValue' has a wrong offset!");

// Function TGFGame.ActivityCenterService.IsActivityListEmpty
// 0x0001 (0x0001 - 0x0000)
struct ActivityCenterService_IsActivityListEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivityCenterService_IsActivityListEmpty) == 0x000001, "Wrong alignment on ActivityCenterService_IsActivityListEmpty");
static_assert(sizeof(ActivityCenterService_IsActivityListEmpty) == 0x000001, "Wrong size on ActivityCenterService_IsActivityListEmpty");
static_assert(offsetof(ActivityCenterService_IsActivityListEmpty, ReturnValue) == 0x000000, "Member 'ActivityCenterService_IsActivityListEmpty::ReturnValue' has a wrong offset!");

// Function TGFGame.ActivityRewardService.GetActivityRandomReward
// 0x0004 (0x0004 - 0x0000)
struct ActivityRewardService_GetActivityRandomReward final
{
public:
	int32                                         ActivityId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivityRewardService_GetActivityRandomReward) == 0x000004, "Wrong alignment on ActivityRewardService_GetActivityRandomReward");
static_assert(sizeof(ActivityRewardService_GetActivityRandomReward) == 0x000004, "Wrong size on ActivityRewardService_GetActivityRandomReward");
static_assert(offsetof(ActivityRewardService_GetActivityRandomReward, ActivityId) == 0x000000, "Member 'ActivityRewardService_GetActivityRandomReward::ActivityId' has a wrong offset!");

// Function TGFGame.AppService.ChangeHallState
// 0x0001 (0x0001 - 0x0000)
struct AppService_ChangeHallState final
{
public:
	EHallState                                    InHallState;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_ChangeHallState) == 0x000001, "Wrong alignment on AppService_ChangeHallState");
static_assert(sizeof(AppService_ChangeHallState) == 0x000001, "Wrong size on AppService_ChangeHallState");
static_assert(offsetof(AppService_ChangeHallState, InHallState) == 0x000000, "Member 'AppService_ChangeHallState::InHallState' has a wrong offset!");

// Function TGFGame.AppService.GetWardrobeAvatarFromPool
// 0x0008 (0x0008 - 0x0000)
struct AppService_GetWardrobeAvatarFromPool final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_GetWardrobeAvatarFromPool) == 0x000008, "Wrong alignment on AppService_GetWardrobeAvatarFromPool");
static_assert(sizeof(AppService_GetWardrobeAvatarFromPool) == 0x000008, "Wrong size on AppService_GetWardrobeAvatarFromPool");
static_assert(offsetof(AppService_GetWardrobeAvatarFromPool, ReturnValue) == 0x000000, "Member 'AppService_GetWardrobeAvatarFromPool::ReturnValue' has a wrong offset!");

// Function TGFGame.AppService.OnNetworkManagerEnterState
// 0x0008 (0x0008 - 0x0000)
struct AppService_OnNetworkManagerEnterState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_OnNetworkManagerEnterState) == 0x000008, "Wrong alignment on AppService_OnNetworkManagerEnterState");
static_assert(sizeof(AppService_OnNetworkManagerEnterState) == 0x000008, "Wrong size on AppService_OnNetworkManagerEnterState");
static_assert(offsetof(AppService_OnNetworkManagerEnterState, Args) == 0x000000, "Member 'AppService_OnNetworkManagerEnterState::Args' has a wrong offset!");

// Function TGFGame.AppService.OpenWindow
// 0x0028 (0x0028 - 0x0000)
struct AppService_OpenWindow final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFWindowArgs*                         Args;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUnique;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_OpenWindow) == 0x000008, "Wrong alignment on AppService_OpenWindow");
static_assert(sizeof(AppService_OpenWindow) == 0x000028, "Wrong size on AppService_OpenWindow");
static_assert(offsetof(AppService_OpenWindow, Path) == 0x000000, "Member 'AppService_OpenWindow::Path' has a wrong offset!");
static_assert(offsetof(AppService_OpenWindow, Args) == 0x000010, "Member 'AppService_OpenWindow::Args' has a wrong offset!");
static_assert(offsetof(AppService_OpenWindow, bIsUnique) == 0x000018, "Member 'AppService_OpenWindow::bIsUnique' has a wrong offset!");
static_assert(offsetof(AppService_OpenWindow, ReturnValue) == 0x000020, "Member 'AppService_OpenWindow::ReturnValue' has a wrong offset!");

// Function TGFGame.AppService.RecycleWardrobeAvatar
// 0x0008 (0x0008 - 0x0000)
struct AppService_RecycleWardrobeAvatar final
{
public:
	class AActor*                                 InRecycleActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_RecycleWardrobeAvatar) == 0x000008, "Wrong alignment on AppService_RecycleWardrobeAvatar");
static_assert(sizeof(AppService_RecycleWardrobeAvatar) == 0x000008, "Wrong size on AppService_RecycleWardrobeAvatar");
static_assert(offsetof(AppService_RecycleWardrobeAvatar, InRecycleActor) == 0x000000, "Member 'AppService_RecycleWardrobeAvatar::InRecycleActor' has a wrong offset!");

// Function TGFGame.AppService.SetCreateRoleLevelVisible
// 0x0001 (0x0001 - 0x0000)
struct AppService_SetCreateRoleLevelVisible final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_SetCreateRoleLevelVisible) == 0x000001, "Wrong alignment on AppService_SetCreateRoleLevelVisible");
static_assert(sizeof(AppService_SetCreateRoleLevelVisible) == 0x000001, "Wrong size on AppService_SetCreateRoleLevelVisible");
static_assert(offsetof(AppService_SetCreateRoleLevelVisible, bValue) == 0x000000, "Member 'AppService_SetCreateRoleLevelVisible::bValue' has a wrong offset!");

// Function TGFGame.AppService.SetWardrobeLevelVisible
// 0x0001 (0x0001 - 0x0000)
struct AppService_SetWardrobeLevelVisible final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_SetWardrobeLevelVisible) == 0x000001, "Wrong alignment on AppService_SetWardrobeLevelVisible");
static_assert(sizeof(AppService_SetWardrobeLevelVisible) == 0x000001, "Wrong size on AppService_SetWardrobeLevelVisible");
static_assert(offsetof(AppService_SetWardrobeLevelVisible, bValue) == 0x000000, "Member 'AppService_SetWardrobeLevelVisible::bValue' has a wrong offset!");

// Function TGFGame.AppService.ShouldShutDownHallGlobalEffects
// 0x0001 (0x0001 - 0x0000)
struct AppService_ShouldShutDownHallGlobalEffects final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_ShouldShutDownHallGlobalEffects) == 0x000001, "Wrong alignment on AppService_ShouldShutDownHallGlobalEffects");
static_assert(sizeof(AppService_ShouldShutDownHallGlobalEffects) == 0x000001, "Wrong size on AppService_ShouldShutDownHallGlobalEffects");
static_assert(offsetof(AppService_ShouldShutDownHallGlobalEffects, bIsOpen) == 0x000000, "Member 'AppService_ShouldShutDownHallGlobalEffects::bIsOpen' has a wrong offset!");

// Function TGFGame.AppService.SpawnActorToWardrobeLevel
// 0x0040 (0x0040 - 0x0000)
struct AppService_SpawnActorToWardrobeLevel final
{
public:
	class UClass*                                 Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_SpawnActorToWardrobeLevel) == 0x000008, "Wrong alignment on AppService_SpawnActorToWardrobeLevel");
static_assert(sizeof(AppService_SpawnActorToWardrobeLevel) == 0x000040, "Wrong size on AppService_SpawnActorToWardrobeLevel");
static_assert(offsetof(AppService_SpawnActorToWardrobeLevel, Param_Class) == 0x000000, "Member 'AppService_SpawnActorToWardrobeLevel::Param_Class' has a wrong offset!");
static_assert(offsetof(AppService_SpawnActorToWardrobeLevel, Location) == 0x000008, "Member 'AppService_SpawnActorToWardrobeLevel::Location' has a wrong offset!");
static_assert(offsetof(AppService_SpawnActorToWardrobeLevel, Rotation) == 0x000020, "Member 'AppService_SpawnActorToWardrobeLevel::Rotation' has a wrong offset!");
static_assert(offsetof(AppService_SpawnActorToWardrobeLevel, ReturnValue) == 0x000038, "Member 'AppService_SpawnActorToWardrobeLevel::ReturnValue' has a wrong offset!");

// Function TGFGame.AppService.ToggleCurrentLevelCompRegistration
// 0x0001 (0x0001 - 0x0000)
struct AppService_ToggleCurrentLevelCompRegistration final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_ToggleCurrentLevelCompRegistration) == 0x000001, "Wrong alignment on AppService_ToggleCurrentLevelCompRegistration");
static_assert(sizeof(AppService_ToggleCurrentLevelCompRegistration) == 0x000001, "Wrong size on AppService_ToggleCurrentLevelCompRegistration");
static_assert(offsetof(AppService_ToggleCurrentLevelCompRegistration, bValue) == 0x000000, "Member 'AppService_ToggleCurrentLevelCompRegistration::bValue' has a wrong offset!");

// Function TGFGame.AppService.ToggleOptimizationForSceneCapture
// 0x0001 (0x0001 - 0x0000)
struct AppService_ToggleOptimizationForSceneCapture final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_ToggleOptimizationForSceneCapture) == 0x000001, "Wrong alignment on AppService_ToggleOptimizationForSceneCapture");
static_assert(sizeof(AppService_ToggleOptimizationForSceneCapture) == 0x000001, "Wrong size on AppService_ToggleOptimizationForSceneCapture");
static_assert(offsetof(AppService_ToggleOptimizationForSceneCapture, bIsOpen) == 0x000000, "Member 'AppService_ToggleOptimizationForSceneCapture::bIsOpen' has a wrong offset!");

// Function TGFGame.AppService.CheckAboutToQuit
// 0x0001 (0x0001 - 0x0000)
struct AppService_CheckAboutToQuit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_CheckAboutToQuit) == 0x000001, "Wrong alignment on AppService_CheckAboutToQuit");
static_assert(sizeof(AppService_CheckAboutToQuit) == 0x000001, "Wrong size on AppService_CheckAboutToQuit");
static_assert(offsetof(AppService_CheckAboutToQuit, ReturnValue) == 0x000000, "Member 'AppService_CheckAboutToQuit::ReturnValue' has a wrong offset!");

// Function TGFGame.AppService.GetAppState
// 0x0001 (0x0001 - 0x0000)
struct AppService_GetAppState final
{
public:
	EAppState                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_GetAppState) == 0x000001, "Wrong alignment on AppService_GetAppState");
static_assert(sizeof(AppService_GetAppState) == 0x000001, "Wrong size on AppService_GetAppState");
static_assert(offsetof(AppService_GetAppState, ReturnValue) == 0x000000, "Member 'AppService_GetAppState::ReturnValue' has a wrong offset!");

// Function TGFGame.AppService.GetHallState
// 0x0001 (0x0001 - 0x0000)
struct AppService_GetHallState final
{
public:
	EHallState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppService_GetHallState) == 0x000001, "Wrong alignment on AppService_GetHallState");
static_assert(sizeof(AppService_GetHallState) == 0x000001, "Wrong size on AppService_GetHallState");
static_assert(offsetof(AppService_GetHallState, ReturnValue) == 0x000000, "Member 'AppService_GetHallState::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFNetworkManager.OnGameLoginFailed
// 0x0008 (0x0008 - 0x0000)
struct TGFNetworkManager_OnGameLoginFailed final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFNetworkManager_OnGameLoginFailed) == 0x000008, "Wrong alignment on TGFNetworkManager_OnGameLoginFailed");
static_assert(sizeof(TGFNetworkManager_OnGameLoginFailed) == 0x000008, "Wrong size on TGFNetworkManager_OnGameLoginFailed");
static_assert(offsetof(TGFNetworkManager_OnGameLoginFailed, Args) == 0x000000, "Member 'TGFNetworkManager_OnGameLoginFailed::Args' has a wrong offset!");

// Function TGFGame.TGFNetworkManager.OnGameLoginSuccess
// 0x0008 (0x0008 - 0x0000)
struct TGFNetworkManager_OnGameLoginSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFNetworkManager_OnGameLoginSuccess) == 0x000008, "Wrong alignment on TGFNetworkManager_OnGameLoginSuccess");
static_assert(sizeof(TGFNetworkManager_OnGameLoginSuccess) == 0x000008, "Wrong size on TGFNetworkManager_OnGameLoginSuccess");
static_assert(offsetof(TGFNetworkManager_OnGameLoginSuccess, Args) == 0x000000, "Member 'TGFNetworkManager_OnGameLoginSuccess::Args' has a wrong offset!");

// Function TGFGame.TGFNetworkManager.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct TGFNetworkManager_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFNetworkManager_OnGameLogout) == 0x000008, "Wrong alignment on TGFNetworkManager_OnGameLogout");
static_assert(sizeof(TGFNetworkManager_OnGameLogout) == 0x000008, "Wrong size on TGFNetworkManager_OnGameLogout");
static_assert(offsetof(TGFNetworkManager_OnGameLogout, Args) == 0x000000, "Member 'TGFNetworkManager_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.TGFNetworkManager.OnGamePreLoginFailed
// 0x0008 (0x0008 - 0x0000)
struct TGFNetworkManager_OnGamePreLoginFailed final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFNetworkManager_OnGamePreLoginFailed) == 0x000008, "Wrong alignment on TGFNetworkManager_OnGamePreLoginFailed");
static_assert(sizeof(TGFNetworkManager_OnGamePreLoginFailed) == 0x000008, "Wrong size on TGFNetworkManager_OnGamePreLoginFailed");
static_assert(offsetof(TGFNetworkManager_OnGamePreLoginFailed, Args) == 0x000000, "Member 'TGFNetworkManager_OnGamePreLoginFailed::Args' has a wrong offset!");

// Function TGFGame.TGFNetworkManager.OnGamePreLoginSuccess
// 0x0008 (0x0008 - 0x0000)
struct TGFNetworkManager_OnGamePreLoginSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFNetworkManager_OnGamePreLoginSuccess) == 0x000008, "Wrong alignment on TGFNetworkManager_OnGamePreLoginSuccess");
static_assert(sizeof(TGFNetworkManager_OnGamePreLoginSuccess) == 0x000008, "Wrong size on TGFNetworkManager_OnGamePreLoginSuccess");
static_assert(offsetof(TGFNetworkManager_OnGamePreLoginSuccess, Args) == 0x000000, "Member 'TGFNetworkManager_OnGamePreLoginSuccess::Args' has a wrong offset!");

// Function TGFGame.TGFNetworkManager.OnSyncPlayerInfoSuccess
// 0x0008 (0x0008 - 0x0000)
struct TGFNetworkManager_OnSyncPlayerInfoSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFNetworkManager_OnSyncPlayerInfoSuccess) == 0x000008, "Wrong alignment on TGFNetworkManager_OnSyncPlayerInfoSuccess");
static_assert(sizeof(TGFNetworkManager_OnSyncPlayerInfoSuccess) == 0x000008, "Wrong size on TGFNetworkManager_OnSyncPlayerInfoSuccess");
static_assert(offsetof(TGFNetworkManager_OnSyncPlayerInfoSuccess, Args) == 0x000000, "Member 'TGFNetworkManager_OnSyncPlayerInfoSuccess::Args' has a wrong offset!");

// Function TGFGame.AsyncAction_ShowAlert.ShowAlert
// 0x0040 (0x0040 - 0x0000)
struct AsyncAction_ShowAlert_ShowAlert final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ConfirmText;                                       // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UAsyncAction_ShowAlert*                 ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_ShowAlert_ShowAlert) == 0x000008, "Wrong alignment on AsyncAction_ShowAlert_ShowAlert");
static_assert(sizeof(AsyncAction_ShowAlert_ShowAlert) == 0x000040, "Wrong size on AsyncAction_ShowAlert_ShowAlert");
static_assert(offsetof(AsyncAction_ShowAlert_ShowAlert, InWorldContextObject) == 0x000000, "Member 'AsyncAction_ShowAlert_ShowAlert::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_ShowAlert_ShowAlert, Message) == 0x000008, "Member 'AsyncAction_ShowAlert_ShowAlert::Message' has a wrong offset!");
static_assert(offsetof(AsyncAction_ShowAlert_ShowAlert, ConfirmText) == 0x000020, "Member 'AsyncAction_ShowAlert_ShowAlert::ConfirmText' has a wrong offset!");
static_assert(offsetof(AsyncAction_ShowAlert_ShowAlert, ReturnValue) == 0x000038, "Member 'AsyncAction_ShowAlert_ShowAlert::ReturnValue' has a wrong offset!");

// Function TGFGame.AsyncAction_ShowConfirm.ShowConfirm
// 0x0060 (0x0060 - 0x0000)
struct AsyncAction_ShowConfirm_ShowConfirm final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ConfirmText;                                       // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   CancelText;                                        // 0x0038(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_ShowConfirm*               ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_ShowConfirm_ShowConfirm) == 0x000008, "Wrong alignment on AsyncAction_ShowConfirm_ShowConfirm");
static_assert(sizeof(AsyncAction_ShowConfirm_ShowConfirm) == 0x000060, "Wrong size on AsyncAction_ShowConfirm_ShowConfirm");
static_assert(offsetof(AsyncAction_ShowConfirm_ShowConfirm, InWorldContextObject) == 0x000000, "Member 'AsyncAction_ShowConfirm_ShowConfirm::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_ShowConfirm_ShowConfirm, Message) == 0x000008, "Member 'AsyncAction_ShowConfirm_ShowConfirm::Message' has a wrong offset!");
static_assert(offsetof(AsyncAction_ShowConfirm_ShowConfirm, ConfirmText) == 0x000020, "Member 'AsyncAction_ShowConfirm_ShowConfirm::ConfirmText' has a wrong offset!");
static_assert(offsetof(AsyncAction_ShowConfirm_ShowConfirm, CancelText) == 0x000038, "Member 'AsyncAction_ShowConfirm_ShowConfirm::CancelText' has a wrong offset!");
static_assert(offsetof(AsyncAction_ShowConfirm_ShowConfirm, Context) == 0x000050, "Member 'AsyncAction_ShowConfirm_ShowConfirm::Context' has a wrong offset!");
static_assert(offsetof(AsyncAction_ShowConfirm_ShowConfirm, ReturnValue) == 0x000058, "Member 'AsyncAction_ShowConfirm_ShowConfirm::ReturnValue' has a wrong offset!");

// Function TGFGame.BannerSubsystem.GetBannerConfigList
// 0x0018 (0x0018 - 0x0000)
struct BannerSubsystem_GetBannerConfigList final
{
public:
	TArray<struct FBannerConfig>                  BannerConfigList;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerSubsystem_GetBannerConfigList) == 0x000008, "Wrong alignment on BannerSubsystem_GetBannerConfigList");
static_assert(sizeof(BannerSubsystem_GetBannerConfigList) == 0x000018, "Wrong size on BannerSubsystem_GetBannerConfigList");
static_assert(offsetof(BannerSubsystem_GetBannerConfigList, BannerConfigList) == 0x000000, "Member 'BannerSubsystem_GetBannerConfigList::BannerConfigList' has a wrong offset!");
static_assert(offsetof(BannerSubsystem_GetBannerConfigList, ReturnValue) == 0x000010, "Member 'BannerSubsystem_GetBannerConfigList::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleService.GetSaleableItems
// 0x0030 (0x0030 - 0x0000)
struct TradeSaleService_GetSaleableItems final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETGFProtoTgfEnGearEquipSubType>        Types;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnItemRarity                      Rarity;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SortByPriceUp;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTradeSaleItem*>                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleService_GetSaleableItems) == 0x000008, "Wrong alignment on TradeSaleService_GetSaleableItems");
static_assert(sizeof(TradeSaleService_GetSaleableItems) == 0x000030, "Wrong size on TradeSaleService_GetSaleableItems");
static_assert(offsetof(TradeSaleService_GetSaleableItems, MarketId) == 0x000000, "Member 'TradeSaleService_GetSaleableItems::MarketId' has a wrong offset!");
static_assert(offsetof(TradeSaleService_GetSaleableItems, Types) == 0x000008, "Member 'TradeSaleService_GetSaleableItems::Types' has a wrong offset!");
static_assert(offsetof(TradeSaleService_GetSaleableItems, Rarity) == 0x000018, "Member 'TradeSaleService_GetSaleableItems::Rarity' has a wrong offset!");
static_assert(offsetof(TradeSaleService_GetSaleableItems, SortByPriceUp) == 0x000019, "Member 'TradeSaleService_GetSaleableItems::SortByPriceUp' has a wrong offset!");
static_assert(offsetof(TradeSaleService_GetSaleableItems, ReturnValue) == 0x000020, "Member 'TradeSaleService_GetSaleableItems::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct TradeSaleService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleService_OnGameLogout) == 0x000008, "Wrong alignment on TradeSaleService_OnGameLogout");
static_assert(sizeof(TradeSaleService_OnGameLogout) == 0x000008, "Wrong size on TradeSaleService_OnGameLogout");
static_assert(offsetof(TradeSaleService_OnGameLogout, Args) == 0x000000, "Member 'TradeSaleService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.TradeSaleService.PublishAuctionOrder
// 0x0070 (0x0070 - 0x0000)
struct TradeSaleService_PublishAuctionOrder final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFItem                               SaleItem;                                          // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostType;                                          // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FixedPrice;                                        // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeSaleService_PublishAuctionOrder) == 0x000008, "Wrong alignment on TradeSaleService_PublishAuctionOrder");
static_assert(sizeof(TradeSaleService_PublishAuctionOrder) == 0x000070, "Wrong size on TradeSaleService_PublishAuctionOrder");
static_assert(offsetof(TradeSaleService_PublishAuctionOrder, MarketId) == 0x000000, "Member 'TradeSaleService_PublishAuctionOrder::MarketId' has a wrong offset!");
static_assert(offsetof(TradeSaleService_PublishAuctionOrder, SaleItem) == 0x000008, "Member 'TradeSaleService_PublishAuctionOrder::SaleItem' has a wrong offset!");
static_assert(offsetof(TradeSaleService_PublishAuctionOrder, Price) == 0x000060, "Member 'TradeSaleService_PublishAuctionOrder::Price' has a wrong offset!");
static_assert(offsetof(TradeSaleService_PublishAuctionOrder, CostType) == 0x000064, "Member 'TradeSaleService_PublishAuctionOrder::CostType' has a wrong offset!");
static_assert(offsetof(TradeSaleService_PublishAuctionOrder, FixedPrice) == 0x000068, "Member 'TradeSaleService_PublishAuctionOrder::FixedPrice' has a wrong offset!");

// Function TGFGame.UnlockService.GetModuleBannedMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockService_GetModuleBannedMessage final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockService_GetModuleBannedMessage) == 0x000008, "Wrong alignment on UnlockService_GetModuleBannedMessage");
static_assert(sizeof(UnlockService_GetModuleBannedMessage) == 0x000020, "Wrong size on UnlockService_GetModuleBannedMessage");
static_assert(offsetof(UnlockService_GetModuleBannedMessage, InModuleId) == 0x000000, "Member 'UnlockService_GetModuleBannedMessage::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_GetModuleBannedMessage, ReturnValue) == 0x000008, "Member 'UnlockService_GetModuleBannedMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.GetModuleCircularLockMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockService_GetModuleCircularLockMessage final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockService_GetModuleCircularLockMessage) == 0x000008, "Wrong alignment on UnlockService_GetModuleCircularLockMessage");
static_assert(sizeof(UnlockService_GetModuleCircularLockMessage) == 0x000020, "Wrong size on UnlockService_GetModuleCircularLockMessage");
static_assert(offsetof(UnlockService_GetModuleCircularLockMessage, InModuleId) == 0x000000, "Member 'UnlockService_GetModuleCircularLockMessage::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_GetModuleCircularLockMessage, ReturnValue) == 0x000008, "Member 'UnlockService_GetModuleCircularLockMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.GetModuleCircularNextTimeMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockService_GetModuleCircularNextTimeMessage final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockService_GetModuleCircularNextTimeMessage) == 0x000008, "Wrong alignment on UnlockService_GetModuleCircularNextTimeMessage");
static_assert(sizeof(UnlockService_GetModuleCircularNextTimeMessage) == 0x000020, "Wrong size on UnlockService_GetModuleCircularNextTimeMessage");
static_assert(offsetof(UnlockService_GetModuleCircularNextTimeMessage, InModuleId) == 0x000000, "Member 'UnlockService_GetModuleCircularNextTimeMessage::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_GetModuleCircularNextTimeMessage, ReturnValue) == 0x000008, "Member 'UnlockService_GetModuleCircularNextTimeMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.GetModuleGlobalForbidMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockService_GetModuleGlobalForbidMessage final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockService_GetModuleGlobalForbidMessage) == 0x000008, "Wrong alignment on UnlockService_GetModuleGlobalForbidMessage");
static_assert(sizeof(UnlockService_GetModuleGlobalForbidMessage) == 0x000020, "Wrong size on UnlockService_GetModuleGlobalForbidMessage");
static_assert(offsetof(UnlockService_GetModuleGlobalForbidMessage, InModuleId) == 0x000000, "Member 'UnlockService_GetModuleGlobalForbidMessage::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_GetModuleGlobalForbidMessage, ReturnValue) == 0x000008, "Member 'UnlockService_GetModuleGlobalForbidMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.GetModuleLockMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockService_GetModuleLockMessage final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockService_GetModuleLockMessage) == 0x000008, "Wrong alignment on UnlockService_GetModuleLockMessage");
static_assert(sizeof(UnlockService_GetModuleLockMessage) == 0x000020, "Wrong size on UnlockService_GetModuleLockMessage");
static_assert(offsetof(UnlockService_GetModuleLockMessage, InModuleId) == 0x000000, "Member 'UnlockService_GetModuleLockMessage::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_GetModuleLockMessage, ReturnValue) == 0x000008, "Member 'UnlockService_GetModuleLockMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.GetModuleNextTimeMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockService_GetModuleNextTimeMessage final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockService_GetModuleNextTimeMessage) == 0x000008, "Wrong alignment on UnlockService_GetModuleNextTimeMessage");
static_assert(sizeof(UnlockService_GetModuleNextTimeMessage) == 0x000020, "Wrong size on UnlockService_GetModuleNextTimeMessage");
static_assert(offsetof(UnlockService_GetModuleNextTimeMessage, InModuleId) == 0x000000, "Member 'UnlockService_GetModuleNextTimeMessage::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_GetModuleNextTimeMessage, ReturnValue) == 0x000008, "Member 'UnlockService_GetModuleNextTimeMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.GetModuleTimeLockMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockService_GetModuleTimeLockMessage final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockService_GetModuleTimeLockMessage) == 0x000008, "Wrong alignment on UnlockService_GetModuleTimeLockMessage");
static_assert(sizeof(UnlockService_GetModuleTimeLockMessage) == 0x000020, "Wrong size on UnlockService_GetModuleTimeLockMessage");
static_assert(offsetof(UnlockService_GetModuleTimeLockMessage, InModuleId) == 0x000000, "Member 'UnlockService_GetModuleTimeLockMessage::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_GetModuleTimeLockMessage, ReturnValue) == 0x000008, "Member 'UnlockService_GetModuleTimeLockMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.IsModuleAllowed
// 0x0008 (0x0008 - 0x0000)
struct UnlockService_IsModuleAllowed final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlert;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToast;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnlockService_IsModuleAllowed) == 0x000004, "Wrong alignment on UnlockService_IsModuleAllowed");
static_assert(sizeof(UnlockService_IsModuleAllowed) == 0x000008, "Wrong size on UnlockService_IsModuleAllowed");
static_assert(offsetof(UnlockService_IsModuleAllowed, InModuleId) == 0x000000, "Member 'UnlockService_IsModuleAllowed::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleAllowed, bIsAlert) == 0x000004, "Member 'UnlockService_IsModuleAllowed::bIsAlert' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleAllowed, bIsToast) == 0x000005, "Member 'UnlockService_IsModuleAllowed::bIsToast' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleAllowed, ReturnValue) == 0x000006, "Member 'UnlockService_IsModuleAllowed::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.IsModuleBanned
// 0x0008 (0x0008 - 0x0000)
struct UnlockService_IsModuleBanned final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlert;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToast;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnlockService_IsModuleBanned) == 0x000004, "Wrong alignment on UnlockService_IsModuleBanned");
static_assert(sizeof(UnlockService_IsModuleBanned) == 0x000008, "Wrong size on UnlockService_IsModuleBanned");
static_assert(offsetof(UnlockService_IsModuleBanned, InModuleId) == 0x000000, "Member 'UnlockService_IsModuleBanned::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleBanned, bIsAlert) == 0x000004, "Member 'UnlockService_IsModuleBanned::bIsAlert' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleBanned, bIsToast) == 0x000005, "Member 'UnlockService_IsModuleBanned::bIsToast' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleBanned, ReturnValue) == 0x000006, "Member 'UnlockService_IsModuleBanned::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.IsModuleCircularLock
// 0x0008 (0x0008 - 0x0000)
struct UnlockService_IsModuleCircularLock final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlert;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToast;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnlockService_IsModuleCircularLock) == 0x000004, "Wrong alignment on UnlockService_IsModuleCircularLock");
static_assert(sizeof(UnlockService_IsModuleCircularLock) == 0x000008, "Wrong size on UnlockService_IsModuleCircularLock");
static_assert(offsetof(UnlockService_IsModuleCircularLock, InModuleId) == 0x000000, "Member 'UnlockService_IsModuleCircularLock::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleCircularLock, bIsAlert) == 0x000004, "Member 'UnlockService_IsModuleCircularLock::bIsAlert' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleCircularLock, bIsToast) == 0x000005, "Member 'UnlockService_IsModuleCircularLock::bIsToast' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleCircularLock, ReturnValue) == 0x000006, "Member 'UnlockService_IsModuleCircularLock::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.IsModuleGlobalForbid
// 0x0008 (0x0008 - 0x0000)
struct UnlockService_IsModuleGlobalForbid final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlert;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToast;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnlockService_IsModuleGlobalForbid) == 0x000004, "Wrong alignment on UnlockService_IsModuleGlobalForbid");
static_assert(sizeof(UnlockService_IsModuleGlobalForbid) == 0x000008, "Wrong size on UnlockService_IsModuleGlobalForbid");
static_assert(offsetof(UnlockService_IsModuleGlobalForbid, InModuleId) == 0x000000, "Member 'UnlockService_IsModuleGlobalForbid::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleGlobalForbid, bIsAlert) == 0x000004, "Member 'UnlockService_IsModuleGlobalForbid::bIsAlert' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleGlobalForbid, bIsToast) == 0x000005, "Member 'UnlockService_IsModuleGlobalForbid::bIsToast' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleGlobalForbid, ReturnValue) == 0x000006, "Member 'UnlockService_IsModuleGlobalForbid::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.IsModuleLock
// 0x0008 (0x0008 - 0x0000)
struct UnlockService_IsModuleLock final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlert;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToast;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnlockService_IsModuleLock) == 0x000004, "Wrong alignment on UnlockService_IsModuleLock");
static_assert(sizeof(UnlockService_IsModuleLock) == 0x000008, "Wrong size on UnlockService_IsModuleLock");
static_assert(offsetof(UnlockService_IsModuleLock, InModuleId) == 0x000000, "Member 'UnlockService_IsModuleLock::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleLock, bIsAlert) == 0x000004, "Member 'UnlockService_IsModuleLock::bIsAlert' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleLock, bIsToast) == 0x000005, "Member 'UnlockService_IsModuleLock::bIsToast' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleLock, ReturnValue) == 0x000006, "Member 'UnlockService_IsModuleLock::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockService.IsModuleTimeLock
// 0x0008 (0x0008 - 0x0000)
struct UnlockService_IsModuleTimeLock final
{
public:
	int32                                         InModuleId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlert;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToast;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnlockService_IsModuleTimeLock) == 0x000004, "Wrong alignment on UnlockService_IsModuleTimeLock");
static_assert(sizeof(UnlockService_IsModuleTimeLock) == 0x000008, "Wrong size on UnlockService_IsModuleTimeLock");
static_assert(offsetof(UnlockService_IsModuleTimeLock, InModuleId) == 0x000000, "Member 'UnlockService_IsModuleTimeLock::InModuleId' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleTimeLock, bIsAlert) == 0x000004, "Member 'UnlockService_IsModuleTimeLock::bIsAlert' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleTimeLock, bIsToast) == 0x000005, "Member 'UnlockService_IsModuleTimeLock::bIsToast' has a wrong offset!");
static_assert(offsetof(UnlockService_IsModuleTimeLock, ReturnValue) == 0x000006, "Member 'UnlockService_IsModuleTimeLock::ReturnValue' has a wrong offset!");

// Function TGFGame.VelocityService.CdnHTTPRequest
// 0x0010 (0x0010 - 0x0000)
struct VelocityService_CdnHTTPRequest final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VelocityService_CdnHTTPRequest) == 0x000008, "Wrong alignment on VelocityService_CdnHTTPRequest");
static_assert(sizeof(VelocityService_CdnHTTPRequest) == 0x000010, "Wrong size on VelocityService_CdnHTTPRequest");
static_assert(offsetof(VelocityService_CdnHTTPRequest, URL) == 0x000000, "Member 'VelocityService_CdnHTTPRequest::URL' has a wrong offset!");

// Function TGFGame.VelocityService.GetCurSelectRegionData
// 0x0040 (0x0040 - 0x0000)
struct VelocityService_GetCurSelectRegionData final
{
public:
	struct FTGFRegionData                         ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VelocityService_GetCurSelectRegionData) == 0x000008, "Wrong alignment on VelocityService_GetCurSelectRegionData");
static_assert(sizeof(VelocityService_GetCurSelectRegionData) == 0x000040, "Wrong size on VelocityService_GetCurSelectRegionData");
static_assert(offsetof(VelocityService_GetCurSelectRegionData, ReturnValue) == 0x000000, "Member 'VelocityService_GetCurSelectRegionData::ReturnValue' has a wrong offset!");

// Function TGFGame.VelocityService.GetLatencyByRegionId
// 0x0018 (0x0018 - 0x0000)
struct VelocityService_GetLatencyByRegionId final
{
public:
	class FString                                 RegionId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VelocityService_GetLatencyByRegionId) == 0x000008, "Wrong alignment on VelocityService_GetLatencyByRegionId");
static_assert(sizeof(VelocityService_GetLatencyByRegionId) == 0x000018, "Wrong size on VelocityService_GetLatencyByRegionId");
static_assert(offsetof(VelocityService_GetLatencyByRegionId, RegionId) == 0x000000, "Member 'VelocityService_GetLatencyByRegionId::RegionId' has a wrong offset!");
static_assert(offsetof(VelocityService_GetLatencyByRegionId, ReturnValue) == 0x000010, "Member 'VelocityService_GetLatencyByRegionId::ReturnValue' has a wrong offset!");

// Function TGFGame.VelocityService.GetRegionDetailData
// 0x0098 (0x0098 - 0x0000)
struct VelocityService_GetRegionDetailData final
{
public:
	struct FTGFRegionDetailData                   ReturnValue;                                       // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VelocityService_GetRegionDetailData) == 0x000008, "Wrong alignment on VelocityService_GetRegionDetailData");
static_assert(sizeof(VelocityService_GetRegionDetailData) == 0x000098, "Wrong size on VelocityService_GetRegionDetailData");
static_assert(offsetof(VelocityService_GetRegionDetailData, ReturnValue) == 0x000000, "Member 'VelocityService_GetRegionDetailData::ReturnValue' has a wrong offset!");

// Function TGFGame.VelocityService.SetCurSelectRegionData
// 0x0040 (0x0040 - 0x0000)
struct VelocityService_SetCurSelectRegionData final
{
public:
	struct FTGFRegionData                         RegionData;                                        // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VelocityService_SetCurSelectRegionData) == 0x000008, "Wrong alignment on VelocityService_SetCurSelectRegionData");
static_assert(sizeof(VelocityService_SetCurSelectRegionData) == 0x000040, "Wrong size on VelocityService_SetCurSelectRegionData");
static_assert(offsetof(VelocityService_SetCurSelectRegionData, RegionData) == 0x000000, "Member 'VelocityService_SetCurSelectRegionData::RegionData' has a wrong offset!");

// Function TGFGame.BattlePassRewardService.IsBattlePassUnlocked
// 0x0001 (0x0001 - 0x0000)
struct BattlePassRewardService_IsBattlePassUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardService_IsBattlePassUnlocked) == 0x000001, "Wrong alignment on BattlePassRewardService_IsBattlePassUnlocked");
static_assert(sizeof(BattlePassRewardService_IsBattlePassUnlocked) == 0x000001, "Wrong size on BattlePassRewardService_IsBattlePassUnlocked");
static_assert(offsetof(BattlePassRewardService_IsBattlePassUnlocked, ReturnValue) == 0x000000, "Member 'BattlePassRewardService_IsBattlePassUnlocked::ReturnValue' has a wrong offset!");

// Function TGFGame.BattlePassRewardService.OnActivityCenterListResponse
// 0x0008 (0x0008 - 0x0000)
struct BattlePassRewardService_OnActivityCenterListResponse final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardService_OnActivityCenterListResponse) == 0x000008, "Wrong alignment on BattlePassRewardService_OnActivityCenterListResponse");
static_assert(sizeof(BattlePassRewardService_OnActivityCenterListResponse) == 0x000008, "Wrong size on BattlePassRewardService_OnActivityCenterListResponse");
static_assert(offsetof(BattlePassRewardService_OnActivityCenterListResponse, Args) == 0x000000, "Member 'BattlePassRewardService_OnActivityCenterListResponse::Args' has a wrong offset!");

// Function TGFGame.BattlePassRewardService.OnActivityCenterUpdate
// 0x0008 (0x0008 - 0x0000)
struct BattlePassRewardService_OnActivityCenterUpdate final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardService_OnActivityCenterUpdate) == 0x000008, "Wrong alignment on BattlePassRewardService_OnActivityCenterUpdate");
static_assert(sizeof(BattlePassRewardService_OnActivityCenterUpdate) == 0x000008, "Wrong size on BattlePassRewardService_OnActivityCenterUpdate");
static_assert(offsetof(BattlePassRewardService_OnActivityCenterUpdate, Args) == 0x000000, "Member 'BattlePassRewardService_OnActivityCenterUpdate::Args' has a wrong offset!");

// Function TGFGame.BattlePassRewardService.SendBuyPassportReq
// 0x0004 (0x0004 - 0x0000)
struct BattlePassRewardService_SendBuyPassportReq final
{
public:
	int32                                         InActivityId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardService_SendBuyPassportReq) == 0x000004, "Wrong alignment on BattlePassRewardService_SendBuyPassportReq");
static_assert(sizeof(BattlePassRewardService_SendBuyPassportReq) == 0x000004, "Wrong size on BattlePassRewardService_SendBuyPassportReq");
static_assert(offsetof(BattlePassRewardService_SendBuyPassportReq, InActivityId) == 0x000000, "Member 'BattlePassRewardService_SendBuyPassportReq::InActivityId' has a wrong offset!");

// Function TGFGame.BattlePassRewardService.SendReceiveCycleRewardsReq
// 0x0018 (0x0018 - 0x0000)
struct BattlePassRewardService_SendReceiveCycleRewardsReq final
{
public:
	int32                                         InActivityId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGradeQty;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTGFItemOffset>                 InRewardItems;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardService_SendReceiveCycleRewardsReq) == 0x000008, "Wrong alignment on BattlePassRewardService_SendReceiveCycleRewardsReq");
static_assert(sizeof(BattlePassRewardService_SendReceiveCycleRewardsReq) == 0x000018, "Wrong size on BattlePassRewardService_SendReceiveCycleRewardsReq");
static_assert(offsetof(BattlePassRewardService_SendReceiveCycleRewardsReq, InActivityId) == 0x000000, "Member 'BattlePassRewardService_SendReceiveCycleRewardsReq::InActivityId' has a wrong offset!");
static_assert(offsetof(BattlePassRewardService_SendReceiveCycleRewardsReq, InGradeQty) == 0x000004, "Member 'BattlePassRewardService_SendReceiveCycleRewardsReq::InGradeQty' has a wrong offset!");
static_assert(offsetof(BattlePassRewardService_SendReceiveCycleRewardsReq, InRewardItems) == 0x000008, "Member 'BattlePassRewardService_SendReceiveCycleRewardsReq::InRewardItems' has a wrong offset!");

// Function TGFGame.BattlePassRewardService.SendReceiveRewardsReq
// 0x0018 (0x0018 - 0x0000)
struct BattlePassRewardService_SendReceiveRewardsReq final
{
public:
	int32                                         InActivityId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRewardId;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTGFItemOffset>                 InRewardItems;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardService_SendReceiveRewardsReq) == 0x000008, "Wrong alignment on BattlePassRewardService_SendReceiveRewardsReq");
static_assert(sizeof(BattlePassRewardService_SendReceiveRewardsReq) == 0x000018, "Wrong size on BattlePassRewardService_SendReceiveRewardsReq");
static_assert(offsetof(BattlePassRewardService_SendReceiveRewardsReq, InActivityId) == 0x000000, "Member 'BattlePassRewardService_SendReceiveRewardsReq::InActivityId' has a wrong offset!");
static_assert(offsetof(BattlePassRewardService_SendReceiveRewardsReq, InRewardId) == 0x000004, "Member 'BattlePassRewardService_SendReceiveRewardsReq::InRewardId' has a wrong offset!");
static_assert(offsetof(BattlePassRewardService_SendReceiveRewardsReq, InRewardItems) == 0x000008, "Member 'BattlePassRewardService_SendReceiveRewardsReq::InRewardItems' has a wrong offset!");

// Function TGFGame.BattlePassTaskService.SendRefreshQuestReq
// 0x0008 (0x0008 - 0x0000)
struct BattlePassTaskService_SendRefreshQuestReq final
{
public:
	int32                                         InActivityId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InQuestId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassTaskService_SendRefreshQuestReq) == 0x000004, "Wrong alignment on BattlePassTaskService_SendRefreshQuestReq");
static_assert(sizeof(BattlePassTaskService_SendRefreshQuestReq) == 0x000008, "Wrong size on BattlePassTaskService_SendRefreshQuestReq");
static_assert(offsetof(BattlePassTaskService_SendRefreshQuestReq, InActivityId) == 0x000000, "Member 'BattlePassTaskService_SendRefreshQuestReq::InActivityId' has a wrong offset!");
static_assert(offsetof(BattlePassTaskService_SendRefreshQuestReq, InQuestId) == 0x000004, "Member 'BattlePassTaskService_SendRefreshQuestReq::InQuestId' has a wrong offset!");

// Function TGFGame.BattlePassTaskService.SetDailyTaskToastShowed
// 0x0001 (0x0001 - 0x0000)
struct BattlePassTaskService_SetDailyTaskToastShowed final
{
public:
	bool                                          bShowed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassTaskService_SetDailyTaskToastShowed) == 0x000001, "Wrong alignment on BattlePassTaskService_SetDailyTaskToastShowed");
static_assert(sizeof(BattlePassTaskService_SetDailyTaskToastShowed) == 0x000001, "Wrong size on BattlePassTaskService_SetDailyTaskToastShowed");
static_assert(offsetof(BattlePassTaskService_SetDailyTaskToastShowed, bShowed) == 0x000000, "Member 'BattlePassTaskService_SetDailyTaskToastShowed::bShowed' has a wrong offset!");

// Function TGFGame.BattlePassTaskService.GetDailyTaskToastShowed
// 0x0001 (0x0001 - 0x0000)
struct BattlePassTaskService_GetDailyTaskToastShowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassTaskService_GetDailyTaskToastShowed) == 0x000001, "Wrong alignment on BattlePassTaskService_GetDailyTaskToastShowed");
static_assert(sizeof(BattlePassTaskService_GetDailyTaskToastShowed) == 0x000001, "Wrong size on BattlePassTaskService_GetDailyTaskToastShowed");
static_assert(offsetof(BattlePassTaskService_GetDailyTaskToastShowed, ReturnValue) == 0x000000, "Member 'BattlePassTaskService_GetDailyTaskToastShowed::ReturnValue' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.GetGlobalUserInfo
// 0x0010 (0x0010 - 0x0000)
struct UserRoleCacheService_GetGlobalUserInfo final
{
public:
	struct FGlobalUserKey                         GlobalUserKey;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGlobalUserInfo*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_GetGlobalUserInfo) == 0x000008, "Wrong alignment on UserRoleCacheService_GetGlobalUserInfo");
static_assert(sizeof(UserRoleCacheService_GetGlobalUserInfo) == 0x000010, "Wrong size on UserRoleCacheService_GetGlobalUserInfo");
static_assert(offsetof(UserRoleCacheService_GetGlobalUserInfo, GlobalUserKey) == 0x000000, "Member 'UserRoleCacheService_GetGlobalUserInfo::GlobalUserKey' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetGlobalUserInfo, ReturnValue) == 0x000008, "Member 'UserRoleCacheService_GetGlobalUserInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.GetRoleInfoByKey
// 0x0020 (0x0020 - 0x0000)
struct UserRoleCacheService_GetRoleInfoByKey final
{
public:
	struct FRoleKey                               RoleKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustValid;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URoleInfo*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_GetRoleInfoByKey) == 0x000008, "Wrong alignment on UserRoleCacheService_GetRoleInfoByKey");
static_assert(sizeof(UserRoleCacheService_GetRoleInfoByKey) == 0x000020, "Wrong size on UserRoleCacheService_GetRoleInfoByKey");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoByKey, RoleKey) == 0x000000, "Member 'UserRoleCacheService_GetRoleInfoByKey::RoleKey' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoByKey, bMustValid) == 0x000010, "Member 'UserRoleCacheService_GetRoleInfoByKey::bMustValid' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoByKey, ReturnValue) == 0x000018, "Member 'UserRoleCacheService_GetRoleInfoByKey::ReturnValue' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.GetRoleInfoCallbackHandler
// 0x0020 (0x0020 - 0x0000)
struct UserRoleCacheService_GetRoleInfoCallbackHandler final
{
public:
	struct FRoleKey                               RoleKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubscribe;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_GetRoleInfoCallbackHandler) == 0x000008, "Wrong alignment on UserRoleCacheService_GetRoleInfoCallbackHandler");
static_assert(sizeof(UserRoleCacheService_GetRoleInfoCallbackHandler) == 0x000020, "Wrong size on UserRoleCacheService_GetRoleInfoCallbackHandler");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoCallbackHandler, RoleKey) == 0x000000, "Member 'UserRoleCacheService_GetRoleInfoCallbackHandler::RoleKey' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoCallbackHandler, bIsSubscribe) == 0x000010, "Member 'UserRoleCacheService_GetRoleInfoCallbackHandler::bIsSubscribe' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoCallbackHandler, ReturnValue) == 0x000018, "Member 'UserRoleCacheService_GetRoleInfoCallbackHandler::ReturnValue' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.GetRoleInfoMapByKeySet
// 0x00A8 (0x00A8 - 0x0000)
struct UserRoleCacheService_GetRoleInfoMapByKeySet final
{
public:
	TSet<struct FRoleKey>                         RoleKeySet;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMustValid;                                        // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutAllValid;                                      // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FRoleKey, class URoleInfo*>       ReturnValue;                                       // 0x0058(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_GetRoleInfoMapByKeySet) == 0x000008, "Wrong alignment on UserRoleCacheService_GetRoleInfoMapByKeySet");
static_assert(sizeof(UserRoleCacheService_GetRoleInfoMapByKeySet) == 0x0000A8, "Wrong size on UserRoleCacheService_GetRoleInfoMapByKeySet");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoMapByKeySet, RoleKeySet) == 0x000000, "Member 'UserRoleCacheService_GetRoleInfoMapByKeySet::RoleKeySet' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoMapByKeySet, bMustValid) == 0x000050, "Member 'UserRoleCacheService_GetRoleInfoMapByKeySet::bMustValid' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoMapByKeySet, bOutAllValid) == 0x000051, "Member 'UserRoleCacheService_GetRoleInfoMapByKeySet::bOutAllValid' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoMapByKeySet, ReturnValue) == 0x000058, "Member 'UserRoleCacheService_GetRoleInfoMapByKeySet::ReturnValue' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.GetRoleInfoMapCallbackHandler
// 0x0058 (0x0058 - 0x0000)
struct UserRoleCacheService_GetRoleInfoMapCallbackHandler final
{
public:
	TSet<struct FRoleKey>                         RoleKeySet;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_GetRoleInfoMapCallbackHandler) == 0x000008, "Wrong alignment on UserRoleCacheService_GetRoleInfoMapCallbackHandler");
static_assert(sizeof(UserRoleCacheService_GetRoleInfoMapCallbackHandler) == 0x000058, "Wrong size on UserRoleCacheService_GetRoleInfoMapCallbackHandler");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoMapCallbackHandler, RoleKeySet) == 0x000000, "Member 'UserRoleCacheService_GetRoleInfoMapCallbackHandler::RoleKeySet' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetRoleInfoMapCallbackHandler, ReturnValue) == 0x000050, "Member 'UserRoleCacheService_GetRoleInfoMapCallbackHandler::ReturnValue' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.GetUserInfoByKey
// 0x0020 (0x0020 - 0x0000)
struct UserRoleCacheService_GetUserInfoByKey final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustValid;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserInfo*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_GetUserInfoByKey) == 0x000008, "Wrong alignment on UserRoleCacheService_GetUserInfoByKey");
static_assert(sizeof(UserRoleCacheService_GetUserInfoByKey) == 0x000020, "Wrong size on UserRoleCacheService_GetUserInfoByKey");
static_assert(offsetof(UserRoleCacheService_GetUserInfoByKey, UserKey) == 0x000000, "Member 'UserRoleCacheService_GetUserInfoByKey::UserKey' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetUserInfoByKey, bMustValid) == 0x000010, "Member 'UserRoleCacheService_GetUserInfoByKey::bMustValid' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetUserInfoByKey, ReturnValue) == 0x000018, "Member 'UserRoleCacheService_GetUserInfoByKey::ReturnValue' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.GetUserInfoCallbackHandler
// 0x0020 (0x0020 - 0x0000)
struct UserRoleCacheService_GetUserInfoCallbackHandler final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubscribe;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_GetUserInfoCallbackHandler) == 0x000008, "Wrong alignment on UserRoleCacheService_GetUserInfoCallbackHandler");
static_assert(sizeof(UserRoleCacheService_GetUserInfoCallbackHandler) == 0x000020, "Wrong size on UserRoleCacheService_GetUserInfoCallbackHandler");
static_assert(offsetof(UserRoleCacheService_GetUserInfoCallbackHandler, UserKey) == 0x000000, "Member 'UserRoleCacheService_GetUserInfoCallbackHandler::UserKey' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetUserInfoCallbackHandler, bIsSubscribe) == 0x000010, "Member 'UserRoleCacheService_GetUserInfoCallbackHandler::bIsSubscribe' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetUserInfoCallbackHandler, ReturnValue) == 0x000018, "Member 'UserRoleCacheService_GetUserInfoCallbackHandler::ReturnValue' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.GetUserInfoMapByKeySet
// 0x00A8 (0x00A8 - 0x0000)
struct UserRoleCacheService_GetUserInfoMapByKeySet final
{
public:
	TSet<struct FUserKey>                         UserKeySet;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMustValid;                                        // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutAllValid;                                      // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FUserKey, class UUserInfo*>       ReturnValue;                                       // 0x0058(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_GetUserInfoMapByKeySet) == 0x000008, "Wrong alignment on UserRoleCacheService_GetUserInfoMapByKeySet");
static_assert(sizeof(UserRoleCacheService_GetUserInfoMapByKeySet) == 0x0000A8, "Wrong size on UserRoleCacheService_GetUserInfoMapByKeySet");
static_assert(offsetof(UserRoleCacheService_GetUserInfoMapByKeySet, UserKeySet) == 0x000000, "Member 'UserRoleCacheService_GetUserInfoMapByKeySet::UserKeySet' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetUserInfoMapByKeySet, bMustValid) == 0x000050, "Member 'UserRoleCacheService_GetUserInfoMapByKeySet::bMustValid' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetUserInfoMapByKeySet, bOutAllValid) == 0x000051, "Member 'UserRoleCacheService_GetUserInfoMapByKeySet::bOutAllValid' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetUserInfoMapByKeySet, ReturnValue) == 0x000058, "Member 'UserRoleCacheService_GetUserInfoMapByKeySet::ReturnValue' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.GetUserInfoMapCallbackHandler
// 0x0058 (0x0058 - 0x0000)
struct UserRoleCacheService_GetUserInfoMapCallbackHandler final
{
public:
	TSet<struct FUserKey>                         UserKeySet;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_GetUserInfoMapCallbackHandler) == 0x000008, "Wrong alignment on UserRoleCacheService_GetUserInfoMapCallbackHandler");
static_assert(sizeof(UserRoleCacheService_GetUserInfoMapCallbackHandler) == 0x000058, "Wrong size on UserRoleCacheService_GetUserInfoMapCallbackHandler");
static_assert(offsetof(UserRoleCacheService_GetUserInfoMapCallbackHandler, UserKeySet) == 0x000000, "Member 'UserRoleCacheService_GetUserInfoMapCallbackHandler::UserKeySet' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_GetUserInfoMapCallbackHandler, ReturnValue) == 0x000050, "Member 'UserRoleCacheService_GetUserInfoMapCallbackHandler::ReturnValue' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.Lua_AppearanceCaptureFinish
// 0x0010 (0x0010 - 0x0000)
struct UserRoleCacheService_Lua_AppearanceCaptureFinish final
{
public:
	int64                                         RoleGuid;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AppearanceTexture;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_Lua_AppearanceCaptureFinish) == 0x000008, "Wrong alignment on UserRoleCacheService_Lua_AppearanceCaptureFinish");
static_assert(sizeof(UserRoleCacheService_Lua_AppearanceCaptureFinish) == 0x000010, "Wrong size on UserRoleCacheService_Lua_AppearanceCaptureFinish");
static_assert(offsetof(UserRoleCacheService_Lua_AppearanceCaptureFinish, RoleGuid) == 0x000000, "Member 'UserRoleCacheService_Lua_AppearanceCaptureFinish::RoleGuid' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_Lua_AppearanceCaptureFinish, AppearanceTexture) == 0x000008, "Member 'UserRoleCacheService_Lua_AppearanceCaptureFinish::AppearanceTexture' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.Lua_ExecuteUpdateEvent
// 0x0008 (0x0008 - 0x0000)
struct UserRoleCacheService_Lua_ExecuteUpdateEvent final
{
public:
	int64                                         UpdateHandler;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_Lua_ExecuteUpdateEvent) == 0x000008, "Wrong alignment on UserRoleCacheService_Lua_ExecuteUpdateEvent");
static_assert(sizeof(UserRoleCacheService_Lua_ExecuteUpdateEvent) == 0x000008, "Wrong size on UserRoleCacheService_Lua_ExecuteUpdateEvent");
static_assert(offsetof(UserRoleCacheService_Lua_ExecuteUpdateEvent, UpdateHandler) == 0x000000, "Member 'UserRoleCacheService_Lua_ExecuteUpdateEvent::UpdateHandler' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.OnAppearanceTextureCaptureFinish
// 0x0010 (0x0010 - 0x0000)
struct UserRoleCacheService_OnAppearanceTextureCaptureFinish final
{
public:
	int64                                         RoleGuid;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SlateBrush;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_OnAppearanceTextureCaptureFinish) == 0x000008, "Wrong alignment on UserRoleCacheService_OnAppearanceTextureCaptureFinish");
static_assert(sizeof(UserRoleCacheService_OnAppearanceTextureCaptureFinish) == 0x000010, "Wrong size on UserRoleCacheService_OnAppearanceTextureCaptureFinish");
static_assert(offsetof(UserRoleCacheService_OnAppearanceTextureCaptureFinish, RoleGuid) == 0x000000, "Member 'UserRoleCacheService_OnAppearanceTextureCaptureFinish::RoleGuid' has a wrong offset!");
static_assert(offsetof(UserRoleCacheService_OnAppearanceTextureCaptureFinish, SlateBrush) == 0x000008, "Member 'UserRoleCacheService_OnAppearanceTextureCaptureFinish::SlateBrush' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.OnHostPlayerEquipChange
// 0x0008 (0x0008 - 0x0000)
struct UserRoleCacheService_OnHostPlayerEquipChange final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_OnHostPlayerEquipChange) == 0x000008, "Wrong alignment on UserRoleCacheService_OnHostPlayerEquipChange");
static_assert(sizeof(UserRoleCacheService_OnHostPlayerEquipChange) == 0x000008, "Wrong size on UserRoleCacheService_OnHostPlayerEquipChange");
static_assert(offsetof(UserRoleCacheService_OnHostPlayerEquipChange, Args) == 0x000000, "Member 'UserRoleCacheService_OnHostPlayerEquipChange::Args' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.OnUpdateItemsNoti
// 0x0008 (0x0008 - 0x0000)
struct UserRoleCacheService_OnUpdateItemsNoti final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_OnUpdateItemsNoti) == 0x000008, "Wrong alignment on UserRoleCacheService_OnUpdateItemsNoti");
static_assert(sizeof(UserRoleCacheService_OnUpdateItemsNoti) == 0x000008, "Wrong size on UserRoleCacheService_OnUpdateItemsNoti");
static_assert(offsetof(UserRoleCacheService_OnUpdateItemsNoti, Args) == 0x000000, "Member 'UserRoleCacheService_OnUpdateItemsNoti::Args' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.RemoveUpdateHandler
// 0x0008 (0x0008 - 0x0000)
struct UserRoleCacheService_RemoveUpdateHandler final
{
public:
	int64                                         UpdateHandler;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_RemoveUpdateHandler) == 0x000008, "Wrong alignment on UserRoleCacheService_RemoveUpdateHandler");
static_assert(sizeof(UserRoleCacheService_RemoveUpdateHandler) == 0x000008, "Wrong size on UserRoleCacheService_RemoveUpdateHandler");
static_assert(offsetof(UserRoleCacheService_RemoveUpdateHandler, UpdateHandler) == 0x000000, "Member 'UserRoleCacheService_RemoveUpdateHandler::UpdateHandler' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.ResetRoleInfoByKey
// 0x0010 (0x0010 - 0x0000)
struct UserRoleCacheService_ResetRoleInfoByKey final
{
public:
	struct FRoleKey                               RoleKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_ResetRoleInfoByKey) == 0x000008, "Wrong alignment on UserRoleCacheService_ResetRoleInfoByKey");
static_assert(sizeof(UserRoleCacheService_ResetRoleInfoByKey) == 0x000010, "Wrong size on UserRoleCacheService_ResetRoleInfoByKey");
static_assert(offsetof(UserRoleCacheService_ResetRoleInfoByKey, RoleKey) == 0x000000, "Member 'UserRoleCacheService_ResetRoleInfoByKey::RoleKey' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.ResetUserInfoByKey
// 0x0010 (0x0010 - 0x0000)
struct UserRoleCacheService_ResetUserInfoByKey final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_ResetUserInfoByKey) == 0x000008, "Wrong alignment on UserRoleCacheService_ResetUserInfoByKey");
static_assert(sizeof(UserRoleCacheService_ResetUserInfoByKey) == 0x000010, "Wrong size on UserRoleCacheService_ResetUserInfoByKey");
static_assert(offsetof(UserRoleCacheService_ResetUserInfoByKey, UserKey) == 0x000000, "Member 'UserRoleCacheService_ResetUserInfoByKey::UserKey' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.GetSelfRoleKey
// 0x0010 (0x0010 - 0x0000)
struct UserRoleCacheService_GetSelfRoleKey final
{
public:
	struct FRoleKey                               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_GetSelfRoleKey) == 0x000008, "Wrong alignment on UserRoleCacheService_GetSelfRoleKey");
static_assert(sizeof(UserRoleCacheService_GetSelfRoleKey) == 0x000010, "Wrong size on UserRoleCacheService_GetSelfRoleKey");
static_assert(offsetof(UserRoleCacheService_GetSelfRoleKey, ReturnValue) == 0x000000, "Member 'UserRoleCacheService_GetSelfRoleKey::ReturnValue' has a wrong offset!");

// Function TGFGame.UserRoleCacheService.GetSelfUserKey
// 0x0010 (0x0010 - 0x0000)
struct UserRoleCacheService_GetSelfUserKey final
{
public:
	struct FUserKey                               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserRoleCacheService_GetSelfUserKey) == 0x000008, "Wrong alignment on UserRoleCacheService_GetSelfUserKey");
static_assert(sizeof(UserRoleCacheService_GetSelfUserKey) == 0x000010, "Wrong size on UserRoleCacheService_GetSelfUserKey");
static_assert(offsetof(UserRoleCacheService_GetSelfUserKey, ReturnValue) == 0x000000, "Member 'UserRoleCacheService_GetSelfUserKey::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFBattlePassTaskInfo.AddProgressValue
// 0x0010 (0x0010 - 0x0000)
struct TGFBattlePassTaskInfo_AddProgressValue final
{
public:
	int32                                         ProgressType;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFBattlePassTaskInfo_AddProgressValue) == 0x000008, "Wrong alignment on TGFBattlePassTaskInfo_AddProgressValue");
static_assert(sizeof(TGFBattlePassTaskInfo_AddProgressValue) == 0x000010, "Wrong size on TGFBattlePassTaskInfo_AddProgressValue");
static_assert(offsetof(TGFBattlePassTaskInfo_AddProgressValue, ProgressType) == 0x000000, "Member 'TGFBattlePassTaskInfo_AddProgressValue::ProgressType' has a wrong offset!");
static_assert(offsetof(TGFBattlePassTaskInfo_AddProgressValue, Value) == 0x000008, "Member 'TGFBattlePassTaskInfo_AddProgressValue::Value' has a wrong offset!");

// Function TGFGame.UnlockBlueprintLibrary.GetModuleBannedMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockBlueprintLibrary_GetModuleBannedMessage final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockBlueprintLibrary_GetModuleBannedMessage) == 0x000008, "Wrong alignment on UnlockBlueprintLibrary_GetModuleBannedMessage");
static_assert(sizeof(UnlockBlueprintLibrary_GetModuleBannedMessage) == 0x000020, "Wrong size on UnlockBlueprintLibrary_GetModuleBannedMessage");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleBannedMessage, ModuleId) == 0x000000, "Member 'UnlockBlueprintLibrary_GetModuleBannedMessage::ModuleId' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleBannedMessage, ReturnValue) == 0x000008, "Member 'UnlockBlueprintLibrary_GetModuleBannedMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockBlueprintLibrary.GetModuleCircularNextTimeMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockBlueprintLibrary_GetModuleCircularNextTimeMessage final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockBlueprintLibrary_GetModuleCircularNextTimeMessage) == 0x000008, "Wrong alignment on UnlockBlueprintLibrary_GetModuleCircularNextTimeMessage");
static_assert(sizeof(UnlockBlueprintLibrary_GetModuleCircularNextTimeMessage) == 0x000020, "Wrong size on UnlockBlueprintLibrary_GetModuleCircularNextTimeMessage");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleCircularNextTimeMessage, ModuleId) == 0x000000, "Member 'UnlockBlueprintLibrary_GetModuleCircularNextTimeMessage::ModuleId' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleCircularNextTimeMessage, ReturnValue) == 0x000008, "Member 'UnlockBlueprintLibrary_GetModuleCircularNextTimeMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockBlueprintLibrary.GetModuleGlobalForbidMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockBlueprintLibrary_GetModuleGlobalForbidMessage final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockBlueprintLibrary_GetModuleGlobalForbidMessage) == 0x000008, "Wrong alignment on UnlockBlueprintLibrary_GetModuleGlobalForbidMessage");
static_assert(sizeof(UnlockBlueprintLibrary_GetModuleGlobalForbidMessage) == 0x000020, "Wrong size on UnlockBlueprintLibrary_GetModuleGlobalForbidMessage");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleGlobalForbidMessage, ModuleId) == 0x000000, "Member 'UnlockBlueprintLibrary_GetModuleGlobalForbidMessage::ModuleId' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleGlobalForbidMessage, ReturnValue) == 0x000008, "Member 'UnlockBlueprintLibrary_GetModuleGlobalForbidMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockBlueprintLibrary.GetModuleLockMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockBlueprintLibrary_GetModuleLockMessage final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockBlueprintLibrary_GetModuleLockMessage) == 0x000008, "Wrong alignment on UnlockBlueprintLibrary_GetModuleLockMessage");
static_assert(sizeof(UnlockBlueprintLibrary_GetModuleLockMessage) == 0x000020, "Wrong size on UnlockBlueprintLibrary_GetModuleLockMessage");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleLockMessage, ModuleId) == 0x000000, "Member 'UnlockBlueprintLibrary_GetModuleLockMessage::ModuleId' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleLockMessage, ReturnValue) == 0x000008, "Member 'UnlockBlueprintLibrary_GetModuleLockMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockBlueprintLibrary.GetModuleNextTimeMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockBlueprintLibrary_GetModuleNextTimeMessage final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockBlueprintLibrary_GetModuleNextTimeMessage) == 0x000008, "Wrong alignment on UnlockBlueprintLibrary_GetModuleNextTimeMessage");
static_assert(sizeof(UnlockBlueprintLibrary_GetModuleNextTimeMessage) == 0x000020, "Wrong size on UnlockBlueprintLibrary_GetModuleNextTimeMessage");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleNextTimeMessage, ModuleId) == 0x000000, "Member 'UnlockBlueprintLibrary_GetModuleNextTimeMessage::ModuleId' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleNextTimeMessage, ReturnValue) == 0x000008, "Member 'UnlockBlueprintLibrary_GetModuleNextTimeMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockBlueprintLibrary.GetModuleTimeLockMessage
// 0x0020 (0x0020 - 0x0000)
struct UnlockBlueprintLibrary_GetModuleTimeLockMessage final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnlockBlueprintLibrary_GetModuleTimeLockMessage) == 0x000008, "Wrong alignment on UnlockBlueprintLibrary_GetModuleTimeLockMessage");
static_assert(sizeof(UnlockBlueprintLibrary_GetModuleTimeLockMessage) == 0x000020, "Wrong size on UnlockBlueprintLibrary_GetModuleTimeLockMessage");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleTimeLockMessage, ModuleId) == 0x000000, "Member 'UnlockBlueprintLibrary_GetModuleTimeLockMessage::ModuleId' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_GetModuleTimeLockMessage, ReturnValue) == 0x000008, "Member 'UnlockBlueprintLibrary_GetModuleTimeLockMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockBlueprintLibrary.IsModuleAllowed
// 0x0008 (0x0008 - 0x0000)
struct UnlockBlueprintLibrary_IsModuleAllowed final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlert;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToast;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnlockBlueprintLibrary_IsModuleAllowed) == 0x000004, "Wrong alignment on UnlockBlueprintLibrary_IsModuleAllowed");
static_assert(sizeof(UnlockBlueprintLibrary_IsModuleAllowed) == 0x000008, "Wrong size on UnlockBlueprintLibrary_IsModuleAllowed");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleAllowed, ModuleId) == 0x000000, "Member 'UnlockBlueprintLibrary_IsModuleAllowed::ModuleId' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleAllowed, bIsAlert) == 0x000004, "Member 'UnlockBlueprintLibrary_IsModuleAllowed::bIsAlert' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleAllowed, bIsToast) == 0x000005, "Member 'UnlockBlueprintLibrary_IsModuleAllowed::bIsToast' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleAllowed, ReturnValue) == 0x000006, "Member 'UnlockBlueprintLibrary_IsModuleAllowed::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockBlueprintLibrary.IsModuleBanned
// 0x0008 (0x0008 - 0x0000)
struct UnlockBlueprintLibrary_IsModuleBanned final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlert;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToast;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnlockBlueprintLibrary_IsModuleBanned) == 0x000004, "Wrong alignment on UnlockBlueprintLibrary_IsModuleBanned");
static_assert(sizeof(UnlockBlueprintLibrary_IsModuleBanned) == 0x000008, "Wrong size on UnlockBlueprintLibrary_IsModuleBanned");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleBanned, ModuleId) == 0x000000, "Member 'UnlockBlueprintLibrary_IsModuleBanned::ModuleId' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleBanned, bIsAlert) == 0x000004, "Member 'UnlockBlueprintLibrary_IsModuleBanned::bIsAlert' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleBanned, bIsToast) == 0x000005, "Member 'UnlockBlueprintLibrary_IsModuleBanned::bIsToast' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleBanned, ReturnValue) == 0x000006, "Member 'UnlockBlueprintLibrary_IsModuleBanned::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockBlueprintLibrary.IsModuleGlobalForbid
// 0x0008 (0x0008 - 0x0000)
struct UnlockBlueprintLibrary_IsModuleGlobalForbid final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlert;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToast;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnlockBlueprintLibrary_IsModuleGlobalForbid) == 0x000004, "Wrong alignment on UnlockBlueprintLibrary_IsModuleGlobalForbid");
static_assert(sizeof(UnlockBlueprintLibrary_IsModuleGlobalForbid) == 0x000008, "Wrong size on UnlockBlueprintLibrary_IsModuleGlobalForbid");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleGlobalForbid, ModuleId) == 0x000000, "Member 'UnlockBlueprintLibrary_IsModuleGlobalForbid::ModuleId' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleGlobalForbid, bIsAlert) == 0x000004, "Member 'UnlockBlueprintLibrary_IsModuleGlobalForbid::bIsAlert' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleGlobalForbid, bIsToast) == 0x000005, "Member 'UnlockBlueprintLibrary_IsModuleGlobalForbid::bIsToast' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleGlobalForbid, ReturnValue) == 0x000006, "Member 'UnlockBlueprintLibrary_IsModuleGlobalForbid::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockBlueprintLibrary.IsModuleLock
// 0x0008 (0x0008 - 0x0000)
struct UnlockBlueprintLibrary_IsModuleLock final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlert;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToast;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnlockBlueprintLibrary_IsModuleLock) == 0x000004, "Wrong alignment on UnlockBlueprintLibrary_IsModuleLock");
static_assert(sizeof(UnlockBlueprintLibrary_IsModuleLock) == 0x000008, "Wrong size on UnlockBlueprintLibrary_IsModuleLock");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleLock, ModuleId) == 0x000000, "Member 'UnlockBlueprintLibrary_IsModuleLock::ModuleId' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleLock, bIsAlert) == 0x000004, "Member 'UnlockBlueprintLibrary_IsModuleLock::bIsAlert' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleLock, bIsToast) == 0x000005, "Member 'UnlockBlueprintLibrary_IsModuleLock::bIsToast' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleLock, ReturnValue) == 0x000006, "Member 'UnlockBlueprintLibrary_IsModuleLock::ReturnValue' has a wrong offset!");

// Function TGFGame.UnlockBlueprintLibrary.IsModuleTimeLock
// 0x0008 (0x0008 - 0x0000)
struct UnlockBlueprintLibrary_IsModuleTimeLock final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlert;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToast;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnlockBlueprintLibrary_IsModuleTimeLock) == 0x000004, "Wrong alignment on UnlockBlueprintLibrary_IsModuleTimeLock");
static_assert(sizeof(UnlockBlueprintLibrary_IsModuleTimeLock) == 0x000008, "Wrong size on UnlockBlueprintLibrary_IsModuleTimeLock");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleTimeLock, ModuleId) == 0x000000, "Member 'UnlockBlueprintLibrary_IsModuleTimeLock::ModuleId' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleTimeLock, bIsAlert) == 0x000004, "Member 'UnlockBlueprintLibrary_IsModuleTimeLock::bIsAlert' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleTimeLock, bIsToast) == 0x000005, "Member 'UnlockBlueprintLibrary_IsModuleTimeLock::bIsToast' has a wrong offset!");
static_assert(offsetof(UnlockBlueprintLibrary_IsModuleTimeLock, ReturnValue) == 0x000006, "Member 'UnlockBlueprintLibrary_IsModuleTimeLock::ReturnValue' has a wrong offset!");

// Function TGFGame.BattleService.StartBeginnerLevel
// 0x000C (0x000C - 0x0000)
struct BattleService_StartBeginnerLevel final
{
public:
	class FName                                   MapName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnterFromHall;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleService_StartBeginnerLevel) == 0x000004, "Wrong alignment on BattleService_StartBeginnerLevel");
static_assert(sizeof(BattleService_StartBeginnerLevel) == 0x00000C, "Wrong size on BattleService_StartBeginnerLevel");
static_assert(offsetof(BattleService_StartBeginnerLevel, MapName) == 0x000000, "Member 'BattleService_StartBeginnerLevel::MapName' has a wrong offset!");
static_assert(offsetof(BattleService_StartBeginnerLevel, EnterFromHall) == 0x000008, "Member 'BattleService_StartBeginnerLevel::EnterFromHall' has a wrong offset!");

// Function TGFGame.BattleService.StartLocalBattle
// 0x0008 (0x0008 - 0x0000)
struct BattleService_StartLocalBattle final
{
public:
	class FName                                   MapName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleService_StartLocalBattle) == 0x000004, "Wrong alignment on BattleService_StartLocalBattle");
static_assert(sizeof(BattleService_StartLocalBattle) == 0x000008, "Wrong size on BattleService_StartLocalBattle");
static_assert(offsetof(BattleService_StartLocalBattle, MapName) == 0x000000, "Member 'BattleService_StartLocalBattle::MapName' has a wrong offset!");

// Function TGFGame.BattleService.StartLocalFlawlessBattle
// 0x0014 (0x0014 - 0x0000)
struct BattleService_StartLocalFlawlessBattle final
{
public:
	class FName                                   MapName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flawless;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WinCount;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RewardsAvailable;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleService_StartLocalFlawlessBattle) == 0x000004, "Wrong alignment on BattleService_StartLocalFlawlessBattle");
static_assert(sizeof(BattleService_StartLocalFlawlessBattle) == 0x000014, "Wrong size on BattleService_StartLocalFlawlessBattle");
static_assert(offsetof(BattleService_StartLocalFlawlessBattle, MapName) == 0x000000, "Member 'BattleService_StartLocalFlawlessBattle::MapName' has a wrong offset!");
static_assert(offsetof(BattleService_StartLocalFlawlessBattle, Flawless) == 0x000008, "Member 'BattleService_StartLocalFlawlessBattle::Flawless' has a wrong offset!");
static_assert(offsetof(BattleService_StartLocalFlawlessBattle, WinCount) == 0x00000C, "Member 'BattleService_StartLocalFlawlessBattle::WinCount' has a wrong offset!");
static_assert(offsetof(BattleService_StartLocalFlawlessBattle, RewardsAvailable) == 0x000010, "Member 'BattleService_StartLocalFlawlessBattle::RewardsAvailable' has a wrong offset!");

// Function TGFGame.UserInfo.GetIsExpired
// 0x0001 (0x0001 - 0x0000)
struct UserInfo_GetIsExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfo_GetIsExpired) == 0x000001, "Wrong alignment on UserInfo_GetIsExpired");
static_assert(sizeof(UserInfo_GetIsExpired) == 0x000001, "Wrong size on UserInfo_GetIsExpired");
static_assert(offsetof(UserInfo_GetIsExpired, ReturnValue) == 0x000000, "Member 'UserInfo_GetIsExpired::ReturnValue' has a wrong offset!");

// Function TGFGame.UserInfo.GetIsUnregistered
// 0x0001 (0x0001 - 0x0000)
struct UserInfo_GetIsUnregistered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfo_GetIsUnregistered) == 0x000001, "Wrong alignment on UserInfo_GetIsUnregistered");
static_assert(sizeof(UserInfo_GetIsUnregistered) == 0x000001, "Wrong size on UserInfo_GetIsUnregistered");
static_assert(offsetof(UserInfo_GetIsUnregistered, ReturnValue) == 0x000000, "Member 'UserInfo_GetIsUnregistered::ReturnValue' has a wrong offset!");

// Function TGFGame.UserInfo.GetIsValid
// 0x0001 (0x0001 - 0x0000)
struct UserInfo_GetIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfo_GetIsValid) == 0x000001, "Wrong alignment on UserInfo_GetIsValid");
static_assert(sizeof(UserInfo_GetIsValid) == 0x000001, "Wrong size on UserInfo_GetIsValid");
static_assert(offsetof(UserInfo_GetIsValid, ReturnValue) == 0x000000, "Member 'UserInfo_GetIsValid::ReturnValue' has a wrong offset!");

// Function TGFGame.UserInfo.GetNickname
// 0x0010 (0x0010 - 0x0000)
struct UserInfo_GetNickname final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfo_GetNickname) == 0x000008, "Wrong alignment on UserInfo_GetNickname");
static_assert(sizeof(UserInfo_GetNickname) == 0x000010, "Wrong size on UserInfo_GetNickname");
static_assert(offsetof(UserInfo_GetNickname, ReturnValue) == 0x000000, "Member 'UserInfo_GetNickname::ReturnValue' has a wrong offset!");

// Function TGFGame.UserInfo.GetTimeOffline
// 0x0008 (0x0008 - 0x0000)
struct UserInfo_GetTimeOffline final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfo_GetTimeOffline) == 0x000008, "Wrong alignment on UserInfo_GetTimeOffline");
static_assert(sizeof(UserInfo_GetTimeOffline) == 0x000008, "Wrong size on UserInfo_GetTimeOffline");
static_assert(offsetof(UserInfo_GetTimeOffline, ReturnValue) == 0x000000, "Member 'UserInfo_GetTimeOffline::ReturnValue' has a wrong offset!");

// Function TGFGame.BlacksmithService.DismantleEquipments
// 0x0010 (0x0010 - 0x0000)
struct BlacksmithService_DismantleEquipments final
{
public:
	TArray<struct FTGFItem>                       InEquipments;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlacksmithService_DismantleEquipments) == 0x000008, "Wrong alignment on BlacksmithService_DismantleEquipments");
static_assert(sizeof(BlacksmithService_DismantleEquipments) == 0x000010, "Wrong size on BlacksmithService_DismantleEquipments");
static_assert(offsetof(BlacksmithService_DismantleEquipments, InEquipments) == 0x000000, "Member 'BlacksmithService_DismantleEquipments::InEquipments' has a wrong offset!");

// Function TGFGame.BlacksmithService.GetRepairMaterialListEntry
// 0x0028 (0x0028 - 0x0000)
struct BlacksmithService_GetRepairMaterialListEntry final
{
public:
	TArray<struct FTGFItem>                       Equipments;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCanRepair;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTGFItemBarData*>                ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlacksmithService_GetRepairMaterialListEntry) == 0x000008, "Wrong alignment on BlacksmithService_GetRepairMaterialListEntry");
static_assert(sizeof(BlacksmithService_GetRepairMaterialListEntry) == 0x000028, "Wrong size on BlacksmithService_GetRepairMaterialListEntry");
static_assert(offsetof(BlacksmithService_GetRepairMaterialListEntry, Equipments) == 0x000000, "Member 'BlacksmithService_GetRepairMaterialListEntry::Equipments' has a wrong offset!");
static_assert(offsetof(BlacksmithService_GetRepairMaterialListEntry, bCanRepair) == 0x000010, "Member 'BlacksmithService_GetRepairMaterialListEntry::bCanRepair' has a wrong offset!");
static_assert(offsetof(BlacksmithService_GetRepairMaterialListEntry, ReturnValue) == 0x000018, "Member 'BlacksmithService_GetRepairMaterialListEntry::ReturnValue' has a wrong offset!");

// Function TGFGame.BlacksmithService.OnSwitchForgeTab
// 0x0008 (0x0008 - 0x0000)
struct BlacksmithService_OnSwitchForgeTab final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlacksmithService_OnSwitchForgeTab) == 0x000008, "Wrong alignment on BlacksmithService_OnSwitchForgeTab");
static_assert(sizeof(BlacksmithService_OnSwitchForgeTab) == 0x000008, "Wrong size on BlacksmithService_OnSwitchForgeTab");
static_assert(offsetof(BlacksmithService_OnSwitchForgeTab, Args) == 0x000000, "Member 'BlacksmithService_OnSwitchForgeTab::Args' has a wrong offset!");

// Function TGFGame.BlacksmithService.SendGearRepairReq
// 0x0010 (0x0010 - 0x0000)
struct BlacksmithService_SendGearRepairReq final
{
public:
	TArray<struct FTGFItem>                       InEquipments;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlacksmithService_SendGearRepairReq) == 0x000008, "Wrong alignment on BlacksmithService_SendGearRepairReq");
static_assert(sizeof(BlacksmithService_SendGearRepairReq) == 0x000010, "Wrong size on BlacksmithService_SendGearRepairReq");
static_assert(offsetof(BlacksmithService_SendGearRepairReq, InEquipments) == 0x000000, "Member 'BlacksmithService_SendGearRepairReq::InEquipments' has a wrong offset!");

// Function TGFGame.BlacksmithService.SetPendingTabId
// 0x0004 (0x0004 - 0x0000)
struct BlacksmithService_SetPendingTabId final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlacksmithService_SetPendingTabId) == 0x000004, "Wrong alignment on BlacksmithService_SetPendingTabId");
static_assert(sizeof(BlacksmithService_SetPendingTabId) == 0x000004, "Wrong size on BlacksmithService_SetPendingTabId");
static_assert(offsetof(BlacksmithService_SetPendingTabId, Param_Index) == 0x000000, "Member 'BlacksmithService_SetPendingTabId::Param_Index' has a wrong offset!");

// Function TGFGame.BlacksmithService.TurnDismantleState
// 0x0002 (0x0002 - 0x0000)
struct BlacksmithService_TurnDismantleState final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipQuality                              Quality;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlacksmithService_TurnDismantleState) == 0x000001, "Wrong alignment on BlacksmithService_TurnDismantleState");
static_assert(sizeof(BlacksmithService_TurnDismantleState) == 0x000002, "Wrong size on BlacksmithService_TurnDismantleState");
static_assert(offsetof(BlacksmithService_TurnDismantleState, bIsOpen) == 0x000000, "Member 'BlacksmithService_TurnDismantleState::bIsOpen' has a wrong offset!");
static_assert(offsetof(BlacksmithService_TurnDismantleState, Quality) == 0x000001, "Member 'BlacksmithService_TurnDismantleState::Quality' has a wrong offset!");

// Function TGFGame.BlacksmithService.GetOwnMaterials
// 0x0010 (0x0010 - 0x0000)
struct BlacksmithService_GetOwnMaterials final
{
public:
	TArray<class UTGFItemBarData*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlacksmithService_GetOwnMaterials) == 0x000008, "Wrong alignment on BlacksmithService_GetOwnMaterials");
static_assert(sizeof(BlacksmithService_GetOwnMaterials) == 0x000010, "Wrong size on BlacksmithService_GetOwnMaterials");
static_assert(offsetof(BlacksmithService_GetOwnMaterials, ReturnValue) == 0x000000, "Member 'BlacksmithService_GetOwnMaterials::ReturnValue' has a wrong offset!");

// Function TGFGame.BlacksmithService.GetPendingTabId
// 0x0008 (0x0008 - 0x0000)
struct BlacksmithService_GetPendingTabId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlacksmithService_GetPendingTabId) == 0x000004, "Wrong alignment on BlacksmithService_GetPendingTabId");
static_assert(sizeof(BlacksmithService_GetPendingTabId) == 0x000008, "Wrong size on BlacksmithService_GetPendingTabId");
static_assert(offsetof(BlacksmithService_GetPendingTabId, ReturnValue) == 0x000000, "Member 'BlacksmithService_GetPendingTabId::ReturnValue' has a wrong offset!");

// Function TGFGame.BlacksmithService.GetRepairMaterials
// 0x0018 (0x0018 - 0x0000)
struct BlacksmithService_GetRepairMaterials final
{
public:
	int32                                         InEquipmentId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTGFProtoTgfDItemOffset*>        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlacksmithService_GetRepairMaterials) == 0x000008, "Wrong alignment on BlacksmithService_GetRepairMaterials");
static_assert(sizeof(BlacksmithService_GetRepairMaterials) == 0x000018, "Wrong size on BlacksmithService_GetRepairMaterials");
static_assert(offsetof(BlacksmithService_GetRepairMaterials, InEquipmentId) == 0x000000, "Member 'BlacksmithService_GetRepairMaterials::InEquipmentId' has a wrong offset!");
static_assert(offsetof(BlacksmithService_GetRepairMaterials, ReturnValue) == 0x000008, "Member 'BlacksmithService_GetRepairMaterials::ReturnValue' has a wrong offset!");

// Function TGFGame.BlacksmithService.GetSlotName
// 0x0018 (0x0018 - 0x0000)
struct BlacksmithService_GetSlotName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlacksmithService_GetSlotName) == 0x000008, "Wrong alignment on BlacksmithService_GetSlotName");
static_assert(sizeof(BlacksmithService_GetSlotName) == 0x000018, "Wrong size on BlacksmithService_GetSlotName");
static_assert(offsetof(BlacksmithService_GetSlotName, ReturnValue) == 0x000000, "Member 'BlacksmithService_GetSlotName::ReturnValue' has a wrong offset!");

// Function TGFGame.BlacksmithService.GetTabId
// 0x0008 (0x0008 - 0x0000)
struct BlacksmithService_GetTabId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlacksmithService_GetTabId) == 0x000004, "Wrong alignment on BlacksmithService_GetTabId");
static_assert(sizeof(BlacksmithService_GetTabId) == 0x000008, "Wrong size on BlacksmithService_GetTabId");
static_assert(offsetof(BlacksmithService_GetTabId, ReturnValue) == 0x000000, "Member 'BlacksmithService_GetTabId::ReturnValue' has a wrong offset!");

// Function TGFGame.ChatFunctionLibrary.AddTemporaryMessage
// 0x0018 (0x0018 - 0x0000)
struct ChatFunctionLibrary_AddTemporaryMessage final
{
public:
	class FString                                 StrContent;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnChatChannelType                 ChannelType;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChatFunctionLibrary_AddTemporaryMessage) == 0x000008, "Wrong alignment on ChatFunctionLibrary_AddTemporaryMessage");
static_assert(sizeof(ChatFunctionLibrary_AddTemporaryMessage) == 0x000018, "Wrong size on ChatFunctionLibrary_AddTemporaryMessage");
static_assert(offsetof(ChatFunctionLibrary_AddTemporaryMessage, StrContent) == 0x000000, "Member 'ChatFunctionLibrary_AddTemporaryMessage::StrContent' has a wrong offset!");
static_assert(offsetof(ChatFunctionLibrary_AddTemporaryMessage, ChannelType) == 0x000010, "Member 'ChatFunctionLibrary_AddTemporaryMessage::ChannelType' has a wrong offset!");

// Function TGFGame.ChatFunctionLibrary.GetCanMinorChat
// 0x0001 (0x0001 - 0x0000)
struct ChatFunctionLibrary_GetCanMinorChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatFunctionLibrary_GetCanMinorChat) == 0x000001, "Wrong alignment on ChatFunctionLibrary_GetCanMinorChat");
static_assert(sizeof(ChatFunctionLibrary_GetCanMinorChat) == 0x000001, "Wrong size on ChatFunctionLibrary_GetCanMinorChat");
static_assert(offsetof(ChatFunctionLibrary_GetCanMinorChat, ReturnValue) == 0x000000, "Member 'ChatFunctionLibrary_GetCanMinorChat::ReturnValue' has a wrong offset!");

// Function TGFGame.ChatFunctionLibrary.GetCanMinorVoiceChat
// 0x0001 (0x0001 - 0x0000)
struct ChatFunctionLibrary_GetCanMinorVoiceChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatFunctionLibrary_GetCanMinorVoiceChat) == 0x000001, "Wrong alignment on ChatFunctionLibrary_GetCanMinorVoiceChat");
static_assert(sizeof(ChatFunctionLibrary_GetCanMinorVoiceChat) == 0x000001, "Wrong size on ChatFunctionLibrary_GetCanMinorVoiceChat");
static_assert(offsetof(ChatFunctionLibrary_GetCanMinorVoiceChat, ReturnValue) == 0x000000, "Member 'ChatFunctionLibrary_GetCanMinorVoiceChat::ReturnValue' has a wrong offset!");

// Function TGFGame.ChatService.AddTemporaryMessage
// 0x0018 (0x0018 - 0x0000)
struct ChatService_AddTemporaryMessage final
{
public:
	class FString                                 StrContent;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnChatChannelType                 ChannelType;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChatService_AddTemporaryMessage) == 0x000008, "Wrong alignment on ChatService_AddTemporaryMessage");
static_assert(sizeof(ChatService_AddTemporaryMessage) == 0x000018, "Wrong size on ChatService_AddTemporaryMessage");
static_assert(offsetof(ChatService_AddTemporaryMessage, StrContent) == 0x000000, "Member 'ChatService_AddTemporaryMessage::StrContent' has a wrong offset!");
static_assert(offsetof(ChatService_AddTemporaryMessage, ChannelType) == 0x000010, "Member 'ChatService_AddTemporaryMessage::ChannelType' has a wrong offset!");

// Function TGFGame.ChatService.EditCommitTextContent
// 0x0010 (0x0010 - 0x0000)
struct ChatService_EditCommitTextContent final
{
public:
	class FString                                 TextContent;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatService_EditCommitTextContent) == 0x000008, "Wrong alignment on ChatService_EditCommitTextContent");
static_assert(sizeof(ChatService_EditCommitTextContent) == 0x000010, "Wrong size on ChatService_EditCommitTextContent");
static_assert(offsetof(ChatService_EditCommitTextContent, TextContent) == 0x000000, "Member 'ChatService_EditCommitTextContent::TextContent' has a wrong offset!");

// Function TGFGame.ChatService.GetCanMinorChat
// 0x0001 (0x0001 - 0x0000)
struct ChatService_GetCanMinorChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatService_GetCanMinorChat) == 0x000001, "Wrong alignment on ChatService_GetCanMinorChat");
static_assert(sizeof(ChatService_GetCanMinorChat) == 0x000001, "Wrong size on ChatService_GetCanMinorChat");
static_assert(offsetof(ChatService_GetCanMinorChat, ReturnValue) == 0x000000, "Member 'ChatService_GetCanMinorChat::ReturnValue' has a wrong offset!");

// Function TGFGame.ChatService.GetCanMinorVoiceChat
// 0x0001 (0x0001 - 0x0000)
struct ChatService_GetCanMinorVoiceChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatService_GetCanMinorVoiceChat) == 0x000001, "Wrong alignment on ChatService_GetCanMinorVoiceChat");
static_assert(sizeof(ChatService_GetCanMinorVoiceChat) == 0x000001, "Wrong size on ChatService_GetCanMinorVoiceChat");
static_assert(offsetof(ChatService_GetCanMinorVoiceChat, ReturnValue) == 0x000000, "Member 'ChatService_GetCanMinorVoiceChat::ReturnValue' has a wrong offset!");

// Function TGFGame.ChatService.GetChannelInfoByChannelType
// 0x0010 (0x0010 - 0x0000)
struct ChatService_GetChannelInfoByChannelType final
{
public:
	ETGFProtoTgfEnChatChannelType                 ChannelType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChatChannelInfo*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatService_GetChannelInfoByChannelType) == 0x000008, "Wrong alignment on ChatService_GetChannelInfoByChannelType");
static_assert(sizeof(ChatService_GetChannelInfoByChannelType) == 0x000010, "Wrong size on ChatService_GetChannelInfoByChannelType");
static_assert(offsetof(ChatService_GetChannelInfoByChannelType, ChannelType) == 0x000000, "Member 'ChatService_GetChannelInfoByChannelType::ChannelType' has a wrong offset!");
static_assert(offsetof(ChatService_GetChannelInfoByChannelType, ReturnValue) == 0x000008, "Member 'ChatService_GetChannelInfoByChannelType::ReturnValue' has a wrong offset!");

// Function TGFGame.ChatService.GetChannelKeyByChannelType
// 0x000C (0x000C - 0x0000)
struct ChatService_GetChannelKeyByChannelType final
{
public:
	ETGFProtoTgfEnChatChannelType                 ChannelType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatService_GetChannelKeyByChannelType) == 0x000004, "Wrong alignment on ChatService_GetChannelKeyByChannelType");
static_assert(sizeof(ChatService_GetChannelKeyByChannelType) == 0x00000C, "Wrong size on ChatService_GetChannelKeyByChannelType");
static_assert(offsetof(ChatService_GetChannelKeyByChannelType, ChannelType) == 0x000000, "Member 'ChatService_GetChannelKeyByChannelType::ChannelType' has a wrong offset!");
static_assert(offsetof(ChatService_GetChannelKeyByChannelType, ReturnValue) == 0x000004, "Member 'ChatService_GetChannelKeyByChannelType::ReturnValue' has a wrong offset!");

// Function TGFGame.ChatService.GetDisplayMessageList
// 0x0010 (0x0010 - 0x0000)
struct ChatService_GetDisplayMessageList final
{
public:
	TArray<struct FChatMessage>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatService_GetDisplayMessageList) == 0x000008, "Wrong alignment on ChatService_GetDisplayMessageList");
static_assert(sizeof(ChatService_GetDisplayMessageList) == 0x000010, "Wrong size on ChatService_GetDisplayMessageList");
static_assert(offsetof(ChatService_GetDisplayMessageList, ReturnValue) == 0x000000, "Member 'ChatService_GetDisplayMessageList::ReturnValue' has a wrong offset!");

// Function TGFGame.ChatService.SetDisplayChannelType
// 0x0001 (0x0001 - 0x0000)
struct ChatService_SetDisplayChannelType final
{
public:
	ETGFProtoTgfEnChatChannelType                 ChannelType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatService_SetDisplayChannelType) == 0x000001, "Wrong alignment on ChatService_SetDisplayChannelType");
static_assert(sizeof(ChatService_SetDisplayChannelType) == 0x000001, "Wrong size on ChatService_SetDisplayChannelType");
static_assert(offsetof(ChatService_SetDisplayChannelType, ChannelType) == 0x000000, "Member 'ChatService_SetDisplayChannelType::ChannelType' has a wrong offset!");

// Function TGFGame.ChatService.SetSendChannelType
// 0x0001 (0x0001 - 0x0000)
struct ChatService_SetSendChannelType final
{
public:
	ETGFProtoTgfEnChatChannelType                 ChannelType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatService_SetSendChannelType) == 0x000001, "Wrong alignment on ChatService_SetSendChannelType");
static_assert(sizeof(ChatService_SetSendChannelType) == 0x000001, "Wrong size on ChatService_SetSendChannelType");
static_assert(offsetof(ChatService_SetSendChannelType, ChannelType) == 0x000000, "Member 'ChatService_SetSendChannelType::ChannelType' has a wrong offset!");

// Function TGFGame.ChatService.SetSendRoleKey
// 0x0010 (0x0010 - 0x0000)
struct ChatService_SetSendRoleKey final
{
public:
	struct FRoleKey                               RoleKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatService_SetSendRoleKey) == 0x000008, "Wrong alignment on ChatService_SetSendRoleKey");
static_assert(sizeof(ChatService_SetSendRoleKey) == 0x000010, "Wrong size on ChatService_SetSendRoleKey");
static_assert(offsetof(ChatService_SetSendRoleKey, RoleKey) == 0x000000, "Member 'ChatService_SetSendRoleKey::RoleKey' has a wrong offset!");

// Function TGFGame.ChatService.SetUpdatePanelState
// 0x0001 (0x0001 - 0x0000)
struct ChatService_SetUpdatePanelState final
{
public:
	bool                                          bIsUpdatePanel;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatService_SetUpdatePanelState) == 0x000001, "Wrong alignment on ChatService_SetUpdatePanelState");
static_assert(sizeof(ChatService_SetUpdatePanelState) == 0x000001, "Wrong size on ChatService_SetUpdatePanelState");
static_assert(offsetof(ChatService_SetUpdatePanelState, bIsUpdatePanel) == 0x000000, "Member 'ChatService_SetUpdatePanelState::bIsUpdatePanel' has a wrong offset!");

// Function TGFGame.ChatChannelInfo.CheckCanSendMessage
// 0x0002 (0x0002 - 0x0000)
struct ChatChannelInfo_CheckCanSendMessage final
{
public:
	bool                                          bSetSendTimestamp;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatChannelInfo_CheckCanSendMessage) == 0x000001, "Wrong alignment on ChatChannelInfo_CheckCanSendMessage");
static_assert(sizeof(ChatChannelInfo_CheckCanSendMessage) == 0x000002, "Wrong size on ChatChannelInfo_CheckCanSendMessage");
static_assert(offsetof(ChatChannelInfo_CheckCanSendMessage, bSetSendTimestamp) == 0x000000, "Member 'ChatChannelInfo_CheckCanSendMessage::bSetSendTimestamp' has a wrong offset!");
static_assert(offsetof(ChatChannelInfo_CheckCanSendMessage, ReturnValue) == 0x000001, "Member 'ChatChannelInfo_CheckCanSendMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.ChatChannelInfo.CheckCanShowMessage
// 0x0002 (0x0002 - 0x0000)
struct ChatChannelInfo_CheckCanShowMessage final
{
public:
	ETGFProtoTgfEnChatChannelType                 InChannelType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatChannelInfo_CheckCanShowMessage) == 0x000001, "Wrong alignment on ChatChannelInfo_CheckCanShowMessage");
static_assert(sizeof(ChatChannelInfo_CheckCanShowMessage) == 0x000002, "Wrong size on ChatChannelInfo_CheckCanShowMessage");
static_assert(offsetof(ChatChannelInfo_CheckCanShowMessage, InChannelType) == 0x000000, "Member 'ChatChannelInfo_CheckCanShowMessage::InChannelType' has a wrong offset!");
static_assert(offsetof(ChatChannelInfo_CheckCanShowMessage, ReturnValue) == 0x000001, "Member 'ChatChannelInfo_CheckCanShowMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.ChatChannelInfo.GetChannelType
// 0x0001 (0x0001 - 0x0000)
struct ChatChannelInfo_GetChannelType final
{
public:
	ETGFProtoTgfEnChatChannelType                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatChannelInfo_GetChannelType) == 0x000001, "Wrong alignment on ChatChannelInfo_GetChannelType");
static_assert(sizeof(ChatChannelInfo_GetChannelType) == 0x000001, "Wrong size on ChatChannelInfo_GetChannelType");
static_assert(offsetof(ChatChannelInfo_GetChannelType, ReturnValue) == 0x000000, "Member 'ChatChannelInfo_GetChannelType::ReturnValue' has a wrong offset!");

// Function TGFGame.ChatChannelInfo.IsValid
// 0x0001 (0x0001 - 0x0000)
struct ChatChannelInfo_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatChannelInfo_IsValid) == 0x000001, "Wrong alignment on ChatChannelInfo_IsValid");
static_assert(sizeof(ChatChannelInfo_IsValid) == 0x000001, "Wrong size on ChatChannelInfo_IsValid");
static_assert(offsetof(ChatChannelInfo_IsValid, ReturnValue) == 0x000000, "Member 'ChatChannelInfo_IsValid::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.CopyStringToClipboard
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctionLibrary_CopyStringToClipboard final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_CopyStringToClipboard) == 0x000008, "Wrong alignment on CommonFunctionLibrary_CopyStringToClipboard");
static_assert(sizeof(CommonFunctionLibrary_CopyStringToClipboard) == 0x000010, "Wrong size on CommonFunctionLibrary_CopyStringToClipboard");
static_assert(offsetof(CommonFunctionLibrary_CopyStringToClipboard, Text) == 0x000000, "Member 'CommonFunctionLibrary_CopyStringToClipboard::Text' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.DateTimeValidate
// 0x0020 (0x0020 - 0x0000)
struct CommonFunctionLibrary_DateTimeValidate final
{
public:
	int32                                         Year;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hour;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Second;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Millisecond;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctionLibrary_DateTimeValidate) == 0x000004, "Wrong alignment on CommonFunctionLibrary_DateTimeValidate");
static_assert(sizeof(CommonFunctionLibrary_DateTimeValidate) == 0x000020, "Wrong size on CommonFunctionLibrary_DateTimeValidate");
static_assert(offsetof(CommonFunctionLibrary_DateTimeValidate, Year) == 0x000000, "Member 'CommonFunctionLibrary_DateTimeValidate::Year' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_DateTimeValidate, Month) == 0x000004, "Member 'CommonFunctionLibrary_DateTimeValidate::Month' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_DateTimeValidate, Day) == 0x000008, "Member 'CommonFunctionLibrary_DateTimeValidate::Day' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_DateTimeValidate, Hour) == 0x00000C, "Member 'CommonFunctionLibrary_DateTimeValidate::Hour' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_DateTimeValidate, Minute) == 0x000010, "Member 'CommonFunctionLibrary_DateTimeValidate::Minute' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_DateTimeValidate, Second) == 0x000014, "Member 'CommonFunctionLibrary_DateTimeValidate::Second' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_DateTimeValidate, Millisecond) == 0x000018, "Member 'CommonFunctionLibrary_DateTimeValidate::Millisecond' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_DateTimeValidate, ReturnValue) == 0x00001C, "Member 'CommonFunctionLibrary_DateTimeValidate::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.GetCurveTableRowMap
// 0x0058 (0x0058 - 0x0000)
struct CommonFunctionLibrary_GetCurveTableRowMap final
{
public:
	class UCurveTable*                            CurveTable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_GetCurveTableRowMap) == 0x000008, "Wrong alignment on CommonFunctionLibrary_GetCurveTableRowMap");
static_assert(sizeof(CommonFunctionLibrary_GetCurveTableRowMap) == 0x000058, "Wrong size on CommonFunctionLibrary_GetCurveTableRowMap");
static_assert(offsetof(CommonFunctionLibrary_GetCurveTableRowMap, CurveTable) == 0x000000, "Member 'CommonFunctionLibrary_GetCurveTableRowMap::CurveTable' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetCurveTableRowMap, ReturnValue) == 0x000008, "Member 'CommonFunctionLibrary_GetCurveTableRowMap::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.GetEmitterRendererPropertiesByNiagaraComponent
// 0x0020 (0x0020 - 0x0000)
struct CommonFunctionLibrary_GetEmitterRendererPropertiesByNiagaraComponent final
{
public:
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNiagaraRendererProperties*>     RendererProperties;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctionLibrary_GetEmitterRendererPropertiesByNiagaraComponent) == 0x000008, "Wrong alignment on CommonFunctionLibrary_GetEmitterRendererPropertiesByNiagaraComponent");
static_assert(sizeof(CommonFunctionLibrary_GetEmitterRendererPropertiesByNiagaraComponent) == 0x000020, "Wrong size on CommonFunctionLibrary_GetEmitterRendererPropertiesByNiagaraComponent");
static_assert(offsetof(CommonFunctionLibrary_GetEmitterRendererPropertiesByNiagaraComponent, NiagaraComponent) == 0x000000, "Member 'CommonFunctionLibrary_GetEmitterRendererPropertiesByNiagaraComponent::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetEmitterRendererPropertiesByNiagaraComponent, RendererProperties) == 0x000008, "Member 'CommonFunctionLibrary_GetEmitterRendererPropertiesByNiagaraComponent::RendererProperties' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetEmitterRendererPropertiesByNiagaraComponent, ReturnValue) == 0x000018, "Member 'CommonFunctionLibrary_GetEmitterRendererPropertiesByNiagaraComponent::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.GetEmittersByNiagaraComponent
// 0x0018 (0x0018 - 0x0000)
struct CommonFunctionLibrary_GetEmittersByNiagaraComponent final
{
public:
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVersionedNiagaraEmitterData>   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_GetEmittersByNiagaraComponent) == 0x000008, "Wrong alignment on CommonFunctionLibrary_GetEmittersByNiagaraComponent");
static_assert(sizeof(CommonFunctionLibrary_GetEmittersByNiagaraComponent) == 0x000018, "Wrong size on CommonFunctionLibrary_GetEmittersByNiagaraComponent");
static_assert(offsetof(CommonFunctionLibrary_GetEmittersByNiagaraComponent, NiagaraComponent) == 0x000000, "Member 'CommonFunctionLibrary_GetEmittersByNiagaraComponent::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetEmittersByNiagaraComponent, ReturnValue) == 0x000008, "Member 'CommonFunctionLibrary_GetEmittersByNiagaraComponent::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.GetIsShowWeaponOperationTips
// 0x0001 (0x0001 - 0x0000)
struct CommonFunctionLibrary_GetIsShowWeaponOperationTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_GetIsShowWeaponOperationTips) == 0x000001, "Wrong alignment on CommonFunctionLibrary_GetIsShowWeaponOperationTips");
static_assert(sizeof(CommonFunctionLibrary_GetIsShowWeaponOperationTips) == 0x000001, "Wrong size on CommonFunctionLibrary_GetIsShowWeaponOperationTips");
static_assert(offsetof(CommonFunctionLibrary_GetIsShowWeaponOperationTips, ReturnValue) == 0x000000, "Member 'CommonFunctionLibrary_GetIsShowWeaponOperationTips::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.GetListViewEntryWidgetFromItem
// 0x0018 (0x0018 - 0x0000)
struct CommonFunctionLibrary_GetListViewEntryWidgetFromItem final
{
public:
	const class UListView*                        ListView;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Item;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_GetListViewEntryWidgetFromItem) == 0x000008, "Wrong alignment on CommonFunctionLibrary_GetListViewEntryWidgetFromItem");
static_assert(sizeof(CommonFunctionLibrary_GetListViewEntryWidgetFromItem) == 0x000018, "Wrong size on CommonFunctionLibrary_GetListViewEntryWidgetFromItem");
static_assert(offsetof(CommonFunctionLibrary_GetListViewEntryWidgetFromItem, ListView) == 0x000000, "Member 'CommonFunctionLibrary_GetListViewEntryWidgetFromItem::ListView' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetListViewEntryWidgetFromItem, Item) == 0x000008, "Member 'CommonFunctionLibrary_GetListViewEntryWidgetFromItem::Item' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetListViewEntryWidgetFromItem, ReturnValue) == 0x000010, "Member 'CommonFunctionLibrary_GetListViewEntryWidgetFromItem::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.GetNameFromPlayerNameData
// 0x0048 (0x0048 - 0x0000)
struct CommonFunctionLibrary_GetNameFromPlayerNameData final
{
public:
	struct FPlayerNameData                        InPlayerNameData;                                  // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsForceUseHiddenName;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_GetNameFromPlayerNameData) == 0x000008, "Wrong alignment on CommonFunctionLibrary_GetNameFromPlayerNameData");
static_assert(sizeof(CommonFunctionLibrary_GetNameFromPlayerNameData) == 0x000048, "Wrong size on CommonFunctionLibrary_GetNameFromPlayerNameData");
static_assert(offsetof(CommonFunctionLibrary_GetNameFromPlayerNameData, InPlayerNameData) == 0x000000, "Member 'CommonFunctionLibrary_GetNameFromPlayerNameData::InPlayerNameData' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetNameFromPlayerNameData, bIsForceUseHiddenName) == 0x000030, "Member 'CommonFunctionLibrary_GetNameFromPlayerNameData::bIsForceUseHiddenName' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetNameFromPlayerNameData, ReturnValue) == 0x000038, "Member 'CommonFunctionLibrary_GetNameFromPlayerNameData::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.GetNiagaraEmittersMaterialByName
// 0x0028 (0x0028 - 0x0000)
struct CommonFunctionLibrary_GetNiagaraEmittersMaterialByName final
{
public:
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MaterialName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_GetNiagaraEmittersMaterialByName) == 0x000008, "Wrong alignment on CommonFunctionLibrary_GetNiagaraEmittersMaterialByName");
static_assert(sizeof(CommonFunctionLibrary_GetNiagaraEmittersMaterialByName) == 0x000028, "Wrong size on CommonFunctionLibrary_GetNiagaraEmittersMaterialByName");
static_assert(offsetof(CommonFunctionLibrary_GetNiagaraEmittersMaterialByName, NiagaraComponent) == 0x000000, "Member 'CommonFunctionLibrary_GetNiagaraEmittersMaterialByName::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetNiagaraEmittersMaterialByName, MaterialName) == 0x000008, "Member 'CommonFunctionLibrary_GetNiagaraEmittersMaterialByName::MaterialName' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetNiagaraEmittersMaterialByName, ReturnValue) == 0x000018, "Member 'CommonFunctionLibrary_GetNiagaraEmittersMaterialByName::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.GetRoleHeadPortraitIconPath
// 0x0028 (0x0028 - 0x0000)
struct CommonFunctionLibrary_GetRoleHeadPortraitIconPath final
{
public:
	int32                                         TypeId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gender;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinColor;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_GetRoleHeadPortraitIconPath) == 0x000008, "Wrong alignment on CommonFunctionLibrary_GetRoleHeadPortraitIconPath");
static_assert(sizeof(CommonFunctionLibrary_GetRoleHeadPortraitIconPath) == 0x000028, "Wrong size on CommonFunctionLibrary_GetRoleHeadPortraitIconPath");
static_assert(offsetof(CommonFunctionLibrary_GetRoleHeadPortraitIconPath, TypeId) == 0x000000, "Member 'CommonFunctionLibrary_GetRoleHeadPortraitIconPath::TypeId' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetRoleHeadPortraitIconPath, Gender) == 0x000004, "Member 'CommonFunctionLibrary_GetRoleHeadPortraitIconPath::Gender' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetRoleHeadPortraitIconPath, FaceId) == 0x000008, "Member 'CommonFunctionLibrary_GetRoleHeadPortraitIconPath::FaceId' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetRoleHeadPortraitIconPath, SkinColor) == 0x00000C, "Member 'CommonFunctionLibrary_GetRoleHeadPortraitIconPath::SkinColor' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetRoleHeadPortraitIconPath, RowId) == 0x000010, "Member 'CommonFunctionLibrary_GetRoleHeadPortraitIconPath::RowId' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_GetRoleHeadPortraitIconPath, ReturnValue) == 0x000018, "Member 'CommonFunctionLibrary_GetRoleHeadPortraitIconPath::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.ParseGameplayAttributeFromName
// 0x0048 (0x0048 - 0x0000)
struct CommonFunctionLibrary_ParseGameplayAttributeFromName final
{
public:
	class FString                                 AttrStr;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_ParseGameplayAttributeFromName) == 0x000008, "Wrong alignment on CommonFunctionLibrary_ParseGameplayAttributeFromName");
static_assert(sizeof(CommonFunctionLibrary_ParseGameplayAttributeFromName) == 0x000048, "Wrong size on CommonFunctionLibrary_ParseGameplayAttributeFromName");
static_assert(offsetof(CommonFunctionLibrary_ParseGameplayAttributeFromName, AttrStr) == 0x000000, "Member 'CommonFunctionLibrary_ParseGameplayAttributeFromName::AttrStr' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_ParseGameplayAttributeFromName, ReturnValue) == 0x000010, "Member 'CommonFunctionLibrary_ParseGameplayAttributeFromName::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.PasteStringToClipboard
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctionLibrary_PasteStringToClipboard final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_PasteStringToClipboard) == 0x000008, "Wrong alignment on CommonFunctionLibrary_PasteStringToClipboard");
static_assert(sizeof(CommonFunctionLibrary_PasteStringToClipboard) == 0x000010, "Wrong size on CommonFunctionLibrary_PasteStringToClipboard");
static_assert(offsetof(CommonFunctionLibrary_PasteStringToClipboard, ReturnValue) == 0x000000, "Member 'CommonFunctionLibrary_PasteStringToClipboard::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.ReplaceNiagaraEmittersMaterialByDynamic
// 0x0028 (0x0028 - 0x0000)
struct CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic final
{
public:
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MaterialName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic) == 0x000008, "Wrong alignment on CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic");
static_assert(sizeof(CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic) == 0x000028, "Wrong size on CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic");
static_assert(offsetof(CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic, NiagaraComponent) == 0x000000, "Member 'CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic, MaterialName) == 0x000008, "Member 'CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic::MaterialName' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic, DynamicMaterial) == 0x000018, "Member 'CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic, ReturnValue) == 0x000020, "Member 'CommonFunctionLibrary_ReplaceNiagaraEmittersMaterialByDynamic::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.SetIsShowWeaponOperationTips
// 0x0001 (0x0001 - 0x0000)
struct CommonFunctionLibrary_SetIsShowWeaponOperationTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_SetIsShowWeaponOperationTips) == 0x000001, "Wrong alignment on CommonFunctionLibrary_SetIsShowWeaponOperationTips");
static_assert(sizeof(CommonFunctionLibrary_SetIsShowWeaponOperationTips) == 0x000001, "Wrong size on CommonFunctionLibrary_SetIsShowWeaponOperationTips");
static_assert(offsetof(CommonFunctionLibrary_SetIsShowWeaponOperationTips, ReturnValue) == 0x000000, "Member 'CommonFunctionLibrary_SetIsShowWeaponOperationTips::ReturnValue' has a wrong offset!");

// Function TGFGame.CommonFunctionLibrary.GetFirstLevelAttrData
// 0x0008 (0x0008 - 0x0000)
struct CommonFunctionLibrary_GetFirstLevelAttrData final
{
public:
	const class UTgfFirstLevelAttrDataAsset*      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctionLibrary_GetFirstLevelAttrData) == 0x000008, "Wrong alignment on CommonFunctionLibrary_GetFirstLevelAttrData");
static_assert(sizeof(CommonFunctionLibrary_GetFirstLevelAttrData) == 0x000008, "Wrong size on CommonFunctionLibrary_GetFirstLevelAttrData");
static_assert(offsetof(CommonFunctionLibrary_GetFirstLevelAttrData, ReturnValue) == 0x000000, "Member 'CommonFunctionLibrary_GetFirstLevelAttrData::ReturnValue' has a wrong offset!");

// Function TGFGame.ConfigService.IsTest
// 0x0001 (0x0001 - 0x0000)
struct ConfigService_IsTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigService_IsTest) == 0x000001, "Wrong alignment on ConfigService_IsTest");
static_assert(sizeof(ConfigService_IsTest) == 0x000001, "Wrong size on ConfigService_IsTest");
static_assert(offsetof(ConfigService_IsTest, ReturnValue) == 0x000000, "Member 'ConfigService_IsTest::ReturnValue' has a wrong offset!");

// Function TGFGame.CultureBlueprintLibrary.GetCultureNameByType
// 0x0018 (0x0018 - 0x0000)
struct CultureBlueprintLibrary_GetCultureNameByType final
{
public:
	ETGFProtoTgfEnMutlLanguageType                CultureType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CultureBlueprintLibrary_GetCultureNameByType) == 0x000008, "Wrong alignment on CultureBlueprintLibrary_GetCultureNameByType");
static_assert(sizeof(CultureBlueprintLibrary_GetCultureNameByType) == 0x000018, "Wrong size on CultureBlueprintLibrary_GetCultureNameByType");
static_assert(offsetof(CultureBlueprintLibrary_GetCultureNameByType, CultureType) == 0x000000, "Member 'CultureBlueprintLibrary_GetCultureNameByType::CultureType' has a wrong offset!");
static_assert(offsetof(CultureBlueprintLibrary_GetCultureNameByType, ReturnValue) == 0x000008, "Member 'CultureBlueprintLibrary_GetCultureNameByType::ReturnValue' has a wrong offset!");

// Function TGFGame.CultureBlueprintLibrary.GetCultureText
// 0x0068 (0x0068 - 0x0000)
struct CultureBlueprintLibrary_GetCultureText final
{
public:
	struct FCultureTextMap                        CultureTextMap;                                    // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CultureBlueprintLibrary_GetCultureText) == 0x000008, "Wrong alignment on CultureBlueprintLibrary_GetCultureText");
static_assert(sizeof(CultureBlueprintLibrary_GetCultureText) == 0x000068, "Wrong size on CultureBlueprintLibrary_GetCultureText");
static_assert(offsetof(CultureBlueprintLibrary_GetCultureText, CultureTextMap) == 0x000000, "Member 'CultureBlueprintLibrary_GetCultureText::CultureTextMap' has a wrong offset!");
static_assert(offsetof(CultureBlueprintLibrary_GetCultureText, ReturnValue) == 0x000058, "Member 'CultureBlueprintLibrary_GetCultureText::ReturnValue' has a wrong offset!");

// Function TGFGame.CultureBlueprintLibrary.GetCultureTypeByName
// 0x0018 (0x0018 - 0x0000)
struct CultureBlueprintLibrary_GetCultureTypeByName final
{
public:
	class FString                                 CultureName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnMutlLanguageType                ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CultureBlueprintLibrary_GetCultureTypeByName) == 0x000008, "Wrong alignment on CultureBlueprintLibrary_GetCultureTypeByName");
static_assert(sizeof(CultureBlueprintLibrary_GetCultureTypeByName) == 0x000018, "Wrong size on CultureBlueprintLibrary_GetCultureTypeByName");
static_assert(offsetof(CultureBlueprintLibrary_GetCultureTypeByName, CultureName) == 0x000000, "Member 'CultureBlueprintLibrary_GetCultureTypeByName::CultureName' has a wrong offset!");
static_assert(offsetof(CultureBlueprintLibrary_GetCultureTypeByName, ReturnValue) == 0x000010, "Member 'CultureBlueprintLibrary_GetCultureTypeByName::ReturnValue' has a wrong offset!");

// Function TGFGame.CultureBlueprintLibrary.GetCurrentCultureName
// 0x0010 (0x0010 - 0x0000)
struct CultureBlueprintLibrary_GetCurrentCultureName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CultureBlueprintLibrary_GetCurrentCultureName) == 0x000008, "Wrong alignment on CultureBlueprintLibrary_GetCurrentCultureName");
static_assert(sizeof(CultureBlueprintLibrary_GetCurrentCultureName) == 0x000010, "Wrong size on CultureBlueprintLibrary_GetCurrentCultureName");
static_assert(offsetof(CultureBlueprintLibrary_GetCurrentCultureName, ReturnValue) == 0x000000, "Member 'CultureBlueprintLibrary_GetCurrentCultureName::ReturnValue' has a wrong offset!");

// Function TGFGame.CultureBlueprintLibrary.GetCurrentCultureType
// 0x0001 (0x0001 - 0x0000)
struct CultureBlueprintLibrary_GetCurrentCultureType final
{
public:
	ETGFProtoTgfEnMutlLanguageType                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CultureBlueprintLibrary_GetCurrentCultureType) == 0x000001, "Wrong alignment on CultureBlueprintLibrary_GetCurrentCultureType");
static_assert(sizeof(CultureBlueprintLibrary_GetCurrentCultureType) == 0x000001, "Wrong size on CultureBlueprintLibrary_GetCurrentCultureType");
static_assert(offsetof(CultureBlueprintLibrary_GetCurrentCultureType, ReturnValue) == 0x000000, "Member 'CultureBlueprintLibrary_GetCurrentCultureType::ReturnValue' has a wrong offset!");

// Function TGFGame.CultureBlueprintLibrary.GetDefaultCultureName
// 0x0010 (0x0010 - 0x0000)
struct CultureBlueprintLibrary_GetDefaultCultureName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CultureBlueprintLibrary_GetDefaultCultureName) == 0x000008, "Wrong alignment on CultureBlueprintLibrary_GetDefaultCultureName");
static_assert(sizeof(CultureBlueprintLibrary_GetDefaultCultureName) == 0x000010, "Wrong size on CultureBlueprintLibrary_GetDefaultCultureName");
static_assert(offsetof(CultureBlueprintLibrary_GetDefaultCultureName, ReturnValue) == 0x000000, "Member 'CultureBlueprintLibrary_GetDefaultCultureName::ReturnValue' has a wrong offset!");

// Function TGFGame.DLCPacketService.HandleRainbowConfig
// 0x0008 (0x0008 - 0x0000)
struct DLCPacketService_HandleRainbowConfig final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DLCPacketService_HandleRainbowConfig) == 0x000008, "Wrong alignment on DLCPacketService_HandleRainbowConfig");
static_assert(sizeof(DLCPacketService_HandleRainbowConfig) == 0x000008, "Wrong size on DLCPacketService_HandleRainbowConfig");
static_assert(offsetof(DLCPacketService_HandleRainbowConfig, Args) == 0x000000, "Member 'DLCPacketService_HandleRainbowConfig::Args' has a wrong offset!");

// Function TGFGame.DLCPacketService.StartTimer
// 0x0008 (0x0008 - 0x0000)
struct DLCPacketService_StartTimer final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DLCPacketService_StartTimer) == 0x000008, "Wrong alignment on DLCPacketService_StartTimer");
static_assert(sizeof(DLCPacketService_StartTimer) == 0x000008, "Wrong size on DLCPacketService_StartTimer");
static_assert(offsetof(DLCPacketService_StartTimer, Args) == 0x000000, "Member 'DLCPacketService_StartTimer::Args' has a wrong offset!");

// Function TGFGame.FlawlessTrialsService.GetRecords
// 0x0010 (0x0010 - 0x0000)
struct FlawlessTrialsService_GetRecords final
{
public:
	TArray<class UTrialBattleRecordsData*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlawlessTrialsService_GetRecords) == 0x000008, "Wrong alignment on FlawlessTrialsService_GetRecords");
static_assert(sizeof(FlawlessTrialsService_GetRecords) == 0x000010, "Wrong size on FlawlessTrialsService_GetRecords");
static_assert(offsetof(FlawlessTrialsService_GetRecords, ReturnValue) == 0x000000, "Member 'FlawlessTrialsService_GetRecords::ReturnValue' has a wrong offset!");

// Function TGFGame.FlawlessTrialsService.SendTrialHistoryReq
// 0x0004 (0x0004 - 0x0000)
struct FlawlessTrialsService_SendTrialHistoryReq final
{
public:
	int32                                         ActivityId;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlawlessTrialsService_SendTrialHistoryReq) == 0x000004, "Wrong alignment on FlawlessTrialsService_SendTrialHistoryReq");
static_assert(sizeof(FlawlessTrialsService_SendTrialHistoryReq) == 0x000004, "Wrong size on FlawlessTrialsService_SendTrialHistoryReq");
static_assert(offsetof(FlawlessTrialsService_SendTrialHistoryReq, ActivityId) == 0x000000, "Member 'FlawlessTrialsService_SendTrialHistoryReq::ActivityId' has a wrong offset!");

// Function TGFGame.FlawlessTrialsService.SendTrialOpenReq
// 0x0004 (0x0004 - 0x0000)
struct FlawlessTrialsService_SendTrialOpenReq final
{
public:
	int32                                         ActivityId;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlawlessTrialsService_SendTrialOpenReq) == 0x000004, "Wrong alignment on FlawlessTrialsService_SendTrialOpenReq");
static_assert(sizeof(FlawlessTrialsService_SendTrialOpenReq) == 0x000004, "Wrong size on FlawlessTrialsService_SendTrialOpenReq");
static_assert(offsetof(FlawlessTrialsService_SendTrialOpenReq, ActivityId) == 0x000000, "Member 'FlawlessTrialsService_SendTrialOpenReq::ActivityId' has a wrong offset!");

// Function TGFGame.FlawlessTrialsService.SendTrialReceiveRewardReq
// 0x0004 (0x0004 - 0x0000)
struct FlawlessTrialsService_SendTrialReceiveRewardReq final
{
public:
	int32                                         ActivityId;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlawlessTrialsService_SendTrialReceiveRewardReq) == 0x000004, "Wrong alignment on FlawlessTrialsService_SendTrialReceiveRewardReq");
static_assert(sizeof(FlawlessTrialsService_SendTrialReceiveRewardReq) == 0x000004, "Wrong size on FlawlessTrialsService_SendTrialReceiveRewardReq");
static_assert(offsetof(FlawlessTrialsService_SendTrialReceiveRewardReq, ActivityId) == 0x000000, "Member 'FlawlessTrialsService_SendTrialReceiveRewardReq::ActivityId' has a wrong offset!");

// Function TGFGame.FlawlessTrialsService.SendTrialSelfQuitReq
// 0x0004 (0x0004 - 0x0000)
struct FlawlessTrialsService_SendTrialSelfQuitReq final
{
public:
	int32                                         ActivityId;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlawlessTrialsService_SendTrialSelfQuitReq) == 0x000004, "Wrong alignment on FlawlessTrialsService_SendTrialSelfQuitReq");
static_assert(sizeof(FlawlessTrialsService_SendTrialSelfQuitReq) == 0x000004, "Wrong size on FlawlessTrialsService_SendTrialSelfQuitReq");
static_assert(offsetof(FlawlessTrialsService_SendTrialSelfQuitReq, ActivityId) == 0x000000, "Member 'FlawlessTrialsService_SendTrialSelfQuitReq::ActivityId' has a wrong offset!");

// Function TGFGame.FusionService.CheckCraftUnlock
// 0x0008 (0x0008 - 0x0000)
struct FusionService_CheckCraftUnlock final
{
public:
	int32                                         CraftId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FusionService_CheckCraftUnlock) == 0x000004, "Wrong alignment on FusionService_CheckCraftUnlock");
static_assert(sizeof(FusionService_CheckCraftUnlock) == 0x000008, "Wrong size on FusionService_CheckCraftUnlock");
static_assert(offsetof(FusionService_CheckCraftUnlock, CraftId) == 0x000000, "Member 'FusionService_CheckCraftUnlock::CraftId' has a wrong offset!");
static_assert(offsetof(FusionService_CheckCraftUnlock, ReturnValue) == 0x000004, "Member 'FusionService_CheckCraftUnlock::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.CheckIsAllCraftFinish
// 0x0001 (0x0001 - 0x0000)
struct FusionService_CheckIsAllCraftFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_CheckIsAllCraftFinish) == 0x000001, "Wrong alignment on FusionService_CheckIsAllCraftFinish");
static_assert(sizeof(FusionService_CheckIsAllCraftFinish) == 0x000001, "Wrong size on FusionService_CheckIsAllCraftFinish");
static_assert(offsetof(FusionService_CheckIsAllCraftFinish, ReturnValue) == 0x000000, "Member 'FusionService_CheckIsAllCraftFinish::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.CheckIsAnyCraftFinish
// 0x0001 (0x0001 - 0x0000)
struct FusionService_CheckIsAnyCraftFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_CheckIsAnyCraftFinish) == 0x000001, "Wrong alignment on FusionService_CheckIsAnyCraftFinish");
static_assert(sizeof(FusionService_CheckIsAnyCraftFinish) == 0x000001, "Wrong size on FusionService_CheckIsAnyCraftFinish");
static_assert(offsetof(FusionService_CheckIsAnyCraftFinish, ReturnValue) == 0x000000, "Member 'FusionService_CheckIsAnyCraftFinish::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.CheckIsTabCraftAllFinish
// 0x0008 (0x0008 - 0x0000)
struct FusionService_CheckIsTabCraftAllFinish final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FusionService_CheckIsTabCraftAllFinish) == 0x000004, "Wrong alignment on FusionService_CheckIsTabCraftAllFinish");
static_assert(sizeof(FusionService_CheckIsTabCraftAllFinish) == 0x000008, "Wrong size on FusionService_CheckIsTabCraftAllFinish");
static_assert(offsetof(FusionService_CheckIsTabCraftAllFinish, Tag) == 0x000000, "Member 'FusionService_CheckIsTabCraftAllFinish::Tag' has a wrong offset!");
static_assert(offsetof(FusionService_CheckIsTabCraftAllFinish, ReturnValue) == 0x000004, "Member 'FusionService_CheckIsTabCraftAllFinish::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.CheckSlotUnlock
// 0x0008 (0x0008 - 0x0000)
struct FusionService_CheckSlotUnlock final
{
public:
	int32                                         SlotId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FusionService_CheckSlotUnlock) == 0x000004, "Wrong alignment on FusionService_CheckSlotUnlock");
static_assert(sizeof(FusionService_CheckSlotUnlock) == 0x000008, "Wrong size on FusionService_CheckSlotUnlock");
static_assert(offsetof(FusionService_CheckSlotUnlock, SlotId) == 0x000000, "Member 'FusionService_CheckSlotUnlock::SlotId' has a wrong offset!");
static_assert(offsetof(FusionService_CheckSlotUnlock, ReturnValue) == 0x000004, "Member 'FusionService_CheckSlotUnlock::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.GetCraftComboCount
// 0x0008 (0x0008 - 0x0000)
struct FusionService_GetCraftComboCount final
{
public:
	int32                                         CraftId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_GetCraftComboCount) == 0x000004, "Wrong alignment on FusionService_GetCraftComboCount");
static_assert(sizeof(FusionService_GetCraftComboCount) == 0x000008, "Wrong size on FusionService_GetCraftComboCount");
static_assert(offsetof(FusionService_GetCraftComboCount, CraftId) == 0x000000, "Member 'FusionService_GetCraftComboCount::CraftId' has a wrong offset!");
static_assert(offsetof(FusionService_GetCraftComboCount, ReturnValue) == 0x000004, "Member 'FusionService_GetCraftComboCount::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.GetCraftCountById
// 0x0008 (0x0008 - 0x0000)
struct FusionService_GetCraftCountById final
{
public:
	int32                                         CraftId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_GetCraftCountById) == 0x000004, "Wrong alignment on FusionService_GetCraftCountById");
static_assert(sizeof(FusionService_GetCraftCountById) == 0x000008, "Wrong size on FusionService_GetCraftCountById");
static_assert(offsetof(FusionService_GetCraftCountById, CraftId) == 0x000000, "Member 'FusionService_GetCraftCountById::CraftId' has a wrong offset!");
static_assert(offsetof(FusionService_GetCraftCountById, ReturnValue) == 0x000004, "Member 'FusionService_GetCraftCountById::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.GetCraftingData
// 0x0020 (0x0020 - 0x0000)
struct FusionService_GetCraftingData final
{
public:
	struct FTGFUserCraftingData                   ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_GetCraftingData) == 0x000008, "Wrong alignment on FusionService_GetCraftingData");
static_assert(sizeof(FusionService_GetCraftingData) == 0x000020, "Wrong size on FusionService_GetCraftingData");
static_assert(offsetof(FusionService_GetCraftingData, ReturnValue) == 0x000000, "Member 'FusionService_GetCraftingData::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.GetCraftTabFinishItems
// 0x0058 (0x0058 - 0x0000)
struct FusionService_GetCraftTabFinishItems final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UFusionItemData*>           ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_GetCraftTabFinishItems) == 0x000008, "Wrong alignment on FusionService_GetCraftTabFinishItems");
static_assert(sizeof(FusionService_GetCraftTabFinishItems) == 0x000058, "Wrong size on FusionService_GetCraftTabFinishItems");
static_assert(offsetof(FusionService_GetCraftTabFinishItems, Tag) == 0x000000, "Member 'FusionService_GetCraftTabFinishItems::Tag' has a wrong offset!");
static_assert(offsetof(FusionService_GetCraftTabFinishItems, ReturnValue) == 0x000008, "Member 'FusionService_GetCraftTabFinishItems::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.GetCraftTabItems
// 0x0058 (0x0058 - 0x0000)
struct FusionService_GetCraftTabItems final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCraftTab                              ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_GetCraftTabItems) == 0x000008, "Wrong alignment on FusionService_GetCraftTabItems");
static_assert(sizeof(FusionService_GetCraftTabItems) == 0x000058, "Wrong size on FusionService_GetCraftTabItems");
static_assert(offsetof(FusionService_GetCraftTabItems, Tag) == 0x000000, "Member 'FusionService_GetCraftTabItems::Tag' has a wrong offset!");
static_assert(offsetof(FusionService_GetCraftTabItems, ReturnValue) == 0x000008, "Member 'FusionService_GetCraftTabItems::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.GetCraftTabItemTypes
// 0x0018 (0x0018 - 0x0000)
struct FusionService_GetCraftTabItemTypes final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_GetCraftTabItemTypes) == 0x000008, "Wrong alignment on FusionService_GetCraftTabItemTypes");
static_assert(sizeof(FusionService_GetCraftTabItemTypes) == 0x000018, "Wrong size on FusionService_GetCraftTabItemTypes");
static_assert(offsetof(FusionService_GetCraftTabItemTypes, Tag) == 0x000000, "Member 'FusionService_GetCraftTabItemTypes::Tag' has a wrong offset!");
static_assert(offsetof(FusionService_GetCraftTabItemTypes, ReturnValue) == 0x000008, "Member 'FusionService_GetCraftTabItemTypes::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.GetCraftTabRunningItems
// 0x0058 (0x0058 - 0x0000)
struct FusionService_GetCraftTabRunningItems final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UFusionItemData*>           ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_GetCraftTabRunningItems) == 0x000008, "Wrong alignment on FusionService_GetCraftTabRunningItems");
static_assert(sizeof(FusionService_GetCraftTabRunningItems) == 0x000058, "Wrong size on FusionService_GetCraftTabRunningItems");
static_assert(offsetof(FusionService_GetCraftTabRunningItems, Tag) == 0x000000, "Member 'FusionService_GetCraftTabRunningItems::Tag' has a wrong offset!");
static_assert(offsetof(FusionService_GetCraftTabRunningItems, ReturnValue) == 0x000008, "Member 'FusionService_GetCraftTabRunningItems::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.GetFilterState
// 0x0004 (0x0004 - 0x0000)
struct FusionService_GetFilterState final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_GetFilterState) == 0x000004, "Wrong alignment on FusionService_GetFilterState");
static_assert(sizeof(FusionService_GetFilterState) == 0x000004, "Wrong size on FusionService_GetFilterState");
static_assert(offsetof(FusionService_GetFilterState, ReturnValue) == 0x000000, "Member 'FusionService_GetFilterState::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.GetFusionStateType
// 0x0008 (0x0008 - 0x0000)
struct FusionService_GetFusionStateType final
{
public:
	int32                                         CraftId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfFusionStateType                           ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FusionService_GetFusionStateType) == 0x000004, "Wrong alignment on FusionService_GetFusionStateType");
static_assert(sizeof(FusionService_GetFusionStateType) == 0x000008, "Wrong size on FusionService_GetFusionStateType");
static_assert(offsetof(FusionService_GetFusionStateType, CraftId) == 0x000000, "Member 'FusionService_GetFusionStateType::CraftId' has a wrong offset!");
static_assert(offsetof(FusionService_GetFusionStateType, ReturnValue) == 0x000004, "Member 'FusionService_GetFusionStateType::ReturnValue' has a wrong offset!");

// Function TGFGame.FusionService.OnSelectCraft
// 0x0004 (0x0004 - 0x0000)
struct FusionService_OnSelectCraft final
{
public:
	int32                                         Craft;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_OnSelectCraft) == 0x000004, "Wrong alignment on FusionService_OnSelectCraft");
static_assert(sizeof(FusionService_OnSelectCraft) == 0x000004, "Wrong size on FusionService_OnSelectCraft");
static_assert(offsetof(FusionService_OnSelectCraft, Craft) == 0x000000, "Member 'FusionService_OnSelectCraft::Craft' has a wrong offset!");

// Function TGFGame.FusionService.SendCancelCraftReq
// 0x0008 (0x0008 - 0x0000)
struct FusionService_SendCancelCraftReq final
{
public:
	int32                                         Craft;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StorageType;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FusionService_SendCancelCraftReq) == 0x000004, "Wrong alignment on FusionService_SendCancelCraftReq");
static_assert(sizeof(FusionService_SendCancelCraftReq) == 0x000008, "Wrong size on FusionService_SendCancelCraftReq");
static_assert(offsetof(FusionService_SendCancelCraftReq, Craft) == 0x000000, "Member 'FusionService_SendCancelCraftReq::Craft' has a wrong offset!");
static_assert(offsetof(FusionService_SendCancelCraftReq, StorageType) == 0x000004, "Member 'FusionService_SendCancelCraftReq::StorageType' has a wrong offset!");

// Function TGFGame.FusionService.SendDrawCraftReq
// 0x0008 (0x0008 - 0x0000)
struct FusionService_SendDrawCraftReq final
{
public:
	int32                                         Craft;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StorageType;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FusionService_SendDrawCraftReq) == 0x000004, "Wrong alignment on FusionService_SendDrawCraftReq");
static_assert(sizeof(FusionService_SendDrawCraftReq) == 0x000008, "Wrong size on FusionService_SendDrawCraftReq");
static_assert(offsetof(FusionService_SendDrawCraftReq, Craft) == 0x000000, "Member 'FusionService_SendDrawCraftReq::Craft' has a wrong offset!");
static_assert(offsetof(FusionService_SendDrawCraftReq, StorageType) == 0x000004, "Member 'FusionService_SendDrawCraftReq::StorageType' has a wrong offset!");

// Function TGFGame.FusionService.SendStartCraftReq
// 0x0008 (0x0008 - 0x0000)
struct FusionService_SendStartCraftReq final
{
public:
	int32                                         Crafting_recipe;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_SendStartCraftReq) == 0x000004, "Wrong alignment on FusionService_SendStartCraftReq");
static_assert(sizeof(FusionService_SendStartCraftReq) == 0x000008, "Wrong size on FusionService_SendStartCraftReq");
static_assert(offsetof(FusionService_SendStartCraftReq, Crafting_recipe) == 0x000000, "Member 'FusionService_SendStartCraftReq::Crafting_recipe' has a wrong offset!");
static_assert(offsetof(FusionService_SendStartCraftReq, Count) == 0x000004, "Member 'FusionService_SendStartCraftReq::Count' has a wrong offset!");

// Function TGFGame.FusionService.SetCraftInventoryTabSelect
// 0x0001 (0x0001 - 0x0000)
struct FusionService_SetCraftInventoryTabSelect final
{
public:
	uint8                                         TabId;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_SetCraftInventoryTabSelect) == 0x000001, "Wrong alignment on FusionService_SetCraftInventoryTabSelect");
static_assert(sizeof(FusionService_SetCraftInventoryTabSelect) == 0x000001, "Wrong size on FusionService_SetCraftInventoryTabSelect");
static_assert(offsetof(FusionService_SetCraftInventoryTabSelect, TabId) == 0x000000, "Member 'FusionService_SetCraftInventoryTabSelect::TabId' has a wrong offset!");

// Function TGFGame.FusionService.SetCraftStragePageTab
// 0x0001 (0x0001 - 0x0000)
struct FusionService_SetCraftStragePageTab final
{
public:
	uint8                                         PageId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_SetCraftStragePageTab) == 0x000001, "Wrong alignment on FusionService_SetCraftStragePageTab");
static_assert(sizeof(FusionService_SetCraftStragePageTab) == 0x000001, "Wrong size on FusionService_SetCraftStragePageTab");
static_assert(offsetof(FusionService_SetCraftStragePageTab, PageId) == 0x000000, "Member 'FusionService_SetCraftStragePageTab::PageId' has a wrong offset!");

// Function TGFGame.FusionService.SetFilterState
// 0x0008 (0x0008 - 0x0000)
struct FusionService_SetFilterState final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FusionService_SetFilterState) == 0x000004, "Wrong alignment on FusionService_SetFilterState");
static_assert(sizeof(FusionService_SetFilterState) == 0x000008, "Wrong size on FusionService_SetFilterState");
static_assert(offsetof(FusionService_SetFilterState, State) == 0x000000, "Member 'FusionService_SetFilterState::State' has a wrong offset!");
static_assert(offsetof(FusionService_SetFilterState, ReturnValue) == 0x000004, "Member 'FusionService_SetFilterState::ReturnValue' has a wrong offset!");

// Function TGFGame.RpcGameClientServiceHelper.GetMethods
// 0x0730 (0x0730 - 0x0000)
struct RpcGameClientServiceHelper_GetMethods final
{
public:
	struct FRpcGameClientServiceMethods           ReturnValue;                                       // 0x0000(0x0730)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RpcGameClientServiceHelper_GetMethods) == 0x000004, "Wrong alignment on RpcGameClientServiceHelper_GetMethods");
static_assert(sizeof(RpcGameClientServiceHelper_GetMethods) == 0x000730, "Wrong size on RpcGameClientServiceHelper_GetMethods");
static_assert(offsetof(RpcGameClientServiceHelper_GetMethods, ReturnValue) == 0x000000, "Member 'RpcGameClientServiceHelper_GetMethods::ReturnValue' has a wrong offset!");

// Function TGFGame.GameLoginService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct GameLoginService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameLoginService_OnGameLogout) == 0x000008, "Wrong alignment on GameLoginService_OnGameLogout");
static_assert(sizeof(GameLoginService_OnGameLogout) == 0x000008, "Wrong size on GameLoginService_OnGameLogout");
static_assert(offsetof(GameLoginService_OnGameLogout, Args) == 0x000000, "Member 'GameLoginService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.GameLoginService.BP_GetOpenId
// 0x0010 (0x0010 - 0x0000)
struct GameLoginService_BP_GetOpenId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameLoginService_BP_GetOpenId) == 0x000008, "Wrong alignment on GameLoginService_BP_GetOpenId");
static_assert(sizeof(GameLoginService_BP_GetOpenId) == 0x000010, "Wrong size on GameLoginService_BP_GetOpenId");
static_assert(offsetof(GameLoginService_BP_GetOpenId, ReturnValue) == 0x000000, "Member 'GameLoginService_BP_GetOpenId::ReturnValue' has a wrong offset!");

// Function TGFGame.GameLoginService.BP_GetUserId
// 0x0008 (0x0008 - 0x0000)
struct GameLoginService_BP_GetUserId final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameLoginService_BP_GetUserId) == 0x000008, "Wrong alignment on GameLoginService_BP_GetUserId");
static_assert(sizeof(GameLoginService_BP_GetUserId) == 0x000008, "Wrong size on GameLoginService_BP_GetUserId");
static_assert(offsetof(GameLoginService_BP_GetUserId, ReturnValue) == 0x000000, "Member 'GameLoginService_BP_GetUserId::ReturnValue' has a wrong offset!");

// Function TGFGame.GameLoginService.BP_GetZoneId
// 0x0004 (0x0004 - 0x0000)
struct GameLoginService_BP_GetZoneId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameLoginService_BP_GetZoneId) == 0x000004, "Wrong alignment on GameLoginService_BP_GetZoneId");
static_assert(sizeof(GameLoginService_BP_GetZoneId) == 0x000004, "Wrong size on GameLoginService_BP_GetZoneId");
static_assert(offsetof(GameLoginService_BP_GetZoneId, ReturnValue) == 0x000000, "Member 'GameLoginService_BP_GetZoneId::ReturnValue' has a wrong offset!");

// Function TGFGame.GameLoginService.IsLogin
// 0x0001 (0x0001 - 0x0000)
struct GameLoginService_IsLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameLoginService_IsLogin) == 0x000001, "Wrong alignment on GameLoginService_IsLogin");
static_assert(sizeof(GameLoginService_IsLogin) == 0x000001, "Wrong size on GameLoginService_IsLogin");
static_assert(offsetof(GameLoginService_IsLogin, ReturnValue) == 0x000000, "Member 'GameLoginService_IsLogin::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetItem
// 0x0060 (0x0060 - 0x0000)
struct TradeSaleOrder_GetItem final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFItem                               ReturnValue;                                       // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetItem) == 0x000008, "Wrong alignment on TradeSaleOrder_GetItem");
static_assert(sizeof(TradeSaleOrder_GetItem) == 0x000060, "Wrong size on TradeSaleOrder_GetItem");
static_assert(offsetof(TradeSaleOrder_GetItem, MarketId) == 0x000000, "Member 'TradeSaleOrder_GetItem::MarketId' has a wrong offset!");
static_assert(offsetof(TradeSaleOrder_GetItem, ReturnValue) == 0x000008, "Member 'TradeSaleOrder_GetItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.HaveGearSetAttribute
// 0x0008 (0x0008 - 0x0000)
struct TradeSaleOrder_HaveGearSetAttribute final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeSaleOrder_HaveGearSetAttribute) == 0x000004, "Wrong alignment on TradeSaleOrder_HaveGearSetAttribute");
static_assert(sizeof(TradeSaleOrder_HaveGearSetAttribute) == 0x000008, "Wrong size on TradeSaleOrder_HaveGearSetAttribute");
static_assert(offsetof(TradeSaleOrder_HaveGearSetAttribute, MarketId) == 0x000000, "Member 'TradeSaleOrder_HaveGearSetAttribute::MarketId' has a wrong offset!");
static_assert(offsetof(TradeSaleOrder_HaveGearSetAttribute, ReturnValue) == 0x000004, "Member 'TradeSaleOrder_HaveGearSetAttribute::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.IsCorruptionItem
// 0x0008 (0x0008 - 0x0000)
struct TradeSaleOrder_IsCorruptionItem final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeSaleOrder_IsCorruptionItem) == 0x000004, "Wrong alignment on TradeSaleOrder_IsCorruptionItem");
static_assert(sizeof(TradeSaleOrder_IsCorruptionItem) == 0x000008, "Wrong size on TradeSaleOrder_IsCorruptionItem");
static_assert(offsetof(TradeSaleOrder_IsCorruptionItem, MarketId) == 0x000000, "Member 'TradeSaleOrder_IsCorruptionItem::MarketId' has a wrong offset!");
static_assert(offsetof(TradeSaleOrder_IsCorruptionItem, ReturnValue) == 0x000004, "Member 'TradeSaleOrder_IsCorruptionItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetCurrentBidPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeSaleOrder_GetCurrentBidPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetCurrentBidPrice) == 0x000004, "Wrong alignment on TradeSaleOrder_GetCurrentBidPrice");
static_assert(sizeof(TradeSaleOrder_GetCurrentBidPrice) == 0x000004, "Wrong size on TradeSaleOrder_GetCurrentBidPrice");
static_assert(offsetof(TradeSaleOrder_GetCurrentBidPrice, ReturnValue) == 0x000000, "Member 'TradeSaleOrder_GetCurrentBidPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetFixedPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeSaleOrder_GetFixedPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetFixedPrice) == 0x000004, "Wrong alignment on TradeSaleOrder_GetFixedPrice");
static_assert(sizeof(TradeSaleOrder_GetFixedPrice) == 0x000004, "Wrong size on TradeSaleOrder_GetFixedPrice");
static_assert(offsetof(TradeSaleOrder_GetFixedPrice, ReturnValue) == 0x000000, "Member 'TradeSaleOrder_GetFixedPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetItemTypeId
// 0x0008 (0x0008 - 0x0000)
struct TradeSaleOrder_GetItemTypeId final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetItemTypeId) == 0x000004, "Wrong alignment on TradeSaleOrder_GetItemTypeId");
static_assert(sizeof(TradeSaleOrder_GetItemTypeId) == 0x000008, "Wrong size on TradeSaleOrder_GetItemTypeId");
static_assert(offsetof(TradeSaleOrder_GetItemTypeId, MarketId) == 0x000000, "Member 'TradeSaleOrder_GetItemTypeId::MarketId' has a wrong offset!");
static_assert(offsetof(TradeSaleOrder_GetItemTypeId, ReturnValue) == 0x000004, "Member 'TradeSaleOrder_GetItemTypeId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetLeftItemount
// 0x0004 (0x0004 - 0x0000)
struct TradeSaleOrder_GetLeftItemount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetLeftItemount) == 0x000004, "Wrong alignment on TradeSaleOrder_GetLeftItemount");
static_assert(sizeof(TradeSaleOrder_GetLeftItemount) == 0x000004, "Wrong size on TradeSaleOrder_GetLeftItemount");
static_assert(offsetof(TradeSaleOrder_GetLeftItemount, ReturnValue) == 0x000000, "Member 'TradeSaleOrder_GetLeftItemount::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetOriginItemCount
// 0x0004 (0x0004 - 0x0000)
struct TradeSaleOrder_GetOriginItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetOriginItemCount) == 0x000004, "Wrong alignment on TradeSaleOrder_GetOriginItemCount");
static_assert(sizeof(TradeSaleOrder_GetOriginItemCount) == 0x000004, "Wrong size on TradeSaleOrder_GetOriginItemCount");
static_assert(offsetof(TradeSaleOrder_GetOriginItemCount, ReturnValue) == 0x000000, "Member 'TradeSaleOrder_GetOriginItemCount::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetRemainTime
// 0x0008 (0x0008 - 0x0000)
struct TradeSaleOrder_GetRemainTime final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetRemainTime) == 0x000008, "Wrong alignment on TradeSaleOrder_GetRemainTime");
static_assert(sizeof(TradeSaleOrder_GetRemainTime) == 0x000008, "Wrong size on TradeSaleOrder_GetRemainTime");
static_assert(offsetof(TradeSaleOrder_GetRemainTime, ReturnValue) == 0x000000, "Member 'TradeSaleOrder_GetRemainTime::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetStartingPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeSaleOrder_GetStartingPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetStartingPrice) == 0x000004, "Wrong alignment on TradeSaleOrder_GetStartingPrice");
static_assert(sizeof(TradeSaleOrder_GetStartingPrice) == 0x000004, "Wrong size on TradeSaleOrder_GetStartingPrice");
static_assert(offsetof(TradeSaleOrder_GetStartingPrice, ReturnValue) == 0x000000, "Member 'TradeSaleOrder_GetStartingPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetState
// 0x0001 (0x0001 - 0x0000)
struct TradeSaleOrder_GetState final
{
public:
	ETradeSaleOrderState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetState) == 0x000001, "Wrong alignment on TradeSaleOrder_GetState");
static_assert(sizeof(TradeSaleOrder_GetState) == 0x000001, "Wrong size on TradeSaleOrder_GetState");
static_assert(offsetof(TradeSaleOrder_GetState, ReturnValue) == 0x000000, "Member 'TradeSaleOrder_GetState::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetTradeItemProductId
// 0x0004 (0x0004 - 0x0000)
struct TradeSaleOrder_GetTradeItemProductId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetTradeItemProductId) == 0x000004, "Wrong alignment on TradeSaleOrder_GetTradeItemProductId");
static_assert(sizeof(TradeSaleOrder_GetTradeItemProductId) == 0x000004, "Wrong size on TradeSaleOrder_GetTradeItemProductId");
static_assert(offsetof(TradeSaleOrder_GetTradeItemProductId, ReturnValue) == 0x000000, "Member 'TradeSaleOrder_GetTradeItemProductId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetType
// 0x0001 (0x0001 - 0x0000)
struct TradeSaleOrder_GetType final
{
public:
	ETradeSaleOrderType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetType) == 0x000001, "Wrong alignment on TradeSaleOrder_GetType");
static_assert(sizeof(TradeSaleOrder_GetType) == 0x000001, "Wrong size on TradeSaleOrder_GetType");
static_assert(offsetof(TradeSaleOrder_GetType, ReturnValue) == 0x000000, "Member 'TradeSaleOrder_GetType::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetUnitCount
// 0x0004 (0x0004 - 0x0000)
struct TradeSaleOrder_GetUnitCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetUnitCount) == 0x000004, "Wrong alignment on TradeSaleOrder_GetUnitCount");
static_assert(sizeof(TradeSaleOrder_GetUnitCount) == 0x000004, "Wrong size on TradeSaleOrder_GetUnitCount");
static_assert(offsetof(TradeSaleOrder_GetUnitCount, ReturnValue) == 0x000000, "Member 'TradeSaleOrder_GetUnitCount::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleOrder.GetUnitPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeSaleOrder_GetUnitPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleOrder_GetUnitPrice) == 0x000004, "Wrong alignment on TradeSaleOrder_GetUnitPrice");
static_assert(sizeof(TradeSaleOrder_GetUnitPrice) == 0x000004, "Wrong size on TradeSaleOrder_GetUnitPrice");
static_assert(offsetof(TradeSaleOrder_GetUnitPrice, ReturnValue) == 0x000000, "Member 'TradeSaleOrder_GetUnitPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.GamePreLoginService.OnNetworkManagerEnterState
// 0x0008 (0x0008 - 0x0000)
struct GamePreLoginService_OnNetworkManagerEnterState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamePreLoginService_OnNetworkManagerEnterState) == 0x000008, "Wrong alignment on GamePreLoginService_OnNetworkManagerEnterState");
static_assert(sizeof(GamePreLoginService_OnNetworkManagerEnterState) == 0x000008, "Wrong size on GamePreLoginService_OnNetworkManagerEnterState");
static_assert(offsetof(GamePreLoginService_OnNetworkManagerEnterState, Args) == 0x000000, "Member 'GamePreLoginService_OnNetworkManagerEnterState::Args' has a wrong offset!");

// Function TGFGame.GamePreLoginService.OnNetworkManagerExitState
// 0x0008 (0x0008 - 0x0000)
struct GamePreLoginService_OnNetworkManagerExitState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamePreLoginService_OnNetworkManagerExitState) == 0x000008, "Wrong alignment on GamePreLoginService_OnNetworkManagerExitState");
static_assert(sizeof(GamePreLoginService_OnNetworkManagerExitState) == 0x000008, "Wrong size on GamePreLoginService_OnNetworkManagerExitState");
static_assert(offsetof(GamePreLoginService_OnNetworkManagerExitState, Args) == 0x000000, "Member 'GamePreLoginService_OnNetworkManagerExitState::Args' has a wrong offset!");

// Function TGFGame.GamePreLoginService.GetPreLoginInfo
// 0x0008 (0x0008 - 0x0000)
struct GamePreLoginService_GetPreLoginInfo final
{
public:
	class UTGFProtoTgfPlayerPreLoginInfo*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamePreLoginService_GetPreLoginInfo) == 0x000008, "Wrong alignment on GamePreLoginService_GetPreLoginInfo");
static_assert(sizeof(GamePreLoginService_GetPreLoginInfo) == 0x000008, "Wrong size on GamePreLoginService_GetPreLoginInfo");
static_assert(offsetof(GamePreLoginService_GetPreLoginInfo, ReturnValue) == 0x000000, "Member 'GamePreLoginService_GetPreLoginInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.GamePreLoginService.IsInQueue
// 0x0001 (0x0001 - 0x0000)
struct GamePreLoginService_IsInQueue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamePreLoginService_IsInQueue) == 0x000001, "Wrong alignment on GamePreLoginService_IsInQueue");
static_assert(sizeof(GamePreLoginService_IsInQueue) == 0x000001, "Wrong size on GamePreLoginService_IsInQueue");
static_assert(offsetof(GamePreLoginService_IsInQueue, ReturnValue) == 0x000000, "Member 'GamePreLoginService_IsInQueue::ReturnValue' has a wrong offset!");

// Function TGFGame.GameVersionManager.GetAppVersion
// 0x0010 (0x0010 - 0x0000)
struct GameVersionManager_GetAppVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameVersionManager_GetAppVersion) == 0x000008, "Wrong alignment on GameVersionManager_GetAppVersion");
static_assert(sizeof(GameVersionManager_GetAppVersion) == 0x000010, "Wrong size on GameVersionManager_GetAppVersion");
static_assert(offsetof(GameVersionManager_GetAppVersion, ReturnValue) == 0x000000, "Member 'GameVersionManager_GetAppVersion::ReturnValue' has a wrong offset!");

// Function TGFGame.GlobalUserInfo.GetIsExpired
// 0x0001 (0x0001 - 0x0000)
struct GlobalUserInfo_GetIsExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalUserInfo_GetIsExpired) == 0x000001, "Wrong alignment on GlobalUserInfo_GetIsExpired");
static_assert(sizeof(GlobalUserInfo_GetIsExpired) == 0x000001, "Wrong size on GlobalUserInfo_GetIsExpired");
static_assert(offsetof(GlobalUserInfo_GetIsExpired, ReturnValue) == 0x000000, "Member 'GlobalUserInfo_GetIsExpired::ReturnValue' has a wrong offset!");

// Function TGFGame.GlobalUserInfo.GetIsValid
// 0x0001 (0x0001 - 0x0000)
struct GlobalUserInfo_GetIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalUserInfo_GetIsValid) == 0x000001, "Wrong alignment on GlobalUserInfo_GetIsValid");
static_assert(sizeof(GlobalUserInfo_GetIsValid) == 0x000001, "Wrong size on GlobalUserInfo_GetIsValid");
static_assert(offsetof(GlobalUserInfo_GetIsValid, ReturnValue) == 0x000000, "Member 'GlobalUserInfo_GetIsValid::ReturnValue' has a wrong offset!");

// Function TGFGame.GMService.OnNetworkManagerEnterState
// 0x0008 (0x0008 - 0x0000)
struct GMService_OnNetworkManagerEnterState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMService_OnNetworkManagerEnterState) == 0x000008, "Wrong alignment on GMService_OnNetworkManagerEnterState");
static_assert(sizeof(GMService_OnNetworkManagerEnterState) == 0x000008, "Wrong size on GMService_OnNetworkManagerEnterState");
static_assert(offsetof(GMService_OnNetworkManagerEnterState, Args) == 0x000000, "Member 'GMService_OnNetworkManagerEnterState::Args' has a wrong offset!");

// Function TGFGame.TradeSearchService.GeLegendaryAffixList
// 0x0010 (0x0010 - 0x0000)
struct TradeSearchService_GeLegendaryAffixList final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_GeLegendaryAffixList) == 0x000008, "Wrong alignment on TradeSearchService_GeLegendaryAffixList");
static_assert(sizeof(TradeSearchService_GeLegendaryAffixList) == 0x000010, "Wrong size on TradeSearchService_GeLegendaryAffixList");
static_assert(offsetof(TradeSearchService_GeLegendaryAffixList, ReturnValue) == 0x000000, "Member 'TradeSearchService_GeLegendaryAffixList::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchService.GetAffixList
// 0x0020 (0x0020 - 0x0000)
struct TradeSearchService_GetAffixList final
{
public:
	class FString                                 AffixType;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_GetAffixList) == 0x000008, "Wrong alignment on TradeSearchService_GetAffixList");
static_assert(sizeof(TradeSearchService_GetAffixList) == 0x000020, "Wrong size on TradeSearchService_GetAffixList");
static_assert(offsetof(TradeSearchService_GetAffixList, AffixType) == 0x000000, "Member 'TradeSearchService_GetAffixList::AffixType' has a wrong offset!");
static_assert(offsetof(TradeSearchService_GetAffixList, ReturnValue) == 0x000010, "Member 'TradeSearchService_GetAffixList::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchService.GetAffixListByType
// 0x0018 (0x0018 - 0x0000)
struct TradeSearchService_GetAffixListByType final
{
public:
	int32                                         AttributeClassify;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_GetAffixListByType) == 0x000008, "Wrong alignment on TradeSearchService_GetAffixListByType");
static_assert(sizeof(TradeSearchService_GetAffixListByType) == 0x000018, "Wrong size on TradeSearchService_GetAffixListByType");
static_assert(offsetof(TradeSearchService_GetAffixListByType, AttributeClassify) == 0x000000, "Member 'TradeSearchService_GetAffixListByType::AttributeClassify' has a wrong offset!");
static_assert(offsetof(TradeSearchService_GetAffixListByType, ReturnValue) == 0x000008, "Member 'TradeSearchService_GetAffixListByType::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchService.GetHasNextPage
// 0x0001 (0x0001 - 0x0000)
struct TradeSearchService_GetHasNextPage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_GetHasNextPage) == 0x000001, "Wrong alignment on TradeSearchService_GetHasNextPage");
static_assert(sizeof(TradeSearchService_GetHasNextPage) == 0x000001, "Wrong size on TradeSearchService_GetHasNextPage");
static_assert(offsetof(TradeSearchService_GetHasNextPage, ReturnValue) == 0x000000, "Member 'TradeSearchService_GetHasNextPage::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchService.GetPageDataCache
// 0x0020 (0x0020 - 0x0000)
struct TradeSearchService_GetPageDataCache final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFTradeSearchResultData              ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_GetPageDataCache) == 0x000008, "Wrong alignment on TradeSearchService_GetPageDataCache");
static_assert(sizeof(TradeSearchService_GetPageDataCache) == 0x000020, "Wrong size on TradeSearchService_GetPageDataCache");
static_assert(offsetof(TradeSearchService_GetPageDataCache, PageIndex) == 0x000000, "Member 'TradeSearchService_GetPageDataCache::PageIndex' has a wrong offset!");
static_assert(offsetof(TradeSearchService_GetPageDataCache, ReturnValue) == 0x000008, "Member 'TradeSearchService_GetPageDataCache::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchService.GetRecommendResults
// 0x0018 (0x0018 - 0x0000)
struct TradeSearchService_GetRecommendResults final
{
public:
	bool                                          Refresh;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTradeSearchResultOrder*>        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_GetRecommendResults) == 0x000008, "Wrong alignment on TradeSearchService_GetRecommendResults");
static_assert(sizeof(TradeSearchService_GetRecommendResults) == 0x000018, "Wrong size on TradeSearchService_GetRecommendResults");
static_assert(offsetof(TradeSearchService_GetRecommendResults, Refresh) == 0x000000, "Member 'TradeSearchService_GetRecommendResults::Refresh' has a wrong offset!");
static_assert(offsetof(TradeSearchService_GetRecommendResults, ReturnValue) == 0x000008, "Member 'TradeSearchService_GetRecommendResults::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchService.GetRecommendResultsEaBase
// 0x0018 (0x0018 - 0x0000)
struct TradeSearchService_GetRecommendResultsEaBase final
{
public:
	bool                                          Refresh;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTradeSearchResultOrder*>        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_GetRecommendResultsEaBase) == 0x000008, "Wrong alignment on TradeSearchService_GetRecommendResultsEaBase");
static_assert(sizeof(TradeSearchService_GetRecommendResultsEaBase) == 0x000018, "Wrong size on TradeSearchService_GetRecommendResultsEaBase");
static_assert(offsetof(TradeSearchService_GetRecommendResultsEaBase, Refresh) == 0x000000, "Member 'TradeSearchService_GetRecommendResultsEaBase::Refresh' has a wrong offset!");
static_assert(offsetof(TradeSearchService_GetRecommendResultsEaBase, ReturnValue) == 0x000008, "Member 'TradeSearchService_GetRecommendResultsEaBase::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchService.GetSearchResultOrders
// 0x0010 (0x0010 - 0x0000)
struct TradeSearchService_GetSearchResultOrders final
{
public:
	TArray<class UTradeSearchResultOrder*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_GetSearchResultOrders) == 0x000008, "Wrong alignment on TradeSearchService_GetSearchResultOrders");
static_assert(sizeof(TradeSearchService_GetSearchResultOrders) == 0x000010, "Wrong size on TradeSearchService_GetSearchResultOrders");
static_assert(offsetof(TradeSearchService_GetSearchResultOrders, ReturnValue) == 0x000000, "Member 'TradeSearchService_GetSearchResultOrders::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchService.OnAffixSelect
// 0x0008 (0x0008 - 0x0000)
struct TradeSearchService_OnAffixSelect final
{
public:
	int32                                         AffixId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSureSelect;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHomogenTrade;                                    // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeSearchService_OnAffixSelect) == 0x000004, "Wrong alignment on TradeSearchService_OnAffixSelect");
static_assert(sizeof(TradeSearchService_OnAffixSelect) == 0x000008, "Wrong size on TradeSearchService_OnAffixSelect");
static_assert(offsetof(TradeSearchService_OnAffixSelect, AffixId) == 0x000000, "Member 'TradeSearchService_OnAffixSelect::AffixId' has a wrong offset!");
static_assert(offsetof(TradeSearchService_OnAffixSelect, IsSureSelect) == 0x000004, "Member 'TradeSearchService_OnAffixSelect::IsSureSelect' has a wrong offset!");
static_assert(offsetof(TradeSearchService_OnAffixSelect, IsHomogenTrade) == 0x000005, "Member 'TradeSearchService_OnAffixSelect::IsHomogenTrade' has a wrong offset!");

// Function TGFGame.TradeSearchService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct TradeSearchService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_OnGameLogout) == 0x000008, "Wrong alignment on TradeSearchService_OnGameLogout");
static_assert(sizeof(TradeSearchService_OnGameLogout) == 0x000008, "Wrong size on TradeSearchService_OnGameLogout");
static_assert(offsetof(TradeSearchService_OnGameLogout, Args) == 0x000000, "Member 'TradeSearchService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.TradeSearchService.SendTradeAuctionRecommendOrderTicketRequest
// 0x0001 (0x0001 - 0x0000)
struct TradeSearchService_SendTradeAuctionRecommendOrderTicketRequest final
{
public:
	bool                                          Refresh;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_SendTradeAuctionRecommendOrderTicketRequest) == 0x000001, "Wrong alignment on TradeSearchService_SendTradeAuctionRecommendOrderTicketRequest");
static_assert(sizeof(TradeSearchService_SendTradeAuctionRecommendOrderTicketRequest) == 0x000001, "Wrong size on TradeSearchService_SendTradeAuctionRecommendOrderTicketRequest");
static_assert(offsetof(TradeSearchService_SendTradeAuctionRecommendOrderTicketRequest, Refresh) == 0x000000, "Member 'TradeSearchService_SendTradeAuctionRecommendOrderTicketRequest::Refresh' has a wrong offset!");

// Function TGFGame.TradeSearchService.SendTradeAuctionSearchRequest
// 0x0050 (0x0050 - 0x0000)
struct TradeSearchService_SendTradeAuctionSearchRequest final
{
public:
	int32                                         Career;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorType;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SubTypes;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Corruption;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPrice;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPrice;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoundPrice;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         BoundTicketId;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BoundSpScore;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoundRarity;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix1;                                            // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix2;                                            // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix3;                                            // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_SendTradeAuctionSearchRequest) == 0x000008, "Wrong alignment on TradeSearchService_SendTradeAuctionSearchRequest");
static_assert(sizeof(TradeSearchService_SendTradeAuctionSearchRequest) == 0x000050, "Wrong size on TradeSearchService_SendTradeAuctionSearchRequest");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, Career) == 0x000000, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::Career' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, MinorType) == 0x000004, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::MinorType' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, SubTypes) == 0x000008, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::SubTypes' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, Rarity) == 0x000018, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::Rarity' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, Corruption) == 0x00001C, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::Corruption' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, MinPrice) == 0x000020, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::MinPrice' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, MaxPrice) == 0x000024, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::MaxPrice' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, BoundPrice) == 0x000028, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::BoundPrice' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, BoundTicketId) == 0x000030, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::BoundTicketId' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, BoundSpScore) == 0x000038, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::BoundSpScore' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, BoundRarity) == 0x000040, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::BoundRarity' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, Affix1) == 0x000044, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::Affix1' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, Affix2) == 0x000048, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::Affix2' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeAuctionSearchRequest, Affix3) == 0x00004C, "Member 'TradeSearchService_SendTradeAuctionSearchRequest::Affix3' has a wrong offset!");

// Function TGFGame.TradeSearchService.SendTradeSearchRequest
// 0x0058 (0x0058 - 0x0000)
struct TradeSearchService_SendTradeSearchRequest final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Career;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MajorType;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorType;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SubTypes;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Corruption;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPrice;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPrice;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoundPrice;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         BoundTicketId;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BoundSpScore;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoundRarity;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix1;                                            // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix2;                                            // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix3;                                            // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchService_SendTradeSearchRequest) == 0x000008, "Wrong alignment on TradeSearchService_SendTradeSearchRequest");
static_assert(sizeof(TradeSearchService_SendTradeSearchRequest) == 0x000058, "Wrong size on TradeSearchService_SendTradeSearchRequest");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, MarketId) == 0x000000, "Member 'TradeSearchService_SendTradeSearchRequest::MarketId' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, Career) == 0x000004, "Member 'TradeSearchService_SendTradeSearchRequest::Career' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, MajorType) == 0x000008, "Member 'TradeSearchService_SendTradeSearchRequest::MajorType' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, MinorType) == 0x00000C, "Member 'TradeSearchService_SendTradeSearchRequest::MinorType' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, SubTypes) == 0x000010, "Member 'TradeSearchService_SendTradeSearchRequest::SubTypes' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, Rarity) == 0x000020, "Member 'TradeSearchService_SendTradeSearchRequest::Rarity' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, Corruption) == 0x000024, "Member 'TradeSearchService_SendTradeSearchRequest::Corruption' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, MinPrice) == 0x000028, "Member 'TradeSearchService_SendTradeSearchRequest::MinPrice' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, MaxPrice) == 0x00002C, "Member 'TradeSearchService_SendTradeSearchRequest::MaxPrice' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, BoundPrice) == 0x000030, "Member 'TradeSearchService_SendTradeSearchRequest::BoundPrice' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, BoundTicketId) == 0x000038, "Member 'TradeSearchService_SendTradeSearchRequest::BoundTicketId' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, BoundSpScore) == 0x000040, "Member 'TradeSearchService_SendTradeSearchRequest::BoundSpScore' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, BoundRarity) == 0x000048, "Member 'TradeSearchService_SendTradeSearchRequest::BoundRarity' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, Affix1) == 0x00004C, "Member 'TradeSearchService_SendTradeSearchRequest::Affix1' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, Affix2) == 0x000050, "Member 'TradeSearchService_SendTradeSearchRequest::Affix2' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SendTradeSearchRequest, Affix3) == 0x000054, "Member 'TradeSearchService_SendTradeSearchRequest::Affix3' has a wrong offset!");

// Function TGFGame.TradeSearchService.SetPageDataCache
// 0x0020 (0x0020 - 0x0000)
struct TradeSearchService_SetPageDataCache final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTradeSearchResultOrder*>        Datas;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          NextPage;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeSearchService_SetPageDataCache) == 0x000008, "Wrong alignment on TradeSearchService_SetPageDataCache");
static_assert(sizeof(TradeSearchService_SetPageDataCache) == 0x000020, "Wrong size on TradeSearchService_SetPageDataCache");
static_assert(offsetof(TradeSearchService_SetPageDataCache, PageIndex) == 0x000000, "Member 'TradeSearchService_SetPageDataCache::PageIndex' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SetPageDataCache, Datas) == 0x000008, "Member 'TradeSearchService_SetPageDataCache::Datas' has a wrong offset!");
static_assert(offsetof(TradeSearchService_SetPageDataCache, NextPage) == 0x000018, "Member 'TradeSearchService_SetPageDataCache::NextPage' has a wrong offset!");

// Function TGFGame.TradeSearchService.TradeAuctionPageRequest
// 0x0020 (0x0020 - 0x0000)
struct TradeSearchService_TradeAuctionPageRequest final
{
public:
	int32                                         BoundPrice;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         BoundTicketId;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BoundSpScore;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoundRarity;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeSearchService_TradeAuctionPageRequest) == 0x000008, "Wrong alignment on TradeSearchService_TradeAuctionPageRequest");
static_assert(sizeof(TradeSearchService_TradeAuctionPageRequest) == 0x000020, "Wrong size on TradeSearchService_TradeAuctionPageRequest");
static_assert(offsetof(TradeSearchService_TradeAuctionPageRequest, BoundPrice) == 0x000000, "Member 'TradeSearchService_TradeAuctionPageRequest::BoundPrice' has a wrong offset!");
static_assert(offsetof(TradeSearchService_TradeAuctionPageRequest, BoundTicketId) == 0x000008, "Member 'TradeSearchService_TradeAuctionPageRequest::BoundTicketId' has a wrong offset!");
static_assert(offsetof(TradeSearchService_TradeAuctionPageRequest, BoundSpScore) == 0x000010, "Member 'TradeSearchService_TradeAuctionPageRequest::BoundSpScore' has a wrong offset!");
static_assert(offsetof(TradeSearchService_TradeAuctionPageRequest, BoundRarity) == 0x000018, "Member 'TradeSearchService_TradeAuctionPageRequest::BoundRarity' has a wrong offset!");

// Function TGFGame.GRomeLinkService.HandleRainbowConfig
// 0x0008 (0x0008 - 0x0000)
struct GRomeLinkService_HandleRainbowConfig final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GRomeLinkService_HandleRainbowConfig) == 0x000008, "Wrong alignment on GRomeLinkService_HandleRainbowConfig");
static_assert(sizeof(GRomeLinkService_HandleRainbowConfig) == 0x000008, "Wrong size on GRomeLinkService_HandleRainbowConfig");
static_assert(offsetof(GRomeLinkService_HandleRainbowConfig, Args) == 0x000000, "Member 'GRomeLinkService_HandleRainbowConfig::Args' has a wrong offset!");

// Function TGFGame.GRomeLinkService.SetBOpenGRomeLinkLog
// 0x0001 (0x0001 - 0x0000)
struct GRomeLinkService_SetBOpenGRomeLinkLog final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GRomeLinkService_SetBOpenGRomeLinkLog) == 0x000001, "Wrong alignment on GRomeLinkService_SetBOpenGRomeLinkLog");
static_assert(sizeof(GRomeLinkService_SetBOpenGRomeLinkLog) == 0x000001, "Wrong size on GRomeLinkService_SetBOpenGRomeLinkLog");
static_assert(offsetof(GRomeLinkService_SetBOpenGRomeLinkLog, bOpen) == 0x000000, "Member 'GRomeLinkService_SetBOpenGRomeLinkLog::bOpen' has a wrong offset!");

// Function TGFGame.GuideService.GetIsShowReward
// 0x0001 (0x0001 - 0x0000)
struct GuideService_GetIsShowReward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuideService_GetIsShowReward) == 0x000001, "Wrong alignment on GuideService_GetIsShowReward");
static_assert(sizeof(GuideService_GetIsShowReward) == 0x000001, "Wrong size on GuideService_GetIsShowReward");
static_assert(offsetof(GuideService_GetIsShowReward, ReturnValue) == 0x000000, "Member 'GuideService_GetIsShowReward::ReturnValue' has a wrong offset!");

// Function TGFGame.GuideService.GetIsSkipGuide
// 0x0001 (0x0001 - 0x0000)
struct GuideService_GetIsSkipGuide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuideService_GetIsSkipGuide) == 0x000001, "Wrong alignment on GuideService_GetIsSkipGuide");
static_assert(sizeof(GuideService_GetIsSkipGuide) == 0x000001, "Wrong size on GuideService_GetIsSkipGuide");
static_assert(offsetof(GuideService_GetIsSkipGuide, ReturnValue) == 0x000000, "Member 'GuideService_GetIsSkipGuide::ReturnValue' has a wrong offset!");

// Function TGFGame.GuideService.SetIsSkipGuide
// 0x0001 (0x0001 - 0x0000)
struct GuideService_SetIsSkipGuide final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuideService_SetIsSkipGuide) == 0x000001, "Wrong alignment on GuideService_SetIsSkipGuide");
static_assert(sizeof(GuideService_SetIsSkipGuide) == 0x000001, "Wrong size on GuideService_SetIsSkipGuide");
static_assert(offsetof(GuideService_SetIsSkipGuide, IsShow) == 0x000000, "Member 'GuideService_SetIsSkipGuide::IsShow' has a wrong offset!");

// Function TGFGame.GuideService.SetShowReward
// 0x0001 (0x0001 - 0x0000)
struct GuideService_SetShowReward final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuideService_SetShowReward) == 0x000001, "Wrong alignment on GuideService_SetShowReward");
static_assert(sizeof(GuideService_SetShowReward) == 0x000001, "Wrong size on GuideService_SetShowReward");
static_assert(offsetof(GuideService_SetShowReward, IsShow) == 0x000000, "Member 'GuideService_SetShowReward::IsShow' has a wrong offset!");

// Function TGFGame.HeadFunctionLibrary.GetDefaultHeadResConfigData
// 0x0038 (0x0038 - 0x0000)
struct HeadFunctionLibrary_GetDefaultHeadResConfigData final
{
public:
	int32                                         Race;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gender;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfHeadResConfig                      ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadFunctionLibrary_GetDefaultHeadResConfigData) == 0x000004, "Wrong alignment on HeadFunctionLibrary_GetDefaultHeadResConfigData");
static_assert(sizeof(HeadFunctionLibrary_GetDefaultHeadResConfigData) == 0x000038, "Wrong size on HeadFunctionLibrary_GetDefaultHeadResConfigData");
static_assert(offsetof(HeadFunctionLibrary_GetDefaultHeadResConfigData, Race) == 0x000000, "Member 'HeadFunctionLibrary_GetDefaultHeadResConfigData::Race' has a wrong offset!");
static_assert(offsetof(HeadFunctionLibrary_GetDefaultHeadResConfigData, Gender) == 0x000004, "Member 'HeadFunctionLibrary_GetDefaultHeadResConfigData::Gender' has a wrong offset!");
static_assert(offsetof(HeadFunctionLibrary_GetDefaultHeadResConfigData, ReturnValue) == 0x000008, "Member 'HeadFunctionLibrary_GetDefaultHeadResConfigData::ReturnValue' has a wrong offset!");

// Function TGFGame.HeartbeatService.OnGameLoginSuccess
// 0x0008 (0x0008 - 0x0000)
struct HeartbeatService_OnGameLoginSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeartbeatService_OnGameLoginSuccess) == 0x000008, "Wrong alignment on HeartbeatService_OnGameLoginSuccess");
static_assert(sizeof(HeartbeatService_OnGameLoginSuccess) == 0x000008, "Wrong size on HeartbeatService_OnGameLoginSuccess");
static_assert(offsetof(HeartbeatService_OnGameLoginSuccess, Args) == 0x000000, "Member 'HeartbeatService_OnGameLoginSuccess::Args' has a wrong offset!");

// Function TGFGame.HeartbeatService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct HeartbeatService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeartbeatService_OnGameLogout) == 0x000008, "Wrong alignment on HeartbeatService_OnGameLogout");
static_assert(sizeof(HeartbeatService_OnGameLogout) == 0x000008, "Wrong size on HeartbeatService_OnGameLogout");
static_assert(offsetof(HeartbeatService_OnGameLogout, Args) == 0x000000, "Member 'HeartbeatService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.HeartbeatService.OnNetworkManagerEnterState
// 0x0008 (0x0008 - 0x0000)
struct HeartbeatService_OnNetworkManagerEnterState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeartbeatService_OnNetworkManagerEnterState) == 0x000008, "Wrong alignment on HeartbeatService_OnNetworkManagerEnterState");
static_assert(sizeof(HeartbeatService_OnNetworkManagerEnterState) == 0x000008, "Wrong size on HeartbeatService_OnNetworkManagerEnterState");
static_assert(offsetof(HeartbeatService_OnNetworkManagerEnterState, Args) == 0x000000, "Member 'HeartbeatService_OnNetworkManagerEnterState::Args' has a wrong offset!");

// Function TGFGame.HeartbeatService.OnNetworkManagerExitState
// 0x0008 (0x0008 - 0x0000)
struct HeartbeatService_OnNetworkManagerExitState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeartbeatService_OnNetworkManagerExitState) == 0x000008, "Wrong alignment on HeartbeatService_OnNetworkManagerExitState");
static_assert(sizeof(HeartbeatService_OnNetworkManagerExitState) == 0x000008, "Wrong size on HeartbeatService_OnNetworkManagerExitState");
static_assert(offsetof(HeartbeatService_OnNetworkManagerExitState, Args) == 0x000000, "Member 'HeartbeatService_OnNetworkManagerExitState::Args' has a wrong offset!");

// Function TGFGame.ServerItem.IsServerUnavailable
// 0x0001 (0x0001 - 0x0000)
struct ServerItem_IsServerUnavailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerItem_IsServerUnavailable) == 0x000001, "Wrong alignment on ServerItem_IsServerUnavailable");
static_assert(sizeof(ServerItem_IsServerUnavailable) == 0x000001, "Wrong size on ServerItem_IsServerUnavailable");
static_assert(offsetof(ServerItem_IsServerUnavailable, ReturnValue) == 0x000000, "Member 'ServerItem_IsServerUnavailable::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomService.ArouseGearGem
// 0x0008 (0x0008 - 0x0000)
struct HeirloomService_ArouseGearGem final
{
public:
	int32                                         GearGemId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_ArouseGearGem) == 0x000004, "Wrong alignment on HeirloomService_ArouseGearGem");
static_assert(sizeof(HeirloomService_ArouseGearGem) == 0x000008, "Wrong size on HeirloomService_ArouseGearGem");
static_assert(offsetof(HeirloomService_ArouseGearGem, GearGemId) == 0x000000, "Member 'HeirloomService_ArouseGearGem::GearGemId' has a wrong offset!");
static_assert(offsetof(HeirloomService_ArouseGearGem, CostIndex) == 0x000004, "Member 'HeirloomService_ArouseGearGem::CostIndex' has a wrong offset!");

// Function TGFGame.HeirloomService.ArouseHeirloom
// 0x0008 (0x0008 - 0x0000)
struct HeirloomService_ArouseHeirloom final
{
public:
	int32                                         HeirloomId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_ArouseHeirloom) == 0x000004, "Wrong alignment on HeirloomService_ArouseHeirloom");
static_assert(sizeof(HeirloomService_ArouseHeirloom) == 0x000008, "Wrong size on HeirloomService_ArouseHeirloom");
static_assert(offsetof(HeirloomService_ArouseHeirloom, HeirloomId) == 0x000000, "Member 'HeirloomService_ArouseHeirloom::HeirloomId' has a wrong offset!");
static_assert(offsetof(HeirloomService_ArouseHeirloom, CostIndex) == 0x000004, "Member 'HeirloomService_ArouseHeirloom::CostIndex' has a wrong offset!");

// Function TGFGame.HeirloomService.CheckHeirloomCanInstantiate
// 0x0010 (0x0010 - 0x0000)
struct HeirloomService_CheckHeirloomCanInstantiate final
{
public:
	int32                                         HeirloomId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EnItemStorageType                             StorageType;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PageId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeirloomService_CheckHeirloomCanInstantiate) == 0x000004, "Wrong alignment on HeirloomService_CheckHeirloomCanInstantiate");
static_assert(sizeof(HeirloomService_CheckHeirloomCanInstantiate) == 0x000010, "Wrong size on HeirloomService_CheckHeirloomCanInstantiate");
static_assert(offsetof(HeirloomService_CheckHeirloomCanInstantiate, HeirloomId) == 0x000000, "Member 'HeirloomService_CheckHeirloomCanInstantiate::HeirloomId' has a wrong offset!");
static_assert(offsetof(HeirloomService_CheckHeirloomCanInstantiate, StorageType) == 0x000004, "Member 'HeirloomService_CheckHeirloomCanInstantiate::StorageType' has a wrong offset!");
static_assert(offsetof(HeirloomService_CheckHeirloomCanInstantiate, PageId) == 0x000008, "Member 'HeirloomService_CheckHeirloomCanInstantiate::PageId' has a wrong offset!");
static_assert(offsetof(HeirloomService_CheckHeirloomCanInstantiate, ReturnValue) == 0x00000C, "Member 'HeirloomService_CheckHeirloomCanInstantiate::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomService.CheckHeirloomGemItemCanInlaidByAffix
// 0x0010 (0x0010 - 0x0000)
struct HeirloomService_CheckHeirloomGemItemCanInlaidByAffix final
{
public:
	int32                                         HeirloomId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GemItemId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeirloomService_CheckHeirloomGemItemCanInlaidByAffix) == 0x000004, "Wrong alignment on HeirloomService_CheckHeirloomGemItemCanInlaidByAffix");
static_assert(sizeof(HeirloomService_CheckHeirloomGemItemCanInlaidByAffix) == 0x000010, "Wrong size on HeirloomService_CheckHeirloomGemItemCanInlaidByAffix");
static_assert(offsetof(HeirloomService_CheckHeirloomGemItemCanInlaidByAffix, HeirloomId) == 0x000000, "Member 'HeirloomService_CheckHeirloomGemItemCanInlaidByAffix::HeirloomId' has a wrong offset!");
static_assert(offsetof(HeirloomService_CheckHeirloomGemItemCanInlaidByAffix, GemItemId) == 0x000004, "Member 'HeirloomService_CheckHeirloomGemItemCanInlaidByAffix::GemItemId' has a wrong offset!");
static_assert(offsetof(HeirloomService_CheckHeirloomGemItemCanInlaidByAffix, SlotId) == 0x000008, "Member 'HeirloomService_CheckHeirloomGemItemCanInlaidByAffix::SlotId' has a wrong offset!");
static_assert(offsetof(HeirloomService_CheckHeirloomGemItemCanInlaidByAffix, ReturnValue) == 0x00000C, "Member 'HeirloomService_CheckHeirloomGemItemCanInlaidByAffix::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomService.GetHeirloomGearGemArrayByMinorType
// 0x0018 (0x0018 - 0x0000)
struct HeirloomService_GetHeirloomGearGemArrayByMinorType final
{
public:
	ETGFProtoTgfEnItemMinorType                   ItemMinorType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHeirloomGearGem*>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_GetHeirloomGearGemArrayByMinorType) == 0x000008, "Wrong alignment on HeirloomService_GetHeirloomGearGemArrayByMinorType");
static_assert(sizeof(HeirloomService_GetHeirloomGearGemArrayByMinorType) == 0x000018, "Wrong size on HeirloomService_GetHeirloomGearGemArrayByMinorType");
static_assert(offsetof(HeirloomService_GetHeirloomGearGemArrayByMinorType, ItemMinorType) == 0x000000, "Member 'HeirloomService_GetHeirloomGearGemArrayByMinorType::ItemMinorType' has a wrong offset!");
static_assert(offsetof(HeirloomService_GetHeirloomGearGemArrayByMinorType, ReturnValue) == 0x000008, "Member 'HeirloomService_GetHeirloomGearGemArrayByMinorType::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomService.GetHeirloomGearGemById
// 0x0010 (0x0010 - 0x0000)
struct HeirloomService_GetHeirloomGearGemById final
{
public:
	int32                                         GearGemId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHeirloomGearGem*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_GetHeirloomGearGemById) == 0x000008, "Wrong alignment on HeirloomService_GetHeirloomGearGemById");
static_assert(sizeof(HeirloomService_GetHeirloomGearGemById) == 0x000010, "Wrong size on HeirloomService_GetHeirloomGearGemById");
static_assert(offsetof(HeirloomService_GetHeirloomGearGemById, GearGemId) == 0x000000, "Member 'HeirloomService_GetHeirloomGearGemById::GearGemId' has a wrong offset!");
static_assert(offsetof(HeirloomService_GetHeirloomGearGemById, ReturnValue) == 0x000008, "Member 'HeirloomService_GetHeirloomGearGemById::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomService.GetHeirloomGearGemByItemId
// 0x0010 (0x0010 - 0x0000)
struct HeirloomService_GetHeirloomGearGemByItemId final
{
public:
	int32                                         GemItemId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHeirloomGearGem*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_GetHeirloomGearGemByItemId) == 0x000008, "Wrong alignment on HeirloomService_GetHeirloomGearGemByItemId");
static_assert(sizeof(HeirloomService_GetHeirloomGearGemByItemId) == 0x000010, "Wrong size on HeirloomService_GetHeirloomGearGemByItemId");
static_assert(offsetof(HeirloomService_GetHeirloomGearGemByItemId, GemItemId) == 0x000000, "Member 'HeirloomService_GetHeirloomGearGemByItemId::GemItemId' has a wrong offset!");
static_assert(offsetof(HeirloomService_GetHeirloomGearGemByItemId, ReturnValue) == 0x000008, "Member 'HeirloomService_GetHeirloomGearGemByItemId::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomService.GetHeirloomGearGemSlotMap
// 0x0058 (0x0058 - 0x0000)
struct HeirloomService_GetHeirloomGearGemSlotMap final
{
public:
	int32                                         HeirloomId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FHeirloomGearGemSlot>      ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_GetHeirloomGearGemSlotMap) == 0x000008, "Wrong alignment on HeirloomService_GetHeirloomGearGemSlotMap");
static_assert(sizeof(HeirloomService_GetHeirloomGearGemSlotMap) == 0x000058, "Wrong size on HeirloomService_GetHeirloomGearGemSlotMap");
static_assert(offsetof(HeirloomService_GetHeirloomGearGemSlotMap, HeirloomId) == 0x000000, "Member 'HeirloomService_GetHeirloomGearGemSlotMap::HeirloomId' has a wrong offset!");
static_assert(offsetof(HeirloomService_GetHeirloomGearGemSlotMap, ReturnValue) == 0x000008, "Member 'HeirloomService_GetHeirloomGearGemSlotMap::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomService.GetHeirloomGroupArray
// 0x0018 (0x0018 - 0x0000)
struct HeirloomService_GetHeirloomGroupArray final
{
public:
	int32                                         TypeId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHeirloomGroup*>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_GetHeirloomGroupArray) == 0x000008, "Wrong alignment on HeirloomService_GetHeirloomGroupArray");
static_assert(sizeof(HeirloomService_GetHeirloomGroupArray) == 0x000018, "Wrong size on HeirloomService_GetHeirloomGroupArray");
static_assert(offsetof(HeirloomService_GetHeirloomGroupArray, TypeId) == 0x000000, "Member 'HeirloomService_GetHeirloomGroupArray::TypeId' has a wrong offset!");
static_assert(offsetof(HeirloomService_GetHeirloomGroupArray, ReturnValue) == 0x000008, "Member 'HeirloomService_GetHeirloomGroupArray::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomService.GetHeirloomGroupById
// 0x0010 (0x0010 - 0x0000)
struct HeirloomService_GetHeirloomGroupById final
{
public:
	int32                                         HeirloomGroupId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHeirloomGroup*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_GetHeirloomGroupById) == 0x000008, "Wrong alignment on HeirloomService_GetHeirloomGroupById");
static_assert(sizeof(HeirloomService_GetHeirloomGroupById) == 0x000010, "Wrong size on HeirloomService_GetHeirloomGroupById");
static_assert(offsetof(HeirloomService_GetHeirloomGroupById, HeirloomGroupId) == 0x000000, "Member 'HeirloomService_GetHeirloomGroupById::HeirloomGroupId' has a wrong offset!");
static_assert(offsetof(HeirloomService_GetHeirloomGroupById, ReturnValue) == 0x000008, "Member 'HeirloomService_GetHeirloomGroupById::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomService.GetHeirloomTypeByItemTypeId
// 0x0008 (0x0008 - 0x0000)
struct HeirloomService_GetHeirloomTypeByItemTypeId final
{
public:
	int32                                         TypeId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_GetHeirloomTypeByItemTypeId) == 0x000004, "Wrong alignment on HeirloomService_GetHeirloomTypeByItemTypeId");
static_assert(sizeof(HeirloomService_GetHeirloomTypeByItemTypeId) == 0x000008, "Wrong size on HeirloomService_GetHeirloomTypeByItemTypeId");
static_assert(offsetof(HeirloomService_GetHeirloomTypeByItemTypeId, TypeId) == 0x000000, "Member 'HeirloomService_GetHeirloomTypeByItemTypeId::TypeId' has a wrong offset!");
static_assert(offsetof(HeirloomService_GetHeirloomTypeByItemTypeId, ReturnValue) == 0x000004, "Member 'HeirloomService_GetHeirloomTypeByItemTypeId::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomService.InlaidGearGem
// 0x000C (0x000C - 0x0000)
struct HeirloomService_InlaidGearGem final
{
public:
	int32                                         HeirloomId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GearGemId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_InlaidGearGem) == 0x000004, "Wrong alignment on HeirloomService_InlaidGearGem");
static_assert(sizeof(HeirloomService_InlaidGearGem) == 0x00000C, "Wrong size on HeirloomService_InlaidGearGem");
static_assert(offsetof(HeirloomService_InlaidGearGem, HeirloomId) == 0x000000, "Member 'HeirloomService_InlaidGearGem::HeirloomId' has a wrong offset!");
static_assert(offsetof(HeirloomService_InlaidGearGem, GearGemId) == 0x000004, "Member 'HeirloomService_InlaidGearGem::GearGemId' has a wrong offset!");
static_assert(offsetof(HeirloomService_InlaidGearGem, SlotId) == 0x000008, "Member 'HeirloomService_InlaidGearGem::SlotId' has a wrong offset!");

// Function TGFGame.HeirloomService.InstantiateHeirloom
// 0x0010 (0x0010 - 0x0000)
struct HeirloomService_InstantiateHeirloom final
{
public:
	int32                                         HeirloomId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EnItemStorageType                             StorageType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PageId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_InstantiateHeirloom) == 0x000004, "Wrong alignment on HeirloomService_InstantiateHeirloom");
static_assert(sizeof(HeirloomService_InstantiateHeirloom) == 0x000010, "Wrong size on HeirloomService_InstantiateHeirloom");
static_assert(offsetof(HeirloomService_InstantiateHeirloom, HeirloomId) == 0x000000, "Member 'HeirloomService_InstantiateHeirloom::HeirloomId' has a wrong offset!");
static_assert(offsetof(HeirloomService_InstantiateHeirloom, CostIndex) == 0x000004, "Member 'HeirloomService_InstantiateHeirloom::CostIndex' has a wrong offset!");
static_assert(offsetof(HeirloomService_InstantiateHeirloom, StorageType) == 0x000008, "Member 'HeirloomService_InstantiateHeirloom::StorageType' has a wrong offset!");
static_assert(offsetof(HeirloomService_InstantiateHeirloom, PageId) == 0x00000C, "Member 'HeirloomService_InstantiateHeirloom::PageId' has a wrong offset!");

// Function TGFGame.HeirloomService.GetAllHeirloomGroupData
// 0x0050 (0x0050 - 0x0000)
struct HeirloomService_GetAllHeirloomGroupData final
{
public:
	TMap<int32, class UHeirloomGroup*>            ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomService_GetAllHeirloomGroupData) == 0x000008, "Wrong alignment on HeirloomService_GetAllHeirloomGroupData");
static_assert(sizeof(HeirloomService_GetAllHeirloomGroupData) == 0x000050, "Wrong size on HeirloomService_GetAllHeirloomGroupData");
static_assert(offsetof(HeirloomService_GetAllHeirloomGroupData, ReturnValue) == 0x000000, "Member 'HeirloomService_GetAllHeirloomGroupData::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomGroup.GetCurHeirloomId
// 0x0004 (0x0004 - 0x0000)
struct HeirloomGroup_GetCurHeirloomId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomGroup_GetCurHeirloomId) == 0x000004, "Wrong alignment on HeirloomGroup_GetCurHeirloomId");
static_assert(sizeof(HeirloomGroup_GetCurHeirloomId) == 0x000004, "Wrong size on HeirloomGroup_GetCurHeirloomId");
static_assert(offsetof(HeirloomGroup_GetCurHeirloomId, ReturnValue) == 0x000000, "Member 'HeirloomGroup_GetCurHeirloomId::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomGroup.GetDisplayHeirloomId
// 0x0004 (0x0004 - 0x0000)
struct HeirloomGroup_GetDisplayHeirloomId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomGroup_GetDisplayHeirloomId) == 0x000004, "Wrong alignment on HeirloomGroup_GetDisplayHeirloomId");
static_assert(sizeof(HeirloomGroup_GetDisplayHeirloomId) == 0x000004, "Wrong size on HeirloomGroup_GetDisplayHeirloomId");
static_assert(offsetof(HeirloomGroup_GetDisplayHeirloomId, ReturnValue) == 0x000000, "Member 'HeirloomGroup_GetDisplayHeirloomId::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomGroup.GetEquippedGemItemId
// 0x0008 (0x0008 - 0x0000)
struct HeirloomGroup_GetEquippedGemItemId final
{
public:
	int32                                         SlotId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomGroup_GetEquippedGemItemId) == 0x000004, "Wrong alignment on HeirloomGroup_GetEquippedGemItemId");
static_assert(sizeof(HeirloomGroup_GetEquippedGemItemId) == 0x000008, "Wrong size on HeirloomGroup_GetEquippedGemItemId");
static_assert(offsetof(HeirloomGroup_GetEquippedGemItemId, SlotId) == 0x000000, "Member 'HeirloomGroup_GetEquippedGemItemId::SlotId' has a wrong offset!");
static_assert(offsetof(HeirloomGroup_GetEquippedGemItemId, ReturnValue) == 0x000004, "Member 'HeirloomGroup_GetEquippedGemItemId::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomGroup.GetGemItemIsEquipped
// 0x0008 (0x0008 - 0x0000)
struct HeirloomGroup_GetGemItemIsEquipped final
{
public:
	int32                                         GemItemId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeirloomGroup_GetGemItemIsEquipped) == 0x000004, "Wrong alignment on HeirloomGroup_GetGemItemIsEquipped");
static_assert(sizeof(HeirloomGroup_GetGemItemIsEquipped) == 0x000008, "Wrong size on HeirloomGroup_GetGemItemIsEquipped");
static_assert(offsetof(HeirloomGroup_GetGemItemIsEquipped, GemItemId) == 0x000000, "Member 'HeirloomGroup_GetGemItemIsEquipped::GemItemId' has a wrong offset!");
static_assert(offsetof(HeirloomGroup_GetGemItemIsEquipped, ReturnValue) == 0x000004, "Member 'HeirloomGroup_GetGemItemIsEquipped::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomGroup.GetHeirloomCanUpgrade
// 0x0008 (0x0008 - 0x0000)
struct HeirloomGroup_GetHeirloomCanUpgrade final
{
public:
	int32                                         HeirloomId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeirloomGroup_GetHeirloomCanUpgrade) == 0x000004, "Wrong alignment on HeirloomGroup_GetHeirloomCanUpgrade");
static_assert(sizeof(HeirloomGroup_GetHeirloomCanUpgrade) == 0x000008, "Wrong size on HeirloomGroup_GetHeirloomCanUpgrade");
static_assert(offsetof(HeirloomGroup_GetHeirloomCanUpgrade, HeirloomId) == 0x000000, "Member 'HeirloomGroup_GetHeirloomCanUpgrade::HeirloomId' has a wrong offset!");
static_assert(offsetof(HeirloomGroup_GetHeirloomCanUpgrade, ReturnValue) == 0x000004, "Member 'HeirloomGroup_GetHeirloomCanUpgrade::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomGroup.GetIsUnlock
// 0x0001 (0x0001 - 0x0000)
struct HeirloomGroup_GetIsUnlock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomGroup_GetIsUnlock) == 0x000001, "Wrong alignment on HeirloomGroup_GetIsUnlock");
static_assert(sizeof(HeirloomGroup_GetIsUnlock) == 0x000001, "Wrong size on HeirloomGroup_GetIsUnlock");
static_assert(offsetof(HeirloomGroup_GetIsUnlock, ReturnValue) == 0x000000, "Member 'HeirloomGroup_GetIsUnlock::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomGroup.GetIsValid
// 0x0001 (0x0001 - 0x0000)
struct HeirloomGroup_GetIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomGroup_GetIsValid) == 0x000001, "Wrong alignment on HeirloomGroup_GetIsValid");
static_assert(sizeof(HeirloomGroup_GetIsValid) == 0x000001, "Wrong size on HeirloomGroup_GetIsValid");
static_assert(offsetof(HeirloomGroup_GetIsValid, ReturnValue) == 0x000000, "Member 'HeirloomGroup_GetIsValid::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomGroup.GetLastHeirloomId
// 0x0004 (0x0004 - 0x0000)
struct HeirloomGroup_GetLastHeirloomId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomGroup_GetLastHeirloomId) == 0x000004, "Wrong alignment on HeirloomGroup_GetLastHeirloomId");
static_assert(sizeof(HeirloomGroup_GetLastHeirloomId) == 0x000004, "Wrong size on HeirloomGroup_GetLastHeirloomId");
static_assert(offsetof(HeirloomGroup_GetLastHeirloomId, ReturnValue) == 0x000000, "Member 'HeirloomGroup_GetLastHeirloomId::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomGroup.GetNextHeirloomId
// 0x0004 (0x0004 - 0x0000)
struct HeirloomGroup_GetNextHeirloomId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomGroup_GetNextHeirloomId) == 0x000004, "Wrong alignment on HeirloomGroup_GetNextHeirloomId");
static_assert(sizeof(HeirloomGroup_GetNextHeirloomId) == 0x000004, "Wrong size on HeirloomGroup_GetNextHeirloomId");
static_assert(offsetof(HeirloomGroup_GetNextHeirloomId, ReturnValue) == 0x000000, "Member 'HeirloomGroup_GetNextHeirloomId::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomGearGem.GetIsUnlock
// 0x0001 (0x0001 - 0x0000)
struct HeirloomGearGem_GetIsUnlock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomGearGem_GetIsUnlock) == 0x000001, "Wrong alignment on HeirloomGearGem_GetIsUnlock");
static_assert(sizeof(HeirloomGearGem_GetIsUnlock) == 0x000001, "Wrong size on HeirloomGearGem_GetIsUnlock");
static_assert(offsetof(HeirloomGearGem_GetIsUnlock, ReturnValue) == 0x000000, "Member 'HeirloomGearGem_GetIsUnlock::ReturnValue' has a wrong offset!");

// Function TGFGame.HeirloomGearGem.GetIsValid
// 0x0001 (0x0001 - 0x0000)
struct HeirloomGearGem_GetIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeirloomGearGem_GetIsValid) == 0x000001, "Wrong alignment on HeirloomGearGem_GetIsValid");
static_assert(sizeof(HeirloomGearGem_GetIsValid) == 0x000001, "Wrong size on HeirloomGearGem_GetIsValid");
static_assert(offsetof(HeirloomGearGem_GetIsValid, ReturnValue) == 0x000000, "Member 'HeirloomGearGem_GetIsValid::ReturnValue' has a wrong offset!");

// Function TGFGame.HttpReportService.ReportError
// 0x00A0 (0x00A0 - 0x0000)
struct HttpReportService_ReportError final
{
public:
	struct FTGFReportRecord                       Record;                                            // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 OpenID;                                            // 0x0090(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpReportService_ReportError) == 0x000008, "Wrong alignment on HttpReportService_ReportError");
static_assert(sizeof(HttpReportService_ReportError) == 0x0000A0, "Wrong size on HttpReportService_ReportError");
static_assert(offsetof(HttpReportService_ReportError, Record) == 0x000000, "Member 'HttpReportService_ReportError::Record' has a wrong offset!");
static_assert(offsetof(HttpReportService_ReportError, OpenID) == 0x000090, "Member 'HttpReportService_ReportError::OpenID' has a wrong offset!");

// Function TGFGame.HttpReportService.ReportEvent
// 0x00A0 (0x00A0 - 0x0000)
struct HttpReportService_ReportEvent final
{
public:
	struct FTGFReportRecord                       Record;                                            // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 OpenID;                                            // 0x0090(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpReportService_ReportEvent) == 0x000008, "Wrong alignment on HttpReportService_ReportEvent");
static_assert(sizeof(HttpReportService_ReportEvent) == 0x0000A0, "Wrong size on HttpReportService_ReportEvent");
static_assert(offsetof(HttpReportService_ReportEvent, Record) == 0x000000, "Member 'HttpReportService_ReportEvent::Record' has a wrong offset!");
static_assert(offsetof(HttpReportService_ReportEvent, OpenID) == 0x000090, "Member 'HttpReportService_ReportEvent::OpenID' has a wrong offset!");

// Function TGFGame.RainbowConfigService.GetConfig
// 0x0020 (0x0020 - 0x0000)
struct RainbowConfigService_GetConfig final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RainbowConfigService_GetConfig) == 0x000008, "Wrong alignment on RainbowConfigService_GetConfig");
static_assert(sizeof(RainbowConfigService_GetConfig) == 0x000020, "Wrong size on RainbowConfigService_GetConfig");
static_assert(offsetof(RainbowConfigService_GetConfig, Key) == 0x000000, "Member 'RainbowConfigService_GetConfig::Key' has a wrong offset!");
static_assert(offsetof(RainbowConfigService_GetConfig, ReturnValue) == 0x000010, "Member 'RainbowConfigService_GetConfig::ReturnValue' has a wrong offset!");

// Function TGFGame.RainbowConfigService.GetIntConfig
// 0x0018 (0x0018 - 0x0000)
struct RainbowConfigService_GetIntConfig final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RainbowConfigService_GetIntConfig) == 0x000008, "Wrong alignment on RainbowConfigService_GetIntConfig");
static_assert(sizeof(RainbowConfigService_GetIntConfig) == 0x000018, "Wrong size on RainbowConfigService_GetIntConfig");
static_assert(offsetof(RainbowConfigService_GetIntConfig, Key) == 0x000000, "Member 'RainbowConfigService_GetIntConfig::Key' has a wrong offset!");
static_assert(offsetof(RainbowConfigService_GetIntConfig, ReturnValue) == 0x000010, "Member 'RainbowConfigService_GetIntConfig::ReturnValue' has a wrong offset!");

// Function TGFGame.RankUserData.Create
// 0x0010 (0x0010 - 0x0000)
struct RankUserData_Create final
{
public:
	int32                                         RankIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URankUserData*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankUserData_Create) == 0x000008, "Wrong alignment on RankUserData_Create");
static_assert(sizeof(RankUserData_Create) == 0x000010, "Wrong size on RankUserData_Create");
static_assert(offsetof(RankUserData_Create, RankIndex) == 0x000000, "Member 'RankUserData_Create::RankIndex' has a wrong offset!");
static_assert(offsetof(RankUserData_Create, ReturnValue) == 0x000008, "Member 'RankUserData_Create::ReturnValue' has a wrong offset!");

// Function TGFGame.RankUserData.IsContainsRank
// 0x0010 (0x0010 - 0x0000)
struct RankUserData_IsContainsRank final
{
public:
	class URankUserData*                          RankData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RankUserData_IsContainsRank) == 0x000008, "Wrong alignment on RankUserData_IsContainsRank");
static_assert(sizeof(RankUserData_IsContainsRank) == 0x000010, "Wrong size on RankUserData_IsContainsRank");
static_assert(offsetof(RankUserData_IsContainsRank, RankData) == 0x000000, "Member 'RankUserData_IsContainsRank::RankData' has a wrong offset!");
static_assert(offsetof(RankUserData_IsContainsRank, ReturnValue) == 0x000008, "Member 'RankUserData_IsContainsRank::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetRoomInvitation
// 0x0008 (0x0008 - 0x0000)
struct PVPService_GetRoomInvitation final
{
public:
	class UPVPRoomInvitation*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetRoomInvitation) == 0x000008, "Wrong alignment on PVPService_GetRoomInvitation");
static_assert(sizeof(PVPService_GetRoomInvitation) == 0x000008, "Wrong size on PVPService_GetRoomInvitation");
static_assert(offsetof(PVPService_GetRoomInvitation, ReturnValue) == 0x000000, "Member 'PVPService_GetRoomInvitation::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomBatchGetReq
// 0x0028 (0x0028 - 0x0000)
struct PVPService_SendRoomBatchGetReq final
{
public:
	TArray<class UPVPRoomKey*>                    InRoomKeys;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         InRoomNames;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInSearch;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PVPService_SendRoomBatchGetReq) == 0x000008, "Wrong alignment on PVPService_SendRoomBatchGetReq");
static_assert(sizeof(PVPService_SendRoomBatchGetReq) == 0x000028, "Wrong size on PVPService_SendRoomBatchGetReq");
static_assert(offsetof(PVPService_SendRoomBatchGetReq, InRoomKeys) == 0x000000, "Member 'PVPService_SendRoomBatchGetReq::InRoomKeys' has a wrong offset!");
static_assert(offsetof(PVPService_SendRoomBatchGetReq, InRoomNames) == 0x000010, "Member 'PVPService_SendRoomBatchGetReq::InRoomNames' has a wrong offset!");
static_assert(offsetof(PVPService_SendRoomBatchGetReq, bInSearch) == 0x000020, "Member 'PVPService_SendRoomBatchGetReq::bInSearch' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomChangeMemberPosReq
// 0x0018 (0x0018 - 0x0000)
struct PVPService_SendRoomChangeMemberPosReq final
{
public:
	struct FUserKey                               InMemberUserKey;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTargetPos;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsTeamMember;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PVPService_SendRoomChangeMemberPosReq) == 0x000008, "Wrong alignment on PVPService_SendRoomChangeMemberPosReq");
static_assert(sizeof(PVPService_SendRoomChangeMemberPosReq) == 0x000018, "Wrong size on PVPService_SendRoomChangeMemberPosReq");
static_assert(offsetof(PVPService_SendRoomChangeMemberPosReq, InMemberUserKey) == 0x000000, "Member 'PVPService_SendRoomChangeMemberPosReq::InMemberUserKey' has a wrong offset!");
static_assert(offsetof(PVPService_SendRoomChangeMemberPosReq, InTargetPos) == 0x000010, "Member 'PVPService_SendRoomChangeMemberPosReq::InTargetPos' has a wrong offset!");
static_assert(offsetof(PVPService_SendRoomChangeMemberPosReq, InIsTeamMember) == 0x000014, "Member 'PVPService_SendRoomChangeMemberPosReq::InIsTeamMember' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomChangeMySelfPosReq
// 0x0008 (0x0008 - 0x0000)
struct PVPService_SendRoomChangeMySelfPosReq final
{
public:
	int32                                         InTargetPos;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsTeamMember;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PVPService_SendRoomChangeMySelfPosReq) == 0x000004, "Wrong alignment on PVPService_SendRoomChangeMySelfPosReq");
static_assert(sizeof(PVPService_SendRoomChangeMySelfPosReq) == 0x000008, "Wrong size on PVPService_SendRoomChangeMySelfPosReq");
static_assert(offsetof(PVPService_SendRoomChangeMySelfPosReq, InTargetPos) == 0x000000, "Member 'PVPService_SendRoomChangeMySelfPosReq::InTargetPos' has a wrong offset!");
static_assert(offsetof(PVPService_SendRoomChangeMySelfPosReq, InIsTeamMember) == 0x000004, "Member 'PVPService_SendRoomChangeMySelfPosReq::InIsTeamMember' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomCreateReq
// 0x0020 (0x0020 - 0x0000)
struct PVPService_SendRoomCreateReq final
{
public:
	class FString                                 InRoomName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InRoomKeyword;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomCreateReq) == 0x000008, "Wrong alignment on PVPService_SendRoomCreateReq");
static_assert(sizeof(PVPService_SendRoomCreateReq) == 0x000020, "Wrong size on PVPService_SendRoomCreateReq");
static_assert(offsetof(PVPService_SendRoomCreateReq, InRoomName) == 0x000000, "Member 'PVPService_SendRoomCreateReq::InRoomName' has a wrong offset!");
static_assert(offsetof(PVPService_SendRoomCreateReq, InRoomKeyword) == 0x000010, "Member 'PVPService_SendRoomCreateReq::InRoomKeyword' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomEnterReq
// 0x0020 (0x0020 - 0x0000)
struct PVPService_SendRoomEnterReq final
{
public:
	class UPVPRoomKey*                            InRoomKey;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InRoomKeyword;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInvited;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PVPService_SendRoomEnterReq) == 0x000008, "Wrong alignment on PVPService_SendRoomEnterReq");
static_assert(sizeof(PVPService_SendRoomEnterReq) == 0x000020, "Wrong size on PVPService_SendRoomEnterReq");
static_assert(offsetof(PVPService_SendRoomEnterReq, InRoomKey) == 0x000000, "Member 'PVPService_SendRoomEnterReq::InRoomKey' has a wrong offset!");
static_assert(offsetof(PVPService_SendRoomEnterReq, InRoomKeyword) == 0x000008, "Member 'PVPService_SendRoomEnterReq::InRoomKeyword' has a wrong offset!");
static_assert(offsetof(PVPService_SendRoomEnterReq, bInInvited) == 0x000018, "Member 'PVPService_SendRoomEnterReq::bInInvited' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomIgnoreRoomAllInviteReq
// 0x0008 (0x0008 - 0x0000)
struct PVPService_SendRoomIgnoreRoomAllInviteReq final
{
public:
	class UPVPRoomKey*                            InRoomKey;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomIgnoreRoomAllInviteReq) == 0x000008, "Wrong alignment on PVPService_SendRoomIgnoreRoomAllInviteReq");
static_assert(sizeof(PVPService_SendRoomIgnoreRoomAllInviteReq) == 0x000008, "Wrong size on PVPService_SendRoomIgnoreRoomAllInviteReq");
static_assert(offsetof(PVPService_SendRoomIgnoreRoomAllInviteReq, InRoomKey) == 0x000000, "Member 'PVPService_SendRoomIgnoreRoomAllInviteReq::InRoomKey' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomInviteAcceptReq
// 0x0018 (0x0018 - 0x0000)
struct PVPService_SendRoomInviteAcceptReq final
{
public:
	struct FUserKey                               InSendUser;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPVPRoomKey*                            InRoomKey;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomInviteAcceptReq) == 0x000008, "Wrong alignment on PVPService_SendRoomInviteAcceptReq");
static_assert(sizeof(PVPService_SendRoomInviteAcceptReq) == 0x000018, "Wrong size on PVPService_SendRoomInviteAcceptReq");
static_assert(offsetof(PVPService_SendRoomInviteAcceptReq, InSendUser) == 0x000000, "Member 'PVPService_SendRoomInviteAcceptReq::InSendUser' has a wrong offset!");
static_assert(offsetof(PVPService_SendRoomInviteAcceptReq, InRoomKey) == 0x000010, "Member 'PVPService_SendRoomInviteAcceptReq::InRoomKey' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomInviteRejectReq
// 0x0018 (0x0018 - 0x0000)
struct PVPService_SendRoomInviteRejectReq final
{
public:
	struct FUserKey                               InSendUser;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPVPRoomKey*                            InRoomKey;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomInviteRejectReq) == 0x000008, "Wrong alignment on PVPService_SendRoomInviteRejectReq");
static_assert(sizeof(PVPService_SendRoomInviteRejectReq) == 0x000018, "Wrong size on PVPService_SendRoomInviteRejectReq");
static_assert(offsetof(PVPService_SendRoomInviteRejectReq, InSendUser) == 0x000000, "Member 'PVPService_SendRoomInviteRejectReq::InSendUser' has a wrong offset!");
static_assert(offsetof(PVPService_SendRoomInviteRejectReq, InRoomKey) == 0x000010, "Member 'PVPService_SendRoomInviteRejectReq::InRoomKey' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomInviteSendReq
// 0x0010 (0x0010 - 0x0000)
struct PVPService_SendRoomInviteSendReq final
{
public:
	struct FUserKey                               InTargetUser;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomInviteSendReq) == 0x000008, "Wrong alignment on PVPService_SendRoomInviteSendReq");
static_assert(sizeof(PVPService_SendRoomInviteSendReq) == 0x000010, "Wrong size on PVPService_SendRoomInviteSendReq");
static_assert(offsetof(PVPService_SendRoomInviteSendReq, InTargetUser) == 0x000000, "Member 'PVPService_SendRoomInviteSendReq::InTargetUser' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomKeywordChangeReq
// 0x0010 (0x0010 - 0x0000)
struct PVPService_SendRoomKeywordChangeReq final
{
public:
	class FString                                 InRoomKeyword;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomKeywordChangeReq) == 0x000008, "Wrong alignment on PVPService_SendRoomKeywordChangeReq");
static_assert(sizeof(PVPService_SendRoomKeywordChangeReq) == 0x000010, "Wrong size on PVPService_SendRoomKeywordChangeReq");
static_assert(offsetof(PVPService_SendRoomKeywordChangeReq, InRoomKeyword) == 0x000000, "Member 'PVPService_SendRoomKeywordChangeReq::InRoomKeyword' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomKickOffMemberReq
// 0x0010 (0x0010 - 0x0000)
struct PVPService_SendRoomKickOffMemberReq final
{
public:
	struct FUserKey                               InMemberKey;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomKickOffMemberReq) == 0x000008, "Wrong alignment on PVPService_SendRoomKickOffMemberReq");
static_assert(sizeof(PVPService_SendRoomKickOffMemberReq) == 0x000010, "Wrong size on PVPService_SendRoomKickOffMemberReq");
static_assert(offsetof(PVPService_SendRoomKickOffMemberReq, InMemberKey) == 0x000000, "Member 'PVPService_SendRoomKickOffMemberReq::InMemberKey' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomNameChangeReq
// 0x0010 (0x0010 - 0x0000)
struct PVPService_SendRoomNameChangeReq final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomNameChangeReq) == 0x000008, "Wrong alignment on PVPService_SendRoomNameChangeReq");
static_assert(sizeof(PVPService_SendRoomNameChangeReq) == 0x000010, "Wrong size on PVPService_SendRoomNameChangeReq");
static_assert(offsetof(PVPService_SendRoomNameChangeReq, InName) == 0x000000, "Member 'PVPService_SendRoomNameChangeReq::InName' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomRefreshReq
// 0x0008 (0x0008 - 0x0000)
struct PVPService_SendRoomRefreshReq final
{
public:
	class UPVPRoomKey*                            InRoomKey;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomRefreshReq) == 0x000008, "Wrong alignment on PVPService_SendRoomRefreshReq");
static_assert(sizeof(PVPService_SendRoomRefreshReq) == 0x000008, "Wrong size on PVPService_SendRoomRefreshReq");
static_assert(offsetof(PVPService_SendRoomRefreshReq, InRoomKey) == 0x000000, "Member 'PVPService_SendRoomRefreshReq::InRoomKey' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomSelectBattleMapReq
// 0x0004 (0x0004 - 0x0000)
struct PVPService_SendRoomSelectBattleMapReq final
{
public:
	int32                                         InMapId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomSelectBattleMapReq) == 0x000004, "Wrong alignment on PVPService_SendRoomSelectBattleMapReq");
static_assert(sizeof(PVPService_SendRoomSelectBattleMapReq) == 0x000004, "Wrong size on PVPService_SendRoomSelectBattleMapReq");
static_assert(offsetof(PVPService_SendRoomSelectBattleMapReq, InMapId) == 0x000000, "Member 'PVPService_SendRoomSelectBattleMapReq::InMapId' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomSelectBattleTypeReq
// 0x0004 (0x0004 - 0x0000)
struct PVPService_SendRoomSelectBattleTypeReq final
{
public:
	int32                                         InBattleType;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomSelectBattleTypeReq) == 0x000004, "Wrong alignment on PVPService_SendRoomSelectBattleTypeReq");
static_assert(sizeof(PVPService_SendRoomSelectBattleTypeReq) == 0x000004, "Wrong size on PVPService_SendRoomSelectBattleTypeReq");
static_assert(offsetof(PVPService_SendRoomSelectBattleTypeReq, InBattleType) == 0x000000, "Member 'PVPService_SendRoomSelectBattleTypeReq::InBattleType' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomStartBattleReq
// 0x0010 (0x0010 - 0x0000)
struct PVPService_SendRoomStartBattleReq final
{
public:
	class FString                                 InRegion;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomStartBattleReq) == 0x000008, "Wrong alignment on PVPService_SendRoomStartBattleReq");
static_assert(sizeof(PVPService_SendRoomStartBattleReq) == 0x000010, "Wrong size on PVPService_SendRoomStartBattleReq");
static_assert(offsetof(PVPService_SendRoomStartBattleReq, InRegion) == 0x000000, "Member 'PVPService_SendRoomStartBattleReq::InRegion' has a wrong offset!");

// Function TGFGame.PVPService.SendRoomTransferOwnerReq
// 0x0010 (0x0010 - 0x0000)
struct PVPService_SendRoomTransferOwnerReq final
{
public:
	struct FUserKey                               InNewOwnerUserKey;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SendRoomTransferOwnerReq) == 0x000008, "Wrong alignment on PVPService_SendRoomTransferOwnerReq");
static_assert(sizeof(PVPService_SendRoomTransferOwnerReq) == 0x000010, "Wrong size on PVPService_SendRoomTransferOwnerReq");
static_assert(offsetof(PVPService_SendRoomTransferOwnerReq, InNewOwnerUserKey) == 0x000000, "Member 'PVPService_SendRoomTransferOwnerReq::InNewOwnerUserKey' has a wrong offset!");

// Function TGFGame.PVPService.SetAutoEnterRoom
// 0x0001 (0x0001 - 0x0000)
struct PVPService_SetAutoEnterRoom final
{
public:
	bool                                          InAutoEnterRoom;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SetAutoEnterRoom) == 0x000001, "Wrong alignment on PVPService_SetAutoEnterRoom");
static_assert(sizeof(PVPService_SetAutoEnterRoom) == 0x000001, "Wrong size on PVPService_SetAutoEnterRoom");
static_assert(offsetof(PVPService_SetAutoEnterRoom, InAutoEnterRoom) == 0x000000, "Member 'PVPService_SetAutoEnterRoom::InAutoEnterRoom' has a wrong offset!");

// Function TGFGame.PVPService.SetHasEnterRoomConfirmed
// 0x0001 (0x0001 - 0x0000)
struct PVPService_SetHasEnterRoomConfirmed final
{
public:
	bool                                          InHasEnterRoomConfirmed;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_SetHasEnterRoomConfirmed) == 0x000001, "Wrong alignment on PVPService_SetHasEnterRoomConfirmed");
static_assert(sizeof(PVPService_SetHasEnterRoomConfirmed) == 0x000001, "Wrong size on PVPService_SetHasEnterRoomConfirmed");
static_assert(offsetof(PVPService_SetHasEnterRoomConfirmed, InHasEnterRoomConfirmed) == 0x000000, "Member 'PVPService_SetHasEnterRoomConfirmed::InHasEnterRoomConfirmed' has a wrong offset!");

// Function TGFGame.PVPService.GetAutoEnterRoom
// 0x0001 (0x0001 - 0x0000)
struct PVPService_GetAutoEnterRoom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetAutoEnterRoom) == 0x000001, "Wrong alignment on PVPService_GetAutoEnterRoom");
static_assert(sizeof(PVPService_GetAutoEnterRoom) == 0x000001, "Wrong size on PVPService_GetAutoEnterRoom");
static_assert(offsetof(PVPService_GetAutoEnterRoom, ReturnValue) == 0x000000, "Member 'PVPService_GetAutoEnterRoom::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetConsecutiveInvitationCount
// 0x0004 (0x0004 - 0x0000)
struct PVPService_GetConsecutiveInvitationCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetConsecutiveInvitationCount) == 0x000004, "Wrong alignment on PVPService_GetConsecutiveInvitationCount");
static_assert(sizeof(PVPService_GetConsecutiveInvitationCount) == 0x000004, "Wrong size on PVPService_GetConsecutiveInvitationCount");
static_assert(offsetof(PVPService_GetConsecutiveInvitationCount, ReturnValue) == 0x000000, "Member 'PVPService_GetConsecutiveInvitationCount::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetCurrentRoomInfo
// 0x0008 (0x0008 - 0x0000)
struct PVPService_GetCurrentRoomInfo final
{
public:
	class UPVPRoomListItemObject*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetCurrentRoomInfo) == 0x000008, "Wrong alignment on PVPService_GetCurrentRoomInfo");
static_assert(sizeof(PVPService_GetCurrentRoomInfo) == 0x000008, "Wrong size on PVPService_GetCurrentRoomInfo");
static_assert(offsetof(PVPService_GetCurrentRoomInfo, ReturnValue) == 0x000000, "Member 'PVPService_GetCurrentRoomInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetHasEnterRoomConfirmed
// 0x0001 (0x0001 - 0x0000)
struct PVPService_GetHasEnterRoomConfirmed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetHasEnterRoomConfirmed) == 0x000001, "Wrong alignment on PVPService_GetHasEnterRoomConfirmed");
static_assert(sizeof(PVPService_GetHasEnterRoomConfirmed) == 0x000001, "Wrong size on PVPService_GetHasEnterRoomConfirmed");
static_assert(offsetof(PVPService_GetHasEnterRoomConfirmed, ReturnValue) == 0x000000, "Member 'PVPService_GetHasEnterRoomConfirmed::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetIndexInWatchMembers
// 0x0018 (0x0018 - 0x0000)
struct PVPService_GetIndexInWatchMembers final
{
public:
	struct FUserKey                               InUserKey;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PVPService_GetIndexInWatchMembers) == 0x000008, "Wrong alignment on PVPService_GetIndexInWatchMembers");
static_assert(sizeof(PVPService_GetIndexInWatchMembers) == 0x000018, "Wrong size on PVPService_GetIndexInWatchMembers");
static_assert(offsetof(PVPService_GetIndexInWatchMembers, InUserKey) == 0x000000, "Member 'PVPService_GetIndexInWatchMembers::InUserKey' has a wrong offset!");
static_assert(offsetof(PVPService_GetIndexInWatchMembers, ReturnValue) == 0x000010, "Member 'PVPService_GetIndexInWatchMembers::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetInviteRoomKey
// 0x0008 (0x0008 - 0x0000)
struct PVPService_GetInviteRoomKey final
{
public:
	class UPVPRoomKey*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetInviteRoomKey) == 0x000008, "Wrong alignment on PVPService_GetInviteRoomKey");
static_assert(sizeof(PVPService_GetInviteRoomKey) == 0x000008, "Wrong size on PVPService_GetInviteRoomKey");
static_assert(offsetof(PVPService_GetInviteRoomKey, ReturnValue) == 0x000000, "Member 'PVPService_GetInviteRoomKey::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetMemberCamp
// 0x0018 (0x0018 - 0x0000)
struct PVPService_GetMemberCamp final
{
public:
	struct FUserKey                               InUserKey;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPVPRoomMemberCamp                            ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PVPService_GetMemberCamp) == 0x000008, "Wrong alignment on PVPService_GetMemberCamp");
static_assert(sizeof(PVPService_GetMemberCamp) == 0x000018, "Wrong size on PVPService_GetMemberCamp");
static_assert(offsetof(PVPService_GetMemberCamp, InUserKey) == 0x000000, "Member 'PVPService_GetMemberCamp::InUserKey' has a wrong offset!");
static_assert(offsetof(PVPService_GetMemberCamp, ReturnValue) == 0x000010, "Member 'PVPService_GetMemberCamp::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetRoomAudienceMaxNum
// 0x0004 (0x0004 - 0x0000)
struct PVPService_GetRoomAudienceMaxNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetRoomAudienceMaxNum) == 0x000004, "Wrong alignment on PVPService_GetRoomAudienceMaxNum");
static_assert(sizeof(PVPService_GetRoomAudienceMaxNum) == 0x000004, "Wrong size on PVPService_GetRoomAudienceMaxNum");
static_assert(offsetof(PVPService_GetRoomAudienceMaxNum, ReturnValue) == 0x000000, "Member 'PVPService_GetRoomAudienceMaxNum::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetRoomInfo
// 0x0010 (0x0010 - 0x0000)
struct PVPService_GetRoomInfo final
{
public:
	class UPVPRoomKey*                            InRoomKey;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPVPRoomListItemObject*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetRoomInfo) == 0x000008, "Wrong alignment on PVPService_GetRoomInfo");
static_assert(sizeof(PVPService_GetRoomInfo) == 0x000010, "Wrong size on PVPService_GetRoomInfo");
static_assert(offsetof(PVPService_GetRoomInfo, InRoomKey) == 0x000000, "Member 'PVPService_GetRoomInfo::InRoomKey' has a wrong offset!");
static_assert(offsetof(PVPService_GetRoomInfo, ReturnValue) == 0x000008, "Member 'PVPService_GetRoomInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetRoomInfos
// 0x0010 (0x0010 - 0x0000)
struct PVPService_GetRoomInfos final
{
public:
	TArray<class UPVPRoomListItemObject*>         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetRoomInfos) == 0x000008, "Wrong alignment on PVPService_GetRoomInfos");
static_assert(sizeof(PVPService_GetRoomInfos) == 0x000010, "Wrong size on PVPService_GetRoomInfos");
static_assert(offsetof(PVPService_GetRoomInfos, ReturnValue) == 0x000000, "Member 'PVPService_GetRoomInfos::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetRoomMemberMaxNum
// 0x0004 (0x0004 - 0x0000)
struct PVPService_GetRoomMemberMaxNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetRoomMemberMaxNum) == 0x000004, "Wrong alignment on PVPService_GetRoomMemberMaxNum");
static_assert(sizeof(PVPService_GetRoomMemberMaxNum) == 0x000004, "Wrong size on PVPService_GetRoomMemberMaxNum");
static_assert(offsetof(PVPService_GetRoomMemberMaxNum, ReturnValue) == 0x000000, "Member 'PVPService_GetRoomMemberMaxNum::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetRoomNameMaxLength
// 0x0004 (0x0004 - 0x0000)
struct PVPService_GetRoomNameMaxLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetRoomNameMaxLength) == 0x000004, "Wrong alignment on PVPService_GetRoomNameMaxLength");
static_assert(sizeof(PVPService_GetRoomNameMaxLength) == 0x000004, "Wrong size on PVPService_GetRoomNameMaxLength");
static_assert(offsetof(PVPService_GetRoomNameMaxLength, ReturnValue) == 0x000000, "Member 'PVPService_GetRoomNameMaxLength::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetRoomPasswordMaxLength
// 0x0004 (0x0004 - 0x0000)
struct PVPService_GetRoomPasswordMaxLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetRoomPasswordMaxLength) == 0x000004, "Wrong alignment on PVPService_GetRoomPasswordMaxLength");
static_assert(sizeof(PVPService_GetRoomPasswordMaxLength) == 0x000004, "Wrong size on PVPService_GetRoomPasswordMaxLength");
static_assert(offsetof(PVPService_GetRoomPasswordMaxLength, ReturnValue) == 0x000000, "Member 'PVPService_GetRoomPasswordMaxLength::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.GetTeamOwnerUserKey
// 0x0010 (0x0010 - 0x0000)
struct PVPService_GetTeamOwnerUserKey final
{
public:
	struct FUserKey                               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_GetTeamOwnerUserKey) == 0x000008, "Wrong alignment on PVPService_GetTeamOwnerUserKey");
static_assert(sizeof(PVPService_GetTeamOwnerUserKey) == 0x000010, "Wrong size on PVPService_GetTeamOwnerUserKey");
static_assert(offsetof(PVPService_GetTeamOwnerUserKey, ReturnValue) == 0x000000, "Member 'PVPService_GetTeamOwnerUserKey::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.IsAudienceFull
// 0x0001 (0x0001 - 0x0000)
struct PVPService_IsAudienceFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_IsAudienceFull) == 0x000001, "Wrong alignment on PVPService_IsAudienceFull");
static_assert(sizeof(PVPService_IsAudienceFull) == 0x000001, "Wrong size on PVPService_IsAudienceFull");
static_assert(offsetof(PVPService_IsAudienceFull, ReturnValue) == 0x000000, "Member 'PVPService_IsAudienceFull::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.IsLeader
// 0x0008 (0x0008 - 0x0000)
struct PVPService_IsLeader final
{
public:
	int32                                         InSlotId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsTeamMember;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PVPService_IsLeader) == 0x000004, "Wrong alignment on PVPService_IsLeader");
static_assert(sizeof(PVPService_IsLeader) == 0x000008, "Wrong size on PVPService_IsLeader");
static_assert(offsetof(PVPService_IsLeader, InSlotId) == 0x000000, "Member 'PVPService_IsLeader::InSlotId' has a wrong offset!");
static_assert(offsetof(PVPService_IsLeader, InIsTeamMember) == 0x000004, "Member 'PVPService_IsLeader::InIsTeamMember' has a wrong offset!");
static_assert(offsetof(PVPService_IsLeader, ReturnValue) == 0x000005, "Member 'PVPService_IsLeader::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.IsMySelfOwner
// 0x0001 (0x0001 - 0x0000)
struct PVPService_IsMySelfOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_IsMySelfOwner) == 0x000001, "Wrong alignment on PVPService_IsMySelfOwner");
static_assert(sizeof(PVPService_IsMySelfOwner) == 0x000001, "Wrong size on PVPService_IsMySelfOwner");
static_assert(offsetof(PVPService_IsMySelfOwner, ReturnValue) == 0x000000, "Member 'PVPService_IsMySelfOwner::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.IsMySelfTeamMember
// 0x0001 (0x0001 - 0x0000)
struct PVPService_IsMySelfTeamMember final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPService_IsMySelfTeamMember) == 0x000001, "Wrong alignment on PVPService_IsMySelfTeamMember");
static_assert(sizeof(PVPService_IsMySelfTeamMember) == 0x000001, "Wrong size on PVPService_IsMySelfTeamMember");
static_assert(offsetof(PVPService_IsMySelfTeamMember, ReturnValue) == 0x000000, "Member 'PVPService_IsMySelfTeamMember::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.IsOwner
// 0x0018 (0x0018 - 0x0000)
struct PVPService_IsOwner final
{
public:
	struct FUserKey                               InUserKey;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PVPService_IsOwner) == 0x000008, "Wrong alignment on PVPService_IsOwner");
static_assert(sizeof(PVPService_IsOwner) == 0x000018, "Wrong size on PVPService_IsOwner");
static_assert(offsetof(PVPService_IsOwner, InUserKey) == 0x000000, "Member 'PVPService_IsOwner::InUserKey' has a wrong offset!");
static_assert(offsetof(PVPService_IsOwner, ReturnValue) == 0x000010, "Member 'PVPService_IsOwner::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPService.IsPlayerReady
// 0x0018 (0x0018 - 0x0000)
struct PVPService_IsPlayerReady final
{
public:
	struct FUserKey                               InUserKey;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PVPService_IsPlayerReady) == 0x000008, "Wrong alignment on PVPService_IsPlayerReady");
static_assert(sizeof(PVPService_IsPlayerReady) == 0x000018, "Wrong size on PVPService_IsPlayerReady");
static_assert(offsetof(PVPService_IsPlayerReady, InUserKey) == 0x000000, "Member 'PVPService_IsPlayerReady::InUserKey' has a wrong offset!");
static_assert(offsetof(PVPService_IsPlayerReady, ReturnValue) == 0x000010, "Member 'PVPService_IsPlayerReady::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetAllFirstLevelAttributeId
// 0x0004 (0x0004 - 0x0000)
struct InventoryService_GetAllFirstLevelAttributeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetAllFirstLevelAttributeId) == 0x000004, "Wrong alignment on InventoryService_GetAllFirstLevelAttributeId");
static_assert(sizeof(InventoryService_GetAllFirstLevelAttributeId) == 0x000004, "Wrong size on InventoryService_GetAllFirstLevelAttributeId");
static_assert(offsetof(InventoryService_GetAllFirstLevelAttributeId, ReturnValue) == 0x000000, "Member 'InventoryService_GetAllFirstLevelAttributeId::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetDPHAttributeId
// 0x0004 (0x0004 - 0x0000)
struct InventoryService_GetDPHAttributeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetDPHAttributeId) == 0x000004, "Wrong alignment on InventoryService_GetDPHAttributeId");
static_assert(sizeof(InventoryService_GetDPHAttributeId) == 0x000004, "Wrong size on InventoryService_GetDPHAttributeId");
static_assert(offsetof(InventoryService_GetDPHAttributeId, ReturnValue) == 0x000000, "Member 'InventoryService_GetDPHAttributeId::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetRoleAttributeValue
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_GetRoleAttributeValue final
{
public:
	class URoleAttributeInfo*                     AttributeInfo;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EnRoleDisplayAttribueID                       Type_id;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetRoleAttributeValue) == 0x000008, "Wrong alignment on InventoryService_GetRoleAttributeValue");
static_assert(sizeof(InventoryService_GetRoleAttributeValue) == 0x000010, "Wrong size on InventoryService_GetRoleAttributeValue");
static_assert(offsetof(InventoryService_GetRoleAttributeValue, AttributeInfo) == 0x000000, "Member 'InventoryService_GetRoleAttributeValue::AttributeInfo' has a wrong offset!");
static_assert(offsetof(InventoryService_GetRoleAttributeValue, Type_id) == 0x000008, "Member 'InventoryService_GetRoleAttributeValue::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetRoleAttributeValue, ReturnValue) == 0x00000C, "Member 'InventoryService_GetRoleAttributeValue::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.SortConsumeItems
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_SortConsumeItems final
{
public:
	TArray<struct FTGFItem>                       Items;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SortConsumeItems) == 0x000008, "Wrong alignment on InventoryService_SortConsumeItems");
static_assert(sizeof(InventoryService_SortConsumeItems) == 0x000010, "Wrong size on InventoryService_SortConsumeItems");
static_assert(offsetof(InventoryService_SortConsumeItems, Items) == 0x000000, "Member 'InventoryService_SortConsumeItems::Items' has a wrong offset!");

// Function TGFGame.InventoryService.TGFItemToTGFProtoTgfDItem
// 0x0060 (0x0060 - 0x0000)
struct InventoryService_TGFItemToTGFProtoTgfDItem final
{
public:
	struct FTGFItem                               Item;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UTGFProtoTgfDItem*                      ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_TGFItemToTGFProtoTgfDItem) == 0x000008, "Wrong alignment on InventoryService_TGFItemToTGFProtoTgfDItem");
static_assert(sizeof(InventoryService_TGFItemToTGFProtoTgfDItem) == 0x000060, "Wrong size on InventoryService_TGFItemToTGFProtoTgfDItem");
static_assert(offsetof(InventoryService_TGFItemToTGFProtoTgfDItem, Item) == 0x000000, "Member 'InventoryService_TGFItemToTGFProtoTgfDItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryService_TGFItemToTGFProtoTgfDItem, ReturnValue) == 0x000058, "Member 'InventoryService_TGFItemToTGFProtoTgfDItem::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.CanInventoryHotkey
// 0x0001 (0x0001 - 0x0000)
struct InventoryService_CanInventoryHotkey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_CanInventoryHotkey) == 0x000001, "Wrong alignment on InventoryService_CanInventoryHotkey");
static_assert(sizeof(InventoryService_CanInventoryHotkey) == 0x000001, "Wrong size on InventoryService_CanInventoryHotkey");
static_assert(offsetof(InventoryService_CanInventoryHotkey, ReturnValue) == 0x000000, "Member 'InventoryService_CanInventoryHotkey::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.DisableInventoryHotkey
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_DisableInventoryHotkey final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_DisableInventoryHotkey) == 0x000008, "Wrong alignment on InventoryService_DisableInventoryHotkey");
static_assert(sizeof(InventoryService_DisableInventoryHotkey) == 0x000008, "Wrong size on InventoryService_DisableInventoryHotkey");
static_assert(offsetof(InventoryService_DisableInventoryHotkey, Widget) == 0x000000, "Member 'InventoryService_DisableInventoryHotkey::Widget' has a wrong offset!");

// Function TGFGame.InventoryService.DuplicateWidget
// 0x0018 (0x0018 - 0x0000)
struct InventoryService_DuplicateWidget final
{
public:
	class UWidget*                                Src;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param_Name;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_DuplicateWidget) == 0x000008, "Wrong alignment on InventoryService_DuplicateWidget");
static_assert(sizeof(InventoryService_DuplicateWidget) == 0x000018, "Wrong size on InventoryService_DuplicateWidget");
static_assert(offsetof(InventoryService_DuplicateWidget, Src) == 0x000000, "Member 'InventoryService_DuplicateWidget::Src' has a wrong offset!");
static_assert(offsetof(InventoryService_DuplicateWidget, Param_Name) == 0x000008, "Member 'InventoryService_DuplicateWidget::Param_Name' has a wrong offset!");
static_assert(offsetof(InventoryService_DuplicateWidget, ReturnValue) == 0x000010, "Member 'InventoryService_DuplicateWidget::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.EnableInventoryHotkey
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_EnableInventoryHotkey final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_EnableInventoryHotkey) == 0x000008, "Wrong alignment on InventoryService_EnableInventoryHotkey");
static_assert(sizeof(InventoryService_EnableInventoryHotkey) == 0x000008, "Wrong size on InventoryService_EnableInventoryHotkey");
static_assert(offsetof(InventoryService_EnableInventoryHotkey, Widget) == 0x000000, "Member 'InventoryService_EnableInventoryHotkey::Widget' has a wrong offset!");

// Function TGFGame.InventoryService.FindEquipmentDefinition
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_FindEquipmentDefinition final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTgfEquipmentDefinition*          ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_FindEquipmentDefinition) == 0x000008, "Wrong alignment on InventoryService_FindEquipmentDefinition");
static_assert(sizeof(InventoryService_FindEquipmentDefinition) == 0x000010, "Wrong size on InventoryService_FindEquipmentDefinition");
static_assert(offsetof(InventoryService_FindEquipmentDefinition, Type_id) == 0x000000, "Member 'InventoryService_FindEquipmentDefinition::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_FindEquipmentDefinition, ReturnValue) == 0x000008, "Member 'InventoryService_FindEquipmentDefinition::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetAffixDisplayConfig
// 0x00B0 (0x00B0 - 0x0000)
struct InventoryService_GetAffixDisplayConfig final
{
public:
	struct FTGFItem                               TGFItem;                                           // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            Base;                                              // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            MainBasic;                                         // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            TopAffix;                                          // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            GemAffix;                                          // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            GearSetAffix;                                      // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetAffixDisplayConfig) == 0x000008, "Wrong alignment on InventoryService_GetAffixDisplayConfig");
static_assert(sizeof(InventoryService_GetAffixDisplayConfig) == 0x0000B0, "Wrong size on InventoryService_GetAffixDisplayConfig");
static_assert(offsetof(InventoryService_GetAffixDisplayConfig, TGFItem) == 0x000000, "Member 'InventoryService_GetAffixDisplayConfig::TGFItem' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfig, Base) == 0x000058, "Member 'InventoryService_GetAffixDisplayConfig::Base' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfig, MainBasic) == 0x000068, "Member 'InventoryService_GetAffixDisplayConfig::MainBasic' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfig, TopAffix) == 0x000078, "Member 'InventoryService_GetAffixDisplayConfig::TopAffix' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfig, GemAffix) == 0x000088, "Member 'InventoryService_GetAffixDisplayConfig::GemAffix' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfig, GearSetAffix) == 0x000098, "Member 'InventoryService_GetAffixDisplayConfig::GearSetAffix' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfig, ReturnValue) == 0x0000A8, "Member 'InventoryService_GetAffixDisplayConfig::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetAffixDisplayConfigByPos
// 0x0070 (0x0070 - 0x0000)
struct InventoryService_GetAffixDisplayConfigByPos final
{
public:
	struct FTGFItemPosition                       Pos;                                               // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            Base;                                              // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            MainBasic;                                         // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            TopAffix;                                          // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            GemAffix;                                          // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            GearSetAffix;                                      // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetAffixDisplayConfigByPos) == 0x000008, "Wrong alignment on InventoryService_GetAffixDisplayConfigByPos");
static_assert(sizeof(InventoryService_GetAffixDisplayConfigByPos) == 0x000070, "Wrong size on InventoryService_GetAffixDisplayConfigByPos");
static_assert(offsetof(InventoryService_GetAffixDisplayConfigByPos, Pos) == 0x000000, "Member 'InventoryService_GetAffixDisplayConfigByPos::Pos' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfigByPos, Base) == 0x000018, "Member 'InventoryService_GetAffixDisplayConfigByPos::Base' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfigByPos, MainBasic) == 0x000028, "Member 'InventoryService_GetAffixDisplayConfigByPos::MainBasic' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfigByPos, TopAffix) == 0x000038, "Member 'InventoryService_GetAffixDisplayConfigByPos::TopAffix' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfigByPos, GemAffix) == 0x000048, "Member 'InventoryService_GetAffixDisplayConfigByPos::GemAffix' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfigByPos, GearSetAffix) == 0x000058, "Member 'InventoryService_GetAffixDisplayConfigByPos::GearSetAffix' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAffixDisplayConfigByPos, ReturnValue) == 0x000068, "Member 'InventoryService_GetAffixDisplayConfigByPos::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetAllAffix
// 0x00A8 (0x00A8 - 0x0000)
struct InventoryService_GetAllAffix final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, float>                            Attributes;                                        // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<int32, float>                            base_attributes;                                   // 0x0058(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetAllAffix) == 0x000008, "Wrong alignment on InventoryService_GetAllAffix");
static_assert(sizeof(InventoryService_GetAllAffix) == 0x0000A8, "Wrong size on InventoryService_GetAllAffix");
static_assert(offsetof(InventoryService_GetAllAffix, Guid) == 0x000000, "Member 'InventoryService_GetAllAffix::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAllAffix, Attributes) == 0x000008, "Member 'InventoryService_GetAllAffix::Attributes' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAllAffix, base_attributes) == 0x000058, "Member 'InventoryService_GetAllAffix::base_attributes' has a wrong offset!");

// Function TGFGame.InventoryService.GetAllEquipLevel
// 0x0004 (0x0004 - 0x0000)
struct InventoryService_GetAllEquipLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetAllEquipLevel) == 0x000004, "Wrong alignment on InventoryService_GetAllEquipLevel");
static_assert(sizeof(InventoryService_GetAllEquipLevel) == 0x000004, "Wrong size on InventoryService_GetAllEquipLevel");
static_assert(offsetof(InventoryService_GetAllEquipLevel, ReturnValue) == 0x000000, "Member 'InventoryService_GetAllEquipLevel::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetArmorDefinition
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_GetArmorDefinition final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTgfArmorDefinition*              ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetArmorDefinition) == 0x000008, "Wrong alignment on InventoryService_GetArmorDefinition");
static_assert(sizeof(InventoryService_GetArmorDefinition) == 0x000010, "Wrong size on InventoryService_GetArmorDefinition");
static_assert(offsetof(InventoryService_GetArmorDefinition, Type_id) == 0x000000, "Member 'InventoryService_GetArmorDefinition::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetArmorDefinition, ReturnValue) == 0x000008, "Member 'InventoryService_GetArmorDefinition::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetAverageDefence
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_GetAverageDefence final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetAverageDefence) == 0x000008, "Wrong alignment on InventoryService_GetAverageDefence");
static_assert(sizeof(InventoryService_GetAverageDefence) == 0x000010, "Wrong size on InventoryService_GetAverageDefence");
static_assert(offsetof(InventoryService_GetAverageDefence, Guid) == 0x000000, "Member 'InventoryService_GetAverageDefence::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAverageDefence, ReturnValue) == 0x000008, "Member 'InventoryService_GetAverageDefence::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetAverageDPH
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_GetAverageDPH final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetAverageDPH) == 0x000008, "Wrong alignment on InventoryService_GetAverageDPH");
static_assert(sizeof(InventoryService_GetAverageDPH) == 0x000010, "Wrong size on InventoryService_GetAverageDPH");
static_assert(offsetof(InventoryService_GetAverageDPH, Guid) == 0x000000, "Member 'InventoryService_GetAverageDPH::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetAverageDPH, ReturnValue) == 0x000008, "Member 'InventoryService_GetAverageDPH::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetBagData
// 0x0050 (0x0050 - 0x0000)
struct InventoryService_GetBagData final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFUserInvetoryData                   Inventory;                                         // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<struct FTGFItem>                       Items;                                             // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetBagData) == 0x000008, "Wrong alignment on InventoryService_GetBagData");
static_assert(sizeof(InventoryService_GetBagData) == 0x000050, "Wrong size on InventoryService_GetBagData");
static_assert(offsetof(InventoryService_GetBagData, Guid) == 0x000000, "Member 'InventoryService_GetBagData::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetBagData, Inventory) == 0x000008, "Member 'InventoryService_GetBagData::Inventory' has a wrong offset!");
static_assert(offsetof(InventoryService_GetBagData, Items) == 0x000038, "Member 'InventoryService_GetBagData::Items' has a wrong offset!");
static_assert(offsetof(InventoryService_GetBagData, ReturnValue) == 0x000048, "Member 'InventoryService_GetBagData::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetCellItem
// 0x0070 (0x0070 - 0x0000)
struct InventoryService_GetCellItem final
{
public:
	EnItemStorageType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFItem                               Item;                                              // 0x0010(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetCellItem) == 0x000008, "Wrong alignment on InventoryService_GetCellItem");
static_assert(sizeof(InventoryService_GetCellItem) == 0x000070, "Wrong size on InventoryService_GetCellItem");
static_assert(offsetof(InventoryService_GetCellItem, Type) == 0x000000, "Member 'InventoryService_GetCellItem::Type' has a wrong offset!");
static_assert(offsetof(InventoryService_GetCellItem, X) == 0x000004, "Member 'InventoryService_GetCellItem::X' has a wrong offset!");
static_assert(offsetof(InventoryService_GetCellItem, Y) == 0x000008, "Member 'InventoryService_GetCellItem::Y' has a wrong offset!");
static_assert(offsetof(InventoryService_GetCellItem, PageId) == 0x00000C, "Member 'InventoryService_GetCellItem::PageId' has a wrong offset!");
static_assert(offsetof(InventoryService_GetCellItem, Item) == 0x000010, "Member 'InventoryService_GetCellItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryService_GetCellItem, ReturnValue) == 0x000068, "Member 'InventoryService_GetCellItem::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetClickDragingWidget
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetClickDragingWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetClickDragingWidget) == 0x000008, "Wrong alignment on InventoryService_GetClickDragingWidget");
static_assert(sizeof(InventoryService_GetClickDragingWidget) == 0x000008, "Wrong size on InventoryService_GetClickDragingWidget");
static_assert(offsetof(InventoryService_GetClickDragingWidget, ReturnValue) == 0x000000, "Member 'InventoryService_GetClickDragingWidget::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetCoin
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetCoin final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetCoin) == 0x000008, "Wrong alignment on InventoryService_GetCoin");
static_assert(sizeof(InventoryService_GetCoin) == 0x000008, "Wrong size on InventoryService_GetCoin");
static_assert(offsetof(InventoryService_GetCoin, ReturnValue) == 0x000000, "Member 'InventoryService_GetCoin::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetCoinItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_GetCoinItem final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetCoinItem) == 0x000008, "Wrong alignment on InventoryService_GetCoinItem");
static_assert(sizeof(InventoryService_GetCoinItem) == 0x000010, "Wrong size on InventoryService_GetCoinItem");
static_assert(offsetof(InventoryService_GetCoinItem, Type_id) == 0x000000, "Member 'InventoryService_GetCoinItem::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetCoinItem, ReturnValue) == 0x000008, "Member 'InventoryService_GetCoinItem::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetCostItemCount
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetCostItemCount final
{
public:
	int32                                         TypeId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetCostItemCount) == 0x000004, "Wrong alignment on InventoryService_GetCostItemCount");
static_assert(sizeof(InventoryService_GetCostItemCount) == 0x000008, "Wrong size on InventoryService_GetCostItemCount");
static_assert(offsetof(InventoryService_GetCostItemCount, TypeId) == 0x000000, "Member 'InventoryService_GetCostItemCount::TypeId' has a wrong offset!");
static_assert(offsetof(InventoryService_GetCostItemCount, ReturnValue) == 0x000004, "Member 'InventoryService_GetCostItemCount::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetCurrentRole
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetCurrentRole final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetCurrentRole) == 0x000008, "Wrong alignment on InventoryService_GetCurrentRole");
static_assert(sizeof(InventoryService_GetCurrentRole) == 0x000008, "Wrong size on InventoryService_GetCurrentRole");
static_assert(offsetof(InventoryService_GetCurrentRole, ReturnValue) == 0x000000, "Member 'InventoryService_GetCurrentRole::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetEquipmentData
// 0x0020 (0x0020 - 0x0000)
struct InventoryService_GetEquipmentData final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTGFItem>                       Items;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetEquipmentData) == 0x000008, "Wrong alignment on InventoryService_GetEquipmentData");
static_assert(sizeof(InventoryService_GetEquipmentData) == 0x000020, "Wrong size on InventoryService_GetEquipmentData");
static_assert(offsetof(InventoryService_GetEquipmentData, Guid) == 0x000000, "Member 'InventoryService_GetEquipmentData::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetEquipmentData, Items) == 0x000008, "Member 'InventoryService_GetEquipmentData::Items' has a wrong offset!");
static_assert(offsetof(InventoryService_GetEquipmentData, ReturnValue) == 0x000018, "Member 'InventoryService_GetEquipmentData::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetEquipSubtype
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetEquipSubtype final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSubType                              ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetEquipSubtype) == 0x000004, "Wrong alignment on InventoryService_GetEquipSubtype");
static_assert(sizeof(InventoryService_GetEquipSubtype) == 0x000008, "Wrong size on InventoryService_GetEquipSubtype");
static_assert(offsetof(InventoryService_GetEquipSubtype, Type_id) == 0x000000, "Member 'InventoryService_GetEquipSubtype::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetEquipSubtype, ReturnValue) == 0x000004, "Member 'InventoryService_GetEquipSubtype::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetEquipType
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetEquipType final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponEquipType                           ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetEquipType) == 0x000004, "Wrong alignment on InventoryService_GetEquipType");
static_assert(sizeof(InventoryService_GetEquipType) == 0x000008, "Wrong size on InventoryService_GetEquipType");
static_assert(offsetof(InventoryService_GetEquipType, Type_id) == 0x000000, "Member 'InventoryService_GetEquipType::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetEquipType, ReturnValue) == 0x000004, "Member 'InventoryService_GetEquipType::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetFacadeDta
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetFacadeDta final
{
public:
	class UTGFProtoTgfDUserFacadeData*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetFacadeDta) == 0x000008, "Wrong alignment on InventoryService_GetFacadeDta");
static_assert(sizeof(InventoryService_GetFacadeDta) == 0x000008, "Wrong size on InventoryService_GetFacadeDta");
static_assert(offsetof(InventoryService_GetFacadeDta, ReturnValue) == 0x000000, "Member 'InventoryService_GetFacadeDta::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetIdleAnimation
// 0x0038 (0x0038 - 0x0000)
struct InventoryService_GetIdleAnimation final
{
public:
	int32                                         Main_type_id;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Second_type_id;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WithTags;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsRightIdle;                                      // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequenceBase*                ReturnValue;                                       // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetIdleAnimation) == 0x000008, "Wrong alignment on InventoryService_GetIdleAnimation");
static_assert(sizeof(InventoryService_GetIdleAnimation) == 0x000038, "Wrong size on InventoryService_GetIdleAnimation");
static_assert(offsetof(InventoryService_GetIdleAnimation, Main_type_id) == 0x000000, "Member 'InventoryService_GetIdleAnimation::Main_type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetIdleAnimation, Second_type_id) == 0x000004, "Member 'InventoryService_GetIdleAnimation::Second_type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetIdleAnimation, WithTags) == 0x000008, "Member 'InventoryService_GetIdleAnimation::WithTags' has a wrong offset!");
static_assert(offsetof(InventoryService_GetIdleAnimation, bIsRightIdle) == 0x000028, "Member 'InventoryService_GetIdleAnimation::bIsRightIdle' has a wrong offset!");
static_assert(offsetof(InventoryService_GetIdleAnimation, ReturnValue) == 0x000030, "Member 'InventoryService_GetIdleAnimation::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetInventoryIcon
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_GetInventoryIcon final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UInventoryFragment_InventoryIcon* ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetInventoryIcon) == 0x000008, "Wrong alignment on InventoryService_GetInventoryIcon");
static_assert(sizeof(InventoryService_GetInventoryIcon) == 0x000010, "Wrong size on InventoryService_GetInventoryIcon");
static_assert(offsetof(InventoryService_GetInventoryIcon, Type_id) == 0x000000, "Member 'InventoryService_GetInventoryIcon::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetInventoryIcon, ReturnValue) == 0x000008, "Member 'InventoryService_GetInventoryIcon::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetInventoryWindow
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetInventoryWindow final
{
public:
	class UTGFWindow*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetInventoryWindow) == 0x000008, "Wrong alignment on InventoryService_GetInventoryWindow");
static_assert(sizeof(InventoryService_GetInventoryWindow) == 0x000008, "Wrong size on InventoryService_GetInventoryWindow");
static_assert(offsetof(InventoryService_GetInventoryWindow, ReturnValue) == 0x000000, "Member 'InventoryService_GetInventoryWindow::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemAffixAttributeIds
// 0x0058 (0x0058 - 0x0000)
struct InventoryService_GetItemAffixAttributeIds final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetItemAffixAttributeIds) == 0x000008, "Wrong alignment on InventoryService_GetItemAffixAttributeIds");
static_assert(sizeof(InventoryService_GetItemAffixAttributeIds) == 0x000058, "Wrong size on InventoryService_GetItemAffixAttributeIds");
static_assert(offsetof(InventoryService_GetItemAffixAttributeIds, ItemId) == 0x000000, "Member 'InventoryService_GetItemAffixAttributeIds::ItemId' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemAffixAttributeIds, ReturnValue) == 0x000008, "Member 'InventoryService_GetItemAffixAttributeIds::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemAffixDisplayConfig
// 0x0068 (0x0068 - 0x0000)
struct InventoryService_GetItemAffixDisplayConfig final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAffixDisplayConfig>            Affix;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            Base;                                              // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            Main;                                              // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            Top;                                               // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            Gem;                                               // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            GearSet;                                           // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetItemAffixDisplayConfig) == 0x000008, "Wrong alignment on InventoryService_GetItemAffixDisplayConfig");
static_assert(sizeof(InventoryService_GetItemAffixDisplayConfig) == 0x000068, "Wrong size on InventoryService_GetItemAffixDisplayConfig");
static_assert(offsetof(InventoryService_GetItemAffixDisplayConfig, ItemId) == 0x000000, "Member 'InventoryService_GetItemAffixDisplayConfig::ItemId' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemAffixDisplayConfig, Affix) == 0x000008, "Member 'InventoryService_GetItemAffixDisplayConfig::Affix' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemAffixDisplayConfig, Base) == 0x000018, "Member 'InventoryService_GetItemAffixDisplayConfig::Base' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemAffixDisplayConfig, Main) == 0x000028, "Member 'InventoryService_GetItemAffixDisplayConfig::Main' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemAffixDisplayConfig, Top) == 0x000038, "Member 'InventoryService_GetItemAffixDisplayConfig::Top' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemAffixDisplayConfig, Gem) == 0x000048, "Member 'InventoryService_GetItemAffixDisplayConfig::Gem' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemAffixDisplayConfig, GearSet) == 0x000058, "Member 'InventoryService_GetItemAffixDisplayConfig::GearSet' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemByGuid
// 0x0070 (0x0070 - 0x0000)
struct InventoryService_GetItemByGuid final
{
public:
	int64                                         RoleGuid;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ItemGuid;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFItem                               Item;                                              // 0x0010(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetItemByGuid) == 0x000008, "Wrong alignment on InventoryService_GetItemByGuid");
static_assert(sizeof(InventoryService_GetItemByGuid) == 0x000070, "Wrong size on InventoryService_GetItemByGuid");
static_assert(offsetof(InventoryService_GetItemByGuid, RoleGuid) == 0x000000, "Member 'InventoryService_GetItemByGuid::RoleGuid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemByGuid, ItemGuid) == 0x000008, "Member 'InventoryService_GetItemByGuid::ItemGuid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemByGuid, Item) == 0x000010, "Member 'InventoryService_GetItemByGuid::Item' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemByGuid, ReturnValue) == 0x000068, "Member 'InventoryService_GetItemByGuid::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemConfig
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_GetItemConfig final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTgfInventoryItemDefinition*      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetItemConfig) == 0x000008, "Wrong alignment on InventoryService_GetItemConfig");
static_assert(sizeof(InventoryService_GetItemConfig) == 0x000010, "Wrong size on InventoryService_GetItemConfig");
static_assert(offsetof(InventoryService_GetItemConfig, Type_id) == 0x000000, "Member 'InventoryService_GetItemConfig::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemConfig, ReturnValue) == 0x000008, "Member 'InventoryService_GetItemConfig::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemConfigClass
// 0x0018 (0x0018 - 0x0000)
struct InventoryService_GetItemConfigClass final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTgfInventoryItemDefinition> ItemClass;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetItemConfigClass) == 0x000008, "Wrong alignment on InventoryService_GetItemConfigClass");
static_assert(sizeof(InventoryService_GetItemConfigClass) == 0x000018, "Wrong size on InventoryService_GetItemConfigClass");
static_assert(offsetof(InventoryService_GetItemConfigClass, Type_id) == 0x000000, "Member 'InventoryService_GetItemConfigClass::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemConfigClass, ItemClass) == 0x000008, "Member 'InventoryService_GetItemConfigClass::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemConfigClass, ReturnValue) == 0x000010, "Member 'InventoryService_GetItemConfigClass::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemCountInPackage
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_GetItemCountInPackage final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type_id;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetItemCountInPackage) == 0x000008, "Wrong alignment on InventoryService_GetItemCountInPackage");
static_assert(sizeof(InventoryService_GetItemCountInPackage) == 0x000010, "Wrong size on InventoryService_GetItemCountInPackage");
static_assert(offsetof(InventoryService_GetItemCountInPackage, Guid) == 0x000000, "Member 'InventoryService_GetItemCountInPackage::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemCountInPackage, Type_id) == 0x000008, "Member 'InventoryService_GetItemCountInPackage::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemCountInPackage, ReturnValue) == 0x00000C, "Member 'InventoryService_GetItemCountInPackage::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemItemMinorType
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetItemItemMinorType final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnItemMinorType                   ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetItemItemMinorType) == 0x000004, "Wrong alignment on InventoryService_GetItemItemMinorType");
static_assert(sizeof(InventoryService_GetItemItemMinorType) == 0x000008, "Wrong size on InventoryService_GetItemItemMinorType");
static_assert(offsetof(InventoryService_GetItemItemMinorType, Type_id) == 0x000000, "Member 'InventoryService_GetItemItemMinorType::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemItemMinorType, ReturnValue) == 0x000004, "Member 'InventoryService_GetItemItemMinorType::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemMajorType
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetItemMajorType final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnItemMajorType                   ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetItemMajorType) == 0x000004, "Wrong alignment on InventoryService_GetItemMajorType");
static_assert(sizeof(InventoryService_GetItemMajorType) == 0x000008, "Wrong size on InventoryService_GetItemMajorType");
static_assert(offsetof(InventoryService_GetItemMajorType, Type_id) == 0x000000, "Member 'InventoryService_GetItemMajorType::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemMajorType, ReturnValue) == 0x000004, "Member 'InventoryService_GetItemMajorType::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemQuality
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetItemQuality final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipQuality                              ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetItemQuality) == 0x000004, "Wrong alignment on InventoryService_GetItemQuality");
static_assert(sizeof(InventoryService_GetItemQuality) == 0x000008, "Wrong size on InventoryService_GetItemQuality");
static_assert(offsetof(InventoryService_GetItemQuality, Type_id) == 0x000000, "Member 'InventoryService_GetItemQuality::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemQuality, ReturnValue) == 0x000004, "Member 'InventoryService_GetItemQuality::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemsById
// 0x0020 (0x0020 - 0x0000)
struct InventoryService_GetItemsById final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type_id;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTGFItem>                       Out_items;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetItemsById) == 0x000008, "Wrong alignment on InventoryService_GetItemsById");
static_assert(sizeof(InventoryService_GetItemsById) == 0x000020, "Wrong size on InventoryService_GetItemsById");
static_assert(offsetof(InventoryService_GetItemsById, Guid) == 0x000000, "Member 'InventoryService_GetItemsById::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemsById, Type_id) == 0x000008, "Member 'InventoryService_GetItemsById::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemsById, Out_items) == 0x000010, "Member 'InventoryService_GetItemsById::Out_items' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemsByIdAndType
// 0x0020 (0x0020 - 0x0000)
struct InventoryService_GetItemsByIdAndType final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type_id;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EnItemStorageType                             Type;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTGFItem>                       Out_items;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetItemsByIdAndType) == 0x000008, "Wrong alignment on InventoryService_GetItemsByIdAndType");
static_assert(sizeof(InventoryService_GetItemsByIdAndType) == 0x000020, "Wrong size on InventoryService_GetItemsByIdAndType");
static_assert(offsetof(InventoryService_GetItemsByIdAndType, Guid) == 0x000000, "Member 'InventoryService_GetItemsByIdAndType::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemsByIdAndType, Type_id) == 0x000008, "Member 'InventoryService_GetItemsByIdAndType::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemsByIdAndType, Type) == 0x00000C, "Member 'InventoryService_GetItemsByIdAndType::Type' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemsByIdAndType, Out_items) == 0x000010, "Member 'InventoryService_GetItemsByIdAndType::Out_items' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemSize
// 0x000C (0x000C - 0x0000)
struct InventoryService_GetItemSize final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetItemSize) == 0x000004, "Wrong alignment on InventoryService_GetItemSize");
static_assert(sizeof(InventoryService_GetItemSize) == 0x00000C, "Wrong size on InventoryService_GetItemSize");
static_assert(offsetof(InventoryService_GetItemSize, Type_id) == 0x000000, "Member 'InventoryService_GetItemSize::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemSize, ReturnValue) == 0x000004, "Member 'InventoryService_GetItemSize::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemSkinId
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetItemSkinId final
{
public:
	ETgfSkinSlot                                  Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetItemSkinId) == 0x000004, "Wrong alignment on InventoryService_GetItemSkinId");
static_assert(sizeof(InventoryService_GetItemSkinId) == 0x000008, "Wrong size on InventoryService_GetItemSkinId");
static_assert(offsetof(InventoryService_GetItemSkinId, Slot) == 0x000000, "Member 'InventoryService_GetItemSkinId::Slot' has a wrong offset!");
static_assert(offsetof(InventoryService_GetItemSkinId, ReturnValue) == 0x000004, "Member 'InventoryService_GetItemSkinId::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetItemTooltipWidget
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetItemTooltipWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetItemTooltipWidget) == 0x000008, "Wrong alignment on InventoryService_GetItemTooltipWidget");
static_assert(sizeof(InventoryService_GetItemTooltipWidget) == 0x000008, "Wrong size on InventoryService_GetItemTooltipWidget");
static_assert(offsetof(InventoryService_GetItemTooltipWidget, ReturnValue) == 0x000000, "Member 'InventoryService_GetItemTooltipWidget::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetMatchEquip
// 0x0068 (0x0068 - 0x0000)
struct InventoryService_GetMatchEquip final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFItem                               Item;                                              // 0x0008(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetMatchEquip) == 0x000008, "Wrong alignment on InventoryService_GetMatchEquip");
static_assert(sizeof(InventoryService_GetMatchEquip) == 0x000068, "Wrong size on InventoryService_GetMatchEquip");
static_assert(offsetof(InventoryService_GetMatchEquip, Type_id) == 0x000000, "Member 'InventoryService_GetMatchEquip::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetMatchEquip, Item) == 0x000008, "Member 'InventoryService_GetMatchEquip::Item' has a wrong offset!");
static_assert(offsetof(InventoryService_GetMatchEquip, ReturnValue) == 0x000060, "Member 'InventoryService_GetMatchEquip::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetPageAddItemId
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetPageAddItemId final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetPageAddItemId) == 0x000004, "Wrong alignment on InventoryService_GetPageAddItemId");
static_assert(sizeof(InventoryService_GetPageAddItemId) == 0x000008, "Wrong size on InventoryService_GetPageAddItemId");
static_assert(offsetof(InventoryService_GetPageAddItemId, Count) == 0x000000, "Member 'InventoryService_GetPageAddItemId::Count' has a wrong offset!");
static_assert(offsetof(InventoryService_GetPageAddItemId, ReturnValue) == 0x000004, "Member 'InventoryService_GetPageAddItemId::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetPayDiamond
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetPayDiamond final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetPayDiamond) == 0x000008, "Wrong alignment on InventoryService_GetPayDiamond");
static_assert(sizeof(InventoryService_GetPayDiamond) == 0x000008, "Wrong size on InventoryService_GetPayDiamond");
static_assert(offsetof(InventoryService_GetPayDiamond, ReturnValue) == 0x000000, "Member 'InventoryService_GetPayDiamond::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetRoleAttributeInfo
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_GetRoleAttributeInfo final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URoleAttributeInfo*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetRoleAttributeInfo) == 0x000008, "Wrong alignment on InventoryService_GetRoleAttributeInfo");
static_assert(sizeof(InventoryService_GetRoleAttributeInfo) == 0x000010, "Wrong size on InventoryService_GetRoleAttributeInfo");
static_assert(offsetof(InventoryService_GetRoleAttributeInfo, Guid) == 0x000000, "Member 'InventoryService_GetRoleAttributeInfo::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetRoleAttributeInfo, ReturnValue) == 0x000008, "Member 'InventoryService_GetRoleAttributeInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetRoleEquipment
// 0x0068 (0x0068 - 0x0000)
struct InventoryService_GetRoleEquipment final
{
public:
	int32                                         Guid;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFItem                               Item;                                              // 0x0008(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetRoleEquipment) == 0x000008, "Wrong alignment on InventoryService_GetRoleEquipment");
static_assert(sizeof(InventoryService_GetRoleEquipment) == 0x000068, "Wrong size on InventoryService_GetRoleEquipment");
static_assert(offsetof(InventoryService_GetRoleEquipment, Guid) == 0x000000, "Member 'InventoryService_GetRoleEquipment::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetRoleEquipment, X) == 0x000004, "Member 'InventoryService_GetRoleEquipment::X' has a wrong offset!");
static_assert(offsetof(InventoryService_GetRoleEquipment, Item) == 0x000008, "Member 'InventoryService_GetRoleEquipment::Item' has a wrong offset!");
static_assert(offsetof(InventoryService_GetRoleEquipment, ReturnValue) == 0x000060, "Member 'InventoryService_GetRoleEquipment::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetRoleWeaponOnHand
// 0x0018 (0x0018 - 0x0000)
struct InventoryService_GetRoleWeaponOnHand final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Right;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Left;                                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetRoleWeaponOnHand) == 0x000008, "Wrong alignment on InventoryService_GetRoleWeaponOnHand");
static_assert(sizeof(InventoryService_GetRoleWeaponOnHand) == 0x000018, "Wrong size on InventoryService_GetRoleWeaponOnHand");
static_assert(offsetof(InventoryService_GetRoleWeaponOnHand, Guid) == 0x000000, "Member 'InventoryService_GetRoleWeaponOnHand::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetRoleWeaponOnHand, Right) == 0x000008, "Member 'InventoryService_GetRoleWeaponOnHand::Right' has a wrong offset!");
static_assert(offsetof(InventoryService_GetRoleWeaponOnHand, Left) == 0x00000C, "Member 'InventoryService_GetRoleWeaponOnHand::Left' has a wrong offset!");
static_assert(offsetof(InventoryService_GetRoleWeaponOnHand, ReturnValue) == 0x000010, "Member 'InventoryService_GetRoleWeaponOnHand::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetSkinAcquireTime
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_GetSkinAcquireTime final
{
public:
	int32                                         SkinId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetSkinAcquireTime) == 0x000008, "Wrong alignment on InventoryService_GetSkinAcquireTime");
static_assert(sizeof(InventoryService_GetSkinAcquireTime) == 0x000010, "Wrong size on InventoryService_GetSkinAcquireTime");
static_assert(offsetof(InventoryService_GetSkinAcquireTime, SkinId) == 0x000000, "Member 'InventoryService_GetSkinAcquireTime::SkinId' has a wrong offset!");
static_assert(offsetof(InventoryService_GetSkinAcquireTime, ReturnValue) == 0x000008, "Member 'InventoryService_GetSkinAcquireTime::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetSkinByThirdSlot
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetSkinByThirdSlot final
{
public:
	int32                                         ThirdSlot;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetSkinByThirdSlot) == 0x000004, "Wrong alignment on InventoryService_GetSkinByThirdSlot");
static_assert(sizeof(InventoryService_GetSkinByThirdSlot) == 0x000008, "Wrong size on InventoryService_GetSkinByThirdSlot");
static_assert(offsetof(InventoryService_GetSkinByThirdSlot, ThirdSlot) == 0x000000, "Member 'InventoryService_GetSkinByThirdSlot::ThirdSlot' has a wrong offset!");
static_assert(offsetof(InventoryService_GetSkinByThirdSlot, ReturnValue) == 0x000004, "Member 'InventoryService_GetSkinByThirdSlot::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetSmallPackData
// 0x0050 (0x0050 - 0x0000)
struct InventoryService_GetSmallPackData final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFUserInvetoryData                   Inventory;                                         // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<struct FTGFItem>                       Items;                                             // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetSmallPackData) == 0x000008, "Wrong alignment on InventoryService_GetSmallPackData");
static_assert(sizeof(InventoryService_GetSmallPackData) == 0x000050, "Wrong size on InventoryService_GetSmallPackData");
static_assert(offsetof(InventoryService_GetSmallPackData, Guid) == 0x000000, "Member 'InventoryService_GetSmallPackData::Guid' has a wrong offset!");
static_assert(offsetof(InventoryService_GetSmallPackData, Inventory) == 0x000008, "Member 'InventoryService_GetSmallPackData::Inventory' has a wrong offset!");
static_assert(offsetof(InventoryService_GetSmallPackData, Items) == 0x000038, "Member 'InventoryService_GetSmallPackData::Items' has a wrong offset!");
static_assert(offsetof(InventoryService_GetSmallPackData, ReturnValue) == 0x000048, "Member 'InventoryService_GetSmallPackData::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetSoulBound
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetSoulBound final
{
public:
	class UTGFProtoTgfDUserSoulBound*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetSoulBound) == 0x000008, "Wrong alignment on InventoryService_GetSoulBound");
static_assert(sizeof(InventoryService_GetSoulBound) == 0x000008, "Wrong size on InventoryService_GetSoulBound");
static_assert(offsetof(InventoryService_GetSoulBound, ReturnValue) == 0x000000, "Member 'InventoryService_GetSoulBound::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetStackCount
// 0x000C (0x000C - 0x0000)
struct InventoryService_GetStackCount final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stack_count;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetStackCount) == 0x000004, "Wrong alignment on InventoryService_GetStackCount");
static_assert(sizeof(InventoryService_GetStackCount) == 0x00000C, "Wrong size on InventoryService_GetStackCount");
static_assert(offsetof(InventoryService_GetStackCount, Type_id) == 0x000000, "Member 'InventoryService_GetStackCount::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetStackCount, Stack_count) == 0x000004, "Member 'InventoryService_GetStackCount::Stack_count' has a wrong offset!");
static_assert(offsetof(InventoryService_GetStackCount, ReturnValue) == 0x000008, "Member 'InventoryService_GetStackCount::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetStorageData
// 0x0048 (0x0048 - 0x0000)
struct InventoryService_GetStorageData final
{
public:
	int32                                         PageId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTGFItem>                       Items;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTGFUserInvetoryData                   ReturnValue;                                       // 0x0018(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetStorageData) == 0x000008, "Wrong alignment on InventoryService_GetStorageData");
static_assert(sizeof(InventoryService_GetStorageData) == 0x000048, "Wrong size on InventoryService_GetStorageData");
static_assert(offsetof(InventoryService_GetStorageData, PageId) == 0x000000, "Member 'InventoryService_GetStorageData::PageId' has a wrong offset!");
static_assert(offsetof(InventoryService_GetStorageData, Items) == 0x000008, "Member 'InventoryService_GetStorageData::Items' has a wrong offset!");
static_assert(offsetof(InventoryService_GetStorageData, ReturnValue) == 0x000018, "Member 'InventoryService_GetStorageData::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetStoragePageCount
// 0x0004 (0x0004 - 0x0000)
struct InventoryService_GetStoragePageCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetStoragePageCount) == 0x000004, "Wrong alignment on InventoryService_GetStoragePageCount");
static_assert(sizeof(InventoryService_GetStoragePageCount) == 0x000004, "Wrong size on InventoryService_GetStoragePageCount");
static_assert(offsetof(InventoryService_GetStoragePageCount, ReturnValue) == 0x000000, "Member 'InventoryService_GetStoragePageCount::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetTalentsCount
// 0x0004 (0x0004 - 0x0000)
struct InventoryService_GetTalentsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetTalentsCount) == 0x000004, "Wrong alignment on InventoryService_GetTalentsCount");
static_assert(sizeof(InventoryService_GetTalentsCount) == 0x000004, "Wrong size on InventoryService_GetTalentsCount");
static_assert(offsetof(InventoryService_GetTalentsCount, ReturnValue) == 0x000000, "Member 'InventoryService_GetTalentsCount::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetTooltipCompare
// 0x0001 (0x0001 - 0x0000)
struct InventoryService_GetTooltipCompare final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetTooltipCompare) == 0x000001, "Wrong alignment on InventoryService_GetTooltipCompare");
static_assert(sizeof(InventoryService_GetTooltipCompare) == 0x000001, "Wrong size on InventoryService_GetTooltipCompare");
static_assert(offsetof(InventoryService_GetTooltipCompare, ReturnValue) == 0x000000, "Member 'InventoryService_GetTooltipCompare::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetVirtualItem
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetVirtualItem final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetVirtualItem) == 0x000004, "Wrong alignment on InventoryService_GetVirtualItem");
static_assert(sizeof(InventoryService_GetVirtualItem) == 0x000008, "Wrong size on InventoryService_GetVirtualItem");
static_assert(offsetof(InventoryService_GetVirtualItem, Type_id) == 0x000000, "Member 'InventoryService_GetVirtualItem::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetVirtualItem, ReturnValue) == 0x000004, "Member 'InventoryService_GetVirtualItem::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetVirtualItemInfo
// 0x0068 (0x0068 - 0x0000)
struct InventoryService_GetVirtualItemInfo final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFItem                               Item;                                              // 0x0008(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetVirtualItemInfo) == 0x000008, "Wrong alignment on InventoryService_GetVirtualItemInfo");
static_assert(sizeof(InventoryService_GetVirtualItemInfo) == 0x000068, "Wrong size on InventoryService_GetVirtualItemInfo");
static_assert(offsetof(InventoryService_GetVirtualItemInfo, Type_id) == 0x000000, "Member 'InventoryService_GetVirtualItemInfo::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_GetVirtualItemInfo, Item) == 0x000008, "Member 'InventoryService_GetVirtualItemInfo::Item' has a wrong offset!");
static_assert(offsetof(InventoryService_GetVirtualItemInfo, ReturnValue) == 0x000060, "Member 'InventoryService_GetVirtualItemInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetVirtualItemRowIndex
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_GetVirtualItemRowIndex final
{
public:
	int32                                         TypeId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetVirtualItemRowIndex) == 0x000004, "Wrong alignment on InventoryService_GetVirtualItemRowIndex");
static_assert(sizeof(InventoryService_GetVirtualItemRowIndex) == 0x000008, "Wrong size on InventoryService_GetVirtualItemRowIndex");
static_assert(offsetof(InventoryService_GetVirtualItemRowIndex, TypeId) == 0x000000, "Member 'InventoryService_GetVirtualItemRowIndex::TypeId' has a wrong offset!");
static_assert(offsetof(InventoryService_GetVirtualItemRowIndex, ReturnValue) == 0x000004, "Member 'InventoryService_GetVirtualItemRowIndex::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetVirtualItems
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_GetVirtualItems final
{
public:
	TArray<class UTypeIdObject*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_GetVirtualItems) == 0x000008, "Wrong alignment on InventoryService_GetVirtualItems");
static_assert(sizeof(InventoryService_GetVirtualItems) == 0x000010, "Wrong size on InventoryService_GetVirtualItems");
static_assert(offsetof(InventoryService_GetVirtualItems, ReturnValue) == 0x000000, "Member 'InventoryService_GetVirtualItems::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.GetWeaponOnHand
// 0x000C (0x000C - 0x0000)
struct InventoryService_GetWeaponOnHand final
{
public:
	int32                                         Right;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Left;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_GetWeaponOnHand) == 0x000004, "Wrong alignment on InventoryService_GetWeaponOnHand");
static_assert(sizeof(InventoryService_GetWeaponOnHand) == 0x00000C, "Wrong size on InventoryService_GetWeaponOnHand");
static_assert(offsetof(InventoryService_GetWeaponOnHand, Right) == 0x000000, "Member 'InventoryService_GetWeaponOnHand::Right' has a wrong offset!");
static_assert(offsetof(InventoryService_GetWeaponOnHand, Left) == 0x000004, "Member 'InventoryService_GetWeaponOnHand::Left' has a wrong offset!");
static_assert(offsetof(InventoryService_GetWeaponOnHand, ReturnValue) == 0x000008, "Member 'InventoryService_GetWeaponOnHand::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.IsBothHandWeapon
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_IsBothHandWeapon final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_IsBothHandWeapon) == 0x000004, "Wrong alignment on InventoryService_IsBothHandWeapon");
static_assert(sizeof(InventoryService_IsBothHandWeapon) == 0x000008, "Wrong size on InventoryService_IsBothHandWeapon");
static_assert(offsetof(InventoryService_IsBothHandWeapon, Type_id) == 0x000000, "Member 'InventoryService_IsBothHandWeapon::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_IsBothHandWeapon, ReturnValue) == 0x000004, "Member 'InventoryService_IsBothHandWeapon::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.IsCellValid
// 0x001C (0x001C - 0x0000)
struct InventoryService_IsCellValid final
{
public:
	EnItemStorageType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              Cell;                                              // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Size;                                              // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageId;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_IsCellValid) == 0x000004, "Wrong alignment on InventoryService_IsCellValid");
static_assert(sizeof(InventoryService_IsCellValid) == 0x00001C, "Wrong size on InventoryService_IsCellValid");
static_assert(offsetof(InventoryService_IsCellValid, Type) == 0x000000, "Member 'InventoryService_IsCellValid::Type' has a wrong offset!");
static_assert(offsetof(InventoryService_IsCellValid, Cell) == 0x000004, "Member 'InventoryService_IsCellValid::Cell' has a wrong offset!");
static_assert(offsetof(InventoryService_IsCellValid, Size) == 0x00000C, "Member 'InventoryService_IsCellValid::Size' has a wrong offset!");
static_assert(offsetof(InventoryService_IsCellValid, PageId) == 0x000014, "Member 'InventoryService_IsCellValid::PageId' has a wrong offset!");
static_assert(offsetof(InventoryService_IsCellValid, ReturnValue) == 0x000018, "Member 'InventoryService_IsCellValid::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.IsEquipment
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_IsEquipment final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_IsEquipment) == 0x000004, "Wrong alignment on InventoryService_IsEquipment");
static_assert(sizeof(InventoryService_IsEquipment) == 0x000008, "Wrong size on InventoryService_IsEquipment");
static_assert(offsetof(InventoryService_IsEquipment, Type_id) == 0x000000, "Member 'InventoryService_IsEquipment::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_IsEquipment, ReturnValue) == 0x000004, "Member 'InventoryService_IsEquipment::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.IsFreezeOperation
// 0x0001 (0x0001 - 0x0000)
struct InventoryService_IsFreezeOperation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_IsFreezeOperation) == 0x000001, "Wrong alignment on InventoryService_IsFreezeOperation");
static_assert(sizeof(InventoryService_IsFreezeOperation) == 0x000001, "Wrong size on InventoryService_IsFreezeOperation");
static_assert(offsetof(InventoryService_IsFreezeOperation, ReturnValue) == 0x000000, "Member 'InventoryService_IsFreezeOperation::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.IsHaveSkin
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_IsHaveSkin final
{
public:
	int32                                         SkinId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_IsHaveSkin) == 0x000004, "Wrong alignment on InventoryService_IsHaveSkin");
static_assert(sizeof(InventoryService_IsHaveSkin) == 0x000008, "Wrong size on InventoryService_IsHaveSkin");
static_assert(offsetof(InventoryService_IsHaveSkin, SkinId) == 0x000000, "Member 'InventoryService_IsHaveSkin::SkinId' has a wrong offset!");
static_assert(offsetof(InventoryService_IsHaveSkin, ReturnValue) == 0x000004, "Member 'InventoryService_IsHaveSkin::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.IsHiddenHelmet
// 0x0001 (0x0001 - 0x0000)
struct InventoryService_IsHiddenHelmet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_IsHiddenHelmet) == 0x000001, "Wrong alignment on InventoryService_IsHiddenHelmet");
static_assert(sizeof(InventoryService_IsHiddenHelmet) == 0x000001, "Wrong size on InventoryService_IsHiddenHelmet");
static_assert(offsetof(InventoryService_IsHiddenHelmet, ReturnValue) == 0x000000, "Member 'InventoryService_IsHiddenHelmet::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.IsItemMatchLeftWeapon
// 0x000C (0x000C - 0x0000)
struct InventoryService_IsItemMatchLeftWeapon final
{
public:
	int32                                         Main_type_id;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Left_type_id;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_IsItemMatchLeftWeapon) == 0x000004, "Wrong alignment on InventoryService_IsItemMatchLeftWeapon");
static_assert(sizeof(InventoryService_IsItemMatchLeftWeapon) == 0x00000C, "Wrong size on InventoryService_IsItemMatchLeftWeapon");
static_assert(offsetof(InventoryService_IsItemMatchLeftWeapon, Main_type_id) == 0x000000, "Member 'InventoryService_IsItemMatchLeftWeapon::Main_type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_IsItemMatchLeftWeapon, Left_type_id) == 0x000004, "Member 'InventoryService_IsItemMatchLeftWeapon::Left_type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_IsItemMatchLeftWeapon, ReturnValue) == 0x000008, "Member 'InventoryService_IsItemMatchLeftWeapon::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.IsItemMatchSlot
// 0x0030 (0x0030 - 0x0000)
struct InventoryService_IsItemMatchSlot final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 SlotType;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Container;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IgnoreCondition;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_IsItemMatchSlot) == 0x000008, "Wrong alignment on InventoryService_IsItemMatchSlot");
static_assert(sizeof(InventoryService_IsItemMatchSlot) == 0x000030, "Wrong size on InventoryService_IsItemMatchSlot");
static_assert(offsetof(InventoryService_IsItemMatchSlot, Type_id) == 0x000000, "Member 'InventoryService_IsItemMatchSlot::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_IsItemMatchSlot, SlotType) == 0x000004, "Member 'InventoryService_IsItemMatchSlot::SlotType' has a wrong offset!");
static_assert(offsetof(InventoryService_IsItemMatchSlot, Container) == 0x000008, "Member 'InventoryService_IsItemMatchSlot::Container' has a wrong offset!");
static_assert(offsetof(InventoryService_IsItemMatchSlot, IgnoreCondition) == 0x000028, "Member 'InventoryService_IsItemMatchSlot::IgnoreCondition' has a wrong offset!");
static_assert(offsetof(InventoryService_IsItemMatchSlot, ReturnValue) == 0x000029, "Member 'InventoryService_IsItemMatchSlot::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.IsMatchSlotConfig
// 0x0030 (0x0030 - 0x0000)
struct InventoryService_IsMatchSlotConfig final
{
public:
	ETgfEquipSlot                                 SlotType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSubType                              WeaponType;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Container;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IgnoreCondition;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_IsMatchSlotConfig) == 0x000008, "Wrong alignment on InventoryService_IsMatchSlotConfig");
static_assert(sizeof(InventoryService_IsMatchSlotConfig) == 0x000030, "Wrong size on InventoryService_IsMatchSlotConfig");
static_assert(offsetof(InventoryService_IsMatchSlotConfig, SlotType) == 0x000000, "Member 'InventoryService_IsMatchSlotConfig::SlotType' has a wrong offset!");
static_assert(offsetof(InventoryService_IsMatchSlotConfig, WeaponType) == 0x000001, "Member 'InventoryService_IsMatchSlotConfig::WeaponType' has a wrong offset!");
static_assert(offsetof(InventoryService_IsMatchSlotConfig, Container) == 0x000008, "Member 'InventoryService_IsMatchSlotConfig::Container' has a wrong offset!");
static_assert(offsetof(InventoryService_IsMatchSlotConfig, IgnoreCondition) == 0x000028, "Member 'InventoryService_IsMatchSlotConfig::IgnoreCondition' has a wrong offset!");
static_assert(offsetof(InventoryService_IsMatchSlotConfig, ReturnValue) == 0x000029, "Member 'InventoryService_IsMatchSlotConfig::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.Lua_GetRoleAttributeValue
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_Lua_GetRoleAttributeValue final
{
public:
	EnRoleDisplayAttribueID                       AttributeID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_Lua_GetRoleAttributeValue) == 0x000004, "Wrong alignment on InventoryService_Lua_GetRoleAttributeValue");
static_assert(sizeof(InventoryService_Lua_GetRoleAttributeValue) == 0x000008, "Wrong size on InventoryService_Lua_GetRoleAttributeValue");
static_assert(offsetof(InventoryService_Lua_GetRoleAttributeValue, AttributeID) == 0x000000, "Member 'InventoryService_Lua_GetRoleAttributeValue::AttributeID' has a wrong offset!");
static_assert(offsetof(InventoryService_Lua_GetRoleAttributeValue, ReturnValue) == 0x000004, "Member 'InventoryService_Lua_GetRoleAttributeValue::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.Lua_OnPreLoadMap
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_Lua_OnPreLoadMap final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_Lua_OnPreLoadMap) == 0x000008, "Wrong alignment on InventoryService_Lua_OnPreLoadMap");
static_assert(sizeof(InventoryService_Lua_OnPreLoadMap) == 0x000010, "Wrong size on InventoryService_Lua_OnPreLoadMap");
static_assert(offsetof(InventoryService_Lua_OnPreLoadMap, MapName) == 0x000000, "Member 'InventoryService_Lua_OnPreLoadMap::MapName' has a wrong offset!");

// Function TGFGame.InventoryService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_OnGameLogout) == 0x000008, "Wrong alignment on InventoryService_OnGameLogout");
static_assert(sizeof(InventoryService_OnGameLogout) == 0x000008, "Wrong size on InventoryService_OnGameLogout");
static_assert(offsetof(InventoryService_OnGameLogout, Args) == 0x000000, "Member 'InventoryService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.InventoryService.OpenInventoryWindow
// 0x0001 (0x0001 - 0x0000)
struct InventoryService_OpenInventoryWindow final
{
public:
	bool                                          byHotkey;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_OpenInventoryWindow) == 0x000001, "Wrong alignment on InventoryService_OpenInventoryWindow");
static_assert(sizeof(InventoryService_OpenInventoryWindow) == 0x000001, "Wrong size on InventoryService_OpenInventoryWindow");
static_assert(offsetof(InventoryService_OpenInventoryWindow, byHotkey) == 0x000000, "Member 'InventoryService_OpenInventoryWindow::byHotkey' has a wrong offset!");

// Function TGFGame.InventoryService.ResetCell
// 0x0018 (0x0018 - 0x0000)
struct InventoryService_ResetCell final
{
public:
	EnItemStorageType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             Cell;                                              // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Size;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_ResetCell) == 0x000004, "Wrong alignment on InventoryService_ResetCell");
static_assert(sizeof(InventoryService_ResetCell) == 0x000018, "Wrong size on InventoryService_ResetCell");
static_assert(offsetof(InventoryService_ResetCell, Type) == 0x000000, "Member 'InventoryService_ResetCell::Type' has a wrong offset!");
static_assert(offsetof(InventoryService_ResetCell, Cell) == 0x000004, "Member 'InventoryService_ResetCell::Cell' has a wrong offset!");
static_assert(offsetof(InventoryService_ResetCell, Size) == 0x000010, "Member 'InventoryService_ResetCell::Size' has a wrong offset!");

// Function TGFGame.InventoryService.ResetFreezeOperationTime
// 0x0004 (0x0004 - 0x0000)
struct InventoryService_ResetFreezeOperationTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_ResetFreezeOperationTime) == 0x000004, "Wrong alignment on InventoryService_ResetFreezeOperationTime");
static_assert(sizeof(InventoryService_ResetFreezeOperationTime) == 0x000004, "Wrong size on InventoryService_ResetFreezeOperationTime");
static_assert(offsetof(InventoryService_ResetFreezeOperationTime, ReturnValue) == 0x000000, "Member 'InventoryService_ResetFreezeOperationTime::ReturnValue' has a wrong offset!");

// Function TGFGame.InventoryService.SendDeleteSkinTemplate
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_SendDeleteSkinTemplate final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SendDeleteSkinTemplate) == 0x000008, "Wrong alignment on InventoryService_SendDeleteSkinTemplate");
static_assert(sizeof(InventoryService_SendDeleteSkinTemplate) == 0x000010, "Wrong size on InventoryService_SendDeleteSkinTemplate");
static_assert(offsetof(InventoryService_SendDeleteSkinTemplate, ID) == 0x000000, "Member 'InventoryService_SendDeleteSkinTemplate::ID' has a wrong offset!");

// Function TGFGame.InventoryService.SendInventoryItemMoveReq
// 0x0010 (0x0010 - 0x0000)
struct InventoryService_SendInventoryItemMoveReq final
{
public:
	TArray<struct FTGFItemMoveAction>             Actions;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SendInventoryItemMoveReq) == 0x000008, "Wrong alignment on InventoryService_SendInventoryItemMoveReq");
static_assert(sizeof(InventoryService_SendInventoryItemMoveReq) == 0x000010, "Wrong size on InventoryService_SendInventoryItemMoveReq");
static_assert(offsetof(InventoryService_SendInventoryItemMoveReq, Actions) == 0x000000, "Member 'InventoryService_SendInventoryItemMoveReq::Actions' has a wrong offset!");

// Function TGFGame.InventoryService.SendInventoryItemSwapReq
// 0x0060 (0x0060 - 0x0000)
struct InventoryService_SendInventoryItemSwapReq final
{
public:
	struct FTGFItemPosition                       SrcCell;                                           // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       DestCell;                                          // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       Pos1;                                              // 0x0030(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       Pos2;                                              // 0x0048(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SendInventoryItemSwapReq) == 0x000008, "Wrong alignment on InventoryService_SendInventoryItemSwapReq");
static_assert(sizeof(InventoryService_SendInventoryItemSwapReq) == 0x000060, "Wrong size on InventoryService_SendInventoryItemSwapReq");
static_assert(offsetof(InventoryService_SendInventoryItemSwapReq, SrcCell) == 0x000000, "Member 'InventoryService_SendInventoryItemSwapReq::SrcCell' has a wrong offset!");
static_assert(offsetof(InventoryService_SendInventoryItemSwapReq, DestCell) == 0x000018, "Member 'InventoryService_SendInventoryItemSwapReq::DestCell' has a wrong offset!");
static_assert(offsetof(InventoryService_SendInventoryItemSwapReq, Pos1) == 0x000030, "Member 'InventoryService_SendInventoryItemSwapReq::Pos1' has a wrong offset!");
static_assert(offsetof(InventoryService_SendInventoryItemSwapReq, Pos2) == 0x000048, "Member 'InventoryService_SendInventoryItemSwapReq::Pos2' has a wrong offset!");

// Function TGFGame.InventoryService.SendMithrilRoleWearReq
// 0x0020 (0x0020 - 0x0000)
struct InventoryService_SendMithrilRoleWearReq final
{
public:
	int32                                         TypeId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       Position;                                          // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SendMithrilRoleWearReq) == 0x000008, "Wrong alignment on InventoryService_SendMithrilRoleWearReq");
static_assert(sizeof(InventoryService_SendMithrilRoleWearReq) == 0x000020, "Wrong size on InventoryService_SendMithrilRoleWearReq");
static_assert(offsetof(InventoryService_SendMithrilRoleWearReq, TypeId) == 0x000000, "Member 'InventoryService_SendMithrilRoleWearReq::TypeId' has a wrong offset!");
static_assert(offsetof(InventoryService_SendMithrilRoleWearReq, Count) == 0x000004, "Member 'InventoryService_SendMithrilRoleWearReq::Count' has a wrong offset!");
static_assert(offsetof(InventoryService_SendMithrilRoleWearReq, Position) == 0x000008, "Member 'InventoryService_SendMithrilRoleWearReq::Position' has a wrong offset!");

// Function TGFGame.InventoryService.SendRoleSelectSkillReq
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_SendRoleSelectSkillReq final
{
public:
	int32                                         Position;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SendRoleSelectSkillReq) == 0x000004, "Wrong alignment on InventoryService_SendRoleSelectSkillReq");
static_assert(sizeof(InventoryService_SendRoleSelectSkillReq) == 0x000008, "Wrong size on InventoryService_SendRoleSelectSkillReq");
static_assert(offsetof(InventoryService_SendRoleSelectSkillReq, Position) == 0x000000, "Member 'InventoryService_SendRoleSelectSkillReq::Position' has a wrong offset!");
static_assert(offsetof(InventoryService_SendRoleSelectSkillReq, SkillId) == 0x000004, "Member 'InventoryService_SendRoleSelectSkillReq::SkillId' has a wrong offset!");

// Function TGFGame.InventoryService.SendSaveRoleSkin
// 0x0020 (0x0020 - 0x0000)
struct InventoryService_SendSaveRoleSkin final
{
public:
	int64                                         RoleGuid;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemIds;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHideHelmet;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_SendSaveRoleSkin) == 0x000008, "Wrong alignment on InventoryService_SendSaveRoleSkin");
static_assert(sizeof(InventoryService_SendSaveRoleSkin) == 0x000020, "Wrong size on InventoryService_SendSaveRoleSkin");
static_assert(offsetof(InventoryService_SendSaveRoleSkin, RoleGuid) == 0x000000, "Member 'InventoryService_SendSaveRoleSkin::RoleGuid' has a wrong offset!");
static_assert(offsetof(InventoryService_SendSaveRoleSkin, ItemIds) == 0x000008, "Member 'InventoryService_SendSaveRoleSkin::ItemIds' has a wrong offset!");
static_assert(offsetof(InventoryService_SendSaveRoleSkin, bHideHelmet) == 0x000018, "Member 'InventoryService_SendSaveRoleSkin::bHideHelmet' has a wrong offset!");

// Function TGFGame.InventoryService.SendSaveSkinTemplate
// 0x0028 (0x0028 - 0x0000)
struct InventoryService_SendSaveSkinTemplate final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemIds;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHideHelmet;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_SendSaveSkinTemplate) == 0x000008, "Wrong alignment on InventoryService_SendSaveSkinTemplate");
static_assert(sizeof(InventoryService_SendSaveSkinTemplate) == 0x000028, "Wrong size on InventoryService_SendSaveSkinTemplate");
static_assert(offsetof(InventoryService_SendSaveSkinTemplate, Param_Name) == 0x000000, "Member 'InventoryService_SendSaveSkinTemplate::Param_Name' has a wrong offset!");
static_assert(offsetof(InventoryService_SendSaveSkinTemplate, ItemIds) == 0x000010, "Member 'InventoryService_SendSaveSkinTemplate::ItemIds' has a wrong offset!");
static_assert(offsetof(InventoryService_SendSaveSkinTemplate, bHideHelmet) == 0x000020, "Member 'InventoryService_SendSaveSkinTemplate::bHideHelmet' has a wrong offset!");

// Function TGFGame.InventoryService.SendSoulBoundReq
// 0x0020 (0x0020 - 0x0000)
struct InventoryService_SendSoulBoundReq final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTGFItem>                       Items;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         Guid;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SendSoulBoundReq) == 0x000008, "Wrong alignment on InventoryService_SendSoulBoundReq");
static_assert(sizeof(InventoryService_SendSoulBoundReq) == 0x000020, "Wrong size on InventoryService_SendSoulBoundReq");
static_assert(offsetof(InventoryService_SendSoulBoundReq, Param_Index) == 0x000000, "Member 'InventoryService_SendSoulBoundReq::Param_Index' has a wrong offset!");
static_assert(offsetof(InventoryService_SendSoulBoundReq, Items) == 0x000008, "Member 'InventoryService_SendSoulBoundReq::Items' has a wrong offset!");
static_assert(offsetof(InventoryService_SendSoulBoundReq, Guid) == 0x000018, "Member 'InventoryService_SendSoulBoundReq::Guid' has a wrong offset!");

// Function TGFGame.InventoryService.SendTakeoffItem
// 0x0048 (0x0048 - 0x0000)
struct InventoryService_SendTakeoffItem final
{
public:
	struct FTGFItemPosition                       ItemCell;                                          // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       DestCell;                                          // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       SecondPos;                                         // 0x0030(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SendTakeoffItem) == 0x000008, "Wrong alignment on InventoryService_SendTakeoffItem");
static_assert(sizeof(InventoryService_SendTakeoffItem) == 0x000048, "Wrong size on InventoryService_SendTakeoffItem");
static_assert(offsetof(InventoryService_SendTakeoffItem, ItemCell) == 0x000000, "Member 'InventoryService_SendTakeoffItem::ItemCell' has a wrong offset!");
static_assert(offsetof(InventoryService_SendTakeoffItem, DestCell) == 0x000018, "Member 'InventoryService_SendTakeoffItem::DestCell' has a wrong offset!");
static_assert(offsetof(InventoryService_SendTakeoffItem, SecondPos) == 0x000030, "Member 'InventoryService_SendTakeoffItem::SecondPos' has a wrong offset!");

// Function TGFGame.InventoryService.SendUseItem
// 0x0060 (0x0060 - 0x0000)
struct InventoryService_SendUseItem final
{
public:
	struct FTGFItem                               Item;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SendUseItem) == 0x000008, "Wrong alignment on InventoryService_SendUseItem");
static_assert(sizeof(InventoryService_SendUseItem) == 0x000060, "Wrong size on InventoryService_SendUseItem");
static_assert(offsetof(InventoryService_SendUseItem, Item) == 0x000000, "Member 'InventoryService_SendUseItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryService_SendUseItem, Count) == 0x000058, "Member 'InventoryService_SendUseItem::Count' has a wrong offset!");
static_assert(offsetof(InventoryService_SendUseItem, Param_Index) == 0x00005C, "Member 'InventoryService_SendUseItem::Param_Index' has a wrong offset!");

// Function TGFGame.InventoryService.SendWeaponSetSwap
// 0x0060 (0x0060 - 0x0000)
struct InventoryService_SendWeaponSetSwap final
{
public:
	struct FTGFItemPosition                       SrcCell1;                                          // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       SrcCell2;                                          // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       DestCell1;                                         // 0x0030(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       DestCell2;                                         // 0x0048(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SendWeaponSetSwap) == 0x000008, "Wrong alignment on InventoryService_SendWeaponSetSwap");
static_assert(sizeof(InventoryService_SendWeaponSetSwap) == 0x000060, "Wrong size on InventoryService_SendWeaponSetSwap");
static_assert(offsetof(InventoryService_SendWeaponSetSwap, SrcCell1) == 0x000000, "Member 'InventoryService_SendWeaponSetSwap::SrcCell1' has a wrong offset!");
static_assert(offsetof(InventoryService_SendWeaponSetSwap, SrcCell2) == 0x000018, "Member 'InventoryService_SendWeaponSetSwap::SrcCell2' has a wrong offset!");
static_assert(offsetof(InventoryService_SendWeaponSetSwap, DestCell1) == 0x000030, "Member 'InventoryService_SendWeaponSetSwap::DestCell1' has a wrong offset!");
static_assert(offsetof(InventoryService_SendWeaponSetSwap, DestCell2) == 0x000048, "Member 'InventoryService_SendWeaponSetSwap::DestCell2' has a wrong offset!");

// Function TGFGame.InventoryService.SendWearItem
// 0x0058 (0x0058 - 0x0000)
struct InventoryService_SendWearItem final
{
public:
	struct FTGFItemPosition                       ItemCell;                                          // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Partid;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFItemPosition                       SwapPos;                                           // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       SecondPos;                                         // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_SendWearItem) == 0x000008, "Wrong alignment on InventoryService_SendWearItem");
static_assert(sizeof(InventoryService_SendWearItem) == 0x000058, "Wrong size on InventoryService_SendWearItem");
static_assert(offsetof(InventoryService_SendWearItem, ItemCell) == 0x000000, "Member 'InventoryService_SendWearItem::ItemCell' has a wrong offset!");
static_assert(offsetof(InventoryService_SendWearItem, Partid) == 0x000018, "Member 'InventoryService_SendWearItem::Partid' has a wrong offset!");
static_assert(offsetof(InventoryService_SendWearItem, SwapPos) == 0x000020, "Member 'InventoryService_SendWearItem::SwapPos' has a wrong offset!");
static_assert(offsetof(InventoryService_SendWearItem, SecondPos) == 0x000038, "Member 'InventoryService_SendWearItem::SecondPos' has a wrong offset!");
static_assert(offsetof(InventoryService_SendWearItem, ItemCount) == 0x000050, "Member 'InventoryService_SendWearItem::ItemCount' has a wrong offset!");

// Function TGFGame.InventoryService.SetClickDragingWidget
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_SetClickDragingWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SetClickDragingWidget) == 0x000008, "Wrong alignment on InventoryService_SetClickDragingWidget");
static_assert(sizeof(InventoryService_SetClickDragingWidget) == 0x000008, "Wrong size on InventoryService_SetClickDragingWidget");
static_assert(offsetof(InventoryService_SetClickDragingWidget, Widget) == 0x000000, "Member 'InventoryService_SetClickDragingWidget::Widget' has a wrong offset!");

// Function TGFGame.InventoryService.SetCurrentRole
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_SetCurrentRole final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SetCurrentRole) == 0x000008, "Wrong alignment on InventoryService_SetCurrentRole");
static_assert(sizeof(InventoryService_SetCurrentRole) == 0x000008, "Wrong size on InventoryService_SetCurrentRole");
static_assert(offsetof(InventoryService_SetCurrentRole, Guid) == 0x000000, "Member 'InventoryService_SetCurrentRole::Guid' has a wrong offset!");

// Function TGFGame.InventoryService.SetInventoryWindow
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_SetInventoryWindow final
{
public:
	class UTGFWindow*                             Win;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SetInventoryWindow) == 0x000008, "Wrong alignment on InventoryService_SetInventoryWindow");
static_assert(sizeof(InventoryService_SetInventoryWindow) == 0x000008, "Wrong size on InventoryService_SetInventoryWindow");
static_assert(offsetof(InventoryService_SetInventoryWindow, Win) == 0x000000, "Member 'InventoryService_SetInventoryWindow::Win' has a wrong offset!");

// Function TGFGame.InventoryService.SetItemTooltipWidget
// 0x0008 (0x0008 - 0x0000)
struct InventoryService_SetItemTooltipWidget final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SetItemTooltipWidget) == 0x000008, "Wrong alignment on InventoryService_SetItemTooltipWidget");
static_assert(sizeof(InventoryService_SetItemTooltipWidget) == 0x000008, "Wrong size on InventoryService_SetItemTooltipWidget");
static_assert(offsetof(InventoryService_SetItemTooltipWidget, Widget) == 0x000000, "Member 'InventoryService_SetItemTooltipWidget::Widget' has a wrong offset!");

// Function TGFGame.InventoryService.SetTooltipCompare
// 0x0001 (0x0001 - 0x0000)
struct InventoryService_SetTooltipCompare final
{
public:
	bool                                          Compare;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_SetTooltipCompare) == 0x000001, "Wrong alignment on InventoryService_SetTooltipCompare");
static_assert(sizeof(InventoryService_SetTooltipCompare) == 0x000001, "Wrong size on InventoryService_SetTooltipCompare");
static_assert(offsetof(InventoryService_SetTooltipCompare, Compare) == 0x000000, "Member 'InventoryService_SetTooltipCompare::Compare' has a wrong offset!");

// Function TGFGame.InventoryService.SpawnEquipmentActorsWithAttachTarget
// 0x0028 (0x0028 - 0x0000)
struct InventoryService_SpawnEquipmentActorsWithAttachTarget final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        AttachTarget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutSpawnedActors;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAttachToLeft;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_SpawnEquipmentActorsWithAttachTarget) == 0x000008, "Wrong alignment on InventoryService_SpawnEquipmentActorsWithAttachTarget");
static_assert(sizeof(InventoryService_SpawnEquipmentActorsWithAttachTarget) == 0x000028, "Wrong size on InventoryService_SpawnEquipmentActorsWithAttachTarget");
static_assert(offsetof(InventoryService_SpawnEquipmentActorsWithAttachTarget, Type_id) == 0x000000, "Member 'InventoryService_SpawnEquipmentActorsWithAttachTarget::Type_id' has a wrong offset!");
static_assert(offsetof(InventoryService_SpawnEquipmentActorsWithAttachTarget, AttachTarget) == 0x000008, "Member 'InventoryService_SpawnEquipmentActorsWithAttachTarget::AttachTarget' has a wrong offset!");
static_assert(offsetof(InventoryService_SpawnEquipmentActorsWithAttachTarget, OutSpawnedActors) == 0x000010, "Member 'InventoryService_SpawnEquipmentActorsWithAttachTarget::OutSpawnedActors' has a wrong offset!");
static_assert(offsetof(InventoryService_SpawnEquipmentActorsWithAttachTarget, bAttachToLeft) == 0x000020, "Member 'InventoryService_SpawnEquipmentActorsWithAttachTarget::bAttachToLeft' has a wrong offset!");

// Function TGFGame.InventoryService.SpawnEquipmentActorsWithAttachTargetByDefinition
// 0x0028 (0x0028 - 0x0000)
struct InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition final
{
public:
	const class UTgfEquipmentDefinition*          Def;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachTarget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutSpawnedActors;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAttachToLeft;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition) == 0x000008, "Wrong alignment on InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition");
static_assert(sizeof(InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition) == 0x000028, "Wrong size on InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition");
static_assert(offsetof(InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition, Def) == 0x000000, "Member 'InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition::Def' has a wrong offset!");
static_assert(offsetof(InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition, AttachTarget) == 0x000008, "Member 'InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition::AttachTarget' has a wrong offset!");
static_assert(offsetof(InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition, OutSpawnedActors) == 0x000010, "Member 'InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition::OutSpawnedActors' has a wrong offset!");
static_assert(offsetof(InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition, bAttachToLeft) == 0x000020, "Member 'InventoryService_SpawnEquipmentActorsWithAttachTargetByDefinition::bAttachToLeft' has a wrong offset!");

// Function TGFGame.InventoryService.FindFragmentByClass
// 0x0018 (0x0018 - 0x0000)
struct InventoryService_FindFragmentByClass final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> Item_class;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemFragment> Fragment_class;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ULyraInventoryItemFragment*       ReturnValue;                                       // 0x0010(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryService_FindFragmentByClass) == 0x000008, "Wrong alignment on InventoryService_FindFragmentByClass");
static_assert(sizeof(InventoryService_FindFragmentByClass) == 0x000018, "Wrong size on InventoryService_FindFragmentByClass");
static_assert(offsetof(InventoryService_FindFragmentByClass, Item_class) == 0x000000, "Member 'InventoryService_FindFragmentByClass::Item_class' has a wrong offset!");
static_assert(offsetof(InventoryService_FindFragmentByClass, Fragment_class) == 0x000008, "Member 'InventoryService_FindFragmentByClass::Fragment_class' has a wrong offset!");
static_assert(offsetof(InventoryService_FindFragmentByClass, ReturnValue) == 0x000010, "Member 'InventoryService_FindFragmentByClass::ReturnValue' has a wrong offset!");

// Function TGFGame.JumpManager.JumpByHref
// 0x0010 (0x0010 - 0x0000)
struct JumpManager_JumpByHref final
{
public:
	class FString                                 Href;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JumpManager_JumpByHref) == 0x000008, "Wrong alignment on JumpManager_JumpByHref");
static_assert(sizeof(JumpManager_JumpByHref) == 0x000010, "Wrong size on JumpManager_JumpByHref");
static_assert(offsetof(JumpManager_JumpByHref, Href) == 0x000000, "Member 'JumpManager_JumpByHref::Href' has a wrong offset!");

// Function TGFGame.JumpManager.Lua_HyperlinkJump
// 0x0010 (0x0010 - 0x0000)
struct JumpManager_Lua_HyperlinkJump final
{
public:
	class FString                                 Href;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JumpManager_Lua_HyperlinkJump) == 0x000008, "Wrong alignment on JumpManager_Lua_HyperlinkJump");
static_assert(sizeof(JumpManager_Lua_HyperlinkJump) == 0x000010, "Wrong size on JumpManager_Lua_HyperlinkJump");
static_assert(offsetof(JumpManager_Lua_HyperlinkJump, Href) == 0x000000, "Member 'JumpManager_Lua_HyperlinkJump::Href' has a wrong offset!");

// Function TGFGame.JumpManager.OnHyperlinkJumpDelegate
// 0x0010 (0x0010 - 0x0000)
struct JumpManager_OnHyperlinkJumpDelegate final
{
public:
	class FString                                 Href;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JumpManager_OnHyperlinkJumpDelegate) == 0x000008, "Wrong alignment on JumpManager_OnHyperlinkJumpDelegate");
static_assert(sizeof(JumpManager_OnHyperlinkJumpDelegate) == 0x000010, "Wrong size on JumpManager_OnHyperlinkJumpDelegate");
static_assert(offsetof(JumpManager_OnHyperlinkJumpDelegate, Href) == 0x000000, "Member 'JumpManager_OnHyperlinkJumpDelegate::Href' has a wrong offset!");

// Function TGFGame.LevelService.GetLevelItemByIdAndType
// 0x0010 (0x0010 - 0x0000)
struct LevelService_GetLevelItemByIdAndType final
{
public:
	int32                                         LevelId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelType;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelItem*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelService_GetLevelItemByIdAndType) == 0x000008, "Wrong alignment on LevelService_GetLevelItemByIdAndType");
static_assert(sizeof(LevelService_GetLevelItemByIdAndType) == 0x000010, "Wrong size on LevelService_GetLevelItemByIdAndType");
static_assert(offsetof(LevelService_GetLevelItemByIdAndType, LevelId) == 0x000000, "Member 'LevelService_GetLevelItemByIdAndType::LevelId' has a wrong offset!");
static_assert(offsetof(LevelService_GetLevelItemByIdAndType, LevelType) == 0x000004, "Member 'LevelService_GetLevelItemByIdAndType::LevelType' has a wrong offset!");
static_assert(offsetof(LevelService_GetLevelItemByIdAndType, ReturnValue) == 0x000008, "Member 'LevelService_GetLevelItemByIdAndType::ReturnValue' has a wrong offset!");

// Function TGFGame.LevelService.GetLevelItemByName
// 0x0018 (0x0018 - 0x0000)
struct LevelService_GetLevelItemByName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelItem*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelService_GetLevelItemByName) == 0x000008, "Wrong alignment on LevelService_GetLevelItemByName");
static_assert(sizeof(LevelService_GetLevelItemByName) == 0x000018, "Wrong size on LevelService_GetLevelItemByName");
static_assert(offsetof(LevelService_GetLevelItemByName, Param_Name) == 0x000000, "Member 'LevelService_GetLevelItemByName::Param_Name' has a wrong offset!");
static_assert(offsetof(LevelService_GetLevelItemByName, ReturnValue) == 0x000010, "Member 'LevelService_GetLevelItemByName::ReturnValue' has a wrong offset!");

// Function TGFGame.LevelService.GetLevels
// 0x0010 (0x0010 - 0x0000)
struct LevelService_GetLevels final
{
public:
	TArray<class ULevelItem*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelService_GetLevels) == 0x000008, "Wrong alignment on LevelService_GetLevels");
static_assert(sizeof(LevelService_GetLevels) == 0x000010, "Wrong size on LevelService_GetLevels");
static_assert(offsetof(LevelService_GetLevels, ReturnValue) == 0x000000, "Member 'LevelService_GetLevels::ReturnValue' has a wrong offset!");

// Function TGFGame.LobbyService.ChangeHallForce
// 0x0001 (0x0001 - 0x0000)
struct LobbyService_ChangeHallForce final
{
public:
	ETGFProtoTgfEnHallSwitchType                  SwitchType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyService_ChangeHallForce) == 0x000001, "Wrong alignment on LobbyService_ChangeHallForce");
static_assert(sizeof(LobbyService_ChangeHallForce) == 0x000001, "Wrong size on LobbyService_ChangeHallForce");
static_assert(offsetof(LobbyService_ChangeHallForce, SwitchType) == 0x000000, "Member 'LobbyService_ChangeHallForce::SwitchType' has a wrong offset!");

// Function TGFGame.LobbyService.CheckCanChangeHallForce
// 0x0002 (0x0002 - 0x0000)
struct LobbyService_CheckCanChangeHallForce final
{
public:
	bool                                          bIsToast;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyService_CheckCanChangeHallForce) == 0x000001, "Wrong alignment on LobbyService_CheckCanChangeHallForce");
static_assert(sizeof(LobbyService_CheckCanChangeHallForce) == 0x000002, "Wrong size on LobbyService_CheckCanChangeHallForce");
static_assert(offsetof(LobbyService_CheckCanChangeHallForce, bIsToast) == 0x000000, "Member 'LobbyService_CheckCanChangeHallForce::bIsToast' has a wrong offset!");
static_assert(offsetof(LobbyService_CheckCanChangeHallForce, ReturnValue) == 0x000001, "Member 'LobbyService_CheckCanChangeHallForce::ReturnValue' has a wrong offset!");

// Function TGFGame.LobbyService.GetCurrentLobbyName
// 0x0010 (0x0010 - 0x0000)
struct LobbyService_GetCurrentLobbyName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyService_GetCurrentLobbyName) == 0x000008, "Wrong alignment on LobbyService_GetCurrentLobbyName");
static_assert(sizeof(LobbyService_GetCurrentLobbyName) == 0x000010, "Wrong size on LobbyService_GetCurrentLobbyName");
static_assert(offsetof(LobbyService_GetCurrentLobbyName, ReturnValue) == 0x000000, "Member 'LobbyService_GetCurrentLobbyName::ReturnValue' has a wrong offset!");

// Function TGFGame.LobbyService.GetPlayerProfile
// 0x0068 (0x0068 - 0x0000)
struct LobbyService_GetPlayerProfile final
{
public:
	struct FPlayerProfile                         ReturnValue;                                       // 0x0000(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyService_GetPlayerProfile) == 0x000008, "Wrong alignment on LobbyService_GetPlayerProfile");
static_assert(sizeof(LobbyService_GetPlayerProfile) == 0x000068, "Wrong size on LobbyService_GetPlayerProfile");
static_assert(offsetof(LobbyService_GetPlayerProfile, ReturnValue) == 0x000000, "Member 'LobbyService_GetPlayerProfile::ReturnValue' has a wrong offset!");

// Function TGFGame.LobbyService.LoadLobbyLevel
// 0x0010 (0x0010 - 0x0000)
struct LobbyService_LoadLobbyLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                LobbyUi;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyService_LoadLobbyLevel) == 0x000008, "Wrong alignment on LobbyService_LoadLobbyLevel");
static_assert(sizeof(LobbyService_LoadLobbyLevel) == 0x000010, "Wrong size on LobbyService_LoadLobbyLevel");
static_assert(offsetof(LobbyService_LoadLobbyLevel, LevelName) == 0x000000, "Member 'LobbyService_LoadLobbyLevel::LevelName' has a wrong offset!");
static_assert(offsetof(LobbyService_LoadLobbyLevel, LobbyUi) == 0x000008, "Member 'LobbyService_LoadLobbyLevel::LobbyUi' has a wrong offset!");

// Function TGFGame.LobbyService.OnLoadingEnd
// 0x0008 (0x0008 - 0x0000)
struct LobbyService_OnLoadingEnd final
{
public:
	class UWorld*                                 LoadedWorld;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyService_OnLoadingEnd) == 0x000008, "Wrong alignment on LobbyService_OnLoadingEnd");
static_assert(sizeof(LobbyService_OnLoadingEnd) == 0x000008, "Wrong size on LobbyService_OnLoadingEnd");
static_assert(offsetof(LobbyService_OnLoadingEnd, LoadedWorld) == 0x000000, "Member 'LobbyService_OnLoadingEnd::LoadedWorld' has a wrong offset!");

// Function TGFGame.LobbyService.SetCurrentLobbyName
// 0x0010 (0x0010 - 0x0000)
struct LobbyService_SetCurrentLobbyName final
{
public:
	class FString                                 LobbyName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyService_SetCurrentLobbyName) == 0x000008, "Wrong alignment on LobbyService_SetCurrentLobbyName");
static_assert(sizeof(LobbyService_SetCurrentLobbyName) == 0x000010, "Wrong size on LobbyService_SetCurrentLobbyName");
static_assert(offsetof(LobbyService_SetCurrentLobbyName, LobbyName) == 0x000000, "Member 'LobbyService_SetCurrentLobbyName::LobbyName' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.CancelLazyDeleteRole
// 0x0008 (0x0008 - 0x0000)
struct LoginCreateRoleWindow_CancelLazyDeleteRole final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_CancelLazyDeleteRole) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_CancelLazyDeleteRole");
static_assert(sizeof(LoginCreateRoleWindow_CancelLazyDeleteRole) == 0x000008, "Wrong size on LoginCreateRoleWindow_CancelLazyDeleteRole");
static_assert(offsetof(LoginCreateRoleWindow_CancelLazyDeleteRole, Guid) == 0x000000, "Member 'LoginCreateRoleWindow_CancelLazyDeleteRole::Guid' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.EnterHallWithGuid
// 0x0010 (0x0010 - 0x0000)
struct LoginCreateRoleWindow_EnterHallWithGuid final
{
public:
	int64                                         SelectGuid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CurrentGuid;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_EnterHallWithGuid) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_EnterHallWithGuid");
static_assert(sizeof(LoginCreateRoleWindow_EnterHallWithGuid) == 0x000010, "Wrong size on LoginCreateRoleWindow_EnterHallWithGuid");
static_assert(offsetof(LoginCreateRoleWindow_EnterHallWithGuid, SelectGuid) == 0x000000, "Member 'LoginCreateRoleWindow_EnterHallWithGuid::SelectGuid' has a wrong offset!");
static_assert(offsetof(LoginCreateRoleWindow_EnterHallWithGuid, CurrentGuid) == 0x000008, "Member 'LoginCreateRoleWindow_EnterHallWithGuid::CurrentGuid' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.GetRaceList
// 0x0010 (0x0010 - 0x0000)
struct LoginCreateRoleWindow_GetRaceList final
{
public:
	TArray<class URoleRaceData*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_GetRaceList) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_GetRaceList");
static_assert(sizeof(LoginCreateRoleWindow_GetRaceList) == 0x000010, "Wrong size on LoginCreateRoleWindow_GetRaceList");
static_assert(offsetof(LoginCreateRoleWindow_GetRaceList, ReturnValue) == 0x000000, "Member 'LoginCreateRoleWindow_GetRaceList::ReturnValue' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.GetRaceListBy
// 0x0018 (0x0018 - 0x0000)
struct LoginCreateRoleWindow_GetRaceListBy final
{
public:
	int32                                         Race;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UExcelLoaderTgfConfigExcelRoleType*> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_GetRaceListBy) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_GetRaceListBy");
static_assert(sizeof(LoginCreateRoleWindow_GetRaceListBy) == 0x000018, "Wrong size on LoginCreateRoleWindow_GetRaceListBy");
static_assert(offsetof(LoginCreateRoleWindow_GetRaceListBy, Race) == 0x000000, "Member 'LoginCreateRoleWindow_GetRaceListBy::Race' has a wrong offset!");
static_assert(offsetof(LoginCreateRoleWindow_GetRaceListBy, ReturnValue) == 0x000008, "Member 'LoginCreateRoleWindow_GetRaceListBy::ReturnValue' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.GetTexture2D
// 0x0018 (0x0018 - 0x0000)
struct LoginCreateRoleWindow_GetTexture2D final
{
public:
	class FString                                 Fs;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_GetTexture2D) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_GetTexture2D");
static_assert(sizeof(LoginCreateRoleWindow_GetTexture2D) == 0x000018, "Wrong size on LoginCreateRoleWindow_GetTexture2D");
static_assert(offsetof(LoginCreateRoleWindow_GetTexture2D, Fs) == 0x000000, "Member 'LoginCreateRoleWindow_GetTexture2D::Fs' has a wrong offset!");
static_assert(offsetof(LoginCreateRoleWindow_GetTexture2D, ReturnValue) == 0x000010, "Member 'LoginCreateRoleWindow_GetTexture2D::ReturnValue' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.GetUserRoles
// 0x0010 (0x0010 - 0x0000)
struct LoginCreateRoleWindow_GetUserRoles final
{
public:
	TArray<class UDUserRole*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_GetUserRoles) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_GetUserRoles");
static_assert(sizeof(LoginCreateRoleWindow_GetUserRoles) == 0x000010, "Wrong size on LoginCreateRoleWindow_GetUserRoles");
static_assert(offsetof(LoginCreateRoleWindow_GetUserRoles, ReturnValue) == 0x000000, "Member 'LoginCreateRoleWindow_GetUserRoles::ReturnValue' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.LazyDeleteRole
// 0x0008 (0x0008 - 0x0000)
struct LoginCreateRoleWindow_LazyDeleteRole final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_LazyDeleteRole) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_LazyDeleteRole");
static_assert(sizeof(LoginCreateRoleWindow_LazyDeleteRole) == 0x000008, "Wrong size on LoginCreateRoleWindow_LazyDeleteRole");
static_assert(offsetof(LoginCreateRoleWindow_LazyDeleteRole, Guid) == 0x000000, "Member 'LoginCreateRoleWindow_LazyDeleteRole::Guid' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.OnHallSetRoleRspSuccess
// 0x0008 (0x0008 - 0x0000)
struct LoginCreateRoleWindow_OnHallSetRoleRspSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_OnHallSetRoleRspSuccess) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_OnHallSetRoleRspSuccess");
static_assert(sizeof(LoginCreateRoleWindow_OnHallSetRoleRspSuccess) == 0x000008, "Wrong size on LoginCreateRoleWindow_OnHallSetRoleRspSuccess");
static_assert(offsetof(LoginCreateRoleWindow_OnHallSetRoleRspSuccess, Args) == 0x000000, "Member 'LoginCreateRoleWindow_OnHallSetRoleRspSuccess::Args' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.OnLazyDeleteTimeReached
// 0x0008 (0x0008 - 0x0000)
struct LoginCreateRoleWindow_OnLazyDeleteTimeReached final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_OnLazyDeleteTimeReached) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_OnLazyDeleteTimeReached");
static_assert(sizeof(LoginCreateRoleWindow_OnLazyDeleteTimeReached) == 0x000008, "Wrong size on LoginCreateRoleWindow_OnLazyDeleteTimeReached");
static_assert(offsetof(LoginCreateRoleWindow_OnLazyDeleteTimeReached, Guid) == 0x000000, "Member 'LoginCreateRoleWindow_OnLazyDeleteTimeReached::Guid' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.OnReshapeFaceRspSuccess
// 0x0008 (0x0008 - 0x0000)
struct LoginCreateRoleWindow_OnReshapeFaceRspSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_OnReshapeFaceRspSuccess) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_OnReshapeFaceRspSuccess");
static_assert(sizeof(LoginCreateRoleWindow_OnReshapeFaceRspSuccess) == 0x000008, "Wrong size on LoginCreateRoleWindow_OnReshapeFaceRspSuccess");
static_assert(offsetof(LoginCreateRoleWindow_OnReshapeFaceRspSuccess, Args) == 0x000000, "Member 'LoginCreateRoleWindow_OnReshapeFaceRspSuccess::Args' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.OnRoleCreateSuccess
// 0x0008 (0x0008 - 0x0000)
struct LoginCreateRoleWindow_OnRoleCreateSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_OnRoleCreateSuccess) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_OnRoleCreateSuccess");
static_assert(sizeof(LoginCreateRoleWindow_OnRoleCreateSuccess) == 0x000008, "Wrong size on LoginCreateRoleWindow_OnRoleCreateSuccess");
static_assert(offsetof(LoginCreateRoleWindow_OnRoleCreateSuccess, Args) == 0x000000, "Member 'LoginCreateRoleWindow_OnRoleCreateSuccess::Args' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.OnRoleDeleteResponse
// 0x0008 (0x0008 - 0x0000)
struct LoginCreateRoleWindow_OnRoleDeleteResponse final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_OnRoleDeleteResponse) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_OnRoleDeleteResponse");
static_assert(sizeof(LoginCreateRoleWindow_OnRoleDeleteResponse) == 0x000008, "Wrong size on LoginCreateRoleWindow_OnRoleDeleteResponse");
static_assert(offsetof(LoginCreateRoleWindow_OnRoleDeleteResponse, Args) == 0x000000, "Member 'LoginCreateRoleWindow_OnRoleDeleteResponse::Args' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.SendHallSetRoleReq
// 0x0008 (0x0008 - 0x0000)
struct LoginCreateRoleWindow_SendHallSetRoleReq final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_SendHallSetRoleReq) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_SendHallSetRoleReq");
static_assert(sizeof(LoginCreateRoleWindow_SendHallSetRoleReq) == 0x000008, "Wrong size on LoginCreateRoleWindow_SendHallSetRoleReq");
static_assert(offsetof(LoginCreateRoleWindow_SendHallSetRoleReq, Guid) == 0x000000, "Member 'LoginCreateRoleWindow_SendHallSetRoleReq::Guid' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.SendRoleCreateReq
// 0x0060 (0x0060 - 0x0000)
struct LoginCreateRoleWindow_SendRoleCreateReq final
{
public:
	struct FRoleCreateData                        Data;                                              // 0x0000(0x0060)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_SendRoleCreateReq) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_SendRoleCreateReq");
static_assert(sizeof(LoginCreateRoleWindow_SendRoleCreateReq) == 0x000060, "Wrong size on LoginCreateRoleWindow_SendRoleCreateReq");
static_assert(offsetof(LoginCreateRoleWindow_SendRoleCreateReq, Data) == 0x000000, "Member 'LoginCreateRoleWindow_SendRoleCreateReq::Data' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.SendRoleCreateRequest
// 0x0020 (0x0020 - 0x0000)
struct LoginCreateRoleWindow_SendRoleCreateRequest final
{
public:
	int32                                         TypeId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoleName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gender;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoginCreateRoleWindow_SendRoleCreateRequest) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_SendRoleCreateRequest");
static_assert(sizeof(LoginCreateRoleWindow_SendRoleCreateRequest) == 0x000020, "Wrong size on LoginCreateRoleWindow_SendRoleCreateRequest");
static_assert(offsetof(LoginCreateRoleWindow_SendRoleCreateRequest, TypeId) == 0x000000, "Member 'LoginCreateRoleWindow_SendRoleCreateRequest::TypeId' has a wrong offset!");
static_assert(offsetof(LoginCreateRoleWindow_SendRoleCreateRequest, RoleName) == 0x000008, "Member 'LoginCreateRoleWindow_SendRoleCreateRequest::RoleName' has a wrong offset!");
static_assert(offsetof(LoginCreateRoleWindow_SendRoleCreateRequest, Gender) == 0x000018, "Member 'LoginCreateRoleWindow_SendRoleCreateRequest::Gender' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.SendRoleDeleteReq
// 0x0008 (0x0008 - 0x0000)
struct LoginCreateRoleWindow_SendRoleDeleteReq final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_SendRoleDeleteReq) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_SendRoleDeleteReq");
static_assert(sizeof(LoginCreateRoleWindow_SendRoleDeleteReq) == 0x000008, "Wrong size on LoginCreateRoleWindow_SendRoleDeleteReq");
static_assert(offsetof(LoginCreateRoleWindow_SendRoleDeleteReq, Guid) == 0x000000, "Member 'LoginCreateRoleWindow_SendRoleDeleteReq::Guid' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.SendRoleReshapeFaceReq
// 0x0068 (0x0068 - 0x0000)
struct LoginCreateRoleWindow_SendRoleReshapeFaceReq final
{
public:
	int64                                         InRoleID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRoleCreateData                        Data;                                              // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_SendRoleReshapeFaceReq) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_SendRoleReshapeFaceReq");
static_assert(sizeof(LoginCreateRoleWindow_SendRoleReshapeFaceReq) == 0x000068, "Wrong size on LoginCreateRoleWindow_SendRoleReshapeFaceReq");
static_assert(offsetof(LoginCreateRoleWindow_SendRoleReshapeFaceReq, InRoleID) == 0x000000, "Member 'LoginCreateRoleWindow_SendRoleReshapeFaceReq::InRoleID' has a wrong offset!");
static_assert(offsetof(LoginCreateRoleWindow_SendRoleReshapeFaceReq, Data) == 0x000008, "Member 'LoginCreateRoleWindow_SendRoleReshapeFaceReq::Data' has a wrong offset!");

// Function TGFGame.LoginCreateRoleWindow.TryDeleteRole
// 0x0008 (0x0008 - 0x0000)
struct LoginCreateRoleWindow_TryDeleteRole final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginCreateRoleWindow_TryDeleteRole) == 0x000008, "Wrong alignment on LoginCreateRoleWindow_TryDeleteRole");
static_assert(sizeof(LoginCreateRoleWindow_TryDeleteRole) == 0x000008, "Wrong size on LoginCreateRoleWindow_TryDeleteRole");
static_assert(offsetof(LoginCreateRoleWindow_TryDeleteRole, Guid) == 0x000000, "Member 'LoginCreateRoleWindow_TryDeleteRole::Guid' has a wrong offset!");

// Function TGFGame.SceneAppearanceActor.GetCurrentCaptureContent
// 0x0008 (0x0008 - 0x0000)
struct SceneAppearanceActor_GetCurrentCaptureContent final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneAppearanceActor_GetCurrentCaptureContent) == 0x000008, "Wrong alignment on SceneAppearanceActor_GetCurrentCaptureContent");
static_assert(sizeof(SceneAppearanceActor_GetCurrentCaptureContent) == 0x000008, "Wrong size on SceneAppearanceActor_GetCurrentCaptureContent");
static_assert(offsetof(SceneAppearanceActor_GetCurrentCaptureContent, ReturnValue) == 0x000000, "Member 'SceneAppearanceActor_GetCurrentCaptureContent::ReturnValue' has a wrong offset!");

// Function TGFGame.SceneAppearanceActor.GetCurrentCaptureRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct SceneAppearanceActor_GetCurrentCaptureRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneAppearanceActor_GetCurrentCaptureRenderTarget) == 0x000008, "Wrong alignment on SceneAppearanceActor_GetCurrentCaptureRenderTarget");
static_assert(sizeof(SceneAppearanceActor_GetCurrentCaptureRenderTarget) == 0x000008, "Wrong size on SceneAppearanceActor_GetCurrentCaptureRenderTarget");
static_assert(offsetof(SceneAppearanceActor_GetCurrentCaptureRenderTarget, ReturnValue) == 0x000000, "Member 'SceneAppearanceActor_GetCurrentCaptureRenderTarget::ReturnValue' has a wrong offset!");

// Function TGFGame.SceneAppearanceActor.UpdateAvatorCapture
// 0x0070 (0x0070 - 0x0000)
struct SceneAppearanceActor_UpdateAvatorCapture final
{
public:
	struct FTgfAvatarBuildConfig                  InAppearanceConfig;                                // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
	struct FIntPoint                              NewRTSize;                                         // 0x0068(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneAppearanceActor_UpdateAvatorCapture) == 0x000008, "Wrong alignment on SceneAppearanceActor_UpdateAvatorCapture");
static_assert(sizeof(SceneAppearanceActor_UpdateAvatorCapture) == 0x000070, "Wrong size on SceneAppearanceActor_UpdateAvatorCapture");
static_assert(offsetof(SceneAppearanceActor_UpdateAvatorCapture, InAppearanceConfig) == 0x000000, "Member 'SceneAppearanceActor_UpdateAvatorCapture::InAppearanceConfig' has a wrong offset!");
static_assert(offsetof(SceneAppearanceActor_UpdateAvatorCapture, NewRTSize) == 0x000068, "Member 'SceneAppearanceActor_UpdateAvatorCapture::NewRTSize' has a wrong offset!");

// Function TGFGame.SceneAppearanceActor.UpdateCaptureTarget
// 0x0008 (0x0008 - 0x0000)
struct SceneAppearanceActor_UpdateCaptureTarget final
{
public:
	class UTextureRenderTarget2D*                 NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneAppearanceActor_UpdateCaptureTarget) == 0x000008, "Wrong alignment on SceneAppearanceActor_UpdateCaptureTarget");
static_assert(sizeof(SceneAppearanceActor_UpdateCaptureTarget) == 0x000008, "Wrong size on SceneAppearanceActor_UpdateCaptureTarget");
static_assert(offsetof(SceneAppearanceActor_UpdateCaptureTarget, NewTarget) == 0x000000, "Member 'SceneAppearanceActor_UpdateCaptureTarget::NewTarget' has a wrong offset!");

// Function TGFGame.SceneAppearanceActor.UpdateMesh
// 0x0068 (0x0068 - 0x0000)
struct SceneAppearanceActor_UpdateMesh final
{
public:
	struct FTgfAvatarBuildConfig                  InAppearanceConfig;                                // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneAppearanceActor_UpdateMesh) == 0x000008, "Wrong alignment on SceneAppearanceActor_UpdateMesh");
static_assert(sizeof(SceneAppearanceActor_UpdateMesh) == 0x000068, "Wrong size on SceneAppearanceActor_UpdateMesh");
static_assert(offsetof(SceneAppearanceActor_UpdateMesh, InAppearanceConfig) == 0x000000, "Member 'SceneAppearanceActor_UpdateMesh::InAppearanceConfig' has a wrong offset!");

// Function TGFGame.LoginWindow.GetServerUnavailableMessage
// 0x0020 (0x0020 - 0x0000)
struct LoginWindow_GetServerUnavailableMessage final
{
public:
	class FString                                 UserData;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_GetServerUnavailableMessage) == 0x000008, "Wrong alignment on LoginWindow_GetServerUnavailableMessage");
static_assert(sizeof(LoginWindow_GetServerUnavailableMessage) == 0x000020, "Wrong size on LoginWindow_GetServerUnavailableMessage");
static_assert(offsetof(LoginWindow_GetServerUnavailableMessage, UserData) == 0x000000, "Member 'LoginWindow_GetServerUnavailableMessage::UserData' has a wrong offset!");
static_assert(offsetof(LoginWindow_GetServerUnavailableMessage, ReturnValue) == 0x000010, "Member 'LoginWindow_GetServerUnavailableMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.LoginWindow.OnConnectServerFailed
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnConnectServerFailed final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnConnectServerFailed) == 0x000008, "Wrong alignment on LoginWindow_OnConnectServerFailed");
static_assert(sizeof(LoginWindow_OnConnectServerFailed) == 0x000008, "Wrong size on LoginWindow_OnConnectServerFailed");
static_assert(offsetof(LoginWindow_OnConnectServerFailed, Args) == 0x000000, "Member 'LoginWindow_OnConnectServerFailed::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnConnectServerSuccess
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnConnectServerSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnConnectServerSuccess) == 0x000008, "Wrong alignment on LoginWindow_OnConnectServerSuccess");
static_assert(sizeof(LoginWindow_OnConnectServerSuccess) == 0x000008, "Wrong size on LoginWindow_OnConnectServerSuccess");
static_assert(offsetof(LoginWindow_OnConnectServerSuccess, Args) == 0x000000, "Member 'LoginWindow_OnConnectServerSuccess::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnGameLoginFailed
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnGameLoginFailed final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnGameLoginFailed) == 0x000008, "Wrong alignment on LoginWindow_OnGameLoginFailed");
static_assert(sizeof(LoginWindow_OnGameLoginFailed) == 0x000008, "Wrong size on LoginWindow_OnGameLoginFailed");
static_assert(offsetof(LoginWindow_OnGameLoginFailed, Args) == 0x000000, "Member 'LoginWindow_OnGameLoginFailed::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnGameLoginSuccess
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnGameLoginSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnGameLoginSuccess) == 0x000008, "Wrong alignment on LoginWindow_OnGameLoginSuccess");
static_assert(sizeof(LoginWindow_OnGameLoginSuccess) == 0x000008, "Wrong size on LoginWindow_OnGameLoginSuccess");
static_assert(offsetof(LoginWindow_OnGameLoginSuccess, Args) == 0x000000, "Member 'LoginWindow_OnGameLoginSuccess::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnGameLogout) == 0x000008, "Wrong alignment on LoginWindow_OnGameLogout");
static_assert(sizeof(LoginWindow_OnGameLogout) == 0x000008, "Wrong size on LoginWindow_OnGameLogout");
static_assert(offsetof(LoginWindow_OnGameLogout, Args) == 0x000000, "Member 'LoginWindow_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnGetNoticeResult
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnGetNoticeResult final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnGetNoticeResult) == 0x000008, "Wrong alignment on LoginWindow_OnGetNoticeResult");
static_assert(sizeof(LoginWindow_OnGetNoticeResult) == 0x000008, "Wrong size on LoginWindow_OnGetNoticeResult");
static_assert(offsetof(LoginWindow_OnGetNoticeResult, Args) == 0x000000, "Member 'LoginWindow_OnGetNoticeResult::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnQueryDirFailed
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnQueryDirFailed final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnQueryDirFailed) == 0x000008, "Wrong alignment on LoginWindow_OnQueryDirFailed");
static_assert(sizeof(LoginWindow_OnQueryDirFailed) == 0x000008, "Wrong size on LoginWindow_OnQueryDirFailed");
static_assert(offsetof(LoginWindow_OnQueryDirFailed, Args) == 0x000000, "Member 'LoginWindow_OnQueryDirFailed::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnQueryDirSuccess
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnQueryDirSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnQueryDirSuccess) == 0x000008, "Wrong alignment on LoginWindow_OnQueryDirSuccess");
static_assert(sizeof(LoginWindow_OnQueryDirSuccess) == 0x000008, "Wrong size on LoginWindow_OnQueryDirSuccess");
static_assert(offsetof(LoginWindow_OnQueryDirSuccess, Args) == 0x000000, "Member 'LoginWindow_OnQueryDirSuccess::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnQueryRegionResult
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnQueryRegionResult final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnQueryRegionResult) == 0x000008, "Wrong alignment on LoginWindow_OnQueryRegionResult");
static_assert(sizeof(LoginWindow_OnQueryRegionResult) == 0x000008, "Wrong size on LoginWindow_OnQueryRegionResult");
static_assert(offsetof(LoginWindow_OnQueryRegionResult, Args) == 0x000000, "Member 'LoginWindow_OnQueryRegionResult::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnSDKLoginFailed
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnSDKLoginFailed final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnSDKLoginFailed) == 0x000008, "Wrong alignment on LoginWindow_OnSDKLoginFailed");
static_assert(sizeof(LoginWindow_OnSDKLoginFailed) == 0x000008, "Wrong size on LoginWindow_OnSDKLoginFailed");
static_assert(offsetof(LoginWindow_OnSDKLoginFailed, Args) == 0x000000, "Member 'LoginWindow_OnSDKLoginFailed::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnSDKLoginSuccess
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnSDKLoginSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnSDKLoginSuccess) == 0x000008, "Wrong alignment on LoginWindow_OnSDKLoginSuccess");
static_assert(sizeof(LoginWindow_OnSDKLoginSuccess) == 0x000008, "Wrong size on LoginWindow_OnSDKLoginSuccess");
static_assert(offsetof(LoginWindow_OnSDKLoginSuccess, Args) == 0x000000, "Member 'LoginWindow_OnSDKLoginSuccess::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnSyncPlayerInfoFailed
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnSyncPlayerInfoFailed final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnSyncPlayerInfoFailed) == 0x000008, "Wrong alignment on LoginWindow_OnSyncPlayerInfoFailed");
static_assert(sizeof(LoginWindow_OnSyncPlayerInfoFailed) == 0x000008, "Wrong size on LoginWindow_OnSyncPlayerInfoFailed");
static_assert(offsetof(LoginWindow_OnSyncPlayerInfoFailed, Args) == 0x000000, "Member 'LoginWindow_OnSyncPlayerInfoFailed::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.OnSyncPlayerInfoSuccess
// 0x0008 (0x0008 - 0x0000)
struct LoginWindow_OnSyncPlayerInfoSuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_OnSyncPlayerInfoSuccess) == 0x000008, "Wrong alignment on LoginWindow_OnSyncPlayerInfoSuccess");
static_assert(sizeof(LoginWindow_OnSyncPlayerInfoSuccess) == 0x000008, "Wrong size on LoginWindow_OnSyncPlayerInfoSuccess");
static_assert(offsetof(LoginWindow_OnSyncPlayerInfoSuccess, Args) == 0x000000, "Member 'LoginWindow_OnSyncPlayerInfoSuccess::Args' has a wrong offset!");

// Function TGFGame.LoginWindow.StartNoAuthLogin
// 0x0010 (0x0010 - 0x0000)
struct LoginWindow_StartNoAuthLogin final
{
public:
	class FString                                 SimulateOpenId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_StartNoAuthLogin) == 0x000008, "Wrong alignment on LoginWindow_StartNoAuthLogin");
static_assert(sizeof(LoginWindow_StartNoAuthLogin) == 0x000010, "Wrong size on LoginWindow_StartNoAuthLogin");
static_assert(offsetof(LoginWindow_StartNoAuthLogin, SimulateOpenId) == 0x000000, "Member 'LoginWindow_StartNoAuthLogin::SimulateOpenId' has a wrong offset!");

// Function TGFGame.LoginWindow.GetOpenId
// 0x0010 (0x0010 - 0x0000)
struct LoginWindow_GetOpenId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginWindow_GetOpenId) == 0x000008, "Wrong alignment on LoginWindow_GetOpenId");
static_assert(sizeof(LoginWindow_GetOpenId) == 0x000010, "Wrong size on LoginWindow_GetOpenId");
static_assert(offsetof(LoginWindow_GetOpenId, ReturnValue) == 0x000000, "Member 'LoginWindow_GetOpenId::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKNoticeService.GetNoticeStableId
// 0x0188 (0x0188 - 0x0000)
struct SDKNoticeService_GetNoticeStableId final
{
public:
	struct FSDKNoticeInfo                         Notice;                                            // 0x0000(0x0178)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0178(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKNoticeService_GetNoticeStableId) == 0x000008, "Wrong alignment on SDKNoticeService_GetNoticeStableId");
static_assert(sizeof(SDKNoticeService_GetNoticeStableId) == 0x000188, "Wrong size on SDKNoticeService_GetNoticeStableId");
static_assert(offsetof(SDKNoticeService_GetNoticeStableId, Notice) == 0x000000, "Member 'SDKNoticeService_GetNoticeStableId::Notice' has a wrong offset!");
static_assert(offsetof(SDKNoticeService_GetNoticeStableId, ReturnValue) == 0x000178, "Member 'SDKNoticeService_GetNoticeStableId::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKNoticeService.GetNoticeTextInfo
// 0x01F8 (0x01F8 - 0x0000)
struct SDKNoticeService_GetNoticeTextInfo final
{
public:
	struct FSDKNoticeInfo                         Notice;                                            // 0x0000(0x0178)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSDKNoticeTextInfo                     ReturnValue;                                       // 0x0178(0x0080)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKNoticeService_GetNoticeTextInfo) == 0x000008, "Wrong alignment on SDKNoticeService_GetNoticeTextInfo");
static_assert(sizeof(SDKNoticeService_GetNoticeTextInfo) == 0x0001F8, "Wrong size on SDKNoticeService_GetNoticeTextInfo");
static_assert(offsetof(SDKNoticeService_GetNoticeTextInfo, Notice) == 0x000000, "Member 'SDKNoticeService_GetNoticeTextInfo::Notice' has a wrong offset!");
static_assert(offsetof(SDKNoticeService_GetNoticeTextInfo, ReturnValue) == 0x000178, "Member 'SDKNoticeService_GetNoticeTextInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKNoticeService.IsPopupNoticePopupOnce
// 0x0180 (0x0180 - 0x0000)
struct SDKNoticeService_IsPopupNoticePopupOnce final
{
public:
	struct FSDKNoticeInfo                         NoticeInfo;                                        // 0x0000(0x0178)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0178(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SDKNoticeService_IsPopupNoticePopupOnce) == 0x000008, "Wrong alignment on SDKNoticeService_IsPopupNoticePopupOnce");
static_assert(sizeof(SDKNoticeService_IsPopupNoticePopupOnce) == 0x000180, "Wrong size on SDKNoticeService_IsPopupNoticePopupOnce");
static_assert(offsetof(SDKNoticeService_IsPopupNoticePopupOnce, NoticeInfo) == 0x000000, "Member 'SDKNoticeService_IsPopupNoticePopupOnce::NoticeInfo' has a wrong offset!");
static_assert(offsetof(SDKNoticeService_IsPopupNoticePopupOnce, ReturnValue) == 0x000178, "Member 'SDKNoticeService_IsPopupNoticePopupOnce::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKNoticeService.SetNoticeRead
// 0x0010 (0x0010 - 0x0000)
struct SDKNoticeService_SetNoticeRead final
{
public:
	class FString                                 NoticeStableId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKNoticeService_SetNoticeRead) == 0x000008, "Wrong alignment on SDKNoticeService_SetNoticeRead");
static_assert(sizeof(SDKNoticeService_SetNoticeRead) == 0x000010, "Wrong size on SDKNoticeService_SetNoticeRead");
static_assert(offsetof(SDKNoticeService_SetNoticeRead, NoticeStableId) == 0x000000, "Member 'SDKNoticeService_SetNoticeRead::NoticeStableId' has a wrong offset!");

// Function TGFGame.SDKNoticeService.SetPopupNoticeBlockForever
// 0x0010 (0x0010 - 0x0000)
struct SDKNoticeService_SetPopupNoticeBlockForever final
{
public:
	class FString                                 NoticeStableId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKNoticeService_SetPopupNoticeBlockForever) == 0x000008, "Wrong alignment on SDKNoticeService_SetPopupNoticeBlockForever");
static_assert(sizeof(SDKNoticeService_SetPopupNoticeBlockForever) == 0x000010, "Wrong size on SDKNoticeService_SetPopupNoticeBlockForever");
static_assert(offsetof(SDKNoticeService_SetPopupNoticeBlockForever, NoticeStableId) == 0x000000, "Member 'SDKNoticeService_SetPopupNoticeBlockForever::NoticeStableId' has a wrong offset!");

// Function TGFGame.SDKNoticeService.SetPopupNoticeBlockToday
// 0x0010 (0x0010 - 0x0000)
struct SDKNoticeService_SetPopupNoticeBlockToday final
{
public:
	class FString                                 NoticeStableId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKNoticeService_SetPopupNoticeBlockToday) == 0x000008, "Wrong alignment on SDKNoticeService_SetPopupNoticeBlockToday");
static_assert(sizeof(SDKNoticeService_SetPopupNoticeBlockToday) == 0x000010, "Wrong size on SDKNoticeService_SetPopupNoticeBlockToday");
static_assert(offsetof(SDKNoticeService_SetPopupNoticeBlockToday, NoticeStableId) == 0x000000, "Member 'SDKNoticeService_SetPopupNoticeBlockToday::NoticeStableId' has a wrong offset!");

// Function TGFGame.SDKNoticeService.SetPopupNoticeShowed
// 0x0010 (0x0010 - 0x0000)
struct SDKNoticeService_SetPopupNoticeShowed final
{
public:
	class FString                                 NoticeStableId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKNoticeService_SetPopupNoticeShowed) == 0x000008, "Wrong alignment on SDKNoticeService_SetPopupNoticeShowed");
static_assert(sizeof(SDKNoticeService_SetPopupNoticeShowed) == 0x000010, "Wrong size on SDKNoticeService_SetPopupNoticeShowed");
static_assert(offsetof(SDKNoticeService_SetPopupNoticeShowed, NoticeStableId) == 0x000000, "Member 'SDKNoticeService_SetPopupNoticeShowed::NoticeStableId' has a wrong offset!");

// Function TGFGame.SDKNoticeService.GetNoticeList
// 0x0020 (0x0020 - 0x0000)
struct SDKNoticeService_GetNoticeList final
{
public:
	int32                                         NoticeType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSDKNoticeInfo>                 NoticeList;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SDKNoticeService_GetNoticeList) == 0x000008, "Wrong alignment on SDKNoticeService_GetNoticeList");
static_assert(sizeof(SDKNoticeService_GetNoticeList) == 0x000020, "Wrong size on SDKNoticeService_GetNoticeList");
static_assert(offsetof(SDKNoticeService_GetNoticeList, NoticeType) == 0x000000, "Member 'SDKNoticeService_GetNoticeList::NoticeType' has a wrong offset!");
static_assert(offsetof(SDKNoticeService_GetNoticeList, NoticeList) == 0x000008, "Member 'SDKNoticeService_GetNoticeList::NoticeList' has a wrong offset!");
static_assert(offsetof(SDKNoticeService_GetNoticeList, ReturnValue) == 0x000018, "Member 'SDKNoticeService_GetNoticeList::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKNoticeService.GetNoticeRead
// 0x0018 (0x0018 - 0x0000)
struct SDKNoticeService_GetNoticeRead final
{
public:
	class FString                                 NoticeStableId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SDKNoticeService_GetNoticeRead) == 0x000008, "Wrong alignment on SDKNoticeService_GetNoticeRead");
static_assert(sizeof(SDKNoticeService_GetNoticeRead) == 0x000018, "Wrong size on SDKNoticeService_GetNoticeRead");
static_assert(offsetof(SDKNoticeService_GetNoticeRead, NoticeStableId) == 0x000000, "Member 'SDKNoticeService_GetNoticeRead::NoticeStableId' has a wrong offset!");
static_assert(offsetof(SDKNoticeService_GetNoticeRead, ReturnValue) == 0x000010, "Member 'SDKNoticeService_GetNoticeRead::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKNoticeService.GetNoticeUnreadByType
// 0x0008 (0x0008 - 0x0000)
struct SDKNoticeService_GetNoticeUnreadByType final
{
public:
	int32                                         NoticeType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SDKNoticeService_GetNoticeUnreadByType) == 0x000004, "Wrong alignment on SDKNoticeService_GetNoticeUnreadByType");
static_assert(sizeof(SDKNoticeService_GetNoticeUnreadByType) == 0x000008, "Wrong size on SDKNoticeService_GetNoticeUnreadByType");
static_assert(offsetof(SDKNoticeService_GetNoticeUnreadByType, NoticeType) == 0x000000, "Member 'SDKNoticeService_GetNoticeUnreadByType::NoticeType' has a wrong offset!");
static_assert(offsetof(SDKNoticeService_GetNoticeUnreadByType, ReturnValue) == 0x000004, "Member 'SDKNoticeService_GetNoticeUnreadByType::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKNoticeService.GetPopupNoticeBlockToday
// 0x0018 (0x0018 - 0x0000)
struct SDKNoticeService_GetPopupNoticeBlockToday final
{
public:
	class FString                                 NoticeStableId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SDKNoticeService_GetPopupNoticeBlockToday) == 0x000008, "Wrong alignment on SDKNoticeService_GetPopupNoticeBlockToday");
static_assert(sizeof(SDKNoticeService_GetPopupNoticeBlockToday) == 0x000018, "Wrong size on SDKNoticeService_GetPopupNoticeBlockToday");
static_assert(offsetof(SDKNoticeService_GetPopupNoticeBlockToday, NoticeStableId) == 0x000000, "Member 'SDKNoticeService_GetPopupNoticeBlockToday::NoticeStableId' has a wrong offset!");
static_assert(offsetof(SDKNoticeService_GetPopupNoticeBlockToday, ReturnValue) == 0x000010, "Member 'SDKNoticeService_GetPopupNoticeBlockToday::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKNoticeService.GetPopupNoticeShowed
// 0x0018 (0x0018 - 0x0000)
struct SDKNoticeService_GetPopupNoticeShowed final
{
public:
	class FString                                 NoticeStableId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SDKNoticeService_GetPopupNoticeShowed) == 0x000008, "Wrong alignment on SDKNoticeService_GetPopupNoticeShowed");
static_assert(sizeof(SDKNoticeService_GetPopupNoticeShowed) == 0x000018, "Wrong size on SDKNoticeService_GetPopupNoticeShowed");
static_assert(offsetof(SDKNoticeService_GetPopupNoticeShowed, NoticeStableId) == 0x000000, "Member 'SDKNoticeService_GetPopupNoticeShowed::NoticeStableId' has a wrong offset!");
static_assert(offsetof(SDKNoticeService_GetPopupNoticeShowed, ReturnValue) == 0x000010, "Member 'SDKNoticeService_GetPopupNoticeShowed::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKNoticeService.PopupNoticeNeedShow
// 0x0001 (0x0001 - 0x0000)
struct SDKNoticeService_PopupNoticeNeedShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKNoticeService_PopupNoticeNeedShow) == 0x000001, "Wrong alignment on SDKNoticeService_PopupNoticeNeedShow");
static_assert(sizeof(SDKNoticeService_PopupNoticeNeedShow) == 0x000001, "Wrong size on SDKNoticeService_PopupNoticeNeedShow");
static_assert(offsetof(SDKNoticeService_PopupNoticeNeedShow, ReturnValue) == 0x000000, "Member 'SDKNoticeService_PopupNoticeNeedShow::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.DeleteMails
// 0x0010 (0x0010 - 0x0000)
struct MailService_DeleteMails final
{
public:
	TArray<int64>                                 MailIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_DeleteMails) == 0x000008, "Wrong alignment on MailService_DeleteMails");
static_assert(sizeof(MailService_DeleteMails) == 0x000010, "Wrong size on MailService_DeleteMails");
static_assert(offsetof(MailService_DeleteMails, MailIds) == 0x000000, "Member 'MailService_DeleteMails::MailIds' has a wrong offset!");

// Function TGFGame.MailService.GetAllMails
// 0x0010 (0x0010 - 0x0000)
struct MailService_GetAllMails final
{
public:
	TArray<class UTGFMailHeaderInfo*>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_GetAllMails) == 0x000008, "Wrong alignment on MailService_GetAllMails");
static_assert(sizeof(MailService_GetAllMails) == 0x000010, "Wrong size on MailService_GetAllMails");
static_assert(offsetof(MailService_GetAllMails, ReturnValue) == 0x000000, "Member 'MailService_GetAllMails::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.GetMail
// 0x0010 (0x0010 - 0x0000)
struct MailService_GetMail final
{
public:
	int64                                         MailId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFMailHeaderInfo*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_GetMail) == 0x000008, "Wrong alignment on MailService_GetMail");
static_assert(sizeof(MailService_GetMail) == 0x000010, "Wrong size on MailService_GetMail");
static_assert(offsetof(MailService_GetMail, MailId) == 0x000000, "Member 'MailService_GetMail::MailId' has a wrong offset!");
static_assert(offsetof(MailService_GetMail, ReturnValue) == 0x000008, "Member 'MailService_GetMail::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.MarkAsRead
// 0x0010 (0x0010 - 0x0000)
struct MailService_MarkAsRead final
{
public:
	TArray<int64>                                 MailIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_MarkAsRead) == 0x000008, "Wrong alignment on MailService_MarkAsRead");
static_assert(sizeof(MailService_MarkAsRead) == 0x000010, "Wrong size on MailService_MarkAsRead");
static_assert(offsetof(MailService_MarkAsRead, MailIds) == 0x000000, "Member 'MailService_MarkAsRead::MailIds' has a wrong offset!");

// Function TGFGame.MailService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct MailService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_OnGameLogout) == 0x000008, "Wrong alignment on MailService_OnGameLogout");
static_assert(sizeof(MailService_OnGameLogout) == 0x000008, "Wrong size on MailService_OnGameLogout");
static_assert(offsetof(MailService_OnGameLogout, Args) == 0x000000, "Member 'MailService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.MailService.ReceiveAttachments
// 0x0010 (0x0010 - 0x0000)
struct MailService_ReceiveAttachments final
{
public:
	class UTgfInventoryWrapper_Virtual*           VirtualInventory;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   InventoryContext;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_ReceiveAttachments) == 0x000008, "Wrong alignment on MailService_ReceiveAttachments");
static_assert(sizeof(MailService_ReceiveAttachments) == 0x000010, "Wrong size on MailService_ReceiveAttachments");
static_assert(offsetof(MailService_ReceiveAttachments, VirtualInventory) == 0x000000, "Member 'MailService_ReceiveAttachments::VirtualInventory' has a wrong offset!");
static_assert(offsetof(MailService_ReceiveAttachments, InventoryContext) == 0x000008, "Member 'MailService_ReceiveAttachments::InventoryContext' has a wrong offset!");

// Function TGFGame.MailService.ReceiveOneAttachment
// 0x0068 (0x0068 - 0x0000)
struct MailService_ReceiveOneAttachment final
{
public:
	int64                                         MailId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFItem                               Item;                                              // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailService_ReceiveOneAttachment) == 0x000008, "Wrong alignment on MailService_ReceiveOneAttachment");
static_assert(sizeof(MailService_ReceiveOneAttachment) == 0x000068, "Wrong size on MailService_ReceiveOneAttachment");
static_assert(offsetof(MailService_ReceiveOneAttachment, MailId) == 0x000000, "Member 'MailService_ReceiveOneAttachment::MailId' has a wrong offset!");
static_assert(offsetof(MailService_ReceiveOneAttachment, Item) == 0x000008, "Member 'MailService_ReceiveOneAttachment::Item' has a wrong offset!");
static_assert(offsetof(MailService_ReceiveOneAttachment, Param_Index) == 0x000060, "Member 'MailService_ReceiveOneAttachment::Param_Index' has a wrong offset!");

// Function TGFGame.MailService.ReceiveVirtualAttachments
// 0x0018 (0x0018 - 0x0000)
struct MailService_ReceiveVirtualAttachments final
{
public:
	TArray<int64>                                 MailIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          NeedRemove;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailService_ReceiveVirtualAttachments) == 0x000008, "Wrong alignment on MailService_ReceiveVirtualAttachments");
static_assert(sizeof(MailService_ReceiveVirtualAttachments) == 0x000018, "Wrong size on MailService_ReceiveVirtualAttachments");
static_assert(offsetof(MailService_ReceiveVirtualAttachments, MailIds) == 0x000000, "Member 'MailService_ReceiveVirtualAttachments::MailIds' has a wrong offset!");
static_assert(offsetof(MailService_ReceiveVirtualAttachments, NeedRemove) == 0x000010, "Member 'MailService_ReceiveVirtualAttachments::NeedRemove' has a wrong offset!");

// Function TGFGame.MailService.SetCurrentMailId
// 0x0008 (0x0008 - 0x0000)
struct MailService_SetCurrentMailId final
{
public:
	int64                                         InCurrentMailId;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_SetCurrentMailId) == 0x000008, "Wrong alignment on MailService_SetCurrentMailId");
static_assert(sizeof(MailService_SetCurrentMailId) == 0x000008, "Wrong size on MailService_SetCurrentMailId");
static_assert(offsetof(MailService_SetCurrentMailId, InCurrentMailId) == 0x000000, "Member 'MailService_SetCurrentMailId::InCurrentMailId' has a wrong offset!");

// Function TGFGame.MailService.SetCurrentMailType
// 0x0001 (0x0001 - 0x0000)
struct MailService_SetCurrentMailType final
{
public:
	ETGFProtoTgfEnMailMajorType                   MajorType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_SetCurrentMailType) == 0x000001, "Wrong alignment on MailService_SetCurrentMailType");
static_assert(sizeof(MailService_SetCurrentMailType) == 0x000001, "Wrong size on MailService_SetCurrentMailType");
static_assert(offsetof(MailService_SetCurrentMailType, MajorType) == 0x000000, "Member 'MailService_SetCurrentMailType::MajorType' has a wrong offset!");

// Function TGFGame.MailService.GetCurrentMailId
// 0x0008 (0x0008 - 0x0000)
struct MailService_GetCurrentMailId final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_GetCurrentMailId) == 0x000008, "Wrong alignment on MailService_GetCurrentMailId");
static_assert(sizeof(MailService_GetCurrentMailId) == 0x000008, "Wrong size on MailService_GetCurrentMailId");
static_assert(offsetof(MailService_GetCurrentMailId, ReturnValue) == 0x000000, "Member 'MailService_GetCurrentMailId::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.GetCurrentMailReceiveKey
// 0x0018 (0x0018 - 0x0000)
struct MailService_GetCurrentMailReceiveKey final
{
public:
	int64                                         MailId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTGFMailReceiveKey>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_GetCurrentMailReceiveKey) == 0x000008, "Wrong alignment on MailService_GetCurrentMailReceiveKey");
static_assert(sizeof(MailService_GetCurrentMailReceiveKey) == 0x000018, "Wrong size on MailService_GetCurrentMailReceiveKey");
static_assert(offsetof(MailService_GetCurrentMailReceiveKey, MailId) == 0x000000, "Member 'MailService_GetCurrentMailReceiveKey::MailId' has a wrong offset!");
static_assert(offsetof(MailService_GetCurrentMailReceiveKey, ReturnValue) == 0x000008, "Member 'MailService_GetCurrentMailReceiveKey::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.GetCurrentMailType
// 0x0001 (0x0001 - 0x0000)
struct MailService_GetCurrentMailType final
{
public:
	ETGFProtoTgfEnMailMajorType                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_GetCurrentMailType) == 0x000001, "Wrong alignment on MailService_GetCurrentMailType");
static_assert(sizeof(MailService_GetCurrentMailType) == 0x000001, "Wrong size on MailService_GetCurrentMailType");
static_assert(offsetof(MailService_GetCurrentMailType, ReturnValue) == 0x000000, "Member 'MailService_GetCurrentMailType::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.GetMailContent
// 0x0208 (0x0208 - 0x0000)
struct MailService_GetMailContent final
{
public:
	int64                                         MailId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFMailContent                        ReturnValue;                                       // 0x0008(0x0200)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_GetMailContent) == 0x000008, "Wrong alignment on MailService_GetMailContent");
static_assert(sizeof(MailService_GetMailContent) == 0x000208, "Wrong size on MailService_GetMailContent");
static_assert(offsetof(MailService_GetMailContent, MailId) == 0x000000, "Member 'MailService_GetMailContent::MailId' has a wrong offset!");
static_assert(offsetof(MailService_GetMailContent, ReturnValue) == 0x000008, "Member 'MailService_GetMailContent::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.GetMailCount
// 0x0004 (0x0004 - 0x0000)
struct MailService_GetMailCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_GetMailCount) == 0x000004, "Wrong alignment on MailService_GetMailCount");
static_assert(sizeof(MailService_GetMailCount) == 0x000004, "Wrong size on MailService_GetMailCount");
static_assert(offsetof(MailService_GetMailCount, ReturnValue) == 0x000000, "Member 'MailService_GetMailCount::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.GetMailReceiveKeys
// 0x0010 (0x0010 - 0x0000)
struct MailService_GetMailReceiveKeys final
{
public:
	TArray<struct FTGFMailReceiveKey>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_GetMailReceiveKeys) == 0x000008, "Wrong alignment on MailService_GetMailReceiveKeys");
static_assert(sizeof(MailService_GetMailReceiveKeys) == 0x000010, "Wrong size on MailService_GetMailReceiveKeys");
static_assert(offsetof(MailService_GetMailReceiveKeys, ReturnValue) == 0x000000, "Member 'MailService_GetMailReceiveKeys::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.GetMaxMailContent
// 0x0004 (0x0004 - 0x0000)
struct MailService_GetMaxMailContent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_GetMaxMailContent) == 0x000004, "Wrong alignment on MailService_GetMaxMailContent");
static_assert(sizeof(MailService_GetMaxMailContent) == 0x000004, "Wrong size on MailService_GetMaxMailContent");
static_assert(offsetof(MailService_GetMaxMailContent, ReturnValue) == 0x000000, "Member 'MailService_GetMaxMailContent::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.GetMultiLanguageContent
// 0x0210 (0x0210 - 0x0000)
struct MailService_GetMultiLanguageContent final
{
public:
	struct FTGFMailContent                        MailContent;                                       // 0x0000(0x0200)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0200(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_GetMultiLanguageContent) == 0x000008, "Wrong alignment on MailService_GetMultiLanguageContent");
static_assert(sizeof(MailService_GetMultiLanguageContent) == 0x000210, "Wrong size on MailService_GetMultiLanguageContent");
static_assert(offsetof(MailService_GetMultiLanguageContent, MailContent) == 0x000000, "Member 'MailService_GetMultiLanguageContent::MailContent' has a wrong offset!");
static_assert(offsetof(MailService_GetMultiLanguageContent, ReturnValue) == 0x000200, "Member 'MailService_GetMultiLanguageContent::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.GetMultiLanguageTitle
// 0x0210 (0x0210 - 0x0000)
struct MailService_GetMultiLanguageTitle final
{
public:
	struct FTGFMailContent                        MailContent;                                       // 0x0000(0x0200)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0200(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_GetMultiLanguageTitle) == 0x000008, "Wrong alignment on MailService_GetMultiLanguageTitle");
static_assert(sizeof(MailService_GetMultiLanguageTitle) == 0x000210, "Wrong size on MailService_GetMultiLanguageTitle");
static_assert(offsetof(MailService_GetMultiLanguageTitle, MailContent) == 0x000000, "Member 'MailService_GetMultiLanguageTitle::MailContent' has a wrong offset!");
static_assert(offsetof(MailService_GetMultiLanguageTitle, ReturnValue) == 0x000200, "Member 'MailService_GetMultiLanguageTitle::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.IsGivenTypeMailRedDot
// 0x0002 (0x0002 - 0x0000)
struct MailService_IsGivenTypeMailRedDot final
{
public:
	ETGFProtoTgfEnMailMajorType                   MailType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_IsGivenTypeMailRedDot) == 0x000001, "Wrong alignment on MailService_IsGivenTypeMailRedDot");
static_assert(sizeof(MailService_IsGivenTypeMailRedDot) == 0x000002, "Wrong size on MailService_IsGivenTypeMailRedDot");
static_assert(offsetof(MailService_IsGivenTypeMailRedDot, MailType) == 0x000000, "Member 'MailService_IsGivenTypeMailRedDot::MailType' has a wrong offset!");
static_assert(offsetof(MailService_IsGivenTypeMailRedDot, ReturnValue) == 0x000001, "Member 'MailService_IsGivenTypeMailRedDot::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.IsMailAttachmentNotReceived
// 0x0010 (0x0010 - 0x0000)
struct MailService_IsMailAttachmentNotReceived final
{
public:
	int64                                         MailId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailService_IsMailAttachmentNotReceived) == 0x000008, "Wrong alignment on MailService_IsMailAttachmentNotReceived");
static_assert(sizeof(MailService_IsMailAttachmentNotReceived) == 0x000010, "Wrong size on MailService_IsMailAttachmentNotReceived");
static_assert(offsetof(MailService_IsMailAttachmentNotReceived, MailId) == 0x000000, "Member 'MailService_IsMailAttachmentNotReceived::MailId' has a wrong offset!");
static_assert(offsetof(MailService_IsMailAttachmentNotReceived, ReturnValue) == 0x000008, "Member 'MailService_IsMailAttachmentNotReceived::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.IsMailAttachmentReceived
// 0x0002 (0x0002 - 0x0000)
struct MailService_IsMailAttachmentReceived final
{
public:
	ETGFProtoTgfEnMailStatusType                  Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_IsMailAttachmentReceived) == 0x000001, "Wrong alignment on MailService_IsMailAttachmentReceived");
static_assert(sizeof(MailService_IsMailAttachmentReceived) == 0x000002, "Wrong size on MailService_IsMailAttachmentReceived");
static_assert(offsetof(MailService_IsMailAttachmentReceived, Status) == 0x000000, "Member 'MailService_IsMailAttachmentReceived::Status' has a wrong offset!");
static_assert(offsetof(MailService_IsMailAttachmentReceived, ReturnValue) == 0x000001, "Member 'MailService_IsMailAttachmentReceived::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.IsMailRedDot
// 0x0001 (0x0001 - 0x0000)
struct MailService_IsMailRedDot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailService_IsMailRedDot) == 0x000001, "Wrong alignment on MailService_IsMailRedDot");
static_assert(sizeof(MailService_IsMailRedDot) == 0x000001, "Wrong size on MailService_IsMailRedDot");
static_assert(offsetof(MailService_IsMailRedDot, ReturnValue) == 0x000000, "Member 'MailService_IsMailRedDot::ReturnValue' has a wrong offset!");

// Function TGFGame.MailService.IsMailRemoved
// 0x0010 (0x0010 - 0x0000)
struct MailService_IsMailRemoved final
{
public:
	int64                                         MailId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailService_IsMailRemoved) == 0x000008, "Wrong alignment on MailService_IsMailRemoved");
static_assert(sizeof(MailService_IsMailRemoved) == 0x000010, "Wrong size on MailService_IsMailRemoved");
static_assert(offsetof(MailService_IsMailRemoved, MailId) == 0x000000, "Member 'MailService_IsMailRemoved::MailId' has a wrong offset!");
static_assert(offsetof(MailService_IsMailRemoved, ReturnValue) == 0x000008, "Member 'MailService_IsMailRemoved::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryWrapper_Virtual.OnMailReceiveAttachmentsPartly
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryWrapper_Virtual_OnMailReceiveAttachmentsPartly final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_Virtual_OnMailReceiveAttachmentsPartly) == 0x000008, "Wrong alignment on TgfInventoryWrapper_Virtual_OnMailReceiveAttachmentsPartly");
static_assert(sizeof(TgfInventoryWrapper_Virtual_OnMailReceiveAttachmentsPartly) == 0x000008, "Wrong size on TgfInventoryWrapper_Virtual_OnMailReceiveAttachmentsPartly");
static_assert(offsetof(TgfInventoryWrapper_Virtual_OnMailReceiveAttachmentsPartly, Args) == 0x000000, "Member 'TgfInventoryWrapper_Virtual_OnMailReceiveAttachmentsPartly::Args' has a wrong offset!");

// Function TGFGame.TgfInventoryWrapper_Virtual.SetMailItems
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_Virtual_SetMailItems final
{
public:
	TArray<struct FTGFMailReceiveKey>             MailItems;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_Virtual_SetMailItems) == 0x000008, "Wrong alignment on TgfInventoryWrapper_Virtual_SetMailItems");
static_assert(sizeof(TgfInventoryWrapper_Virtual_SetMailItems) == 0x000010, "Wrong size on TgfInventoryWrapper_Virtual_SetMailItems");
static_assert(offsetof(TgfInventoryWrapper_Virtual_SetMailItems, MailItems) == 0x000000, "Member 'TgfInventoryWrapper_Virtual_SetMailItems::MailItems' has a wrong offset!");

// Function TGFGame.TgfInventoryItemWrapper_Market.GetItemData
// 0x0058 (0x0058 - 0x0000)
struct TgfInventoryItemWrapper_Market_GetItemData final
{
public:
	struct FTGFItem                               ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_Market_GetItemData) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_Market_GetItemData");
static_assert(sizeof(TgfInventoryItemWrapper_Market_GetItemData) == 0x000058, "Wrong size on TgfInventoryItemWrapper_Market_GetItemData");
static_assert(offsetof(TgfInventoryItemWrapper_Market_GetItemData, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_Market_GetItemData::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketProduct.GetCost
// 0x0010 (0x0010 - 0x0000)
struct MarketProduct_GetCost final
{
public:
	TArray<struct FMarketCost>                    OutCost;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketProduct_GetCost) == 0x000008, "Wrong alignment on MarketProduct_GetCost");
static_assert(sizeof(MarketProduct_GetCost) == 0x000010, "Wrong size on MarketProduct_GetCost");
static_assert(offsetof(MarketProduct_GetCost, OutCost) == 0x000000, "Member 'MarketProduct_GetCost::OutCost' has a wrong offset!");

// Function TGFGame.MarketProduct.GetCostFromServerData
// 0x0010 (0x0010 - 0x0000)
struct MarketProduct_GetCostFromServerData final
{
public:
	struct FMarketCost                            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketProduct_GetCostFromServerData) == 0x000004, "Wrong alignment on MarketProduct_GetCostFromServerData");
static_assert(sizeof(MarketProduct_GetCostFromServerData) == 0x000010, "Wrong size on MarketProduct_GetCostFromServerData");
static_assert(offsetof(MarketProduct_GetCostFromServerData, ReturnValue) == 0x000000, "Member 'MarketProduct_GetCostFromServerData::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketProduct.GetIsBuyBackItem
// 0x0001 (0x0001 - 0x0000)
struct MarketProduct_GetIsBuyBackItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketProduct_GetIsBuyBackItem) == 0x000001, "Wrong alignment on MarketProduct_GetIsBuyBackItem");
static_assert(sizeof(MarketProduct_GetIsBuyBackItem) == 0x000001, "Wrong size on MarketProduct_GetIsBuyBackItem");
static_assert(offsetof(MarketProduct_GetIsBuyBackItem, ReturnValue) == 0x000000, "Member 'MarketProduct_GetIsBuyBackItem::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketProduct.GetProductDisplayOrder
// 0x0004 (0x0004 - 0x0000)
struct MarketProduct_GetProductDisplayOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketProduct_GetProductDisplayOrder) == 0x000004, "Wrong alignment on MarketProduct_GetProductDisplayOrder");
static_assert(sizeof(MarketProduct_GetProductDisplayOrder) == 0x000004, "Wrong size on MarketProduct_GetProductDisplayOrder");
static_assert(offsetof(MarketProduct_GetProductDisplayOrder, ReturnValue) == 0x000000, "Member 'MarketProduct_GetProductDisplayOrder::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketProduct.GetProductIcon
// 0x0010 (0x0010 - 0x0000)
struct MarketProduct_GetProductIcon final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketProduct_GetProductIcon) == 0x000008, "Wrong alignment on MarketProduct_GetProductIcon");
static_assert(sizeof(MarketProduct_GetProductIcon) == 0x000010, "Wrong size on MarketProduct_GetProductIcon");
static_assert(offsetof(MarketProduct_GetProductIcon, ReturnValue) == 0x000000, "Member 'MarketProduct_GetProductIcon::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketProduct.GetProductId
// 0x0004 (0x0004 - 0x0000)
struct MarketProduct_GetProductId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketProduct_GetProductId) == 0x000004, "Wrong alignment on MarketProduct_GetProductId");
static_assert(sizeof(MarketProduct_GetProductId) == 0x000004, "Wrong size on MarketProduct_GetProductId");
static_assert(offsetof(MarketProduct_GetProductId, ReturnValue) == 0x000000, "Member 'MarketProduct_GetProductId::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketProduct.GetProductName
// 0x0018 (0x0018 - 0x0000)
struct MarketProduct_GetProductName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketProduct_GetProductName) == 0x000008, "Wrong alignment on MarketProduct_GetProductName");
static_assert(sizeof(MarketProduct_GetProductName) == 0x000018, "Wrong size on MarketProduct_GetProductName");
static_assert(offsetof(MarketProduct_GetProductName, ReturnValue) == 0x000000, "Member 'MarketProduct_GetProductName::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketProduct.GetProductSkuId
// 0x0010 (0x0010 - 0x0000)
struct MarketProduct_GetProductSkuId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketProduct_GetProductSkuId) == 0x000008, "Wrong alignment on MarketProduct_GetProductSkuId");
static_assert(sizeof(MarketProduct_GetProductSkuId) == 0x000010, "Wrong size on MarketProduct_GetProductSkuId");
static_assert(offsetof(MarketProduct_GetProductSkuId, ReturnValue) == 0x000000, "Member 'MarketProduct_GetProductSkuId::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketProduct.IsIdentified
// 0x0001 (0x0001 - 0x0000)
struct MarketProduct_IsIdentified final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketProduct_IsIdentified) == 0x000001, "Wrong alignment on MarketProduct_IsIdentified");
static_assert(sizeof(MarketProduct_IsIdentified) == 0x000001, "Wrong size on MarketProduct_IsIdentified");
static_assert(offsetof(MarketProduct_IsIdentified, ReturnValue) == 0x000000, "Member 'MarketProduct_IsIdentified::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketProduct.IsShowDisplayTemplate
// 0x0001 (0x0001 - 0x0000)
struct MarketProduct_IsShowDisplayTemplate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketProduct_IsShowDisplayTemplate) == 0x000001, "Wrong alignment on MarketProduct_IsShowDisplayTemplate");
static_assert(sizeof(MarketProduct_IsShowDisplayTemplate) == 0x000001, "Wrong size on MarketProduct_IsShowDisplayTemplate");
static_assert(offsetof(MarketProduct_IsShowDisplayTemplate, ReturnValue) == 0x000000, "Member 'MarketProduct_IsShowDisplayTemplate::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketProduct.IsSpecialProduct
// 0x0001 (0x0001 - 0x0000)
struct MarketProduct_IsSpecialProduct final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketProduct_IsSpecialProduct) == 0x000001, "Wrong alignment on MarketProduct_IsSpecialProduct");
static_assert(sizeof(MarketProduct_IsSpecialProduct) == 0x000001, "Wrong size on MarketProduct_IsSpecialProduct");
static_assert(offsetof(MarketProduct_IsSpecialProduct, ReturnValue) == 0x000000, "Member 'MarketProduct_IsSpecialProduct::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFKeyConflictPopup.UpdateConflictKeyWidget
// 0x0018 (0x0018 - 0x0000)
struct TGFKeyConflictPopup_UpdateConflictKeyWidget final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFKeyConflictPopup_UpdateConflictKeyWidget) == 0x000008, "Wrong alignment on TGFKeyConflictPopup_UpdateConflictKeyWidget");
static_assert(sizeof(TGFKeyConflictPopup_UpdateConflictKeyWidget) == 0x000018, "Wrong size on TGFKeyConflictPopup_UpdateConflictKeyWidget");
static_assert(offsetof(TGFKeyConflictPopup_UpdateConflictKeyWidget, InKey) == 0x000000, "Member 'TGFKeyConflictPopup_UpdateConflictKeyWidget::InKey' has a wrong offset!");

// Function TGFGame.MarketService.ContainPopupVideo
// 0x0008 (0x0008 - 0x0000)
struct MarketService_ContainPopupVideo final
{
public:
	int32                                         PopupVideoId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarketService_ContainPopupVideo) == 0x000004, "Wrong alignment on MarketService_ContainPopupVideo");
static_assert(sizeof(MarketService_ContainPopupVideo) == 0x000008, "Wrong size on MarketService_ContainPopupVideo");
static_assert(offsetof(MarketService_ContainPopupVideo, PopupVideoId) == 0x000000, "Member 'MarketService_ContainPopupVideo::PopupVideoId' has a wrong offset!");
static_assert(offsetof(MarketService_ContainPopupVideo, ReturnValue) == 0x000004, "Member 'MarketService_ContainPopupVideo::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketService.GetMarketInventoryTableSelect
// 0x0001 (0x0001 - 0x0000)
struct MarketService_GetMarketInventoryTableSelect final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_GetMarketInventoryTableSelect) == 0x000001, "Wrong alignment on MarketService_GetMarketInventoryTableSelect");
static_assert(sizeof(MarketService_GetMarketInventoryTableSelect) == 0x000001, "Wrong size on MarketService_GetMarketInventoryTableSelect");
static_assert(offsetof(MarketService_GetMarketInventoryTableSelect, ReturnValue) == 0x000000, "Member 'MarketService_GetMarketInventoryTableSelect::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketService.GetMarketTabInfoCfgByMarketId
// 0x0018 (0x0018 - 0x0000)
struct MarketService_GetMarketTabInfoCfgByMarketId final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UExcelLoaderTgfConfigExcelMarketTabInfo*> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_GetMarketTabInfoCfgByMarketId) == 0x000008, "Wrong alignment on MarketService_GetMarketTabInfoCfgByMarketId");
static_assert(sizeof(MarketService_GetMarketTabInfoCfgByMarketId) == 0x000018, "Wrong size on MarketService_GetMarketTabInfoCfgByMarketId");
static_assert(offsetof(MarketService_GetMarketTabInfoCfgByMarketId, MarketId) == 0x000000, "Member 'MarketService_GetMarketTabInfoCfgByMarketId::MarketId' has a wrong offset!");
static_assert(offsetof(MarketService_GetMarketTabInfoCfgByMarketId, ReturnValue) == 0x000008, "Member 'MarketService_GetMarketTabInfoCfgByMarketId::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketService.GetMarketTabRefreshTime
// 0x0010 (0x0010 - 0x0000)
struct MarketService_GetMarketTabRefreshTime final
{
public:
	int32                                         TabId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_GetMarketTabRefreshTime) == 0x000008, "Wrong alignment on MarketService_GetMarketTabRefreshTime");
static_assert(sizeof(MarketService_GetMarketTabRefreshTime) == 0x000010, "Wrong size on MarketService_GetMarketTabRefreshTime");
static_assert(offsetof(MarketService_GetMarketTabRefreshTime, TabId) == 0x000000, "Member 'MarketService_GetMarketTabRefreshTime::TabId' has a wrong offset!");
static_assert(offsetof(MarketService_GetMarketTabRefreshTime, ReturnValue) == 0x000008, "Member 'MarketService_GetMarketTabRefreshTime::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketService.GetPlayRefreshEffect
// 0x0001 (0x0001 - 0x0000)
struct MarketService_GetPlayRefreshEffect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_GetPlayRefreshEffect) == 0x000001, "Wrong alignment on MarketService_GetPlayRefreshEffect");
static_assert(sizeof(MarketService_GetPlayRefreshEffect) == 0x000001, "Wrong size on MarketService_GetPlayRefreshEffect");
static_assert(offsetof(MarketService_GetPlayRefreshEffect, ReturnValue) == 0x000000, "Member 'MarketService_GetPlayRefreshEffect::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketService.GetProduct
// 0x0010 (0x0010 - 0x0000)
struct MarketService_GetProduct final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarketProduct*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_GetProduct) == 0x000008, "Wrong alignment on MarketService_GetProduct");
static_assert(sizeof(MarketService_GetProduct) == 0x000010, "Wrong size on MarketService_GetProduct");
static_assert(offsetof(MarketService_GetProduct, ProductId) == 0x000000, "Member 'MarketService_GetProduct::ProductId' has a wrong offset!");
static_assert(offsetof(MarketService_GetProduct, ReturnValue) == 0x000008, "Member 'MarketService_GetProduct::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketService.GetProductListByTabId
// 0x0018 (0x0018 - 0x0000)
struct MarketService_GetProductListByTabId final
{
public:
	int32                                         TabId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarketProduct*>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_GetProductListByTabId) == 0x000008, "Wrong alignment on MarketService_GetProductListByTabId");
static_assert(sizeof(MarketService_GetProductListByTabId) == 0x000018, "Wrong size on MarketService_GetProductListByTabId");
static_assert(offsetof(MarketService_GetProductListByTabId, TabId) == 0x000000, "Member 'MarketService_GetProductListByTabId::TabId' has a wrong offset!");
static_assert(offsetof(MarketService_GetProductListByTabId, ReturnValue) == 0x000008, "Member 'MarketService_GetProductListByTabId::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketService.OnCheckTab
// 0x0004 (0x0004 - 0x0000)
struct MarketService_OnCheckTab final
{
public:
	int32                                         TabId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_OnCheckTab) == 0x000004, "Wrong alignment on MarketService_OnCheckTab");
static_assert(sizeof(MarketService_OnCheckTab) == 0x000004, "Wrong size on MarketService_OnCheckTab");
static_assert(offsetof(MarketService_OnCheckTab, TabId) == 0x000000, "Member 'MarketService_OnCheckTab::TabId' has a wrong offset!");

// Function TGFGame.MarketService.OnMarketSellFinish
// 0x0008 (0x0008 - 0x0000)
struct MarketService_OnMarketSellFinish final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_OnMarketSellFinish) == 0x000008, "Wrong alignment on MarketService_OnMarketSellFinish");
static_assert(sizeof(MarketService_OnMarketSellFinish) == 0x000008, "Wrong size on MarketService_OnMarketSellFinish");
static_assert(offsetof(MarketService_OnMarketSellFinish, Item) == 0x000000, "Member 'MarketService_OnMarketSellFinish::Item' has a wrong offset!");

// Function TGFGame.MarketService.OnMarketSellStart
// 0x0008 (0x0008 - 0x0000)
struct MarketService_OnMarketSellStart final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_OnMarketSellStart) == 0x000008, "Wrong alignment on MarketService_OnMarketSellStart");
static_assert(sizeof(MarketService_OnMarketSellStart) == 0x000008, "Wrong size on MarketService_OnMarketSellStart");
static_assert(offsetof(MarketService_OnMarketSellStart, Item) == 0x000000, "Member 'MarketService_OnMarketSellStart::Item' has a wrong offset!");

// Function TGFGame.MarketService.SendMarketBuyProductReq
// 0x0008 (0x0008 - 0x0000)
struct MarketService_SendMarketBuyProductReq final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_SendMarketBuyProductReq) == 0x000004, "Wrong alignment on MarketService_SendMarketBuyProductReq");
static_assert(sizeof(MarketService_SendMarketBuyProductReq) == 0x000008, "Wrong size on MarketService_SendMarketBuyProductReq");
static_assert(offsetof(MarketService_SendMarketBuyProductReq, ProductId) == 0x000000, "Member 'MarketService_SendMarketBuyProductReq::ProductId' has a wrong offset!");
static_assert(offsetof(MarketService_SendMarketBuyProductReq, Count) == 0x000004, "Member 'MarketService_SendMarketBuyProductReq::Count' has a wrong offset!");

// Function TGFGame.MarketService.SendMarketBuyProductWithCostReq
// 0x0010 (0x0010 - 0x0000)
struct MarketService_SendMarketBuyProductWithCostReq final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostType;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostPrice;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_SendMarketBuyProductWithCostReq) == 0x000004, "Wrong alignment on MarketService_SendMarketBuyProductWithCostReq");
static_assert(sizeof(MarketService_SendMarketBuyProductWithCostReq) == 0x000010, "Wrong size on MarketService_SendMarketBuyProductWithCostReq");
static_assert(offsetof(MarketService_SendMarketBuyProductWithCostReq, ProductId) == 0x000000, "Member 'MarketService_SendMarketBuyProductWithCostReq::ProductId' has a wrong offset!");
static_assert(offsetof(MarketService_SendMarketBuyProductWithCostReq, Count) == 0x000004, "Member 'MarketService_SendMarketBuyProductWithCostReq::Count' has a wrong offset!");
static_assert(offsetof(MarketService_SendMarketBuyProductWithCostReq, CostType) == 0x000008, "Member 'MarketService_SendMarketBuyProductWithCostReq::CostType' has a wrong offset!");
static_assert(offsetof(MarketService_SendMarketBuyProductWithCostReq, CostPrice) == 0x00000C, "Member 'MarketService_SendMarketBuyProductWithCostReq::CostPrice' has a wrong offset!");

// Function TGFGame.MarketService.SendMarketBuySoldItemReq
// 0x0010 (0x0010 - 0x0000)
struct MarketService_SendMarketBuySoldItemReq final
{
public:
	class UMarketProduct*                         Product;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarketService_SendMarketBuySoldItemReq) == 0x000008, "Wrong alignment on MarketService_SendMarketBuySoldItemReq");
static_assert(sizeof(MarketService_SendMarketBuySoldItemReq) == 0x000010, "Wrong size on MarketService_SendMarketBuySoldItemReq");
static_assert(offsetof(MarketService_SendMarketBuySoldItemReq, Product) == 0x000000, "Member 'MarketService_SendMarketBuySoldItemReq::Product' has a wrong offset!");
static_assert(offsetof(MarketService_SendMarketBuySoldItemReq, Count) == 0x000008, "Member 'MarketService_SendMarketBuySoldItemReq::Count' has a wrong offset!");

// Function TGFGame.MarketService.SendMarketSellItemsReq
// 0x0008 (0x0008 - 0x0000)
struct MarketService_SendMarketSellItemsReq final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_SendMarketSellItemsReq) == 0x000008, "Wrong alignment on MarketService_SendMarketSellItemsReq");
static_assert(sizeof(MarketService_SendMarketSellItemsReq) == 0x000008, "Wrong size on MarketService_SendMarketSellItemsReq");
static_assert(offsetof(MarketService_SendMarketSellItemsReq, Item) == 0x000000, "Member 'MarketService_SendMarketSellItemsReq::Item' has a wrong offset!");

// Function TGFGame.MarketService.SendPopupVideo
// 0x0004 (0x0004 - 0x0000)
struct MarketService_SendPopupVideo final
{
public:
	int32                                         PopupVideoId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_SendPopupVideo) == 0x000004, "Wrong alignment on MarketService_SendPopupVideo");
static_assert(sizeof(MarketService_SendPopupVideo) == 0x000004, "Wrong size on MarketService_SendPopupVideo");
static_assert(offsetof(MarketService_SendPopupVideo, PopupVideoId) == 0x000000, "Member 'MarketService_SendPopupVideo::PopupVideoId' has a wrong offset!");

// Function TGFGame.MarketService.SetMarketInventoryTabSelect
// 0x0001 (0x0001 - 0x0000)
struct MarketService_SetMarketInventoryTabSelect final
{
public:
	uint8                                         TabId;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_SetMarketInventoryTabSelect) == 0x000001, "Wrong alignment on MarketService_SetMarketInventoryTabSelect");
static_assert(sizeof(MarketService_SetMarketInventoryTabSelect) == 0x000001, "Wrong size on MarketService_SetMarketInventoryTabSelect");
static_assert(offsetof(MarketService_SetMarketInventoryTabSelect, TabId) == 0x000000, "Member 'MarketService_SetMarketInventoryTabSelect::TabId' has a wrong offset!");

// Function TGFGame.MarketService.SetMarketStragePageTab
// 0x0001 (0x0001 - 0x0000)
struct MarketService_SetMarketStragePageTab final
{
public:
	uint8                                         PageId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_SetMarketStragePageTab) == 0x000001, "Wrong alignment on MarketService_SetMarketStragePageTab");
static_assert(sizeof(MarketService_SetMarketStragePageTab) == 0x000001, "Wrong size on MarketService_SetMarketStragePageTab");
static_assert(offsetof(MarketService_SetMarketStragePageTab, PageId) == 0x000000, "Member 'MarketService_SetMarketStragePageTab::PageId' has a wrong offset!");

// Function TGFGame.MarketService.ShouldShowMarketRedDot
// 0x0001 (0x0001 - 0x0000)
struct MarketService_ShouldShowMarketRedDot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketService_ShouldShowMarketRedDot) == 0x000001, "Wrong alignment on MarketService_ShouldShowMarketRedDot");
static_assert(sizeof(MarketService_ShouldShowMarketRedDot) == 0x000001, "Wrong size on MarketService_ShouldShowMarketRedDot");
static_assert(offsetof(MarketService_ShouldShowMarketRedDot, ReturnValue) == 0x000000, "Member 'MarketService_ShouldShowMarketRedDot::ReturnValue' has a wrong offset!");

// Function TGFGame.MarketService.ShouldShowMarketTabRedDot
// 0x0008 (0x0008 - 0x0000)
struct MarketService_ShouldShowMarketTabRedDot final
{
public:
	int32                                         TabId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarketService_ShouldShowMarketTabRedDot) == 0x000004, "Wrong alignment on MarketService_ShouldShowMarketTabRedDot");
static_assert(sizeof(MarketService_ShouldShowMarketTabRedDot) == 0x000008, "Wrong size on MarketService_ShouldShowMarketTabRedDot");
static_assert(offsetof(MarketService_ShouldShowMarketTabRedDot, TabId) == 0x000000, "Member 'MarketService_ShouldShowMarketTabRedDot::TabId' has a wrong offset!");
static_assert(offsetof(MarketService_ShouldShowMarketTabRedDot, ReturnValue) == 0x000004, "Member 'MarketService_ShouldShowMarketTabRedDot::ReturnValue' has a wrong offset!");

// Function TGFGame.MarqueeSubsystem.AddOneMarqueeById
// 0x0004 (0x0004 - 0x0000)
struct MarqueeSubsystem_AddOneMarqueeById final
{
public:
	int32                                         MarqueeId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarqueeSubsystem_AddOneMarqueeById) == 0x000004, "Wrong alignment on MarqueeSubsystem_AddOneMarqueeById");
static_assert(sizeof(MarqueeSubsystem_AddOneMarqueeById) == 0x000004, "Wrong size on MarqueeSubsystem_AddOneMarqueeById");
static_assert(offsetof(MarqueeSubsystem_AddOneMarqueeById, MarqueeId) == 0x000000, "Member 'MarqueeSubsystem_AddOneMarqueeById::MarqueeId' has a wrong offset!");

// Function TGFGame.MarqueeSubsystem.AddOneMarqueeByStr
// 0x0018 (0x0018 - 0x0000)
struct MarqueeSubsystem_AddOneMarqueeByStr final
{
public:
	class FString                                 StrContent;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarqueeType                                  MarqueeType;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortOrder;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarqueeSubsystem_AddOneMarqueeByStr) == 0x000008, "Wrong alignment on MarqueeSubsystem_AddOneMarqueeByStr");
static_assert(sizeof(MarqueeSubsystem_AddOneMarqueeByStr) == 0x000018, "Wrong size on MarqueeSubsystem_AddOneMarqueeByStr");
static_assert(offsetof(MarqueeSubsystem_AddOneMarqueeByStr, StrContent) == 0x000000, "Member 'MarqueeSubsystem_AddOneMarqueeByStr::StrContent' has a wrong offset!");
static_assert(offsetof(MarqueeSubsystem_AddOneMarqueeByStr, MarqueeType) == 0x000010, "Member 'MarqueeSubsystem_AddOneMarqueeByStr::MarqueeType' has a wrong offset!");
static_assert(offsetof(MarqueeSubsystem_AddOneMarqueeByStr, SortOrder) == 0x000014, "Member 'MarqueeSubsystem_AddOneMarqueeByStr::SortOrder' has a wrong offset!");

// Function TGFGame.MarqueeSubsystem.GetLastMarqueeMessage
// 0x0028 (0x0028 - 0x0000)
struct MarqueeSubsystem_GetLastMarqueeMessage final
{
public:
	struct FMarqueeMessage                        OutMarqueeMessage;                                 // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarqueeSubsystem_GetLastMarqueeMessage) == 0x000008, "Wrong alignment on MarqueeSubsystem_GetLastMarqueeMessage");
static_assert(sizeof(MarqueeSubsystem_GetLastMarqueeMessage) == 0x000028, "Wrong size on MarqueeSubsystem_GetLastMarqueeMessage");
static_assert(offsetof(MarqueeSubsystem_GetLastMarqueeMessage, OutMarqueeMessage) == 0x000000, "Member 'MarqueeSubsystem_GetLastMarqueeMessage::OutMarqueeMessage' has a wrong offset!");
static_assert(offsetof(MarqueeSubsystem_GetLastMarqueeMessage, ReturnValue) == 0x000020, "Member 'MarqueeSubsystem_GetLastMarqueeMessage::ReturnValue' has a wrong offset!");

// Function TGFGame.MarqueeSubsystem.GetMarqueeMoveSpeed
// 0x0004 (0x0004 - 0x0000)
struct MarqueeSubsystem_GetMarqueeMoveSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarqueeSubsystem_GetMarqueeMoveSpeed) == 0x000004, "Wrong alignment on MarqueeSubsystem_GetMarqueeMoveSpeed");
static_assert(sizeof(MarqueeSubsystem_GetMarqueeMoveSpeed) == 0x000004, "Wrong size on MarqueeSubsystem_GetMarqueeMoveSpeed");
static_assert(offsetof(MarqueeSubsystem_GetMarqueeMoveSpeed, ReturnValue) == 0x000000, "Member 'MarqueeSubsystem_GetMarqueeMoveSpeed::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.AcceptFriendInvite
// 0x0010 (0x0010 - 0x0000)
struct SocialService_AcceptFriendInvite final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_AcceptFriendInvite) == 0x000008, "Wrong alignment on SocialService_AcceptFriendInvite");
static_assert(sizeof(SocialService_AcceptFriendInvite) == 0x000010, "Wrong size on SocialService_AcceptFriendInvite");
static_assert(offsetof(SocialService_AcceptFriendInvite, UserKey) == 0x000000, "Member 'SocialService_AcceptFriendInvite::UserKey' has a wrong offset!");

// Function TGFGame.SocialService.AddInvitedUser
// 0x0010 (0x0010 - 0x0000)
struct SocialService_AddInvitedUser final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_AddInvitedUser) == 0x000008, "Wrong alignment on SocialService_AddInvitedUser");
static_assert(sizeof(SocialService_AddInvitedUser) == 0x000010, "Wrong size on SocialService_AddInvitedUser");
static_assert(offsetof(SocialService_AddInvitedUser, UserKey) == 0x000000, "Member 'SocialService_AddInvitedUser::UserKey' has a wrong offset!");

// Function TGFGame.SocialService.ApplyFriend
// 0x0010 (0x0010 - 0x0000)
struct SocialService_ApplyFriend final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_ApplyFriend) == 0x000008, "Wrong alignment on SocialService_ApplyFriend");
static_assert(sizeof(SocialService_ApplyFriend) == 0x000010, "Wrong size on SocialService_ApplyFriend");
static_assert(offsetof(SocialService_ApplyFriend, UserKey) == 0x000000, "Member 'SocialService_ApplyFriend::UserKey' has a wrong offset!");

// Function TGFGame.SocialService.CheckIsFriend
// 0x0010 (0x0010 - 0x0000)
struct SocialService_CheckIsFriend final
{
public:
	int64                                         UserId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SocialService_CheckIsFriend) == 0x000008, "Wrong alignment on SocialService_CheckIsFriend");
static_assert(sizeof(SocialService_CheckIsFriend) == 0x000010, "Wrong size on SocialService_CheckIsFriend");
static_assert(offsetof(SocialService_CheckIsFriend, UserId) == 0x000000, "Member 'SocialService_CheckIsFriend::UserId' has a wrong offset!");
static_assert(offsetof(SocialService_CheckIsFriend, ReturnValue) == 0x000008, "Member 'SocialService_CheckIsFriend::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.CheckIsGameFriend
// 0x0018 (0x0018 - 0x0000)
struct SocialService_CheckIsGameFriend final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SocialService_CheckIsGameFriend) == 0x000008, "Wrong alignment on SocialService_CheckIsGameFriend");
static_assert(sizeof(SocialService_CheckIsGameFriend) == 0x000018, "Wrong size on SocialService_CheckIsGameFriend");
static_assert(offsetof(SocialService_CheckIsGameFriend, UserKey) == 0x000000, "Member 'SocialService_CheckIsGameFriend::UserKey' has a wrong offset!");
static_assert(offsetof(SocialService_CheckIsGameFriend, ReturnValue) == 0x000010, "Member 'SocialService_CheckIsGameFriend::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.CheckIsInvitedUser
// 0x0018 (0x0018 - 0x0000)
struct SocialService_CheckIsInvitedUser final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SocialService_CheckIsInvitedUser) == 0x000008, "Wrong alignment on SocialService_CheckIsInvitedUser");
static_assert(sizeof(SocialService_CheckIsInvitedUser) == 0x000018, "Wrong size on SocialService_CheckIsInvitedUser");
static_assert(offsetof(SocialService_CheckIsInvitedUser, UserKey) == 0x000000, "Member 'SocialService_CheckIsInvitedUser::UserKey' has a wrong offset!");
static_assert(offsetof(SocialService_CheckIsInvitedUser, ReturnValue) == 0x000010, "Member 'SocialService_CheckIsInvitedUser::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.CheckIsSteamFriend
// 0x0010 (0x0010 - 0x0000)
struct SocialService_CheckIsSteamFriend final
{
public:
	struct FGlobalUserKey                         GlobalUserKey;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SocialService_CheckIsSteamFriend) == 0x000008, "Wrong alignment on SocialService_CheckIsSteamFriend");
static_assert(sizeof(SocialService_CheckIsSteamFriend) == 0x000010, "Wrong size on SocialService_CheckIsSteamFriend");
static_assert(offsetof(SocialService_CheckIsSteamFriend, GlobalUserKey) == 0x000000, "Member 'SocialService_CheckIsSteamFriend::GlobalUserKey' has a wrong offset!");
static_assert(offsetof(SocialService_CheckIsSteamFriend, ReturnValue) == 0x000008, "Member 'SocialService_CheckIsSteamFriend::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.GetFriendInviteArray
// 0x0010 (0x0010 - 0x0000)
struct SocialService_GetFriendInviteArray final
{
public:
	TArray<class UFriendInvite*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_GetFriendInviteArray) == 0x000008, "Wrong alignment on SocialService_GetFriendInviteArray");
static_assert(sizeof(SocialService_GetFriendInviteArray) == 0x000010, "Wrong size on SocialService_GetFriendInviteArray");
static_assert(offsetof(SocialService_GetFriendInviteArray, ReturnValue) == 0x000000, "Member 'SocialService_GetFriendInviteArray::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.GetFriendSearchArray
// 0x0010 (0x0010 - 0x0000)
struct SocialService_GetFriendSearchArray final
{
public:
	TArray<class UFriendSuggest*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_GetFriendSearchArray) == 0x000008, "Wrong alignment on SocialService_GetFriendSearchArray");
static_assert(sizeof(SocialService_GetFriendSearchArray) == 0x000010, "Wrong size on SocialService_GetFriendSearchArray");
static_assert(offsetof(SocialService_GetFriendSearchArray, ReturnValue) == 0x000000, "Member 'SocialService_GetFriendSearchArray::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.GetFriendSuggestArray
// 0x0010 (0x0010 - 0x0000)
struct SocialService_GetFriendSuggestArray final
{
public:
	TArray<class UFriendSuggest*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_GetFriendSuggestArray) == 0x000008, "Wrong alignment on SocialService_GetFriendSuggestArray");
static_assert(sizeof(SocialService_GetFriendSuggestArray) == 0x000010, "Wrong size on SocialService_GetFriendSuggestArray");
static_assert(offsetof(SocialService_GetFriendSuggestArray, ReturnValue) == 0x000000, "Member 'SocialService_GetFriendSuggestArray::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.GetGameFriendArray
// 0x0010 (0x0010 - 0x0000)
struct SocialService_GetGameFriendArray final
{
public:
	TArray<class UGameFriend*>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_GetGameFriendArray) == 0x000008, "Wrong alignment on SocialService_GetGameFriendArray");
static_assert(sizeof(SocialService_GetGameFriendArray) == 0x000010, "Wrong size on SocialService_GetGameFriendArray");
static_assert(offsetof(SocialService_GetGameFriendArray, ReturnValue) == 0x000000, "Member 'SocialService_GetGameFriendArray::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.GetGameFriendCount
// 0x0004 (0x0004 - 0x0000)
struct SocialService_GetGameFriendCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_GetGameFriendCount) == 0x000004, "Wrong alignment on SocialService_GetGameFriendCount");
static_assert(sizeof(SocialService_GetGameFriendCount) == 0x000004, "Wrong size on SocialService_GetGameFriendCount");
static_assert(offsetof(SocialService_GetGameFriendCount, ReturnValue) == 0x000000, "Member 'SocialService_GetGameFriendCount::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.GetOnlineGameFriendCount
// 0x0004 (0x0004 - 0x0000)
struct SocialService_GetOnlineGameFriendCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_GetOnlineGameFriendCount) == 0x000004, "Wrong alignment on SocialService_GetOnlineGameFriendCount");
static_assert(sizeof(SocialService_GetOnlineGameFriendCount) == 0x000004, "Wrong size on SocialService_GetOnlineGameFriendCount");
static_assert(offsetof(SocialService_GetOnlineGameFriendCount, ReturnValue) == 0x000000, "Member 'SocialService_GetOnlineGameFriendCount::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.GetOnlineSteamFriendCount
// 0x0004 (0x0004 - 0x0000)
struct SocialService_GetOnlineSteamFriendCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_GetOnlineSteamFriendCount) == 0x000004, "Wrong alignment on SocialService_GetOnlineSteamFriendCount");
static_assert(sizeof(SocialService_GetOnlineSteamFriendCount) == 0x000004, "Wrong size on SocialService_GetOnlineSteamFriendCount");
static_assert(offsetof(SocialService_GetOnlineSteamFriendCount, ReturnValue) == 0x000000, "Member 'SocialService_GetOnlineSteamFriendCount::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.GetSteamFriendArray
// 0x0010 (0x0010 - 0x0000)
struct SocialService_GetSteamFriendArray final
{
public:
	TArray<class USteamFriend*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_GetSteamFriendArray) == 0x000008, "Wrong alignment on SocialService_GetSteamFriendArray");
static_assert(sizeof(SocialService_GetSteamFriendArray) == 0x000010, "Wrong size on SocialService_GetSteamFriendArray");
static_assert(offsetof(SocialService_GetSteamFriendArray, ReturnValue) == 0x000000, "Member 'SocialService_GetSteamFriendArray::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.GetSteamFriendCount
// 0x0004 (0x0004 - 0x0000)
struct SocialService_GetSteamFriendCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_GetSteamFriendCount) == 0x000004, "Wrong alignment on SocialService_GetSteamFriendCount");
static_assert(sizeof(SocialService_GetSteamFriendCount) == 0x000004, "Wrong size on SocialService_GetSteamFriendCount");
static_assert(offsetof(SocialService_GetSteamFriendCount, ReturnValue) == 0x000000, "Member 'SocialService_GetSteamFriendCount::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.GetTogetherPlayerArray
// 0x0010 (0x0010 - 0x0000)
struct SocialService_GetTogetherPlayerArray final
{
public:
	TArray<class UFriendSuggest*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_GetTogetherPlayerArray) == 0x000008, "Wrong alignment on SocialService_GetTogetherPlayerArray");
static_assert(sizeof(SocialService_GetTogetherPlayerArray) == 0x000010, "Wrong size on SocialService_GetTogetherPlayerArray");
static_assert(offsetof(SocialService_GetTogetherPlayerArray, ReturnValue) == 0x000000, "Member 'SocialService_GetTogetherPlayerArray::ReturnValue' has a wrong offset!");

// Function TGFGame.SocialService.Lua_SetToggleRedDot
// 0x0002 (0x0002 - 0x0000)
struct SocialService_Lua_SetToggleRedDot final
{
public:
	ESocialToggleType                             ToggleType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRedTips;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_Lua_SetToggleRedDot) == 0x000001, "Wrong alignment on SocialService_Lua_SetToggleRedDot");
static_assert(sizeof(SocialService_Lua_SetToggleRedDot) == 0x000002, "Wrong size on SocialService_Lua_SetToggleRedDot");
static_assert(offsetof(SocialService_Lua_SetToggleRedDot, ToggleType) == 0x000000, "Member 'SocialService_Lua_SetToggleRedDot::ToggleType' has a wrong offset!");
static_assert(offsetof(SocialService_Lua_SetToggleRedDot, bRedTips) == 0x000001, "Member 'SocialService_Lua_SetToggleRedDot::bRedTips' has a wrong offset!");

// Function TGFGame.SocialService.RejectFriendInvite
// 0x0010 (0x0010 - 0x0000)
struct SocialService_RejectFriendInvite final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_RejectFriendInvite) == 0x000008, "Wrong alignment on SocialService_RejectFriendInvite");
static_assert(sizeof(SocialService_RejectFriendInvite) == 0x000010, "Wrong size on SocialService_RejectFriendInvite");
static_assert(offsetof(SocialService_RejectFriendInvite, UserKey) == 0x000000, "Member 'SocialService_RejectFriendInvite::UserKey' has a wrong offset!");

// Function TGFGame.SocialService.RemoveFriend
// 0x0010 (0x0010 - 0x0000)
struct SocialService_RemoveFriend final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_RemoveFriend) == 0x000008, "Wrong alignment on SocialService_RemoveFriend");
static_assert(sizeof(SocialService_RemoveFriend) == 0x000010, "Wrong size on SocialService_RemoveFriend");
static_assert(offsetof(SocialService_RemoveFriend, UserKey) == 0x000000, "Member 'SocialService_RemoveFriend::UserKey' has a wrong offset!");

// Function TGFGame.SocialService.RemoveTogetherPlayer
// 0x0010 (0x0010 - 0x0000)
struct SocialService_RemoveTogetherPlayer final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_RemoveTogetherPlayer) == 0x000008, "Wrong alignment on SocialService_RemoveTogetherPlayer");
static_assert(sizeof(SocialService_RemoveTogetherPlayer) == 0x000010, "Wrong size on SocialService_RemoveTogetherPlayer");
static_assert(offsetof(SocialService_RemoveTogetherPlayer, UserKey) == 0x000000, "Member 'SocialService_RemoveTogetherPlayer::UserKey' has a wrong offset!");

// Function TGFGame.SocialService.RequestFriendSuggest
// 0x0001 (0x0001 - 0x0000)
struct SocialService_RequestFriendSuggest final
{
public:
	ETGFProtoTgfEnForceType                       ForceType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialService_RequestFriendSuggest) == 0x000001, "Wrong alignment on SocialService_RequestFriendSuggest");
static_assert(sizeof(SocialService_RequestFriendSuggest) == 0x000001, "Wrong size on SocialService_RequestFriendSuggest");
static_assert(offsetof(SocialService_RequestFriendSuggest, ForceType) == 0x000000, "Member 'SocialService_RequestFriendSuggest::ForceType' has a wrong offset!");

// Function TGFGame.SocialService.SearchPlayer
// 0x0018 (0x0018 - 0x0000)
struct SocialService_SearchPlayer final
{
public:
	class FString                                 StrContent;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESearchPlayerTag                              SearchTag;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SocialService_SearchPlayer) == 0x000008, "Wrong alignment on SocialService_SearchPlayer");
static_assert(sizeof(SocialService_SearchPlayer) == 0x000018, "Wrong size on SocialService_SearchPlayer");
static_assert(offsetof(SocialService_SearchPlayer, StrContent) == 0x000000, "Member 'SocialService_SearchPlayer::StrContent' has a wrong offset!");
static_assert(offsetof(SocialService_SearchPlayer, SearchTag) == 0x000010, "Member 'SocialService_SearchPlayer::SearchTag' has a wrong offset!");

// Function TGFGame.SettingService.AddCheckedActivitiy
// 0x0004 (0x0004 - 0x0000)
struct SettingService_AddCheckedActivitiy final
{
public:
	int32                                         ActivitiyID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_AddCheckedActivitiy) == 0x000004, "Wrong alignment on SettingService_AddCheckedActivitiy");
static_assert(sizeof(SettingService_AddCheckedActivitiy) == 0x000004, "Wrong size on SettingService_AddCheckedActivitiy");
static_assert(offsetof(SettingService_AddCheckedActivitiy, ActivitiyID) == 0x000000, "Member 'SettingService_AddCheckedActivitiy::ActivitiyID' has a wrong offset!");

// Function TGFGame.SettingService.GetInputKeyByInputAction
// 0x0020 (0x0020 - 0x0000)
struct SettingService_GetInputKeyByInputAction final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_GetInputKeyByInputAction) == 0x000008, "Wrong alignment on SettingService_GetInputKeyByInputAction");
static_assert(sizeof(SettingService_GetInputKeyByInputAction) == 0x000020, "Wrong size on SettingService_GetInputKeyByInputAction");
static_assert(offsetof(SettingService_GetInputKeyByInputAction, InputAction) == 0x000000, "Member 'SettingService_GetInputKeyByInputAction::InputAction' has a wrong offset!");
static_assert(offsetof(SettingService_GetInputKeyByInputAction, ReturnValue) == 0x000008, "Member 'SettingService_GetInputKeyByInputAction::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.GetLyraSettingsLocal
// 0x0008 (0x0008 - 0x0000)
struct SettingService_GetLyraSettingsLocal final
{
public:
	class ULyraSettingsLocal*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_GetLyraSettingsLocal) == 0x000008, "Wrong alignment on SettingService_GetLyraSettingsLocal");
static_assert(sizeof(SettingService_GetLyraSettingsLocal) == 0x000008, "Wrong size on SettingService_GetLyraSettingsLocal");
static_assert(offsetof(SettingService_GetLyraSettingsLocal, ReturnValue) == 0x000000, "Member 'SettingService_GetLyraSettingsLocal::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.GetLyraSettingsShared
// 0x0008 (0x0008 - 0x0000)
struct SettingService_GetLyraSettingsShared final
{
public:
	class ULyraSettingsShared*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_GetLyraSettingsShared) == 0x000008, "Wrong alignment on SettingService_GetLyraSettingsShared");
static_assert(sizeof(SettingService_GetLyraSettingsShared) == 0x000008, "Wrong size on SettingService_GetLyraSettingsShared");
static_assert(offsetof(SettingService_GetLyraSettingsShared, ReturnValue) == 0x000000, "Member 'SettingService_GetLyraSettingsShared::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadAllowMakeTeam
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadAllowMakeTeam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadAllowMakeTeam) == 0x000001, "Wrong alignment on SettingService_LoadAllowMakeTeam");
static_assert(sizeof(SettingService_LoadAllowMakeTeam) == 0x000001, "Wrong size on SettingService_LoadAllowMakeTeam");
static_assert(offsetof(SettingService_LoadAllowMakeTeam, ReturnValue) == 0x000000, "Member 'SettingService_LoadAllowMakeTeam::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadCameraShakesByMoving
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadCameraShakesByMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadCameraShakesByMoving) == 0x000001, "Wrong alignment on SettingService_LoadCameraShakesByMoving");
static_assert(sizeof(SettingService_LoadCameraShakesByMoving) == 0x000001, "Wrong size on SettingService_LoadCameraShakesByMoving");
static_assert(offsetof(SettingService_LoadCameraShakesByMoving, ReturnValue) == 0x000000, "Member 'SettingService_LoadCameraShakesByMoving::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadChargeSkillMethod
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadChargeSkillMethod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadChargeSkillMethod) == 0x000001, "Wrong alignment on SettingService_LoadChargeSkillMethod");
static_assert(sizeof(SettingService_LoadChargeSkillMethod) == 0x000001, "Wrong size on SettingService_LoadChargeSkillMethod");
static_assert(offsetof(SettingService_LoadChargeSkillMethod, ReturnValue) == 0x000000, "Member 'SettingService_LoadChargeSkillMethod::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadCheckedActivities
// 0x0010 (0x0010 - 0x0000)
struct SettingService_LoadCheckedActivities final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadCheckedActivities) == 0x000008, "Wrong alignment on SettingService_LoadCheckedActivities");
static_assert(sizeof(SettingService_LoadCheckedActivities) == 0x000010, "Wrong size on SettingService_LoadCheckedActivities");
static_assert(offsetof(SettingService_LoadCheckedActivities, ReturnValue) == 0x000000, "Member 'SettingService_LoadCheckedActivities::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadDailyLoginCheck
// 0x0004 (0x0004 - 0x0000)
struct SettingService_LoadDailyLoginCheck final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadDailyLoginCheck) == 0x000004, "Wrong alignment on SettingService_LoadDailyLoginCheck");
static_assert(sizeof(SettingService_LoadDailyLoginCheck) == 0x000004, "Wrong size on SettingService_LoadDailyLoginCheck");
static_assert(offsetof(SettingService_LoadDailyLoginCheck, ReturnValue) == 0x000000, "Member 'SettingService_LoadDailyLoginCheck::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadInventoryAutoQuality
// 0x0010 (0x0010 - 0x0000)
struct SettingService_LoadInventoryAutoQuality final
{
public:
	TArray<ETgfEquipQuality>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadInventoryAutoQuality) == 0x000008, "Wrong alignment on SettingService_LoadInventoryAutoQuality");
static_assert(sizeof(SettingService_LoadInventoryAutoQuality) == 0x000010, "Wrong size on SettingService_LoadInventoryAutoQuality");
static_assert(offsetof(SettingService_LoadInventoryAutoQuality, ReturnValue) == 0x000000, "Member 'SettingService_LoadInventoryAutoQuality::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadInventoryOpened
// 0x0010 (0x0010 - 0x0000)
struct SettingService_LoadInventoryOpened final
{
public:
	TArray<int64>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadInventoryOpened) == 0x000008, "Wrong alignment on SettingService_LoadInventoryOpened");
static_assert(sizeof(SettingService_LoadInventoryOpened) == 0x000010, "Wrong size on SettingService_LoadInventoryOpened");
static_assert(offsetof(SettingService_LoadInventoryOpened, ReturnValue) == 0x000000, "Member 'SettingService_LoadInventoryOpened::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadInventorySee
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadInventorySee final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadInventorySee) == 0x000001, "Wrong alignment on SettingService_LoadInventorySee");
static_assert(sizeof(SettingService_LoadInventorySee) == 0x000001, "Wrong size on SettingService_LoadInventorySee");
static_assert(offsetof(SettingService_LoadInventorySee, ReturnValue) == 0x000000, "Member 'SettingService_LoadInventorySee::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadInventoryTalentTips
// 0x0018 (0x0018 - 0x0000)
struct SettingService_LoadInventoryTalentTips final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadInventoryTalentTips) == 0x000008, "Wrong alignment on SettingService_LoadInventoryTalentTips");
static_assert(sizeof(SettingService_LoadInventoryTalentTips) == 0x000018, "Wrong size on SettingService_LoadInventoryTalentTips");
static_assert(offsetof(SettingService_LoadInventoryTalentTips, Key) == 0x000000, "Member 'SettingService_LoadInventoryTalentTips::Key' has a wrong offset!");
static_assert(offsetof(SettingService_LoadInventoryTalentTips, ReturnValue) == 0x000008, "Member 'SettingService_LoadInventoryTalentTips::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadIsLiveMode
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadIsLiveMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadIsLiveMode) == 0x000001, "Wrong alignment on SettingService_LoadIsLiveMode");
static_assert(sizeof(SettingService_LoadIsLiveMode) == 0x000001, "Wrong size on SettingService_LoadIsLiveMode");
static_assert(offsetof(SettingService_LoadIsLiveMode, ReturnValue) == 0x000000, "Member 'SettingService_LoadIsLiveMode::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadKilledScreenshotAutoDelete
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadKilledScreenshotAutoDelete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadKilledScreenshotAutoDelete) == 0x000001, "Wrong alignment on SettingService_LoadKilledScreenshotAutoDelete");
static_assert(sizeof(SettingService_LoadKilledScreenshotAutoDelete) == 0x000001, "Wrong size on SettingService_LoadKilledScreenshotAutoDelete");
static_assert(offsetof(SettingService_LoadKilledScreenshotAutoDelete, ReturnValue) == 0x000000, "Member 'SettingService_LoadKilledScreenshotAutoDelete::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadKilledScreenshotPath
// 0x0010 (0x0010 - 0x0000)
struct SettingService_LoadKilledScreenshotPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadKilledScreenshotPath) == 0x000008, "Wrong alignment on SettingService_LoadKilledScreenshotPath");
static_assert(sizeof(SettingService_LoadKilledScreenshotPath) == 0x000010, "Wrong size on SettingService_LoadKilledScreenshotPath");
static_assert(offsetof(SettingService_LoadKilledScreenshotPath, ReturnValue) == 0x000000, "Member 'SettingService_LoadKilledScreenshotPath::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadKilledScreenshotStorageLimit
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadKilledScreenshotStorageLimit final
{
public:
	EStorageLimit                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadKilledScreenshotStorageLimit) == 0x000001, "Wrong alignment on SettingService_LoadKilledScreenshotStorageLimit");
static_assert(sizeof(SettingService_LoadKilledScreenshotStorageLimit) == 0x000001, "Wrong size on SettingService_LoadKilledScreenshotStorageLimit");
static_assert(offsetof(SettingService_LoadKilledScreenshotStorageLimit, ReturnValue) == 0x000000, "Member 'SettingService_LoadKilledScreenshotStorageLimit::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadMithrilInventoryOpened
// 0x0010 (0x0010 - 0x0000)
struct SettingService_LoadMithrilInventoryOpened final
{
public:
	TArray<int64>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadMithrilInventoryOpened) == 0x000008, "Wrong alignment on SettingService_LoadMithrilInventoryOpened");
static_assert(sizeof(SettingService_LoadMithrilInventoryOpened) == 0x000010, "Wrong size on SettingService_LoadMithrilInventoryOpened");
static_assert(offsetof(SettingService_LoadMithrilInventoryOpened, ReturnValue) == 0x000000, "Member 'SettingService_LoadMithrilInventoryOpened::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadMoonInterationTime
// 0x0004 (0x0004 - 0x0000)
struct SettingService_LoadMoonInterationTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadMoonInterationTime) == 0x000004, "Wrong alignment on SettingService_LoadMoonInterationTime");
static_assert(sizeof(SettingService_LoadMoonInterationTime) == 0x000004, "Wrong size on SettingService_LoadMoonInterationTime");
static_assert(offsetof(SettingService_LoadMoonInterationTime, ReturnValue) == 0x000000, "Member 'SettingService_LoadMoonInterationTime::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadMouseTargetingMethod
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadMouseTargetingMethod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadMouseTargetingMethod) == 0x000001, "Wrong alignment on SettingService_LoadMouseTargetingMethod");
static_assert(sizeof(SettingService_LoadMouseTargetingMethod) == 0x000001, "Wrong size on SettingService_LoadMouseTargetingMethod");
static_assert(offsetof(SettingService_LoadMouseTargetingMethod, ReturnValue) == 0x000000, "Member 'SettingService_LoadMouseTargetingMethod::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadOpenOperationTips
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadOpenOperationTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadOpenOperationTips) == 0x000001, "Wrong alignment on SettingService_LoadOpenOperationTips");
static_assert(sizeof(SettingService_LoadOpenOperationTips) == 0x000001, "Wrong size on SettingService_LoadOpenOperationTips");
static_assert(offsetof(SettingService_LoadOpenOperationTips, ReturnValue) == 0x000000, "Member 'SettingService_LoadOpenOperationTips::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadPrivateChat
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadPrivateChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadPrivateChat) == 0x000001, "Wrong alignment on SettingService_LoadPrivateChat");
static_assert(sizeof(SettingService_LoadPrivateChat) == 0x000001, "Wrong size on SettingService_LoadPrivateChat");
static_assert(offsetof(SettingService_LoadPrivateChat, ReturnValue) == 0x000000, "Member 'SettingService_LoadPrivateChat::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadPrivateRoomInvitePermission
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadPrivateRoomInvitePermission final
{
public:
	ESocialPermission                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadPrivateRoomInvitePermission) == 0x000001, "Wrong alignment on SettingService_LoadPrivateRoomInvitePermission");
static_assert(sizeof(SettingService_LoadPrivateRoomInvitePermission) == 0x000001, "Wrong size on SettingService_LoadPrivateRoomInvitePermission");
static_assert(offsetof(SettingService_LoadPrivateRoomInvitePermission, ReturnValue) == 0x000000, "Member 'SettingService_LoadPrivateRoomInvitePermission::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadProcessingTaskIds
// 0x0020 (0x0020 - 0x0000)
struct SettingService_LoadProcessingTaskIds final
{
public:
	class FString                                 LocalUserKey;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadProcessingTaskIds) == 0x000008, "Wrong alignment on SettingService_LoadProcessingTaskIds");
static_assert(sizeof(SettingService_LoadProcessingTaskIds) == 0x000020, "Wrong size on SettingService_LoadProcessingTaskIds");
static_assert(offsetof(SettingService_LoadProcessingTaskIds, LocalUserKey) == 0x000000, "Member 'SettingService_LoadProcessingTaskIds::LocalUserKey' has a wrong offset!");
static_assert(offsetof(SettingService_LoadProcessingTaskIds, ReturnValue) == 0x000010, "Member 'SettingService_LoadProcessingTaskIds::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadSavedTalents
// 0x0010 (0x0010 - 0x0000)
struct SettingService_LoadSavedTalents final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadSavedTalents) == 0x000008, "Wrong alignment on SettingService_LoadSavedTalents");
static_assert(sizeof(SettingService_LoadSavedTalents) == 0x000010, "Wrong size on SettingService_LoadSavedTalents");
static_assert(offsetof(SettingService_LoadSavedTalents, ReturnValue) == 0x000000, "Member 'SettingService_LoadSavedTalents::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadSaveKilledScreenshot
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadSaveKilledScreenshot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadSaveKilledScreenshot) == 0x000001, "Wrong alignment on SettingService_LoadSaveKilledScreenshot");
static_assert(sizeof(SettingService_LoadSaveKilledScreenshot) == 0x000001, "Wrong size on SettingService_LoadSaveKilledScreenshot");
static_assert(offsetof(SettingService_LoadSaveKilledScreenshot, ReturnValue) == 0x000000, "Member 'SettingService_LoadSaveKilledScreenshot::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadShowWeaponOperatinsTipsFlag
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadShowWeaponOperatinsTipsFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadShowWeaponOperatinsTipsFlag) == 0x000001, "Wrong alignment on SettingService_LoadShowWeaponOperatinsTipsFlag");
static_assert(sizeof(SettingService_LoadShowWeaponOperatinsTipsFlag) == 0x000001, "Wrong size on SettingService_LoadShowWeaponOperatinsTipsFlag");
static_assert(offsetof(SettingService_LoadShowWeaponOperatinsTipsFlag, ReturnValue) == 0x000000, "Member 'SettingService_LoadShowWeaponOperatinsTipsFlag::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadSquatDownMethodMethod
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadSquatDownMethodMethod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadSquatDownMethodMethod) == 0x000001, "Wrong alignment on SettingService_LoadSquatDownMethodMethod");
static_assert(sizeof(SettingService_LoadSquatDownMethodMethod) == 0x000001, "Wrong size on SettingService_LoadSquatDownMethodMethod");
static_assert(offsetof(SettingService_LoadSquatDownMethodMethod, ReturnValue) == 0x000000, "Member 'SettingService_LoadSquatDownMethodMethod::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.LoadTermAttribute
// 0x0001 (0x0001 - 0x0000)
struct SettingService_LoadTermAttribute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_LoadTermAttribute) == 0x000001, "Wrong alignment on SettingService_LoadTermAttribute");
static_assert(sizeof(SettingService_LoadTermAttribute) == 0x000001, "Wrong size on SettingService_LoadTermAttribute");
static_assert(offsetof(SettingService_LoadTermAttribute, ReturnValue) == 0x000000, "Member 'SettingService_LoadTermAttribute::ReturnValue' has a wrong offset!");

// Function TGFGame.SettingService.SaveCheckedActivities
// 0x0010 (0x0010 - 0x0000)
struct SettingService_SaveCheckedActivities final
{
public:
	TArray<int32>                                 Activities;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SaveCheckedActivities) == 0x000008, "Wrong alignment on SettingService_SaveCheckedActivities");
static_assert(sizeof(SettingService_SaveCheckedActivities) == 0x000010, "Wrong size on SettingService_SaveCheckedActivities");
static_assert(offsetof(SettingService_SaveCheckedActivities, Activities) == 0x000000, "Member 'SettingService_SaveCheckedActivities::Activities' has a wrong offset!");

// Function TGFGame.SettingService.SaveDailyLoginCheck
// 0x0004 (0x0004 - 0x0000)
struct SettingService_SaveDailyLoginCheck final
{
public:
	int32                                         Timme;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SaveDailyLoginCheck) == 0x000004, "Wrong alignment on SettingService_SaveDailyLoginCheck");
static_assert(sizeof(SettingService_SaveDailyLoginCheck) == 0x000004, "Wrong size on SettingService_SaveDailyLoginCheck");
static_assert(offsetof(SettingService_SaveDailyLoginCheck, Timme) == 0x000000, "Member 'SettingService_SaveDailyLoginCheck::Timme' has a wrong offset!");

// Function TGFGame.SettingService.SaveInventoryAutoQuality
// 0x0010 (0x0010 - 0x0000)
struct SettingService_SaveInventoryAutoQuality final
{
public:
	TArray<ETgfEquipQuality>                      Rarity;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SaveInventoryAutoQuality) == 0x000008, "Wrong alignment on SettingService_SaveInventoryAutoQuality");
static_assert(sizeof(SettingService_SaveInventoryAutoQuality) == 0x000010, "Wrong size on SettingService_SaveInventoryAutoQuality");
static_assert(offsetof(SettingService_SaveInventoryAutoQuality, Rarity) == 0x000000, "Member 'SettingService_SaveInventoryAutoQuality::Rarity' has a wrong offset!");

// Function TGFGame.SettingService.SaveInventoryOpened
// 0x0010 (0x0010 - 0x0000)
struct SettingService_SaveInventoryOpened final
{
public:
	TArray<int64>                                 Guids;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SaveInventoryOpened) == 0x000008, "Wrong alignment on SettingService_SaveInventoryOpened");
static_assert(sizeof(SettingService_SaveInventoryOpened) == 0x000010, "Wrong size on SettingService_SaveInventoryOpened");
static_assert(offsetof(SettingService_SaveInventoryOpened, Guids) == 0x000000, "Member 'SettingService_SaveInventoryOpened::Guids' has a wrong offset!");

// Function TGFGame.SettingService.SaveInventoryTalentTips
// 0x0018 (0x0018 - 0x0000)
struct SettingService_SaveInventoryTalentTips final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 Guids;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SaveInventoryTalentTips) == 0x000008, "Wrong alignment on SettingService_SaveInventoryTalentTips");
static_assert(sizeof(SettingService_SaveInventoryTalentTips) == 0x000018, "Wrong size on SettingService_SaveInventoryTalentTips");
static_assert(offsetof(SettingService_SaveInventoryTalentTips, Key) == 0x000000, "Member 'SettingService_SaveInventoryTalentTips::Key' has a wrong offset!");
static_assert(offsetof(SettingService_SaveInventoryTalentTips, Guids) == 0x000008, "Member 'SettingService_SaveInventoryTalentTips::Guids' has a wrong offset!");

// Function TGFGame.SettingService.SaveKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct SettingService_SaveKeyBinding final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SaveKeyBinding) == 0x000008, "Wrong alignment on SettingService_SaveKeyBinding");
static_assert(sizeof(SettingService_SaveKeyBinding) == 0x000020, "Wrong size on SettingService_SaveKeyBinding");
static_assert(offsetof(SettingService_SaveKeyBinding, ActionName) == 0x000000, "Member 'SettingService_SaveKeyBinding::ActionName' has a wrong offset!");
static_assert(offsetof(SettingService_SaveKeyBinding, Key) == 0x000008, "Member 'SettingService_SaveKeyBinding::Key' has a wrong offset!");

// Function TGFGame.SettingService.SaveMithrilInventoryOpened
// 0x0010 (0x0010 - 0x0000)
struct SettingService_SaveMithrilInventoryOpened final
{
public:
	TArray<int64>                                 Guids;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SaveMithrilInventoryOpened) == 0x000008, "Wrong alignment on SettingService_SaveMithrilInventoryOpened");
static_assert(sizeof(SettingService_SaveMithrilInventoryOpened) == 0x000010, "Wrong size on SettingService_SaveMithrilInventoryOpened");
static_assert(offsetof(SettingService_SaveMithrilInventoryOpened, Guids) == 0x000000, "Member 'SettingService_SaveMithrilInventoryOpened::Guids' has a wrong offset!");

// Function TGFGame.SettingService.SaveMoonInterationTime
// 0x0004 (0x0004 - 0x0000)
struct SettingService_SaveMoonInterationTime final
{
public:
	int32                                         Timme;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SaveMoonInterationTime) == 0x000004, "Wrong alignment on SettingService_SaveMoonInterationTime");
static_assert(sizeof(SettingService_SaveMoonInterationTime) == 0x000004, "Wrong size on SettingService_SaveMoonInterationTime");
static_assert(offsetof(SettingService_SaveMoonInterationTime, Timme) == 0x000000, "Member 'SettingService_SaveMoonInterationTime::Timme' has a wrong offset!");

// Function TGFGame.SettingService.SavePrivateRoomInvitePermission
// 0x0001 (0x0001 - 0x0000)
struct SettingService_SavePrivateRoomInvitePermission final
{
public:
	ESocialPermission                             Permission;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SavePrivateRoomInvitePermission) == 0x000001, "Wrong alignment on SettingService_SavePrivateRoomInvitePermission");
static_assert(sizeof(SettingService_SavePrivateRoomInvitePermission) == 0x000001, "Wrong size on SettingService_SavePrivateRoomInvitePermission");
static_assert(offsetof(SettingService_SavePrivateRoomInvitePermission, Permission) == 0x000000, "Member 'SettingService_SavePrivateRoomInvitePermission::Permission' has a wrong offset!");

// Function TGFGame.SettingService.SaveProcessingTaskIds
// 0x0020 (0x0020 - 0x0000)
struct SettingService_SaveProcessingTaskIds final
{
public:
	class FString                                 LocalUserKey;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ProcessingTaskIds;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SaveProcessingTaskIds) == 0x000008, "Wrong alignment on SettingService_SaveProcessingTaskIds");
static_assert(sizeof(SettingService_SaveProcessingTaskIds) == 0x000020, "Wrong size on SettingService_SaveProcessingTaskIds");
static_assert(offsetof(SettingService_SaveProcessingTaskIds, LocalUserKey) == 0x000000, "Member 'SettingService_SaveProcessingTaskIds::LocalUserKey' has a wrong offset!");
static_assert(offsetof(SettingService_SaveProcessingTaskIds, ProcessingTaskIds) == 0x000010, "Member 'SettingService_SaveProcessingTaskIds::ProcessingTaskIds' has a wrong offset!");

// Function TGFGame.SettingService.SaveShowWeaponOperatinsTipsFlag
// 0x0001 (0x0001 - 0x0000)
struct SettingService_SaveShowWeaponOperatinsTipsFlag final
{
public:
	bool                                          bIsShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SaveShowWeaponOperatinsTipsFlag) == 0x000001, "Wrong alignment on SettingService_SaveShowWeaponOperatinsTipsFlag");
static_assert(sizeof(SettingService_SaveShowWeaponOperatinsTipsFlag) == 0x000001, "Wrong size on SettingService_SaveShowWeaponOperatinsTipsFlag");
static_assert(offsetof(SettingService_SaveShowWeaponOperatinsTipsFlag, bIsShow) == 0x000000, "Member 'SettingService_SaveShowWeaponOperatinsTipsFlag::bIsShow' has a wrong offset!");

// Function TGFGame.SettingService.SaveTalents
// 0x0010 (0x0010 - 0x0000)
struct SettingService_SaveTalents final
{
public:
	TArray<int32>                                 Talents;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SaveTalents) == 0x000008, "Wrong alignment on SettingService_SaveTalents");
static_assert(sizeof(SettingService_SaveTalents) == 0x000010, "Wrong size on SettingService_SaveTalents");
static_assert(offsetof(SettingService_SaveTalents, Talents) == 0x000000, "Member 'SettingService_SaveTalents::Talents' has a wrong offset!");

// Function TGFGame.SettingService.SetIsLiveMode
// 0x0001 (0x0001 - 0x0000)
struct SettingService_SetIsLiveMode final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingService_SetIsLiveMode) == 0x000001, "Wrong alignment on SettingService_SetIsLiveMode");
static_assert(sizeof(SettingService_SetIsLiveMode) == 0x000001, "Wrong size on SettingService_SetIsLiveMode");
static_assert(offsetof(SettingService_SetIsLiveMode, NewValue) == 0x000000, "Member 'SettingService_SetIsLiveMode::NewValue' has a wrong offset!");

// Function TGFGame.StringFunctionLibrary.ConvertDateTimeToLocal
// 0x0028 (0x0028 - 0x0000)
struct StringFunctionLibrary_ConvertDateTimeToLocal final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringResult                          ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StringFunctionLibrary_ConvertDateTimeToLocal) == 0x000008, "Wrong alignment on StringFunctionLibrary_ConvertDateTimeToLocal");
static_assert(sizeof(StringFunctionLibrary_ConvertDateTimeToLocal) == 0x000028, "Wrong size on StringFunctionLibrary_ConvertDateTimeToLocal");
static_assert(offsetof(StringFunctionLibrary_ConvertDateTimeToLocal, InString) == 0x000000, "Member 'StringFunctionLibrary_ConvertDateTimeToLocal::InString' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_ConvertDateTimeToLocal, ReturnValue) == 0x000010, "Member 'StringFunctionLibrary_ConvertDateTimeToLocal::ReturnValue' has a wrong offset!");

// Function TGFGame.StringFunctionLibrary.FilterChineseCharacter
// 0x0028 (0x0028 - 0x0000)
struct StringFunctionLibrary_FilterChineseCharacter final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringResult                          ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StringFunctionLibrary_FilterChineseCharacter) == 0x000008, "Wrong alignment on StringFunctionLibrary_FilterChineseCharacter");
static_assert(sizeof(StringFunctionLibrary_FilterChineseCharacter) == 0x000028, "Wrong size on StringFunctionLibrary_FilterChineseCharacter");
static_assert(offsetof(StringFunctionLibrary_FilterChineseCharacter, InString) == 0x000000, "Member 'StringFunctionLibrary_FilterChineseCharacter::InString' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_FilterChineseCharacter, ReturnValue) == 0x000010, "Member 'StringFunctionLibrary_FilterChineseCharacter::ReturnValue' has a wrong offset!");

// Function TGFGame.StringFunctionLibrary.LeftLimitStringLength
// 0x0030 (0x0030 - 0x0000)
struct StringFunctionLibrary_LeftLimitStringLength final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStringResult                          ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StringFunctionLibrary_LeftLimitStringLength) == 0x000008, "Wrong alignment on StringFunctionLibrary_LeftLimitStringLength");
static_assert(sizeof(StringFunctionLibrary_LeftLimitStringLength) == 0x000030, "Wrong size on StringFunctionLibrary_LeftLimitStringLength");
static_assert(offsetof(StringFunctionLibrary_LeftLimitStringLength, InString) == 0x000000, "Member 'StringFunctionLibrary_LeftLimitStringLength::InString' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_LeftLimitStringLength, Length) == 0x000010, "Member 'StringFunctionLibrary_LeftLimitStringLength::Length' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_LeftLimitStringLength, ReturnValue) == 0x000018, "Member 'StringFunctionLibrary_LeftLimitStringLength::ReturnValue' has a wrong offset!");

// Function TGFGame.StringFunctionLibrary.MatchDefaultRoleName
// 0x0030 (0x0030 - 0x0000)
struct StringFunctionLibrary_MatchDefaultRoleName final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutName;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OutIndex;                                          // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StringFunctionLibrary_MatchDefaultRoleName) == 0x000008, "Wrong alignment on StringFunctionLibrary_MatchDefaultRoleName");
static_assert(sizeof(StringFunctionLibrary_MatchDefaultRoleName) == 0x000030, "Wrong size on StringFunctionLibrary_MatchDefaultRoleName");
static_assert(offsetof(StringFunctionLibrary_MatchDefaultRoleName, InString) == 0x000000, "Member 'StringFunctionLibrary_MatchDefaultRoleName::InString' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_MatchDefaultRoleName, OutName) == 0x000010, "Member 'StringFunctionLibrary_MatchDefaultRoleName::OutName' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_MatchDefaultRoleName, OutIndex) == 0x000020, "Member 'StringFunctionLibrary_MatchDefaultRoleName::OutIndex' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_MatchDefaultRoleName, ReturnValue) == 0x000028, "Member 'StringFunctionLibrary_MatchDefaultRoleName::ReturnValue' has a wrong offset!");

// Function TGFGame.StringFunctionLibrary.ReserveEnglishAndNumberCharacter
// 0x0028 (0x0028 - 0x0000)
struct StringFunctionLibrary_ReserveEnglishAndNumberCharacter final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringResult                          ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StringFunctionLibrary_ReserveEnglishAndNumberCharacter) == 0x000008, "Wrong alignment on StringFunctionLibrary_ReserveEnglishAndNumberCharacter");
static_assert(sizeof(StringFunctionLibrary_ReserveEnglishAndNumberCharacter) == 0x000028, "Wrong size on StringFunctionLibrary_ReserveEnglishAndNumberCharacter");
static_assert(offsetof(StringFunctionLibrary_ReserveEnglishAndNumberCharacter, InString) == 0x000000, "Member 'StringFunctionLibrary_ReserveEnglishAndNumberCharacter::InString' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_ReserveEnglishAndNumberCharacter, ReturnValue) == 0x000010, "Member 'StringFunctionLibrary_ReserveEnglishAndNumberCharacter::ReturnValue' has a wrong offset!");

// Function TGFGame.StringFunctionLibrary.ReserveEnglishCharacter
// 0x0028 (0x0028 - 0x0000)
struct StringFunctionLibrary_ReserveEnglishCharacter final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringResult                          ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StringFunctionLibrary_ReserveEnglishCharacter) == 0x000008, "Wrong alignment on StringFunctionLibrary_ReserveEnglishCharacter");
static_assert(sizeof(StringFunctionLibrary_ReserveEnglishCharacter) == 0x000028, "Wrong size on StringFunctionLibrary_ReserveEnglishCharacter");
static_assert(offsetof(StringFunctionLibrary_ReserveEnglishCharacter, InString) == 0x000000, "Member 'StringFunctionLibrary_ReserveEnglishCharacter::InString' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_ReserveEnglishCharacter, ReturnValue) == 0x000010, "Member 'StringFunctionLibrary_ReserveEnglishCharacter::ReturnValue' has a wrong offset!");

// Function TGFGame.StringFunctionLibrary.ReserveEnglishSymbolAndNumberCharacter
// 0x0028 (0x0028 - 0x0000)
struct StringFunctionLibrary_ReserveEnglishSymbolAndNumberCharacter final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringResult                          ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StringFunctionLibrary_ReserveEnglishSymbolAndNumberCharacter) == 0x000008, "Wrong alignment on StringFunctionLibrary_ReserveEnglishSymbolAndNumberCharacter");
static_assert(sizeof(StringFunctionLibrary_ReserveEnglishSymbolAndNumberCharacter) == 0x000028, "Wrong size on StringFunctionLibrary_ReserveEnglishSymbolAndNumberCharacter");
static_assert(offsetof(StringFunctionLibrary_ReserveEnglishSymbolAndNumberCharacter, InString) == 0x000000, "Member 'StringFunctionLibrary_ReserveEnglishSymbolAndNumberCharacter::InString' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_ReserveEnglishSymbolAndNumberCharacter, ReturnValue) == 0x000010, "Member 'StringFunctionLibrary_ReserveEnglishSymbolAndNumberCharacter::ReturnValue' has a wrong offset!");

// Function TGFGame.StringFunctionLibrary.ReserveNumberCharacter
// 0x0028 (0x0028 - 0x0000)
struct StringFunctionLibrary_ReserveNumberCharacter final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringResult                          ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StringFunctionLibrary_ReserveNumberCharacter) == 0x000008, "Wrong alignment on StringFunctionLibrary_ReserveNumberCharacter");
static_assert(sizeof(StringFunctionLibrary_ReserveNumberCharacter) == 0x000028, "Wrong size on StringFunctionLibrary_ReserveNumberCharacter");
static_assert(offsetof(StringFunctionLibrary_ReserveNumberCharacter, InString) == 0x000000, "Member 'StringFunctionLibrary_ReserveNumberCharacter::InString' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_ReserveNumberCharacter, ReturnValue) == 0x000010, "Member 'StringFunctionLibrary_ReserveNumberCharacter::ReturnValue' has a wrong offset!");

// Function TGFGame.StringFunctionLibrary.ReserveRoomNameAndPasswordCharacter
// 0x0028 (0x0028 - 0x0000)
struct StringFunctionLibrary_ReserveRoomNameAndPasswordCharacter final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringResult                          ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StringFunctionLibrary_ReserveRoomNameAndPasswordCharacter) == 0x000008, "Wrong alignment on StringFunctionLibrary_ReserveRoomNameAndPasswordCharacter");
static_assert(sizeof(StringFunctionLibrary_ReserveRoomNameAndPasswordCharacter) == 0x000028, "Wrong size on StringFunctionLibrary_ReserveRoomNameAndPasswordCharacter");
static_assert(offsetof(StringFunctionLibrary_ReserveRoomNameAndPasswordCharacter, InString) == 0x000000, "Member 'StringFunctionLibrary_ReserveRoomNameAndPasswordCharacter::InString' has a wrong offset!");
static_assert(offsetof(StringFunctionLibrary_ReserveRoomNameAndPasswordCharacter, ReturnValue) == 0x000010, "Member 'StringFunctionLibrary_ReserveRoomNameAndPasswordCharacter::ReturnValue' has a wrong offset!");

// Function TGFGame.MatchService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct MatchService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_OnGameLogout) == 0x000008, "Wrong alignment on MatchService_OnGameLogout");
static_assert(sizeof(MatchService_OnGameLogout) == 0x000008, "Wrong size on MatchService_OnGameLogout");
static_assert(offsetof(MatchService_OnGameLogout, Args) == 0x000000, "Member 'MatchService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.MatchService.OnNetworkManagerEnterState
// 0x0008 (0x0008 - 0x0000)
struct MatchService_OnNetworkManagerEnterState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_OnNetworkManagerEnterState) == 0x000008, "Wrong alignment on MatchService_OnNetworkManagerEnterState");
static_assert(sizeof(MatchService_OnNetworkManagerEnterState) == 0x000008, "Wrong size on MatchService_OnNetworkManagerEnterState");
static_assert(offsetof(MatchService_OnNetworkManagerEnterState, Args) == 0x000000, "Member 'MatchService_OnNetworkManagerEnterState::Args' has a wrong offset!");

// Function TGFGame.MatchService.OnNetworkManagerExitState
// 0x0008 (0x0008 - 0x0000)
struct MatchService_OnNetworkManagerExitState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_OnNetworkManagerExitState) == 0x000008, "Wrong alignment on MatchService_OnNetworkManagerExitState");
static_assert(sizeof(MatchService_OnNetworkManagerExitState) == 0x000008, "Wrong size on MatchService_OnNetworkManagerExitState");
static_assert(offsetof(MatchService_OnNetworkManagerExitState, Args) == 0x000000, "Member 'MatchService_OnNetworkManagerExitState::Args' has a wrong offset!");

// Function TGFGame.MatchService.OpenMatchToast
// 0x0001 (0x0001 - 0x0000)
struct MatchService_OpenMatchToast final
{
public:
	EMatchState                                   MatchState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_OpenMatchToast) == 0x000001, "Wrong alignment on MatchService_OpenMatchToast");
static_assert(sizeof(MatchService_OpenMatchToast) == 0x000001, "Wrong size on MatchService_OpenMatchToast");
static_assert(offsetof(MatchService_OpenMatchToast, MatchState) == 0x000000, "Member 'MatchService_OpenMatchToast::MatchState' has a wrong offset!");

// Function TGFGame.MatchService.SelectChallengerType
// 0x0001 (0x0001 - 0x0000)
struct MatchService_SelectChallengerType final
{
public:
	ETGFProtoTgfEnChallengerModelType             ChallengerType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_SelectChallengerType) == 0x000001, "Wrong alignment on MatchService_SelectChallengerType");
static_assert(sizeof(MatchService_SelectChallengerType) == 0x000001, "Wrong size on MatchService_SelectChallengerType");
static_assert(offsetof(MatchService_SelectChallengerType, ChallengerType) == 0x000000, "Member 'MatchService_SelectChallengerType::ChallengerType' has a wrong offset!");

// Function TGFGame.MatchService.SelectMapLevel
// 0x0018 (0x0018 - 0x0000)
struct MatchService_SelectMapLevel final
{
public:
	int32                                         LevelId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelType;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_SelectMapLevel) == 0x000008, "Wrong alignment on MatchService_SelectMapLevel");
static_assert(sizeof(MatchService_SelectMapLevel) == 0x000018, "Wrong size on MatchService_SelectMapLevel");
static_assert(offsetof(MatchService_SelectMapLevel, LevelId) == 0x000000, "Member 'MatchService_SelectMapLevel::LevelId' has a wrong offset!");
static_assert(offsetof(MatchService_SelectMapLevel, LevelType) == 0x000004, "Member 'MatchService_SelectMapLevel::LevelType' has a wrong offset!");
static_assert(offsetof(MatchService_SelectMapLevel, Region) == 0x000008, "Member 'MatchService_SelectMapLevel::Region' has a wrong offset!");

// Function TGFGame.MatchService.SetShowBattleResult
// 0x0001 (0x0001 - 0x0000)
struct MatchService_SetShowBattleResult final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_SetShowBattleResult) == 0x000001, "Wrong alignment on MatchService_SetShowBattleResult");
static_assert(sizeof(MatchService_SetShowBattleResult) == 0x000001, "Wrong size on MatchService_SetShowBattleResult");
static_assert(offsetof(MatchService_SetShowBattleResult, IsShow) == 0x000000, "Member 'MatchService_SetShowBattleResult::IsShow' has a wrong offset!");

// Function TGFGame.MatchService.SetShowBattleReturn
// 0x0001 (0x0001 - 0x0000)
struct MatchService_SetShowBattleReturn final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_SetShowBattleReturn) == 0x000001, "Wrong alignment on MatchService_SetShowBattleReturn");
static_assert(sizeof(MatchService_SetShowBattleReturn) == 0x000001, "Wrong size on MatchService_SetShowBattleReturn");
static_assert(offsetof(MatchService_SetShowBattleReturn, IsShow) == 0x000000, "Member 'MatchService_SetShowBattleReturn::IsShow' has a wrong offset!");

// Function TGFGame.MatchService.StartMatch
// 0x0018 (0x0018 - 0x0000)
struct MatchService_StartMatch final
{
public:
	int32                                         LevelType;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelId;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_StartMatch) == 0x000008, "Wrong alignment on MatchService_StartMatch");
static_assert(sizeof(MatchService_StartMatch) == 0x000018, "Wrong size on MatchService_StartMatch");
static_assert(offsetof(MatchService_StartMatch, LevelType) == 0x000000, "Member 'MatchService_StartMatch::LevelType' has a wrong offset!");
static_assert(offsetof(MatchService_StartMatch, LevelId) == 0x000004, "Member 'MatchService_StartMatch::LevelId' has a wrong offset!");
static_assert(offsetof(MatchService_StartMatch, Region) == 0x000008, "Member 'MatchService_StartMatch::Region' has a wrong offset!");

// Function TGFGame.MatchService.GetResultData
// 0x0008 (0x0008 - 0x0000)
struct MatchService_GetResultData final
{
public:
	class UTGFProtoTgfSCBattleSettleSync*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_GetResultData) == 0x000008, "Wrong alignment on MatchService_GetResultData");
static_assert(sizeof(MatchService_GetResultData) == 0x000008, "Wrong size on MatchService_GetResultData");
static_assert(offsetof(MatchService_GetResultData, ReturnValue) == 0x000000, "Member 'MatchService_GetResultData::ReturnValue' has a wrong offset!");

// Function TGFGame.MatchService.GetSelectedChallengerType
// 0x0001 (0x0001 - 0x0000)
struct MatchService_GetSelectedChallengerType final
{
public:
	ETGFProtoTgfEnChallengerModelType             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_GetSelectedChallengerType) == 0x000001, "Wrong alignment on MatchService_GetSelectedChallengerType");
static_assert(sizeof(MatchService_GetSelectedChallengerType) == 0x000001, "Wrong size on MatchService_GetSelectedChallengerType");
static_assert(offsetof(MatchService_GetSelectedChallengerType, ReturnValue) == 0x000000, "Member 'MatchService_GetSelectedChallengerType::ReturnValue' has a wrong offset!");

// Function TGFGame.MatchService.GetSelectedLevelInfo
// 0x0020 (0x0020 - 0x0000)
struct MatchService_GetSelectedLevelInfo final
{
public:
	struct FMatchLevelInfo                        ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_GetSelectedLevelInfo) == 0x000008, "Wrong alignment on MatchService_GetSelectedLevelInfo");
static_assert(sizeof(MatchService_GetSelectedLevelInfo) == 0x000020, "Wrong size on MatchService_GetSelectedLevelInfo");
static_assert(offsetof(MatchService_GetSelectedLevelInfo, ReturnValue) == 0x000000, "Member 'MatchService_GetSelectedLevelInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.MatchService.IsMatching
// 0x0001 (0x0001 - 0x0000)
struct MatchService_IsMatching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_IsMatching) == 0x000001, "Wrong alignment on MatchService_IsMatching");
static_assert(sizeof(MatchService_IsMatching) == 0x000001, "Wrong size on MatchService_IsMatching");
static_assert(offsetof(MatchService_IsMatching, ReturnValue) == 0x000000, "Member 'MatchService_IsMatching::ReturnValue' has a wrong offset!");

// Function TGFGame.MatchService.IsTicketsEnough
// 0x0001 (0x0001 - 0x0000)
struct MatchService_IsTicketsEnough final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_IsTicketsEnough) == 0x000001, "Wrong alignment on MatchService_IsTicketsEnough");
static_assert(sizeof(MatchService_IsTicketsEnough) == 0x000001, "Wrong size on MatchService_IsTicketsEnough");
static_assert(offsetof(MatchService_IsTicketsEnough, ReturnValue) == 0x000000, "Member 'MatchService_IsTicketsEnough::ReturnValue' has a wrong offset!");

// Function TGFGame.MatchService.ShouldShowBattleResult
// 0x0001 (0x0001 - 0x0000)
struct MatchService_ShouldShowBattleResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_ShouldShowBattleResult) == 0x000001, "Wrong alignment on MatchService_ShouldShowBattleResult");
static_assert(sizeof(MatchService_ShouldShowBattleResult) == 0x000001, "Wrong size on MatchService_ShouldShowBattleResult");
static_assert(offsetof(MatchService_ShouldShowBattleResult, ReturnValue) == 0x000000, "Member 'MatchService_ShouldShowBattleResult::ReturnValue' has a wrong offset!");

// Function TGFGame.MatchService.ShouldShowBattleReturn
// 0x0001 (0x0001 - 0x0000)
struct MatchService_ShouldShowBattleReturn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchService_ShouldShowBattleReturn) == 0x000001, "Wrong alignment on MatchService_ShouldShowBattleReturn");
static_assert(sizeof(MatchService_ShouldShowBattleReturn) == 0x000001, "Wrong size on MatchService_ShouldShowBattleReturn");
static_assert(offsetof(MatchService_ShouldShowBattleReturn, ReturnValue) == 0x000000, "Member 'MatchService_ShouldShowBattleReturn::ReturnValue' has a wrong offset!");

// Function TGFGame.MatchToastArgs.Create
// 0x0010 (0x0010 - 0x0000)
struct MatchToastArgs_Create final
{
public:
	EMatchState                                   InMatchState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchToastArgs*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchToastArgs_Create) == 0x000008, "Wrong alignment on MatchToastArgs_Create");
static_assert(sizeof(MatchToastArgs_Create) == 0x000010, "Wrong size on MatchToastArgs_Create");
static_assert(offsetof(MatchToastArgs_Create, InMatchState) == 0x000000, "Member 'MatchToastArgs_Create::InMatchState' has a wrong offset!");
static_assert(offsetof(MatchToastArgs_Create, ReturnValue) == 0x000008, "Member 'MatchToastArgs_Create::ReturnValue' has a wrong offset!");

// Function TGFGame.MatchWindowArgs.Create
// 0x0028 (0x0028 - 0x0000)
struct MatchWindowArgs_Create final
{
public:
	int32                                         Param_LevelId;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_LevelType;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Param_Region;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_SendSearchRequest;                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchWindowArgs*                       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchWindowArgs_Create) == 0x000008, "Wrong alignment on MatchWindowArgs_Create");
static_assert(sizeof(MatchWindowArgs_Create) == 0x000028, "Wrong size on MatchWindowArgs_Create");
static_assert(offsetof(MatchWindowArgs_Create, Param_LevelId) == 0x000000, "Member 'MatchWindowArgs_Create::Param_LevelId' has a wrong offset!");
static_assert(offsetof(MatchWindowArgs_Create, Param_LevelType) == 0x000004, "Member 'MatchWindowArgs_Create::Param_LevelType' has a wrong offset!");
static_assert(offsetof(MatchWindowArgs_Create, Param_Region) == 0x000008, "Member 'MatchWindowArgs_Create::Param_Region' has a wrong offset!");
static_assert(offsetof(MatchWindowArgs_Create, Param_SendSearchRequest) == 0x000018, "Member 'MatchWindowArgs_Create::Param_SendSearchRequest' has a wrong offset!");
static_assert(offsetof(MatchWindowArgs_Create, ReturnValue) == 0x000020, "Member 'MatchWindowArgs_Create::ReturnValue' has a wrong offset!");

// Function TGFGame.MidasService.GetIsLimitInterval
// 0x0001 (0x0001 - 0x0000)
struct MidasService_GetIsLimitInterval final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidasService_GetIsLimitInterval) == 0x000001, "Wrong alignment on MidasService_GetIsLimitInterval");
static_assert(sizeof(MidasService_GetIsLimitInterval) == 0x000001, "Wrong size on MidasService_GetIsLimitInterval");
static_assert(offsetof(MidasService_GetIsLimitInterval, ReturnValue) == 0x000000, "Member 'MidasService_GetIsLimitInterval::ReturnValue' has a wrong offset!");

// Function TGFGame.MidasService.GetIsPaying
// 0x0001 (0x0001 - 0x0000)
struct MidasService_GetIsPaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidasService_GetIsPaying) == 0x000001, "Wrong alignment on MidasService_GetIsPaying");
static_assert(sizeof(MidasService_GetIsPaying) == 0x000001, "Wrong size on MidasService_GetIsPaying");
static_assert(offsetof(MidasService_GetIsPaying, ReturnValue) == 0x000000, "Member 'MidasService_GetIsPaying::ReturnValue' has a wrong offset!");

// Function TGFGame.MidasService.GetProductInfo
// 0x0010 (0x0010 - 0x0000)
struct MidasService_GetProductInfo final
{
public:
	TArray<class FString>                         SkuIdList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidasService_GetProductInfo) == 0x000008, "Wrong alignment on MidasService_GetProductInfo");
static_assert(sizeof(MidasService_GetProductInfo) == 0x000010, "Wrong size on MidasService_GetProductInfo");
static_assert(offsetof(MidasService_GetProductInfo, SkuIdList) == 0x000000, "Member 'MidasService_GetProductInfo::SkuIdList' has a wrong offset!");

// Function TGFGame.MidasService.GetProductInfoBySkuId
// 0x00A0 (0x00A0 - 0x0000)
struct MidasService_GetProductInfoBySkuId final
{
public:
	class FString                                 SkuId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCtiProductInfo                        OutProductInfo;                                    // 0x0010(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidasService_GetProductInfoBySkuId) == 0x000008, "Wrong alignment on MidasService_GetProductInfoBySkuId");
static_assert(sizeof(MidasService_GetProductInfoBySkuId) == 0x0000A0, "Wrong size on MidasService_GetProductInfoBySkuId");
static_assert(offsetof(MidasService_GetProductInfoBySkuId, SkuId) == 0x000000, "Member 'MidasService_GetProductInfoBySkuId::SkuId' has a wrong offset!");
static_assert(offsetof(MidasService_GetProductInfoBySkuId, OutProductInfo) == 0x000010, "Member 'MidasService_GetProductInfoBySkuId::OutProductInfo' has a wrong offset!");
static_assert(offsetof(MidasService_GetProductInfoBySkuId, ReturnValue) == 0x000098, "Member 'MidasService_GetProductInfoBySkuId::ReturnValue' has a wrong offset!");

// Function TGFGame.MidasService.GetProductInnerCode
// 0x0010 (0x0010 - 0x0000)
struct MidasService_GetProductInnerCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidasService_GetProductInnerCode) == 0x000008, "Wrong alignment on MidasService_GetProductInnerCode");
static_assert(sizeof(MidasService_GetProductInnerCode) == 0x000010, "Wrong size on MidasService_GetProductInnerCode");
static_assert(offsetof(MidasService_GetProductInnerCode, ReturnValue) == 0x000000, "Member 'MidasService_GetProductInnerCode::ReturnValue' has a wrong offset!");

// Function TGFGame.MidasService.GetProductRetCode
// 0x0004 (0x0004 - 0x0000)
struct MidasService_GetProductRetCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidasService_GetProductRetCode) == 0x000004, "Wrong alignment on MidasService_GetProductRetCode");
static_assert(sizeof(MidasService_GetProductRetCode) == 0x000004, "Wrong size on MidasService_GetProductRetCode");
static_assert(offsetof(MidasService_GetProductRetCode, ReturnValue) == 0x000000, "Member 'MidasService_GetProductRetCode::ReturnValue' has a wrong offset!");

// Function TGFGame.MidasService.Init
// 0x0020 (0x0020 - 0x0000)
struct MidasService_Init final
{
public:
	class FString                                 OpenID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidasService_Init) == 0x000008, "Wrong alignment on MidasService_Init");
static_assert(sizeof(MidasService_Init) == 0x000020, "Wrong size on MidasService_Init");
static_assert(offsetof(MidasService_Init, OpenID) == 0x000000, "Member 'MidasService_Init::OpenID' has a wrong offset!");
static_assert(offsetof(MidasService_Init, ServerId) == 0x000010, "Member 'MidasService_Init::ServerId' has a wrong offset!");

// Function TGFGame.MidasService.Pay
// 0x0010 (0x0010 - 0x0000)
struct MidasService_Pay final
{
public:
	class FString                                 PayInfo;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidasService_Pay) == 0x000008, "Wrong alignment on MidasService_Pay");
static_assert(sizeof(MidasService_Pay) == 0x000010, "Wrong size on MidasService_Pay");
static_assert(offsetof(MidasService_Pay, PayInfo) == 0x000000, "Member 'MidasService_Pay::PayInfo' has a wrong offset!");

// Function TGFGame.MithrilService.SelectMithrilRole
// 0x0002 (0x0002 - 0x0000)
struct MithrilService_SelectMithrilRole final
{
public:
	ETGFProtoTgfEnRoleCareerType                  CareerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnRoleGenderType                  GenderType;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MithrilService_SelectMithrilRole) == 0x000001, "Wrong alignment on MithrilService_SelectMithrilRole");
static_assert(sizeof(MithrilService_SelectMithrilRole) == 0x000002, "Wrong size on MithrilService_SelectMithrilRole");
static_assert(offsetof(MithrilService_SelectMithrilRole, CareerType) == 0x000000, "Member 'MithrilService_SelectMithrilRole::CareerType' has a wrong offset!");
static_assert(offsetof(MithrilService_SelectMithrilRole, GenderType) == 0x000001, "Member 'MithrilService_SelectMithrilRole::GenderType' has a wrong offset!");

// Function TGFGame.MithrilService.SendMithrilForceReceiveRewardReq
// 0x0010 (0x0010 - 0x0000)
struct MithrilService_SendMithrilForceReceiveRewardReq final
{
public:
	TArray<class UTGFProtoTgfDItemOffset*>        InRewardItems;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MithrilService_SendMithrilForceReceiveRewardReq) == 0x000008, "Wrong alignment on MithrilService_SendMithrilForceReceiveRewardReq");
static_assert(sizeof(MithrilService_SendMithrilForceReceiveRewardReq) == 0x000010, "Wrong size on MithrilService_SendMithrilForceReceiveRewardReq");
static_assert(offsetof(MithrilService_SendMithrilForceReceiveRewardReq, InRewardItems) == 0x000000, "Member 'MithrilService_SendMithrilForceReceiveRewardReq::InRewardItems' has a wrong offset!");

// Function TGFGame.MithrilService.SetMithrilPrestige
// 0x0008 (0x0008 - 0x0000)
struct MithrilService_SetMithrilPrestige final
{
public:
	int64                                         Prestige;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MithrilService_SetMithrilPrestige) == 0x000008, "Wrong alignment on MithrilService_SetMithrilPrestige");
static_assert(sizeof(MithrilService_SetMithrilPrestige) == 0x000008, "Wrong size on MithrilService_SetMithrilPrestige");
static_assert(offsetof(MithrilService_SetMithrilPrestige, Prestige) == 0x000000, "Member 'MithrilService_SetMithrilPrestige::Prestige' has a wrong offset!");

// Function TGFGame.MithrilService.CheckHasMithrilRole
// 0x0001 (0x0001 - 0x0000)
struct MithrilService_CheckHasMithrilRole final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MithrilService_CheckHasMithrilRole) == 0x000001, "Wrong alignment on MithrilService_CheckHasMithrilRole");
static_assert(sizeof(MithrilService_CheckHasMithrilRole) == 0x000001, "Wrong size on MithrilService_CheckHasMithrilRole");
static_assert(offsetof(MithrilService_CheckHasMithrilRole, ReturnValue) == 0x000000, "Member 'MithrilService_CheckHasMithrilRole::ReturnValue' has a wrong offset!");

// Function TGFGame.MithrilService.CheckInMithrilHall
// 0x0001 (0x0001 - 0x0000)
struct MithrilService_CheckInMithrilHall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MithrilService_CheckInMithrilHall) == 0x000001, "Wrong alignment on MithrilService_CheckInMithrilHall");
static_assert(sizeof(MithrilService_CheckInMithrilHall) == 0x000001, "Wrong size on MithrilService_CheckInMithrilHall");
static_assert(offsetof(MithrilService_CheckInMithrilHall, ReturnValue) == 0x000000, "Member 'MithrilService_CheckInMithrilHall::ReturnValue' has a wrong offset!");

// Function TGFGame.MithrilService.GetMithrilLevel
// 0x0018 (0x0018 - 0x0000)
struct MithrilService_GetMithrilLevel final
{
public:
	int64                                         OutNextExp;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OutRemainExp;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MithrilService_GetMithrilLevel) == 0x000008, "Wrong alignment on MithrilService_GetMithrilLevel");
static_assert(sizeof(MithrilService_GetMithrilLevel) == 0x000018, "Wrong size on MithrilService_GetMithrilLevel");
static_assert(offsetof(MithrilService_GetMithrilLevel, OutNextExp) == 0x000000, "Member 'MithrilService_GetMithrilLevel::OutNextExp' has a wrong offset!");
static_assert(offsetof(MithrilService_GetMithrilLevel, OutRemainExp) == 0x000008, "Member 'MithrilService_GetMithrilLevel::OutRemainExp' has a wrong offset!");
static_assert(offsetof(MithrilService_GetMithrilLevel, ReturnValue) == 0x000010, "Member 'MithrilService_GetMithrilLevel::ReturnValue' has a wrong offset!");

// Function TGFGame.MithrilService.GetMithrilPrestigeLevel
// 0x0020 (0x0020 - 0x0000)
struct MithrilService_GetMithrilPrestigeLevel final
{
public:
	int64                                         Prestige;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OutNextExp;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OutRemainExp;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MithrilService_GetMithrilPrestigeLevel) == 0x000008, "Wrong alignment on MithrilService_GetMithrilPrestigeLevel");
static_assert(sizeof(MithrilService_GetMithrilPrestigeLevel) == 0x000020, "Wrong size on MithrilService_GetMithrilPrestigeLevel");
static_assert(offsetof(MithrilService_GetMithrilPrestigeLevel, Prestige) == 0x000000, "Member 'MithrilService_GetMithrilPrestigeLevel::Prestige' has a wrong offset!");
static_assert(offsetof(MithrilService_GetMithrilPrestigeLevel, OutNextExp) == 0x000008, "Member 'MithrilService_GetMithrilPrestigeLevel::OutNextExp' has a wrong offset!");
static_assert(offsetof(MithrilService_GetMithrilPrestigeLevel, OutRemainExp) == 0x000010, "Member 'MithrilService_GetMithrilPrestigeLevel::OutRemainExp' has a wrong offset!");
static_assert(offsetof(MithrilService_GetMithrilPrestigeLevel, ReturnValue) == 0x000018, "Member 'MithrilService_GetMithrilPrestigeLevel::ReturnValue' has a wrong offset!");

// Function TGFGame.MithrilService.GetMithrilRoleGuid
// 0x0010 (0x0010 - 0x0000)
struct MithrilService_GetMithrilRoleGuid final
{
public:
	ETGFProtoTgfEnRoleCareerType                  CareerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MithrilService_GetMithrilRoleGuid) == 0x000008, "Wrong alignment on MithrilService_GetMithrilRoleGuid");
static_assert(sizeof(MithrilService_GetMithrilRoleGuid) == 0x000010, "Wrong size on MithrilService_GetMithrilRoleGuid");
static_assert(offsetof(MithrilService_GetMithrilRoleGuid, CareerType) == 0x000000, "Member 'MithrilService_GetMithrilRoleGuid::CareerType' has a wrong offset!");
static_assert(offsetof(MithrilService_GetMithrilRoleGuid, ReturnValue) == 0x000008, "Member 'MithrilService_GetMithrilRoleGuid::ReturnValue' has a wrong offset!");

// Function TGFGame.TaskService.Lua_NotifyTaskDataReady
// 0x0001 (0x0001 - 0x0000)
struct TaskService_Lua_NotifyTaskDataReady final
{
public:
	bool                                          bIsReady;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskService_Lua_NotifyTaskDataReady) == 0x000001, "Wrong alignment on TaskService_Lua_NotifyTaskDataReady");
static_assert(sizeof(TaskService_Lua_NotifyTaskDataReady) == 0x000001, "Wrong size on TaskService_Lua_NotifyTaskDataReady");
static_assert(offsetof(TaskService_Lua_NotifyTaskDataReady, bIsReady) == 0x000000, "Member 'TaskService_Lua_NotifyTaskDataReady::bIsReady' has a wrong offset!");

// Function TGFGame.TaskService.Lua_ReportTaskReward
// 0x0008 (0x0008 - 0x0000)
struct TaskService_Lua_ReportTaskReward final
{
public:
	int32                                         TaskId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TaskService_Lua_ReportTaskReward) == 0x000004, "Wrong alignment on TaskService_Lua_ReportTaskReward");
static_assert(sizeof(TaskService_Lua_ReportTaskReward) == 0x000008, "Wrong size on TaskService_Lua_ReportTaskReward");
static_assert(offsetof(TaskService_Lua_ReportTaskReward, TaskId) == 0x000000, "Member 'TaskService_Lua_ReportTaskReward::TaskId' has a wrong offset!");
static_assert(offsetof(TaskService_Lua_ReportTaskReward, ReturnValue) == 0x000004, "Member 'TaskService_Lua_ReportTaskReward::ReturnValue' has a wrong offset!");

// Function TGFGame.TaskService.Lua_ReportTaskSubmitItem
// 0x0018 (0x0018 - 0x0000)
struct TaskService_Lua_ReportTaskSubmitItem final
{
public:
	int32                                         TaskId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SubmitCnt;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TaskService_Lua_ReportTaskSubmitItem) == 0x000008, "Wrong alignment on TaskService_Lua_ReportTaskSubmitItem");
static_assert(sizeof(TaskService_Lua_ReportTaskSubmitItem) == 0x000018, "Wrong size on TaskService_Lua_ReportTaskSubmitItem");
static_assert(offsetof(TaskService_Lua_ReportTaskSubmitItem, TaskId) == 0x000000, "Member 'TaskService_Lua_ReportTaskSubmitItem::TaskId' has a wrong offset!");
static_assert(offsetof(TaskService_Lua_ReportTaskSubmitItem, SubmitCnt) == 0x000008, "Member 'TaskService_Lua_ReportTaskSubmitItem::SubmitCnt' has a wrong offset!");
static_assert(offsetof(TaskService_Lua_ReportTaskSubmitItem, ReturnValue) == 0x000010, "Member 'TaskService_Lua_ReportTaskSubmitItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TaskService.Lua_UpdateTaskInfo
// 0x0008 (0x0008 - 0x0000)
struct TaskService_Lua_UpdateTaskInfo final
{
public:
	class UTGFProtoTgfDUserQuestData*             UpdataTaskInfo;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskService_Lua_UpdateTaskInfo) == 0x000008, "Wrong alignment on TaskService_Lua_UpdateTaskInfo");
static_assert(sizeof(TaskService_Lua_UpdateTaskInfo) == 0x000008, "Wrong size on TaskService_Lua_UpdateTaskInfo");
static_assert(offsetof(TaskService_Lua_UpdateTaskInfo, UpdataTaskInfo) == 0x000000, "Member 'TaskService_Lua_UpdateTaskInfo::UpdataTaskInfo' has a wrong offset!");

// Function TGFGame.TgfAppearanceService.BroadcastCaptureData
// 0x0010 (0x0010 - 0x0000)
struct TgfAppearanceService_BroadcastCaptureData final
{
public:
	int64                                         RoleID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SlateBrush;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAppearanceService_BroadcastCaptureData) == 0x000008, "Wrong alignment on TgfAppearanceService_BroadcastCaptureData");
static_assert(sizeof(TgfAppearanceService_BroadcastCaptureData) == 0x000010, "Wrong size on TgfAppearanceService_BroadcastCaptureData");
static_assert(offsetof(TgfAppearanceService_BroadcastCaptureData, RoleID) == 0x000000, "Member 'TgfAppearanceService_BroadcastCaptureData::RoleID' has a wrong offset!");
static_assert(offsetof(TgfAppearanceService_BroadcastCaptureData, SlateBrush) == 0x000008, "Member 'TgfAppearanceService_BroadcastCaptureData::SlateBrush' has a wrong offset!");

// Function TGFGame.TgfAppearanceService.GetAppearanceTextureDirectly
// 0x0070 (0x0070 - 0x0000)
struct TgfAppearanceService_GetAppearanceTextureDirectly final
{
public:
	struct FTgfAvatarBuildConfig                  InAppearanceConfig;                                // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAppearanceService_GetAppearanceTextureDirectly) == 0x000008, "Wrong alignment on TgfAppearanceService_GetAppearanceTextureDirectly");
static_assert(sizeof(TgfAppearanceService_GetAppearanceTextureDirectly) == 0x000070, "Wrong size on TgfAppearanceService_GetAppearanceTextureDirectly");
static_assert(offsetof(TgfAppearanceService_GetAppearanceTextureDirectly, InAppearanceConfig) == 0x000000, "Member 'TgfAppearanceService_GetAppearanceTextureDirectly::InAppearanceConfig' has a wrong offset!");
static_assert(offsetof(TgfAppearanceService_GetAppearanceTextureDirectly, ReturnValue) == 0x000068, "Member 'TgfAppearanceService_GetAppearanceTextureDirectly::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfAppearanceService.GetSceneInstance
// 0x0008 (0x0008 - 0x0000)
struct TgfAppearanceService_GetSceneInstance final
{
public:
	class ASceneAppearanceActor*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAppearanceService_GetSceneInstance) == 0x000008, "Wrong alignment on TgfAppearanceService_GetSceneInstance");
static_assert(sizeof(TgfAppearanceService_GetSceneInstance) == 0x000008, "Wrong size on TgfAppearanceService_GetSceneInstance");
static_assert(offsetof(TgfAppearanceService_GetSceneInstance, ReturnValue) == 0x000000, "Member 'TgfAppearanceService_GetSceneInstance::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfAppearanceService.RequestRoleAppearanceTexture
// 0x0088 (0x0088 - 0x0000)
struct TgfAppearanceService_RequestRoleAppearanceTexture final
{
public:
	int64                                         RoleID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfAvatarBuildConfig                  InAppearanceConfig;                                // 0x0008(0x0068)(Parm, NativeAccessSpecifierPublic)
	bool                                          NeedQueueFirst;                                    // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ImgSize;                                           // 0x0078(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAppearanceService_RequestRoleAppearanceTexture) == 0x000008, "Wrong alignment on TgfAppearanceService_RequestRoleAppearanceTexture");
static_assert(sizeof(TgfAppearanceService_RequestRoleAppearanceTexture) == 0x000088, "Wrong size on TgfAppearanceService_RequestRoleAppearanceTexture");
static_assert(offsetof(TgfAppearanceService_RequestRoleAppearanceTexture, RoleID) == 0x000000, "Member 'TgfAppearanceService_RequestRoleAppearanceTexture::RoleID' has a wrong offset!");
static_assert(offsetof(TgfAppearanceService_RequestRoleAppearanceTexture, InAppearanceConfig) == 0x000008, "Member 'TgfAppearanceService_RequestRoleAppearanceTexture::InAppearanceConfig' has a wrong offset!");
static_assert(offsetof(TgfAppearanceService_RequestRoleAppearanceTexture, NeedQueueFirst) == 0x000070, "Member 'TgfAppearanceService_RequestRoleAppearanceTexture::NeedQueueFirst' has a wrong offset!");
static_assert(offsetof(TgfAppearanceService_RequestRoleAppearanceTexture, ImgSize) == 0x000078, "Member 'TgfAppearanceService_RequestRoleAppearanceTexture::ImgSize' has a wrong offset!");

// Function TGFGame.TgfAppearanceService.SetOperateFrameInterval
// 0x0004 (0x0004 - 0x0000)
struct TgfAppearanceService_SetOperateFrameInterval final
{
public:
	int32                                         FrameInterval;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAppearanceService_SetOperateFrameInterval) == 0x000004, "Wrong alignment on TgfAppearanceService_SetOperateFrameInterval");
static_assert(sizeof(TgfAppearanceService_SetOperateFrameInterval) == 0x000004, "Wrong size on TgfAppearanceService_SetOperateFrameInterval");
static_assert(offsetof(TgfAppearanceService_SetOperateFrameInterval, FrameInterval) == 0x000000, "Member 'TgfAppearanceService_SetOperateFrameInterval::FrameInterval' has a wrong offset!");

// Function TGFGame.TgfAppearanceService.SetWorkerFrameInterval
// 0x0004 (0x0004 - 0x0000)
struct TgfAppearanceService_SetWorkerFrameInterval final
{
public:
	int32                                         FrameInterval;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAppearanceService_SetWorkerFrameInterval) == 0x000004, "Wrong alignment on TgfAppearanceService_SetWorkerFrameInterval");
static_assert(sizeof(TgfAppearanceService_SetWorkerFrameInterval) == 0x000004, "Wrong size on TgfAppearanceService_SetWorkerFrameInterval");
static_assert(offsetof(TgfAppearanceService_SetWorkerFrameInterval, FrameInterval) == 0x000000, "Member 'TgfAppearanceService_SetWorkerFrameInterval::FrameInterval' has a wrong offset!");

// Function TGFGame.RoleInfo.GetAvatarBuildConfig
// 0x0068 (0x0068 - 0x0000)
struct RoleInfo_GetAvatarBuildConfig final
{
public:
	struct FTgfAvatarBuildConfig                  ReturnValue;                                       // 0x0000(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleInfo_GetAvatarBuildConfig) == 0x000008, "Wrong alignment on RoleInfo_GetAvatarBuildConfig");
static_assert(sizeof(RoleInfo_GetAvatarBuildConfig) == 0x000068, "Wrong size on RoleInfo_GetAvatarBuildConfig");
static_assert(offsetof(RoleInfo_GetAvatarBuildConfig, ReturnValue) == 0x000000, "Member 'RoleInfo_GetAvatarBuildConfig::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleInfo.GetDefaultRoleName
// 0x0010 (0x0010 - 0x0000)
struct RoleInfo_GetDefaultRoleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleInfo_GetDefaultRoleName) == 0x000008, "Wrong alignment on RoleInfo_GetDefaultRoleName");
static_assert(sizeof(RoleInfo_GetDefaultRoleName) == 0x000010, "Wrong size on RoleInfo_GetDefaultRoleName");
static_assert(offsetof(RoleInfo_GetDefaultRoleName, ReturnValue) == 0x000000, "Member 'RoleInfo_GetDefaultRoleName::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleInfo.GetEquipmentList
// 0x0018 (0x0018 - 0x0000)
struct RoleInfo_GetEquipmentList final
{
public:
	bool                                          bFilterDressUp;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleInfo_GetEquipmentList) == 0x000008, "Wrong alignment on RoleInfo_GetEquipmentList");
static_assert(sizeof(RoleInfo_GetEquipmentList) == 0x000018, "Wrong size on RoleInfo_GetEquipmentList");
static_assert(offsetof(RoleInfo_GetEquipmentList, bFilterDressUp) == 0x000000, "Member 'RoleInfo_GetEquipmentList::bFilterDressUp' has a wrong offset!");
static_assert(offsetof(RoleInfo_GetEquipmentList, ReturnValue) == 0x000008, "Member 'RoleInfo_GetEquipmentList::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleInfo.GetEquipmentListWithoutSlotType
// 0x0018 (0x0018 - 0x0000)
struct RoleInfo_GetEquipmentListWithoutSlotType final
{
public:
	ETgfEquipSlot                                 ExceptType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleInfo_GetEquipmentListWithoutSlotType) == 0x000008, "Wrong alignment on RoleInfo_GetEquipmentListWithoutSlotType");
static_assert(sizeof(RoleInfo_GetEquipmentListWithoutSlotType) == 0x000018, "Wrong size on RoleInfo_GetEquipmentListWithoutSlotType");
static_assert(offsetof(RoleInfo_GetEquipmentListWithoutSlotType, ExceptType) == 0x000000, "Member 'RoleInfo_GetEquipmentListWithoutSlotType::ExceptType' has a wrong offset!");
static_assert(offsetof(RoleInfo_GetEquipmentListWithoutSlotType, ReturnValue) == 0x000008, "Member 'RoleInfo_GetEquipmentListWithoutSlotType::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleInfo.GetHeadIconPath
// 0x0010 (0x0010 - 0x0000)
struct RoleInfo_GetHeadIconPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleInfo_GetHeadIconPath) == 0x000008, "Wrong alignment on RoleInfo_GetHeadIconPath");
static_assert(sizeof(RoleInfo_GetHeadIconPath) == 0x000010, "Wrong size on RoleInfo_GetHeadIconPath");
static_assert(offsetof(RoleInfo_GetHeadIconPath, ReturnValue) == 0x000000, "Member 'RoleInfo_GetHeadIconPath::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleInfo.GetIsExpired
// 0x0001 (0x0001 - 0x0000)
struct RoleInfo_GetIsExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleInfo_GetIsExpired) == 0x000001, "Wrong alignment on RoleInfo_GetIsExpired");
static_assert(sizeof(RoleInfo_GetIsExpired) == 0x000001, "Wrong size on RoleInfo_GetIsExpired");
static_assert(offsetof(RoleInfo_GetIsExpired, ReturnValue) == 0x000000, "Member 'RoleInfo_GetIsExpired::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleInfo.GetIsValid
// 0x0001 (0x0001 - 0x0000)
struct RoleInfo_GetIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleInfo_GetIsValid) == 0x000001, "Wrong alignment on RoleInfo_GetIsValid");
static_assert(sizeof(RoleInfo_GetIsValid) == 0x000001, "Wrong size on RoleInfo_GetIsValid");
static_assert(offsetof(RoleInfo_GetIsValid, ReturnValue) == 0x000000, "Member 'RoleInfo_GetIsValid::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleInfo.GetRoleName
// 0x0010 (0x0010 - 0x0000)
struct RoleInfo_GetRoleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleInfo_GetRoleName) == 0x000008, "Wrong alignment on RoleInfo_GetRoleName");
static_assert(sizeof(RoleInfo_GetRoleName) == 0x000010, "Wrong size on RoleInfo_GetRoleName");
static_assert(offsetof(RoleInfo_GetRoleName, ReturnValue) == 0x000000, "Member 'RoleInfo_GetRoleName::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleInfo.GetUESkinsList
// 0x0010 (0x0010 - 0x0000)
struct RoleInfo_GetUESkinsList final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleInfo_GetUESkinsList) == 0x000008, "Wrong alignment on RoleInfo_GetUESkinsList");
static_assert(sizeof(RoleInfo_GetUESkinsList) == 0x000010, "Wrong size on RoleInfo_GetUESkinsList");
static_assert(offsetof(RoleInfo_GetUESkinsList, ReturnValue) == 0x000000, "Member 'RoleInfo_GetUESkinsList::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleInfo.GetWeaponList
// 0x0010 (0x0010 - 0x0000)
struct RoleInfo_GetWeaponList final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleInfo_GetWeaponList) == 0x000008, "Wrong alignment on RoleInfo_GetWeaponList");
static_assert(sizeof(RoleInfo_GetWeaponList) == 0x000010, "Wrong size on RoleInfo_GetWeaponList");
static_assert(offsetof(RoleInfo_GetWeaponList, ReturnValue) == 0x000000, "Member 'RoleInfo_GetWeaponList::ReturnValue' has a wrong offset!");

// Function TGFGame.PayService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct PayService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PayService_OnGameLogout) == 0x000008, "Wrong alignment on PayService_OnGameLogout");
static_assert(sizeof(PayService_OnGameLogout) == 0x000008, "Wrong size on PayService_OnGameLogout");
static_assert(offsetof(PayService_OnGameLogout, Args) == 0x000000, "Member 'PayService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.PayService.OnPaySuccess
// 0x0008 (0x0008 - 0x0000)
struct PayService_OnPaySuccess final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PayService_OnPaySuccess) == 0x000008, "Wrong alignment on PayService_OnPaySuccess");
static_assert(sizeof(PayService_OnPaySuccess) == 0x000008, "Wrong size on PayService_OnPaySuccess");
static_assert(offsetof(PayService_OnPaySuccess, Args) == 0x000000, "Member 'PayService_OnPaySuccess::Args' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetCreateOpenFrom
// 0x0001 (0x0001 - 0x0000)
struct PlayerInfoService_GetCreateOpenFrom final
{
public:
	ECreateRoleFrom                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetCreateOpenFrom) == 0x000001, "Wrong alignment on PlayerInfoService_GetCreateOpenFrom");
static_assert(sizeof(PlayerInfoService_GetCreateOpenFrom) == 0x000001, "Wrong size on PlayerInfoService_GetCreateOpenFrom");
static_assert(offsetof(PlayerInfoService_GetCreateOpenFrom, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetCreateOpenFrom::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetHallRoleCareerType
// 0x0001 (0x0001 - 0x0000)
struct PlayerInfoService_GetHallRoleCareerType final
{
public:
	ETGFProtoTgfEnRoleCareerType                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetHallRoleCareerType) == 0x000001, "Wrong alignment on PlayerInfoService_GetHallRoleCareerType");
static_assert(sizeof(PlayerInfoService_GetHallRoleCareerType) == 0x000001, "Wrong size on PlayerInfoService_GetHallRoleCareerType");
static_assert(offsetof(PlayerInfoService_GetHallRoleCareerType, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetHallRoleCareerType::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetHallRoleForceType
// 0x0001 (0x0001 - 0x0000)
struct PlayerInfoService_GetHallRoleForceType final
{
public:
	ETGFProtoTgfEnForceType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetHallRoleForceType) == 0x000001, "Wrong alignment on PlayerInfoService_GetHallRoleForceType");
static_assert(sizeof(PlayerInfoService_GetHallRoleForceType) == 0x000001, "Wrong size on PlayerInfoService_GetHallRoleForceType");
static_assert(offsetof(PlayerInfoService_GetHallRoleForceType, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetHallRoleForceType::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetHallRoleGender
// 0x0004 (0x0004 - 0x0000)
struct PlayerInfoService_GetHallRoleGender final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetHallRoleGender) == 0x000004, "Wrong alignment on PlayerInfoService_GetHallRoleGender");
static_assert(sizeof(PlayerInfoService_GetHallRoleGender) == 0x000004, "Wrong size on PlayerInfoService_GetHallRoleGender");
static_assert(offsetof(PlayerInfoService_GetHallRoleGender, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetHallRoleGender::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetHallRoleGuid
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoService_GetHallRoleGuid final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetHallRoleGuid) == 0x000008, "Wrong alignment on PlayerInfoService_GetHallRoleGuid");
static_assert(sizeof(PlayerInfoService_GetHallRoleGuid) == 0x000008, "Wrong size on PlayerInfoService_GetHallRoleGuid");
static_assert(offsetof(PlayerInfoService_GetHallRoleGuid, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetHallRoleGuid::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetHallRoleInfo
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoService_GetHallRoleInfo final
{
public:
	class UTGFProtoTgfDUserRole*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetHallRoleInfo) == 0x000008, "Wrong alignment on PlayerInfoService_GetHallRoleInfo");
static_assert(sizeof(PlayerInfoService_GetHallRoleInfo) == 0x000008, "Wrong size on PlayerInfoService_GetHallRoleInfo");
static_assert(offsetof(PlayerInfoService_GetHallRoleInfo, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetHallRoleInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetHallRoleInfoBasic
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoService_GetHallRoleInfoBasic final
{
public:
	class UTGFProtoTgfDUserRoleBasic*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetHallRoleInfoBasic) == 0x000008, "Wrong alignment on PlayerInfoService_GetHallRoleInfoBasic");
static_assert(sizeof(PlayerInfoService_GetHallRoleInfoBasic) == 0x000008, "Wrong size on PlayerInfoService_GetHallRoleInfoBasic");
static_assert(offsetof(PlayerInfoService_GetHallRoleInfoBasic, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetHallRoleInfoBasic::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetHallRoleRace
// 0x0001 (0x0001 - 0x0000)
struct PlayerInfoService_GetHallRoleRace final
{
public:
	ETGFProtoTgfEnRoleRaceType                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetHallRoleRace) == 0x000001, "Wrong alignment on PlayerInfoService_GetHallRoleRace");
static_assert(sizeof(PlayerInfoService_GetHallRoleRace) == 0x000001, "Wrong size on PlayerInfoService_GetHallRoleRace");
static_assert(offsetof(PlayerInfoService_GetHallRoleRace, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetHallRoleRace::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetRole
// 0x0080 (0x0080 - 0x0000)
struct PlayerInfoService_GetRole final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFUserRole                           Role;                                              // 0x0008(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoService_GetRole) == 0x000008, "Wrong alignment on PlayerInfoService_GetRole");
static_assert(sizeof(PlayerInfoService_GetRole) == 0x000080, "Wrong size on PlayerInfoService_GetRole");
static_assert(offsetof(PlayerInfoService_GetRole, Guid) == 0x000000, "Member 'PlayerInfoService_GetRole::Guid' has a wrong offset!");
static_assert(offsetof(PlayerInfoService_GetRole, Role) == 0x000008, "Member 'PlayerInfoService_GetRole::Role' has a wrong offset!");
static_assert(offsetof(PlayerInfoService_GetRole, ReturnValue) == 0x000078, "Member 'PlayerInfoService_GetRole::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetRoleInfo
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoService_GetRoleInfo final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFProtoTgfDUserRole*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetRoleInfo) == 0x000008, "Wrong alignment on PlayerInfoService_GetRoleInfo");
static_assert(sizeof(PlayerInfoService_GetRoleInfo) == 0x000010, "Wrong size on PlayerInfoService_GetRoleInfo");
static_assert(offsetof(PlayerInfoService_GetRoleInfo, Guid) == 0x000000, "Member 'PlayerInfoService_GetRoleInfo::Guid' has a wrong offset!");
static_assert(offsetof(PlayerInfoService_GetRoleInfo, ReturnValue) == 0x000008, "Member 'PlayerInfoService_GetRoleInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetRoleList
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoService_GetRoleList final
{
public:
	TArray<struct FTGFUserRole>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetRoleList) == 0x000008, "Wrong alignment on PlayerInfoService_GetRoleList");
static_assert(sizeof(PlayerInfoService_GetRoleList) == 0x000010, "Wrong size on PlayerInfoService_GetRoleList");
static_assert(offsetof(PlayerInfoService_GetRoleList, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetRoleList::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_OnGameLogout) == 0x000008, "Wrong alignment on PlayerInfoService_OnGameLogout");
static_assert(sizeof(PlayerInfoService_OnGameLogout) == 0x000008, "Wrong size on PlayerInfoService_OnGameLogout");
static_assert(offsetof(PlayerInfoService_OnGameLogout, Args) == 0x000000, "Member 'PlayerInfoService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.PlayerInfoService.OpenCreateRole
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoService_OpenCreateRole final
{
public:
	ECreateRoleFrom                               InFrom;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTGFCreateRoleWindowArgs*               Args;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_OpenCreateRole) == 0x000008, "Wrong alignment on PlayerInfoService_OpenCreateRole");
static_assert(sizeof(PlayerInfoService_OpenCreateRole) == 0x000010, "Wrong size on PlayerInfoService_OpenCreateRole");
static_assert(offsetof(PlayerInfoService_OpenCreateRole, InFrom) == 0x000000, "Member 'PlayerInfoService_OpenCreateRole::InFrom' has a wrong offset!");
static_assert(offsetof(PlayerInfoService_OpenCreateRole, Args) == 0x000008, "Member 'PlayerInfoService_OpenCreateRole::Args' has a wrong offset!");

// Function TGFGame.PlayerInfoService.SendBusinessPingReq
// 0x0001 (0x0001 - 0x0000)
struct PlayerInfoService_SendBusinessPingReq final
{
public:
	ETGFProtoTgfEnBusinessPingType                PingType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_SendBusinessPingReq) == 0x000001, "Wrong alignment on PlayerInfoService_SendBusinessPingReq");
static_assert(sizeof(PlayerInfoService_SendBusinessPingReq) == 0x000001, "Wrong size on PlayerInfoService_SendBusinessPingReq");
static_assert(offsetof(PlayerInfoService_SendBusinessPingReq, PingType) == 0x000000, "Member 'PlayerInfoService_SendBusinessPingReq::PingType' has a wrong offset!");

// Function TGFGame.PlayerInfoService.SendPlayerUpdateBirthDayReq
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoService_SendPlayerUpdateBirthDayReq final
{
public:
	class FString                                 Birth;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_SendPlayerUpdateBirthDayReq) == 0x000008, "Wrong alignment on PlayerInfoService_SendPlayerUpdateBirthDayReq");
static_assert(sizeof(PlayerInfoService_SendPlayerUpdateBirthDayReq) == 0x000010, "Wrong size on PlayerInfoService_SendPlayerUpdateBirthDayReq");
static_assert(offsetof(PlayerInfoService_SendPlayerUpdateBirthDayReq, Birth) == 0x000000, "Member 'PlayerInfoService_SendPlayerUpdateBirthDayReq::Birth' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetAreaId
// 0x0004 (0x0004 - 0x0000)
struct PlayerInfoService_GetAreaId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetAreaId) == 0x000004, "Wrong alignment on PlayerInfoService_GetAreaId");
static_assert(sizeof(PlayerInfoService_GetAreaId) == 0x000004, "Wrong size on PlayerInfoService_GetAreaId");
static_assert(offsetof(PlayerInfoService_GetAreaId, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetAreaId::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetBirth
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoService_GetBirth final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetBirth) == 0x000008, "Wrong alignment on PlayerInfoService_GetBirth");
static_assert(sizeof(PlayerInfoService_GetBirth) == 0x000010, "Wrong size on PlayerInfoService_GetBirth");
static_assert(offsetof(PlayerInfoService_GetBirth, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetBirth::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetConsecutiveLoginDays
// 0x0004 (0x0004 - 0x0000)
struct PlayerInfoService_GetConsecutiveLoginDays final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetConsecutiveLoginDays) == 0x000004, "Wrong alignment on PlayerInfoService_GetConsecutiveLoginDays");
static_assert(sizeof(PlayerInfoService_GetConsecutiveLoginDays) == 0x000004, "Wrong size on PlayerInfoService_GetConsecutiveLoginDays");
static_assert(offsetof(PlayerInfoService_GetConsecutiveLoginDays, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetConsecutiveLoginDays::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetCumulativeLoginDays
// 0x0004 (0x0004 - 0x0000)
struct PlayerInfoService_GetCumulativeLoginDays final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetCumulativeLoginDays) == 0x000004, "Wrong alignment on PlayerInfoService_GetCumulativeLoginDays");
static_assert(sizeof(PlayerInfoService_GetCumulativeLoginDays) == 0x000004, "Wrong size on PlayerInfoService_GetCumulativeLoginDays");
static_assert(offsetof(PlayerInfoService_GetCumulativeLoginDays, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetCumulativeLoginDays::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetHistoryRoleMaxLevel
// 0x0004 (0x0004 - 0x0000)
struct PlayerInfoService_GetHistoryRoleMaxLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetHistoryRoleMaxLevel) == 0x000004, "Wrong alignment on PlayerInfoService_GetHistoryRoleMaxLevel");
static_assert(sizeof(PlayerInfoService_GetHistoryRoleMaxLevel) == 0x000004, "Wrong size on PlayerInfoService_GetHistoryRoleMaxLevel");
static_assert(offsetof(PlayerInfoService_GetHistoryRoleMaxLevel, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetHistoryRoleMaxLevel::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetRegisterCountry
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoService_GetRegisterCountry final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetRegisterCountry) == 0x000008, "Wrong alignment on PlayerInfoService_GetRegisterCountry");
static_assert(sizeof(PlayerInfoService_GetRegisterCountry) == 0x000010, "Wrong size on PlayerInfoService_GetRegisterCountry");
static_assert(offsetof(PlayerInfoService_GetRegisterCountry, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetRegisterCountry::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetRoleCount
// 0x0004 (0x0004 - 0x0000)
struct PlayerInfoService_GetRoleCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetRoleCount) == 0x000004, "Wrong alignment on PlayerInfoService_GetRoleCount");
static_assert(sizeof(PlayerInfoService_GetRoleCount) == 0x000004, "Wrong size on PlayerInfoService_GetRoleCount");
static_assert(offsetof(PlayerInfoService_GetRoleCount, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetRoleCount::ReturnValue' has a wrong offset!");

// Function TGFGame.PlayerInfoService.GetUserDataVersion
// 0x0001 (0x0001 - 0x0000)
struct PlayerInfoService_GetUserDataVersion final
{
public:
	ETGFProtoTgfEnUserTableDataVersion            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoService_GetUserDataVersion) == 0x000001, "Wrong alignment on PlayerInfoService_GetUserDataVersion");
static_assert(sizeof(PlayerInfoService_GetUserDataVersion) == 0x000001, "Wrong size on PlayerInfoService_GetUserDataVersion");
static_assert(offsetof(PlayerInfoService_GetUserDataVersion, ReturnValue) == 0x000000, "Member 'PlayerInfoService_GetUserDataVersion::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamMember.SetIsReady
// 0x0001 (0x0001 - 0x0000)
struct TeamMember_SetIsReady final
{
public:
	bool                                          bInReady;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamMember_SetIsReady) == 0x000001, "Wrong alignment on TeamMember_SetIsReady");
static_assert(sizeof(TeamMember_SetIsReady) == 0x000001, "Wrong size on TeamMember_SetIsReady");
static_assert(offsetof(TeamMember_SetIsReady, bInReady) == 0x000000, "Member 'TeamMember_SetIsReady::bInReady' has a wrong offset!");

// Function TGFGame.TeamMember.GetIsValid
// 0x0001 (0x0001 - 0x0000)
struct TeamMember_GetIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamMember_GetIsValid) == 0x000001, "Wrong alignment on TeamMember_GetIsValid");
static_assert(sizeof(TeamMember_GetIsValid) == 0x000001, "Wrong size on TeamMember_GetIsValid");
static_assert(offsetof(TeamMember_GetIsValid, ReturnValue) == 0x000000, "Member 'TeamMember_GetIsValid::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryWrapper_Lobby.OnItemUpdate
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryWrapper_Lobby_OnItemUpdate final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_Lobby_OnItemUpdate) == 0x000008, "Wrong alignment on TgfInventoryWrapper_Lobby_OnItemUpdate");
static_assert(sizeof(TgfInventoryWrapper_Lobby_OnItemUpdate) == 0x000008, "Wrong size on TgfInventoryWrapper_Lobby_OnItemUpdate");
static_assert(offsetof(TgfInventoryWrapper_Lobby_OnItemUpdate, Args) == 0x000000, "Member 'TgfInventoryWrapper_Lobby_OnItemUpdate::Args' has a wrong offset!");

// Function TGFGame.TgfInventoryWrapper_Lobby.SetInventoryRoleWrapper
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryWrapper_Lobby_SetInventoryRoleWrapper final
{
public:
	class UTgfInventoryRoleWrapper*               RoleWrapper;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_Lobby_SetInventoryRoleWrapper) == 0x000008, "Wrong alignment on TgfInventoryWrapper_Lobby_SetInventoryRoleWrapper");
static_assert(sizeof(TgfInventoryWrapper_Lobby_SetInventoryRoleWrapper) == 0x000008, "Wrong size on TgfInventoryWrapper_Lobby_SetInventoryRoleWrapper");
static_assert(offsetof(TgfInventoryWrapper_Lobby_SetInventoryRoleWrapper, RoleWrapper) == 0x000000, "Member 'TgfInventoryWrapper_Lobby_SetInventoryRoleWrapper::RoleWrapper' has a wrong offset!");

// Function TGFGame.TgfInventoryWrapper_Lobby.GetActiveTalents
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_Lobby_GetActiveTalents final
{
public:
	TArray<struct FTgfCareerTalentCfgItem>        ActiveTalents;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_Lobby_GetActiveTalents) == 0x000008, "Wrong alignment on TgfInventoryWrapper_Lobby_GetActiveTalents");
static_assert(sizeof(TgfInventoryWrapper_Lobby_GetActiveTalents) == 0x000010, "Wrong size on TgfInventoryWrapper_Lobby_GetActiveTalents");
static_assert(offsetof(TgfInventoryWrapper_Lobby_GetActiveTalents, ActiveTalents) == 0x000000, "Member 'TgfInventoryWrapper_Lobby_GetActiveTalents::ActiveTalents' has a wrong offset!");

// Function TGFGame.TgfInventoryItemWrapper_Activity.Create
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_Activity_Create final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryItemWrapper_Activity*      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_Activity_Create) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_Activity_Create");
static_assert(sizeof(TgfInventoryItemWrapper_Activity_Create) == 0x000010, "Wrong size on TgfInventoryItemWrapper_Activity_Create");
static_assert(offsetof(TgfInventoryItemWrapper_Activity_Create, Type_id) == 0x000000, "Member 'TgfInventoryItemWrapper_Activity_Create::Type_id' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_Activity_Create, Count) == 0x000004, "Member 'TgfInventoryItemWrapper_Activity_Create::Count' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_Activity_Create, ReturnValue) == 0x000008, "Member 'TgfInventoryItemWrapper_Activity_Create::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfCommonWindowArgs.Create
// 0x0020 (0x0020 - 0x0000)
struct TgfCommonWindowArgs_Create final
{
public:
	int32                                         Param_Param1;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Param2;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParamStr;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfCommonWindowArgs*                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCommonWindowArgs_Create) == 0x000008, "Wrong alignment on TgfCommonWindowArgs_Create");
static_assert(sizeof(TgfCommonWindowArgs_Create) == 0x000020, "Wrong size on TgfCommonWindowArgs_Create");
static_assert(offsetof(TgfCommonWindowArgs_Create, Param_Param1) == 0x000000, "Member 'TgfCommonWindowArgs_Create::Param_Param1' has a wrong offset!");
static_assert(offsetof(TgfCommonWindowArgs_Create, Param_Param2) == 0x000004, "Member 'TgfCommonWindowArgs_Create::Param_Param2' has a wrong offset!");
static_assert(offsetof(TgfCommonWindowArgs_Create, ParamStr) == 0x000008, "Member 'TgfCommonWindowArgs_Create::ParamStr' has a wrong offset!");
static_assert(offsetof(TgfCommonWindowArgs_Create, ReturnValue) == 0x000018, "Member 'TgfCommonWindowArgs_Create::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryItemWrapper_Lobby.Create
// 0x0060 (0x0060 - 0x0000)
struct TgfInventoryItemWrapper_Lobby_Create final
{
public:
	struct FTGFItem                               Item;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UTgfInventoryItemWrapper_Lobby*         ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_Lobby_Create) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_Lobby_Create");
static_assert(sizeof(TgfInventoryItemWrapper_Lobby_Create) == 0x000060, "Wrong size on TgfInventoryItemWrapper_Lobby_Create");
static_assert(offsetof(TgfInventoryItemWrapper_Lobby_Create, Item) == 0x000000, "Member 'TgfInventoryItemWrapper_Lobby_Create::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_Lobby_Create, ReturnValue) == 0x000058, "Member 'TgfInventoryItemWrapper_Lobby_Create::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryItemWrapper_Lobby.CreateByDItem
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_Lobby_CreateByDItem final
{
public:
	class UTGFProtoTgfDItem*                      ProtoDItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryItemWrapper_Lobby*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_Lobby_CreateByDItem) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_Lobby_CreateByDItem");
static_assert(sizeof(TgfInventoryItemWrapper_Lobby_CreateByDItem) == 0x000010, "Wrong size on TgfInventoryItemWrapper_Lobby_CreateByDItem");
static_assert(offsetof(TgfInventoryItemWrapper_Lobby_CreateByDItem, ProtoDItem) == 0x000000, "Member 'TgfInventoryItemWrapper_Lobby_CreateByDItem::ProtoDItem' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_Lobby_CreateByDItem, ReturnValue) == 0x000008, "Member 'TgfInventoryItemWrapper_Lobby_CreateByDItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryItemWrapper_Lobby.GetItemData
// 0x0058 (0x0058 - 0x0000)
struct TgfInventoryItemWrapper_Lobby_GetItemData final
{
public:
	struct FTGFItem                               ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_Lobby_GetItemData) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_Lobby_GetItemData");
static_assert(sizeof(TgfInventoryItemWrapper_Lobby_GetItemData) == 0x000058, "Wrong size on TgfInventoryItemWrapper_Lobby_GetItemData");
static_assert(offsetof(TgfInventoryItemWrapper_Lobby_GetItemData, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_Lobby_GetItemData::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryItemWrapper_Trade.GetItemData
// 0x0058 (0x0058 - 0x0000)
struct TgfInventoryItemWrapper_Trade_GetItemData final
{
public:
	struct FTGFItem                               ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_Trade_GetItemData) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_Trade_GetItemData");
static_assert(sizeof(TgfInventoryItemWrapper_Trade_GetItemData) == 0x000058, "Wrong size on TgfInventoryItemWrapper_Trade_GetItemData");
static_assert(offsetof(TgfInventoryItemWrapper_Trade_GetItemData, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_Trade_GetItemData::ReturnValue' has a wrong offset!");

// Function TGFGame.PVPRoomListItemObject.GetNumTotalMember
// 0x0004 (0x0004 - 0x0000)
struct PVPRoomListItemObject_GetNumTotalMember final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PVPRoomListItemObject_GetNumTotalMember) == 0x000004, "Wrong alignment on PVPRoomListItemObject_GetNumTotalMember");
static_assert(sizeof(PVPRoomListItemObject_GetNumTotalMember) == 0x000004, "Wrong size on PVPRoomListItemObject_GetNumTotalMember");
static_assert(offsetof(PVPRoomListItemObject_GetNumTotalMember, ReturnValue) == 0x000000, "Member 'PVPRoomListItemObject_GetNumTotalMember::ReturnValue' has a wrong offset!");

// Function TGFGame.RankService.DelRankData
// 0x0010 (0x0010 - 0x0000)
struct RankService_DelRankData final
{
public:
	class URankUserData*                          TargetData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RankService_DelRankData) == 0x000008, "Wrong alignment on RankService_DelRankData");
static_assert(sizeof(RankService_DelRankData) == 0x000010, "Wrong size on RankService_DelRankData");
static_assert(offsetof(RankService_DelRankData, TargetData) == 0x000000, "Member 'RankService_DelRankData::TargetData' has a wrong offset!");
static_assert(offsetof(RankService_DelRankData, ReturnValue) == 0x000008, "Member 'RankService_DelRankData::ReturnValue' has a wrong offset!");

// Function TGFGame.RankService.GetMyRankDataByRankTypeInstanceId
// 0x0020 (0x0020 - 0x0000)
struct RankService_GetMyRankDataByRankTypeInstanceId final
{
public:
	int32                                         RankType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankInstanceId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RoleGuid;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URankUserData*>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankService_GetMyRankDataByRankTypeInstanceId) == 0x000008, "Wrong alignment on RankService_GetMyRankDataByRankTypeInstanceId");
static_assert(sizeof(RankService_GetMyRankDataByRankTypeInstanceId) == 0x000020, "Wrong size on RankService_GetMyRankDataByRankTypeInstanceId");
static_assert(offsetof(RankService_GetMyRankDataByRankTypeInstanceId, RankType) == 0x000000, "Member 'RankService_GetMyRankDataByRankTypeInstanceId::RankType' has a wrong offset!");
static_assert(offsetof(RankService_GetMyRankDataByRankTypeInstanceId, RankInstanceId) == 0x000004, "Member 'RankService_GetMyRankDataByRankTypeInstanceId::RankInstanceId' has a wrong offset!");
static_assert(offsetof(RankService_GetMyRankDataByRankTypeInstanceId, RoleGuid) == 0x000008, "Member 'RankService_GetMyRankDataByRankTypeInstanceId::RoleGuid' has a wrong offset!");
static_assert(offsetof(RankService_GetMyRankDataByRankTypeInstanceId, ReturnValue) == 0x000010, "Member 'RankService_GetMyRankDataByRankTypeInstanceId::ReturnValue' has a wrong offset!");

// Function TGFGame.RankService.GetMyRankDatas
// 0x0010 (0x0010 - 0x0000)
struct RankService_GetMyRankDatas final
{
public:
	TArray<class URankUserData*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankService_GetMyRankDatas) == 0x000008, "Wrong alignment on RankService_GetMyRankDatas");
static_assert(sizeof(RankService_GetMyRankDatas) == 0x000010, "Wrong size on RankService_GetMyRankDatas");
static_assert(offsetof(RankService_GetMyRankDatas, ReturnValue) == 0x000000, "Member 'RankService_GetMyRankDatas::ReturnValue' has a wrong offset!");

// Function TGFGame.RankService.GetMyRankScore
// 0x000C (0x000C - 0x0000)
struct RankService_GetMyRankScore final
{
public:
	int32                                         RankType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankInstanceId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankService_GetMyRankScore) == 0x000004, "Wrong alignment on RankService_GetMyRankScore");
static_assert(sizeof(RankService_GetMyRankScore) == 0x00000C, "Wrong size on RankService_GetMyRankScore");
static_assert(offsetof(RankService_GetMyRankScore, RankType) == 0x000000, "Member 'RankService_GetMyRankScore::RankType' has a wrong offset!");
static_assert(offsetof(RankService_GetMyRankScore, RankInstanceId) == 0x000004, "Member 'RankService_GetMyRankScore::RankInstanceId' has a wrong offset!");
static_assert(offsetof(RankService_GetMyRankScore, ReturnValue) == 0x000008, "Member 'RankService_GetMyRankScore::ReturnValue' has a wrong offset!");

// Function TGFGame.RankService.GetRankDataByRankTypeInstanceId
// 0x0018 (0x0018 - 0x0000)
struct RankService_GetRankDataByRankTypeInstanceId final
{
public:
	int32                                         RankType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankInstanceId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URankUserData*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankService_GetRankDataByRankTypeInstanceId) == 0x000008, "Wrong alignment on RankService_GetRankDataByRankTypeInstanceId");
static_assert(sizeof(RankService_GetRankDataByRankTypeInstanceId) == 0x000018, "Wrong size on RankService_GetRankDataByRankTypeInstanceId");
static_assert(offsetof(RankService_GetRankDataByRankTypeInstanceId, RankType) == 0x000000, "Member 'RankService_GetRankDataByRankTypeInstanceId::RankType' has a wrong offset!");
static_assert(offsetof(RankService_GetRankDataByRankTypeInstanceId, RankInstanceId) == 0x000004, "Member 'RankService_GetRankDataByRankTypeInstanceId::RankInstanceId' has a wrong offset!");
static_assert(offsetof(RankService_GetRankDataByRankTypeInstanceId, ReturnValue) == 0x000008, "Member 'RankService_GetRankDataByRankTypeInstanceId::ReturnValue' has a wrong offset!");

// Function TGFGame.RankService.GetRankDatas
// 0x0010 (0x0010 - 0x0000)
struct RankService_GetRankDatas final
{
public:
	TArray<class URankUserData*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankService_GetRankDatas) == 0x000008, "Wrong alignment on RankService_GetRankDatas");
static_assert(sizeof(RankService_GetRankDatas) == 0x000010, "Wrong size on RankService_GetRankDatas");
static_assert(offsetof(RankService_GetRankDatas, ReturnValue) == 0x000000, "Member 'RankService_GetRankDatas::ReturnValue' has a wrong offset!");

// Function TGFGame.RankService.SendRankGetSelfRankRequest
// 0x0020 (0x0020 - 0x0000)
struct RankService_SendRankGetSelfRankRequest final
{
public:
	int32                                         RankType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankInstance;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubRankType;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubRankInstance;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RoleGuid;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpCount;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DownCount;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankService_SendRankGetSelfRankRequest) == 0x000008, "Wrong alignment on RankService_SendRankGetSelfRankRequest");
static_assert(sizeof(RankService_SendRankGetSelfRankRequest) == 0x000020, "Wrong size on RankService_SendRankGetSelfRankRequest");
static_assert(offsetof(RankService_SendRankGetSelfRankRequest, RankType) == 0x000000, "Member 'RankService_SendRankGetSelfRankRequest::RankType' has a wrong offset!");
static_assert(offsetof(RankService_SendRankGetSelfRankRequest, RankInstance) == 0x000004, "Member 'RankService_SendRankGetSelfRankRequest::RankInstance' has a wrong offset!");
static_assert(offsetof(RankService_SendRankGetSelfRankRequest, SubRankType) == 0x000008, "Member 'RankService_SendRankGetSelfRankRequest::SubRankType' has a wrong offset!");
static_assert(offsetof(RankService_SendRankGetSelfRankRequest, SubRankInstance) == 0x00000C, "Member 'RankService_SendRankGetSelfRankRequest::SubRankInstance' has a wrong offset!");
static_assert(offsetof(RankService_SendRankGetSelfRankRequest, RoleGuid) == 0x000010, "Member 'RankService_SendRankGetSelfRankRequest::RoleGuid' has a wrong offset!");
static_assert(offsetof(RankService_SendRankGetSelfRankRequest, UpCount) == 0x000018, "Member 'RankService_SendRankGetSelfRankRequest::UpCount' has a wrong offset!");
static_assert(offsetof(RankService_SendRankGetSelfRankRequest, DownCount) == 0x00001C, "Member 'RankService_SendRankGetSelfRankRequest::DownCount' has a wrong offset!");

// Function TGFGame.RankService.SendRankGetSpecifyRequest
// 0x0018 (0x0018 - 0x0000)
struct RankService_SendRankGetSpecifyRequest final
{
public:
	int32                                         RankType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankInstance;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubRankType;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubRankInstance;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartNo;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankService_SendRankGetSpecifyRequest) == 0x000004, "Wrong alignment on RankService_SendRankGetSpecifyRequest");
static_assert(sizeof(RankService_SendRankGetSpecifyRequest) == 0x000018, "Wrong size on RankService_SendRankGetSpecifyRequest");
static_assert(offsetof(RankService_SendRankGetSpecifyRequest, RankType) == 0x000000, "Member 'RankService_SendRankGetSpecifyRequest::RankType' has a wrong offset!");
static_assert(offsetof(RankService_SendRankGetSpecifyRequest, RankInstance) == 0x000004, "Member 'RankService_SendRankGetSpecifyRequest::RankInstance' has a wrong offset!");
static_assert(offsetof(RankService_SendRankGetSpecifyRequest, SubRankType) == 0x000008, "Member 'RankService_SendRankGetSpecifyRequest::SubRankType' has a wrong offset!");
static_assert(offsetof(RankService_SendRankGetSpecifyRequest, SubRankInstance) == 0x00000C, "Member 'RankService_SendRankGetSpecifyRequest::SubRankInstance' has a wrong offset!");
static_assert(offsetof(RankService_SendRankGetSpecifyRequest, StartNo) == 0x000010, "Member 'RankService_SendRankGetSpecifyRequest::StartNo' has a wrong offset!");
static_assert(offsetof(RankService_SendRankGetSpecifyRequest, Count) == 0x000014, "Member 'RankService_SendRankGetSpecifyRequest::Count' has a wrong offset!");

// Function TGFGame.RankService.UpdateOrAddRankData
// 0x0018 (0x0018 - 0x0000)
struct RankService_UpdateOrAddRankData final
{
public:
	TArray<class URankUserData*>                  SourceData;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class URankUserData*                          TargetData;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankService_UpdateOrAddRankData) == 0x000008, "Wrong alignment on RankService_UpdateOrAddRankData");
static_assert(sizeof(RankService_UpdateOrAddRankData) == 0x000018, "Wrong size on RankService_UpdateOrAddRankData");
static_assert(offsetof(RankService_UpdateOrAddRankData, SourceData) == 0x000000, "Member 'RankService_UpdateOrAddRankData::SourceData' has a wrong offset!");
static_assert(offsetof(RankService_UpdateOrAddRankData, TargetData) == 0x000010, "Member 'RankService_UpdateOrAddRankData::TargetData' has a wrong offset!");

// Function TGFGame.ReportService.AddGameReport
// 0x0090 (0x0090 - 0x0000)
struct ReportService_AddGameReport final
{
public:
	struct FTGFReportRecord                       Record;                                            // 0x0000(0x0090)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReportService_AddGameReport) == 0x000008, "Wrong alignment on ReportService_AddGameReport");
static_assert(sizeof(ReportService_AddGameReport) == 0x000090, "Wrong size on ReportService_AddGameReport");
static_assert(offsetof(ReportService_AddGameReport, Record) == 0x000000, "Member 'ReportService_AddGameReport::Record' has a wrong offset!");

// Function TGFGame.ReportService.OnSendReport
// 0x0090 (0x0090 - 0x0000)
struct ReportService_OnSendReport final
{
public:
	struct FTGFReportRecord                       Record;                                            // 0x0000(0x0090)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReportService_OnSendReport) == 0x000008, "Wrong alignment on ReportService_OnSendReport");
static_assert(sizeof(ReportService_OnSendReport) == 0x000090, "Wrong size on ReportService_OnSendReport");
static_assert(offsetof(ReportService_OnSendReport, Record) == 0x000000, "Member 'ReportService_OnSendReport::Record' has a wrong offset!");

// Function TGFGame.RoleFunctionLibrary.GetExcelRoleTypeById
// 0x0010 (0x0010 - 0x0000)
struct RoleFunctionLibrary_GetExcelRoleTypeById final
{
public:
	int32                                         RoleTypeId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UExcelLoaderTgfConfigExcelRoleType*     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleFunctionLibrary_GetExcelRoleTypeById) == 0x000008, "Wrong alignment on RoleFunctionLibrary_GetExcelRoleTypeById");
static_assert(sizeof(RoleFunctionLibrary_GetExcelRoleTypeById) == 0x000010, "Wrong size on RoleFunctionLibrary_GetExcelRoleTypeById");
static_assert(offsetof(RoleFunctionLibrary_GetExcelRoleTypeById, RoleTypeId) == 0x000000, "Member 'RoleFunctionLibrary_GetExcelRoleTypeById::RoleTypeId' has a wrong offset!");
static_assert(offsetof(RoleFunctionLibrary_GetExcelRoleTypeById, ReturnValue) == 0x000008, "Member 'RoleFunctionLibrary_GetExcelRoleTypeById::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleFunctionLibrary.GetExcelRoleTypeList
// 0x0018 (0x0018 - 0x0000)
struct RoleFunctionLibrary_GetExcelRoleTypeList final
{
public:
	ETGFProtoTgfEnForceType                       InForceType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UExcelLoaderTgfConfigExcelRoleType*> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleFunctionLibrary_GetExcelRoleTypeList) == 0x000008, "Wrong alignment on RoleFunctionLibrary_GetExcelRoleTypeList");
static_assert(sizeof(RoleFunctionLibrary_GetExcelRoleTypeList) == 0x000018, "Wrong size on RoleFunctionLibrary_GetExcelRoleTypeList");
static_assert(offsetof(RoleFunctionLibrary_GetExcelRoleTypeList, InForceType) == 0x000000, "Member 'RoleFunctionLibrary_GetExcelRoleTypeList::InForceType' has a wrong offset!");
static_assert(offsetof(RoleFunctionLibrary_GetExcelRoleTypeList, ReturnValue) == 0x000008, "Member 'RoleFunctionLibrary_GetExcelRoleTypeList::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleFunctionLibrary.GetRoleHeadPortraitSourceRelativePath
// 0x0018 (0x0018 - 0x0000)
struct RoleFunctionLibrary_GetRoleHeadPortraitSourceRelativePath final
{
public:
	int32                                         RowId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleFunctionLibrary_GetRoleHeadPortraitSourceRelativePath) == 0x000008, "Wrong alignment on RoleFunctionLibrary_GetRoleHeadPortraitSourceRelativePath");
static_assert(sizeof(RoleFunctionLibrary_GetRoleHeadPortraitSourceRelativePath) == 0x000018, "Wrong size on RoleFunctionLibrary_GetRoleHeadPortraitSourceRelativePath");
static_assert(offsetof(RoleFunctionLibrary_GetRoleHeadPortraitSourceRelativePath, RowId) == 0x000000, "Member 'RoleFunctionLibrary_GetRoleHeadPortraitSourceRelativePath::RowId' has a wrong offset!");
static_assert(offsetof(RoleFunctionLibrary_GetRoleHeadPortraitSourceRelativePath, ReturnValue) == 0x000008, "Member 'RoleFunctionLibrary_GetRoleHeadPortraitSourceRelativePath::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleFunctionLibrary.GetRoleTypeIdByTypeName
// 0x0018 (0x0018 - 0x0000)
struct RoleFunctionLibrary_GetRoleTypeIdByTypeName final
{
public:
	class FString                                 RoleTypeName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RoleFunctionLibrary_GetRoleTypeIdByTypeName) == 0x000008, "Wrong alignment on RoleFunctionLibrary_GetRoleTypeIdByTypeName");
static_assert(sizeof(RoleFunctionLibrary_GetRoleTypeIdByTypeName) == 0x000018, "Wrong size on RoleFunctionLibrary_GetRoleTypeIdByTypeName");
static_assert(offsetof(RoleFunctionLibrary_GetRoleTypeIdByTypeName, RoleTypeName) == 0x000000, "Member 'RoleFunctionLibrary_GetRoleTypeIdByTypeName::RoleTypeName' has a wrong offset!");
static_assert(offsetof(RoleFunctionLibrary_GetRoleTypeIdByTypeName, ReturnValue) == 0x000010, "Member 'RoleFunctionLibrary_GetRoleTypeIdByTypeName::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleFunctionLibrary.GetRoleUeSkinIds
// 0x0020 (0x0020 - 0x0000)
struct RoleFunctionLibrary_GetRoleUeSkinIds final
{
public:
	TArray<int32>                                 SkinIds;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleFunctionLibrary_GetRoleUeSkinIds) == 0x000008, "Wrong alignment on RoleFunctionLibrary_GetRoleUeSkinIds");
static_assert(sizeof(RoleFunctionLibrary_GetRoleUeSkinIds) == 0x000020, "Wrong size on RoleFunctionLibrary_GetRoleUeSkinIds");
static_assert(offsetof(RoleFunctionLibrary_GetRoleUeSkinIds, SkinIds) == 0x000000, "Member 'RoleFunctionLibrary_GetRoleUeSkinIds::SkinIds' has a wrong offset!");
static_assert(offsetof(RoleFunctionLibrary_GetRoleUeSkinIds, ReturnValue) == 0x000010, "Member 'RoleFunctionLibrary_GetRoleUeSkinIds::ReturnValue' has a wrong offset!");

// Function TGFGame.RoleFunctionLibrary.SortCareerConfigList
// 0x0020 (0x0020 - 0x0000)
struct RoleFunctionLibrary_SortCareerConfigList final
{
public:
	TArray<class UExcelLoaderTgfConfigExcelRoleType*> CareerConfigList;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UExcelLoaderTgfConfigExcelRoleType*> ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleFunctionLibrary_SortCareerConfigList) == 0x000008, "Wrong alignment on RoleFunctionLibrary_SortCareerConfigList");
static_assert(sizeof(RoleFunctionLibrary_SortCareerConfigList) == 0x000020, "Wrong size on RoleFunctionLibrary_SortCareerConfigList");
static_assert(offsetof(RoleFunctionLibrary_SortCareerConfigList, CareerConfigList) == 0x000000, "Member 'RoleFunctionLibrary_SortCareerConfigList::CareerConfigList' has a wrong offset!");
static_assert(offsetof(RoleFunctionLibrary_SortCareerConfigList, ReturnValue) == 0x000010, "Member 'RoleFunctionLibrary_SortCareerConfigList::ReturnValue' has a wrong offset!");

// Function TGFGame.RoomService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct RoomService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomService_OnGameLogout) == 0x000008, "Wrong alignment on RoomService_OnGameLogout");
static_assert(sizeof(RoomService_OnGameLogout) == 0x000008, "Wrong size on RoomService_OnGameLogout");
static_assert(offsetof(RoomService_OnGameLogout, Args) == 0x000000, "Member 'RoomService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.RoomService.OnNetworkManagerEnterState
// 0x0008 (0x0008 - 0x0000)
struct RoomService_OnNetworkManagerEnterState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomService_OnNetworkManagerEnterState) == 0x000008, "Wrong alignment on RoomService_OnNetworkManagerEnterState");
static_assert(sizeof(RoomService_OnNetworkManagerEnterState) == 0x000008, "Wrong size on RoomService_OnNetworkManagerEnterState");
static_assert(offsetof(RoomService_OnNetworkManagerEnterState, Args) == 0x000000, "Member 'RoomService_OnNetworkManagerEnterState::Args' has a wrong offset!");

// Function TGFGame.RoomService.OnNetworkManagerExitState
// 0x0008 (0x0008 - 0x0000)
struct RoomService_OnNetworkManagerExitState final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomService_OnNetworkManagerExitState) == 0x000008, "Wrong alignment on RoomService_OnNetworkManagerExitState");
static_assert(sizeof(RoomService_OnNetworkManagerExitState) == 0x000008, "Wrong size on RoomService_OnNetworkManagerExitState");
static_assert(offsetof(RoomService_OnNetworkManagerExitState, Args) == 0x000000, "Member 'RoomService_OnNetworkManagerExitState::Args' has a wrong offset!");

// Function TGFGame.RoomService.SetShouldPromptBattleVersionNotCompatible
// 0x0001 (0x0001 - 0x0000)
struct RoomService_SetShouldPromptBattleVersionNotCompatible final
{
public:
	bool                                          ShouldPrompt;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomService_SetShouldPromptBattleVersionNotCompatible) == 0x000001, "Wrong alignment on RoomService_SetShouldPromptBattleVersionNotCompatible");
static_assert(sizeof(RoomService_SetShouldPromptBattleVersionNotCompatible) == 0x000001, "Wrong size on RoomService_SetShouldPromptBattleVersionNotCompatible");
static_assert(offsetof(RoomService_SetShouldPromptBattleVersionNotCompatible, ShouldPrompt) == 0x000000, "Member 'RoomService_SetShouldPromptBattleVersionNotCompatible::ShouldPrompt' has a wrong offset!");

// Function TGFGame.RoomService.GetShouldPromptBattleVersionNotCompatible
// 0x0001 (0x0001 - 0x0000)
struct RoomService_GetShouldPromptBattleVersionNotCompatible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomService_GetShouldPromptBattleVersionNotCompatible) == 0x000001, "Wrong alignment on RoomService_GetShouldPromptBattleVersionNotCompatible");
static_assert(sizeof(RoomService_GetShouldPromptBattleVersionNotCompatible) == 0x000001, "Wrong size on RoomService_GetShouldPromptBattleVersionNotCompatible");
static_assert(offsetof(RoomService_GetShouldPromptBattleVersionNotCompatible, ReturnValue) == 0x000000, "Member 'RoomService_GetShouldPromptBattleVersionNotCompatible::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKAccountService.UseLIPass
// 0x0001 (0x0001 - 0x0000)
struct SDKAccountService_UseLIPass final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKAccountService_UseLIPass) == 0x000001, "Wrong alignment on SDKAccountService_UseLIPass");
static_assert(sizeof(SDKAccountService_UseLIPass) == 0x000001, "Wrong size on SDKAccountService_UseLIPass");
static_assert(offsetof(SDKAccountService_UseLIPass, ReturnValue) == 0x000000, "Member 'SDKAccountService_UseLIPass::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKAccountService.LISetUIRoot
// 0x0008 (0x0008 - 0x0000)
struct SDKAccountService_LISetUIRoot final
{
public:
	class UCanvasPanel*                           UiRoot;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKAccountService_LISetUIRoot) == 0x000008, "Wrong alignment on SDKAccountService_LISetUIRoot");
static_assert(sizeof(SDKAccountService_LISetUIRoot) == 0x000008, "Wrong size on SDKAccountService_LISetUIRoot");
static_assert(offsetof(SDKAccountService_LISetUIRoot, UiRoot) == 0x000000, "Member 'SDKAccountService_LISetUIRoot::UiRoot' has a wrong offset!");

// Function TGFGame.SDKAccountService.GetAdultAge
// 0x0004 (0x0004 - 0x0000)
struct SDKAccountService_GetAdultAge final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKAccountService_GetAdultAge) == 0x000004, "Wrong alignment on SDKAccountService_GetAdultAge");
static_assert(sizeof(SDKAccountService_GetAdultAge) == 0x000004, "Wrong size on SDKAccountService_GetAdultAge");
static_assert(offsetof(SDKAccountService_GetAdultAge, ReturnValue) == 0x000000, "Member 'SDKAccountService_GetAdultAge::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKAccountService.GetAdultCheckStatus
// 0x0004 (0x0004 - 0x0000)
struct SDKAccountService_GetAdultCheckStatus final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKAccountService_GetAdultCheckStatus) == 0x000004, "Wrong alignment on SDKAccountService_GetAdultCheckStatus");
static_assert(sizeof(SDKAccountService_GetAdultCheckStatus) == 0x000004, "Wrong size on SDKAccountService_GetAdultCheckStatus");
static_assert(offsetof(SDKAccountService_GetAdultCheckStatus, ReturnValue) == 0x000000, "Member 'SDKAccountService_GetAdultCheckStatus::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKAccountService.GetChannelId
// 0x0004 (0x0004 - 0x0000)
struct SDKAccountService_GetChannelId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKAccountService_GetChannelId) == 0x000004, "Wrong alignment on SDKAccountService_GetChannelId");
static_assert(sizeof(SDKAccountService_GetChannelId) == 0x000004, "Wrong size on SDKAccountService_GetChannelId");
static_assert(offsetof(SDKAccountService_GetChannelId, ReturnValue) == 0x000000, "Member 'SDKAccountService_GetChannelId::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKAccountService.GetOpenId
// 0x0010 (0x0010 - 0x0000)
struct SDKAccountService_GetOpenId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKAccountService_GetOpenId) == 0x000008, "Wrong alignment on SDKAccountService_GetOpenId");
static_assert(sizeof(SDKAccountService_GetOpenId) == 0x000010, "Wrong size on SDKAccountService_GetOpenId");
static_assert(offsetof(SDKAccountService_GetOpenId, ReturnValue) == 0x000000, "Member 'SDKAccountService_GetOpenId::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKAccountService.GetRegion
// 0x0010 (0x0010 - 0x0000)
struct SDKAccountService_GetRegion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKAccountService_GetRegion) == 0x000008, "Wrong alignment on SDKAccountService_GetRegion");
static_assert(sizeof(SDKAccountService_GetRegion) == 0x000010, "Wrong size on SDKAccountService_GetRegion");
static_assert(offsetof(SDKAccountService_GetRegion, ReturnValue) == 0x000000, "Member 'SDKAccountService_GetRegion::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKAccountService.GetSteamId
// 0x0010 (0x0010 - 0x0000)
struct SDKAccountService_GetSteamId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKAccountService_GetSteamId) == 0x000008, "Wrong alignment on SDKAccountService_GetSteamId");
static_assert(sizeof(SDKAccountService_GetSteamId) == 0x000010, "Wrong size on SDKAccountService_GetSteamId");
static_assert(offsetof(SDKAccountService_GetSteamId, ReturnValue) == 0x000000, "Member 'SDKAccountService_GetSteamId::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKAccountService.GetSteamUserName
// 0x0010 (0x0010 - 0x0000)
struct SDKAccountService_GetSteamUserName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKAccountService_GetSteamUserName) == 0x000008, "Wrong alignment on SDKAccountService_GetSteamUserName");
static_assert(sizeof(SDKAccountService_GetSteamUserName) == 0x000010, "Wrong size on SDKAccountService_GetSteamUserName");
static_assert(offsetof(SDKAccountService_GetSteamUserName, ReturnValue) == 0x000000, "Member 'SDKAccountService_GetSteamUserName::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKService.GetConfig
// 0x0020 (0x0020 - 0x0000)
struct SDKService_GetConfig final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKService_GetConfig) == 0x000008, "Wrong alignment on SDKService_GetConfig");
static_assert(sizeof(SDKService_GetConfig) == 0x000020, "Wrong size on SDKService_GetConfig");
static_assert(offsetof(SDKService_GetConfig, Key) == 0x000000, "Member 'SDKService_GetConfig::Key' has a wrong offset!");
static_assert(offsetof(SDKService_GetConfig, ReturnValue) == 0x000010, "Member 'SDKService_GetConfig::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKService.GetINTLGameId
// 0x0010 (0x0010 - 0x0000)
struct SDKService_GetINTLGameId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKService_GetINTLGameId) == 0x000008, "Wrong alignment on SDKService_GetINTLGameId");
static_assert(sizeof(SDKService_GetINTLGameId) == 0x000010, "Wrong size on SDKService_GetINTLGameId");
static_assert(offsetof(SDKService_GetINTLGameId, ReturnValue) == 0x000000, "Member 'SDKService_GetINTLGameId::ReturnValue' has a wrong offset!");

// Function TGFGame.SDKWebviewService.Lua_OnWebViewResult
// 0x0018 (0x0018 - 0x0000)
struct SDKWebviewService_Lua_OnWebViewResult final
{
public:
	int32                                         MsgType;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MsgJsonData;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SDKWebviewService_Lua_OnWebViewResult) == 0x000008, "Wrong alignment on SDKWebviewService_Lua_OnWebViewResult");
static_assert(sizeof(SDKWebviewService_Lua_OnWebViewResult) == 0x000018, "Wrong size on SDKWebviewService_Lua_OnWebViewResult");
static_assert(offsetof(SDKWebviewService_Lua_OnWebViewResult, MsgType) == 0x000000, "Member 'SDKWebviewService_Lua_OnWebViewResult::MsgType' has a wrong offset!");
static_assert(offsetof(SDKWebviewService_Lua_OnWebViewResult, MsgJsonData) == 0x000008, "Member 'SDKWebviewService_Lua_OnWebViewResult::MsgJsonData' has a wrong offset!");

// Function TGFGame.SDKWebviewService.OpenUrl
// 0x0030 (0x0030 - 0x0000)
struct SDKWebviewService_OpenUrl final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScreenOrientationValue;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FullScreenValue;                                   // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseURLEncodeValue;                                 // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBrowserValue;                                    // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExtraJsonValue;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEncryptUrl;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SDKWebviewService_OpenUrl) == 0x000008, "Wrong alignment on SDKWebviewService_OpenUrl");
static_assert(sizeof(SDKWebviewService_OpenUrl) == 0x000030, "Wrong size on SDKWebviewService_OpenUrl");
static_assert(offsetof(SDKWebviewService_OpenUrl, URL) == 0x000000, "Member 'SDKWebviewService_OpenUrl::URL' has a wrong offset!");
static_assert(offsetof(SDKWebviewService_OpenUrl, ScreenOrientationValue) == 0x000010, "Member 'SDKWebviewService_OpenUrl::ScreenOrientationValue' has a wrong offset!");
static_assert(offsetof(SDKWebviewService_OpenUrl, FullScreenValue) == 0x000014, "Member 'SDKWebviewService_OpenUrl::FullScreenValue' has a wrong offset!");
static_assert(offsetof(SDKWebviewService_OpenUrl, UseURLEncodeValue) == 0x000015, "Member 'SDKWebviewService_OpenUrl::UseURLEncodeValue' has a wrong offset!");
static_assert(offsetof(SDKWebviewService_OpenUrl, IsBrowserValue) == 0x000016, "Member 'SDKWebviewService_OpenUrl::IsBrowserValue' has a wrong offset!");
static_assert(offsetof(SDKWebviewService_OpenUrl, ExtraJsonValue) == 0x000018, "Member 'SDKWebviewService_OpenUrl::ExtraJsonValue' has a wrong offset!");
static_assert(offsetof(SDKWebviewService_OpenUrl, UseEncryptUrl) == 0x000028, "Member 'SDKWebviewService_OpenUrl::UseEncryptUrl' has a wrong offset!");

// Function TGFGame.SDKWebviewService.OpenUrlByExternalUI
// 0x0018 (0x0018 - 0x0000)
struct SDKWebviewService_OpenUrlByExternalUI final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Modal;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseURLEncodeValue;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEncryptUrl;                                     // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SDKWebviewService_OpenUrlByExternalUI) == 0x000008, "Wrong alignment on SDKWebviewService_OpenUrlByExternalUI");
static_assert(sizeof(SDKWebviewService_OpenUrlByExternalUI) == 0x000018, "Wrong size on SDKWebviewService_OpenUrlByExternalUI");
static_assert(offsetof(SDKWebviewService_OpenUrlByExternalUI, URL) == 0x000000, "Member 'SDKWebviewService_OpenUrlByExternalUI::URL' has a wrong offset!");
static_assert(offsetof(SDKWebviewService_OpenUrlByExternalUI, Modal) == 0x000010, "Member 'SDKWebviewService_OpenUrlByExternalUI::Modal' has a wrong offset!");
static_assert(offsetof(SDKWebviewService_OpenUrlByExternalUI, UseURLEncodeValue) == 0x000011, "Member 'SDKWebviewService_OpenUrlByExternalUI::UseURLEncodeValue' has a wrong offset!");
static_assert(offsetof(SDKWebviewService_OpenUrlByExternalUI, UseEncryptUrl) == 0x000012, "Member 'SDKWebviewService_OpenUrlByExternalUI::UseEncryptUrl' has a wrong offset!");

// Function TGFGame.SelectMapService.GetMapNameIdByMapIdAndDiffSelect
// 0x0018 (0x0018 - 0x0000)
struct SelectMapService_GetMapNameIdByMapIdAndDiffSelect final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultySelect;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectMapService_GetMapNameIdByMapIdAndDiffSelect) == 0x000008, "Wrong alignment on SelectMapService_GetMapNameIdByMapIdAndDiffSelect");
static_assert(sizeof(SelectMapService_GetMapNameIdByMapIdAndDiffSelect) == 0x000018, "Wrong size on SelectMapService_GetMapNameIdByMapIdAndDiffSelect");
static_assert(offsetof(SelectMapService_GetMapNameIdByMapIdAndDiffSelect, MapId) == 0x000000, "Member 'SelectMapService_GetMapNameIdByMapIdAndDiffSelect::MapId' has a wrong offset!");
static_assert(offsetof(SelectMapService_GetMapNameIdByMapIdAndDiffSelect, DifficultySelect) == 0x000004, "Member 'SelectMapService_GetMapNameIdByMapIdAndDiffSelect::DifficultySelect' has a wrong offset!");
static_assert(offsetof(SelectMapService_GetMapNameIdByMapIdAndDiffSelect, ReturnValue) == 0x000008, "Member 'SelectMapService_GetMapNameIdByMapIdAndDiffSelect::ReturnValue' has a wrong offset!");

// Function TGFGame.SelectServerService.SetCurrentServerItem
// 0x0008 (0x0008 - 0x0000)
struct SelectServerService_SetCurrentServerItem final
{
public:
	class UServerItem*                            ServerItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectServerService_SetCurrentServerItem) == 0x000008, "Wrong alignment on SelectServerService_SetCurrentServerItem");
static_assert(sizeof(SelectServerService_SetCurrentServerItem) == 0x000008, "Wrong size on SelectServerService_SetCurrentServerItem");
static_assert(offsetof(SelectServerService_SetCurrentServerItem, ServerItem) == 0x000000, "Member 'SelectServerService_SetCurrentServerItem::ServerItem' has a wrong offset!");

// Function TGFGame.SelectServerService.GetCategories
// 0x0010 (0x0010 - 0x0000)
struct SelectServerService_GetCategories final
{
public:
	TArray<class UCategory*>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectServerService_GetCategories) == 0x000008, "Wrong alignment on SelectServerService_GetCategories");
static_assert(sizeof(SelectServerService_GetCategories) == 0x000010, "Wrong size on SelectServerService_GetCategories");
static_assert(offsetof(SelectServerService_GetCategories, ReturnValue) == 0x000000, "Member 'SelectServerService_GetCategories::ReturnValue' has a wrong offset!");

// Function TGFGame.SelectServerService.GetCurrentServerItem
// 0x0008 (0x0008 - 0x0000)
struct SelectServerService_GetCurrentServerItem final
{
public:
	class UServerItem*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectServerService_GetCurrentServerItem) == 0x000008, "Wrong alignment on SelectServerService_GetCurrentServerItem");
static_assert(sizeof(SelectServerService_GetCurrentServerItem) == 0x000008, "Wrong size on SelectServerService_GetCurrentServerItem");
static_assert(offsetof(SelectServerService_GetCurrentServerItem, ReturnValue) == 0x000000, "Member 'SelectServerService_GetCurrentServerItem::ReturnValue' has a wrong offset!");

// Function TGFGame.SelectServerService.GetDefaultServerItem
// 0x0008 (0x0008 - 0x0000)
struct SelectServerService_GetDefaultServerItem final
{
public:
	class UServerItem*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectServerService_GetDefaultServerItem) == 0x000008, "Wrong alignment on SelectServerService_GetDefaultServerItem");
static_assert(sizeof(SelectServerService_GetDefaultServerItem) == 0x000008, "Wrong size on SelectServerService_GetDefaultServerItem");
static_assert(offsetof(SelectServerService_GetDefaultServerItem, ReturnValue) == 0x000000, "Member 'SelectServerService_GetDefaultServerItem::ReturnValue' has a wrong offset!");

// Function TGFGame.SelectServerService.GetServerCount
// 0x0004 (0x0004 - 0x0000)
struct SelectServerService_GetServerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectServerService_GetServerCount) == 0x000004, "Wrong alignment on SelectServerService_GetServerCount");
static_assert(sizeof(SelectServerService_GetServerCount) == 0x000004, "Wrong size on SelectServerService_GetServerCount");
static_assert(offsetof(SelectServerService_GetServerCount, ReturnValue) == 0x000000, "Member 'SelectServerService_GetServerCount::ReturnValue' has a wrong offset!");

// Function TGFGame.SelectServerService.GetServerItem
// 0x0010 (0x0010 - 0x0000)
struct SelectServerService_GetServerItem final
{
public:
	int32                                         ServerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerItem*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectServerService_GetServerItem) == 0x000008, "Wrong alignment on SelectServerService_GetServerItem");
static_assert(sizeof(SelectServerService_GetServerItem) == 0x000010, "Wrong size on SelectServerService_GetServerItem");
static_assert(offsetof(SelectServerService_GetServerItem, ServerId) == 0x000000, "Member 'SelectServerService_GetServerItem::ServerId' has a wrong offset!");
static_assert(offsetof(SelectServerService_GetServerItem, ReturnValue) == 0x000008, "Member 'SelectServerService_GetServerItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TaskFunctionLibrary.GetAdventureDetailConfigRow
// 0x0080 (0x0080 - 0x0000)
struct TaskFunctionLibrary_GetAdventureDetailConfigRow final
{
public:
	int32                                         AdventrureID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFGameAdventureDetailConfigRow       AdventureConfigRow;                                // 0x0008(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TaskFunctionLibrary_GetAdventureDetailConfigRow) == 0x000008, "Wrong alignment on TaskFunctionLibrary_GetAdventureDetailConfigRow");
static_assert(sizeof(TaskFunctionLibrary_GetAdventureDetailConfigRow) == 0x000080, "Wrong size on TaskFunctionLibrary_GetAdventureDetailConfigRow");
static_assert(offsetof(TaskFunctionLibrary_GetAdventureDetailConfigRow, AdventrureID) == 0x000000, "Member 'TaskFunctionLibrary_GetAdventureDetailConfigRow::AdventrureID' has a wrong offset!");
static_assert(offsetof(TaskFunctionLibrary_GetAdventureDetailConfigRow, AdventureConfigRow) == 0x000008, "Member 'TaskFunctionLibrary_GetAdventureDetailConfigRow::AdventureConfigRow' has a wrong offset!");
static_assert(offsetof(TaskFunctionLibrary_GetAdventureDetailConfigRow, ReturnValue) == 0x000078, "Member 'TaskFunctionLibrary_GetAdventureDetailConfigRow::ReturnValue' has a wrong offset!");

// Function TGFGame.TaskFunctionLibrary.GetSteamAchievementConfigRow
// 0x0040 (0x0040 - 0x0000)
struct TaskFunctionLibrary_GetSteamAchievementConfigRow final
{
public:
	ETGFInGameRookieTaskType                      TaskType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFSteamAchievementTaskParamConfigRow SteamAchievementConfigRow;                         // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TaskFunctionLibrary_GetSteamAchievementConfigRow) == 0x000008, "Wrong alignment on TaskFunctionLibrary_GetSteamAchievementConfigRow");
static_assert(sizeof(TaskFunctionLibrary_GetSteamAchievementConfigRow) == 0x000040, "Wrong size on TaskFunctionLibrary_GetSteamAchievementConfigRow");
static_assert(offsetof(TaskFunctionLibrary_GetSteamAchievementConfigRow, TaskType) == 0x000000, "Member 'TaskFunctionLibrary_GetSteamAchievementConfigRow::TaskType' has a wrong offset!");
static_assert(offsetof(TaskFunctionLibrary_GetSteamAchievementConfigRow, SteamAchievementConfigRow) == 0x000008, "Member 'TaskFunctionLibrary_GetSteamAchievementConfigRow::SteamAchievementConfigRow' has a wrong offset!");
static_assert(offsetof(TaskFunctionLibrary_GetSteamAchievementConfigRow, ReturnValue) == 0x000038, "Member 'TaskFunctionLibrary_GetSteamAchievementConfigRow::ReturnValue' has a wrong offset!");

// Function TGFGame.TaskFunctionLibrary.ReportClientTaskProgressValue
// 0x0018 (0x0018 - 0x0000)
struct TaskFunctionLibrary_ReportClientTaskProgressValue final
{
public:
	ETGFInGameRookieTaskType                      RookieTaskType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TaskFunctionLibrary_ReportClientTaskProgressValue) == 0x000008, "Wrong alignment on TaskFunctionLibrary_ReportClientTaskProgressValue");
static_assert(sizeof(TaskFunctionLibrary_ReportClientTaskProgressValue) == 0x000018, "Wrong size on TaskFunctionLibrary_ReportClientTaskProgressValue");
static_assert(offsetof(TaskFunctionLibrary_ReportClientTaskProgressValue, RookieTaskType) == 0x000000, "Member 'TaskFunctionLibrary_ReportClientTaskProgressValue::RookieTaskType' has a wrong offset!");
static_assert(offsetof(TaskFunctionLibrary_ReportClientTaskProgressValue, Value) == 0x000008, "Member 'TaskFunctionLibrary_ReportClientTaskProgressValue::Value' has a wrong offset!");
static_assert(offsetof(TaskFunctionLibrary_ReportClientTaskProgressValue, ReturnValue) == 0x000010, "Member 'TaskFunctionLibrary_ReportClientTaskProgressValue::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFTaskItemData.AddProgressValue
// 0x0010 (0x0010 - 0x0000)
struct TGFTaskItemData_AddProgressValue final
{
public:
	int32                                         ProgressType;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFTaskItemData_AddProgressValue) == 0x000008, "Wrong alignment on TGFTaskItemData_AddProgressValue");
static_assert(sizeof(TGFTaskItemData_AddProgressValue) == 0x000010, "Wrong size on TGFTaskItemData_AddProgressValue");
static_assert(offsetof(TGFTaskItemData_AddProgressValue, ProgressType) == 0x000000, "Member 'TGFTaskItemData_AddProgressValue::ProgressType' has a wrong offset!");
static_assert(offsetof(TGFTaskItemData_AddProgressValue, Value) == 0x000008, "Member 'TGFTaskItemData_AddProgressValue::Value' has a wrong offset!");

// Function TGFGame.TeamService.ApproveInvite
// 0x0008 (0x0008 - 0x0000)
struct TeamService_ApproveInvite final
{
public:
	const class UTeamInvite*                      TeamInvite;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_ApproveInvite) == 0x000008, "Wrong alignment on TeamService_ApproveInvite");
static_assert(sizeof(TeamService_ApproveInvite) == 0x000008, "Wrong size on TeamService_ApproveInvite");
static_assert(offsetof(TeamService_ApproveInvite, TeamInvite) == 0x000000, "Member 'TeamService_ApproveInvite::TeamInvite' has a wrong offset!");

// Function TGFGame.TeamService.CheckIsTeamMember
// 0x0018 (0x0018 - 0x0000)
struct TeamService_CheckIsTeamMember final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamService_CheckIsTeamMember) == 0x000008, "Wrong alignment on TeamService_CheckIsTeamMember");
static_assert(sizeof(TeamService_CheckIsTeamMember) == 0x000018, "Wrong size on TeamService_CheckIsTeamMember");
static_assert(offsetof(TeamService_CheckIsTeamMember, UserKey) == 0x000000, "Member 'TeamService_CheckIsTeamMember::UserKey' has a wrong offset!");
static_assert(offsetof(TeamService_CheckIsTeamMember, ReturnValue) == 0x000010, "Member 'TeamService_CheckIsTeamMember::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetCaptainUserKey
// 0x0010 (0x0010 - 0x0000)
struct TeamService_GetCaptainUserKey final
{
public:
	struct FUserKey                               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetCaptainUserKey) == 0x000008, "Wrong alignment on TeamService_GetCaptainUserKey");
static_assert(sizeof(TeamService_GetCaptainUserKey) == 0x000010, "Wrong size on TeamService_GetCaptainUserKey");
static_assert(offsetof(TeamService_GetCaptainUserKey, ReturnValue) == 0x000000, "Member 'TeamService_GetCaptainUserKey::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetFinderStatus
// 0x0001 (0x0001 - 0x0000)
struct TeamService_GetFinderStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetFinderStatus) == 0x000001, "Wrong alignment on TeamService_GetFinderStatus");
static_assert(sizeof(TeamService_GetFinderStatus) == 0x000001, "Wrong size on TeamService_GetFinderStatus");
static_assert(offsetof(TeamService_GetFinderStatus, ReturnValue) == 0x000000, "Member 'TeamService_GetFinderStatus::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetIsAllReady
// 0x0001 (0x0001 - 0x0000)
struct TeamService_GetIsAllReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetIsAllReady) == 0x000001, "Wrong alignment on TeamService_GetIsAllReady");
static_assert(sizeof(TeamService_GetIsAllReady) == 0x000001, "Wrong size on TeamService_GetIsAllReady");
static_assert(offsetof(TeamService_GetIsAllReady, ReturnValue) == 0x000000, "Member 'TeamService_GetIsAllReady::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetIsCaptain
// 0x0001 (0x0001 - 0x0000)
struct TeamService_GetIsCaptain final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetIsCaptain) == 0x000001, "Wrong alignment on TeamService_GetIsCaptain");
static_assert(sizeof(TeamService_GetIsCaptain) == 0x000001, "Wrong size on TeamService_GetIsCaptain");
static_assert(offsetof(TeamService_GetIsCaptain, ReturnValue) == 0x000000, "Member 'TeamService_GetIsCaptain::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetIsInTeam
// 0x0001 (0x0001 - 0x0000)
struct TeamService_GetIsInTeam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetIsInTeam) == 0x000001, "Wrong alignment on TeamService_GetIsInTeam");
static_assert(sizeof(TeamService_GetIsInTeam) == 0x000001, "Wrong size on TeamService_GetIsInTeam");
static_assert(offsetof(TeamService_GetIsInTeam, ReturnValue) == 0x000000, "Member 'TeamService_GetIsInTeam::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetIsNoOneInBattle
// 0x0001 (0x0001 - 0x0000)
struct TeamService_GetIsNoOneInBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetIsNoOneInBattle) == 0x000001, "Wrong alignment on TeamService_GetIsNoOneInBattle");
static_assert(sizeof(TeamService_GetIsNoOneInBattle) == 0x000001, "Wrong size on TeamService_GetIsNoOneInBattle");
static_assert(offsetof(TeamService_GetIsNoOneInBattle, ReturnValue) == 0x000000, "Member 'TeamService_GetIsNoOneInBattle::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetIsNoOneOffline
// 0x0001 (0x0001 - 0x0000)
struct TeamService_GetIsNoOneOffline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetIsNoOneOffline) == 0x000001, "Wrong alignment on TeamService_GetIsNoOneOffline");
static_assert(sizeof(TeamService_GetIsNoOneOffline) == 0x000001, "Wrong size on TeamService_GetIsNoOneOffline");
static_assert(offsetof(TeamService_GetIsNoOneOffline, ReturnValue) == 0x000000, "Member 'TeamService_GetIsNoOneOffline::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetIsReady
// 0x0001 (0x0001 - 0x0000)
struct TeamService_GetIsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetIsReady) == 0x000001, "Wrong alignment on TeamService_GetIsReady");
static_assert(sizeof(TeamService_GetIsReady) == 0x000001, "Wrong size on TeamService_GetIsReady");
static_assert(offsetof(TeamService_GetIsReady, ReturnValue) == 0x000000, "Member 'TeamService_GetIsReady::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetMemberCount
// 0x0004 (0x0004 - 0x0000)
struct TeamService_GetMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetMemberCount) == 0x000004, "Wrong alignment on TeamService_GetMemberCount");
static_assert(sizeof(TeamService_GetMemberCount) == 0x000004, "Wrong size on TeamService_GetMemberCount");
static_assert(offsetof(TeamService_GetMemberCount, ReturnValue) == 0x000000, "Member 'TeamService_GetMemberCount::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetSearchTeamStatus
// 0x0001 (0x0001 - 0x0000)
struct TeamService_GetSearchTeamStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetSearchTeamStatus) == 0x000001, "Wrong alignment on TeamService_GetSearchTeamStatus");
static_assert(sizeof(TeamService_GetSearchTeamStatus) == 0x000001, "Wrong size on TeamService_GetSearchTeamStatus");
static_assert(offsetof(TeamService_GetSearchTeamStatus, ReturnValue) == 0x000000, "Member 'TeamService_GetSearchTeamStatus::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetTeamId
// 0x0008 (0x0008 - 0x0000)
struct TeamService_GetTeamId final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetTeamId) == 0x000008, "Wrong alignment on TeamService_GetTeamId");
static_assert(sizeof(TeamService_GetTeamId) == 0x000008, "Wrong size on TeamService_GetTeamId");
static_assert(offsetof(TeamService_GetTeamId, ReturnValue) == 0x000000, "Member 'TeamService_GetTeamId::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetTeamInviteList
// 0x0010 (0x0010 - 0x0000)
struct TeamService_GetTeamInviteList final
{
public:
	TArray<class UTeamInvite*>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetTeamInviteList) == 0x000008, "Wrong alignment on TeamService_GetTeamInviteList");
static_assert(sizeof(TeamService_GetTeamInviteList) == 0x000010, "Wrong size on TeamService_GetTeamInviteList");
static_assert(offsetof(TeamService_GetTeamInviteList, ReturnValue) == 0x000000, "Member 'TeamService_GetTeamInviteList::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetTeamMemberList
// 0x0018 (0x0018 - 0x0000)
struct TeamService_GetTeamMemberList final
{
public:
	bool                                          bExceptSelf;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTeamMember*>                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetTeamMemberList) == 0x000008, "Wrong alignment on TeamService_GetTeamMemberList");
static_assert(sizeof(TeamService_GetTeamMemberList) == 0x000018, "Wrong size on TeamService_GetTeamMemberList");
static_assert(offsetof(TeamService_GetTeamMemberList, bExceptSelf) == 0x000000, "Member 'TeamService_GetTeamMemberList::bExceptSelf' has a wrong offset!");
static_assert(offsetof(TeamService_GetTeamMemberList, ReturnValue) == 0x000008, "Member 'TeamService_GetTeamMemberList::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GetTeamRole
// 0x0001 (0x0001 - 0x0000)
struct TeamService_GetTeamRole final
{
public:
	ETeamRole                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GetTeamRole) == 0x000001, "Wrong alignment on TeamService_GetTeamRole");
static_assert(sizeof(TeamService_GetTeamRole) == 0x000001, "Wrong size on TeamService_GetTeamRole");
static_assert(offsetof(TeamService_GetTeamRole, ReturnValue) == 0x000000, "Member 'TeamService_GetTeamRole::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamService.GiveCaptain
// 0x0010 (0x0010 - 0x0000)
struct TeamService_GiveCaptain final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_GiveCaptain) == 0x000008, "Wrong alignment on TeamService_GiveCaptain");
static_assert(sizeof(TeamService_GiveCaptain) == 0x000010, "Wrong size on TeamService_GiveCaptain");
static_assert(offsetof(TeamService_GiveCaptain, UserKey) == 0x000000, "Member 'TeamService_GiveCaptain::UserKey' has a wrong offset!");

// Function TGFGame.TeamService.Invite
// 0x0018 (0x0018 - 0x0000)
struct TeamService_Invite final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnTeamMethodType                  TeamMethod;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamService_Invite) == 0x000008, "Wrong alignment on TeamService_Invite");
static_assert(sizeof(TeamService_Invite) == 0x000018, "Wrong size on TeamService_Invite");
static_assert(offsetof(TeamService_Invite, UserKey) == 0x000000, "Member 'TeamService_Invite::UserKey' has a wrong offset!");
static_assert(offsetof(TeamService_Invite, TeamMethod) == 0x000010, "Member 'TeamService_Invite::TeamMethod' has a wrong offset!");

// Function TGFGame.TeamService.RejectInvite
// 0x0008 (0x0008 - 0x0000)
struct TeamService_RejectInvite final
{
public:
	const class UTeamInvite*                      TeamInvite;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_RejectInvite) == 0x000008, "Wrong alignment on TeamService_RejectInvite");
static_assert(sizeof(TeamService_RejectInvite) == 0x000008, "Wrong size on TeamService_RejectInvite");
static_assert(offsetof(TeamService_RejectInvite, TeamInvite) == 0x000000, "Member 'TeamService_RejectInvite::TeamInvite' has a wrong offset!");

// Function TGFGame.TeamService.RemoveMember
// 0x0010 (0x0010 - 0x0000)
struct TeamService_RemoveMember final
{
public:
	struct FUserKey                               UserKey;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_RemoveMember) == 0x000008, "Wrong alignment on TeamService_RemoveMember");
static_assert(sizeof(TeamService_RemoveMember) == 0x000010, "Wrong size on TeamService_RemoveMember");
static_assert(offsetof(TeamService_RemoveMember, UserKey) == 0x000000, "Member 'TeamService_RemoveMember::UserKey' has a wrong offset!");

// Function TGFGame.TeamService.SearchTeam
// 0x0038 (0x0038 - 0x0000)
struct TeamService_SearchTeam final
{
public:
	int32                                         MinRoleLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RoleTypeList;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ModeTypeList;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ServiceTypeList;                                   // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_SearchTeam) == 0x000008, "Wrong alignment on TeamService_SearchTeam");
static_assert(sizeof(TeamService_SearchTeam) == 0x000038, "Wrong size on TeamService_SearchTeam");
static_assert(offsetof(TeamService_SearchTeam, MinRoleLevel) == 0x000000, "Member 'TeamService_SearchTeam::MinRoleLevel' has a wrong offset!");
static_assert(offsetof(TeamService_SearchTeam, RoleTypeList) == 0x000008, "Member 'TeamService_SearchTeam::RoleTypeList' has a wrong offset!");
static_assert(offsetof(TeamService_SearchTeam, ModeTypeList) == 0x000018, "Member 'TeamService_SearchTeam::ModeTypeList' has a wrong offset!");
static_assert(offsetof(TeamService_SearchTeam, ServiceTypeList) == 0x000028, "Member 'TeamService_SearchTeam::ServiceTypeList' has a wrong offset!");

// Function TGFGame.TeamService.SetFinderStatus
// 0x0001 (0x0001 - 0x0000)
struct TeamService_SetFinderStatus final
{
public:
	bool                                          bFinderStatus;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_SetFinderStatus) == 0x000001, "Wrong alignment on TeamService_SetFinderStatus");
static_assert(sizeof(TeamService_SetFinderStatus) == 0x000001, "Wrong size on TeamService_SetFinderStatus");
static_assert(offsetof(TeamService_SetFinderStatus, bFinderStatus) == 0x000000, "Member 'TeamService_SetFinderStatus::bFinderStatus' has a wrong offset!");

// Function TGFGame.TeamService.ToggleTeamSearchTimer
// 0x0001 (0x0001 - 0x0000)
struct TeamService_ToggleTeamSearchTimer final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamService_ToggleTeamSearchTimer) == 0x000001, "Wrong alignment on TeamService_ToggleTeamSearchTimer");
static_assert(sizeof(TeamService_ToggleTeamSearchTimer) == 0x000001, "Wrong size on TeamService_ToggleTeamSearchTimer");
static_assert(offsetof(TeamService_ToggleTeamSearchTimer, bIsOpen) == 0x000000, "Member 'TeamService_ToggleTeamSearchTimer::bIsOpen' has a wrong offset!");

// Function TGFGame.TeamInvite.GetIsValid
// 0x0001 (0x0001 - 0x0000)
struct TeamInvite_GetIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamInvite_GetIsValid) == 0x000001, "Wrong alignment on TeamInvite_GetIsValid");
static_assert(sizeof(TeamInvite_GetIsValid) == 0x000001, "Wrong size on TeamInvite_GetIsValid");
static_assert(offsetof(TeamInvite_GetIsValid, ReturnValue) == 0x000000, "Member 'TeamInvite_GetIsValid::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamInfo.GetIsMember
// 0x0018 (0x0018 - 0x0000)
struct TeamInfo_GetIsMember final
{
public:
	struct FUserKey                               InUserKey;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamInfo_GetIsMember) == 0x000008, "Wrong alignment on TeamInfo_GetIsMember");
static_assert(sizeof(TeamInfo_GetIsMember) == 0x000018, "Wrong size on TeamInfo_GetIsMember");
static_assert(offsetof(TeamInfo_GetIsMember, InUserKey) == 0x000000, "Member 'TeamInfo_GetIsMember::InUserKey' has a wrong offset!");
static_assert(offsetof(TeamInfo_GetIsMember, ReturnValue) == 0x000010, "Member 'TeamInfo_GetIsMember::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamInfo.GetIsReady
// 0x0018 (0x0018 - 0x0000)
struct TeamInfo_GetIsReady final
{
public:
	struct FUserKey                               InUserKey;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamInfo_GetIsReady) == 0x000008, "Wrong alignment on TeamInfo_GetIsReady");
static_assert(sizeof(TeamInfo_GetIsReady) == 0x000018, "Wrong size on TeamInfo_GetIsReady");
static_assert(offsetof(TeamInfo_GetIsReady, InUserKey) == 0x000000, "Member 'TeamInfo_GetIsReady::InUserKey' has a wrong offset!");
static_assert(offsetof(TeamInfo_GetIsReady, ReturnValue) == 0x000010, "Member 'TeamInfo_GetIsReady::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamInfo.GetMemberCount
// 0x0004 (0x0004 - 0x0000)
struct TeamInfo_GetMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamInfo_GetMemberCount) == 0x000004, "Wrong alignment on TeamInfo_GetMemberCount");
static_assert(sizeof(TeamInfo_GetMemberCount) == 0x000004, "Wrong size on TeamInfo_GetMemberCount");
static_assert(offsetof(TeamInfo_GetMemberCount, ReturnValue) == 0x000000, "Member 'TeamInfo_GetMemberCount::ReturnValue' has a wrong offset!");

// Function TGFGame.TeamInfo.GetIsValid
// 0x0001 (0x0001 - 0x0000)
struct TeamInfo_GetIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamInfo_GetIsValid) == 0x000001, "Wrong alignment on TeamInfo_GetIsValid");
static_assert(sizeof(TeamInfo_GetIsValid) == 0x000001, "Wrong size on TeamInfo_GetIsValid");
static_assert(offsetof(TeamInfo_GetIsValid, ReturnValue) == 0x000000, "Member 'TeamInfo_GetIsValid::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfAudioStateVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct TgfAudioStateVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAudioStateVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on TgfAudioStateVolume_OnOverlapBegin");
static_assert(sizeof(TgfAudioStateVolume_OnOverlapBegin) == 0x000010, "Wrong size on TgfAudioStateVolume_OnOverlapBegin");
static_assert(offsetof(TgfAudioStateVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'TgfAudioStateVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TgfAudioStateVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'TgfAudioStateVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function TGFGame.TgfAudioStateVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct TgfAudioStateVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAudioStateVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on TgfAudioStateVolume_OnOverlapEnd");
static_assert(sizeof(TgfAudioStateVolume_OnOverlapEnd) == 0x000010, "Wrong size on TgfAudioStateVolume_OnOverlapEnd");
static_assert(offsetof(TgfAudioStateVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'TgfAudioStateVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TgfAudioStateVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'TgfAudioStateVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function TGFGame.TgfAudioSystem.GetDefaultListener
// 0x0008 (0x0008 - 0x0000)
struct TgfAudioSystem_GetDefaultListener final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAudioSystem_GetDefaultListener) == 0x000008, "Wrong alignment on TgfAudioSystem_GetDefaultListener");
static_assert(sizeof(TgfAudioSystem_GetDefaultListener) == 0x000008, "Wrong size on TgfAudioSystem_GetDefaultListener");
static_assert(offsetof(TgfAudioSystem_GetDefaultListener, ReturnValue) == 0x000000, "Member 'TgfAudioSystem_GetDefaultListener::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfAudioSystem.MuteSFX
// 0x0001 (0x0001 - 0x0000)
struct TgfAudioSystem_MuteSFX final
{
public:
	bool                                          Mute;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAudioSystem_MuteSFX) == 0x000001, "Wrong alignment on TgfAudioSystem_MuteSFX");
static_assert(sizeof(TgfAudioSystem_MuteSFX) == 0x000001, "Wrong size on TgfAudioSystem_MuteSFX");
static_assert(offsetof(TgfAudioSystem_MuteSFX, Mute) == 0x000000, "Member 'TgfAudioSystem_MuteSFX::Mute' has a wrong offset!");

// Function TGFGame.TgfAudioSystem.PlayHallMusic
// 0x0010 (0x0010 - 0x0000)
struct TgfAudioSystem_PlayHallMusic final
{
public:
	class UAkAudioEvent*                          PlayEvent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          StopEvent;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAudioSystem_PlayHallMusic) == 0x000008, "Wrong alignment on TgfAudioSystem_PlayHallMusic");
static_assert(sizeof(TgfAudioSystem_PlayHallMusic) == 0x000010, "Wrong size on TgfAudioSystem_PlayHallMusic");
static_assert(offsetof(TgfAudioSystem_PlayHallMusic, PlayEvent) == 0x000000, "Member 'TgfAudioSystem_PlayHallMusic::PlayEvent' has a wrong offset!");
static_assert(offsetof(TgfAudioSystem_PlayHallMusic, StopEvent) == 0x000008, "Member 'TgfAudioSystem_PlayHallMusic::StopEvent' has a wrong offset!");

// Function TGFGame.TGFForgeRepairPanel.HandleGearRepairFinish
// 0x0008 (0x0008 - 0x0000)
struct TGFForgeRepairPanel_HandleGearRepairFinish final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFForgeRepairPanel_HandleGearRepairFinish) == 0x000008, "Wrong alignment on TGFForgeRepairPanel_HandleGearRepairFinish");
static_assert(sizeof(TGFForgeRepairPanel_HandleGearRepairFinish) == 0x000008, "Wrong size on TGFForgeRepairPanel_HandleGearRepairFinish");
static_assert(offsetof(TGFForgeRepairPanel_HandleGearRepairFinish, Args) == 0x000000, "Member 'TGFForgeRepairPanel_HandleGearRepairFinish::Args' has a wrong offset!");

// Function TGFGame.TGFForgeRepairPanel.HandleSwitchForgeTab
// 0x0008 (0x0008 - 0x0000)
struct TGFForgeRepairPanel_HandleSwitchForgeTab final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFForgeRepairPanel_HandleSwitchForgeTab) == 0x000008, "Wrong alignment on TGFForgeRepairPanel_HandleSwitchForgeTab");
static_assert(sizeof(TGFForgeRepairPanel_HandleSwitchForgeTab) == 0x000008, "Wrong size on TGFForgeRepairPanel_HandleSwitchForgeTab");
static_assert(offsetof(TGFForgeRepairPanel_HandleSwitchForgeTab, Args) == 0x000000, "Member 'TGFForgeRepairPanel_HandleSwitchForgeTab::Args' has a wrong offset!");

// Function TGFGame.TGFForgeRepairPanel.RefreshSelectedEquipment
// 0x0008 (0x0008 - 0x0000)
struct TGFForgeRepairPanel_RefreshSelectedEquipment final
{
public:
	class UTgfInventoryItemWrapper*               ItemWrapper;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFForgeRepairPanel_RefreshSelectedEquipment) == 0x000008, "Wrong alignment on TGFForgeRepairPanel_RefreshSelectedEquipment");
static_assert(sizeof(TGFForgeRepairPanel_RefreshSelectedEquipment) == 0x000008, "Wrong size on TGFForgeRepairPanel_RefreshSelectedEquipment");
static_assert(offsetof(TGFForgeRepairPanel_RefreshSelectedEquipment, ItemWrapper) == 0x000000, "Member 'TGFForgeRepairPanel_RefreshSelectedEquipment::ItemWrapper' has a wrong offset!");

// Function TGFGame.TgfInventoryRoleWrapper_Lobby.CreateInventoryRoleWrapperLobby
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryRoleWrapper_Lobby_CreateInventoryRoleWrapperLobby final
{
public:
	class UTgfInventoryRoleWrapper_Lobby*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_Lobby_CreateInventoryRoleWrapperLobby) == 0x000008, "Wrong alignment on TgfInventoryRoleWrapper_Lobby_CreateInventoryRoleWrapperLobby");
static_assert(sizeof(TgfInventoryRoleWrapper_Lobby_CreateInventoryRoleWrapperLobby) == 0x000008, "Wrong size on TgfInventoryRoleWrapper_Lobby_CreateInventoryRoleWrapperLobby");
static_assert(offsetof(TgfInventoryRoleWrapper_Lobby_CreateInventoryRoleWrapperLobby, ReturnValue) == 0x000000, "Member 'TgfInventoryRoleWrapper_Lobby_CreateInventoryRoleWrapperLobby::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryRoleWrapper_Lobby.GetRoleAttributeInfo
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryRoleWrapper_Lobby_GetRoleAttributeInfo final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URoleAttributeInfo*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_Lobby_GetRoleAttributeInfo) == 0x000008, "Wrong alignment on TgfInventoryRoleWrapper_Lobby_GetRoleAttributeInfo");
static_assert(sizeof(TgfInventoryRoleWrapper_Lobby_GetRoleAttributeInfo) == 0x000010, "Wrong size on TgfInventoryRoleWrapper_Lobby_GetRoleAttributeInfo");
static_assert(offsetof(TgfInventoryRoleWrapper_Lobby_GetRoleAttributeInfo, Guid) == 0x000000, "Member 'TgfInventoryRoleWrapper_Lobby_GetRoleAttributeInfo::Guid' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_Lobby_GetRoleAttributeInfo, ReturnValue) == 0x000008, "Member 'TgfInventoryRoleWrapper_Lobby_GetRoleAttributeInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryRoleWrapper_Lobby.Lua_GetRoleAttributeValue
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryRoleWrapper_Lobby_Lua_GetRoleAttributeValue final
{
public:
	EnRoleDisplayAttribueID                       AttributeID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_Lobby_Lua_GetRoleAttributeValue) == 0x000004, "Wrong alignment on TgfInventoryRoleWrapper_Lobby_Lua_GetRoleAttributeValue");
static_assert(sizeof(TgfInventoryRoleWrapper_Lobby_Lua_GetRoleAttributeValue) == 0x000008, "Wrong size on TgfInventoryRoleWrapper_Lobby_Lua_GetRoleAttributeValue");
static_assert(offsetof(TgfInventoryRoleWrapper_Lobby_Lua_GetRoleAttributeValue, AttributeID) == 0x000000, "Member 'TgfInventoryRoleWrapper_Lobby_Lua_GetRoleAttributeValue::AttributeID' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_Lobby_Lua_GetRoleAttributeValue, ReturnValue) == 0x000004, "Member 'TgfInventoryRoleWrapper_Lobby_Lua_GetRoleAttributeValue::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryRoleWrapper_Lobby.ResetRoleAttributeInfo
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryRoleWrapper_Lobby_ResetRoleAttributeInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_Lobby_ResetRoleAttributeInfo) == 0x000001, "Wrong alignment on TgfInventoryRoleWrapper_Lobby_ResetRoleAttributeInfo");
static_assert(sizeof(TgfInventoryRoleWrapper_Lobby_ResetRoleAttributeInfo) == 0x000001, "Wrong size on TgfInventoryRoleWrapper_Lobby_ResetRoleAttributeInfo");
static_assert(offsetof(TgfInventoryRoleWrapper_Lobby_ResetRoleAttributeInfo, ReturnValue) == 0x000000, "Member 'TgfInventoryRoleWrapper_Lobby_ResetRoleAttributeInfo::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryRoleWrapper_Lobby.SetFirstLevelAttrDataAsset
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryRoleWrapper_Lobby_SetFirstLevelAttrDataAsset final
{
public:
	const class UTgfFirstLevelAttrDataAsset*      DataAsset;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryRoleWrapper_Lobby_SetFirstLevelAttrDataAsset) == 0x000008, "Wrong alignment on TgfInventoryRoleWrapper_Lobby_SetFirstLevelAttrDataAsset");
static_assert(sizeof(TgfInventoryRoleWrapper_Lobby_SetFirstLevelAttrDataAsset) == 0x000010, "Wrong size on TgfInventoryRoleWrapper_Lobby_SetFirstLevelAttrDataAsset");
static_assert(offsetof(TgfInventoryRoleWrapper_Lobby_SetFirstLevelAttrDataAsset, DataAsset) == 0x000000, "Member 'TgfInventoryRoleWrapper_Lobby_SetFirstLevelAttrDataAsset::DataAsset' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_Lobby_SetFirstLevelAttrDataAsset, ReturnValue) == 0x000008, "Member 'TgfInventoryRoleWrapper_Lobby_SetFirstLevelAttrDataAsset::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryLibrary_Lobby.CreateLobbyInventoryContext
// 0x0030 (0x0030 - 0x0000)
struct TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext final
{
public:
	ETgfInventoryType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               InPopupOverlayPanel;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITooltipWidget>        InItemTooltipWidget;                               // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ParentInventory;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext) == 0x000008, "Wrong alignment on TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext");
static_assert(sizeof(TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext) == 0x000030, "Wrong size on TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext");
static_assert(offsetof(TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext, Type) == 0x000000, "Member 'TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext::Type' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext, InPopupOverlayPanel) == 0x000008, "Member 'TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext::InPopupOverlayPanel' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext, InItemTooltipWidget) == 0x000010, "Member 'TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext::InItemTooltipWidget' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext, ParentInventory) == 0x000020, "Member 'TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext::ParentInventory' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext, ReturnValue) == 0x000028, "Member 'TgfInventoryLibrary_Lobby_CreateLobbyInventoryContext::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryLibrary_Lobby.GetMarketBuybackTabId
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryLibrary_Lobby_GetMarketBuybackTabId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryLibrary_Lobby_GetMarketBuybackTabId) == 0x000004, "Wrong alignment on TgfInventoryLibrary_Lobby_GetMarketBuybackTabId");
static_assert(sizeof(TgfInventoryLibrary_Lobby_GetMarketBuybackTabId) == 0x000004, "Wrong size on TgfInventoryLibrary_Lobby_GetMarketBuybackTabId");
static_assert(offsetof(TgfInventoryLibrary_Lobby_GetMarketBuybackTabId, ReturnValue) == 0x000000, "Member 'TgfInventoryLibrary_Lobby_GetMarketBuybackTabId::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryLibrary_Lobby.InventoryTypeToServerEnum
// 0x0002 (0x0002 - 0x0000)
struct TgfInventoryLibrary_Lobby_InventoryTypeToServerEnum final
{
public:
	ETgfInventoryType                             InventoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EnItemStorageType                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryLibrary_Lobby_InventoryTypeToServerEnum) == 0x000001, "Wrong alignment on TgfInventoryLibrary_Lobby_InventoryTypeToServerEnum");
static_assert(sizeof(TgfInventoryLibrary_Lobby_InventoryTypeToServerEnum) == 0x000002, "Wrong size on TgfInventoryLibrary_Lobby_InventoryTypeToServerEnum");
static_assert(offsetof(TgfInventoryLibrary_Lobby_InventoryTypeToServerEnum, InventoryType) == 0x000000, "Member 'TgfInventoryLibrary_Lobby_InventoryTypeToServerEnum::InventoryType' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Lobby_InventoryTypeToServerEnum, ReturnValue) == 0x000001, "Member 'TgfInventoryLibrary_Lobby_InventoryTypeToServerEnum::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryLibrary_Mithril.CreateMithrilInventoryContext
// 0x0030 (0x0030 - 0x0000)
struct TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext final
{
public:
	ETgfInventoryType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               InPopupOverlayPanel;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITooltipWidget>        InItemTooltipWidget;                               // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ParentInventory;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext) == 0x000008, "Wrong alignment on TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext");
static_assert(sizeof(TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext) == 0x000030, "Wrong size on TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext");
static_assert(offsetof(TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext, Type) == 0x000000, "Member 'TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext::Type' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext, InPopupOverlayPanel) == 0x000008, "Member 'TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext::InPopupOverlayPanel' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext, InItemTooltipWidget) == 0x000010, "Member 'TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext::InItemTooltipWidget' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext, ParentInventory) == 0x000020, "Member 'TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext::ParentInventory' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext, ReturnValue) == 0x000028, "Member 'TgfInventoryLibrary_Mithril_CreateMithrilInventoryContext::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryLibrary_MithrilResult.CreateMithrilInventoryContext
// 0x0030 (0x0030 - 0x0000)
struct TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext final
{
public:
	ETgfInventoryType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               InPopupOverlayPanel;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITooltipWidget>        InItemTooltipWidget;                               // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ParentInventory;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext) == 0x000008, "Wrong alignment on TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext");
static_assert(sizeof(TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext) == 0x000030, "Wrong size on TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext");
static_assert(offsetof(TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext, Type) == 0x000000, "Member 'TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext::Type' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext, InPopupOverlayPanel) == 0x000008, "Member 'TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext::InPopupOverlayPanel' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext, InItemTooltipWidget) == 0x000010, "Member 'TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext::InItemTooltipWidget' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext, ParentInventory) == 0x000020, "Member 'TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext::ParentInventory' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext, ReturnValue) == 0x000028, "Member 'TgfInventoryLibrary_MithrilResult_CreateMithrilInventoryContext::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfInventoryLibrary_Virtual.CreateActivityInventoryContext
// 0x0038 (0x0038 - 0x0000)
struct TgfInventoryLibrary_Virtual_CreateActivityInventoryContext final
{
public:
	class UOverlay*                               InPopupOverlayPanel;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITooltipWidget>        InItemTooltipWidget;                               // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ParentInventory;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Size;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              MaxSize;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryLibrary_Virtual_CreateActivityInventoryContext) == 0x000008, "Wrong alignment on TgfInventoryLibrary_Virtual_CreateActivityInventoryContext");
static_assert(sizeof(TgfInventoryLibrary_Virtual_CreateActivityInventoryContext) == 0x000038, "Wrong size on TgfInventoryLibrary_Virtual_CreateActivityInventoryContext");
static_assert(offsetof(TgfInventoryLibrary_Virtual_CreateActivityInventoryContext, InPopupOverlayPanel) == 0x000000, "Member 'TgfInventoryLibrary_Virtual_CreateActivityInventoryContext::InPopupOverlayPanel' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Virtual_CreateActivityInventoryContext, InItemTooltipWidget) == 0x000008, "Member 'TgfInventoryLibrary_Virtual_CreateActivityInventoryContext::InItemTooltipWidget' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Virtual_CreateActivityInventoryContext, ParentInventory) == 0x000018, "Member 'TgfInventoryLibrary_Virtual_CreateActivityInventoryContext::ParentInventory' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Virtual_CreateActivityInventoryContext, Size) == 0x000020, "Member 'TgfInventoryLibrary_Virtual_CreateActivityInventoryContext::Size' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Virtual_CreateActivityInventoryContext, MaxSize) == 0x000028, "Member 'TgfInventoryLibrary_Virtual_CreateActivityInventoryContext::MaxSize' has a wrong offset!");
static_assert(offsetof(TgfInventoryLibrary_Virtual_CreateActivityInventoryContext, ReturnValue) == 0x000030, "Member 'TgfInventoryLibrary_Virtual_CreateActivityInventoryContext::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFItemBar.SetUp
// 0x000C (0x000C - 0x0000)
struct TGFItemBar_SetUp final
{
public:
	int32                                         InTypeId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmphasize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFItemBar_SetUp) == 0x000004, "Wrong alignment on TGFItemBar_SetUp");
static_assert(sizeof(TGFItemBar_SetUp) == 0x00000C, "Wrong size on TGFItemBar_SetUp");
static_assert(offsetof(TGFItemBar_SetUp, InTypeId) == 0x000000, "Member 'TGFItemBar_SetUp::InTypeId' has a wrong offset!");
static_assert(offsetof(TGFItemBar_SetUp, InCount) == 0x000004, "Member 'TGFItemBar_SetUp::InCount' has a wrong offset!");
static_assert(offsetof(TGFItemBar_SetUp, bEmphasize) == 0x000008, "Member 'TGFItemBar_SetUp::bEmphasize' has a wrong offset!");

// Function TGFGame.TGFNetworkFunctionLibrary.GetProtocolErrorText
// 0x0028 (0x0028 - 0x0000)
struct TGFNetworkFunctionLibrary_GetProtocolErrorText final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SubErrorCode;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFNetworkFunctionLibrary_GetProtocolErrorText) == 0x000008, "Wrong alignment on TGFNetworkFunctionLibrary_GetProtocolErrorText");
static_assert(sizeof(TGFNetworkFunctionLibrary_GetProtocolErrorText) == 0x000028, "Wrong size on TGFNetworkFunctionLibrary_GetProtocolErrorText");
static_assert(offsetof(TGFNetworkFunctionLibrary_GetProtocolErrorText, ErrorCode) == 0x000000, "Member 'TGFNetworkFunctionLibrary_GetProtocolErrorText::ErrorCode' has a wrong offset!");
static_assert(offsetof(TGFNetworkFunctionLibrary_GetProtocolErrorText, SubErrorCode) == 0x000008, "Member 'TGFNetworkFunctionLibrary_GetProtocolErrorText::SubErrorCode' has a wrong offset!");
static_assert(offsetof(TGFNetworkFunctionLibrary_GetProtocolErrorText, ReturnValue) == 0x000010, "Member 'TGFNetworkFunctionLibrary_GetProtocolErrorText::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFNetworkFunctionLibrary.PromptProtocolError
// 0x0010 (0x0010 - 0x0000)
struct TGFNetworkFunctionLibrary_PromptProtocolError final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SubErrorCode;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFNetworkFunctionLibrary_PromptProtocolError) == 0x000008, "Wrong alignment on TGFNetworkFunctionLibrary_PromptProtocolError");
static_assert(sizeof(TGFNetworkFunctionLibrary_PromptProtocolError) == 0x000010, "Wrong size on TGFNetworkFunctionLibrary_PromptProtocolError");
static_assert(offsetof(TGFNetworkFunctionLibrary_PromptProtocolError, ErrorCode) == 0x000000, "Member 'TGFNetworkFunctionLibrary_PromptProtocolError::ErrorCode' has a wrong offset!");
static_assert(offsetof(TGFNetworkFunctionLibrary_PromptProtocolError, SubErrorCode) == 0x000008, "Member 'TGFNetworkFunctionLibrary_PromptProtocolError::SubErrorCode' has a wrong offset!");

// Function TGFGame.RegionData.GetRegionData
// 0x0040 (0x0040 - 0x0000)
struct RegionData_GetRegionData final
{
public:
	struct FTGFRegionData                         ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RegionData_GetRegionData) == 0x000008, "Wrong alignment on RegionData_GetRegionData");
static_assert(sizeof(RegionData_GetRegionData) == 0x000040, "Wrong size on RegionData_GetRegionData");
static_assert(offsetof(RegionData_GetRegionData, ReturnValue) == 0x000000, "Member 'RegionData_GetRegionData::ReturnValue' has a wrong offset!");

// Function TGFGame.RegionData.GetRegionLatency
// 0x0001 (0x0001 - 0x0000)
struct RegionData_GetRegionLatency final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RegionData_GetRegionLatency) == 0x000001, "Wrong alignment on RegionData_GetRegionLatency");
static_assert(sizeof(RegionData_GetRegionLatency) == 0x000001, "Wrong size on RegionData_GetRegionLatency");
static_assert(offsetof(RegionData_GetRegionLatency, ReturnValue) == 0x000000, "Member 'RegionData_GetRegionLatency::ReturnValue' has a wrong offset!");

// Function TGFGame.RegionData.SendUdpMsg
// 0x0001 (0x0001 - 0x0000)
struct RegionData_SendUdpMsg final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RegionData_SendUdpMsg) == 0x000001, "Wrong alignment on RegionData_SendUdpMsg");
static_assert(sizeof(RegionData_SendUdpMsg) == 0x000001, "Wrong size on RegionData_SendUdpMsg");
static_assert(offsetof(RegionData_SendUdpMsg, ReturnValue) == 0x000000, "Member 'RegionData_SendUdpMsg::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFSettingsListEntrySetting_ComboBox.HandleSelectOptionChanged
// 0x0018 (0x0018 - 0x0000)
struct TGFSettingsListEntrySetting_ComboBox_HandleSelectOptionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFSettingsListEntrySetting_ComboBox_HandleSelectOptionChanged) == 0x000008, "Wrong alignment on TGFSettingsListEntrySetting_ComboBox_HandleSelectOptionChanged");
static_assert(sizeof(TGFSettingsListEntrySetting_ComboBox_HandleSelectOptionChanged) == 0x000018, "Wrong size on TGFSettingsListEntrySetting_ComboBox_HandleSelectOptionChanged");
static_assert(offsetof(TGFSettingsListEntrySetting_ComboBox_HandleSelectOptionChanged, SelectedItem) == 0x000000, "Member 'TGFSettingsListEntrySetting_ComboBox_HandleSelectOptionChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(TGFSettingsListEntrySetting_ComboBox_HandleSelectOptionChanged, SelectionType) == 0x000010, "Member 'TGFSettingsListEntrySetting_ComboBox_HandleSelectOptionChanged::SelectionType' has a wrong offset!");

// Function TGFGame.TGFSettingsListEntrySetting_KeyboardInput.HandleBtnKeyboardSelected
// 0x0018 (0x0018 - 0x0000)
struct TGFSettingsListEntrySetting_KeyboardInput_HandleBtnKeyboardSelected final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingsListEntrySetting_KeyboardInput_HandleBtnKeyboardSelected) == 0x000008, "Wrong alignment on TGFSettingsListEntrySetting_KeyboardInput_HandleBtnKeyboardSelected");
static_assert(sizeof(TGFSettingsListEntrySetting_KeyboardInput_HandleBtnKeyboardSelected) == 0x000018, "Wrong size on TGFSettingsListEntrySetting_KeyboardInput_HandleBtnKeyboardSelected");
static_assert(offsetof(TGFSettingsListEntrySetting_KeyboardInput_HandleBtnKeyboardSelected, InKey) == 0x000000, "Member 'TGFSettingsListEntrySetting_KeyboardInput_HandleBtnKeyboardSelected::InKey' has a wrong offset!");

// Function TGFGame.TGFSettingsListEntrySetting_KeyboardInput.HandleInvalidKeySelected
// 0x0018 (0x0018 - 0x0000)
struct TGFSettingsListEntrySetting_KeyboardInput_HandleInvalidKeySelected final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingsListEntrySetting_KeyboardInput_HandleInvalidKeySelected) == 0x000008, "Wrong alignment on TGFSettingsListEntrySetting_KeyboardInput_HandleInvalidKeySelected");
static_assert(sizeof(TGFSettingsListEntrySetting_KeyboardInput_HandleInvalidKeySelected) == 0x000018, "Wrong size on TGFSettingsListEntrySetting_KeyboardInput_HandleInvalidKeySelected");
static_assert(offsetof(TGFSettingsListEntrySetting_KeyboardInput_HandleInvalidKeySelected, InKey) == 0x000000, "Member 'TGFSettingsListEntrySetting_KeyboardInput_HandleInvalidKeySelected::InKey' has a wrong offset!");

// Function TGFGame.TGFSettingsListEntrySetting_KeyboardInput.UpdateKey
// 0x0018 (0x0018 - 0x0000)
struct TGFSettingsListEntrySetting_KeyboardInput_UpdateKey final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingsListEntrySetting_KeyboardInput_UpdateKey) == 0x000008, "Wrong alignment on TGFSettingsListEntrySetting_KeyboardInput_UpdateKey");
static_assert(sizeof(TGFSettingsListEntrySetting_KeyboardInput_UpdateKey) == 0x000018, "Wrong size on TGFSettingsListEntrySetting_KeyboardInput_UpdateKey");
static_assert(offsetof(TGFSettingsListEntrySetting_KeyboardInput_UpdateKey, InKey) == 0x000000, "Member 'TGFSettingsListEntrySetting_KeyboardInput_UpdateKey::InKey' has a wrong offset!");

// Function TGFGame.TGFSettingsListEntrySetting_Switch.HandleBtnCloseClicked
// 0x0001 (0x0001 - 0x0000)
struct TGFSettingsListEntrySetting_Switch_HandleBtnCloseClicked final
{
public:
	bool                                          InIsChecked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingsListEntrySetting_Switch_HandleBtnCloseClicked) == 0x000001, "Wrong alignment on TGFSettingsListEntrySetting_Switch_HandleBtnCloseClicked");
static_assert(sizeof(TGFSettingsListEntrySetting_Switch_HandleBtnCloseClicked) == 0x000001, "Wrong size on TGFSettingsListEntrySetting_Switch_HandleBtnCloseClicked");
static_assert(offsetof(TGFSettingsListEntrySetting_Switch_HandleBtnCloseClicked, InIsChecked) == 0x000000, "Member 'TGFSettingsListEntrySetting_Switch_HandleBtnCloseClicked::InIsChecked' has a wrong offset!");

// Function TGFGame.TGFSettingsListEntrySetting_Switch.HandleBtnOpenClicked
// 0x0001 (0x0001 - 0x0000)
struct TGFSettingsListEntrySetting_Switch_HandleBtnOpenClicked final
{
public:
	bool                                          InIsChecked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingsListEntrySetting_Switch_HandleBtnOpenClicked) == 0x000001, "Wrong alignment on TGFSettingsListEntrySetting_Switch_HandleBtnOpenClicked");
static_assert(sizeof(TGFSettingsListEntrySetting_Switch_HandleBtnOpenClicked) == 0x000001, "Wrong size on TGFSettingsListEntrySetting_Switch_HandleBtnOpenClicked");
static_assert(offsetof(TGFSettingsListEntrySetting_Switch_HandleBtnOpenClicked, InIsChecked) == 0x000000, "Member 'TGFSettingsListEntrySetting_Switch_HandleBtnOpenClicked::InIsChecked' has a wrong offset!");

// Function TGFGame.TGFSettingValueDiscrete_Resolution.GetAppropraiteDiscreteOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct TGFSettingValueDiscrete_Resolution_GetAppropraiteDiscreteOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingValueDiscrete_Resolution_GetAppropraiteDiscreteOptionIndex) == 0x000004, "Wrong alignment on TGFSettingValueDiscrete_Resolution_GetAppropraiteDiscreteOptionIndex");
static_assert(sizeof(TGFSettingValueDiscrete_Resolution_GetAppropraiteDiscreteOptionIndex) == 0x000004, "Wrong size on TGFSettingValueDiscrete_Resolution_GetAppropraiteDiscreteOptionIndex");
static_assert(offsetof(TGFSettingValueDiscrete_Resolution_GetAppropraiteDiscreteOptionIndex, ReturnValue) == 0x000000, "Member 'TGFSettingValueDiscrete_Resolution_GetAppropraiteDiscreteOptionIndex::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFSettingValueDiscrete_Resolution.GetAppropriateDiscreteOptions
// 0x0010 (0x0010 - 0x0000)
struct TGFSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions) == 0x000008, "Wrong alignment on TGFSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions");
static_assert(sizeof(TGFSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions) == 0x000010, "Wrong size on TGFSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions");
static_assert(offsetof(TGFSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions, ReturnValue) == 0x000000, "Member 'TGFSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFSettingValueDiscrete_Resolution.SetAppropriateDiscreteOptionByIndex
// 0x0004 (0x0004 - 0x0000)
struct TGFSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex) == 0x000004, "Wrong alignment on TGFSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex");
static_assert(sizeof(TGFSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex) == 0x000004, "Wrong size on TGFSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex");
static_assert(offsetof(TGFSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex, Param_Index) == 0x000000, "Member 'TGFSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex::Param_Index' has a wrong offset!");

// Function TGFGame.TgfSteamAchievement.HandleWearEquipmentTask
// 0x0008 (0x0008 - 0x0000)
struct TgfSteamAchievement_HandleWearEquipmentTask final
{
public:
	int64                                         RoleGuid;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSteamAchievement_HandleWearEquipmentTask) == 0x000008, "Wrong alignment on TgfSteamAchievement_HandleWearEquipmentTask");
static_assert(sizeof(TgfSteamAchievement_HandleWearEquipmentTask) == 0x000008, "Wrong size on TgfSteamAchievement_HandleWearEquipmentTask");
static_assert(offsetof(TgfSteamAchievement_HandleWearEquipmentTask, RoleGuid) == 0x000000, "Member 'TgfSteamAchievement_HandleWearEquipmentTask::RoleGuid' has a wrong offset!");

// Function TGFGame.TgfSteamAchievement.OnBattleMatchEvent
// 0x0008 (0x0008 - 0x0000)
struct TgfSteamAchievement_OnBattleMatchEvent final
{
public:
	class UTGFEventArgs*                          Arg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSteamAchievement_OnBattleMatchEvent) == 0x000008, "Wrong alignment on TgfSteamAchievement_OnBattleMatchEvent");
static_assert(sizeof(TgfSteamAchievement_OnBattleMatchEvent) == 0x000008, "Wrong size on TgfSteamAchievement_OnBattleMatchEvent");
static_assert(offsetof(TgfSteamAchievement_OnBattleMatchEvent, Arg) == 0x000000, "Member 'TgfSteamAchievement_OnBattleMatchEvent::Arg' has a wrong offset!");

// Function TGFGame.TGFTradeMarketProductData.GetItem
// 0x0060 (0x0060 - 0x0000)
struct TGFTradeMarketProductData_GetItem final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFItem                               ReturnValue;                                       // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFTradeMarketProductData_GetItem) == 0x000008, "Wrong alignment on TGFTradeMarketProductData_GetItem");
static_assert(sizeof(TGFTradeMarketProductData_GetItem) == 0x000060, "Wrong size on TGFTradeMarketProductData_GetItem");
static_assert(offsetof(TGFTradeMarketProductData_GetItem, MarketId) == 0x000000, "Member 'TGFTradeMarketProductData_GetItem::MarketId' has a wrong offset!");
static_assert(offsetof(TGFTradeMarketProductData_GetItem, ReturnValue) == 0x000008, "Member 'TGFTradeMarketProductData_GetItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFTradeMarketProductData.GetSourceTypes
// 0x0010 (0x0010 - 0x0000)
struct TGFTradeMarketProductData_GetSourceTypes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFTradeMarketProductData_GetSourceTypes) == 0x000008, "Wrong alignment on TGFTradeMarketProductData_GetSourceTypes");
static_assert(sizeof(TGFTradeMarketProductData_GetSourceTypes) == 0x000010, "Wrong size on TGFTradeMarketProductData_GetSourceTypes");
static_assert(offsetof(TGFTradeMarketProductData_GetSourceTypes, ReturnValue) == 0x000000, "Member 'TGFTradeMarketProductData_GetSourceTypes::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFTradeMarketProductData.HaveGearSetAttribute
// 0x0008 (0x0008 - 0x0000)
struct TGFTradeMarketProductData_HaveGearSetAttribute final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFTradeMarketProductData_HaveGearSetAttribute) == 0x000004, "Wrong alignment on TGFTradeMarketProductData_HaveGearSetAttribute");
static_assert(sizeof(TGFTradeMarketProductData_HaveGearSetAttribute) == 0x000008, "Wrong size on TGFTradeMarketProductData_HaveGearSetAttribute");
static_assert(offsetof(TGFTradeMarketProductData_HaveGearSetAttribute, MarketId) == 0x000000, "Member 'TGFTradeMarketProductData_HaveGearSetAttribute::MarketId' has a wrong offset!");
static_assert(offsetof(TGFTradeMarketProductData_HaveGearSetAttribute, ReturnValue) == 0x000004, "Member 'TGFTradeMarketProductData_HaveGearSetAttribute::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFTradeMarketProductData.IsCorruptionItem
// 0x0008 (0x0008 - 0x0000)
struct TGFTradeMarketProductData_IsCorruptionItem final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFTradeMarketProductData_IsCorruptionItem) == 0x000004, "Wrong alignment on TGFTradeMarketProductData_IsCorruptionItem");
static_assert(sizeof(TGFTradeMarketProductData_IsCorruptionItem) == 0x000008, "Wrong size on TGFTradeMarketProductData_IsCorruptionItem");
static_assert(offsetof(TGFTradeMarketProductData_IsCorruptionItem, MarketId) == 0x000000, "Member 'TGFTradeMarketProductData_IsCorruptionItem::MarketId' has a wrong offset!");
static_assert(offsetof(TGFTradeMarketProductData_IsCorruptionItem, ReturnValue) == 0x000004, "Member 'TGFTradeMarketProductData_IsCorruptionItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFTradeMarketProductData.GetItemTypeId
// 0x0008 (0x0008 - 0x0000)
struct TGFTradeMarketProductData_GetItemTypeId final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFTradeMarketProductData_GetItemTypeId) == 0x000004, "Wrong alignment on TGFTradeMarketProductData_GetItemTypeId");
static_assert(sizeof(TGFTradeMarketProductData_GetItemTypeId) == 0x000008, "Wrong size on TGFTradeMarketProductData_GetItemTypeId");
static_assert(offsetof(TGFTradeMarketProductData_GetItemTypeId, MarketId) == 0x000000, "Member 'TGFTradeMarketProductData_GetItemTypeId::MarketId' has a wrong offset!");
static_assert(offsetof(TGFTradeMarketProductData_GetItemTypeId, ReturnValue) == 0x000004, "Member 'TGFTradeMarketProductData_GetItemTypeId::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFTradeMarketProductData.GetLowestPrice
// 0x0008 (0x0008 - 0x0000)
struct TGFTradeMarketProductData_GetLowestPrice final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFTradeMarketProductData_GetLowestPrice) == 0x000008, "Wrong alignment on TGFTradeMarketProductData_GetLowestPrice");
static_assert(sizeof(TGFTradeMarketProductData_GetLowestPrice) == 0x000008, "Wrong size on TGFTradeMarketProductData_GetLowestPrice");
static_assert(offsetof(TGFTradeMarketProductData_GetLowestPrice, ReturnValue) == 0x000000, "Member 'TGFTradeMarketProductData_GetLowestPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TGFTradeMarketProductData.GetStartPrice
// 0x0008 (0x0008 - 0x0000)
struct TGFTradeMarketProductData_GetStartPrice final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFTradeMarketProductData_GetStartPrice) == 0x000008, "Wrong alignment on TGFTradeMarketProductData_GetStartPrice");
static_assert(sizeof(TGFTradeMarketProductData_GetStartPrice) == 0x000008, "Wrong size on TGFTradeMarketProductData_GetStartPrice");
static_assert(offsetof(TGFTradeMarketProductData_GetStartPrice, ReturnValue) == 0x000000, "Member 'TGFTradeMarketProductData_GetStartPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfVoiceChatService.JoinVoiceRoom
// 0x0010 (0x0010 - 0x0000)
struct TgfVoiceChatService_JoinVoiceRoom final
{
public:
	class FString                                 RoomName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfVoiceChatService_JoinVoiceRoom) == 0x000008, "Wrong alignment on TgfVoiceChatService_JoinVoiceRoom");
static_assert(sizeof(TgfVoiceChatService_JoinVoiceRoom) == 0x000010, "Wrong size on TgfVoiceChatService_JoinVoiceRoom");
static_assert(offsetof(TgfVoiceChatService_JoinVoiceRoom, RoomName) == 0x000000, "Member 'TgfVoiceChatService_JoinVoiceRoom::RoomName' has a wrong offset!");

// Function TGFGame.TgfVoiceChatService.OnGmeConnectTimeout
// 0x0008 (0x0008 - 0x0000)
struct TgfVoiceChatService_OnGmeConnectTimeout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfVoiceChatService_OnGmeConnectTimeout) == 0x000008, "Wrong alignment on TgfVoiceChatService_OnGmeConnectTimeout");
static_assert(sizeof(TgfVoiceChatService_OnGmeConnectTimeout) == 0x000008, "Wrong size on TgfVoiceChatService_OnGmeConnectTimeout");
static_assert(offsetof(TgfVoiceChatService_OnGmeConnectTimeout, Args) == 0x000000, "Member 'TgfVoiceChatService_OnGmeConnectTimeout::Args' has a wrong offset!");

// Function TGFGame.TgfVoiceChatService.OnSettingScreenDestruct
// 0x0008 (0x0008 - 0x0000)
struct TgfVoiceChatService_OnSettingScreenDestruct final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfVoiceChatService_OnSettingScreenDestruct) == 0x000008, "Wrong alignment on TgfVoiceChatService_OnSettingScreenDestruct");
static_assert(sizeof(TgfVoiceChatService_OnSettingScreenDestruct) == 0x000008, "Wrong size on TgfVoiceChatService_OnSettingScreenDestruct");
static_assert(offsetof(TgfVoiceChatService_OnSettingScreenDestruct, Args) == 0x000000, "Member 'TgfVoiceChatService_OnSettingScreenDestruct::Args' has a wrong offset!");

// Function TGFGame.TgfVoiceChatService.OnUnlockModuleDirty
// 0x0008 (0x0008 - 0x0000)
struct TgfVoiceChatService_OnUnlockModuleDirty final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfVoiceChatService_OnUnlockModuleDirty) == 0x000008, "Wrong alignment on TgfVoiceChatService_OnUnlockModuleDirty");
static_assert(sizeof(TgfVoiceChatService_OnUnlockModuleDirty) == 0x000008, "Wrong size on TgfVoiceChatService_OnUnlockModuleDirty");
static_assert(offsetof(TgfVoiceChatService_OnUnlockModuleDirty, Args) == 0x000000, "Member 'TgfVoiceChatService_OnUnlockModuleDirty::Args' has a wrong offset!");

// Function TGFGame.TgfVoiceChatService.OnUserKeyDownEvent
// 0x0040 (0x0040 - 0x0000)
struct TgfVoiceChatService_OnUserKeyDownEvent final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfVoiceChatService_OnUserKeyDownEvent) == 0x000008, "Wrong alignment on TgfVoiceChatService_OnUserKeyDownEvent");
static_assert(sizeof(TgfVoiceChatService_OnUserKeyDownEvent) == 0x000040, "Wrong size on TgfVoiceChatService_OnUserKeyDownEvent");
static_assert(offsetof(TgfVoiceChatService_OnUserKeyDownEvent, InKeyEvent) == 0x000000, "Member 'TgfVoiceChatService_OnUserKeyDownEvent::InKeyEvent' has a wrong offset!");

// Function TGFGame.TgfVoiceChatService.OnUserKeyUpEvent
// 0x0040 (0x0040 - 0x0000)
struct TgfVoiceChatService_OnUserKeyUpEvent final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfVoiceChatService_OnUserKeyUpEvent) == 0x000008, "Wrong alignment on TgfVoiceChatService_OnUserKeyUpEvent");
static_assert(sizeof(TgfVoiceChatService_OnUserKeyUpEvent) == 0x000040, "Wrong size on TgfVoiceChatService_OnUserKeyUpEvent");
static_assert(offsetof(TgfVoiceChatService_OnUserKeyUpEvent, InKeyEvent) == 0x000000, "Member 'TgfVoiceChatService_OnUserKeyUpEvent::InKeyEvent' has a wrong offset!");

// Function TGFGame.TgfVoiceChatService.QuitVoiceRoom
// 0x0010 (0x0010 - 0x0000)
struct TgfVoiceChatService_QuitVoiceRoom final
{
public:
	class FString                                 RoomMark;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfVoiceChatService_QuitVoiceRoom) == 0x000008, "Wrong alignment on TgfVoiceChatService_QuitVoiceRoom");
static_assert(sizeof(TgfVoiceChatService_QuitVoiceRoom) == 0x000010, "Wrong size on TgfVoiceChatService_QuitVoiceRoom");
static_assert(offsetof(TgfVoiceChatService_QuitVoiceRoom, RoomMark) == 0x000000, "Member 'TgfVoiceChatService_QuitVoiceRoom::RoomMark' has a wrong offset!");

// Function TGFGame.TgfVoiceChatService.GetSettingOpenState
// 0x0001 (0x0001 - 0x0000)
struct TgfVoiceChatService_GetSettingOpenState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfVoiceChatService_GetSettingOpenState) == 0x000001, "Wrong alignment on TgfVoiceChatService_GetSettingOpenState");
static_assert(sizeof(TgfVoiceChatService_GetSettingOpenState) == 0x000001, "Wrong size on TgfVoiceChatService_GetSettingOpenState");
static_assert(offsetof(TgfVoiceChatService_GetSettingOpenState, ReturnValue) == 0x000000, "Member 'TgfVoiceChatService_GetSettingOpenState::ReturnValue' has a wrong offset!");

// Function TGFGame.TgfVoiceChatService.GetVoiceLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfVoiceChatService_GetVoiceLevel final
{
public:
	int64                                         UserId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfVoiceChatService_GetVoiceLevel) == 0x000008, "Wrong alignment on TgfVoiceChatService_GetVoiceLevel");
static_assert(sizeof(TgfVoiceChatService_GetVoiceLevel) == 0x000010, "Wrong size on TgfVoiceChatService_GetVoiceLevel");
static_assert(offsetof(TgfVoiceChatService_GetVoiceLevel, UserId) == 0x000000, "Member 'TgfVoiceChatService_GetVoiceLevel::UserId' has a wrong offset!");
static_assert(offsetof(TgfVoiceChatService_GetVoiceLevel, ReturnValue) == 0x000008, "Member 'TgfVoiceChatService_GetVoiceLevel::ReturnValue' has a wrong offset!");

// Function TGFGame.TimeFunctionLibrary.FormatToCultureLocalTime
// 0x0030 (0x0030 - 0x0000)
struct TimeFunctionLibrary_FormatToCultureLocalTime final
{
public:
	int64                                         UnixTimestamp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeFormatType                               FormatType;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CultureName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeFunctionLibrary_FormatToCultureLocalTime) == 0x000008, "Wrong alignment on TimeFunctionLibrary_FormatToCultureLocalTime");
static_assert(sizeof(TimeFunctionLibrary_FormatToCultureLocalTime) == 0x000030, "Wrong size on TimeFunctionLibrary_FormatToCultureLocalTime");
static_assert(offsetof(TimeFunctionLibrary_FormatToCultureLocalTime, UnixTimestamp) == 0x000000, "Member 'TimeFunctionLibrary_FormatToCultureLocalTime::UnixTimestamp' has a wrong offset!");
static_assert(offsetof(TimeFunctionLibrary_FormatToCultureLocalTime, FormatType) == 0x000008, "Member 'TimeFunctionLibrary_FormatToCultureLocalTime::FormatType' has a wrong offset!");
static_assert(offsetof(TimeFunctionLibrary_FormatToCultureLocalTime, CultureName) == 0x000010, "Member 'TimeFunctionLibrary_FormatToCultureLocalTime::CultureName' has a wrong offset!");
static_assert(offsetof(TimeFunctionLibrary_FormatToCultureLocalTime, ReturnValue) == 0x000020, "Member 'TimeFunctionLibrary_FormatToCultureLocalTime::ReturnValue' has a wrong offset!");

// Function TGFGame.TimeFunctionLibrary.FormatToLocalTime
// 0x0018 (0x0018 - 0x0000)
struct TimeFunctionLibrary_FormatToLocalTime final
{
public:
	int64                                         UnixTimestamp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeFunctionLibrary_FormatToLocalTime) == 0x000008, "Wrong alignment on TimeFunctionLibrary_FormatToLocalTime");
static_assert(sizeof(TimeFunctionLibrary_FormatToLocalTime) == 0x000018, "Wrong size on TimeFunctionLibrary_FormatToLocalTime");
static_assert(offsetof(TimeFunctionLibrary_FormatToLocalTime, UnixTimestamp) == 0x000000, "Member 'TimeFunctionLibrary_FormatToLocalTime::UnixTimestamp' has a wrong offset!");
static_assert(offsetof(TimeFunctionLibrary_FormatToLocalTime, ReturnValue) == 0x000008, "Member 'TimeFunctionLibrary_FormatToLocalTime::ReturnValue' has a wrong offset!");

// Function TGFGame.TimeFunctionLibrary.FormatToLocalTimeWithFormat
// 0x0028 (0x0028 - 0x0000)
struct TimeFunctionLibrary_FormatToLocalTimeWithFormat final
{
public:
	int64                                         UnixTimestamp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InFormat;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeFunctionLibrary_FormatToLocalTimeWithFormat) == 0x000008, "Wrong alignment on TimeFunctionLibrary_FormatToLocalTimeWithFormat");
static_assert(sizeof(TimeFunctionLibrary_FormatToLocalTimeWithFormat) == 0x000028, "Wrong size on TimeFunctionLibrary_FormatToLocalTimeWithFormat");
static_assert(offsetof(TimeFunctionLibrary_FormatToLocalTimeWithFormat, UnixTimestamp) == 0x000000, "Member 'TimeFunctionLibrary_FormatToLocalTimeWithFormat::UnixTimestamp' has a wrong offset!");
static_assert(offsetof(TimeFunctionLibrary_FormatToLocalTimeWithFormat, InFormat) == 0x000008, "Member 'TimeFunctionLibrary_FormatToLocalTimeWithFormat::InFormat' has a wrong offset!");
static_assert(offsetof(TimeFunctionLibrary_FormatToLocalTimeWithFormat, ReturnValue) == 0x000018, "Member 'TimeFunctionLibrary_FormatToLocalTimeWithFormat::ReturnValue' has a wrong offset!");

// Function TGFGame.TimeFunctionLibrary.GetLocalTimestamp
// 0x0008 (0x0008 - 0x0000)
struct TimeFunctionLibrary_GetLocalTimestamp final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeFunctionLibrary_GetLocalTimestamp) == 0x000008, "Wrong alignment on TimeFunctionLibrary_GetLocalTimestamp");
static_assert(sizeof(TimeFunctionLibrary_GetLocalTimestamp) == 0x000008, "Wrong size on TimeFunctionLibrary_GetLocalTimestamp");
static_assert(offsetof(TimeFunctionLibrary_GetLocalTimestamp, ReturnValue) == 0x000000, "Member 'TimeFunctionLibrary_GetLocalTimestamp::ReturnValue' has a wrong offset!");

// Function TGFGame.TimeFunctionLibrary.GetOrdinal
// 0x0018 (0x0018 - 0x0000)
struct TimeFunctionLibrary_GetOrdinal final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeFunctionLibrary_GetOrdinal) == 0x000008, "Wrong alignment on TimeFunctionLibrary_GetOrdinal");
static_assert(sizeof(TimeFunctionLibrary_GetOrdinal) == 0x000018, "Wrong size on TimeFunctionLibrary_GetOrdinal");
static_assert(offsetof(TimeFunctionLibrary_GetOrdinal, Value) == 0x000000, "Member 'TimeFunctionLibrary_GetOrdinal::Value' has a wrong offset!");
static_assert(offsetof(TimeFunctionLibrary_GetOrdinal, ReturnValue) == 0x000008, "Member 'TimeFunctionLibrary_GetOrdinal::ReturnValue' has a wrong offset!");

// Function TGFGame.TimeFunctionLibrary.GetUtcDateTime
// 0x0008 (0x0008 - 0x0000)
struct TimeFunctionLibrary_GetUtcDateTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeFunctionLibrary_GetUtcDateTime) == 0x000008, "Wrong alignment on TimeFunctionLibrary_GetUtcDateTime");
static_assert(sizeof(TimeFunctionLibrary_GetUtcDateTime) == 0x000008, "Wrong size on TimeFunctionLibrary_GetUtcDateTime");
static_assert(offsetof(TimeFunctionLibrary_GetUtcDateTime, ReturnValue) == 0x000000, "Member 'TimeFunctionLibrary_GetUtcDateTime::ReturnValue' has a wrong offset!");

// Function TGFGame.TimeFunctionLibrary.TransToLocalDateTime
// 0x0010 (0x0010 - 0x0000)
struct TimeFunctionLibrary_TransToLocalDateTime final
{
public:
	int64                                         UnixTimestamp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeFunctionLibrary_TransToLocalDateTime) == 0x000008, "Wrong alignment on TimeFunctionLibrary_TransToLocalDateTime");
static_assert(sizeof(TimeFunctionLibrary_TransToLocalDateTime) == 0x000010, "Wrong size on TimeFunctionLibrary_TransToLocalDateTime");
static_assert(offsetof(TimeFunctionLibrary_TransToLocalDateTime, UnixTimestamp) == 0x000000, "Member 'TimeFunctionLibrary_TransToLocalDateTime::UnixTimestamp' has a wrong offset!");
static_assert(offsetof(TimeFunctionLibrary_TransToLocalDateTime, ReturnValue) == 0x000008, "Member 'TimeFunctionLibrary_TransToLocalDateTime::ReturnValue' has a wrong offset!");

// Function TGFGame.TimerSubsystem.Lua_Tick
// 0x0004 (0x0004 - 0x0000)
struct TimerSubsystem_Lua_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerSubsystem_Lua_Tick) == 0x000004, "Wrong alignment on TimerSubsystem_Lua_Tick");
static_assert(sizeof(TimerSubsystem_Lua_Tick) == 0x000004, "Wrong size on TimerSubsystem_Lua_Tick");
static_assert(offsetof(TimerSubsystem_Lua_Tick, DeltaTime) == 0x000000, "Member 'TimerSubsystem_Lua_Tick::DeltaTime' has a wrong offset!");

// Function TGFGame.TimeService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct TimeService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeService_OnGameLogout) == 0x000008, "Wrong alignment on TimeService_OnGameLogout");
static_assert(sizeof(TimeService_OnGameLogout) == 0x000008, "Wrong size on TimeService_OnGameLogout");
static_assert(offsetof(TimeService_OnGameLogout, Args) == 0x000000, "Member 'TimeService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.TimeService.GetCurrentTimeStamp
// 0x0008 (0x0008 - 0x0000)
struct TimeService_GetCurrentTimeStamp final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeService_GetCurrentTimeStamp) == 0x000008, "Wrong alignment on TimeService_GetCurrentTimeStamp");
static_assert(sizeof(TimeService_GetCurrentTimeStamp) == 0x000008, "Wrong size on TimeService_GetCurrentTimeStamp");
static_assert(offsetof(TimeService_GetCurrentTimeStamp, ReturnValue) == 0x000000, "Member 'TimeService_GetCurrentTimeStamp::ReturnValue' has a wrong offset!");

// Function TGFGame.ToastWindow.ShowToast
// 0x0018 (0x0018 - 0x0000)
struct ToastWindow_ShowToast final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToastWindow_ShowToast) == 0x000008, "Wrong alignment on ToastWindow_ShowToast");
static_assert(sizeof(ToastWindow_ShowToast) == 0x000018, "Wrong size on ToastWindow_ShowToast");
static_assert(offsetof(ToastWindow_ShowToast, Message) == 0x000000, "Member 'ToastWindow_ShowToast::Message' has a wrong offset!");

// Function TGFGame.ToastWindow.ShowToastWithActor
// 0x0020 (0x0020 - 0x0000)
struct ToastWindow_ShowToastWithActor final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 InputActor;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToastWindow_ShowToastWithActor) == 0x000008, "Wrong alignment on ToastWindow_ShowToastWithActor");
static_assert(sizeof(ToastWindow_ShowToastWithActor) == 0x000020, "Wrong size on ToastWindow_ShowToastWithActor");
static_assert(offsetof(ToastWindow_ShowToastWithActor, Message) == 0x000000, "Member 'ToastWindow_ShowToastWithActor::Message' has a wrong offset!");
static_assert(offsetof(ToastWindow_ShowToastWithActor, InputActor) == 0x000018, "Member 'ToastWindow_ShowToastWithActor::InputActor' has a wrong offset!");

// Function TGFGame.ToastWindow.ShowToastWithActorAndTime
// 0x0028 (0x0028 - 0x0000)
struct ToastWindow_ShowToastWithActorAndTime final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 InputActor;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ToastWindow_ShowToastWithActorAndTime) == 0x000008, "Wrong alignment on ToastWindow_ShowToastWithActorAndTime");
static_assert(sizeof(ToastWindow_ShowToastWithActorAndTime) == 0x000028, "Wrong size on ToastWindow_ShowToastWithActorAndTime");
static_assert(offsetof(ToastWindow_ShowToastWithActorAndTime, Message) == 0x000000, "Member 'ToastWindow_ShowToastWithActorAndTime::Message' has a wrong offset!");
static_assert(offsetof(ToastWindow_ShowToastWithActorAndTime, InputActor) == 0x000018, "Member 'ToastWindow_ShowToastWithActorAndTime::InputActor' has a wrong offset!");
static_assert(offsetof(ToastWindow_ShowToastWithActorAndTime, Time) == 0x000020, "Member 'ToastWindow_ShowToastWithActorAndTime::Time' has a wrong offset!");

// Function TGFGame.ToastWindow.ShowToastWithObject
// 0x0020 (0x0020 - 0x0000)
struct ToastWindow_ShowToastWithObject final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                InputObject;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToastWindow_ShowToastWithObject) == 0x000008, "Wrong alignment on ToastWindow_ShowToastWithObject");
static_assert(sizeof(ToastWindow_ShowToastWithObject) == 0x000020, "Wrong size on ToastWindow_ShowToastWithObject");
static_assert(offsetof(ToastWindow_ShowToastWithObject, Message) == 0x000000, "Member 'ToastWindow_ShowToastWithObject::Message' has a wrong offset!");
static_assert(offsetof(ToastWindow_ShowToastWithObject, InputObject) == 0x000018, "Member 'ToastWindow_ShowToastWithObject::InputObject' has a wrong offset!");

// Function TGFGame.ToolLib.GetCareerConfigList
// 0x0018 (0x0018 - 0x0000)
struct ToolLib_GetCareerConfigList final
{
public:
	int32                                         Race;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UExcelLoaderTgfConfigExcelRoleType*> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToolLib_GetCareerConfigList) == 0x000008, "Wrong alignment on ToolLib_GetCareerConfigList");
static_assert(sizeof(ToolLib_GetCareerConfigList) == 0x000018, "Wrong size on ToolLib_GetCareerConfigList");
static_assert(offsetof(ToolLib_GetCareerConfigList, Race) == 0x000000, "Member 'ToolLib_GetCareerConfigList::Race' has a wrong offset!");
static_assert(offsetof(ToolLib_GetCareerConfigList, ReturnValue) == 0x000008, "Member 'ToolLib_GetCareerConfigList::ReturnValue' has a wrong offset!");

// Function TGFGame.ToolLib.GetTexture2D
// 0x0018 (0x0018 - 0x0000)
struct ToolLib_GetTexture2D final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToolLib_GetTexture2D) == 0x000008, "Wrong alignment on ToolLib_GetTexture2D");
static_assert(sizeof(ToolLib_GetTexture2D) == 0x000018, "Wrong size on ToolLib_GetTexture2D");
static_assert(offsetof(ToolLib_GetTexture2D, Path) == 0x000000, "Member 'ToolLib_GetTexture2D::Path' has a wrong offset!");
static_assert(offsetof(ToolLib_GetTexture2D, ReturnValue) == 0x000010, "Member 'ToolLib_GetTexture2D::ReturnValue' has a wrong offset!");

// Function TGFGame.ToolLib.GetTotlePageCount
// 0x000C (0x000C - 0x0000)
struct ToolLib_GetTotlePageCount final
{
public:
	int32                                         DataCnt;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnePageCnt;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToolLib_GetTotlePageCount) == 0x000004, "Wrong alignment on ToolLib_GetTotlePageCount");
static_assert(sizeof(ToolLib_GetTotlePageCount) == 0x00000C, "Wrong size on ToolLib_GetTotlePageCount");
static_assert(offsetof(ToolLib_GetTotlePageCount, DataCnt) == 0x000000, "Member 'ToolLib_GetTotlePageCount::DataCnt' has a wrong offset!");
static_assert(offsetof(ToolLib_GetTotlePageCount, OnePageCnt) == 0x000004, "Member 'ToolLib_GetTotlePageCount::OnePageCnt' has a wrong offset!");
static_assert(offsetof(ToolLib_GetTotlePageCount, ReturnValue) == 0x000008, "Member 'ToolLib_GetTotlePageCount::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeBidOrder.GetItem
// 0x0058 (0x0058 - 0x0000)
struct TradeBidOrder_GetItem final
{
public:
	struct FTGFItem                               ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeBidOrder_GetItem) == 0x000008, "Wrong alignment on TradeBidOrder_GetItem");
static_assert(sizeof(TradeBidOrder_GetItem) == 0x000058, "Wrong size on TradeBidOrder_GetItem");
static_assert(offsetof(TradeBidOrder_GetItem, ReturnValue) == 0x000000, "Member 'TradeBidOrder_GetItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeBidOrder.GetCurrentBidPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeBidOrder_GetCurrentBidPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeBidOrder_GetCurrentBidPrice) == 0x000004, "Wrong alignment on TradeBidOrder_GetCurrentBidPrice");
static_assert(sizeof(TradeBidOrder_GetCurrentBidPrice) == 0x000004, "Wrong size on TradeBidOrder_GetCurrentBidPrice");
static_assert(offsetof(TradeBidOrder_GetCurrentBidPrice, ReturnValue) == 0x000000, "Member 'TradeBidOrder_GetCurrentBidPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeBidOrder.GetItemTypeId
// 0x0004 (0x0004 - 0x0000)
struct TradeBidOrder_GetItemTypeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeBidOrder_GetItemTypeId) == 0x000004, "Wrong alignment on TradeBidOrder_GetItemTypeId");
static_assert(sizeof(TradeBidOrder_GetItemTypeId) == 0x000004, "Wrong size on TradeBidOrder_GetItemTypeId");
static_assert(offsetof(TradeBidOrder_GetItemTypeId, ReturnValue) == 0x000000, "Member 'TradeBidOrder_GetItemTypeId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeBidOrder.GetMyBidPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeBidOrder_GetMyBidPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeBidOrder_GetMyBidPrice) == 0x000004, "Wrong alignment on TradeBidOrder_GetMyBidPrice");
static_assert(sizeof(TradeBidOrder_GetMyBidPrice) == 0x000004, "Wrong size on TradeBidOrder_GetMyBidPrice");
static_assert(offsetof(TradeBidOrder_GetMyBidPrice, ReturnValue) == 0x000000, "Member 'TradeBidOrder_GetMyBidPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeBidOrder.GetOrderForBid
// 0x0008 (0x0008 - 0x0000)
struct TradeBidOrder_GetOrderForBid final
{
public:
	class UTradeSearchResultOrder*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeBidOrder_GetOrderForBid) == 0x000008, "Wrong alignment on TradeBidOrder_GetOrderForBid");
static_assert(sizeof(TradeBidOrder_GetOrderForBid) == 0x000008, "Wrong size on TradeBidOrder_GetOrderForBid");
static_assert(offsetof(TradeBidOrder_GetOrderForBid, ReturnValue) == 0x000000, "Member 'TradeBidOrder_GetOrderForBid::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeBidOrder.GetRemainTime
// 0x0008 (0x0008 - 0x0000)
struct TradeBidOrder_GetRemainTime final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeBidOrder_GetRemainTime) == 0x000008, "Wrong alignment on TradeBidOrder_GetRemainTime");
static_assert(sizeof(TradeBidOrder_GetRemainTime) == 0x000008, "Wrong size on TradeBidOrder_GetRemainTime");
static_assert(offsetof(TradeBidOrder_GetRemainTime, ReturnValue) == 0x000000, "Member 'TradeBidOrder_GetRemainTime::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeBidOrder.GetState
// 0x0001 (0x0001 - 0x0000)
struct TradeBidOrder_GetState final
{
public:
	ETradeBidOrderState                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeBidOrder_GetState) == 0x000001, "Wrong alignment on TradeBidOrder_GetState");
static_assert(sizeof(TradeBidOrder_GetState) == 0x000001, "Wrong size on TradeBidOrder_GetState");
static_assert(offsetof(TradeBidOrder_GetState, ReturnValue) == 0x000000, "Member 'TradeBidOrder_GetState::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeBidOrder.GetTradeItemProductId
// 0x0004 (0x0004 - 0x0000)
struct TradeBidOrder_GetTradeItemProductId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeBidOrder_GetTradeItemProductId) == 0x000004, "Wrong alignment on TradeBidOrder_GetTradeItemProductId");
static_assert(sizeof(TradeBidOrder_GetTradeItemProductId) == 0x000004, "Wrong size on TradeBidOrder_GetTradeItemProductId");
static_assert(offsetof(TradeBidOrder_GetTradeItemProductId, ReturnValue) == 0x000000, "Member 'TradeBidOrder_GetTradeItemProductId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeBidOrder.GetTradeOrderTicketId
// 0x0008 (0x0008 - 0x0000)
struct TradeBidOrder_GetTradeOrderTicketId final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeBidOrder_GetTradeOrderTicketId) == 0x000008, "Wrong alignment on TradeBidOrder_GetTradeOrderTicketId");
static_assert(sizeof(TradeBidOrder_GetTradeOrderTicketId) == 0x000008, "Wrong size on TradeBidOrder_GetTradeOrderTicketId");
static_assert(offsetof(TradeBidOrder_GetTradeOrderTicketId, ReturnValue) == 0x000000, "Member 'TradeBidOrder_GetTradeOrderTicketId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeFunctionLibrary.GetTradeAuctionStartingPrice
// 0x0010 (0x0010 - 0x0000)
struct TradeFunctionLibrary_GetTradeAuctionStartingPrice final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarketId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefaultSp;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeFunctionLibrary_GetTradeAuctionStartingPrice) == 0x000004, "Wrong alignment on TradeFunctionLibrary_GetTradeAuctionStartingPrice");
static_assert(sizeof(TradeFunctionLibrary_GetTradeAuctionStartingPrice) == 0x000010, "Wrong size on TradeFunctionLibrary_GetTradeAuctionStartingPrice");
static_assert(offsetof(TradeFunctionLibrary_GetTradeAuctionStartingPrice, ProductId) == 0x000000, "Member 'TradeFunctionLibrary_GetTradeAuctionStartingPrice::ProductId' has a wrong offset!");
static_assert(offsetof(TradeFunctionLibrary_GetTradeAuctionStartingPrice, MarketId) == 0x000004, "Member 'TradeFunctionLibrary_GetTradeAuctionStartingPrice::MarketId' has a wrong offset!");
static_assert(offsetof(TradeFunctionLibrary_GetTradeAuctionStartingPrice, IsDefaultSp) == 0x000008, "Member 'TradeFunctionLibrary_GetTradeAuctionStartingPrice::IsDefaultSp' has a wrong offset!");
static_assert(offsetof(TradeFunctionLibrary_GetTradeAuctionStartingPrice, ReturnValue) == 0x00000C, "Member 'TradeFunctionLibrary_GetTradeAuctionStartingPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeFunctionLibrary.GetTradeItemProductIdByItem
// 0x0060 (0x0060 - 0x0000)
struct TradeFunctionLibrary_GetTradeItemProductIdByItem final
{
public:
	struct FTGFItem                               Item;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         MarketId;                                          // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeFunctionLibrary_GetTradeItemProductIdByItem) == 0x000008, "Wrong alignment on TradeFunctionLibrary_GetTradeItemProductIdByItem");
static_assert(sizeof(TradeFunctionLibrary_GetTradeItemProductIdByItem) == 0x000060, "Wrong size on TradeFunctionLibrary_GetTradeItemProductIdByItem");
static_assert(offsetof(TradeFunctionLibrary_GetTradeItemProductIdByItem, Item) == 0x000000, "Member 'TradeFunctionLibrary_GetTradeItemProductIdByItem::Item' has a wrong offset!");
static_assert(offsetof(TradeFunctionLibrary_GetTradeItemProductIdByItem, MarketId) == 0x000058, "Member 'TradeFunctionLibrary_GetTradeItemProductIdByItem::MarketId' has a wrong offset!");
static_assert(offsetof(TradeFunctionLibrary_GetTradeItemProductIdByItem, ReturnValue) == 0x00005C, "Member 'TradeFunctionLibrary_GetTradeItemProductIdByItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeFunctionLibrary.GetTradeItemStartingPrice
// 0x0060 (0x0060 - 0x0000)
struct TradeFunctionLibrary_GetTradeItemStartingPrice final
{
public:
	struct FTGFItem                               Item;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         MarketId;                                          // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeFunctionLibrary_GetTradeItemStartingPrice) == 0x000008, "Wrong alignment on TradeFunctionLibrary_GetTradeItemStartingPrice");
static_assert(sizeof(TradeFunctionLibrary_GetTradeItemStartingPrice) == 0x000060, "Wrong size on TradeFunctionLibrary_GetTradeItemStartingPrice");
static_assert(offsetof(TradeFunctionLibrary_GetTradeItemStartingPrice, Item) == 0x000000, "Member 'TradeFunctionLibrary_GetTradeItemStartingPrice::Item' has a wrong offset!");
static_assert(offsetof(TradeFunctionLibrary_GetTradeItemStartingPrice, MarketId) == 0x000058, "Member 'TradeFunctionLibrary_GetTradeItemStartingPrice::MarketId' has a wrong offset!");
static_assert(offsetof(TradeFunctionLibrary_GetTradeItemStartingPrice, ReturnValue) == 0x00005C, "Member 'TradeFunctionLibrary_GetTradeItemStartingPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeFunctionLibrary.GetTradeItemTypeByProductId
// 0x000C (0x000C - 0x0000)
struct TradeFunctionLibrary_GetTradeItemTypeByProductId final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarketId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeFunctionLibrary_GetTradeItemTypeByProductId) == 0x000004, "Wrong alignment on TradeFunctionLibrary_GetTradeItemTypeByProductId");
static_assert(sizeof(TradeFunctionLibrary_GetTradeItemTypeByProductId) == 0x00000C, "Wrong size on TradeFunctionLibrary_GetTradeItemTypeByProductId");
static_assert(offsetof(TradeFunctionLibrary_GetTradeItemTypeByProductId, ProductId) == 0x000000, "Member 'TradeFunctionLibrary_GetTradeItemTypeByProductId::ProductId' has a wrong offset!");
static_assert(offsetof(TradeFunctionLibrary_GetTradeItemTypeByProductId, MarketId) == 0x000004, "Member 'TradeFunctionLibrary_GetTradeItemTypeByProductId::MarketId' has a wrong offset!");
static_assert(offsetof(TradeFunctionLibrary_GetTradeItemTypeByProductId, ReturnValue) == 0x000008, "Member 'TradeFunctionLibrary_GetTradeItemTypeByProductId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeFunctionLibrary.GetTradeMarketCurrencyType
// 0x0008 (0x0008 - 0x0000)
struct TradeFunctionLibrary_GetTradeMarketCurrencyType final
{
public:
	int32                                         TradeMarketId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeFunctionLibrary_GetTradeMarketCurrencyType) == 0x000004, "Wrong alignment on TradeFunctionLibrary_GetTradeMarketCurrencyType");
static_assert(sizeof(TradeFunctionLibrary_GetTradeMarketCurrencyType) == 0x000008, "Wrong size on TradeFunctionLibrary_GetTradeMarketCurrencyType");
static_assert(offsetof(TradeFunctionLibrary_GetTradeMarketCurrencyType, TradeMarketId) == 0x000000, "Member 'TradeFunctionLibrary_GetTradeMarketCurrencyType::TradeMarketId' has a wrong offset!");
static_assert(offsetof(TradeFunctionLibrary_GetTradeMarketCurrencyType, ReturnValue) == 0x000004, "Member 'TradeFunctionLibrary_GetTradeMarketCurrencyType::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeFunctionLibrary.IsTradeAllowed
// 0x0008 (0x0008 - 0x0000)
struct TradeFunctionLibrary_IsTradeAllowed final
{
public:
	int32                                         ModuleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeFunctionLibrary_IsTradeAllowed) == 0x000004, "Wrong alignment on TradeFunctionLibrary_IsTradeAllowed");
static_assert(sizeof(TradeFunctionLibrary_IsTradeAllowed) == 0x000008, "Wrong size on TradeFunctionLibrary_IsTradeAllowed");
static_assert(offsetof(TradeFunctionLibrary_IsTradeAllowed, ModuleId) == 0x000000, "Member 'TradeFunctionLibrary_IsTradeAllowed::ModuleId' has a wrong offset!");
static_assert(offsetof(TradeFunctionLibrary_IsTradeAllowed, ReturnValue) == 0x000004, "Member 'TradeFunctionLibrary_IsTradeAllowed::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.AddSelectItem
// 0x0060 (0x0060 - 0x0000)
struct TradeHomogenService_AddSelectItem final
{
public:
	struct FTGFItem                               Item;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeHomogenService_AddSelectItem) == 0x000008, "Wrong alignment on TradeHomogenService_AddSelectItem");
static_assert(sizeof(TradeHomogenService_AddSelectItem) == 0x000060, "Wrong size on TradeHomogenService_AddSelectItem");
static_assert(offsetof(TradeHomogenService_AddSelectItem, Item) == 0x000000, "Member 'TradeHomogenService_AddSelectItem::Item' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_AddSelectItem, ReturnValue) == 0x000058, "Member 'TradeHomogenService_AddSelectItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.CheckCanReceiveRedPoint
// 0x0001 (0x0001 - 0x0000)
struct TradeHomogenService_CheckCanReceiveRedPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_CheckCanReceiveRedPoint) == 0x000001, "Wrong alignment on TradeHomogenService_CheckCanReceiveRedPoint");
static_assert(sizeof(TradeHomogenService_CheckCanReceiveRedPoint) == 0x000001, "Wrong size on TradeHomogenService_CheckCanReceiveRedPoint");
static_assert(offsetof(TradeHomogenService_CheckCanReceiveRedPoint, ReturnValue) == 0x000000, "Member 'TradeHomogenService_CheckCanReceiveRedPoint::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.CheckHasSoldOutRedPoint
// 0x0001 (0x0001 - 0x0000)
struct TradeHomogenService_CheckHasSoldOutRedPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_CheckHasSoldOutRedPoint) == 0x000001, "Wrong alignment on TradeHomogenService_CheckHasSoldOutRedPoint");
static_assert(sizeof(TradeHomogenService_CheckHasSoldOutRedPoint) == 0x000001, "Wrong size on TradeHomogenService_CheckHasSoldOutRedPoint");
static_assert(offsetof(TradeHomogenService_CheckHasSoldOutRedPoint, ReturnValue) == 0x000000, "Member 'TradeHomogenService_CheckHasSoldOutRedPoint::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.ClearSelectItems
// 0x0001 (0x0001 - 0x0000)
struct TradeHomogenService_ClearSelectItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_ClearSelectItems) == 0x000001, "Wrong alignment on TradeHomogenService_ClearSelectItems");
static_assert(sizeof(TradeHomogenService_ClearSelectItems) == 0x000001, "Wrong size on TradeHomogenService_ClearSelectItems");
static_assert(offsetof(TradeHomogenService_ClearSelectItems, ReturnValue) == 0x000000, "Member 'TradeHomogenService_ClearSelectItems::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.ClientSearch
// 0x0038 (0x0038 - 0x0000)
struct TradeHomogenService_ClientSearch final
{
public:
	int32                                         Career;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorType;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SubTypes;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPrice;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPrice;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductCount;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIndex;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix1;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix2;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix3;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_ClientSearch) == 0x000008, "Wrong alignment on TradeHomogenService_ClientSearch");
static_assert(sizeof(TradeHomogenService_ClientSearch) == 0x000038, "Wrong size on TradeHomogenService_ClientSearch");
static_assert(offsetof(TradeHomogenService_ClientSearch, Career) == 0x000000, "Member 'TradeHomogenService_ClientSearch::Career' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ClientSearch, MinorType) == 0x000004, "Member 'TradeHomogenService_ClientSearch::MinorType' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ClientSearch, SubTypes) == 0x000008, "Member 'TradeHomogenService_ClientSearch::SubTypes' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ClientSearch, Rarity) == 0x000018, "Member 'TradeHomogenService_ClientSearch::Rarity' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ClientSearch, MinPrice) == 0x00001C, "Member 'TradeHomogenService_ClientSearch::MinPrice' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ClientSearch, MaxPrice) == 0x000020, "Member 'TradeHomogenService_ClientSearch::MaxPrice' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ClientSearch, ProductCount) == 0x000024, "Member 'TradeHomogenService_ClientSearch::ProductCount' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ClientSearch, PageIndex) == 0x000028, "Member 'TradeHomogenService_ClientSearch::PageIndex' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ClientSearch, Affix1) == 0x00002C, "Member 'TradeHomogenService_ClientSearch::Affix1' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ClientSearch, Affix2) == 0x000030, "Member 'TradeHomogenService_ClientSearch::Affix2' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ClientSearch, Affix3) == 0x000034, "Member 'TradeHomogenService_ClientSearch::Affix3' has a wrong offset!");

// Function TGFGame.TradeHomogenService.ClientSearchByPage
// 0x0008 (0x0008 - 0x0000)
struct TradeHomogenService_ClientSearchByPage final
{
public:
	int32                                         ProductCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_ClientSearchByPage) == 0x000004, "Wrong alignment on TradeHomogenService_ClientSearchByPage");
static_assert(sizeof(TradeHomogenService_ClientSearchByPage) == 0x000008, "Wrong size on TradeHomogenService_ClientSearchByPage");
static_assert(offsetof(TradeHomogenService_ClientSearchByPage, ProductCount) == 0x000000, "Member 'TradeHomogenService_ClientSearchByPage::ProductCount' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ClientSearchByPage, PageIndex) == 0x000004, "Member 'TradeHomogenService_ClientSearchByPage::PageIndex' has a wrong offset!");

// Function TGFGame.TradeHomogenService.ContainSelectItem
// 0x0060 (0x0060 - 0x0000)
struct TradeHomogenService_ContainSelectItem final
{
public:
	struct FTGFItem                               Item;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeHomogenService_ContainSelectItem) == 0x000008, "Wrong alignment on TradeHomogenService_ContainSelectItem");
static_assert(sizeof(TradeHomogenService_ContainSelectItem) == 0x000060, "Wrong size on TradeHomogenService_ContainSelectItem");
static_assert(offsetof(TradeHomogenService_ContainSelectItem, Item) == 0x000000, "Member 'TradeHomogenService_ContainSelectItem::Item' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_ContainSelectItem, ReturnValue) == 0x000058, "Member 'TradeHomogenService_ContainSelectItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.FindClosestIntervalValue
// 0x0014 (0x0014 - 0x0000)
struct TradeHomogenService_FindClosestIntervalValue final
{
public:
	int32                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interval;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_FindClosestIntervalValue) == 0x000004, "Wrong alignment on TradeHomogenService_FindClosestIntervalValue");
static_assert(sizeof(TradeHomogenService_FindClosestIntervalValue) == 0x000014, "Wrong size on TradeHomogenService_FindClosestIntervalValue");
static_assert(offsetof(TradeHomogenService_FindClosestIntervalValue, Start) == 0x000000, "Member 'TradeHomogenService_FindClosestIntervalValue::Start' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_FindClosestIntervalValue, End) == 0x000004, "Member 'TradeHomogenService_FindClosestIntervalValue::End' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_FindClosestIntervalValue, Interval) == 0x000008, "Member 'TradeHomogenService_FindClosestIntervalValue::Interval' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_FindClosestIntervalValue, Value) == 0x00000C, "Member 'TradeHomogenService_FindClosestIntervalValue::Value' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_FindClosestIntervalValue, ReturnValue) == 0x000010, "Member 'TradeHomogenService_FindClosestIntervalValue::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetHasNextPage
// 0x0001 (0x0001 - 0x0000)
struct TradeHomogenService_GetHasNextPage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetHasNextPage) == 0x000001, "Wrong alignment on TradeHomogenService_GetHasNextPage");
static_assert(sizeof(TradeHomogenService_GetHasNextPage) == 0x000001, "Wrong size on TradeHomogenService_GetHasNextPage");
static_assert(offsetof(TradeHomogenService_GetHasNextPage, ReturnValue) == 0x000000, "Member 'TradeHomogenService_GetHasNextPage::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetItemPrice
// 0x0008 (0x0008 - 0x0000)
struct TradeHomogenService_GetItemPrice final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetItemPrice) == 0x000004, "Wrong alignment on TradeHomogenService_GetItemPrice");
static_assert(sizeof(TradeHomogenService_GetItemPrice) == 0x000008, "Wrong size on TradeHomogenService_GetItemPrice");
static_assert(offsetof(TradeHomogenService_GetItemPrice, ProductId) == 0x000000, "Member 'TradeHomogenService_GetItemPrice::ProductId' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_GetItemPrice, ReturnValue) == 0x000004, "Member 'TradeHomogenService_GetItemPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetLeftReceiveCount
// 0x0010 (0x0010 - 0x0000)
struct TradeHomogenService_GetLeftReceiveCount final
{
public:
	int64                                         TradeOrderTicketId;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeHomogenService_GetLeftReceiveCount) == 0x000008, "Wrong alignment on TradeHomogenService_GetLeftReceiveCount");
static_assert(sizeof(TradeHomogenService_GetLeftReceiveCount) == 0x000010, "Wrong size on TradeHomogenService_GetLeftReceiveCount");
static_assert(offsetof(TradeHomogenService_GetLeftReceiveCount, TradeOrderTicketId) == 0x000000, "Member 'TradeHomogenService_GetLeftReceiveCount::TradeOrderTicketId' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_GetLeftReceiveCount, ReturnValue) == 0x000008, "Member 'TradeHomogenService_GetLeftReceiveCount::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetMyBuyOrders
// 0x0018 (0x0018 - 0x0000)
struct TradeHomogenService_GetMyBuyOrders final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTradeProductBuyOrder*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetMyBuyOrders) == 0x000008, "Wrong alignment on TradeHomogenService_GetMyBuyOrders");
static_assert(sizeof(TradeHomogenService_GetMyBuyOrders) == 0x000018, "Wrong size on TradeHomogenService_GetMyBuyOrders");
static_assert(offsetof(TradeHomogenService_GetMyBuyOrders, State) == 0x000000, "Member 'TradeHomogenService_GetMyBuyOrders::State' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_GetMyBuyOrders, ReturnValue) == 0x000008, "Member 'TradeHomogenService_GetMyBuyOrders::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetPageDataCache
// 0x0020 (0x0020 - 0x0000)
struct TradeHomogenService_GetPageDataCache final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFTradeProductSearchResultData       ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetPageDataCache) == 0x000008, "Wrong alignment on TradeHomogenService_GetPageDataCache");
static_assert(sizeof(TradeHomogenService_GetPageDataCache) == 0x000020, "Wrong size on TradeHomogenService_GetPageDataCache");
static_assert(offsetof(TradeHomogenService_GetPageDataCache, PageIndex) == 0x000000, "Member 'TradeHomogenService_GetPageDataCache::PageIndex' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_GetPageDataCache, ReturnValue) == 0x000008, "Member 'TradeHomogenService_GetPageDataCache::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetProductOrderById
// 0x0018 (0x0018 - 0x0000)
struct TradeHomogenService_GetProductOrderById final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         OrderType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFTradeMarketProductData*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetProductOrderById) == 0x000008, "Wrong alignment on TradeHomogenService_GetProductOrderById");
static_assert(sizeof(TradeHomogenService_GetProductOrderById) == 0x000018, "Wrong size on TradeHomogenService_GetProductOrderById");
static_assert(offsetof(TradeHomogenService_GetProductOrderById, ProductId) == 0x000000, "Member 'TradeHomogenService_GetProductOrderById::ProductId' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_GetProductOrderById, OrderType) == 0x000008, "Member 'TradeHomogenService_GetProductOrderById::OrderType' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_GetProductOrderById, ReturnValue) == 0x000010, "Member 'TradeHomogenService_GetProductOrderById::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetPublishCostType
// 0x0004 (0x0004 - 0x0000)
struct TradeHomogenService_GetPublishCostType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetPublishCostType) == 0x000004, "Wrong alignment on TradeHomogenService_GetPublishCostType");
static_assert(sizeof(TradeHomogenService_GetPublishCostType) == 0x000004, "Wrong size on TradeHomogenService_GetPublishCostType");
static_assert(offsetof(TradeHomogenService_GetPublishCostType, ReturnValue) == 0x000000, "Member 'TradeHomogenService_GetPublishCostType::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetRecommendList
// 0x0050 (0x0050 - 0x0000)
struct TradeHomogenService_GetRecommendList final
{
public:
	TSet<class UTGFTradeMarketProductData*>       ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetRecommendList) == 0x000008, "Wrong alignment on TradeHomogenService_GetRecommendList");
static_assert(sizeof(TradeHomogenService_GetRecommendList) == 0x000050, "Wrong size on TradeHomogenService_GetRecommendList");
static_assert(offsetof(TradeHomogenService_GetRecommendList, ReturnValue) == 0x000000, "Member 'TradeHomogenService_GetRecommendList::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetRecommendResults
// 0x0058 (0x0058 - 0x0000)
struct TradeHomogenService_GetRecommendResults final
{
public:
	bool                                          Refresh;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UTGFTradeMarketProductData*>       ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetRecommendResults) == 0x000008, "Wrong alignment on TradeHomogenService_GetRecommendResults");
static_assert(sizeof(TradeHomogenService_GetRecommendResults) == 0x000058, "Wrong size on TradeHomogenService_GetRecommendResults");
static_assert(offsetof(TradeHomogenService_GetRecommendResults, Refresh) == 0x000000, "Member 'TradeHomogenService_GetRecommendResults::Refresh' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_GetRecommendResults, ReturnValue) == 0x000008, "Member 'TradeHomogenService_GetRecommendResults::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetRecommendResults_New
// 0x0058 (0x0058 - 0x0000)
struct TradeHomogenService_GetRecommendResults_New final
{
public:
	bool                                          Refresh;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UTGFTradeMarketProductData*>       ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetRecommendResults_New) == 0x000008, "Wrong alignment on TradeHomogenService_GetRecommendResults_New");
static_assert(sizeof(TradeHomogenService_GetRecommendResults_New) == 0x000058, "Wrong size on TradeHomogenService_GetRecommendResults_New");
static_assert(offsetof(TradeHomogenService_GetRecommendResults_New, Refresh) == 0x000000, "Member 'TradeHomogenService_GetRecommendResults_New::Refresh' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_GetRecommendResults_New, ReturnValue) == 0x000008, "Member 'TradeHomogenService_GetRecommendResults_New::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetSaleOrders
// 0x0018 (0x0018 - 0x0000)
struct TradeHomogenService_GetSaleOrders final
{
public:
	int32                                         MaxCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTradeSaleOrder*>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetSaleOrders) == 0x000008, "Wrong alignment on TradeHomogenService_GetSaleOrders");
static_assert(sizeof(TradeHomogenService_GetSaleOrders) == 0x000018, "Wrong size on TradeHomogenService_GetSaleOrders");
static_assert(offsetof(TradeHomogenService_GetSaleOrders, MaxCount) == 0x000000, "Member 'TradeHomogenService_GetSaleOrders::MaxCount' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_GetSaleOrders, ReturnValue) == 0x000008, "Member 'TradeHomogenService_GetSaleOrders::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetSearchResults
// 0x0010 (0x0010 - 0x0000)
struct TradeHomogenService_GetSearchResults final
{
public:
	TArray<class UTGFTradeMarketProductData*>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetSearchResults) == 0x000008, "Wrong alignment on TradeHomogenService_GetSearchResults");
static_assert(sizeof(TradeHomogenService_GetSearchResults) == 0x000010, "Wrong size on TradeHomogenService_GetSearchResults");
static_assert(offsetof(TradeHomogenService_GetSearchResults, ReturnValue) == 0x000000, "Member 'TradeHomogenService_GetSearchResults::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetSelectItems
// 0x0010 (0x0010 - 0x0000)
struct TradeHomogenService_GetSelectItems final
{
public:
	TArray<struct FTGFItem>                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetSelectItems) == 0x000008, "Wrong alignment on TradeHomogenService_GetSelectItems");
static_assert(sizeof(TradeHomogenService_GetSelectItems) == 0x000010, "Wrong size on TradeHomogenService_GetSelectItems");
static_assert(offsetof(TradeHomogenService_GetSelectItems, ReturnValue) == 0x000000, "Member 'TradeHomogenService_GetSelectItems::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetTradeMarketProductDataById
// 0x0018 (0x0018 - 0x0000)
struct TradeHomogenService_GetTradeMarketProductDataById final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         OrderType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFTradeMarketProductData*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetTradeMarketProductDataById) == 0x000008, "Wrong alignment on TradeHomogenService_GetTradeMarketProductDataById");
static_assert(sizeof(TradeHomogenService_GetTradeMarketProductDataById) == 0x000018, "Wrong size on TradeHomogenService_GetTradeMarketProductDataById");
static_assert(offsetof(TradeHomogenService_GetTradeMarketProductDataById, ProductId) == 0x000000, "Member 'TradeHomogenService_GetTradeMarketProductDataById::ProductId' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_GetTradeMarketProductDataById, OrderType) == 0x000008, "Member 'TradeHomogenService_GetTradeMarketProductDataById::OrderType' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_GetTradeMarketProductDataById, ReturnValue) == 0x000010, "Member 'TradeHomogenService_GetTradeMarketProductDataById::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetTradeMarketProductDatas
// 0x0010 (0x0010 - 0x0000)
struct TradeHomogenService_GetTradeMarketProductDatas final
{
public:
	TArray<class UTGFTradeMarketProductData*>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetTradeMarketProductDatas) == 0x000008, "Wrong alignment on TradeHomogenService_GetTradeMarketProductDatas");
static_assert(sizeof(TradeHomogenService_GetTradeMarketProductDatas) == 0x000010, "Wrong size on TradeHomogenService_GetTradeMarketProductDatas");
static_assert(offsetof(TradeHomogenService_GetTradeMarketProductDatas, ReturnValue) == 0x000000, "Member 'TradeHomogenService_GetTradeMarketProductDatas::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.HandleGearRepairFinish
// 0x0008 (0x0008 - 0x0000)
struct TradeHomogenService_HandleGearRepairFinish final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_HandleGearRepairFinish) == 0x000008, "Wrong alignment on TradeHomogenService_HandleGearRepairFinish");
static_assert(sizeof(TradeHomogenService_HandleGearRepairFinish) == 0x000008, "Wrong size on TradeHomogenService_HandleGearRepairFinish");
static_assert(offsetof(TradeHomogenService_HandleGearRepairFinish, Args) == 0x000000, "Member 'TradeHomogenService_HandleGearRepairFinish::Args' has a wrong offset!");

// Function TGFGame.TradeHomogenService.OnPublishProduct
// 0x0060 (0x0060 - 0x0000)
struct TradeHomogenService_OnPublishProduct final
{
public:
	struct FTGFItem                               Item;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_OnPublishProduct) == 0x000008, "Wrong alignment on TradeHomogenService_OnPublishProduct");
static_assert(sizeof(TradeHomogenService_OnPublishProduct) == 0x000060, "Wrong size on TradeHomogenService_OnPublishProduct");
static_assert(offsetof(TradeHomogenService_OnPublishProduct, Item) == 0x000000, "Member 'TradeHomogenService_OnPublishProduct::Item' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_OnPublishProduct, Count) == 0x000058, "Member 'TradeHomogenService_OnPublishProduct::Count' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_OnPublishProduct, Price) == 0x00005C, "Member 'TradeHomogenService_OnPublishProduct::Price' has a wrong offset!");

// Function TGFGame.TradeHomogenService.ReceiveProductOrder
// 0x0008 (0x0008 - 0x0000)
struct TradeHomogenService_ReceiveProductOrder final
{
public:
	class UTradeProductBuyOrder*                  BuyOrder;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_ReceiveProductOrder) == 0x000008, "Wrong alignment on TradeHomogenService_ReceiveProductOrder");
static_assert(sizeof(TradeHomogenService_ReceiveProductOrder) == 0x000008, "Wrong size on TradeHomogenService_ReceiveProductOrder");
static_assert(offsetof(TradeHomogenService_ReceiveProductOrder, BuyOrder) == 0x000000, "Member 'TradeHomogenService_ReceiveProductOrder::BuyOrder' has a wrong offset!");

// Function TGFGame.TradeHomogenService.ReceiveSaleList
// 0x0010 (0x0010 - 0x0000)
struct TradeHomogenService_ReceiveSaleList final
{
public:
	TArray<class UTradeSaleOrder*>                Orders;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_ReceiveSaleList) == 0x000008, "Wrong alignment on TradeHomogenService_ReceiveSaleList");
static_assert(sizeof(TradeHomogenService_ReceiveSaleList) == 0x000010, "Wrong size on TradeHomogenService_ReceiveSaleList");
static_assert(offsetof(TradeHomogenService_ReceiveSaleList, Orders) == 0x000000, "Member 'TradeHomogenService_ReceiveSaleList::Orders' has a wrong offset!");

// Function TGFGame.TradeHomogenService.ReceiveSaleOrder
// 0x0008 (0x0008 - 0x0000)
struct TradeHomogenService_ReceiveSaleOrder final
{
public:
	class UTradeSaleOrder*                        SaleOrder;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_ReceiveSaleOrder) == 0x000008, "Wrong alignment on TradeHomogenService_ReceiveSaleOrder");
static_assert(sizeof(TradeHomogenService_ReceiveSaleOrder) == 0x000008, "Wrong size on TradeHomogenService_ReceiveSaleOrder");
static_assert(offsetof(TradeHomogenService_ReceiveSaleOrder, SaleOrder) == 0x000000, "Member 'TradeHomogenService_ReceiveSaleOrder::SaleOrder' has a wrong offset!");

// Function TGFGame.TradeHomogenService.RefreshSearchList
// 0x0004 (0x0004 - 0x0000)
struct TradeHomogenService_RefreshSearchList final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_RefreshSearchList) == 0x000004, "Wrong alignment on TradeHomogenService_RefreshSearchList");
static_assert(sizeof(TradeHomogenService_RefreshSearchList) == 0x000004, "Wrong size on TradeHomogenService_RefreshSearchList");
static_assert(offsetof(TradeHomogenService_RefreshSearchList, PageIndex) == 0x000000, "Member 'TradeHomogenService_RefreshSearchList::PageIndex' has a wrong offset!");

// Function TGFGame.TradeHomogenService.RemoveSelectItem
// 0x0060 (0x0060 - 0x0000)
struct TradeHomogenService_RemoveSelectItem final
{
public:
	struct FTGFItem                               Item;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeHomogenService_RemoveSelectItem) == 0x000008, "Wrong alignment on TradeHomogenService_RemoveSelectItem");
static_assert(sizeof(TradeHomogenService_RemoveSelectItem) == 0x000060, "Wrong size on TradeHomogenService_RemoveSelectItem");
static_assert(offsetof(TradeHomogenService_RemoveSelectItem, Item) == 0x000000, "Member 'TradeHomogenService_RemoveSelectItem::Item' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_RemoveSelectItem, ReturnValue) == 0x000058, "Member 'TradeHomogenService_RemoveSelectItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeHomogenService.SendTradeOrderHistoryRequest
// 0x0004 (0x0004 - 0x0000)
struct TradeHomogenService_SendTradeOrderHistoryRequest final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_SendTradeOrderHistoryRequest) == 0x000004, "Wrong alignment on TradeHomogenService_SendTradeOrderHistoryRequest");
static_assert(sizeof(TradeHomogenService_SendTradeOrderHistoryRequest) == 0x000004, "Wrong size on TradeHomogenService_SendTradeOrderHistoryRequest");
static_assert(offsetof(TradeHomogenService_SendTradeOrderHistoryRequest, MarketId) == 0x000000, "Member 'TradeHomogenService_SendTradeOrderHistoryRequest::MarketId' has a wrong offset!");

// Function TGFGame.TradeHomogenService.SendTradeProductBasicInfoRequest
// 0x0018 (0x0018 - 0x0000)
struct TradeHomogenService_SendTradeProductBasicInfoRequest final
{
public:
	TArray<class UTradeSaleItem*>                 Items;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         OrderType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_SendTradeProductBasicInfoRequest) == 0x000008, "Wrong alignment on TradeHomogenService_SendTradeProductBasicInfoRequest");
static_assert(sizeof(TradeHomogenService_SendTradeProductBasicInfoRequest) == 0x000018, "Wrong size on TradeHomogenService_SendTradeProductBasicInfoRequest");
static_assert(offsetof(TradeHomogenService_SendTradeProductBasicInfoRequest, Items) == 0x000000, "Member 'TradeHomogenService_SendTradeProductBasicInfoRequest::Items' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeProductBasicInfoRequest, OrderType) == 0x000010, "Member 'TradeHomogenService_SendTradeProductBasicInfoRequest::OrderType' has a wrong offset!");

// Function TGFGame.TradeHomogenService.SendTradeProductOrderCancelRequest
// 0x0008 (0x0008 - 0x0000)
struct TradeHomogenService_SendTradeProductOrderCancelRequest final
{
public:
	int64                                         TradeOrderTicketId;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_SendTradeProductOrderCancelRequest) == 0x000008, "Wrong alignment on TradeHomogenService_SendTradeProductOrderCancelRequest");
static_assert(sizeof(TradeHomogenService_SendTradeProductOrderCancelRequest) == 0x000008, "Wrong size on TradeHomogenService_SendTradeProductOrderCancelRequest");
static_assert(offsetof(TradeHomogenService_SendTradeProductOrderCancelRequest, TradeOrderTicketId) == 0x000000, "Member 'TradeHomogenService_SendTradeProductOrderCancelRequest::TradeOrderTicketId' has a wrong offset!");

// Function TGFGame.TradeHomogenService.SendTradeProductPriceInfoRequest
// 0x0010 (0x0010 - 0x0000)
struct TradeHomogenService_SendTradeProductPriceInfoRequest final
{
public:
	int32                                         MarketId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderType;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotFireInfoRsp;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeHomogenService_SendTradeProductPriceInfoRequest) == 0x000004, "Wrong alignment on TradeHomogenService_SendTradeProductPriceInfoRequest");
static_assert(sizeof(TradeHomogenService_SendTradeProductPriceInfoRequest) == 0x000010, "Wrong size on TradeHomogenService_SendTradeProductPriceInfoRequest");
static_assert(offsetof(TradeHomogenService_SendTradeProductPriceInfoRequest, MarketId) == 0x000000, "Member 'TradeHomogenService_SendTradeProductPriceInfoRequest::MarketId' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeProductPriceInfoRequest, ProductId) == 0x000004, "Member 'TradeHomogenService_SendTradeProductPriceInfoRequest::ProductId' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeProductPriceInfoRequest, OrderType) == 0x000008, "Member 'TradeHomogenService_SendTradeProductPriceInfoRequest::OrderType' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeProductPriceInfoRequest, bNotFireInfoRsp) == 0x00000C, "Member 'TradeHomogenService_SendTradeProductPriceInfoRequest::bNotFireInfoRsp' has a wrong offset!");

// Function TGFGame.TradeHomogenService.SendTradeProductRecommendOrderTicketRequest
// 0x0001 (0x0001 - 0x0000)
struct TradeHomogenService_SendTradeProductRecommendOrderTicketRequest final
{
public:
	bool                                          Refresh;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_SendTradeProductRecommendOrderTicketRequest) == 0x000001, "Wrong alignment on TradeHomogenService_SendTradeProductRecommendOrderTicketRequest");
static_assert(sizeof(TradeHomogenService_SendTradeProductRecommendOrderTicketRequest) == 0x000001, "Wrong size on TradeHomogenService_SendTradeProductRecommendOrderTicketRequest");
static_assert(offsetof(TradeHomogenService_SendTradeProductRecommendOrderTicketRequest, Refresh) == 0x000000, "Member 'TradeHomogenService_SendTradeProductRecommendOrderTicketRequest::Refresh' has a wrong offset!");

// Function TGFGame.TradeHomogenService.SendTradePurchaseOrderPublishRequest
// 0x0028 (0x0028 - 0x0000)
struct TradeHomogenService_SendTradePurchaseOrderPublishRequest final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BillNo;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFixed;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeHomogenService_SendTradePurchaseOrderPublishRequest) == 0x000008, "Wrong alignment on TradeHomogenService_SendTradePurchaseOrderPublishRequest");
static_assert(sizeof(TradeHomogenService_SendTradePurchaseOrderPublishRequest) == 0x000028, "Wrong size on TradeHomogenService_SendTradePurchaseOrderPublishRequest");
static_assert(offsetof(TradeHomogenService_SendTradePurchaseOrderPublishRequest, ProductId) == 0x000000, "Member 'TradeHomogenService_SendTradePurchaseOrderPublishRequest::ProductId' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradePurchaseOrderPublishRequest, Count) == 0x000004, "Member 'TradeHomogenService_SendTradePurchaseOrderPublishRequest::Count' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradePurchaseOrderPublishRequest, Price) == 0x000008, "Member 'TradeHomogenService_SendTradePurchaseOrderPublishRequest::Price' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradePurchaseOrderPublishRequest, BillNo) == 0x000010, "Member 'TradeHomogenService_SendTradePurchaseOrderPublishRequest::BillNo' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradePurchaseOrderPublishRequest, IsFixed) == 0x000020, "Member 'TradeHomogenService_SendTradePurchaseOrderPublishRequest::IsFixed' has a wrong offset!");

// Function TGFGame.TradeHomogenService.SendTradeSaleOrderPublishRequest
// 0x0040 (0x0040 - 0x0000)
struct TradeHomogenService_SendTradeSaleOrderPublishRequest final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTGFItem>                       Items;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CostType;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BillNo;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBatchSell;                                       // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeHomogenService_SendTradeSaleOrderPublishRequest) == 0x000008, "Wrong alignment on TradeHomogenService_SendTradeSaleOrderPublishRequest");
static_assert(sizeof(TradeHomogenService_SendTradeSaleOrderPublishRequest) == 0x000040, "Wrong size on TradeHomogenService_SendTradeSaleOrderPublishRequest");
static_assert(offsetof(TradeHomogenService_SendTradeSaleOrderPublishRequest, ProductId) == 0x000000, "Member 'TradeHomogenService_SendTradeSaleOrderPublishRequest::ProductId' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSaleOrderPublishRequest, Count) == 0x000004, "Member 'TradeHomogenService_SendTradeSaleOrderPublishRequest::Count' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSaleOrderPublishRequest, Price) == 0x000008, "Member 'TradeHomogenService_SendTradeSaleOrderPublishRequest::Price' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSaleOrderPublishRequest, Items) == 0x000010, "Member 'TradeHomogenService_SendTradeSaleOrderPublishRequest::Items' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSaleOrderPublishRequest, CostType) == 0x000020, "Member 'TradeHomogenService_SendTradeSaleOrderPublishRequest::CostType' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSaleOrderPublishRequest, BillNo) == 0x000028, "Member 'TradeHomogenService_SendTradeSaleOrderPublishRequest::BillNo' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSaleOrderPublishRequest, IsBatchSell) == 0x000038, "Member 'TradeHomogenService_SendTradeSaleOrderPublishRequest::IsBatchSell' has a wrong offset!");

// Function TGFGame.TradeHomogenService.SendTradeSearchRequest
// 0x0038 (0x0038 - 0x0000)
struct TradeHomogenService_SendTradeSearchRequest final
{
public:
	int32                                         Career;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorType;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SubTypes;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPrice;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPrice;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix1;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix2;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Affix3;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFProtoTgfDTradeIndexSearchBound*     Bound;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_SendTradeSearchRequest) == 0x000008, "Wrong alignment on TradeHomogenService_SendTradeSearchRequest");
static_assert(sizeof(TradeHomogenService_SendTradeSearchRequest) == 0x000038, "Wrong size on TradeHomogenService_SendTradeSearchRequest");
static_assert(offsetof(TradeHomogenService_SendTradeSearchRequest, Career) == 0x000000, "Member 'TradeHomogenService_SendTradeSearchRequest::Career' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSearchRequest, MinorType) == 0x000004, "Member 'TradeHomogenService_SendTradeSearchRequest::MinorType' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSearchRequest, SubTypes) == 0x000008, "Member 'TradeHomogenService_SendTradeSearchRequest::SubTypes' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSearchRequest, Rarity) == 0x000018, "Member 'TradeHomogenService_SendTradeSearchRequest::Rarity' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSearchRequest, MinPrice) == 0x00001C, "Member 'TradeHomogenService_SendTradeSearchRequest::MinPrice' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSearchRequest, MaxPrice) == 0x000020, "Member 'TradeHomogenService_SendTradeSearchRequest::MaxPrice' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSearchRequest, Affix1) == 0x000024, "Member 'TradeHomogenService_SendTradeSearchRequest::Affix1' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSearchRequest, Affix2) == 0x000028, "Member 'TradeHomogenService_SendTradeSearchRequest::Affix2' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSearchRequest, Affix3) == 0x00002C, "Member 'TradeHomogenService_SendTradeSearchRequest::Affix3' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SendTradeSearchRequest, Bound) == 0x000030, "Member 'TradeHomogenService_SendTradeSearchRequest::Bound' has a wrong offset!");

// Function TGFGame.TradeHomogenService.SetPageDataCache
// 0x0020 (0x0020 - 0x0000)
struct TradeHomogenService_SetPageDataCache final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTGFTradeMarketProductData*>     Datas;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          NextPage;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeHomogenService_SetPageDataCache) == 0x000008, "Wrong alignment on TradeHomogenService_SetPageDataCache");
static_assert(sizeof(TradeHomogenService_SetPageDataCache) == 0x000020, "Wrong size on TradeHomogenService_SetPageDataCache");
static_assert(offsetof(TradeHomogenService_SetPageDataCache, PageIndex) == 0x000000, "Member 'TradeHomogenService_SetPageDataCache::PageIndex' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SetPageDataCache, Datas) == 0x000008, "Member 'TradeHomogenService_SetPageDataCache::Datas' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_SetPageDataCache, NextPage) == 0x000018, "Member 'TradeHomogenService_SetPageDataCache::NextPage' has a wrong offset!");

// Function TGFGame.TradeHomogenService.SetProductSoldOut
// 0x0008 (0x0008 - 0x0000)
struct TradeHomogenService_SetProductSoldOut final
{
public:
	int64                                         ProductId;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_SetProductSoldOut) == 0x000008, "Wrong alignment on TradeHomogenService_SetProductSoldOut");
static_assert(sizeof(TradeHomogenService_SetProductSoldOut) == 0x000008, "Wrong size on TradeHomogenService_SetProductSoldOut");
static_assert(offsetof(TradeHomogenService_SetProductSoldOut, ProductId) == 0x000000, "Member 'TradeHomogenService_SetProductSoldOut::ProductId' has a wrong offset!");

// Function TGFGame.TradeHomogenService.SetSaleMultiMode
// 0x0001 (0x0001 - 0x0000)
struct TradeHomogenService_SetSaleMultiMode final
{
public:
	bool                                          MultiMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_SetSaleMultiMode) == 0x000001, "Wrong alignment on TradeHomogenService_SetSaleMultiMode");
static_assert(sizeof(TradeHomogenService_SetSaleMultiMode) == 0x000001, "Wrong size on TradeHomogenService_SetSaleMultiMode");
static_assert(offsetof(TradeHomogenService_SetSaleMultiMode, MultiMode) == 0x000000, "Member 'TradeHomogenService_SetSaleMultiMode::MultiMode' has a wrong offset!");

// Function TGFGame.TradeHomogenService.TradeProductBasicInfoReq
// 0x0018 (0x0018 - 0x0000)
struct TradeHomogenService_TradeProductBasicInfoReq final
{
public:
	TArray<class UTGFTradeMarketProductData*>     Products;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         OrderType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_TradeProductBasicInfoReq) == 0x000008, "Wrong alignment on TradeHomogenService_TradeProductBasicInfoReq");
static_assert(sizeof(TradeHomogenService_TradeProductBasicInfoReq) == 0x000018, "Wrong size on TradeHomogenService_TradeProductBasicInfoReq");
static_assert(offsetof(TradeHomogenService_TradeProductBasicInfoReq, Products) == 0x000000, "Member 'TradeHomogenService_TradeProductBasicInfoReq::Products' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_TradeProductBasicInfoReq, OrderType) == 0x000010, "Member 'TradeHomogenService_TradeProductBasicInfoReq::OrderType' has a wrong offset!");

// Function TGFGame.TradeHomogenService.TradeProductBasicInfoReqByProductId
// 0x0010 (0x0010 - 0x0000)
struct TradeHomogenService_TradeProductBasicInfoReqByProductId final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         OrderType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_TradeProductBasicInfoReqByProductId) == 0x000008, "Wrong alignment on TradeHomogenService_TradeProductBasicInfoReqByProductId");
static_assert(sizeof(TradeHomogenService_TradeProductBasicInfoReqByProductId) == 0x000010, "Wrong size on TradeHomogenService_TradeProductBasicInfoReqByProductId");
static_assert(offsetof(TradeHomogenService_TradeProductBasicInfoReqByProductId, ProductId) == 0x000000, "Member 'TradeHomogenService_TradeProductBasicInfoReqByProductId::ProductId' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_TradeProductBasicInfoReqByProductId, OrderType) == 0x000008, "Member 'TradeHomogenService_TradeProductBasicInfoReqByProductId::OrderType' has a wrong offset!");

// Function TGFGame.TradeHomogenService.TradeProductBasicInfoReqByProductIdArray
// 0x0018 (0x0018 - 0x0000)
struct TradeHomogenService_TradeProductBasicInfoReqByProductIdArray final
{
public:
	TArray<int32>                                 ProductIds;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         OrderType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_TradeProductBasicInfoReqByProductIdArray) == 0x000008, "Wrong alignment on TradeHomogenService_TradeProductBasicInfoReqByProductIdArray");
static_assert(sizeof(TradeHomogenService_TradeProductBasicInfoReqByProductIdArray) == 0x000018, "Wrong size on TradeHomogenService_TradeProductBasicInfoReqByProductIdArray");
static_assert(offsetof(TradeHomogenService_TradeProductBasicInfoReqByProductIdArray, ProductIds) == 0x000000, "Member 'TradeHomogenService_TradeProductBasicInfoReqByProductIdArray::ProductIds' has a wrong offset!");
static_assert(offsetof(TradeHomogenService_TradeProductBasicInfoReqByProductIdArray, OrderType) == 0x000010, "Member 'TradeHomogenService_TradeProductBasicInfoReqByProductIdArray::OrderType' has a wrong offset!");

// Function TGFGame.TradeHomogenService.TradeSearchPageRequest
// 0x0008 (0x0008 - 0x0000)
struct TradeHomogenService_TradeSearchPageRequest final
{
public:
	class UTGFProtoTgfDTradeIndexSearchBound*     Bound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_TradeSearchPageRequest) == 0x000008, "Wrong alignment on TradeHomogenService_TradeSearchPageRequest");
static_assert(sizeof(TradeHomogenService_TradeSearchPageRequest) == 0x000008, "Wrong size on TradeHomogenService_TradeSearchPageRequest");
static_assert(offsetof(TradeHomogenService_TradeSearchPageRequest, Bound) == 0x000000, "Member 'TradeHomogenService_TradeSearchPageRequest::Bound' has a wrong offset!");

// Function TGFGame.TradeHomogenService.GetCurrentIncome
// 0x0004 (0x0004 - 0x0000)
struct TradeHomogenService_GetCurrentIncome final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeHomogenService_GetCurrentIncome) == 0x000004, "Wrong alignment on TradeHomogenService_GetCurrentIncome");
static_assert(sizeof(TradeHomogenService_GetCurrentIncome) == 0x000004, "Wrong size on TradeHomogenService_GetCurrentIncome");
static_assert(offsetof(TradeHomogenService_GetCurrentIncome, ReturnValue) == 0x000000, "Member 'TradeHomogenService_GetCurrentIncome::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetItem
// 0x0058 (0x0058 - 0x0000)
struct TradeProductBuyOrder_GetItem final
{
public:
	struct FTGFItem                               ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetItem) == 0x000008, "Wrong alignment on TradeProductBuyOrder_GetItem");
static_assert(sizeof(TradeProductBuyOrder_GetItem) == 0x000058, "Wrong size on TradeProductBuyOrder_GetItem");
static_assert(offsetof(TradeProductBuyOrder_GetItem, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetBuyTime
// 0x0008 (0x0008 - 0x0000)
struct TradeProductBuyOrder_GetBuyTime final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetBuyTime) == 0x000008, "Wrong alignment on TradeProductBuyOrder_GetBuyTime");
static_assert(sizeof(TradeProductBuyOrder_GetBuyTime) == 0x000008, "Wrong size on TradeProductBuyOrder_GetBuyTime");
static_assert(offsetof(TradeProductBuyOrder_GetBuyTime, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetBuyTime::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetIsFixedOrder
// 0x0001 (0x0001 - 0x0000)
struct TradeProductBuyOrder_GetIsFixedOrder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetIsFixedOrder) == 0x000001, "Wrong alignment on TradeProductBuyOrder_GetIsFixedOrder");
static_assert(sizeof(TradeProductBuyOrder_GetIsFixedOrder) == 0x000001, "Wrong size on TradeProductBuyOrder_GetIsFixedOrder");
static_assert(offsetof(TradeProductBuyOrder_GetIsFixedOrder, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetIsFixedOrder::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetItemTypeId
// 0x0004 (0x0004 - 0x0000)
struct TradeProductBuyOrder_GetItemTypeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetItemTypeId) == 0x000004, "Wrong alignment on TradeProductBuyOrder_GetItemTypeId");
static_assert(sizeof(TradeProductBuyOrder_GetItemTypeId) == 0x000004, "Wrong size on TradeProductBuyOrder_GetItemTypeId");
static_assert(offsetof(TradeProductBuyOrder_GetItemTypeId, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetItemTypeId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetOriginItemCount
// 0x0004 (0x0004 - 0x0000)
struct TradeProductBuyOrder_GetOriginItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetOriginItemCount) == 0x000004, "Wrong alignment on TradeProductBuyOrder_GetOriginItemCount");
static_assert(sizeof(TradeProductBuyOrder_GetOriginItemCount) == 0x000004, "Wrong size on TradeProductBuyOrder_GetOriginItemCount");
static_assert(offsetof(TradeProductBuyOrder_GetOriginItemCount, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetOriginItemCount::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetPurchaseLeftCount
// 0x0004 (0x0004 - 0x0000)
struct TradeProductBuyOrder_GetPurchaseLeftCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetPurchaseLeftCount) == 0x000004, "Wrong alignment on TradeProductBuyOrder_GetPurchaseLeftCount");
static_assert(sizeof(TradeProductBuyOrder_GetPurchaseLeftCount) == 0x000004, "Wrong size on TradeProductBuyOrder_GetPurchaseLeftCount");
static_assert(offsetof(TradeProductBuyOrder_GetPurchaseLeftCount, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetPurchaseLeftCount::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetPurchaseLeftPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeProductBuyOrder_GetPurchaseLeftPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetPurchaseLeftPrice) == 0x000004, "Wrong alignment on TradeProductBuyOrder_GetPurchaseLeftPrice");
static_assert(sizeof(TradeProductBuyOrder_GetPurchaseLeftPrice) == 0x000004, "Wrong size on TradeProductBuyOrder_GetPurchaseLeftPrice");
static_assert(offsetof(TradeProductBuyOrder_GetPurchaseLeftPrice, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetPurchaseLeftPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetPurchaseOriginItemCount
// 0x0004 (0x0004 - 0x0000)
struct TradeProductBuyOrder_GetPurchaseOriginItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetPurchaseOriginItemCount) == 0x000004, "Wrong alignment on TradeProductBuyOrder_GetPurchaseOriginItemCount");
static_assert(sizeof(TradeProductBuyOrder_GetPurchaseOriginItemCount) == 0x000004, "Wrong size on TradeProductBuyOrder_GetPurchaseOriginItemCount");
static_assert(offsetof(TradeProductBuyOrder_GetPurchaseOriginItemCount, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetPurchaseOriginItemCount::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetPurchaseOriginPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeProductBuyOrder_GetPurchaseOriginPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetPurchaseOriginPrice) == 0x000004, "Wrong alignment on TradeProductBuyOrder_GetPurchaseOriginPrice");
static_assert(sizeof(TradeProductBuyOrder_GetPurchaseOriginPrice) == 0x000004, "Wrong size on TradeProductBuyOrder_GetPurchaseOriginPrice");
static_assert(offsetof(TradeProductBuyOrder_GetPurchaseOriginPrice, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetPurchaseOriginPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetPurchaseUnitPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeProductBuyOrder_GetPurchaseUnitPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetPurchaseUnitPrice) == 0x000004, "Wrong alignment on TradeProductBuyOrder_GetPurchaseUnitPrice");
static_assert(sizeof(TradeProductBuyOrder_GetPurchaseUnitPrice) == 0x000004, "Wrong size on TradeProductBuyOrder_GetPurchaseUnitPrice");
static_assert(offsetof(TradeProductBuyOrder_GetPurchaseUnitPrice, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetPurchaseUnitPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetRealDealTime
// 0x0008 (0x0008 - 0x0000)
struct TradeProductBuyOrder_GetRealDealTime final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetRealDealTime) == 0x000008, "Wrong alignment on TradeProductBuyOrder_GetRealDealTime");
static_assert(sizeof(TradeProductBuyOrder_GetRealDealTime) == 0x000008, "Wrong size on TradeProductBuyOrder_GetRealDealTime");
static_assert(offsetof(TradeProductBuyOrder_GetRealDealTime, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetRealDealTime::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetTradeItemProductId
// 0x0004 (0x0004 - 0x0000)
struct TradeProductBuyOrder_GetTradeItemProductId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetTradeItemProductId) == 0x000004, "Wrong alignment on TradeProductBuyOrder_GetTradeItemProductId");
static_assert(sizeof(TradeProductBuyOrder_GetTradeItemProductId) == 0x000004, "Wrong size on TradeProductBuyOrder_GetTradeItemProductId");
static_assert(offsetof(TradeProductBuyOrder_GetTradeItemProductId, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetTradeItemProductId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetTradeProductTicketId
// 0x0008 (0x0008 - 0x0000)
struct TradeProductBuyOrder_GetTradeProductTicketId final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetTradeProductTicketId) == 0x000008, "Wrong alignment on TradeProductBuyOrder_GetTradeProductTicketId");
static_assert(sizeof(TradeProductBuyOrder_GetTradeProductTicketId) == 0x000008, "Wrong size on TradeProductBuyOrder_GetTradeProductTicketId");
static_assert(offsetof(TradeProductBuyOrder_GetTradeProductTicketId, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetTradeProductTicketId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetTradeTicketState
// 0x0008 (0x0008 - 0x0000)
struct TradeProductBuyOrder_GetTradeTicketState final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetTradeTicketState) == 0x000008, "Wrong alignment on TradeProductBuyOrder_GetTradeTicketState");
static_assert(sizeof(TradeProductBuyOrder_GetTradeTicketState) == 0x000008, "Wrong size on TradeProductBuyOrder_GetTradeTicketState");
static_assert(offsetof(TradeProductBuyOrder_GetTradeTicketState, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetTradeTicketState::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.GetUnitPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeProductBuyOrder_GetUnitPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_GetUnitPrice) == 0x000004, "Wrong alignment on TradeProductBuyOrder_GetUnitPrice");
static_assert(sizeof(TradeProductBuyOrder_GetUnitPrice) == 0x000004, "Wrong size on TradeProductBuyOrder_GetUnitPrice");
static_assert(offsetof(TradeProductBuyOrder_GetUnitPrice, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_GetUnitPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeProductBuyOrder.IsPartDeal
// 0x0001 (0x0001 - 0x0000)
struct TradeProductBuyOrder_IsPartDeal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeProductBuyOrder_IsPartDeal) == 0x000001, "Wrong alignment on TradeProductBuyOrder_IsPartDeal");
static_assert(sizeof(TradeProductBuyOrder_IsPartDeal) == 0x000001, "Wrong size on TradeProductBuyOrder_IsPartDeal");
static_assert(offsetof(TradeProductBuyOrder_IsPartDeal, ReturnValue) == 0x000000, "Member 'TradeProductBuyOrder_IsPartDeal::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSaleItem.IsCorruptionItem
// 0x0001 (0x0001 - 0x0000)
struct TradeSaleItem_IsCorruptionItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSaleItem_IsCorruptionItem) == 0x000001, "Wrong alignment on TradeSaleItem_IsCorruptionItem");
static_assert(sizeof(TradeSaleItem_IsCorruptionItem) == 0x000001, "Wrong size on TradeSaleItem_IsCorruptionItem");
static_assert(offsetof(TradeSaleItem_IsCorruptionItem, ReturnValue) == 0x000000, "Member 'TradeSaleItem_IsCorruptionItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetItem
// 0x0058 (0x0058 - 0x0000)
struct TradeSearchResultOrder_GetItem final
{
public:
	struct FTGFItem                               ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetItem) == 0x000008, "Wrong alignment on TradeSearchResultOrder_GetItem");
static_assert(sizeof(TradeSearchResultOrder_GetItem) == 0x000058, "Wrong size on TradeSearchResultOrder_GetItem");
static_assert(offsetof(TradeSearchResultOrder_GetItem, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetItemWrapper
// 0x0008 (0x0008 - 0x0000)
struct TradeSearchResultOrder_GetItemWrapper final
{
public:
	class UTgfInventoryItemWrapper_Lobby*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetItemWrapper) == 0x000008, "Wrong alignment on TradeSearchResultOrder_GetItemWrapper");
static_assert(sizeof(TradeSearchResultOrder_GetItemWrapper) == 0x000008, "Wrong size on TradeSearchResultOrder_GetItemWrapper");
static_assert(offsetof(TradeSearchResultOrder_GetItemWrapper, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetItemWrapper::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetSourceTypes
// 0x0010 (0x0010 - 0x0000)
struct TradeSearchResultOrder_GetSourceTypes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetSourceTypes) == 0x000008, "Wrong alignment on TradeSearchResultOrder_GetSourceTypes");
static_assert(sizeof(TradeSearchResultOrder_GetSourceTypes) == 0x000010, "Wrong size on TradeSearchResultOrder_GetSourceTypes");
static_assert(offsetof(TradeSearchResultOrder_GetSourceTypes, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetSourceTypes::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.IsCorruptionItem
// 0x0001 (0x0001 - 0x0000)
struct TradeSearchResultOrder_IsCorruptionItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_IsCorruptionItem) == 0x000001, "Wrong alignment on TradeSearchResultOrder_IsCorruptionItem");
static_assert(sizeof(TradeSearchResultOrder_IsCorruptionItem) == 0x000001, "Wrong size on TradeSearchResultOrder_IsCorruptionItem");
static_assert(offsetof(TradeSearchResultOrder_IsCorruptionItem, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_IsCorruptionItem::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetCurrentBidPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeSearchResultOrder_GetCurrentBidPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetCurrentBidPrice) == 0x000004, "Wrong alignment on TradeSearchResultOrder_GetCurrentBidPrice");
static_assert(sizeof(TradeSearchResultOrder_GetCurrentBidPrice) == 0x000004, "Wrong size on TradeSearchResultOrder_GetCurrentBidPrice");
static_assert(offsetof(TradeSearchResultOrder_GetCurrentBidPrice, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetCurrentBidPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetFixedPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeSearchResultOrder_GetFixedPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetFixedPrice) == 0x000004, "Wrong alignment on TradeSearchResultOrder_GetFixedPrice");
static_assert(sizeof(TradeSearchResultOrder_GetFixedPrice) == 0x000004, "Wrong size on TradeSearchResultOrder_GetFixedPrice");
static_assert(offsetof(TradeSearchResultOrder_GetFixedPrice, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetFixedPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetItemRarity
// 0x0004 (0x0004 - 0x0000)
struct TradeSearchResultOrder_GetItemRarity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetItemRarity) == 0x000004, "Wrong alignment on TradeSearchResultOrder_GetItemRarity");
static_assert(sizeof(TradeSearchResultOrder_GetItemRarity) == 0x000004, "Wrong size on TradeSearchResultOrder_GetItemRarity");
static_assert(offsetof(TradeSearchResultOrder_GetItemRarity, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetItemRarity::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetItemTypeId
// 0x0004 (0x0004 - 0x0000)
struct TradeSearchResultOrder_GetItemTypeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetItemTypeId) == 0x000004, "Wrong alignment on TradeSearchResultOrder_GetItemTypeId");
static_assert(sizeof(TradeSearchResultOrder_GetItemTypeId) == 0x000004, "Wrong size on TradeSearchResultOrder_GetItemTypeId");
static_assert(offsetof(TradeSearchResultOrder_GetItemTypeId, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetItemTypeId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetRemainTime
// 0x0008 (0x0008 - 0x0000)
struct TradeSearchResultOrder_GetRemainTime final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetRemainTime) == 0x000008, "Wrong alignment on TradeSearchResultOrder_GetRemainTime");
static_assert(sizeof(TradeSearchResultOrder_GetRemainTime) == 0x000008, "Wrong size on TradeSearchResultOrder_GetRemainTime");
static_assert(offsetof(TradeSearchResultOrder_GetRemainTime, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetRemainTime::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetSpScore
// 0x0008 (0x0008 - 0x0000)
struct TradeSearchResultOrder_GetSpScore final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetSpScore) == 0x000008, "Wrong alignment on TradeSearchResultOrder_GetSpScore");
static_assert(sizeof(TradeSearchResultOrder_GetSpScore) == 0x000008, "Wrong size on TradeSearchResultOrder_GetSpScore");
static_assert(offsetof(TradeSearchResultOrder_GetSpScore, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetSpScore::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetStartingPrice
// 0x0004 (0x0004 - 0x0000)
struct TradeSearchResultOrder_GetStartingPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetStartingPrice) == 0x000004, "Wrong alignment on TradeSearchResultOrder_GetStartingPrice");
static_assert(sizeof(TradeSearchResultOrder_GetStartingPrice) == 0x000004, "Wrong size on TradeSearchResultOrder_GetStartingPrice");
static_assert(offsetof(TradeSearchResultOrder_GetStartingPrice, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetStartingPrice::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetState
// 0x0001 (0x0001 - 0x0000)
struct TradeSearchResultOrder_GetState final
{
public:
	ETradeSaleOrderState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetState) == 0x000001, "Wrong alignment on TradeSearchResultOrder_GetState");
static_assert(sizeof(TradeSearchResultOrder_GetState) == 0x000001, "Wrong size on TradeSearchResultOrder_GetState");
static_assert(offsetof(TradeSearchResultOrder_GetState, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetState::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetTradeItemProductId
// 0x0004 (0x0004 - 0x0000)
struct TradeSearchResultOrder_GetTradeItemProductId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetTradeItemProductId) == 0x000004, "Wrong alignment on TradeSearchResultOrder_GetTradeItemProductId");
static_assert(sizeof(TradeSearchResultOrder_GetTradeItemProductId) == 0x000004, "Wrong size on TradeSearchResultOrder_GetTradeItemProductId");
static_assert(offsetof(TradeSearchResultOrder_GetTradeItemProductId, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetTradeItemProductId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.GetTradeOrderTicketId
// 0x0008 (0x0008 - 0x0000)
struct TradeSearchResultOrder_GetTradeOrderTicketId final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_GetTradeOrderTicketId) == 0x000008, "Wrong alignment on TradeSearchResultOrder_GetTradeOrderTicketId");
static_assert(sizeof(TradeSearchResultOrder_GetTradeOrderTicketId) == 0x000008, "Wrong size on TradeSearchResultOrder_GetTradeOrderTicketId");
static_assert(offsetof(TradeSearchResultOrder_GetTradeOrderTicketId, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_GetTradeOrderTicketId::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.IsMyAuctionOrder
// 0x0001 (0x0001 - 0x0000)
struct TradeSearchResultOrder_IsMyAuctionOrder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_IsMyAuctionOrder) == 0x000001, "Wrong alignment on TradeSearchResultOrder_IsMyAuctionOrder");
static_assert(sizeof(TradeSearchResultOrder_IsMyAuctionOrder) == 0x000001, "Wrong size on TradeSearchResultOrder_IsMyAuctionOrder");
static_assert(offsetof(TradeSearchResultOrder_IsMyAuctionOrder, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_IsMyAuctionOrder::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeSearchResultOrder.IsMyBidOrderAndCurrentWinning
// 0x0001 (0x0001 - 0x0000)
struct TradeSearchResultOrder_IsMyBidOrderAndCurrentWinning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeSearchResultOrder_IsMyBidOrderAndCurrentWinning) == 0x000001, "Wrong alignment on TradeSearchResultOrder_IsMyBidOrderAndCurrentWinning");
static_assert(sizeof(TradeSearchResultOrder_IsMyBidOrderAndCurrentWinning) == 0x000001, "Wrong size on TradeSearchResultOrder_IsMyBidOrderAndCurrentWinning");
static_assert(offsetof(TradeSearchResultOrder_IsMyBidOrderAndCurrentWinning, ReturnValue) == 0x000000, "Member 'TradeSearchResultOrder_IsMyBidOrderAndCurrentWinning::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.BidOrder
// 0x0010 (0x0010 - 0x0000)
struct TradeService_BidOrder final
{
public:
	class UTradeSearchResultOrder*                Order;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BidPrice;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeService_BidOrder) == 0x000008, "Wrong alignment on TradeService_BidOrder");
static_assert(sizeof(TradeService_BidOrder) == 0x000010, "Wrong size on TradeService_BidOrder");
static_assert(offsetof(TradeService_BidOrder, Order) == 0x000000, "Member 'TradeService_BidOrder::Order' has a wrong offset!");
static_assert(offsetof(TradeService_BidOrder, BidPrice) == 0x000008, "Member 'TradeService_BidOrder::BidPrice' has a wrong offset!");

// Function TGFGame.TradeService.CancelSaleOrder
// 0x0008 (0x0008 - 0x0000)
struct TradeService_CancelSaleOrder final
{
public:
	class UTradeSaleOrder*                        SaleOrder;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_CancelSaleOrder) == 0x000008, "Wrong alignment on TradeService_CancelSaleOrder");
static_assert(sizeof(TradeService_CancelSaleOrder) == 0x000008, "Wrong size on TradeService_CancelSaleOrder");
static_assert(offsetof(TradeService_CancelSaleOrder, SaleOrder) == 0x000000, "Member 'TradeService_CancelSaleOrder::SaleOrder' has a wrong offset!");

// Function TGFGame.TradeService.CheckHaveBidOutAuction
// 0x0001 (0x0001 - 0x0000)
struct TradeService_CheckHaveBidOutAuction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_CheckHaveBidOutAuction) == 0x000001, "Wrong alignment on TradeService_CheckHaveBidOutAuction");
static_assert(sizeof(TradeService_CheckHaveBidOutAuction) == 0x000001, "Wrong size on TradeService_CheckHaveBidOutAuction");
static_assert(offsetof(TradeService_CheckHaveBidOutAuction, ReturnValue) == 0x000000, "Member 'TradeService_CheckHaveBidOutAuction::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.CheckHaveBidSuccessAuction
// 0x0001 (0x0001 - 0x0000)
struct TradeService_CheckHaveBidSuccessAuction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_CheckHaveBidSuccessAuction) == 0x000001, "Wrong alignment on TradeService_CheckHaveBidSuccessAuction");
static_assert(sizeof(TradeService_CheckHaveBidSuccessAuction) == 0x000001, "Wrong size on TradeService_CheckHaveBidSuccessAuction");
static_assert(offsetof(TradeService_CheckHaveBidSuccessAuction, ReturnValue) == 0x000000, "Member 'TradeService_CheckHaveBidSuccessAuction::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.CheckHaveOutBidRedPoint
// 0x0001 (0x0001 - 0x0000)
struct TradeService_CheckHaveOutBidRedPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_CheckHaveOutBidRedPoint) == 0x000001, "Wrong alignment on TradeService_CheckHaveOutBidRedPoint");
static_assert(sizeof(TradeService_CheckHaveOutBidRedPoint) == 0x000001, "Wrong size on TradeService_CheckHaveOutBidRedPoint");
static_assert(offsetof(TradeService_CheckHaveOutBidRedPoint, ReturnValue) == 0x000000, "Member 'TradeService_CheckHaveOutBidRedPoint::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.CheckHaveSellRedPoint
// 0x0001 (0x0001 - 0x0000)
struct TradeService_CheckHaveSellRedPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_CheckHaveSellRedPoint) == 0x000001, "Wrong alignment on TradeService_CheckHaveSellRedPoint");
static_assert(sizeof(TradeService_CheckHaveSellRedPoint) == 0x000001, "Wrong size on TradeService_CheckHaveSellRedPoint");
static_assert(offsetof(TradeService_CheckHaveSellRedPoint, ReturnValue) == 0x000000, "Member 'TradeService_CheckHaveSellRedPoint::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.DeleteBidOrder
// 0x0008 (0x0008 - 0x0000)
struct TradeService_DeleteBidOrder final
{
public:
	class UTradeBidOrder*                         BidOrder;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_DeleteBidOrder) == 0x000008, "Wrong alignment on TradeService_DeleteBidOrder");
static_assert(sizeof(TradeService_DeleteBidOrder) == 0x000008, "Wrong size on TradeService_DeleteBidOrder");
static_assert(offsetof(TradeService_DeleteBidOrder, BidOrder) == 0x000000, "Member 'TradeService_DeleteBidOrder::BidOrder' has a wrong offset!");

// Function TGFGame.TradeService.GetBagTabPageIndex
// 0x0004 (0x0004 - 0x0000)
struct TradeService_GetBagTabPageIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_GetBagTabPageIndex) == 0x000004, "Wrong alignment on TradeService_GetBagTabPageIndex");
static_assert(sizeof(TradeService_GetBagTabPageIndex) == 0x000004, "Wrong size on TradeService_GetBagTabPageIndex");
static_assert(offsetof(TradeService_GetBagTabPageIndex, ReturnValue) == 0x000000, "Member 'TradeService_GetBagTabPageIndex::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.GetInventoryPageIndex
// 0x0004 (0x0004 - 0x0000)
struct TradeService_GetInventoryPageIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_GetInventoryPageIndex) == 0x000004, "Wrong alignment on TradeService_GetInventoryPageIndex");
static_assert(sizeof(TradeService_GetInventoryPageIndex) == 0x000004, "Wrong size on TradeService_GetInventoryPageIndex");
static_assert(offsetof(TradeService_GetInventoryPageIndex, ReturnValue) == 0x000000, "Member 'TradeService_GetInventoryPageIndex::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.GetMyBidOrders
// 0x0018 (0x0018 - 0x0000)
struct TradeService_GetMyBidOrders final
{
public:
	ETradeBidOrderState                           State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTradeBidOrder*>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_GetMyBidOrders) == 0x000008, "Wrong alignment on TradeService_GetMyBidOrders");
static_assert(sizeof(TradeService_GetMyBidOrders) == 0x000018, "Wrong size on TradeService_GetMyBidOrders");
static_assert(offsetof(TradeService_GetMyBidOrders, State) == 0x000000, "Member 'TradeService_GetMyBidOrders::State' has a wrong offset!");
static_assert(offsetof(TradeService_GetMyBidOrders, ReturnValue) == 0x000008, "Member 'TradeService_GetMyBidOrders::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.GetReceiveOrderPendingSize
// 0x0010 (0x0010 - 0x0000)
struct TradeService_GetReceiveOrderPendingSize final
{
public:
	int64                                         TradeOrderTicketId;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TradeService_GetReceiveOrderPendingSize) == 0x000008, "Wrong alignment on TradeService_GetReceiveOrderPendingSize");
static_assert(sizeof(TradeService_GetReceiveOrderPendingSize) == 0x000010, "Wrong size on TradeService_GetReceiveOrderPendingSize");
static_assert(offsetof(TradeService_GetReceiveOrderPendingSize, TradeOrderTicketId) == 0x000000, "Member 'TradeService_GetReceiveOrderPendingSize::TradeOrderTicketId' has a wrong offset!");
static_assert(offsetof(TradeService_GetReceiveOrderPendingSize, ReturnValue) == 0x000008, "Member 'TradeService_GetReceiveOrderPendingSize::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.GetSaleOrders
// 0x0018 (0x0018 - 0x0000)
struct TradeService_GetSaleOrders final
{
public:
	int32                                         MaxCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTradeSaleOrder*>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_GetSaleOrders) == 0x000008, "Wrong alignment on TradeService_GetSaleOrders");
static_assert(sizeof(TradeService_GetSaleOrders) == 0x000018, "Wrong size on TradeService_GetSaleOrders");
static_assert(offsetof(TradeService_GetSaleOrders, MaxCount) == 0x000000, "Member 'TradeService_GetSaleOrders::MaxCount' has a wrong offset!");
static_assert(offsetof(TradeService_GetSaleOrders, ReturnValue) == 0x000008, "Member 'TradeService_GetSaleOrders::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.GetTradeIsUnlock
// 0x0001 (0x0001 - 0x0000)
struct TradeService_GetTradeIsUnlock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_GetTradeIsUnlock) == 0x000001, "Wrong alignment on TradeService_GetTradeIsUnlock");
static_assert(sizeof(TradeService_GetTradeIsUnlock) == 0x000001, "Wrong size on TradeService_GetTradeIsUnlock");
static_assert(offsetof(TradeService_GetTradeIsUnlock, ReturnValue) == 0x000000, "Member 'TradeService_GetTradeIsUnlock::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.GetTradeMarketProductDataById
// 0x0010 (0x0010 - 0x0000)
struct TradeService_GetTradeMarketProductDataById final
{
public:
	int32                                         ProductId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTGFTradeMarketProductData*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_GetTradeMarketProductDataById) == 0x000008, "Wrong alignment on TradeService_GetTradeMarketProductDataById");
static_assert(sizeof(TradeService_GetTradeMarketProductDataById) == 0x000010, "Wrong size on TradeService_GetTradeMarketProductDataById");
static_assert(offsetof(TradeService_GetTradeMarketProductDataById, ProductId) == 0x000000, "Member 'TradeService_GetTradeMarketProductDataById::ProductId' has a wrong offset!");
static_assert(offsetof(TradeService_GetTradeMarketProductDataById, ReturnValue) == 0x000008, "Member 'TradeService_GetTradeMarketProductDataById::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.GetTradeUnlockIsClicked
// 0x0001 (0x0001 - 0x0000)
struct TradeService_GetTradeUnlockIsClicked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_GetTradeUnlockIsClicked) == 0x000001, "Wrong alignment on TradeService_GetTradeUnlockIsClicked");
static_assert(sizeof(TradeService_GetTradeUnlockIsClicked) == 0x000001, "Wrong size on TradeService_GetTradeUnlockIsClicked");
static_assert(offsetof(TradeService_GetTradeUnlockIsClicked, ReturnValue) == 0x000000, "Member 'TradeService_GetTradeUnlockIsClicked::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.GetTradeUnlockTimeStamp
// 0x0008 (0x0008 - 0x0000)
struct TradeService_GetTradeUnlockTimeStamp final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_GetTradeUnlockTimeStamp) == 0x000008, "Wrong alignment on TradeService_GetTradeUnlockTimeStamp");
static_assert(sizeof(TradeService_GetTradeUnlockTimeStamp) == 0x000008, "Wrong size on TradeService_GetTradeUnlockTimeStamp");
static_assert(offsetof(TradeService_GetTradeUnlockTimeStamp, ReturnValue) == 0x000000, "Member 'TradeService_GetTradeUnlockTimeStamp::ReturnValue' has a wrong offset!");

// Function TGFGame.TradeService.OnGameLogout
// 0x0008 (0x0008 - 0x0000)
struct TradeService_OnGameLogout final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_OnGameLogout) == 0x000008, "Wrong alignment on TradeService_OnGameLogout");
static_assert(sizeof(TradeService_OnGameLogout) == 0x000008, "Wrong size on TradeService_OnGameLogout");
static_assert(offsetof(TradeService_OnGameLogout, Args) == 0x000000, "Member 'TradeService_OnGameLogout::Args' has a wrong offset!");

// Function TGFGame.TradeService.ReceiveBidOrder
// 0x0008 (0x0008 - 0x0000)
struct TradeService_ReceiveBidOrder final
{
public:
	class UTradeBidOrder*                         BidOrder;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_ReceiveBidOrder) == 0x000008, "Wrong alignment on TradeService_ReceiveBidOrder");
static_assert(sizeof(TradeService_ReceiveBidOrder) == 0x000008, "Wrong size on TradeService_ReceiveBidOrder");
static_assert(offsetof(TradeService_ReceiveBidOrder, BidOrder) == 0x000000, "Member 'TradeService_ReceiveBidOrder::BidOrder' has a wrong offset!");

// Function TGFGame.TradeService.ReceiveSaleList
// 0x0010 (0x0010 - 0x0000)
struct TradeService_ReceiveSaleList final
{
public:
	TArray<class UTradeSaleOrder*>                Orders;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_ReceiveSaleList) == 0x000008, "Wrong alignment on TradeService_ReceiveSaleList");
static_assert(sizeof(TradeService_ReceiveSaleList) == 0x000010, "Wrong size on TradeService_ReceiveSaleList");
static_assert(offsetof(TradeService_ReceiveSaleList, Orders) == 0x000000, "Member 'TradeService_ReceiveSaleList::Orders' has a wrong offset!");

// Function TGFGame.TradeService.ReceiveSaleOrder
// 0x0008 (0x0008 - 0x0000)
struct TradeService_ReceiveSaleOrder final
{
public:
	class UTradeSaleOrder*                        SaleOrder;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_ReceiveSaleOrder) == 0x000008, "Wrong alignment on TradeService_ReceiveSaleOrder");
static_assert(sizeof(TradeService_ReceiveSaleOrder) == 0x000008, "Wrong size on TradeService_ReceiveSaleOrder");
static_assert(offsetof(TradeService_ReceiveSaleOrder, SaleOrder) == 0x000000, "Member 'TradeService_ReceiveSaleOrder::SaleOrder' has a wrong offset!");

// Function TGFGame.TradeService.RefreshOrderInfoForBid
// 0x0008 (0x0008 - 0x0000)
struct TradeService_RefreshOrderInfoForBid final
{
public:
	class UTradeSearchResultOrder*                Order;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_RefreshOrderInfoForBid) == 0x000008, "Wrong alignment on TradeService_RefreshOrderInfoForBid");
static_assert(sizeof(TradeService_RefreshOrderInfoForBid) == 0x000008, "Wrong size on TradeService_RefreshOrderInfoForBid");
static_assert(offsetof(TradeService_RefreshOrderInfoForBid, Order) == 0x000000, "Member 'TradeService_RefreshOrderInfoForBid::Order' has a wrong offset!");

// Function TGFGame.TradeService.ReportBagTabState
// 0x0004 (0x0004 - 0x0000)
struct TradeService_ReportBagTabState final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_ReportBagTabState) == 0x000004, "Wrong alignment on TradeService_ReportBagTabState");
static_assert(sizeof(TradeService_ReportBagTabState) == 0x000004, "Wrong size on TradeService_ReportBagTabState");
static_assert(offsetof(TradeService_ReportBagTabState, PageIndex) == 0x000000, "Member 'TradeService_ReportBagTabState::PageIndex' has a wrong offset!");

// Function TGFGame.TradeService.SendTradeAuctionBasicInfoRequest
// 0x0010 (0x0010 - 0x0000)
struct TradeService_SendTradeAuctionBasicInfoRequest final
{
public:
	TArray<class UTradeSaleItem*>                 Items;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_SendTradeAuctionBasicInfoRequest) == 0x000008, "Wrong alignment on TradeService_SendTradeAuctionBasicInfoRequest");
static_assert(sizeof(TradeService_SendTradeAuctionBasicInfoRequest) == 0x000010, "Wrong size on TradeService_SendTradeAuctionBasicInfoRequest");
static_assert(offsetof(TradeService_SendTradeAuctionBasicInfoRequest, Items) == 0x000000, "Member 'TradeService_SendTradeAuctionBasicInfoRequest::Items' has a wrong offset!");

// Function TGFGame.TradeService.SetBidRedPointSeen
// 0x0001 (0x0001 - 0x0000)
struct TradeService_SetBidRedPointSeen final
{
public:
	bool                                          HasSeen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_SetBidRedPointSeen) == 0x000001, "Wrong alignment on TradeService_SetBidRedPointSeen");
static_assert(sizeof(TradeService_SetBidRedPointSeen) == 0x000001, "Wrong size on TradeService_SetBidRedPointSeen");
static_assert(offsetof(TradeService_SetBidRedPointSeen, HasSeen) == 0x000000, "Member 'TradeService_SetBidRedPointSeen::HasSeen' has a wrong offset!");

// Function TGFGame.TradeService.SetCurControlType
// 0x0004 (0x0004 - 0x0000)
struct TradeService_SetCurControlType final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_SetCurControlType) == 0x000004, "Wrong alignment on TradeService_SetCurControlType");
static_assert(sizeof(TradeService_SetCurControlType) == 0x000004, "Wrong size on TradeService_SetCurControlType");
static_assert(offsetof(TradeService_SetCurControlType, Type) == 0x000000, "Member 'TradeService_SetCurControlType::Type' has a wrong offset!");

// Function TGFGame.TradeService.SetInventoryPageIndex
// 0x0008 (0x0008 - 0x0000)
struct TradeService_SetInventoryPageIndex final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_SetInventoryPageIndex) == 0x000004, "Wrong alignment on TradeService_SetInventoryPageIndex");
static_assert(sizeof(TradeService_SetInventoryPageIndex) == 0x000008, "Wrong size on TradeService_SetInventoryPageIndex");
static_assert(offsetof(TradeService_SetInventoryPageIndex, PageIndex) == 0x000000, "Member 'TradeService_SetInventoryPageIndex::PageIndex' has a wrong offset!");
static_assert(offsetof(TradeService_SetInventoryPageIndex, Type) == 0x000004, "Member 'TradeService_SetInventoryPageIndex::Type' has a wrong offset!");

// Function TGFGame.TradeService.SetSellRedPointSeen
// 0x0001 (0x0001 - 0x0000)
struct TradeService_SetSellRedPointSeen final
{
public:
	bool                                          HasSeen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_SetSellRedPointSeen) == 0x000001, "Wrong alignment on TradeService_SetSellRedPointSeen");
static_assert(sizeof(TradeService_SetSellRedPointSeen) == 0x000001, "Wrong size on TradeService_SetSellRedPointSeen");
static_assert(offsetof(TradeService_SetSellRedPointSeen, HasSeen) == 0x000000, "Member 'TradeService_SetSellRedPointSeen::HasSeen' has a wrong offset!");

// Function TGFGame.TradeService.SetTradeUnlockClickState
// 0x0001 (0x0001 - 0x0000)
struct TradeService_SetTradeUnlockClickState final
{
public:
	bool                                          IsClickToClick;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_SetTradeUnlockClickState) == 0x000001, "Wrong alignment on TradeService_SetTradeUnlockClickState");
static_assert(sizeof(TradeService_SetTradeUnlockClickState) == 0x000001, "Wrong size on TradeService_SetTradeUnlockClickState");
static_assert(offsetof(TradeService_SetTradeUnlockClickState, IsClickToClick) == 0x000000, "Member 'TradeService_SetTradeUnlockClickState::IsClickToClick' has a wrong offset!");

// Function TGFGame.TradeService.SetTradeUnlockTimeStamp
// 0x0008 (0x0008 - 0x0000)
struct TradeService_SetTradeUnlockTimeStamp final
{
public:
	int64                                         Timestamp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_SetTradeUnlockTimeStamp) == 0x000008, "Wrong alignment on TradeService_SetTradeUnlockTimeStamp");
static_assert(sizeof(TradeService_SetTradeUnlockTimeStamp) == 0x000008, "Wrong size on TradeService_SetTradeUnlockTimeStamp");
static_assert(offsetof(TradeService_SetTradeUnlockTimeStamp, Timestamp) == 0x000000, "Member 'TradeService_SetTradeUnlockTimeStamp::Timestamp' has a wrong offset!");

// Function TGFGame.TradeService.GetCurrentIncome
// 0x0004 (0x0004 - 0x0000)
struct TradeService_GetCurrentIncome final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TradeService_GetCurrentIncome) == 0x000004, "Wrong alignment on TradeService_GetCurrentIncome");
static_assert(sizeof(TradeService_GetCurrentIncome) == 0x000004, "Wrong size on TradeService_GetCurrentIncome");
static_assert(offsetof(TradeService_GetCurrentIncome, ReturnValue) == 0x000000, "Member 'TradeService_GetCurrentIncome::ReturnValue' has a wrong offset!");

// Function TGFGame.UpdateConfigBytesService.CheckUseUpdateConfigBytes
// 0x0010 (0x0010 - 0x0000)
struct UpdateConfigBytesService_CheckUseUpdateConfigBytes final
{
public:
	class FString                                 StrServerVersion;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateConfigBytesService_CheckUseUpdateConfigBytes) == 0x000008, "Wrong alignment on UpdateConfigBytesService_CheckUseUpdateConfigBytes");
static_assert(sizeof(UpdateConfigBytesService_CheckUseUpdateConfigBytes) == 0x000010, "Wrong size on UpdateConfigBytesService_CheckUseUpdateConfigBytes");
static_assert(offsetof(UpdateConfigBytesService_CheckUseUpdateConfigBytes, StrServerVersion) == 0x000000, "Member 'UpdateConfigBytesService_CheckUseUpdateConfigBytes::StrServerVersion' has a wrong offset!");

// Function TGFGame.UpdateConfigBytesService.HandleRainbowConfig
// 0x0008 (0x0008 - 0x0000)
struct UpdateConfigBytesService_HandleRainbowConfig final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateConfigBytesService_HandleRainbowConfig) == 0x000008, "Wrong alignment on UpdateConfigBytesService_HandleRainbowConfig");
static_assert(sizeof(UpdateConfigBytesService_HandleRainbowConfig) == 0x000008, "Wrong size on UpdateConfigBytesService_HandleRainbowConfig");
static_assert(offsetof(UpdateConfigBytesService_HandleRainbowConfig, Args) == 0x000000, "Member 'UpdateConfigBytesService_HandleRainbowConfig::Args' has a wrong offset!");

// Function TGFGame.TGFSettingScreen.HandleSettingKeyBindingActivate
// 0x0008 (0x0008 - 0x0000)
struct TGFSettingScreen_HandleSettingKeyBindingActivate final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingScreen_HandleSettingKeyBindingActivate) == 0x000008, "Wrong alignment on TGFSettingScreen_HandleSettingKeyBindingActivate");
static_assert(sizeof(TGFSettingScreen_HandleSettingKeyBindingActivate) == 0x000008, "Wrong size on TGFSettingScreen_HandleSettingKeyBindingActivate");
static_assert(offsetof(TGFSettingScreen_HandleSettingKeyBindingActivate, Args) == 0x000000, "Member 'TGFSettingScreen_HandleSettingKeyBindingActivate::Args' has a wrong offset!");

// Function TGFGame.TGFSettingScreen.HandleSettingKeyBindingDeactivate
// 0x0008 (0x0008 - 0x0000)
struct TGFSettingScreen_HandleSettingKeyBindingDeactivate final
{
public:
	class UTGFEventArgs*                          Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingScreen_HandleSettingKeyBindingDeactivate) == 0x000008, "Wrong alignment on TGFSettingScreen_HandleSettingKeyBindingDeactivate");
static_assert(sizeof(TGFSettingScreen_HandleSettingKeyBindingDeactivate) == 0x000008, "Wrong size on TGFSettingScreen_HandleSettingKeyBindingDeactivate");
static_assert(offsetof(TGFSettingScreen_HandleSettingKeyBindingDeactivate, Args) == 0x000000, "Member 'TGFSettingScreen_HandleSettingKeyBindingDeactivate::Args' has a wrong offset!");

// Function TGFGame.TGFSettingScreen.HandleToggleFullScreenCommand
// 0x0001 (0x0001 - 0x0000)
struct TGFSettingScreen_HandleToggleFullScreenCommand final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingScreen_HandleToggleFullScreenCommand) == 0x000001, "Wrong alignment on TGFSettingScreen_HandleToggleFullScreenCommand");
static_assert(sizeof(TGFSettingScreen_HandleToggleFullScreenCommand) == 0x000001, "Wrong size on TGFSettingScreen_HandleToggleFullScreenCommand");
static_assert(offsetof(TGFSettingScreen_HandleToggleFullScreenCommand, bValue) == 0x000000, "Member 'TGFSettingScreen_HandleToggleFullScreenCommand::bValue' has a wrong offset!");

// Function TGFGame.TGFSettingScreen.NavigateToSettingTab
// 0x0008 (0x0008 - 0x0000)
struct TGFSettingScreen_NavigateToSettingTab final
{
public:
	class FName                                   SettingDevName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingScreen_NavigateToSettingTab) == 0x000004, "Wrong alignment on TGFSettingScreen_NavigateToSettingTab");
static_assert(sizeof(TGFSettingScreen_NavigateToSettingTab) == 0x000008, "Wrong size on TGFSettingScreen_NavigateToSettingTab");
static_assert(offsetof(TGFSettingScreen_NavigateToSettingTab, SettingDevName) == 0x000000, "Member 'TGFSettingScreen_NavigateToSettingTab::SettingDevName' has a wrong offset!");

// Function TGFGame.TGFSettingScreen.GetMapName
// 0x0010 (0x0010 - 0x0000)
struct TGFSettingScreen_GetMapName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSettingScreen_GetMapName) == 0x000008, "Wrong alignment on TGFSettingScreen_GetMapName");
static_assert(sizeof(TGFSettingScreen_GetMapName) == 0x000010, "Wrong size on TGFSettingScreen_GetMapName");
static_assert(offsetof(TGFSettingScreen_GetMapName, ReturnValue) == 0x000000, "Member 'TGFSettingScreen_GetMapName::ReturnValue' has a wrong offset!");

}


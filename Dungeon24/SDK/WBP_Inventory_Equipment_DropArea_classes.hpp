#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Inventory_Equipment_DropArea

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "LyraGame_structs.hpp"
#include "CommonUI_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Inventory_Equipment_DropArea.WBP_Inventory_Equipment_DropArea_C
// 0x0098 (0x0480 - 0x03E8)
class UWBP_Inventory_Equipment_DropArea_C final : public UCommonActivatableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 DropIndicator;                                     // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bAllowPreview;                                     // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnItemDrop;                                        // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	ETgfEquipSlot                                 EquipmentSlot;                                     // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDragOver;                                       // 0x0411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMatchesCurrentOperation;                          // 0x0412(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIndicatorShownForCurrentOperation;                // 0x0413(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bArbitrary;                                        // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocked;                                          // 0x0415(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_416[0x2];                                      // 0x0416(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              MatchTexture;                                      // 0x0418(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              UnMatchTexture;                                    // 0x0448(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UTgfWidgetGamepadWrapper*               GamepadWrapper;                                    // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnActivated();
	void DoTgfCustomNavigation(EUINavigation Param_Navigation, class UWidget** Result);
	void ExecuteUbergraph_WBP_Inventory_Equipment_DropArea(int32 EntryPoint);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnInventoryDragInitiated(class UTgfInventoryDragDropOperation* DragOperation);
	void OnItemDragEnded(class UDragDropOperation* Operation);
	void OnItemDrop__DelegateSignature(class UBP_Inventory_DragDrop_Base_C* DropOperation);
	void PreConstruct(bool IsDesignTime);
	void Query_Valid_Drop(class UDragDropOperation* Operation, bool* bIsValid);
	void Show_Hide_Drop_Indicator(bool bShow);
	void ShowIndicatorExternally(bool bShow, bool bMatches);
	void Update_Drop_Indicator_Image();

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Inventory_Equipment_DropArea_C">();
	}
	static class UWBP_Inventory_Equipment_DropArea_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Inventory_Equipment_DropArea_C>();
	}
};
static_assert(alignof(UWBP_Inventory_Equipment_DropArea_C) == 0x000008, "Wrong alignment on UWBP_Inventory_Equipment_DropArea_C");
static_assert(sizeof(UWBP_Inventory_Equipment_DropArea_C) == 0x000480, "Wrong size on UWBP_Inventory_Equipment_DropArea_C");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, UberGraphFrame) == 0x0003E8, "Member 'UWBP_Inventory_Equipment_DropArea_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, DropIndicator) == 0x0003F0, "Member 'UWBP_Inventory_Equipment_DropArea_C::DropIndicator' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, bAllowPreview) == 0x0003F8, "Member 'UWBP_Inventory_Equipment_DropArea_C::bAllowPreview' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, OnItemDrop) == 0x000400, "Member 'UWBP_Inventory_Equipment_DropArea_C::OnItemDrop' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, EquipmentSlot) == 0x000410, "Member 'UWBP_Inventory_Equipment_DropArea_C::EquipmentSlot' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, bIsDragOver) == 0x000411, "Member 'UWBP_Inventory_Equipment_DropArea_C::bIsDragOver' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, bMatchesCurrentOperation) == 0x000412, "Member 'UWBP_Inventory_Equipment_DropArea_C::bMatchesCurrentOperation' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, bIndicatorShownForCurrentOperation) == 0x000413, "Member 'UWBP_Inventory_Equipment_DropArea_C::bIndicatorShownForCurrentOperation' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, bArbitrary) == 0x000414, "Member 'UWBP_Inventory_Equipment_DropArea_C::bArbitrary' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, IsLocked) == 0x000415, "Member 'UWBP_Inventory_Equipment_DropArea_C::IsLocked' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, MatchTexture) == 0x000418, "Member 'UWBP_Inventory_Equipment_DropArea_C::MatchTexture' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, UnMatchTexture) == 0x000448, "Member 'UWBP_Inventory_Equipment_DropArea_C::UnMatchTexture' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_Equipment_DropArea_C, GamepadWrapper) == 0x000478, "Member 'UWBP_Inventory_Equipment_DropArea_C::GamepadWrapper' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimationWarpingRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum AnimationWarpingRuntime.EFootPlacementLockType
// NumValues: 0x0005
enum class EFootPlacementLockType : uint8
{
	Unlocked                                 = 0,
	PivotAroundBall                          = 1,
	PivotAroundAnkle                         = 2,
	LockRotation                             = 3,
	EFootPlacementLockType_MAX               = 4,
};

// Enum AnimationWarpingRuntime.EPelvisHeightMode
// NumValues: 0x0004
enum class EPelvisHeightMode : uint8
{
	AllLegs                                  = 0,
	AllPlantedFeet                           = 1,
	FrontPlantedFeetUphill_FrontFeetDownhill = 2,
	EPelvisHeightMode_MAX                    = 3,
};

// Enum AnimationWarpingRuntime.EActorMovementCompensationMode
// NumValues: 0x0004
enum class EActorMovementCompensationMode : uint8
{
	ComponentSpace                           = 0,
	WorldSpace                               = 1,
	SuddenMotionOnly                         = 2,
	EActorMovementCompensationMode_MAX       = 3,
};

// Enum AnimationWarpingRuntime.EOffsetRootBoneMode
// NumValues: 0x0005
enum class EOffsetRootBoneMode : uint8
{
	Accumulate                               = 0,
	Interpolate                              = 1,
	Hold                                     = 2,
	Release                                  = 3,
	EOffsetRootBoneMode_MAX                  = 4,
};

// Enum AnimationWarpingRuntime.ECheckGroundRotateBoneAxis
// NumValues: 0x0005
enum class ECheckGroundRotateBoneAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	Undefined                                = 3,
	ECheckGroundRotateBoneAxis_MAX           = 4,
};

// Enum AnimationWarpingRuntime.EQuadrupedSlopingAxis
// NumValues: 0x0004
enum class EQuadrupedSlopingAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	EQuadrupedSlopingAxis_MAX                = 3,
};

// ScriptStruct AnimationWarpingRuntime.FootPlacementInterpolationSettings
// 0x0024 (0x0024 - 0x0000)
struct FFootPlacementInterpolationSettings final
{
public:
	float                                         UnplantLinearStiffness;                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnplantLinearDamping;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnplantAngularStiffness;                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnplantAngularDamping;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorLinearStiffness;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorLinearDamping;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorAngularStiffness;                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorAngularDamping;                               // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFloorInterpolation;                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFootPlacementInterpolationSettings) == 0x000004, "Wrong alignment on FFootPlacementInterpolationSettings");
static_assert(sizeof(FFootPlacementInterpolationSettings) == 0x000024, "Wrong size on FFootPlacementInterpolationSettings");
static_assert(offsetof(FFootPlacementInterpolationSettings, UnplantLinearStiffness) == 0x000000, "Member 'FFootPlacementInterpolationSettings::UnplantLinearStiffness' has a wrong offset!");
static_assert(offsetof(FFootPlacementInterpolationSettings, UnplantLinearDamping) == 0x000004, "Member 'FFootPlacementInterpolationSettings::UnplantLinearDamping' has a wrong offset!");
static_assert(offsetof(FFootPlacementInterpolationSettings, UnplantAngularStiffness) == 0x000008, "Member 'FFootPlacementInterpolationSettings::UnplantAngularStiffness' has a wrong offset!");
static_assert(offsetof(FFootPlacementInterpolationSettings, UnplantAngularDamping) == 0x00000C, "Member 'FFootPlacementInterpolationSettings::UnplantAngularDamping' has a wrong offset!");
static_assert(offsetof(FFootPlacementInterpolationSettings, FloorLinearStiffness) == 0x000010, "Member 'FFootPlacementInterpolationSettings::FloorLinearStiffness' has a wrong offset!");
static_assert(offsetof(FFootPlacementInterpolationSettings, FloorLinearDamping) == 0x000014, "Member 'FFootPlacementInterpolationSettings::FloorLinearDamping' has a wrong offset!");
static_assert(offsetof(FFootPlacementInterpolationSettings, FloorAngularStiffness) == 0x000018, "Member 'FFootPlacementInterpolationSettings::FloorAngularStiffness' has a wrong offset!");
static_assert(offsetof(FFootPlacementInterpolationSettings, FloorAngularDamping) == 0x00001C, "Member 'FFootPlacementInterpolationSettings::FloorAngularDamping' has a wrong offset!");
static_assert(offsetof(FFootPlacementInterpolationSettings, bEnableFloorInterpolation) == 0x000020, "Member 'FFootPlacementInterpolationSettings::bEnableFloorInterpolation' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.FootPlacementPelvisSettings
// 0x0020 (0x0020 - 0x0000)
struct FFootPlacementPelvisSettings final
{
public:
	float                                         MaxOffset;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearStiffness;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDamping;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalRebalancingWeight;                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOffsetHorizontal;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeelLiftRatio;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPelvisHeightMode                             PelvisHeightMode;                                  // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActorMovementCompensationMode                ActorMovementCompensationMode;                     // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInterpolation;                              // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootPlacementPelvisSettings) == 0x000004, "Wrong alignment on FFootPlacementPelvisSettings");
static_assert(sizeof(FFootPlacementPelvisSettings) == 0x000020, "Wrong size on FFootPlacementPelvisSettings");
static_assert(offsetof(FFootPlacementPelvisSettings, MaxOffset) == 0x000000, "Member 'FFootPlacementPelvisSettings::MaxOffset' has a wrong offset!");
static_assert(offsetof(FFootPlacementPelvisSettings, LinearStiffness) == 0x000004, "Member 'FFootPlacementPelvisSettings::LinearStiffness' has a wrong offset!");
static_assert(offsetof(FFootPlacementPelvisSettings, LinearDamping) == 0x000008, "Member 'FFootPlacementPelvisSettings::LinearDamping' has a wrong offset!");
static_assert(offsetof(FFootPlacementPelvisSettings, HorizontalRebalancingWeight) == 0x00000C, "Member 'FFootPlacementPelvisSettings::HorizontalRebalancingWeight' has a wrong offset!");
static_assert(offsetof(FFootPlacementPelvisSettings, MaxOffsetHorizontal) == 0x000010, "Member 'FFootPlacementPelvisSettings::MaxOffsetHorizontal' has a wrong offset!");
static_assert(offsetof(FFootPlacementPelvisSettings, HeelLiftRatio) == 0x000014, "Member 'FFootPlacementPelvisSettings::HeelLiftRatio' has a wrong offset!");
static_assert(offsetof(FFootPlacementPelvisSettings, PelvisHeightMode) == 0x000018, "Member 'FFootPlacementPelvisSettings::PelvisHeightMode' has a wrong offset!");
static_assert(offsetof(FFootPlacementPelvisSettings, ActorMovementCompensationMode) == 0x000019, "Member 'FFootPlacementPelvisSettings::ActorMovementCompensationMode' has a wrong offset!");
static_assert(offsetof(FFootPlacementPelvisSettings, bEnableInterpolation) == 0x00001A, "Member 'FFootPlacementPelvisSettings::bEnableInterpolation' has a wrong offset!");
static_assert(offsetof(FFootPlacementPelvisSettings, Offset) == 0x00001C, "Member 'FFootPlacementPelvisSettings::Offset' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.FootPlacemenLegDefinition
// 0x0044 (0x0044 - 0x0000)
struct FFootPlacemenLegDefinition final
{
public:
	struct FBoneReference                         FKFootBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         IKFootBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         BallBone;                                          // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpeedCurveName;                                    // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisableLockCurveName;                              // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootPlacemenLegDefinition) == 0x000004, "Wrong alignment on FFootPlacemenLegDefinition");
static_assert(sizeof(FFootPlacemenLegDefinition) == 0x000044, "Wrong size on FFootPlacemenLegDefinition");
static_assert(offsetof(FFootPlacemenLegDefinition, FKFootBone) == 0x000000, "Member 'FFootPlacemenLegDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FFootPlacemenLegDefinition, IKFootBone) == 0x000010, "Member 'FFootPlacemenLegDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FFootPlacemenLegDefinition, BallBone) == 0x000020, "Member 'FFootPlacemenLegDefinition::BallBone' has a wrong offset!");
static_assert(offsetof(FFootPlacemenLegDefinition, NumBonesInLimb) == 0x000030, "Member 'FFootPlacemenLegDefinition::NumBonesInLimb' has a wrong offset!");
static_assert(offsetof(FFootPlacemenLegDefinition, SpeedCurveName) == 0x000034, "Member 'FFootPlacemenLegDefinition::SpeedCurveName' has a wrong offset!");
static_assert(offsetof(FFootPlacemenLegDefinition, DisableLockCurveName) == 0x00003C, "Member 'FFootPlacemenLegDefinition::DisableLockCurveName' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.FootPlacementPlantSettings
// 0x0038 (0x0038 - 0x0000)
struct FFootPlacementPlantSettings final
{
public:
	float                                         SpeedThreshold;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToGround;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootPlacementLockType                        LockType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnplantRadius;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplantRadiusRatio;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnplantAngle;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplantAngleRatio;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxExtensionRatio;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinExtensionRatio;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeparatingDistance;                                // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnalignmentSpeedThreshold;                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnkleTwistReduction;                               // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdjustHeelBeforePlanting;                         // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShoesThickness;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootPlacementPlantSettings) == 0x000004, "Wrong alignment on FFootPlacementPlantSettings");
static_assert(sizeof(FFootPlacementPlantSettings) == 0x000038, "Wrong size on FFootPlacementPlantSettings");
static_assert(offsetof(FFootPlacementPlantSettings, SpeedThreshold) == 0x000000, "Member 'FFootPlacementPlantSettings::SpeedThreshold' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, DistanceToGround) == 0x000004, "Member 'FFootPlacementPlantSettings::DistanceToGround' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, LockType) == 0x000008, "Member 'FFootPlacementPlantSettings::LockType' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, UnplantRadius) == 0x00000C, "Member 'FFootPlacementPlantSettings::UnplantRadius' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, ReplantRadiusRatio) == 0x000010, "Member 'FFootPlacementPlantSettings::ReplantRadiusRatio' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, UnplantAngle) == 0x000014, "Member 'FFootPlacementPlantSettings::UnplantAngle' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, ReplantAngleRatio) == 0x000018, "Member 'FFootPlacementPlantSettings::ReplantAngleRatio' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, MaxExtensionRatio) == 0x00001C, "Member 'FFootPlacementPlantSettings::MaxExtensionRatio' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, MinExtensionRatio) == 0x000020, "Member 'FFootPlacementPlantSettings::MinExtensionRatio' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, SeparatingDistance) == 0x000024, "Member 'FFootPlacementPlantSettings::SeparatingDistance' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, UnalignmentSpeedThreshold) == 0x000028, "Member 'FFootPlacementPlantSettings::UnalignmentSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, AnkleTwistReduction) == 0x00002C, "Member 'FFootPlacementPlantSettings::AnkleTwistReduction' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, bAdjustHeelBeforePlanting) == 0x000030, "Member 'FFootPlacementPlantSettings::bAdjustHeelBeforePlanting' has a wrong offset!");
static_assert(offsetof(FFootPlacementPlantSettings, ShoesThickness) == 0x000034, "Member 'FFootPlacementPlantSettings::ShoesThickness' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.FootPlacementTraceSettings
// 0x001C (0x001C - 0x0000)
struct FFootPlacementTraceSettings final
{
public:
	float                                         StartOffset;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweepRadius;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               ComplexTraceChannel;                               // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxGroundPenetration;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimpleCollisionInfluence;                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               SimpleTraceChannel;                                // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFootPlacementTraceSettings) == 0x000004, "Wrong alignment on FFootPlacementTraceSettings");
static_assert(sizeof(FFootPlacementTraceSettings) == 0x00001C, "Wrong size on FFootPlacementTraceSettings");
static_assert(offsetof(FFootPlacementTraceSettings, StartOffset) == 0x000000, "Member 'FFootPlacementTraceSettings::StartOffset' has a wrong offset!");
static_assert(offsetof(FFootPlacementTraceSettings, EndOffset) == 0x000004, "Member 'FFootPlacementTraceSettings::EndOffset' has a wrong offset!");
static_assert(offsetof(FFootPlacementTraceSettings, SweepRadius) == 0x000008, "Member 'FFootPlacementTraceSettings::SweepRadius' has a wrong offset!");
static_assert(offsetof(FFootPlacementTraceSettings, ComplexTraceChannel) == 0x00000C, "Member 'FFootPlacementTraceSettings::ComplexTraceChannel' has a wrong offset!");
static_assert(offsetof(FFootPlacementTraceSettings, MaxGroundPenetration) == 0x000010, "Member 'FFootPlacementTraceSettings::MaxGroundPenetration' has a wrong offset!");
static_assert(offsetof(FFootPlacementTraceSettings, SimpleCollisionInfluence) == 0x000014, "Member 'FFootPlacementTraceSettings::SimpleCollisionInfluence' has a wrong offset!");
static_assert(offsetof(FFootPlacementTraceSettings, SimpleTraceChannel) == 0x000018, "Member 'FFootPlacementTraceSettings::SimpleTraceChannel' has a wrong offset!");
static_assert(offsetof(FFootPlacementTraceSettings, bEnabled) == 0x000019, "Member 'FFootPlacementTraceSettings::bEnabled' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.AnimNode_FootPlacement
// 0x0358 (0x0420 - 0x00C8)
struct alignas(0x10) FAnimNode_FootPlacement final : public FAnimNode_SkeletalControlBase
{
public:
	EWarpingEvaluationMode                        PlantSpeedMode;                                    // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         IKFootRootBone;                                    // 0x00CC(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x00DC(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFootPlacementPelvisSettings           PelvisSettings;                                    // 0x00EC(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFootPlacemenLegDefinition>     LegDefinitions;                                    // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFootPlacementPlantSettings            PlantSettings;                                     // 0x0120(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFootPlacementInterpolationSettings    InterpolationSettings;                             // 0x0158(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFootPlacementTraceSettings            TraceSettings;                                     // 0x017C(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0x288];                                    // 0x0198(0x0288)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_FootPlacement) == 0x000010, "Wrong alignment on FAnimNode_FootPlacement");
static_assert(sizeof(FAnimNode_FootPlacement) == 0x000420, "Wrong size on FAnimNode_FootPlacement");
static_assert(offsetof(FAnimNode_FootPlacement, PlantSpeedMode) == 0x0000C8, "Member 'FAnimNode_FootPlacement::PlantSpeedMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_FootPlacement, IKFootRootBone) == 0x0000CC, "Member 'FAnimNode_FootPlacement::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FootPlacement, PelvisBone) == 0x0000DC, "Member 'FAnimNode_FootPlacement::PelvisBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FootPlacement, PelvisSettings) == 0x0000EC, "Member 'FAnimNode_FootPlacement::PelvisSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_FootPlacement, LegDefinitions) == 0x000110, "Member 'FAnimNode_FootPlacement::LegDefinitions' has a wrong offset!");
static_assert(offsetof(FAnimNode_FootPlacement, PlantSettings) == 0x000120, "Member 'FAnimNode_FootPlacement::PlantSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_FootPlacement, InterpolationSettings) == 0x000158, "Member 'FAnimNode_FootPlacement::InterpolationSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_FootPlacement, TraceSettings) == 0x00017C, "Member 'FAnimNode_FootPlacement::TraceSettings' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.AnimNode_OffsetRootBone
// 0x00C8 (0x0190 - 0x00C8)
struct alignas(0x10) FAnimNode_OffsetRootBone final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_C8[0xC8];                                      // 0x00C8(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_OffsetRootBone) == 0x000010, "Wrong alignment on FAnimNode_OffsetRootBone");
static_assert(sizeof(FAnimNode_OffsetRootBone) == 0x000190, "Wrong size on FAnimNode_OffsetRootBone");

// ScriptStruct AnimationWarpingRuntime.FootPlacementRootDefinition
// 0x0020 (0x0020 - 0x0000)
struct FFootPlacementRootDefinition final
{
public:
	struct FBoneReference                         PelvisBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         IKRootBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootPlacementRootDefinition) == 0x000004, "Wrong alignment on FFootPlacementRootDefinition");
static_assert(sizeof(FFootPlacementRootDefinition) == 0x000020, "Wrong size on FFootPlacementRootDefinition");
static_assert(offsetof(FFootPlacementRootDefinition, PelvisBone) == 0x000000, "Member 'FFootPlacementRootDefinition::PelvisBone' has a wrong offset!");
static_assert(offsetof(FFootPlacementRootDefinition, IKRootBone) == 0x000010, "Member 'FFootPlacementRootDefinition::IKRootBone' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.AnimNode_OrientationWarping
// 0x00D0 (0x0198 - 0x00C8)
struct FAnimNode_OrientationWarping final : public FAnimNode_SkeletalControlBase
{
public:
	EWarpingEvaluationMode                        Mode;                                              // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OrientationAngle;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocomotionAngle;                                   // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRootMotionSpeedThreshold;                       // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocomotionAngleDeltaThreshold;                     // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 SpineBones;                                        // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         IKFootRootBone;                                    // 0x00F0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 IKFootBones;                                       // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EAxis                                         RotationAxis;                                      // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistributedBoneOrientationAlpha;                   // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationInterpSpeed;                               // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarpingAlpha;                                      // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAlpha;                                       // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOffsetAngle;                                    // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x70];                                     // 0x0128(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_OrientationWarping) == 0x000008, "Wrong alignment on FAnimNode_OrientationWarping");
static_assert(sizeof(FAnimNode_OrientationWarping) == 0x000198, "Wrong size on FAnimNode_OrientationWarping");
static_assert(offsetof(FAnimNode_OrientationWarping, Mode) == 0x0000C8, "Member 'FAnimNode_OrientationWarping::Mode' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, OrientationAngle) == 0x0000CC, "Member 'FAnimNode_OrientationWarping::OrientationAngle' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, LocomotionAngle) == 0x0000D0, "Member 'FAnimNode_OrientationWarping::LocomotionAngle' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, MinRootMotionSpeedThreshold) == 0x0000D4, "Member 'FAnimNode_OrientationWarping::MinRootMotionSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, LocomotionAngleDeltaThreshold) == 0x0000D8, "Member 'FAnimNode_OrientationWarping::LocomotionAngleDeltaThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, SpineBones) == 0x0000E0, "Member 'FAnimNode_OrientationWarping::SpineBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, IKFootRootBone) == 0x0000F0, "Member 'FAnimNode_OrientationWarping::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, IKFootBones) == 0x000100, "Member 'FAnimNode_OrientationWarping::IKFootBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, RotationAxis) == 0x000110, "Member 'FAnimNode_OrientationWarping::RotationAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, DistributedBoneOrientationAlpha) == 0x000114, "Member 'FAnimNode_OrientationWarping::DistributedBoneOrientationAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, RotationInterpSpeed) == 0x000118, "Member 'FAnimNode_OrientationWarping::RotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, WarpingAlpha) == 0x00011C, "Member 'FAnimNode_OrientationWarping::WarpingAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, OffsetAlpha) == 0x000120, "Member 'FAnimNode_OrientationWarping::OffsetAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, MaxOffsetAngle) == 0x000124, "Member 'FAnimNode_OrientationWarping::MaxOffsetAngle' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.SlopeWarpingFootDefinition
// 0x0028 (0x0028 - 0x0000)
struct FSlopeWarpingFootDefinition final
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootSize;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlopeWarpingFootDefinition) == 0x000004, "Wrong alignment on FSlopeWarpingFootDefinition");
static_assert(sizeof(FSlopeWarpingFootDefinition) == 0x000028, "Wrong size on FSlopeWarpingFootDefinition");
static_assert(offsetof(FSlopeWarpingFootDefinition, IKFootBone) == 0x000000, "Member 'FSlopeWarpingFootDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, FKFootBone) == 0x000010, "Member 'FSlopeWarpingFootDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, NumBonesInLimb) == 0x000020, "Member 'FSlopeWarpingFootDefinition::NumBonesInLimb' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, FootSize) == 0x000024, "Member 'FSlopeWarpingFootDefinition::FootSize' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.SlopeWarpingFootData
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x10) FSlopeWarpingFootData final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlopeWarpingFootData) == 0x000010, "Wrong alignment on FSlopeWarpingFootData");
static_assert(sizeof(FSlopeWarpingFootData) == 0x0000B0, "Wrong size on FSlopeWarpingFootData");

// ScriptStruct AnimationWarpingRuntime.AnimNode_SlopeWarping
// 0x0218 (0x02E0 - 0x00C8)
struct FAnimNode_SlopeWarping final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_C8[0x18];                                      // 0x00C8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         IKFootRootBone;                                    // 0x00E0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x00F0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSlopeWarpingFootDefinition>    FeetDefinitions;                                   // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlopeWarpingFootData>          FeetData;                                          // 0x0110(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           PelvisOffsetInterpolator;                          // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x58];                                     // 0x0128(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GravityDir;                                        // 0x0180(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CustomFloorOffset;                                 // 0x0198(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedDeltaTime;                                   // 0x01B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetFloorNormalWorldSpace;                       // 0x01B8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           FloorNormalInterpolator;                           // 0x01D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x58];                                     // 0x01D8(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetFloorOffsetLocalSpace;                       // 0x0230(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           FloorOffsetInterpolator;                           // 0x0248(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_250[0x58];                                     // 0x0250(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxStepHeight;                                     // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bKeepMeshInsideOfCapsule : 1;                      // 0x02AC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPullPelvisDown : 1;                               // 0x02AC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseCustomFloorOffset : 1;                         // 0x02AC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWasOnGround : 1;                                  // 0x02AC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowDebug : 1;                                    // 0x02AC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFloorSmoothingInitialized : 1;                    // 0x02AC(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActorLocation;                                     // 0x02B0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GravityDirCompSpace;                               // 0x02C8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAnimNode_SlopeWarping) == 0x000008, "Wrong alignment on FAnimNode_SlopeWarping");
static_assert(sizeof(FAnimNode_SlopeWarping) == 0x0002E0, "Wrong size on FAnimNode_SlopeWarping");
static_assert(offsetof(FAnimNode_SlopeWarping, IKFootRootBone) == 0x0000E0, "Member 'FAnimNode_SlopeWarping::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, PelvisBone) == 0x0000F0, "Member 'FAnimNode_SlopeWarping::PelvisBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, FeetDefinitions) == 0x000100, "Member 'FAnimNode_SlopeWarping::FeetDefinitions' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, FeetData) == 0x000110, "Member 'FAnimNode_SlopeWarping::FeetData' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, PelvisOffsetInterpolator) == 0x000120, "Member 'FAnimNode_SlopeWarping::PelvisOffsetInterpolator' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, GravityDir) == 0x000180, "Member 'FAnimNode_SlopeWarping::GravityDir' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, CustomFloorOffset) == 0x000198, "Member 'FAnimNode_SlopeWarping::CustomFloorOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, CachedDeltaTime) == 0x0001B0, "Member 'FAnimNode_SlopeWarping::CachedDeltaTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, TargetFloorNormalWorldSpace) == 0x0001B8, "Member 'FAnimNode_SlopeWarping::TargetFloorNormalWorldSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, FloorNormalInterpolator) == 0x0001D0, "Member 'FAnimNode_SlopeWarping::FloorNormalInterpolator' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, TargetFloorOffsetLocalSpace) == 0x000230, "Member 'FAnimNode_SlopeWarping::TargetFloorOffsetLocalSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, FloorOffsetInterpolator) == 0x000248, "Member 'FAnimNode_SlopeWarping::FloorOffsetInterpolator' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, MaxStepHeight) == 0x0002A8, "Member 'FAnimNode_SlopeWarping::MaxStepHeight' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, ActorLocation) == 0x0002B0, "Member 'FAnimNode_SlopeWarping::ActorLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, GravityDirCompSpace) == 0x0002C8, "Member 'FAnimNode_SlopeWarping::GravityDirCompSpace' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.StrideWarpingFootDefinition
// 0x0030 (0x0030 - 0x0000)
struct FStrideWarpingFootDefinition final
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ThighBone;                                         // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrideWarpingFootDefinition) == 0x000004, "Wrong alignment on FStrideWarpingFootDefinition");
static_assert(sizeof(FStrideWarpingFootDefinition) == 0x000030, "Wrong size on FStrideWarpingFootDefinition");
static_assert(offsetof(FStrideWarpingFootDefinition, IKFootBone) == 0x000000, "Member 'FStrideWarpingFootDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FStrideWarpingFootDefinition, FKFootBone) == 0x000010, "Member 'FStrideWarpingFootDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FStrideWarpingFootDefinition, ThighBone) == 0x000020, "Member 'FStrideWarpingFootDefinition::ThighBone' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.AnimNode_StrideWarping
// 0x0170 (0x0238 - 0x00C8)
struct FAnimNode_StrideWarping final : public FAnimNode_SkeletalControlBase
{
public:
	EWarpingEvaluationMode                        Mode;                                              // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StrideDirection;                                   // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrideScale;                                       // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocomotionSpeed;                                   // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRootMotionSpeedThreshold;                       // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x00F4(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         IKFootRootBone;                                    // 0x0104(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStrideWarpingFootDefinition>   FootDefinitions;                                   // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FInputClampConstants                   StrideScaleModifier;                               // 0x0128(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWarpingVectorValue                    FloorNormalDirection;                              // 0x0140(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWarpingVectorValue                    GravityDirection;                                  // 0x0160(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FIKFootPelvisPullDownSolver            PelvisIKFootSolver;                                // 0x0180(0x0070)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOrientStrideDirectionUsingFloorNormal;            // 0x01F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompensateIKUsingFKThighRotation;                 // 0x01F1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampIKUsingFKLimits;                             // 0x01F2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F3[0x45];                                     // 0x01F3(0x0045)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_StrideWarping) == 0x000008, "Wrong alignment on FAnimNode_StrideWarping");
static_assert(sizeof(FAnimNode_StrideWarping) == 0x000238, "Wrong size on FAnimNode_StrideWarping");
static_assert(offsetof(FAnimNode_StrideWarping, Mode) == 0x0000C8, "Member 'FAnimNode_StrideWarping::Mode' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, StrideDirection) == 0x0000D0, "Member 'FAnimNode_StrideWarping::StrideDirection' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, StrideScale) == 0x0000E8, "Member 'FAnimNode_StrideWarping::StrideScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, LocomotionSpeed) == 0x0000EC, "Member 'FAnimNode_StrideWarping::LocomotionSpeed' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, MinRootMotionSpeedThreshold) == 0x0000F0, "Member 'FAnimNode_StrideWarping::MinRootMotionSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, PelvisBone) == 0x0000F4, "Member 'FAnimNode_StrideWarping::PelvisBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, IKFootRootBone) == 0x000104, "Member 'FAnimNode_StrideWarping::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, FootDefinitions) == 0x000118, "Member 'FAnimNode_StrideWarping::FootDefinitions' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, StrideScaleModifier) == 0x000128, "Member 'FAnimNode_StrideWarping::StrideScaleModifier' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, FloorNormalDirection) == 0x000140, "Member 'FAnimNode_StrideWarping::FloorNormalDirection' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, GravityDirection) == 0x000160, "Member 'FAnimNode_StrideWarping::GravityDirection' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, PelvisIKFootSolver) == 0x000180, "Member 'FAnimNode_StrideWarping::PelvisIKFootSolver' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, bOrientStrideDirectionUsingFloorNormal) == 0x0001F0, "Member 'FAnimNode_StrideWarping::bOrientStrideDirectionUsingFloorNormal' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, bCompensateIKUsingFKThighRotation) == 0x0001F1, "Member 'FAnimNode_StrideWarping::bCompensateIKUsingFKThighRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarping, bClampIKUsingFKLimits) == 0x0001F2, "Member 'FAnimNode_StrideWarping::bClampIKUsingFKLimits' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.CheckGroundRotateBoneSetting
// 0x0018 (0x0018 - 0x0000)
struct FCheckGroundRotateBoneSetting final
{
public:
	struct FBoneReference                         RotateBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ClampAngle;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EpsilonAngle;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheckGroundRotateBoneSetting) == 0x000004, "Wrong alignment on FCheckGroundRotateBoneSetting");
static_assert(sizeof(FCheckGroundRotateBoneSetting) == 0x000018, "Wrong size on FCheckGroundRotateBoneSetting");
static_assert(offsetof(FCheckGroundRotateBoneSetting, RotateBone) == 0x000000, "Member 'FCheckGroundRotateBoneSetting::RotateBone' has a wrong offset!");
static_assert(offsetof(FCheckGroundRotateBoneSetting, ClampAngle) == 0x000010, "Member 'FCheckGroundRotateBoneSetting::ClampAngle' has a wrong offset!");
static_assert(offsetof(FCheckGroundRotateBoneSetting, EpsilonAngle) == 0x000014, "Member 'FCheckGroundRotateBoneSetting::EpsilonAngle' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.CheckGroundBonesSettings
// 0x0048 (0x0048 - 0x0000)
struct FCheckGroundBonesSettings final
{
public:
	struct FBoneReference                         FirstBone;                                         // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         SecondBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ExtraBone;                                         // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCheckGroundRotateBoneSetting          RotateBone;                                        // 0x0030(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheckGroundBonesSettings) == 0x000004, "Wrong alignment on FCheckGroundBonesSettings");
static_assert(sizeof(FCheckGroundBonesSettings) == 0x000048, "Wrong size on FCheckGroundBonesSettings");
static_assert(offsetof(FCheckGroundBonesSettings, FirstBone) == 0x000000, "Member 'FCheckGroundBonesSettings::FirstBone' has a wrong offset!");
static_assert(offsetof(FCheckGroundBonesSettings, SecondBone) == 0x000010, "Member 'FCheckGroundBonesSettings::SecondBone' has a wrong offset!");
static_assert(offsetof(FCheckGroundBonesSettings, ExtraBone) == 0x000020, "Member 'FCheckGroundBonesSettings::ExtraBone' has a wrong offset!");
static_assert(offsetof(FCheckGroundBonesSettings, RotateBone) == 0x000030, "Member 'FCheckGroundBonesSettings::RotateBone' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.CheckGroundTraceSettings
// 0x000C (0x000C - 0x0000)
struct FCheckGroundTraceSettings final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCheckGroundTraceSettings) == 0x000004, "Wrong alignment on FCheckGroundTraceSettings");
static_assert(sizeof(FCheckGroundTraceSettings) == 0x00000C, "Wrong size on FCheckGroundTraceSettings");
static_assert(offsetof(FCheckGroundTraceSettings, Length) == 0x000000, "Member 'FCheckGroundTraceSettings::Length' has a wrong offset!");
static_assert(offsetof(FCheckGroundTraceSettings, Radius) == 0x000004, "Member 'FCheckGroundTraceSettings::Radius' has a wrong offset!");
static_assert(offsetof(FCheckGroundTraceSettings, TraceChannel) == 0x000008, "Member 'FCheckGroundTraceSettings::TraceChannel' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.CheckGroundDebugSettings
// 0x0014 (0x0014 - 0x0000)
struct FCheckGroundDebugSettings final
{
public:
	bool                                          bDebug;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoxRadius;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECheckGroundRotateBoneAxis                    TestAxis;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TestAngle;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheckGroundDebugSettings) == 0x000004, "Wrong alignment on FCheckGroundDebugSettings");
static_assert(sizeof(FCheckGroundDebugSettings) == 0x000014, "Wrong size on FCheckGroundDebugSettings");
static_assert(offsetof(FCheckGroundDebugSettings, bDebug) == 0x000000, "Member 'FCheckGroundDebugSettings::bDebug' has a wrong offset!");
static_assert(offsetof(FCheckGroundDebugSettings, BoxRadius) == 0x000004, "Member 'FCheckGroundDebugSettings::BoxRadius' has a wrong offset!");
static_assert(offsetof(FCheckGroundDebugSettings, Thickness) == 0x000008, "Member 'FCheckGroundDebugSettings::Thickness' has a wrong offset!");
static_assert(offsetof(FCheckGroundDebugSettings, TestAxis) == 0x00000C, "Member 'FCheckGroundDebugSettings::TestAxis' has a wrong offset!");
static_assert(offsetof(FCheckGroundDebugSettings, TestAngle) == 0x000010, "Member 'FCheckGroundDebugSettings::TestAngle' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.CheckGroundLerpSettings
// 0x000C (0x000C - 0x0000)
struct FCheckGroundLerpSettings final
{
public:
	bool                                          bLerp;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Stiffness;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingFactor;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheckGroundLerpSettings) == 0x000004, "Wrong alignment on FCheckGroundLerpSettings");
static_assert(sizeof(FCheckGroundLerpSettings) == 0x00000C, "Wrong size on FCheckGroundLerpSettings");
static_assert(offsetof(FCheckGroundLerpSettings, bLerp) == 0x000000, "Member 'FCheckGroundLerpSettings::bLerp' has a wrong offset!");
static_assert(offsetof(FCheckGroundLerpSettings, Stiffness) == 0x000004, "Member 'FCheckGroundLerpSettings::Stiffness' has a wrong offset!");
static_assert(offsetof(FCheckGroundLerpSettings, DampingFactor) == 0x000008, "Member 'FCheckGroundLerpSettings::DampingFactor' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.TGFAnimNode_CheckGround
// 0x0298 (0x0360 - 0x00C8)
struct alignas(0x10) FTGFAnimNode_CheckGround final : public FAnimNode_SkeletalControlBase
{
public:
	bool                                          bEnable;                                           // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCheckGroundBonesSettings              Bones;                                             // 0x00CC(0x0048)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCheckGroundTraceSettings              TraceSettings;                                     // 0x0114(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCheckGroundDebugSettings              DebugSettings;                                     // 0x0120(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCheckGroundLerpSettings               LerpSettings;                                      // 0x0134(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x220];                                    // 0x0140(0x0220)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFAnimNode_CheckGround) == 0x000010, "Wrong alignment on FTGFAnimNode_CheckGround");
static_assert(sizeof(FTGFAnimNode_CheckGround) == 0x000360, "Wrong size on FTGFAnimNode_CheckGround");
static_assert(offsetof(FTGFAnimNode_CheckGround, bEnable) == 0x0000C8, "Member 'FTGFAnimNode_CheckGround::bEnable' has a wrong offset!");
static_assert(offsetof(FTGFAnimNode_CheckGround, Bones) == 0x0000CC, "Member 'FTGFAnimNode_CheckGround::Bones' has a wrong offset!");
static_assert(offsetof(FTGFAnimNode_CheckGround, TraceSettings) == 0x000114, "Member 'FTGFAnimNode_CheckGround::TraceSettings' has a wrong offset!");
static_assert(offsetof(FTGFAnimNode_CheckGround, DebugSettings) == 0x000120, "Member 'FTGFAnimNode_CheckGround::DebugSettings' has a wrong offset!");
static_assert(offsetof(FTGFAnimNode_CheckGround, LerpSettings) == 0x000134, "Member 'FTGFAnimNode_CheckGround::LerpSettings' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.QuadrupedFootBoneDefinition
// 0x0020 (0x0020 - 0x0000)
struct FQuadrupedFootBoneDefinition final
{
public:
	struct FBoneReference                         IKBone;                                            // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKBone;                                            // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuadrupedFootBoneDefinition) == 0x000004, "Wrong alignment on FQuadrupedFootBoneDefinition");
static_assert(sizeof(FQuadrupedFootBoneDefinition) == 0x000020, "Wrong size on FQuadrupedFootBoneDefinition");
static_assert(offsetof(FQuadrupedFootBoneDefinition, IKBone) == 0x000000, "Member 'FQuadrupedFootBoneDefinition::IKBone' has a wrong offset!");
static_assert(offsetof(FQuadrupedFootBoneDefinition, FKBone) == 0x000010, "Member 'FQuadrupedFootBoneDefinition::FKBone' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.QuadrupedBones
// 0x0020 (0x0020 - 0x0000)
struct FQuadrupedBones final
{
public:
	struct FBoneReference                         RootBone;                                          // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FQuadrupedFootBoneDefinition>   Feet;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuadrupedBones) == 0x000008, "Wrong alignment on FQuadrupedBones");
static_assert(sizeof(FQuadrupedBones) == 0x000020, "Wrong size on FQuadrupedBones");
static_assert(offsetof(FQuadrupedBones, RootBone) == 0x000000, "Member 'FQuadrupedBones::RootBone' has a wrong offset!");
static_assert(offsetof(FQuadrupedBones, Feet) == 0x000010, "Member 'FQuadrupedBones::Feet' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.LerpSettings
// 0x0008 (0x0008 - 0x0000)
struct FLerpSettings final
{
public:
	bool                                          bEnableLerp;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Stiffness;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLerpSettings) == 0x000004, "Wrong alignment on FLerpSettings");
static_assert(sizeof(FLerpSettings) == 0x000008, "Wrong size on FLerpSettings");
static_assert(offsetof(FLerpSettings, bEnableLerp) == 0x000000, "Member 'FLerpSettings::bEnableLerp' has a wrong offset!");
static_assert(offsetof(FLerpSettings, Stiffness) == 0x000004, "Member 'FLerpSettings::Stiffness' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.QuadrupedFootPlacementTraceSettings
// 0x001C (0x001C - 0x0000)
struct FQuadrupedFootPlacementTraceSettings final
{
public:
	float                                         StartOffset;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopingFrontOffset;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopingEndOffset;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightHorizOffset;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeInitOffset;                                // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFootTraceHeight;                               // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuadrupedFootPlacementTraceSettings) == 0x000004, "Wrong alignment on FQuadrupedFootPlacementTraceSettings");
static_assert(sizeof(FQuadrupedFootPlacementTraceSettings) == 0x00001C, "Wrong size on FQuadrupedFootPlacementTraceSettings");
static_assert(offsetof(FQuadrupedFootPlacementTraceSettings, StartOffset) == 0x000000, "Member 'FQuadrupedFootPlacementTraceSettings::StartOffset' has a wrong offset!");
static_assert(offsetof(FQuadrupedFootPlacementTraceSettings, EndOffset) == 0x000004, "Member 'FQuadrupedFootPlacementTraceSettings::EndOffset' has a wrong offset!");
static_assert(offsetof(FQuadrupedFootPlacementTraceSettings, SlopingFrontOffset) == 0x000008, "Member 'FQuadrupedFootPlacementTraceSettings::SlopingFrontOffset' has a wrong offset!");
static_assert(offsetof(FQuadrupedFootPlacementTraceSettings, SlopingEndOffset) == 0x00000C, "Member 'FQuadrupedFootPlacementTraceSettings::SlopingEndOffset' has a wrong offset!");
static_assert(offsetof(FQuadrupedFootPlacementTraceSettings, HeightHorizOffset) == 0x000010, "Member 'FQuadrupedFootPlacementTraceSettings::HeightHorizOffset' has a wrong offset!");
static_assert(offsetof(FQuadrupedFootPlacementTraceSettings, Radius) == 0x000014, "Member 'FQuadrupedFootPlacementTraceSettings::Radius' has a wrong offset!");
static_assert(offsetof(FQuadrupedFootPlacementTraceSettings, bIncludeInitOffset) == 0x000018, "Member 'FQuadrupedFootPlacementTraceSettings::bIncludeInitOffset' has a wrong offset!");
static_assert(offsetof(FQuadrupedFootPlacementTraceSettings, bUseFootTraceHeight) == 0x000019, "Member 'FQuadrupedFootPlacementTraceSettings::bUseFootTraceHeight' has a wrong offset!");
static_assert(offsetof(FQuadrupedFootPlacementTraceSettings, TraceChannel) == 0x00001A, "Member 'FQuadrupedFootPlacementTraceSettings::TraceChannel' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.QuadrupedFootPlacementDebugSettings
// 0x000C (0x000C - 0x0000)
struct FQuadrupedFootPlacementDebugSettings final
{
public:
	bool                                          bEnableDebug;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoxRadius;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuadrupedFootPlacementDebugSettings) == 0x000004, "Wrong alignment on FQuadrupedFootPlacementDebugSettings");
static_assert(sizeof(FQuadrupedFootPlacementDebugSettings) == 0x00000C, "Wrong size on FQuadrupedFootPlacementDebugSettings");
static_assert(offsetof(FQuadrupedFootPlacementDebugSettings, bEnableDebug) == 0x000000, "Member 'FQuadrupedFootPlacementDebugSettings::bEnableDebug' has a wrong offset!");
static_assert(offsetof(FQuadrupedFootPlacementDebugSettings, BoxRadius) == 0x000004, "Member 'FQuadrupedFootPlacementDebugSettings::BoxRadius' has a wrong offset!");
static_assert(offsetof(FQuadrupedFootPlacementDebugSettings, Thickness) == 0x000008, "Member 'FQuadrupedFootPlacementDebugSettings::Thickness' has a wrong offset!");

// ScriptStruct AnimationWarpingRuntime.TGFAnimNode_QuadrupedFootPlacement
// 0x0118 (0x01E0 - 0x00C8)
struct alignas(0x10) FTGFAnimNode_QuadrupedFootPlacement final : public FAnimNode_SkeletalControlBase
{
public:
	struct FQuadrupedBones                        Bones;                                             // 0x00C8(0x0020)(Edit, NativeAccessSpecifierPublic)
	EQuadrupedSlopingAxis                         SlopingAxis;                                       // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuadrupedFootPlacementDebugSettings   DebugSettings;                                     // 0x00EC(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuadrupedFootPlacementTraceSettings   TraceSettings;                                     // 0x00F8(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FLerpSettings                          LerpSettings;                                      // 0x0114(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0xC4];                                     // 0x011C(0x00C4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFAnimNode_QuadrupedFootPlacement) == 0x000010, "Wrong alignment on FTGFAnimNode_QuadrupedFootPlacement");
static_assert(sizeof(FTGFAnimNode_QuadrupedFootPlacement) == 0x0001E0, "Wrong size on FTGFAnimNode_QuadrupedFootPlacement");
static_assert(offsetof(FTGFAnimNode_QuadrupedFootPlacement, Bones) == 0x0000C8, "Member 'FTGFAnimNode_QuadrupedFootPlacement::Bones' has a wrong offset!");
static_assert(offsetof(FTGFAnimNode_QuadrupedFootPlacement, SlopingAxis) == 0x0000E8, "Member 'FTGFAnimNode_QuadrupedFootPlacement::SlopingAxis' has a wrong offset!");
static_assert(offsetof(FTGFAnimNode_QuadrupedFootPlacement, bEnable) == 0x0000E9, "Member 'FTGFAnimNode_QuadrupedFootPlacement::bEnable' has a wrong offset!");
static_assert(offsetof(FTGFAnimNode_QuadrupedFootPlacement, DebugSettings) == 0x0000EC, "Member 'FTGFAnimNode_QuadrupedFootPlacement::DebugSettings' has a wrong offset!");
static_assert(offsetof(FTGFAnimNode_QuadrupedFootPlacement, TraceSettings) == 0x0000F8, "Member 'FTGFAnimNode_QuadrupedFootPlacement::TraceSettings' has a wrong offset!");
static_assert(offsetof(FTGFAnimNode_QuadrupedFootPlacement, LerpSettings) == 0x000114, "Member 'FTGFAnimNode_QuadrupedFootPlacement::LerpSettings' has a wrong offset!");

}


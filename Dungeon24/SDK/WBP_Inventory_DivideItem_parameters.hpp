#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Inventory_DivideItem

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function WBP_Inventory_DivideItem.WBP_Inventory_DivideItem_C.BndEvt__WBP_Inventory_DivideItem_ButtonPlus_1_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_ButtonPlus_1_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_ButtonPlus_1_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_ButtonPlus_1_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_ButtonPlus_1_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_ButtonPlus_1_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_ButtonPlus_1_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_ButtonPlus_1_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_Inventory_DivideItem.WBP_Inventory_DivideItem_C.BndEvt__WBP_Inventory_DivideItem_WBP_Tgf_ButtonBase_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_WBP_Tgf_ButtonBase_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_WBP_Tgf_ButtonBase_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_WBP_Tgf_ButtonBase_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_WBP_Tgf_ButtonBase_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_WBP_Tgf_ButtonBase_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_WBP_Tgf_ButtonBase_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_Inventory_DivideItem_C_BndEvt__WBP_Inventory_DivideItem_WBP_Tgf_ButtonBase_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_Inventory_DivideItem.WBP_Inventory_DivideItem_C.ExecuteUbergraph_WBP_Inventory_DivideItem
// 0x0150 (0x0150 - 0x0000)
struct WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTgfInventoryItemWrapper*               K2Node_CustomEvent_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            K2Node_CustomEvent_InstigatorWidget;               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_CustomEvent_Anchor;                         // 0x0028(0x0040)(IsPlainOldData, NoDestructor)
	TSoftObjectPtr<class UUserWidget>             CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0068(0x0030)(InstancedReference, UObjectWrapper, HasGetValueTypeHash)
	int32                                         CallFunc_GetStackCount_ReturnValue;                // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x00A4(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x00C4(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue_1;                  // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetPaintSpaceGeometry_ReturnValue;        // 0x00F0(0x0040)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAbsoluteSize_ReturnValue;              // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_1;               // 0x0148(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem) == 0x000008, "Wrong alignment on WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem");
static_assert(sizeof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem) == 0x000150, "Wrong size on WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, EntryPoint) == 0x000000, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, K2Node_ComponentBoundEvent_Button) == 0x000008, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, Temp_int_Variable) == 0x000010, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, Temp_int_Variable_1) == 0x000014, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, K2Node_CustomEvent_Item) == 0x000018, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::K2Node_CustomEvent_Item' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, K2Node_CustomEvent_InstigatorWidget) == 0x000020, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::K2Node_CustomEvent_InstigatorWidget' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, K2Node_CustomEvent_Anchor) == 0x000028, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::K2Node_CustomEvent_Anchor' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000068, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_GetStackCount_ReturnValue) == 0x000098, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_GetStackCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_Subtract_IntInt_ReturnValue) == 0x00009C, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_Divide_IntInt_ReturnValue) == 0x0000A0, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, Temp_delegate_Variable) == 0x0000A4, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_PostEvent_ReturnValue) == 0x0000B4, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_Less_IntInt_ReturnValue) == 0x0000B8, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_Add_IntInt_ReturnValue) == 0x0000BC, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000C0, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, Temp_delegate_Variable_1) == 0x0000C4, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_PostEvent_ReturnValue_1) == 0x0000D4, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_PostEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_Greater_IntInt_ReturnValue) == 0x0000D8, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_GetDesiredSize_ReturnValue) == 0x0000E0, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_GetPaintSpaceGeometry_ReturnValue) == 0x0000F0, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_GetPaintSpaceGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_GetAbsoluteSize_ReturnValue) == 0x000130, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_GetAbsoluteSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x000140, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, K2Node_Event_IsDesignTime) == 0x000141, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem, K2Node_ComponentBoundEvent_Button_1) == 0x000148, "Member 'WBP_Inventory_DivideItem_C_ExecuteUbergraph_WBP_Inventory_DivideItem::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");

// Function WBP_Inventory_DivideItem.WBP_Inventory_DivideItem_C.OnHeapSubmit__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct WBP_Inventory_DivideItem_C_OnHeapSubmit__DelegateSignature final
{
public:
	int32                                         Param_Num;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Inventory_DivideItem_C_OnHeapSubmit__DelegateSignature) == 0x000004, "Wrong alignment on WBP_Inventory_DivideItem_C_OnHeapSubmit__DelegateSignature");
static_assert(sizeof(WBP_Inventory_DivideItem_C_OnHeapSubmit__DelegateSignature) == 0x000004, "Wrong size on WBP_Inventory_DivideItem_C_OnHeapSubmit__DelegateSignature");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnHeapSubmit__DelegateSignature, Param_Num) == 0x000000, "Member 'WBP_Inventory_DivideItem_C_OnHeapSubmit__DelegateSignature::Param_Num' has a wrong offset!");

// Function WBP_Inventory_DivideItem.WBP_Inventory_DivideItem_C.OnMouseButtonDown
// 0x0248 (0x0248 - 0x0000)
struct WBP_Inventory_DivideItem_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0190(0x00B8)()
};
static_assert(alignof(WBP_Inventory_DivideItem_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on WBP_Inventory_DivideItem_C_OnMouseButtonDown");
static_assert(sizeof(WBP_Inventory_DivideItem_C_OnMouseButtonDown) == 0x000248, "Wrong size on WBP_Inventory_DivideItem_C_OnMouseButtonDown");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonDown, MouseEvent) == 0x000040, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonDown, ReturnValue) == 0x0000D8, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000190, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_Inventory_DivideItem.WBP_Inventory_DivideItem_C.OnMouseButtonUp
// 0x0490 (0x0490 - 0x0000)
struct WBP_Inventory_DivideItem_C_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm)
	class UUserWidget*                            Temp_wildcard_Variable;                            // 0x0190(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_InventoryContextHolder_C> K2Node_DynamicCast_AsBPI_Inventory_Context_Holder; // 0x01A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BA[0x6];                                      // 0x01BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfInventoryWrapper*                   CallFunc_GetInventoryContext_InventoryContextNew;  // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x01CC(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Temp_wildcard_Variable_1;                          // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_TgfGame_Inventory_DragItem_C*      CallFunc_Create_ReturnValue;                       // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_FindParentWidgetOfType_ReturnValue;       // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_not_found_Variable;                      // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0204(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_Inventory_DragDrop_Base_C*          CallFunc_CreateDragDropOperation_ReturnValue;      // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_InstigateCursorPayload_ReturnValue;       // 0x0220(0x00B8)()
	bool                                          Temp_bool_not_found_Variable_1;                    // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Temp_wildcard_Variable_2;                          // 0x02E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_FindParentWidgetOfType_ReturnValue_1;     // 0x02F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue_1;     // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Temp_wildcard_Variable_3;                          // 0x0300(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_InventoryContextHolder_C> K2Node_DynamicCast_AsBPI_Inventory_Context_Holder_1; // 0x0308(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0320(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTgfInventoryWrapper*                   CallFunc_GetInventoryContext_InventoryContextNew_1; // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            K2Node_DynamicCast_AsUser_Widget;                  // 0x0330(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0339(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x033A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33B[0x5];                                      // 0x033B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            K2Node_Select_Default;                             // 0x0340(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0350(0x00B8)()
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0408(0x0040)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue;              // 0x0448(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0469(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x046A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46B[0x5];                                      // 0x046B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfInventoryItemWrapper*               CallFunc_TryBeginItemDivide_ReturnValue;           // 0x0470(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UInventoryFragment_Sound*         CallFunc_FindFragmentByClass_ReturnValue;          // 0x0478(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0481(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_482[0x2];                                      // 0x0482(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0489(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48A[0x2];                                      // 0x048A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEvent_ReturnValue_1;                  // 0x048C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Inventory_DivideItem_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on WBP_Inventory_DivideItem_C_OnMouseButtonUp");
static_assert(sizeof(WBP_Inventory_DivideItem_C_OnMouseButtonUp) == 0x000490, "Wrong size on WBP_Inventory_DivideItem_C_OnMouseButtonUp");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, MouseEvent) == 0x000040, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, ReturnValue) == 0x0000D8, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, Temp_wildcard_Variable) == 0x000190, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000198, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, K2Node_DynamicCast_AsBPI_Inventory_Context_Holder) == 0x0001A8, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::K2Node_DynamicCast_AsBPI_Inventory_Context_Holder' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, K2Node_DynamicCast_bSuccess) == 0x0001B8, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue) == 0x0001B9, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_GetInventoryContext_InventoryContextNew) == 0x0001C0, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_GetInventoryContext_InventoryContextNew' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue_1) == 0x0001C8, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_MakeLiteralByte_ReturnValue) == 0x0001C9, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, Temp_bool_Variable) == 0x0001CA, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001CB, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, Temp_delegate_Variable) == 0x0001CC, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, Temp_wildcard_Variable_1) == 0x0001E0, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::Temp_wildcard_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_Create_ReturnValue) == 0x0001E8, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue_2) == 0x0001F0, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_FindParentWidgetOfType_ReturnValue) == 0x0001F8, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_FindParentWidgetOfType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, Temp_bool_not_found_Variable) == 0x000200, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::Temp_bool_not_found_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_DoesImplementInterface_ReturnValue) == 0x000201, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, Temp_delegate_Variable_1) == 0x000204, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_CreateDragDropOperation_ReturnValue) == 0x000218, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_CreateDragDropOperation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_InstigateCursorPayload_ReturnValue) == 0x000220, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_InstigateCursorPayload_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, Temp_bool_not_found_Variable_1) == 0x0002D8, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::Temp_bool_not_found_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, Temp_wildcard_Variable_2) == 0x0002E0, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::Temp_wildcard_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue_3) == 0x0002E8, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_FindParentWidgetOfType_ReturnValue_1) == 0x0002F0, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_FindParentWidgetOfType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_DoesImplementInterface_ReturnValue_1) == 0x0002F8, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_DoesImplementInterface_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, Temp_wildcard_Variable_3) == 0x000300, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::Temp_wildcard_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, K2Node_DynamicCast_AsBPI_Inventory_Context_Holder_1) == 0x000308, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::K2Node_DynamicCast_AsBPI_Inventory_Context_Holder_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, K2Node_DynamicCast_bSuccess_1) == 0x000318, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000320, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_GetInventoryContext_InventoryContextNew_1) == 0x000328, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_GetInventoryContext_InventoryContextNew_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, K2Node_DynamicCast_AsUser_Widget) == 0x000330, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::K2Node_DynamicCast_AsUser_Widget' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, K2Node_DynamicCast_bSuccess_2) == 0x000338, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue_4) == 0x000339, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue_5) == 0x00033A, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, K2Node_Select_Default) == 0x000340, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue_6) == 0x000348, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_Unhandled_ReturnValue) == 0x000350, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_GetCachedGeometry_ReturnValue) == 0x000408, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_AbsoluteToLocal_ReturnValue) == 0x000448, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_AbsoluteToLocal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_BreakVector2D_X) == 0x000458, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_BreakVector2D_Y) == 0x000460, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000468, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000469, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_BooleanAND_ReturnValue) == 0x00046A, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_TryBeginItemDivide_ReturnValue) == 0x000470, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_TryBeginItemDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_FindFragmentByClass_ReturnValue) == 0x000478, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_FindFragmentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue_7) == 0x000480, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue_8) == 0x000481, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_PostEvent_ReturnValue) == 0x000484, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue_9) == 0x000488, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue_10) == 0x000489, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_OnMouseButtonUp, CallFunc_PostEvent_ReturnValue_1) == 0x00048C, "Member 'WBP_Inventory_DivideItem_C_OnMouseButtonUp::CallFunc_PostEvent_ReturnValue_1' has a wrong offset!");

// Function WBP_Inventory_DivideItem.WBP_Inventory_DivideItem_C.PlaceNearMouseCursor
// 0x0210 (0x0210 - 0x0000)
struct WBP_Inventory_DivideItem_C_PlaceNearMouseCursor final
{
public:
	struct FGeometry                              Anchor;                                            // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FGeometry                              Geometry;                                          // 0x0040(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVector2D                              Pos;                                               // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetAbsoluteSize_ReturnValue;              // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetAbsoluteSize_ReturnValue_1;            // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue_1;  // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_LocalToAbsolute_ReturnValue;              // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue_1;       // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_3;                        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_3;                        // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetViewportScale_ReturnValue_1;           // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0170(0x0040)(ConstParm, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue;              // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x01F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast_1;     // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor) == 0x000008, "Wrong alignment on WBP_Inventory_DivideItem_C_PlaceNearMouseCursor");
static_assert(sizeof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor) == 0x000210, "Wrong size on WBP_Inventory_DivideItem_C_PlaceNearMouseCursor");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, Anchor) == 0x000000, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::Anchor' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, Geometry) == 0x000040, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::Geometry' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, Pos) == 0x000080, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::Pos' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_GetAbsoluteSize_ReturnValue) == 0x000090, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_GetAbsoluteSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x0000A0, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_GetAbsoluteSize_ReturnValue_1) == 0x0000B0, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_GetAbsoluteSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_BreakVector2D_X) == 0x0000C0, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_BreakVector2D_Y) == 0x0000C8, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Multiply_Vector2DVector2D_ReturnValue_1) == 0x0000D0, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Multiply_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_LocalToAbsolute_ReturnValue) == 0x0000E0, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_LocalToAbsolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_GetViewportScale_ReturnValue) == 0x0000F0, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x0000F8, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Add_Vector2DVector2D_ReturnValue_1) == 0x000108, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Add_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_BreakVector2D_X_1) == 0x000118, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_BreakVector2D_Y_1) == 0x000120, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_GetViewportSize_ReturnValue) == 0x000128, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_BreakVector2D_X_2) == 0x000138, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_BreakVector2D_Y_2) == 0x000140, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_BreakVector2D_X_3) == 0x000148, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_BreakVector2D_Y_3) == 0x000150, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000158, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_GetViewportScale_ReturnValue_1) == 0x000160, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_GetViewportScale_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000168, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_GetCachedGeometry_ReturnValue) == 0x000170, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0001B0, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_AbsoluteToLocal_ReturnValue) == 0x0001B8, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_AbsoluteToLocal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0001C8, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0001D0, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0001D8, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x0001E0, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_FClamp_ReturnValue) == 0x0001E8, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_MakeVector2D_ReturnValue) == 0x0001F0, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000200, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PlaceNearMouseCursor, CallFunc_Divide_DoubleDouble_B_ImplicitCast_1) == 0x000208, "Member 'WBP_Inventory_DivideItem_C_PlaceNearMouseCursor::CallFunc_Divide_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");

// Function WBP_Inventory_DivideItem.WBP_Inventory_DivideItem_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Inventory_DivideItem_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Inventory_DivideItem_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Inventory_DivideItem_C_PreConstruct");
static_assert(sizeof(WBP_Inventory_DivideItem_C_PreConstruct) == 0x000001, "Wrong size on WBP_Inventory_DivideItem_C_PreConstruct");
static_assert(offsetof(WBP_Inventory_DivideItem_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Inventory_DivideItem_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Inventory_DivideItem.WBP_Inventory_DivideItem_C.SetUp
// 0x0050 (0x0050 - 0x0000)
struct WBP_Inventory_DivideItem_C_SetUp final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            Param_InstigatorWidget;                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              Anchor;                                            // 0x0010(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Inventory_DivideItem_C_SetUp) == 0x000008, "Wrong alignment on WBP_Inventory_DivideItem_C_SetUp");
static_assert(sizeof(WBP_Inventory_DivideItem_C_SetUp) == 0x000050, "Wrong size on WBP_Inventory_DivideItem_C_SetUp");
static_assert(offsetof(WBP_Inventory_DivideItem_C_SetUp, Item) == 0x000000, "Member 'WBP_Inventory_DivideItem_C_SetUp::Item' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_SetUp, Param_InstigatorWidget) == 0x000008, "Member 'WBP_Inventory_DivideItem_C_SetUp::Param_InstigatorWidget' has a wrong offset!");
static_assert(offsetof(WBP_Inventory_DivideItem_C_SetUp, Anchor) == 0x000010, "Member 'WBP_Inventory_DivideItem_C_SetUp::Anchor' has a wrong offset!");

// Function WBP_Inventory_DivideItem.WBP_Inventory_DivideItem_C.UpdateNumberLabel
// 0x0018 (0x0018 - 0x0000)
struct WBP_Inventory_DivideItem_C_UpdateNumberLabel final
{
public:
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0000(0x0018)()
};
static_assert(alignof(WBP_Inventory_DivideItem_C_UpdateNumberLabel) == 0x000008, "Wrong alignment on WBP_Inventory_DivideItem_C_UpdateNumberLabel");
static_assert(sizeof(WBP_Inventory_DivideItem_C_UpdateNumberLabel) == 0x000018, "Wrong size on WBP_Inventory_DivideItem_C_UpdateNumberLabel");
static_assert(offsetof(WBP_Inventory_DivideItem_C_UpdateNumberLabel, CallFunc_Conv_IntToText_ReturnValue) == 0x000000, "Member 'WBP_Inventory_DivideItem_C_UpdateNumberLabel::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WBP_Inventory_DivideItem.WBP_Inventory_DivideItem_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct WBP_Inventory_DivideItem_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Inventory_DivideItem_C_GetModuleName) == 0x000008, "Wrong alignment on WBP_Inventory_DivideItem_C_GetModuleName");
static_assert(sizeof(WBP_Inventory_DivideItem_C_GetModuleName) == 0x000010, "Wrong size on WBP_Inventory_DivideItem_C_GetModuleName");
static_assert(offsetof(WBP_Inventory_DivideItem_C_GetModuleName, ReturnValue) == 0x000000, "Member 'WBP_Inventory_DivideItem_C_GetModuleName::ReturnValue' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_TGF_Base

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AGRPRO_structs.hpp"
#include "AdditionalGEs_structs.hpp"
#include "LyraGame_structs.hpp"
#include "LyraGame_classes.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_TGF_Base.GA_TGF_Base_C
// 0x0370 (0x0CF0 - 0x0980)
class UGA_TGF_Base_C : public UTgfGameplayAbility
{
public:
	double                                        MaxGuardedDegreeLeft;                              // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectContextHandle           GameplayEffectContextHandle;                       // 0x0988(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UObject*                                MeleeWeaponHitInstigatorMesh;                      // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AActor*                                 MeleeWeaponHitInstigatorMeshActor;                 // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 MeleeWeaponHitActor;                               // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AActor*                                 MeleeWeaponHitInstigator;                          // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                MeleeWeaponHitInstigatorASC;                       // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        OverrideWeaponAttack;                              // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckLeftRightGE;                                  // 0x09D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D1[0x7];                                      // 0x09D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         MeleeWeaponHitGERightHand;                         // 0x09D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         MeleeWeaponHitGELeftHand;                          // 0x09E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSubclassOf<class UGameplayEffect>>    MeleeWeaponHitGE;                                  // 0x09F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FAdditionalGEs>                 MeleeWeaponHitGERightHandAddi;                     // 0x0A08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FAdditionalGEs>                 MeleeWeaponHitGELeftHandAddi;                      // 0x0A18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FAdditionalGEs>                 MeleeWeaponHitGEAddi;                              // 0x0A28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bAddHitStop;                                       // 0x0A38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A39[0x7];                                      // 0x0A39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxGuardedDegreeRight;                             // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGuardedLeftHandAdded;                             // 0x0A48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGuardedRightHandAdded;                            // 0x0A49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGuarded;                                          // 0x0A4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanCauseInterrupt;                                 // 0x0A4B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInterruptApplied;                                 // 0x0A4C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4D[0x3];                                      // 0x0A4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 InterruptGE;                                       // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bPerfectGuarded;                                   // 0x0A58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A59[0x7];                                      // 0x0A59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CounterGE;                                         // 0x0A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CounterMinorGE;                                    // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 MoveSpeedDebuffGE;                                 // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            MoveSpeedDebuffContextHandler;                     // 0x0A78(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          MoveSpeedDebuffEffected;                           // 0x0A80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A81[0x7];                                      // 0x0A81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAGRTraceData>                  BodyWeaponConfig;                                  // 0x0A88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 LeftHandTraceMeshInsIds;                           // 0x0A98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 RightHandTraceMeshInsIds;                          // 0x0AA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 MonsterBodyTraceMeshInsIds;                        // 0x0AB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 PlayerBodyTraceMeshInsIds;                         // 0x0AC8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AB_TGF_MeleeWeaponBase_C*               LeftHandWeapon;                                    // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AB_TGF_MeleeWeaponBase_C*               RightHandWeapon;                                   // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Tgf_Monster_C*                      MonsterBodyWeapon;                                 // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        NormalWeight;                                      // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TangentWeight;                                     // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  HitPartTag;                                        // 0x0B00(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	ETgfUseAttackType                             HitValueAttackType;                                // 0x0B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B21[0x7];                                      // 0x0B21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AbilityHurtTypeTags;                               // 0x0B28(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ShieldOnLeftHand;                                  // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShieldOnRightHand;                                 // 0x0B49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4A[0x6];                                      // 0x0B4A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GuardAngleHandGE;                                  // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GuardAngleHandGEHandle;                            // 0x0B58(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bAddFriendTeamTag;                                 // 0x0B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B61[0x7];                                      // 0x0B61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         MeleeWeaponHitEnviormentGE;                        // 0x0B68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FGameplayTag>                   PredictGCTags;                                     // 0x0B78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  WeaponElementTags;                                 // 0x0B88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  AttrBoostTags;                                     // 0x0BA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bCritical;                                         // 0x0BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC9[0x7];                                      // 0x0BC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         MeleeWeaponHitInteractorGE;                        // 0x0BD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class AActor*, int32>                    ActorHitCountMap;                                  // 0x0BE0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsMeleeFriendlyNoDamage;                           // 0x0C30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C31[0x3];                                      // 0x0C31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SetCanWalkOffLedgesCount;                          // 0x0C34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  GEAttributeTag;                                    // 0x0C38(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bCheckProjectileBornDist;                          // 0x0C58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C59[0x7];                                      // 0x0C59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ValidProjectileBornDist;                           // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  MustHaveCharacterStateTags;                        // 0x0C68(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  MustNotHaveCharacterStateTags;                     // 0x0C88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DontCareCharacterState;                            // 0x0CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA9[0x7];                                      // 0x0CA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Fighter_HeroSample_C*               PlayerBodyWeapon;                                  // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         GAIndexSavedInLeftActor;                           // 0x0CB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GAIndexSavedInRightActor;                          // 0x0CBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GAIndexSavedInMonster;                             // 0x0CC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GAIndexSavedInPlayer;                              // 0x0CC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             DisperseBuffDispatcher;                            // 0x0CC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BakeRootMotion;                                    // 0x0CD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD9[0x7];                                      // 0x0CD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ValidProjectileBornHorizontalDist;                 // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ValidProjectileBornVerticalDist;                   // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddWeaponElement();
	void Apply_Counter();
	void ApplyAbilityHurtType();
	void ApplyGuarded(bool* Result);
	void ApplyHitPartTag();
	void ApplyMeleeWeaponEffect(const struct FGameplayEventData& MeleeWeaponEffectInputData);
	void ApplyMoveSpeedDebuff();
	void ApplyPerfectGuarded();
	void CheckAttrBoostTags();
	void CheckCritical();
	void CheckGEAttributeTag();
	void CheckGuarded(bool* Result);
	void CheckHeavyHitAndInterrupt();
	void CheckHitIneractorEnviorment(bool* Result);
	void CheckHitInteractorBattle(bool* Result);
	void CheckProjectileSecurity(const struct FTransform& BornTrans, class AActor* SrcActor, bool* CheckResult);
	void CheckReboundFromTargetTag();
	void CheckTeamTag(bool bAddFriendly);
	void DecideGEsToUse(int32 DecideType, TArray<class UClass*>* ResultGEs);
	void DecideInstigatorASCWeaponAttack(class AActor* InputActor);
	void DeInitParams();
	void DeInitShieldConfig();
	void DeInitWeaponMesh();
	void DisperseBuffDispatcher__DelegateSignature(const struct FActiveGameplayEffectHandle& ActiveGameplayEffectHandle);
	void DisperseBuffWithHandler(TArray<class AActor*>& Targets, const struct FGameplayTag& BuffTag, const struct FGameplayTagContainer& HighPriorityTags, int32 Num, bool* bDisperseSucceed);
	void DoInteractorBattleGE();
	void DoInteractorEnvironment();
	void EnableProjectileBlocker(bool Enable);
	void GatherNearbyActors(const struct FVector& Location, double Radius, TArray<class AActor*>* Actors, bool* Res);
	void GetHandMeleeWeaponActor(bool LeftHand, class AB_TGF_MeleeWeaponBase_C** ResultActor);
	void GetLeftHandMeleeWeaponActor(class AB_TGF_MeleeWeaponBase_C** ResultActor);
	void GetMonsterBodyMeleeWeaponActor(class ABP_Tgf_Monster_C** ResultActor);
	void GetPlayerBodyMeleeWeaponActor(class ABP_Fighter_HeroSample_C** Result);
	void GetRightHandMeleeWeaponActor(class AB_TGF_MeleeWeaponBase_C** ResultActor);
	void GetSourceTags(const struct FGameplayTagContainer& InstigatorTags, struct FGameplayTagContainer* Tags);
	void InitParams();
	void InitShieldConfig();
	void InitWeaponMesh();
	void InterruptAbility(const struct FGameplayEventData& InterruptData);
	void NotifyRebound();
	void ProcessNormalIgnoreStaticCollision(class AB_TGF_Normal_ProjectileBase_C* SpawnedProjectile, const struct FTransform& SpawnTrans, class AActor* Instigator);
	void ProcessTrackIgnoreStaticCollistion(class AB_TGF_Track_ProjectileBase_C* SpawnedProjectile, const struct FTransform& SpawnTrans, class AActor* Instigator, class AActor* TrackActor);
	void RefreshActorHitInfo();
	void RemoveMoveSpeedDebuff();
	void ResetAbilityHurtType();
	void ResetAttrBoostTags();
	void ResetCanWalkOffLedges();
	void ResetCritical();
	void ResetGEAttributeTag();
	void ResetGuarded();
	void ResetHitPartTag();
	void ResetInterrupt();
	void ResetNormalProjectile(class AActor* Projectile, const struct FTransform& Transform);
	void ResetPerfectGuarded();
	void ResetTeamTag();
	void ResetTrackProjectile(class AActor* Projectile, const struct FTransform& Transform, class AActor* TrackTarget, class FName TrackSocketName, const struct FVector& TargetPos);
	void ResetWeaponElement();
	void SetCanWalkOffLedges(bool bEnabled);
	void SpawnNormalProjectile(class UClass* SpawnActor, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandling, class AActor* Owner, class APawn* Instigator, ETgfUseAttackType UseAttackType, ETgfEquipSlot ConsumeItemSlotType, bool ConsumeItem, bool NeedChangeMesh, class UCurveFloat* DamageRate, class AB_TGF_Normal_ProjectileBase_C** Projectile);
	void SpawnStaticOverlapProjectile(class UClass* SpawnActor, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandling, class AActor* Owner, class APawn* Instigator, ETgfUseAttackType UseAttackType, ETgfEquipSlot ConsumeItemSlotType, bool ConsumeItem, class UCurveFloat* DamageRate, class AB_TGF_Static_OverlapCheck_ProjectileBase_C** Projectile);
	void SpawnTrackProjectile(class UClass* SpawnActor, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandling, class AActor* Owner, class APawn* Instigator, ETgfUseAttackType UseAttackType, ETgfEquipSlot ConsumeItemSlotType, class AActor* TrackTarget, bool ConsumeItem, bool NeedChangeMesh, class UCurveFloat* DamageRate, class FName TrackSocketName, class AB_TGF_Track_ProjectileBase_C** Projectile);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_TGF_Base_C">();
	}
	static class UGA_TGF_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_TGF_Base_C>();
	}
};
static_assert(alignof(UGA_TGF_Base_C) == 0x000010, "Wrong alignment on UGA_TGF_Base_C");
static_assert(sizeof(UGA_TGF_Base_C) == 0x000CF0, "Wrong size on UGA_TGF_Base_C");
static_assert(offsetof(UGA_TGF_Base_C, MaxGuardedDegreeLeft) == 0x000980, "Member 'UGA_TGF_Base_C::MaxGuardedDegreeLeft' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, GameplayEffectContextHandle) == 0x000988, "Member 'UGA_TGF_Base_C::GameplayEffectContextHandle' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitInstigatorMesh) == 0x0009A0, "Member 'UGA_TGF_Base_C::MeleeWeaponHitInstigatorMesh' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitInstigatorMeshActor) == 0x0009A8, "Member 'UGA_TGF_Base_C::MeleeWeaponHitInstigatorMeshActor' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitActor) == 0x0009B0, "Member 'UGA_TGF_Base_C::MeleeWeaponHitActor' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitInstigator) == 0x0009B8, "Member 'UGA_TGF_Base_C::MeleeWeaponHitInstigator' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitInstigatorASC) == 0x0009C0, "Member 'UGA_TGF_Base_C::MeleeWeaponHitInstigatorASC' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, OverrideWeaponAttack) == 0x0009C8, "Member 'UGA_TGF_Base_C::OverrideWeaponAttack' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, CheckLeftRightGE) == 0x0009D0, "Member 'UGA_TGF_Base_C::CheckLeftRightGE' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitGERightHand) == 0x0009D8, "Member 'UGA_TGF_Base_C::MeleeWeaponHitGERightHand' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitGELeftHand) == 0x0009E8, "Member 'UGA_TGF_Base_C::MeleeWeaponHitGELeftHand' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitGE) == 0x0009F8, "Member 'UGA_TGF_Base_C::MeleeWeaponHitGE' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitGERightHandAddi) == 0x000A08, "Member 'UGA_TGF_Base_C::MeleeWeaponHitGERightHandAddi' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitGELeftHandAddi) == 0x000A18, "Member 'UGA_TGF_Base_C::MeleeWeaponHitGELeftHandAddi' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitGEAddi) == 0x000A28, "Member 'UGA_TGF_Base_C::MeleeWeaponHitGEAddi' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, bAddHitStop) == 0x000A38, "Member 'UGA_TGF_Base_C::bAddHitStop' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MaxGuardedDegreeRight) == 0x000A40, "Member 'UGA_TGF_Base_C::MaxGuardedDegreeRight' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, bGuardedLeftHandAdded) == 0x000A48, "Member 'UGA_TGF_Base_C::bGuardedLeftHandAdded' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, bGuardedRightHandAdded) == 0x000A49, "Member 'UGA_TGF_Base_C::bGuardedRightHandAdded' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, bGuarded) == 0x000A4A, "Member 'UGA_TGF_Base_C::bGuarded' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, CanCauseInterrupt) == 0x000A4B, "Member 'UGA_TGF_Base_C::CanCauseInterrupt' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, bInterruptApplied) == 0x000A4C, "Member 'UGA_TGF_Base_C::bInterruptApplied' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, InterruptGE) == 0x000A50, "Member 'UGA_TGF_Base_C::InterruptGE' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, bPerfectGuarded) == 0x000A58, "Member 'UGA_TGF_Base_C::bPerfectGuarded' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, CounterGE) == 0x000A60, "Member 'UGA_TGF_Base_C::CounterGE' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, CounterMinorGE) == 0x000A68, "Member 'UGA_TGF_Base_C::CounterMinorGE' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MoveSpeedDebuffGE) == 0x000A70, "Member 'UGA_TGF_Base_C::MoveSpeedDebuffGE' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MoveSpeedDebuffContextHandler) == 0x000A78, "Member 'UGA_TGF_Base_C::MoveSpeedDebuffContextHandler' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MoveSpeedDebuffEffected) == 0x000A80, "Member 'UGA_TGF_Base_C::MoveSpeedDebuffEffected' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, BodyWeaponConfig) == 0x000A88, "Member 'UGA_TGF_Base_C::BodyWeaponConfig' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, LeftHandTraceMeshInsIds) == 0x000A98, "Member 'UGA_TGF_Base_C::LeftHandTraceMeshInsIds' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, RightHandTraceMeshInsIds) == 0x000AA8, "Member 'UGA_TGF_Base_C::RightHandTraceMeshInsIds' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MonsterBodyTraceMeshInsIds) == 0x000AB8, "Member 'UGA_TGF_Base_C::MonsterBodyTraceMeshInsIds' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, PlayerBodyTraceMeshInsIds) == 0x000AC8, "Member 'UGA_TGF_Base_C::PlayerBodyTraceMeshInsIds' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, LeftHandWeapon) == 0x000AD8, "Member 'UGA_TGF_Base_C::LeftHandWeapon' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, RightHandWeapon) == 0x000AE0, "Member 'UGA_TGF_Base_C::RightHandWeapon' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MonsterBodyWeapon) == 0x000AE8, "Member 'UGA_TGF_Base_C::MonsterBodyWeapon' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, NormalWeight) == 0x000AF0, "Member 'UGA_TGF_Base_C::NormalWeight' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, TangentWeight) == 0x000AF8, "Member 'UGA_TGF_Base_C::TangentWeight' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, HitPartTag) == 0x000B00, "Member 'UGA_TGF_Base_C::HitPartTag' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, HitValueAttackType) == 0x000B20, "Member 'UGA_TGF_Base_C::HitValueAttackType' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, AbilityHurtTypeTags) == 0x000B28, "Member 'UGA_TGF_Base_C::AbilityHurtTypeTags' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, ShieldOnLeftHand) == 0x000B48, "Member 'UGA_TGF_Base_C::ShieldOnLeftHand' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, ShieldOnRightHand) == 0x000B49, "Member 'UGA_TGF_Base_C::ShieldOnRightHand' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, GuardAngleHandGE) == 0x000B50, "Member 'UGA_TGF_Base_C::GuardAngleHandGE' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, GuardAngleHandGEHandle) == 0x000B58, "Member 'UGA_TGF_Base_C::GuardAngleHandGEHandle' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, bAddFriendTeamTag) == 0x000B60, "Member 'UGA_TGF_Base_C::bAddFriendTeamTag' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitEnviormentGE) == 0x000B68, "Member 'UGA_TGF_Base_C::MeleeWeaponHitEnviormentGE' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, PredictGCTags) == 0x000B78, "Member 'UGA_TGF_Base_C::PredictGCTags' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, WeaponElementTags) == 0x000B88, "Member 'UGA_TGF_Base_C::WeaponElementTags' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, AttrBoostTags) == 0x000BA8, "Member 'UGA_TGF_Base_C::AttrBoostTags' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, bCritical) == 0x000BC8, "Member 'UGA_TGF_Base_C::bCritical' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MeleeWeaponHitInteractorGE) == 0x000BD0, "Member 'UGA_TGF_Base_C::MeleeWeaponHitInteractorGE' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, ActorHitCountMap) == 0x000BE0, "Member 'UGA_TGF_Base_C::ActorHitCountMap' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, IsMeleeFriendlyNoDamage) == 0x000C30, "Member 'UGA_TGF_Base_C::IsMeleeFriendlyNoDamage' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, SetCanWalkOffLedgesCount) == 0x000C34, "Member 'UGA_TGF_Base_C::SetCanWalkOffLedgesCount' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, GEAttributeTag) == 0x000C38, "Member 'UGA_TGF_Base_C::GEAttributeTag' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, bCheckProjectileBornDist) == 0x000C58, "Member 'UGA_TGF_Base_C::bCheckProjectileBornDist' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, ValidProjectileBornDist) == 0x000C60, "Member 'UGA_TGF_Base_C::ValidProjectileBornDist' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MustHaveCharacterStateTags) == 0x000C68, "Member 'UGA_TGF_Base_C::MustHaveCharacterStateTags' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, MustNotHaveCharacterStateTags) == 0x000C88, "Member 'UGA_TGF_Base_C::MustNotHaveCharacterStateTags' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, DontCareCharacterState) == 0x000CA8, "Member 'UGA_TGF_Base_C::DontCareCharacterState' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, PlayerBodyWeapon) == 0x000CB0, "Member 'UGA_TGF_Base_C::PlayerBodyWeapon' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, GAIndexSavedInLeftActor) == 0x000CB8, "Member 'UGA_TGF_Base_C::GAIndexSavedInLeftActor' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, GAIndexSavedInRightActor) == 0x000CBC, "Member 'UGA_TGF_Base_C::GAIndexSavedInRightActor' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, GAIndexSavedInMonster) == 0x000CC0, "Member 'UGA_TGF_Base_C::GAIndexSavedInMonster' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, GAIndexSavedInPlayer) == 0x000CC4, "Member 'UGA_TGF_Base_C::GAIndexSavedInPlayer' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, DisperseBuffDispatcher) == 0x000CC8, "Member 'UGA_TGF_Base_C::DisperseBuffDispatcher' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, BakeRootMotion) == 0x000CD8, "Member 'UGA_TGF_Base_C::BakeRootMotion' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, ValidProjectileBornHorizontalDist) == 0x000CE0, "Member 'UGA_TGF_Base_C::ValidProjectileBornHorizontalDist' has a wrong offset!");
static_assert(offsetof(UGA_TGF_Base_C, ValidProjectileBornVerticalDist) == 0x000CE8, "Member 'UGA_TGF_Base_C::ValidProjectileBornVerticalDist' has a wrong offset!");

}


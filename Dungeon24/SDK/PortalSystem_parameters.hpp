#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PortalSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PortalSystem.PortalSystemManager.GetPortalSystemManagerInstance
// 0x0010 (0x0010 - 0x0000)
struct PortalSystemManager_GetPortalSystemManagerInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APortalSystemManager*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PortalSystemManager_GetPortalSystemManagerInstance) == 0x000008, "Wrong alignment on PortalSystemManager_GetPortalSystemManagerInstance");
static_assert(sizeof(PortalSystemManager_GetPortalSystemManagerInstance) == 0x000010, "Wrong size on PortalSystemManager_GetPortalSystemManagerInstance");
static_assert(offsetof(PortalSystemManager_GetPortalSystemManagerInstance, WorldContextObject) == 0x000000, "Member 'PortalSystemManager_GetPortalSystemManagerInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PortalSystemManager_GetPortalSystemManagerInstance, ReturnValue) == 0x000008, "Member 'PortalSystemManager_GetPortalSystemManagerInstance::ReturnValue' has a wrong offset!");

// Function PortalSystem.PortalSystemManager.AddLight
// 0x0008 (0x0008 - 0x0000)
struct PortalSystemManager_AddLight final
{
public:
	class ULightComponent*                        LightComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PortalSystemManager_AddLight) == 0x000008, "Wrong alignment on PortalSystemManager_AddLight");
static_assert(sizeof(PortalSystemManager_AddLight) == 0x000008, "Wrong size on PortalSystemManager_AddLight");
static_assert(offsetof(PortalSystemManager_AddLight, LightComponent) == 0x000000, "Member 'PortalSystemManager_AddLight::LightComponent' has a wrong offset!");

// Function PortalSystem.PortalSystemManager.AddLightFromActor
// 0x0008 (0x0008 - 0x0000)
struct PortalSystemManager_AddLightFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PortalSystemManager_AddLightFromActor) == 0x000008, "Wrong alignment on PortalSystemManager_AddLightFromActor");
static_assert(sizeof(PortalSystemManager_AddLightFromActor) == 0x000008, "Wrong size on PortalSystemManager_AddLightFromActor");
static_assert(offsetof(PortalSystemManager_AddLightFromActor, Actor) == 0x000000, "Member 'PortalSystemManager_AddLightFromActor::Actor' has a wrong offset!");

// Function PortalSystem.PortalSystemManager.NotifyLightMoved
// 0x0008 (0x0008 - 0x0000)
struct PortalSystemManager_NotifyLightMoved final
{
public:
	class ULightComponent*                        LightComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PortalSystemManager_NotifyLightMoved) == 0x000008, "Wrong alignment on PortalSystemManager_NotifyLightMoved");
static_assert(sizeof(PortalSystemManager_NotifyLightMoved) == 0x000008, "Wrong size on PortalSystemManager_NotifyLightMoved");
static_assert(offsetof(PortalSystemManager_NotifyLightMoved, LightComponent) == 0x000000, "Member 'PortalSystemManager_NotifyLightMoved::LightComponent' has a wrong offset!");

// Function PortalSystem.PortalSystemManager.OnZonesVisibilityChanged
// 0x0020 (0x0020 - 0x0000)
struct PortalSystemManager_OnZonesVisibilityChanged final
{
public:
	TArray<class APortalSystemZone*>              ZonesNewlyEnabled;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class APortalSystemZone*>              ZonesNewlyDisabled;                                // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PortalSystemManager_OnZonesVisibilityChanged) == 0x000008, "Wrong alignment on PortalSystemManager_OnZonesVisibilityChanged");
static_assert(sizeof(PortalSystemManager_OnZonesVisibilityChanged) == 0x000020, "Wrong size on PortalSystemManager_OnZonesVisibilityChanged");
static_assert(offsetof(PortalSystemManager_OnZonesVisibilityChanged, ZonesNewlyEnabled) == 0x000000, "Member 'PortalSystemManager_OnZonesVisibilityChanged::ZonesNewlyEnabled' has a wrong offset!");
static_assert(offsetof(PortalSystemManager_OnZonesVisibilityChanged, ZonesNewlyDisabled) == 0x000010, "Member 'PortalSystemManager_OnZonesVisibilityChanged::ZonesNewlyDisabled' has a wrong offset!");

// Function PortalSystem.PortalSystemManager.RebuildPortalSystemData
// 0x0001 (0x0001 - 0x0000)
struct PortalSystemManager_RebuildPortalSystemData final
{
public:
	bool                                          FromBeginPlay;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PortalSystemManager_RebuildPortalSystemData) == 0x000001, "Wrong alignment on PortalSystemManager_RebuildPortalSystemData");
static_assert(sizeof(PortalSystemManager_RebuildPortalSystemData) == 0x000001, "Wrong size on PortalSystemManager_RebuildPortalSystemData");
static_assert(offsetof(PortalSystemManager_RebuildPortalSystemData, FromBeginPlay) == 0x000000, "Member 'PortalSystemManager_RebuildPortalSystemData::FromBeginPlay' has a wrong offset!");

// Function PortalSystem.PortalSystemManager.RegisterOccluder
// 0x0008 (0x0008 - 0x0000)
struct PortalSystemManager_RegisterOccluder final
{
public:
	class UPortalSystemOccluderComponent*         Occluder;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PortalSystemManager_RegisterOccluder) == 0x000008, "Wrong alignment on PortalSystemManager_RegisterOccluder");
static_assert(sizeof(PortalSystemManager_RegisterOccluder) == 0x000008, "Wrong size on PortalSystemManager_RegisterOccluder");
static_assert(offsetof(PortalSystemManager_RegisterOccluder, Occluder) == 0x000000, "Member 'PortalSystemManager_RegisterOccluder::Occluder' has a wrong offset!");

// Function PortalSystem.PortalSystemZone.IsZoneVisible
// 0x0001 (0x0001 - 0x0000)
struct PortalSystemZone_IsZoneVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PortalSystemZone_IsZoneVisible) == 0x000001, "Wrong alignment on PortalSystemZone_IsZoneVisible");
static_assert(sizeof(PortalSystemZone_IsZoneVisible) == 0x000001, "Wrong size on PortalSystemZone_IsZoneVisible");
static_assert(offsetof(PortalSystemZone_IsZoneVisible, ReturnValue) == 0x000000, "Member 'PortalSystemZone_IsZoneVisible::ReturnValue' has a wrong offset!");

// Function PortalSystem.PortalSystemZone.OnZoneVisibilityChange
// 0x0001 (0x0001 - 0x0000)
struct PortalSystemZone_OnZoneVisibilityChange final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PortalSystemZone_OnZoneVisibilityChange) == 0x000001, "Wrong alignment on PortalSystemZone_OnZoneVisibilityChange");
static_assert(sizeof(PortalSystemZone_OnZoneVisibilityChange) == 0x000001, "Wrong size on PortalSystemZone_OnZoneVisibilityChange");
static_assert(offsetof(PortalSystemZone_OnZoneVisibilityChange, NewVisibility) == 0x000000, "Member 'PortalSystemZone_OnZoneVisibilityChange::NewVisibility' has a wrong offset!");

// Function PortalSystem.PortalSystemZone.ContainPoint
// 0x0020 (0x0020 - 0x0000)
struct PortalSystemZone_ContainPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PortalSystemZone_ContainPoint) == 0x000008, "Wrong alignment on PortalSystemZone_ContainPoint");
static_assert(sizeof(PortalSystemZone_ContainPoint) == 0x000020, "Wrong size on PortalSystemZone_ContainPoint");
static_assert(offsetof(PortalSystemZone_ContainPoint, Point) == 0x000000, "Member 'PortalSystemZone_ContainPoint::Point' has a wrong offset!");
static_assert(offsetof(PortalSystemZone_ContainPoint, ReturnValue) == 0x000018, "Member 'PortalSystemZone_ContainPoint::ReturnValue' has a wrong offset!");

}


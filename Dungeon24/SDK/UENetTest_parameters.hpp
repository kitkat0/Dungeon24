#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UENetTest

#include "Basic.hpp"


namespace SDK::Params
{

// Function UENetTest.NetTestGameInstanceSubsystem.AddOrRemoveFromAlwaysBlockList
// 0x0010 (0x0010 - 0x0000)
struct NetTestGameInstanceSubsystem_AddOrRemoveFromAlwaysBlockList final
{
public:
	class FString                                 Func_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_AddOrRemoveFromAlwaysBlockList) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_AddOrRemoveFromAlwaysBlockList");
static_assert(sizeof(NetTestGameInstanceSubsystem_AddOrRemoveFromAlwaysBlockList) == 0x000010, "Wrong size on NetTestGameInstanceSubsystem_AddOrRemoveFromAlwaysBlockList");
static_assert(offsetof(NetTestGameInstanceSubsystem_AddOrRemoveFromAlwaysBlockList, Func_0) == 0x000000, "Member 'NetTestGameInstanceSubsystem_AddOrRemoveFromAlwaysBlockList::Func_0' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.AddToIgnoreRPCList
// 0x0010 (0x0010 - 0x0000)
struct NetTestGameInstanceSubsystem_AddToIgnoreRPCList final
{
public:
	class FString                                 RpcName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_AddToIgnoreRPCList) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_AddToIgnoreRPCList");
static_assert(sizeof(NetTestGameInstanceSubsystem_AddToIgnoreRPCList) == 0x000010, "Wrong size on NetTestGameInstanceSubsystem_AddToIgnoreRPCList");
static_assert(offsetof(NetTestGameInstanceSubsystem_AddToIgnoreRPCList, RpcName) == 0x000000, "Member 'NetTestGameInstanceSubsystem_AddToIgnoreRPCList::RpcName' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.AddToPackInfoList
// 0x0010 (0x0010 - 0x0000)
struct NetTestGameInstanceSubsystem_AddToPackInfoList final
{
public:
	class FString                                 PackInfo;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_AddToPackInfoList) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_AddToPackInfoList");
static_assert(sizeof(NetTestGameInstanceSubsystem_AddToPackInfoList) == 0x000010, "Wrong size on NetTestGameInstanceSubsystem_AddToPackInfoList");
static_assert(offsetof(NetTestGameInstanceSubsystem_AddToPackInfoList, PackInfo) == 0x000000, "Member 'NetTestGameInstanceSubsystem_AddToPackInfoList::PackInfo' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.ChangePackSelectedSeq
// 0x0008 (0x0008 - 0x0000)
struct NetTestGameInstanceSubsystem_ChangePackSelectedSeq final
{
public:
	class UProtoHolder*                           Proto;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_ChangePackSelectedSeq) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_ChangePackSelectedSeq");
static_assert(sizeof(NetTestGameInstanceSubsystem_ChangePackSelectedSeq) == 0x000008, "Wrong size on NetTestGameInstanceSubsystem_ChangePackSelectedSeq");
static_assert(offsetof(NetTestGameInstanceSubsystem_ChangePackSelectedSeq, Proto) == 0x000000, "Member 'NetTestGameInstanceSubsystem_ChangePackSelectedSeq::Proto' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.FuzzTestOnce
// 0x0008 (0x0008 - 0x0000)
struct NetTestGameInstanceSubsystem_FuzzTestOnce final
{
public:
	class UDetailHolder*                          Holder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_FuzzTestOnce) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_FuzzTestOnce");
static_assert(sizeof(NetTestGameInstanceSubsystem_FuzzTestOnce) == 0x000008, "Wrong size on NetTestGameInstanceSubsystem_FuzzTestOnce");
static_assert(offsetof(NetTestGameInstanceSubsystem_FuzzTestOnce, Holder) == 0x000000, "Member 'NetTestGameInstanceSubsystem_FuzzTestOnce::Holder' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.GetFuzzParamList
// 0x0018 (0x0018 - 0x0000)
struct NetTestGameInstanceSubsystem_GetFuzzParamList final
{
public:
	class UDetailHolder*                          Holder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_GetFuzzParamList) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_GetFuzzParamList");
static_assert(sizeof(NetTestGameInstanceSubsystem_GetFuzzParamList) == 0x000018, "Wrong size on NetTestGameInstanceSubsystem_GetFuzzParamList");
static_assert(offsetof(NetTestGameInstanceSubsystem_GetFuzzParamList, Holder) == 0x000000, "Member 'NetTestGameInstanceSubsystem_GetFuzzParamList::Holder' has a wrong offset!");
static_assert(offsetof(NetTestGameInstanceSubsystem_GetFuzzParamList, ReturnValue) == 0x000008, "Member 'NetTestGameInstanceSubsystem_GetFuzzParamList::ReturnValue' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.GetIgnoreRPCList
// 0x0010 (0x0010 - 0x0000)
struct NetTestGameInstanceSubsystem_GetIgnoreRPCList final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_GetIgnoreRPCList) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_GetIgnoreRPCList");
static_assert(sizeof(NetTestGameInstanceSubsystem_GetIgnoreRPCList) == 0x000010, "Wrong size on NetTestGameInstanceSubsystem_GetIgnoreRPCList");
static_assert(offsetof(NetTestGameInstanceSubsystem_GetIgnoreRPCList, ReturnValue) == 0x000000, "Member 'NetTestGameInstanceSubsystem_GetIgnoreRPCList::ReturnValue' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.InitProtoList
// 0x0001 (0x0001 - 0x0000)
struct NetTestGameInstanceSubsystem_InitProtoList final
{
public:
	bool                                          ScrollToLast;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_InitProtoList) == 0x000001, "Wrong alignment on NetTestGameInstanceSubsystem_InitProtoList");
static_assert(sizeof(NetTestGameInstanceSubsystem_InitProtoList) == 0x000001, "Wrong size on NetTestGameInstanceSubsystem_InitProtoList");
static_assert(offsetof(NetTestGameInstanceSubsystem_InitProtoList, ScrollToLast) == 0x000000, "Member 'NetTestGameInstanceSubsystem_InitProtoList::ScrollToLast' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.IsCollectStatus
// 0x0001 (0x0001 - 0x0000)
struct NetTestGameInstanceSubsystem_IsCollectStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_IsCollectStatus) == 0x000001, "Wrong alignment on NetTestGameInstanceSubsystem_IsCollectStatus");
static_assert(sizeof(NetTestGameInstanceSubsystem_IsCollectStatus) == 0x000001, "Wrong size on NetTestGameInstanceSubsystem_IsCollectStatus");
static_assert(offsetof(NetTestGameInstanceSubsystem_IsCollectStatus, ReturnValue) == 0x000000, "Member 'NetTestGameInstanceSubsystem_IsCollectStatus::ReturnValue' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.IsHideEngineStatus
// 0x0001 (0x0001 - 0x0000)
struct NetTestGameInstanceSubsystem_IsHideEngineStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_IsHideEngineStatus) == 0x000001, "Wrong alignment on NetTestGameInstanceSubsystem_IsHideEngineStatus");
static_assert(sizeof(NetTestGameInstanceSubsystem_IsHideEngineStatus) == 0x000001, "Wrong size on NetTestGameInstanceSubsystem_IsHideEngineStatus");
static_assert(offsetof(NetTestGameInstanceSubsystem_IsHideEngineStatus, ReturnValue) == 0x000000, "Member 'NetTestGameInstanceSubsystem_IsHideEngineStatus::ReturnValue' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.IsInAlwaysBlockList
// 0x0018 (0x0018 - 0x0000)
struct NetTestGameInstanceSubsystem_IsInAlwaysBlockList final
{
public:
	class FString                                 Func_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetTestGameInstanceSubsystem_IsInAlwaysBlockList) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_IsInAlwaysBlockList");
static_assert(sizeof(NetTestGameInstanceSubsystem_IsInAlwaysBlockList) == 0x000018, "Wrong size on NetTestGameInstanceSubsystem_IsInAlwaysBlockList");
static_assert(offsetof(NetTestGameInstanceSubsystem_IsInAlwaysBlockList, Func_0) == 0x000000, "Member 'NetTestGameInstanceSubsystem_IsInAlwaysBlockList::Func_0' has a wrong offset!");
static_assert(offsetof(NetTestGameInstanceSubsystem_IsInAlwaysBlockList, ReturnValue) == 0x000010, "Member 'NetTestGameInstanceSubsystem_IsInAlwaysBlockList::ReturnValue' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.IsInBlockList
// 0x0018 (0x0018 - 0x0000)
struct NetTestGameInstanceSubsystem_IsInBlockList final
{
public:
	class FString                                 Func_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetTestGameInstanceSubsystem_IsInBlockList) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_IsInBlockList");
static_assert(sizeof(NetTestGameInstanceSubsystem_IsInBlockList) == 0x000018, "Wrong size on NetTestGameInstanceSubsystem_IsInBlockList");
static_assert(offsetof(NetTestGameInstanceSubsystem_IsInBlockList, Func_0) == 0x000000, "Member 'NetTestGameInstanceSubsystem_IsInBlockList::Func_0' has a wrong offset!");
static_assert(offsetof(NetTestGameInstanceSubsystem_IsInBlockList, ReturnValue) == 0x000010, "Member 'NetTestGameInstanceSubsystem_IsInBlockList::ReturnValue' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.IsInterceptStatus
// 0x0001 (0x0001 - 0x0000)
struct NetTestGameInstanceSubsystem_IsInterceptStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_IsInterceptStatus) == 0x000001, "Wrong alignment on NetTestGameInstanceSubsystem_IsInterceptStatus");
static_assert(sizeof(NetTestGameInstanceSubsystem_IsInterceptStatus) == 0x000001, "Wrong size on NetTestGameInstanceSubsystem_IsInterceptStatus");
static_assert(offsetof(NetTestGameInstanceSubsystem_IsInterceptStatus, ReturnValue) == 0x000000, "Member 'NetTestGameInstanceSubsystem_IsInterceptStatus::ReturnValue' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.IsSCCollectStatus
// 0x0001 (0x0001 - 0x0000)
struct NetTestGameInstanceSubsystem_IsSCCollectStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_IsSCCollectStatus) == 0x000001, "Wrong alignment on NetTestGameInstanceSubsystem_IsSCCollectStatus");
static_assert(sizeof(NetTestGameInstanceSubsystem_IsSCCollectStatus) == 0x000001, "Wrong size on NetTestGameInstanceSubsystem_IsSCCollectStatus");
static_assert(offsetof(NetTestGameInstanceSubsystem_IsSCCollectStatus, ReturnValue) == 0x000000, "Member 'NetTestGameInstanceSubsystem_IsSCCollectStatus::ReturnValue' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.RefreshBlockList
// 0x0001 (0x0001 - 0x0000)
struct NetTestGameInstanceSubsystem_RefreshBlockList final
{
public:
	bool                                          ScrollToLast;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_RefreshBlockList) == 0x000001, "Wrong alignment on NetTestGameInstanceSubsystem_RefreshBlockList");
static_assert(sizeof(NetTestGameInstanceSubsystem_RefreshBlockList) == 0x000001, "Wrong size on NetTestGameInstanceSubsystem_RefreshBlockList");
static_assert(offsetof(NetTestGameInstanceSubsystem_RefreshBlockList, ScrollToLast) == 0x000000, "Member 'NetTestGameInstanceSubsystem_RefreshBlockList::ScrollToLast' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.RemoveFromBlockList
// 0x0008 (0x0008 - 0x0000)
struct NetTestGameInstanceSubsystem_RemoveFromBlockList final
{
public:
	class UBlockHolder*                           Holder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_RemoveFromBlockList) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_RemoveFromBlockList");
static_assert(sizeof(NetTestGameInstanceSubsystem_RemoveFromBlockList) == 0x000008, "Wrong size on NetTestGameInstanceSubsystem_RemoveFromBlockList");
static_assert(offsetof(NetTestGameInstanceSubsystem_RemoveFromBlockList, Holder) == 0x000000, "Member 'NetTestGameInstanceSubsystem_RemoveFromBlockList::Holder' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.RemoveFromIgnoreRPCList
// 0x0010 (0x0010 - 0x0000)
struct NetTestGameInstanceSubsystem_RemoveFromIgnoreRPCList final
{
public:
	class FString                                 RpcName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_RemoveFromIgnoreRPCList) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_RemoveFromIgnoreRPCList");
static_assert(sizeof(NetTestGameInstanceSubsystem_RemoveFromIgnoreRPCList) == 0x000010, "Wrong size on NetTestGameInstanceSubsystem_RemoveFromIgnoreRPCList");
static_assert(offsetof(NetTestGameInstanceSubsystem_RemoveFromIgnoreRPCList, RpcName) == 0x000000, "Member 'NetTestGameInstanceSubsystem_RemoveFromIgnoreRPCList::RpcName' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.RemoveFromPackInfoList
// 0x0010 (0x0010 - 0x0000)
struct NetTestGameInstanceSubsystem_RemoveFromPackInfoList final
{
public:
	class FString                                 PackInfo;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_RemoveFromPackInfoList) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_RemoveFromPackInfoList");
static_assert(sizeof(NetTestGameInstanceSubsystem_RemoveFromPackInfoList) == 0x000010, "Wrong size on NetTestGameInstanceSubsystem_RemoveFromPackInfoList");
static_assert(offsetof(NetTestGameInstanceSubsystem_RemoveFromPackInfoList, PackInfo) == 0x000000, "Member 'NetTestGameInstanceSubsystem_RemoveFromPackInfoList::PackInfo' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SaveNewPack
// 0x0010 (0x0010 - 0x0000)
struct NetTestGameInstanceSubsystem_SaveNewPack final
{
public:
	class FString                                 PackName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_SaveNewPack) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_SaveNewPack");
static_assert(sizeof(NetTestGameInstanceSubsystem_SaveNewPack) == 0x000010, "Wrong size on NetTestGameInstanceSubsystem_SaveNewPack");
static_assert(offsetof(NetTestGameInstanceSubsystem_SaveNewPack, PackName) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SaveNewPack::PackName' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SavePackRPCSendDelayTime
// 0x0010 (0x0010 - 0x0000)
struct NetTestGameInstanceSubsystem_SavePackRPCSendDelayTime final
{
public:
	class UProtoHolder*                           Proto;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetTestGameInstanceSubsystem_SavePackRPCSendDelayTime) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_SavePackRPCSendDelayTime");
static_assert(sizeof(NetTestGameInstanceSubsystem_SavePackRPCSendDelayTime) == 0x000010, "Wrong size on NetTestGameInstanceSubsystem_SavePackRPCSendDelayTime");
static_assert(offsetof(NetTestGameInstanceSubsystem_SavePackRPCSendDelayTime, Proto) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SavePackRPCSendDelayTime::Proto' has a wrong offset!");
static_assert(offsetof(NetTestGameInstanceSubsystem_SavePackRPCSendDelayTime, Delay) == 0x000008, "Member 'NetTestGameInstanceSubsystem_SavePackRPCSendDelayTime::Delay' has a wrong offset!");
static_assert(offsetof(NetTestGameInstanceSubsystem_SavePackRPCSendDelayTime, ReturnValue) == 0x00000C, "Member 'NetTestGameInstanceSubsystem_SavePackRPCSendDelayTime::ReturnValue' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SendPackRPCTimes
// 0x0004 (0x0004 - 0x0000)
struct NetTestGameInstanceSubsystem_SendPackRPCTimes final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_SendPackRPCTimes) == 0x000004, "Wrong alignment on NetTestGameInstanceSubsystem_SendPackRPCTimes");
static_assert(sizeof(NetTestGameInstanceSubsystem_SendPackRPCTimes) == 0x000004, "Wrong size on NetTestGameInstanceSubsystem_SendPackRPCTimes");
static_assert(offsetof(NetTestGameInstanceSubsystem_SendPackRPCTimes, Time) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SendPackRPCTimes::Time' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SendPackRPCTimesOutOfOrder
// 0x0001 (0x0001 - 0x0000)
struct NetTestGameInstanceSubsystem_SendPackRPCTimesOutOfOrder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_SendPackRPCTimesOutOfOrder) == 0x000001, "Wrong alignment on NetTestGameInstanceSubsystem_SendPackRPCTimesOutOfOrder");
static_assert(sizeof(NetTestGameInstanceSubsystem_SendPackRPCTimesOutOfOrder) == 0x000001, "Wrong size on NetTestGameInstanceSubsystem_SendPackRPCTimesOutOfOrder");
static_assert(offsetof(NetTestGameInstanceSubsystem_SendPackRPCTimesOutOfOrder, ReturnValue) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SendPackRPCTimesOutOfOrder::ReturnValue' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SendRPCTimes
// 0x0004 (0x0004 - 0x0000)
struct NetTestGameInstanceSubsystem_SendRPCTimes final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_SendRPCTimes) == 0x000004, "Wrong alignment on NetTestGameInstanceSubsystem_SendRPCTimes");
static_assert(sizeof(NetTestGameInstanceSubsystem_SendRPCTimes) == 0x000004, "Wrong size on NetTestGameInstanceSubsystem_SendRPCTimes");
static_assert(offsetof(NetTestGameInstanceSubsystem_SendRPCTimes, Time) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SendRPCTimes::Time' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SendRPCWithDelay
// 0x0008 (0x0008 - 0x0000)
struct NetTestGameInstanceSubsystem_SendRPCWithDelay final
{
public:
	class UProtoHolder*                           RPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_SendRPCWithDelay) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_SendRPCWithDelay");
static_assert(sizeof(NetTestGameInstanceSubsystem_SendRPCWithDelay) == 0x000008, "Wrong size on NetTestGameInstanceSubsystem_SendRPCWithDelay");
static_assert(offsetof(NetTestGameInstanceSubsystem_SendRPCWithDelay, RPC) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SendRPCWithDelay::RPC' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SetBlockListView
// 0x0008 (0x0008 - 0x0000)
struct NetTestGameInstanceSubsystem_SetBlockListView final
{
public:
	class UListView*                              ListView;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_SetBlockListView) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_SetBlockListView");
static_assert(sizeof(NetTestGameInstanceSubsystem_SetBlockListView) == 0x000008, "Wrong size on NetTestGameInstanceSubsystem_SetBlockListView");
static_assert(offsetof(NetTestGameInstanceSubsystem_SetBlockListView, ListView) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SetBlockListView::ListView' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SetDetailListView
// 0x0008 (0x0008 - 0x0000)
struct NetTestGameInstanceSubsystem_SetDetailListView final
{
public:
	class UListView*                              ListView;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_SetDetailListView) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_SetDetailListView");
static_assert(sizeof(NetTestGameInstanceSubsystem_SetDetailListView) == 0x000008, "Wrong size on NetTestGameInstanceSubsystem_SetDetailListView");
static_assert(offsetof(NetTestGameInstanceSubsystem_SetDetailListView, ListView) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SetDetailListView::ListView' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SetNetTestListView
// 0x0008 (0x0008 - 0x0000)
struct NetTestGameInstanceSubsystem_SetNetTestListView final
{
public:
	class UListView*                              ListView;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_SetNetTestListView) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_SetNetTestListView");
static_assert(sizeof(NetTestGameInstanceSubsystem_SetNetTestListView) == 0x000008, "Wrong size on NetTestGameInstanceSubsystem_SetNetTestListView");
static_assert(offsetof(NetTestGameInstanceSubsystem_SetNetTestListView, ListView) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SetNetTestListView::ListView' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SetNewPackListView
// 0x0008 (0x0008 - 0x0000)
struct NetTestGameInstanceSubsystem_SetNewPackListView final
{
public:
	class UListView*                              ListView;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_SetNewPackListView) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_SetNewPackListView");
static_assert(sizeof(NetTestGameInstanceSubsystem_SetNewPackListView) == 0x000008, "Wrong size on NetTestGameInstanceSubsystem_SetNewPackListView");
static_assert(offsetof(NetTestGameInstanceSubsystem_SetNewPackListView, ListView) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SetNewPackListView::ListView' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SetPackListView
// 0x0008 (0x0008 - 0x0000)
struct NetTestGameInstanceSubsystem_SetPackListView final
{
public:
	class UListView*                              ListView;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_SetPackListView) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_SetPackListView");
static_assert(sizeof(NetTestGameInstanceSubsystem_SetPackListView) == 0x000008, "Wrong size on NetTestGameInstanceSubsystem_SetPackListView");
static_assert(offsetof(NetTestGameInstanceSubsystem_SetPackListView, ListView) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SetPackListView::ListView' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.SetPackRPCListView
// 0x0008 (0x0008 - 0x0000)
struct NetTestGameInstanceSubsystem_SetPackRPCListView final
{
public:
	class UListView*                              ListView;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_SetPackRPCListView) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_SetPackRPCListView");
static_assert(sizeof(NetTestGameInstanceSubsystem_SetPackRPCListView) == 0x000008, "Wrong size on NetTestGameInstanceSubsystem_SetPackRPCListView");
static_assert(offsetof(NetTestGameInstanceSubsystem_SetPackRPCListView, ListView) == 0x000000, "Member 'NetTestGameInstanceSubsystem_SetPackRPCListView::ListView' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.StartFuzzTest
// 0x0018 (0x0018 - 0x0000)
struct NetTestGameInstanceSubsystem_StartFuzzTest final
{
public:
	class UDetailHolder*                          Holder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetTestGameInstanceSubsystem_StartFuzzTest) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_StartFuzzTest");
static_assert(sizeof(NetTestGameInstanceSubsystem_StartFuzzTest) == 0x000018, "Wrong size on NetTestGameInstanceSubsystem_StartFuzzTest");
static_assert(offsetof(NetTestGameInstanceSubsystem_StartFuzzTest, Holder) == 0x000000, "Member 'NetTestGameInstanceSubsystem_StartFuzzTest::Holder' has a wrong offset!");
static_assert(offsetof(NetTestGameInstanceSubsystem_StartFuzzTest, ReturnValue) == 0x000008, "Member 'NetTestGameInstanceSubsystem_StartFuzzTest::ReturnValue' has a wrong offset!");

// Function UENetTest.NetTestGameInstanceSubsystem.ToSelectedNewPack
// 0x0010 (0x0010 - 0x0000)
struct NetTestGameInstanceSubsystem_ToSelectedNewPack final
{
public:
	class UProtoHolder*                           Proto;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Add;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetTestGameInstanceSubsystem_ToSelectedNewPack) == 0x000008, "Wrong alignment on NetTestGameInstanceSubsystem_ToSelectedNewPack");
static_assert(sizeof(NetTestGameInstanceSubsystem_ToSelectedNewPack) == 0x000010, "Wrong size on NetTestGameInstanceSubsystem_ToSelectedNewPack");
static_assert(offsetof(NetTestGameInstanceSubsystem_ToSelectedNewPack, Proto) == 0x000000, "Member 'NetTestGameInstanceSubsystem_ToSelectedNewPack::Proto' has a wrong offset!");
static_assert(offsetof(NetTestGameInstanceSubsystem_ToSelectedNewPack, Add) == 0x000008, "Member 'NetTestGameInstanceSubsystem_ToSelectedNewPack::Add' has a wrong offset!");

// Function UENetTest.RPCDetailWidget.InitDetailList
// 0x0001 (0x0001 - 0x0000)
struct RPCDetailWidget_InitDetailList final
{
public:
	bool                                          Cache;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPCDetailWidget_InitDetailList) == 0x000001, "Wrong alignment on RPCDetailWidget_InitDetailList");
static_assert(sizeof(RPCDetailWidget_InitDetailList) == 0x000001, "Wrong size on RPCDetailWidget_InitDetailList");
static_assert(offsetof(RPCDetailWidget_InitDetailList, Cache) == 0x000000, "Member 'RPCDetailWidget_InitDetailList::Cache' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_TGF_SwitchWeaponSlot_Base

#include "Basic.hpp"

#include "LyraGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GA_TGF_SwitchWeaponSlot_Base.GA_TGF_SwitchWeaponSlot_Base_C.ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base
// 0x00D8 (0x00D8 - 0x0000)
struct GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALyraCharacter*                         CallFunc_GetLyraCharacterFromActorInfo_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTgfEquipmentManagerComponent*          CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETgfWeaponChangeSlot                          CallFunc_GetSlot_Slot;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData;               // 0x0020(0x00B0)()
	bool                                          CallFunc_Is_Valid_Slot_Ret;                        // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base) == 0x000008, "Wrong alignment on GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base");
static_assert(sizeof(GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base) == 0x0000D8, "Wrong size on GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base, EntryPoint) == 0x000000, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base, CallFunc_GetLyraCharacterFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base::CallFunc_GetLyraCharacterFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base, CallFunc_K2_CommitAbility_ReturnValue) == 0x000018, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base, CallFunc_K2_HasAuthority_ReturnValue) == 0x000019, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base, CallFunc_GetSlot_Slot) == 0x00001A, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base::CallFunc_GetSlot_Slot' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base, CallFunc_Conv_ByteToFloat_ReturnValue) == 0x00001C, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base::CallFunc_Conv_ByteToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base, K2Node_MakeStruct_GameplayEventData) == 0x000020, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base::K2Node_MakeStruct_GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base, CallFunc_Is_Valid_Slot_Ret) == 0x0000D0, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_ExecuteUbergraph_GA_TGF_SwitchWeaponSlot_Base::CallFunc_Is_Valid_Slot_Ret' has a wrong offset!");

// Function GA_TGF_SwitchWeaponSlot_Base.GA_TGF_SwitchWeaponSlot_Base_C.GetSlot
// 0x0001 (0x0001 - 0x0000)
struct GA_TGF_SwitchWeaponSlot_Base_C_GetSlot final
{
public:
	ETgfWeaponChangeSlot                          Slot;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_TGF_SwitchWeaponSlot_Base_C_GetSlot) == 0x000001, "Wrong alignment on GA_TGF_SwitchWeaponSlot_Base_C_GetSlot");
static_assert(sizeof(GA_TGF_SwitchWeaponSlot_Base_C_GetSlot) == 0x000001, "Wrong size on GA_TGF_SwitchWeaponSlot_Base_C_GetSlot");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_GetSlot, Slot) == 0x000000, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_GetSlot::Slot' has a wrong offset!");

// Function GA_TGF_SwitchWeaponSlot_Base.GA_TGF_SwitchWeaponSlot_Base_C.Is Valid Slot
// 0x0028 (0x0028 - 0x0000)
struct GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETgfWeaponChangeSlot                          CallFunc_GetSlot_Slot;                             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ALyraCharacter*                         CallFunc_GetLyraCharacterFromActorInfo_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfEquipmentManagerComponent*          CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot) == 0x000008, "Wrong alignment on GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot");
static_assert(sizeof(GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot) == 0x000028, "Wrong size on GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot, Ret) == 0x000000, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot::Ret' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot, CallFunc_GetSlot_Slot) == 0x000001, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot::CallFunc_GetSlot_Slot' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot, CallFunc_GetLyraCharacterFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot::CallFunc_GetLyraCharacterFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000010, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000020, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot, CallFunc_BooleanAND_ReturnValue) == 0x000021, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_Is_Valid_Slot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GA_TGF_SwitchWeaponSlot_Base.GA_TGF_SwitchWeaponSlot_Base_C.K2_CanActivateAbility
// 0x0100 (0x0100 - 0x0000)
struct GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0048(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0050(0x0020)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALyraCharacter*                         CallFunc_GetLyraCharacterFromActorInfo_ReturnValue; // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfWeaponChangeSlot                          CallFunc_GetSlot_Slot;                             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_CheckCharacterStateValid_RelevantTags;    // 0x0088(0x0020)()
	bool                                          CallFunc_CheckCharacterStateValid_Result;          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETgfEquipSlot                                 CallFunc_ParseRightHandWeaponSlot_ReturnValue;     // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Valid_Slot_Ret;                        // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ALyraCharacter*                         CallFunc_GetLyraCharacterFromActorInfo_ReturnValue_1; // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfEquipmentManagerComponent*          CallFunc_GetComponentByClass_ReturnValue;          // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraEquipmentInstance*                 CallFunc_GetEquipBySlot_ReturnValue;               // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility) == 0x000008, "Wrong alignment on GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility");
static_assert(sizeof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility) == 0x000100, "Wrong size on GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, ActorInfo) == 0x000000, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, Handle) == 0x000048, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::Handle' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, RelevantTags) == 0x000050, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::RelevantTags' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, ReturnValue) == 0x000070, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_GetLyraCharacterFromActorInfo_ReturnValue) == 0x000078, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_GetLyraCharacterFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_GetSlot_Slot) == 0x000080, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_GetSlot_Slot' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_CheckCharacterStateValid_RelevantTags) == 0x000088, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_CheckCharacterStateValid_RelevantTags' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_CheckCharacterStateValid_Result) == 0x0000A8, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_CheckCharacterStateValid_Result' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_ParseRightHandWeaponSlot_ReturnValue) == 0x0000A9, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_ParseRightHandWeaponSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_Is_Valid_Slot_Ret) == 0x0000AA, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_Is_Valid_Slot_Ret' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_GetLyraCharacterFromActorInfo_ReturnValue_1) == 0x0000B0, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_GetLyraCharacterFromActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0000B8, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x0000C8, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_IsValid_ReturnValue) == 0x0000C9, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_Not_PreBool_ReturnValue) == 0x0000CA, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_GetComponentByClass_ReturnValue) == 0x0000D0, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x0000D8, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x0000E8, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_GetEquipBySlot_ReturnValue) == 0x0000F0, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_GetEquipBySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_BooleanOR_ReturnValue) == 0x0000F8, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_IsValid_ReturnValue_1) == 0x0000F9, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility, CallFunc_BooleanAND_ReturnValue) == 0x0000FA, "Member 'GA_TGF_SwitchWeaponSlot_Base_C_K2_CanActivateAbility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Fighter_HeroSample

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "HitPendingData_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "BP_Tgf_Hero_Default_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "AGRPRO_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Fighter_HeroSample.BP_Fighter_HeroSample_C
// 0x0410 (0x0F00 - 0x0AF0)
class ABP_Fighter_HeroSample_C final : public ABP_Tgf_Hero_Default_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Fighter_HeroSample_C;            // 0x0AF0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAGR_CombatManager*                     AGR_CombatManager;                                 // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTgfItemCosmeticComponent*              TgfItemSkin;                                       // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Hand;                                    // 0x0B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Weapon;                                  // 0x0B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       PlayerName;                                        // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TgfPawnCosmetics_C*                 BP_TgfPawnCosmetics;                               // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          DisablePostProcessBlueprint;                       // 0x0B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B29[0x3];                                      // 0x0B29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         XYDis;                                             // 0x0B2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZDis;                                              // 0x0B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B34[0x4];                                      // 0x0B34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ShellMeshTest;                                     // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         TraceMeshAddedCount;                               // 0x0B40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B44[0x4];                                      // 0x0B44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0B50(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FGameplayEffectContextHandle           GameplayEffectContextHandler;                      // 0x0C38(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayEventData                     GameplayEventDataPayload;                          // 0x0C50(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 HitActorServer;                                    // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResultServer;                                   // 0x0D08(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        ValidDistance;                                     // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseHitValidation;                                  // 0x0DF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanProcessHit;                                     // 0x0DF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DFA[0x2];                                      // 0x0DFA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurHitCount;                                       // 0x0DFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class AActor*, int32>                    ActorHitCount;                                     // 0x0E00(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class AActor*, struct FHitPendingData>   ActorHitPending;                                   // 0x0E50(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         CurGAIndex;                                        // 0x0EA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA4[0x4];                                      // 0x0EA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UTgfGameplayAbility*>       CurSrcGADIc;                                       // 0x0EA8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTgfGameplayAbility*                    CurSrcGA;                                          // 0x0EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddTraceMesh(class FName StartSocketTraceName, class FName EndSocketTraceName, EAGR_CombatColliderType CollisionHandling, int32* TraceMeshInsId);
	void AttackHitEventHandle(const struct FHitResult& Hit, class UPrimitiveComponent* Param_Mesh);
	void BndEvt__BP_Fighter_HeroSample_ActorMapComponent_K2Node_ComponentBoundEvent_0_TgfActorMap_TickEvent__DelegateSignature(float DeltaTime);
	void BndEvt__BP_Fighter_HeroSample_AttributeComponent_K2Node_ComponentBoundEvent_0_TgfAttribute_DeathEvent__DelegateSignature(class AActor* OwningActor);
	void BndEvt__BP_Fighter_HeroSample_AttributeComponent_K2Node_ComponentBoundEvent_1_TgfAttribute_DeathEvent__DelegateSignature(class AActor* OwningActor);
	void BndEvt__BP_Fighter_HeroSample_AttributeComponent_K2Node_ComponentBoundEvent_3_TgfAttribute_DeathEvent__DelegateSignature(class AActor* OwningActor);
	void BndEvt__BP_Fighter_HeroSample_AttributeComponent_K2Node_ComponentBoundEvent_4_TgfAttribute_DeathEvent__DelegateSignature(class AActor* OwningActor);
	void BndEvt__BP_Fighter_HeroSample_AttributeComponent_K2Node_ComponentBoundEvent_5_TgfAttribute_DeathEvent__DelegateSignature(class AActor* OwningActor);
	void BndEvt__BP_Fighter_HeroSample_BP_TgfPawnCosmetics_K2Node_ComponentBoundEvent_1_LyraSpawnedCharacterPartsChanged__DelegateSignature(class ULyraPawnComponent_CharacterParts* ComponentWithChangedParts);
	void BroadCastHealEvent();
	void CheckHitValid(class AActor* SrcActor, class AActor* TargetActor, bool* Result);
	void ClientHandleMithrilSpectate(bool CanRebirth);
	void DeInitCurGA(int32 InputIndex);
	void DeInitHitData();
	void EndProcessHit();
	void ExecuteUbergraph_BP_Fighter_HeroSample(int32 EntryPoint);
	void HandleMithrilDeathCamera(bool CanRebirth);
	void InitCurGA(class UTgfGameplayAbility* InputGA, int32* ResultIndex);
	void InitHitData();
	void Initialize_Player_Name();
	void OnAttackHitEventServer(const struct FHitResult& Hit, class UPrimitiveComponent* Param_Mesh, double CriticalRandomValue);
	void OnCosmeticViewChanged(bool IsFirstPerson);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RemoveTraceMesh(int32 TraceMeshInsId, bool* Result);
	void ResetCurGA();
	void ResetHitData();
	void StartProcessHit(int32 HitCount);
	void TryChangeCosmeticAnimBlueprint(bool bFirstPerson);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Fighter_HeroSample_C">();
	}
	static class ABP_Fighter_HeroSample_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Fighter_HeroSample_C>();
	}
};
static_assert(alignof(ABP_Fighter_HeroSample_C) == 0x000010, "Wrong alignment on ABP_Fighter_HeroSample_C");
static_assert(sizeof(ABP_Fighter_HeroSample_C) == 0x000F00, "Wrong size on ABP_Fighter_HeroSample_C");
static_assert(offsetof(ABP_Fighter_HeroSample_C, UberGraphFrame_BP_Fighter_HeroSample_C) == 0x000AF0, "Member 'ABP_Fighter_HeroSample_C::UberGraphFrame_BP_Fighter_HeroSample_C' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, AGR_CombatManager) == 0x000AF8, "Member 'ABP_Fighter_HeroSample_C::AGR_CombatManager' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, TgfItemSkin) == 0x000B00, "Member 'ABP_Fighter_HeroSample_C::TgfItemSkin' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, SpotLight_Hand) == 0x000B08, "Member 'ABP_Fighter_HeroSample_C::SpotLight_Hand' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, SpotLight_Weapon) == 0x000B10, "Member 'ABP_Fighter_HeroSample_C::SpotLight_Weapon' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, PlayerName) == 0x000B18, "Member 'ABP_Fighter_HeroSample_C::PlayerName' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, BP_TgfPawnCosmetics) == 0x000B20, "Member 'ABP_Fighter_HeroSample_C::BP_TgfPawnCosmetics' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, DisablePostProcessBlueprint) == 0x000B28, "Member 'ABP_Fighter_HeroSample_C::DisablePostProcessBlueprint' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, XYDis) == 0x000B2C, "Member 'ABP_Fighter_HeroSample_C::XYDis' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, ZDis) == 0x000B30, "Member 'ABP_Fighter_HeroSample_C::ZDis' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, ShellMeshTest) == 0x000B38, "Member 'ABP_Fighter_HeroSample_C::ShellMeshTest' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, TraceMeshAddedCount) == 0x000B40, "Member 'ABP_Fighter_HeroSample_C::TraceMeshAddedCount' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, HitActor) == 0x000B48, "Member 'ABP_Fighter_HeroSample_C::HitActor' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, HitResult) == 0x000B50, "Member 'ABP_Fighter_HeroSample_C::HitResult' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, GameplayEffectContextHandler) == 0x000C38, "Member 'ABP_Fighter_HeroSample_C::GameplayEffectContextHandler' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, GameplayEventDataPayload) == 0x000C50, "Member 'ABP_Fighter_HeroSample_C::GameplayEventDataPayload' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, HitActorServer) == 0x000D00, "Member 'ABP_Fighter_HeroSample_C::HitActorServer' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, HitResultServer) == 0x000D08, "Member 'ABP_Fighter_HeroSample_C::HitResultServer' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, ValidDistance) == 0x000DF0, "Member 'ABP_Fighter_HeroSample_C::ValidDistance' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, UseHitValidation) == 0x000DF8, "Member 'ABP_Fighter_HeroSample_C::UseHitValidation' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, CanProcessHit) == 0x000DF9, "Member 'ABP_Fighter_HeroSample_C::CanProcessHit' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, CurHitCount) == 0x000DFC, "Member 'ABP_Fighter_HeroSample_C::CurHitCount' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, ActorHitCount) == 0x000E00, "Member 'ABP_Fighter_HeroSample_C::ActorHitCount' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, ActorHitPending) == 0x000E50, "Member 'ABP_Fighter_HeroSample_C::ActorHitPending' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, CurGAIndex) == 0x000EA0, "Member 'ABP_Fighter_HeroSample_C::CurGAIndex' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, CurSrcGADIc) == 0x000EA8, "Member 'ABP_Fighter_HeroSample_C::CurSrcGADIc' has a wrong offset!");
static_assert(offsetof(ABP_Fighter_HeroSample_C, CurSrcGA) == 0x000EF8, "Member 'ABP_Fighter_HeroSample_C::CurSrcGA' has a wrong offset!");

}


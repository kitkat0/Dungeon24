#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieRenderPipelineRenderPasses

#include "Basic.hpp"

#include "MovieRenderPipelineRenderPasses_structs.hpp"
#include "MovieRenderPipelineCore_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ActorLayerUtilities_structs.hpp"


namespace SDK
{

// Class MovieRenderPipelineRenderPasses.MoviePipelineImagePassBase
// 0x0130 (0x0178 - 0x0048)
class UMoviePipelineImagePassBase : public UMoviePipelineRenderPass
{
public:
	uint8                                         Pad_48[0x130];                                     // 0x0048(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImagePassBase">();
	}
	static class UMoviePipelineImagePassBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImagePassBase>();
	}
};
static_assert(alignof(UMoviePipelineImagePassBase) == 0x000008, "Wrong alignment on UMoviePipelineImagePassBase");
static_assert(sizeof(UMoviePipelineImagePassBase) == 0x000178, "Wrong size on UMoviePipelineImagePassBase");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPassBase
// 0x00B0 (0x0228 - 0x0178)
class UMoviePipelineDeferredPassBase : public UMoviePipelineImagePassBase
{
public:
	bool                                          bAccumulatorIncludesAlpha;                         // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableMultisampleEffects;                        // 0x0179(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUse32BitPostProcessMaterials;                     // 0x017A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B[0x5];                                      // 0x017B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMoviePipelinePostProcessPass>  AdditionalPostProcessMaterials;                    // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRenderMainPass;                                   // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddDefaultLayer;                                  // 0x0191(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActorLayer>                    ActorLayers;                                       // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x10];                                     // 0x01A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                DataLayers;                                        // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             ActivePostProcessMaterials;                        // 0x01C8(0x0010)(ZeroConstructor, Transient, DuplicateTransient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     StencilLayerMaterial;                              // 0x01D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E0[0x48];                                     // 0x01E0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPassBase">();
	}
	static class UMoviePipelineDeferredPassBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPassBase>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPassBase) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPassBase");
static_assert(sizeof(UMoviePipelineDeferredPassBase) == 0x000228, "Wrong size on UMoviePipelineDeferredPassBase");
static_assert(offsetof(UMoviePipelineDeferredPassBase, bAccumulatorIncludesAlpha) == 0x000178, "Member 'UMoviePipelineDeferredPassBase::bAccumulatorIncludesAlpha' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, bDisableMultisampleEffects) == 0x000179, "Member 'UMoviePipelineDeferredPassBase::bDisableMultisampleEffects' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, bUse32BitPostProcessMaterials) == 0x00017A, "Member 'UMoviePipelineDeferredPassBase::bUse32BitPostProcessMaterials' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, AdditionalPostProcessMaterials) == 0x000180, "Member 'UMoviePipelineDeferredPassBase::AdditionalPostProcessMaterials' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, bRenderMainPass) == 0x000190, "Member 'UMoviePipelineDeferredPassBase::bRenderMainPass' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, bAddDefaultLayer) == 0x000191, "Member 'UMoviePipelineDeferredPassBase::bAddDefaultLayer' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, ActorLayers) == 0x000198, "Member 'UMoviePipelineDeferredPassBase::ActorLayers' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, DataLayers) == 0x0001B8, "Member 'UMoviePipelineDeferredPassBase::DataLayers' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, ActivePostProcessMaterials) == 0x0001C8, "Member 'UMoviePipelineDeferredPassBase::ActivePostProcessMaterials' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDeferredPassBase, StencilLayerMaterial) == 0x0001D8, "Member 'UMoviePipelineDeferredPassBase::StencilLayerMaterial' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPass_Unlit
// 0x0000 (0x0228 - 0x0228)
class UMoviePipelineDeferredPass_Unlit final : public UMoviePipelineDeferredPassBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPass_Unlit">();
	}
	static class UMoviePipelineDeferredPass_Unlit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPass_Unlit>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPass_Unlit) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPass_Unlit");
static_assert(sizeof(UMoviePipelineDeferredPass_Unlit) == 0x000228, "Wrong size on UMoviePipelineDeferredPass_Unlit");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPass_DetailLighting
// 0x0000 (0x0228 - 0x0228)
class UMoviePipelineDeferredPass_DetailLighting final : public UMoviePipelineDeferredPassBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPass_DetailLighting">();
	}
	static class UMoviePipelineDeferredPass_DetailLighting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPass_DetailLighting>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPass_DetailLighting) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPass_DetailLighting");
static_assert(sizeof(UMoviePipelineDeferredPass_DetailLighting) == 0x000228, "Wrong size on UMoviePipelineDeferredPass_DetailLighting");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPass_LightingOnly
// 0x0000 (0x0228 - 0x0228)
class UMoviePipelineDeferredPass_LightingOnly final : public UMoviePipelineDeferredPassBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPass_LightingOnly">();
	}
	static class UMoviePipelineDeferredPass_LightingOnly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPass_LightingOnly>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPass_LightingOnly) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPass_LightingOnly");
static_assert(sizeof(UMoviePipelineDeferredPass_LightingOnly) == 0x000228, "Wrong size on UMoviePipelineDeferredPass_LightingOnly");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPass_ReflectionsOnly
// 0x0000 (0x0228 - 0x0228)
class UMoviePipelineDeferredPass_ReflectionsOnly final : public UMoviePipelineDeferredPassBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPass_ReflectionsOnly">();
	}
	static class UMoviePipelineDeferredPass_ReflectionsOnly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPass_ReflectionsOnly>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPass_ReflectionsOnly) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPass_ReflectionsOnly");
static_assert(sizeof(UMoviePipelineDeferredPass_ReflectionsOnly) == 0x000228, "Wrong size on UMoviePipelineDeferredPass_ReflectionsOnly");

// Class MovieRenderPipelineRenderPasses.MoviePipelineDeferredPass_PathTracer
// 0x0008 (0x0230 - 0x0228)
class UMoviePipelineDeferredPass_PathTracer final : public UMoviePipelineDeferredPassBase
{
public:
	bool                                          bReferenceMotionBlur;                              // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDeferredPass_PathTracer">();
	}
	static class UMoviePipelineDeferredPass_PathTracer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDeferredPass_PathTracer>();
	}
};
static_assert(alignof(UMoviePipelineDeferredPass_PathTracer) == 0x000008, "Wrong alignment on UMoviePipelineDeferredPass_PathTracer");
static_assert(sizeof(UMoviePipelineDeferredPass_PathTracer) == 0x000230, "Wrong size on UMoviePipelineDeferredPass_PathTracer");
static_assert(offsetof(UMoviePipelineDeferredPass_PathTracer, bReferenceMotionBlur) == 0x000228, "Member 'UMoviePipelineDeferredPass_PathTracer::bReferenceMotionBlur' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MoviePipelineImageSequenceOutputBase
// 0x0020 (0x0068 - 0x0048)
class UMoviePipelineImageSequenceOutputBase : public UMoviePipelineOutputBase
{
public:
	uint8                                         Pad_48[0x20];                                      // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImageSequenceOutputBase">();
	}
	static class UMoviePipelineImageSequenceOutputBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImageSequenceOutputBase>();
	}
};
static_assert(alignof(UMoviePipelineImageSequenceOutputBase) == 0x000008, "Wrong alignment on UMoviePipelineImageSequenceOutputBase");
static_assert(sizeof(UMoviePipelineImageSequenceOutputBase) == 0x000068, "Wrong size on UMoviePipelineImageSequenceOutputBase");

// Class MovieRenderPipelineRenderPasses.MoviePipelineImageSequenceOutput_EXR
// 0x0008 (0x0070 - 0x0068)
class UMoviePipelineImageSequenceOutput_EXR final : public UMoviePipelineImageSequenceOutputBase
{
public:
	EEXRCompressionFormat                         Compression;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultilayer;                                       // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImageSequenceOutput_EXR">();
	}
	static class UMoviePipelineImageSequenceOutput_EXR* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImageSequenceOutput_EXR>();
	}
};
static_assert(alignof(UMoviePipelineImageSequenceOutput_EXR) == 0x000008, "Wrong alignment on UMoviePipelineImageSequenceOutput_EXR");
static_assert(sizeof(UMoviePipelineImageSequenceOutput_EXR) == 0x000070, "Wrong size on UMoviePipelineImageSequenceOutput_EXR");
static_assert(offsetof(UMoviePipelineImageSequenceOutput_EXR, Compression) == 0x000068, "Member 'UMoviePipelineImageSequenceOutput_EXR::Compression' has a wrong offset!");
static_assert(offsetof(UMoviePipelineImageSequenceOutput_EXR, bMultilayer) == 0x000069, "Member 'UMoviePipelineImageSequenceOutput_EXR::bMultilayer' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MoviePipelineImageSequenceOutput_BMP
// 0x0000 (0x0068 - 0x0068)
class UMoviePipelineImageSequenceOutput_BMP final : public UMoviePipelineImageSequenceOutputBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImageSequenceOutput_BMP">();
	}
	static class UMoviePipelineImageSequenceOutput_BMP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImageSequenceOutput_BMP>();
	}
};
static_assert(alignof(UMoviePipelineImageSequenceOutput_BMP) == 0x000008, "Wrong alignment on UMoviePipelineImageSequenceOutput_BMP");
static_assert(sizeof(UMoviePipelineImageSequenceOutput_BMP) == 0x000068, "Wrong size on UMoviePipelineImageSequenceOutput_BMP");

// Class MovieRenderPipelineRenderPasses.MoviePipelineImageSequenceOutput_PNG
// 0x0008 (0x0070 - 0x0068)
class UMoviePipelineImageSequenceOutput_PNG final : public UMoviePipelineImageSequenceOutputBase
{
public:
	bool                                          bWriteAlpha;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImageSequenceOutput_PNG">();
	}
	static class UMoviePipelineImageSequenceOutput_PNG* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImageSequenceOutput_PNG>();
	}
};
static_assert(alignof(UMoviePipelineImageSequenceOutput_PNG) == 0x000008, "Wrong alignment on UMoviePipelineImageSequenceOutput_PNG");
static_assert(sizeof(UMoviePipelineImageSequenceOutput_PNG) == 0x000070, "Wrong size on UMoviePipelineImageSequenceOutput_PNG");
static_assert(offsetof(UMoviePipelineImageSequenceOutput_PNG, bWriteAlpha) == 0x000068, "Member 'UMoviePipelineImageSequenceOutput_PNG::bWriteAlpha' has a wrong offset!");

// Class MovieRenderPipelineRenderPasses.MoviePipelineImageSequenceOutput_JPG
// 0x0000 (0x0068 - 0x0068)
class UMoviePipelineImageSequenceOutput_JPG final : public UMoviePipelineImageSequenceOutputBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineImageSequenceOutput_JPG">();
	}
	static class UMoviePipelineImageSequenceOutput_JPG* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineImageSequenceOutput_JPG>();
	}
};
static_assert(alignof(UMoviePipelineImageSequenceOutput_JPG) == 0x000008, "Wrong alignment on UMoviePipelineImageSequenceOutput_JPG");
static_assert(sizeof(UMoviePipelineImageSequenceOutput_JPG) == 0x000068, "Wrong size on UMoviePipelineImageSequenceOutput_JPG");

// Class MovieRenderPipelineRenderPasses.MoviePipelineWaveOutput
// 0x0070 (0x00B8 - 0x0048)
class UMoviePipelineWaveOutput final : public UMoviePipelineOutputBase
{
public:
	class FString                                 FileNameFormatOverride;                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x60];                                      // 0x0058(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineWaveOutput">();
	}
	static class UMoviePipelineWaveOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineWaveOutput>();
	}
};
static_assert(alignof(UMoviePipelineWaveOutput) == 0x000008, "Wrong alignment on UMoviePipelineWaveOutput");
static_assert(sizeof(UMoviePipelineWaveOutput) == 0x0000B8, "Wrong size on UMoviePipelineWaveOutput");
static_assert(offsetof(UMoviePipelineWaveOutput, FileNameFormatOverride) == 0x000048, "Member 'UMoviePipelineWaveOutput::FileNameFormatOverride' has a wrong offset!");

}


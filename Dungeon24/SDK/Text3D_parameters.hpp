#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Text3D

#include "Basic.hpp"

#include "Text3D_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Text3D.Text3DCharacterTransform.SetLocationDistance
// 0x0018 (0x0018 - 0x0000)
struct Text3DCharacterTransform_SetLocationDistance final
{
public:
	struct FVector                                Distance;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetLocationDistance) == 0x000008, "Wrong alignment on Text3DCharacterTransform_SetLocationDistance");
static_assert(sizeof(Text3DCharacterTransform_SetLocationDistance) == 0x000018, "Wrong size on Text3DCharacterTransform_SetLocationDistance");
static_assert(offsetof(Text3DCharacterTransform_SetLocationDistance, Distance) == 0x000000, "Member 'Text3DCharacterTransform_SetLocationDistance::Distance' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetLocationEnabled
// 0x0001 (0x0001 - 0x0000)
struct Text3DCharacterTransform_SetLocationEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetLocationEnabled) == 0x000001, "Wrong alignment on Text3DCharacterTransform_SetLocationEnabled");
static_assert(sizeof(Text3DCharacterTransform_SetLocationEnabled) == 0x000001, "Wrong size on Text3DCharacterTransform_SetLocationEnabled");
static_assert(offsetof(Text3DCharacterTransform_SetLocationEnabled, bEnabled) == 0x000000, "Member 'Text3DCharacterTransform_SetLocationEnabled::bEnabled' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetLocationOrder
// 0x0001 (0x0001 - 0x0000)
struct Text3DCharacterTransform_SetLocationOrder final
{
public:
	EText3DCharacterEffectOrder                   Order;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetLocationOrder) == 0x000001, "Wrong alignment on Text3DCharacterTransform_SetLocationOrder");
static_assert(sizeof(Text3DCharacterTransform_SetLocationOrder) == 0x000001, "Wrong size on Text3DCharacterTransform_SetLocationOrder");
static_assert(offsetof(Text3DCharacterTransform_SetLocationOrder, Order) == 0x000000, "Member 'Text3DCharacterTransform_SetLocationOrder::Order' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetLocationProgress
// 0x0004 (0x0004 - 0x0000)
struct Text3DCharacterTransform_SetLocationProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetLocationProgress) == 0x000004, "Wrong alignment on Text3DCharacterTransform_SetLocationProgress");
static_assert(sizeof(Text3DCharacterTransform_SetLocationProgress) == 0x000004, "Wrong size on Text3DCharacterTransform_SetLocationProgress");
static_assert(offsetof(Text3DCharacterTransform_SetLocationProgress, Progress) == 0x000000, "Member 'Text3DCharacterTransform_SetLocationProgress::Progress' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetLocationRange
// 0x0004 (0x0004 - 0x0000)
struct Text3DCharacterTransform_SetLocationRange final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetLocationRange) == 0x000004, "Wrong alignment on Text3DCharacterTransform_SetLocationRange");
static_assert(sizeof(Text3DCharacterTransform_SetLocationRange) == 0x000004, "Wrong size on Text3DCharacterTransform_SetLocationRange");
static_assert(offsetof(Text3DCharacterTransform_SetLocationRange, Range) == 0x000000, "Member 'Text3DCharacterTransform_SetLocationRange::Range' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetRotateBegin
// 0x0018 (0x0018 - 0x0000)
struct Text3DCharacterTransform_SetRotateBegin final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetRotateBegin) == 0x000008, "Wrong alignment on Text3DCharacterTransform_SetRotateBegin");
static_assert(sizeof(Text3DCharacterTransform_SetRotateBegin) == 0x000018, "Wrong size on Text3DCharacterTransform_SetRotateBegin");
static_assert(offsetof(Text3DCharacterTransform_SetRotateBegin, Value) == 0x000000, "Member 'Text3DCharacterTransform_SetRotateBegin::Value' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetRotateEnabled
// 0x0001 (0x0001 - 0x0000)
struct Text3DCharacterTransform_SetRotateEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetRotateEnabled) == 0x000001, "Wrong alignment on Text3DCharacterTransform_SetRotateEnabled");
static_assert(sizeof(Text3DCharacterTransform_SetRotateEnabled) == 0x000001, "Wrong size on Text3DCharacterTransform_SetRotateEnabled");
static_assert(offsetof(Text3DCharacterTransform_SetRotateEnabled, bEnabled) == 0x000000, "Member 'Text3DCharacterTransform_SetRotateEnabled::bEnabled' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetRotateEnd
// 0x0018 (0x0018 - 0x0000)
struct Text3DCharacterTransform_SetRotateEnd final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetRotateEnd) == 0x000008, "Wrong alignment on Text3DCharacterTransform_SetRotateEnd");
static_assert(sizeof(Text3DCharacterTransform_SetRotateEnd) == 0x000018, "Wrong size on Text3DCharacterTransform_SetRotateEnd");
static_assert(offsetof(Text3DCharacterTransform_SetRotateEnd, Value) == 0x000000, "Member 'Text3DCharacterTransform_SetRotateEnd::Value' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetRotateOrder
// 0x0001 (0x0001 - 0x0000)
struct Text3DCharacterTransform_SetRotateOrder final
{
public:
	EText3DCharacterEffectOrder                   Order;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetRotateOrder) == 0x000001, "Wrong alignment on Text3DCharacterTransform_SetRotateOrder");
static_assert(sizeof(Text3DCharacterTransform_SetRotateOrder) == 0x000001, "Wrong size on Text3DCharacterTransform_SetRotateOrder");
static_assert(offsetof(Text3DCharacterTransform_SetRotateOrder, Order) == 0x000000, "Member 'Text3DCharacterTransform_SetRotateOrder::Order' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetRotateProgress
// 0x0004 (0x0004 - 0x0000)
struct Text3DCharacterTransform_SetRotateProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetRotateProgress) == 0x000004, "Wrong alignment on Text3DCharacterTransform_SetRotateProgress");
static_assert(sizeof(Text3DCharacterTransform_SetRotateProgress) == 0x000004, "Wrong size on Text3DCharacterTransform_SetRotateProgress");
static_assert(offsetof(Text3DCharacterTransform_SetRotateProgress, Progress) == 0x000000, "Member 'Text3DCharacterTransform_SetRotateProgress::Progress' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetRotateRange
// 0x0004 (0x0004 - 0x0000)
struct Text3DCharacterTransform_SetRotateRange final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetRotateRange) == 0x000004, "Wrong alignment on Text3DCharacterTransform_SetRotateRange");
static_assert(sizeof(Text3DCharacterTransform_SetRotateRange) == 0x000004, "Wrong size on Text3DCharacterTransform_SetRotateRange");
static_assert(offsetof(Text3DCharacterTransform_SetRotateRange, Range) == 0x000000, "Member 'Text3DCharacterTransform_SetRotateRange::Range' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetScaleBegin
// 0x0018 (0x0018 - 0x0000)
struct Text3DCharacterTransform_SetScaleBegin final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetScaleBegin) == 0x000008, "Wrong alignment on Text3DCharacterTransform_SetScaleBegin");
static_assert(sizeof(Text3DCharacterTransform_SetScaleBegin) == 0x000018, "Wrong size on Text3DCharacterTransform_SetScaleBegin");
static_assert(offsetof(Text3DCharacterTransform_SetScaleBegin, Value) == 0x000000, "Member 'Text3DCharacterTransform_SetScaleBegin::Value' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetScaleEnabled
// 0x0001 (0x0001 - 0x0000)
struct Text3DCharacterTransform_SetScaleEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetScaleEnabled) == 0x000001, "Wrong alignment on Text3DCharacterTransform_SetScaleEnabled");
static_assert(sizeof(Text3DCharacterTransform_SetScaleEnabled) == 0x000001, "Wrong size on Text3DCharacterTransform_SetScaleEnabled");
static_assert(offsetof(Text3DCharacterTransform_SetScaleEnabled, bEnabled) == 0x000000, "Member 'Text3DCharacterTransform_SetScaleEnabled::bEnabled' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetScaleEnd
// 0x0018 (0x0018 - 0x0000)
struct Text3DCharacterTransform_SetScaleEnd final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetScaleEnd) == 0x000008, "Wrong alignment on Text3DCharacterTransform_SetScaleEnd");
static_assert(sizeof(Text3DCharacterTransform_SetScaleEnd) == 0x000018, "Wrong size on Text3DCharacterTransform_SetScaleEnd");
static_assert(offsetof(Text3DCharacterTransform_SetScaleEnd, Value) == 0x000000, "Member 'Text3DCharacterTransform_SetScaleEnd::Value' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetScaleOrder
// 0x0001 (0x0001 - 0x0000)
struct Text3DCharacterTransform_SetScaleOrder final
{
public:
	EText3DCharacterEffectOrder                   Order;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetScaleOrder) == 0x000001, "Wrong alignment on Text3DCharacterTransform_SetScaleOrder");
static_assert(sizeof(Text3DCharacterTransform_SetScaleOrder) == 0x000001, "Wrong size on Text3DCharacterTransform_SetScaleOrder");
static_assert(offsetof(Text3DCharacterTransform_SetScaleOrder, Order) == 0x000000, "Member 'Text3DCharacterTransform_SetScaleOrder::Order' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetScaleProgress
// 0x0004 (0x0004 - 0x0000)
struct Text3DCharacterTransform_SetScaleProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetScaleProgress) == 0x000004, "Wrong alignment on Text3DCharacterTransform_SetScaleProgress");
static_assert(sizeof(Text3DCharacterTransform_SetScaleProgress) == 0x000004, "Wrong size on Text3DCharacterTransform_SetScaleProgress");
static_assert(offsetof(Text3DCharacterTransform_SetScaleProgress, Progress) == 0x000000, "Member 'Text3DCharacterTransform_SetScaleProgress::Progress' has a wrong offset!");

// Function Text3D.Text3DCharacterTransform.SetScaleRange
// 0x0004 (0x0004 - 0x0000)
struct Text3DCharacterTransform_SetScaleRange final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DCharacterTransform_SetScaleRange) == 0x000004, "Wrong alignment on Text3DCharacterTransform_SetScaleRange");
static_assert(sizeof(Text3DCharacterTransform_SetScaleRange) == 0x000004, "Wrong size on Text3DCharacterTransform_SetScaleRange");
static_assert(offsetof(Text3DCharacterTransform_SetScaleRange, Range) == 0x000000, "Member 'Text3DCharacterTransform_SetScaleRange::Range' has a wrong offset!");

// Function Text3D.Text3DComponent.GetBounds
// 0x0030 (0x0030 - 0x0000)
struct Text3DComponent_GetBounds final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_GetBounds) == 0x000008, "Wrong alignment on Text3DComponent_GetBounds");
static_assert(sizeof(Text3DComponent_GetBounds) == 0x000030, "Wrong size on Text3DComponent_GetBounds");
static_assert(offsetof(Text3DComponent_GetBounds, Origin) == 0x000000, "Member 'Text3DComponent_GetBounds::Origin' has a wrong offset!");
static_assert(offsetof(Text3DComponent_GetBounds, BoxExtent) == 0x000018, "Member 'Text3DComponent_GetBounds::BoxExtent' has a wrong offset!");

// Function Text3D.Text3DComponent.GetGlyphCount
// 0x0004 (0x0004 - 0x0000)
struct Text3DComponent_GetGlyphCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_GetGlyphCount) == 0x000004, "Wrong alignment on Text3DComponent_GetGlyphCount");
static_assert(sizeof(Text3DComponent_GetGlyphCount) == 0x000004, "Wrong size on Text3DComponent_GetGlyphCount");
static_assert(offsetof(Text3DComponent_GetGlyphCount, ReturnValue) == 0x000000, "Member 'Text3DComponent_GetGlyphCount::ReturnValue' has a wrong offset!");

// Function Text3D.Text3DComponent.GetGlyphKerningComponent
// 0x0010 (0x0010 - 0x0000)
struct Text3DComponent_GetGlyphKerningComponent final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_GetGlyphKerningComponent) == 0x000008, "Wrong alignment on Text3DComponent_GetGlyphKerningComponent");
static_assert(sizeof(Text3DComponent_GetGlyphKerningComponent) == 0x000010, "Wrong size on Text3DComponent_GetGlyphKerningComponent");
static_assert(offsetof(Text3DComponent_GetGlyphKerningComponent, Param_Index) == 0x000000, "Member 'Text3DComponent_GetGlyphKerningComponent::Param_Index' has a wrong offset!");
static_assert(offsetof(Text3DComponent_GetGlyphKerningComponent, ReturnValue) == 0x000008, "Member 'Text3DComponent_GetGlyphKerningComponent::ReturnValue' has a wrong offset!");

// Function Text3D.Text3DComponent.GetGlyphKerningComponents
// 0x0010 (0x0010 - 0x0000)
struct Text3DComponent_GetGlyphKerningComponents final
{
public:
	TArray<class USceneComponent*>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_GetGlyphKerningComponents) == 0x000008, "Wrong alignment on Text3DComponent_GetGlyphKerningComponents");
static_assert(sizeof(Text3DComponent_GetGlyphKerningComponents) == 0x000010, "Wrong size on Text3DComponent_GetGlyphKerningComponents");
static_assert(offsetof(Text3DComponent_GetGlyphKerningComponents, ReturnValue) == 0x000000, "Member 'Text3DComponent_GetGlyphKerningComponents::ReturnValue' has a wrong offset!");

// Function Text3D.Text3DComponent.GetGlyphMeshComponent
// 0x0010 (0x0010 - 0x0000)
struct Text3DComponent_GetGlyphMeshComponent final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_GetGlyphMeshComponent) == 0x000008, "Wrong alignment on Text3DComponent_GetGlyphMeshComponent");
static_assert(sizeof(Text3DComponent_GetGlyphMeshComponent) == 0x000010, "Wrong size on Text3DComponent_GetGlyphMeshComponent");
static_assert(offsetof(Text3DComponent_GetGlyphMeshComponent, Param_Index) == 0x000000, "Member 'Text3DComponent_GetGlyphMeshComponent::Param_Index' has a wrong offset!");
static_assert(offsetof(Text3DComponent_GetGlyphMeshComponent, ReturnValue) == 0x000008, "Member 'Text3DComponent_GetGlyphMeshComponent::ReturnValue' has a wrong offset!");

// Function Text3D.Text3DComponent.GetGlyphMeshComponents
// 0x0010 (0x0010 - 0x0000)
struct Text3DComponent_GetGlyphMeshComponents final
{
public:
	TArray<class UStaticMeshComponent*>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_GetGlyphMeshComponents) == 0x000008, "Wrong alignment on Text3DComponent_GetGlyphMeshComponents");
static_assert(sizeof(Text3DComponent_GetGlyphMeshComponents) == 0x000010, "Wrong size on Text3DComponent_GetGlyphMeshComponents");
static_assert(offsetof(Text3DComponent_GetGlyphMeshComponents, ReturnValue) == 0x000000, "Member 'Text3DComponent_GetGlyphMeshComponents::ReturnValue' has a wrong offset!");

// Function Text3D.Text3DComponent.GetTextScale
// 0x0018 (0x0018 - 0x0000)
struct Text3DComponent_GetTextScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_GetTextScale) == 0x000008, "Wrong alignment on Text3DComponent_GetTextScale");
static_assert(sizeof(Text3DComponent_GetTextScale) == 0x000018, "Wrong size on Text3DComponent_GetTextScale");
static_assert(offsetof(Text3DComponent_GetTextScale, ReturnValue) == 0x000000, "Member 'Text3DComponent_GetTextScale::ReturnValue' has a wrong offset!");

// Function Text3D.Text3DComponent.SetBackMaterial
// 0x0008 (0x0008 - 0x0000)
struct Text3DComponent_SetBackMaterial final
{
public:
	class UMaterialInterface*                     Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetBackMaterial) == 0x000008, "Wrong alignment on Text3DComponent_SetBackMaterial");
static_assert(sizeof(Text3DComponent_SetBackMaterial) == 0x000008, "Wrong size on Text3DComponent_SetBackMaterial");
static_assert(offsetof(Text3DComponent_SetBackMaterial, Value) == 0x000000, "Member 'Text3DComponent_SetBackMaterial::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetBevel
// 0x0004 (0x0004 - 0x0000)
struct Text3DComponent_SetBevel final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetBevel) == 0x000004, "Wrong alignment on Text3DComponent_SetBevel");
static_assert(sizeof(Text3DComponent_SetBevel) == 0x000004, "Wrong size on Text3DComponent_SetBevel");
static_assert(offsetof(Text3DComponent_SetBevel, Value) == 0x000000, "Member 'Text3DComponent_SetBevel::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetBevelMaterial
// 0x0008 (0x0008 - 0x0000)
struct Text3DComponent_SetBevelMaterial final
{
public:
	class UMaterialInterface*                     Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetBevelMaterial) == 0x000008, "Wrong alignment on Text3DComponent_SetBevelMaterial");
static_assert(sizeof(Text3DComponent_SetBevelMaterial) == 0x000008, "Wrong size on Text3DComponent_SetBevelMaterial");
static_assert(offsetof(Text3DComponent_SetBevelMaterial, Value) == 0x000000, "Member 'Text3DComponent_SetBevelMaterial::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetBevelSegments
// 0x0004 (0x0004 - 0x0000)
struct Text3DComponent_SetBevelSegments final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetBevelSegments) == 0x000004, "Wrong alignment on Text3DComponent_SetBevelSegments");
static_assert(sizeof(Text3DComponent_SetBevelSegments) == 0x000004, "Wrong size on Text3DComponent_SetBevelSegments");
static_assert(offsetof(Text3DComponent_SetBevelSegments, Value) == 0x000000, "Member 'Text3DComponent_SetBevelSegments::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetBevelType
// 0x0001 (0x0001 - 0x0000)
struct Text3DComponent_SetBevelType final
{
public:
	EText3DBevelType                              Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetBevelType) == 0x000001, "Wrong alignment on Text3DComponent_SetBevelType");
static_assert(sizeof(Text3DComponent_SetBevelType) == 0x000001, "Wrong size on Text3DComponent_SetBevelType");
static_assert(offsetof(Text3DComponent_SetBevelType, Value) == 0x000000, "Member 'Text3DComponent_SetBevelType::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetCastShadow
// 0x0001 (0x0001 - 0x0000)
struct Text3DComponent_SetCastShadow final
{
public:
	bool                                          NewCastShadow;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetCastShadow) == 0x000001, "Wrong alignment on Text3DComponent_SetCastShadow");
static_assert(sizeof(Text3DComponent_SetCastShadow) == 0x000001, "Wrong size on Text3DComponent_SetCastShadow");
static_assert(offsetof(Text3DComponent_SetCastShadow, NewCastShadow) == 0x000000, "Member 'Text3DComponent_SetCastShadow::NewCastShadow' has a wrong offset!");

// Function Text3D.Text3DComponent.SetExtrude
// 0x0004 (0x0004 - 0x0000)
struct Text3DComponent_SetExtrude final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetExtrude) == 0x000004, "Wrong alignment on Text3DComponent_SetExtrude");
static_assert(sizeof(Text3DComponent_SetExtrude) == 0x000004, "Wrong size on Text3DComponent_SetExtrude");
static_assert(offsetof(Text3DComponent_SetExtrude, Value) == 0x000000, "Member 'Text3DComponent_SetExtrude::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetExtrudeMaterial
// 0x0008 (0x0008 - 0x0000)
struct Text3DComponent_SetExtrudeMaterial final
{
public:
	class UMaterialInterface*                     Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetExtrudeMaterial) == 0x000008, "Wrong alignment on Text3DComponent_SetExtrudeMaterial");
static_assert(sizeof(Text3DComponent_SetExtrudeMaterial) == 0x000008, "Wrong size on Text3DComponent_SetExtrudeMaterial");
static_assert(offsetof(Text3DComponent_SetExtrudeMaterial, Value) == 0x000000, "Member 'Text3DComponent_SetExtrudeMaterial::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetFont
// 0x0008 (0x0008 - 0x0000)
struct Text3DComponent_SetFont final
{
public:
	const class UFont*                            InFont;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetFont) == 0x000008, "Wrong alignment on Text3DComponent_SetFont");
static_assert(sizeof(Text3DComponent_SetFont) == 0x000008, "Wrong size on Text3DComponent_SetFont");
static_assert(offsetof(Text3DComponent_SetFont, InFont) == 0x000000, "Member 'Text3DComponent_SetFont::InFont' has a wrong offset!");

// Function Text3D.Text3DComponent.SetFreeze
// 0x0001 (0x0001 - 0x0000)
struct Text3DComponent_SetFreeze final
{
public:
	bool                                          bFreeze;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetFreeze) == 0x000001, "Wrong alignment on Text3DComponent_SetFreeze");
static_assert(sizeof(Text3DComponent_SetFreeze) == 0x000001, "Wrong size on Text3DComponent_SetFreeze");
static_assert(offsetof(Text3DComponent_SetFreeze, bFreeze) == 0x000000, "Member 'Text3DComponent_SetFreeze::bFreeze' has a wrong offset!");

// Function Text3D.Text3DComponent.SetFrontMaterial
// 0x0008 (0x0008 - 0x0000)
struct Text3DComponent_SetFrontMaterial final
{
public:
	class UMaterialInterface*                     Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetFrontMaterial) == 0x000008, "Wrong alignment on Text3DComponent_SetFrontMaterial");
static_assert(sizeof(Text3DComponent_SetFrontMaterial) == 0x000008, "Wrong size on Text3DComponent_SetFrontMaterial");
static_assert(offsetof(Text3DComponent_SetFrontMaterial, Value) == 0x000000, "Member 'Text3DComponent_SetFrontMaterial::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetHasMaxHeight
// 0x0001 (0x0001 - 0x0000)
struct Text3DComponent_SetHasMaxHeight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetHasMaxHeight) == 0x000001, "Wrong alignment on Text3DComponent_SetHasMaxHeight");
static_assert(sizeof(Text3DComponent_SetHasMaxHeight) == 0x000001, "Wrong size on Text3DComponent_SetHasMaxHeight");
static_assert(offsetof(Text3DComponent_SetHasMaxHeight, Value) == 0x000000, "Member 'Text3DComponent_SetHasMaxHeight::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetHasMaxWidth
// 0x0001 (0x0001 - 0x0000)
struct Text3DComponent_SetHasMaxWidth final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetHasMaxWidth) == 0x000001, "Wrong alignment on Text3DComponent_SetHasMaxWidth");
static_assert(sizeof(Text3DComponent_SetHasMaxWidth) == 0x000001, "Wrong size on Text3DComponent_SetHasMaxWidth");
static_assert(offsetof(Text3DComponent_SetHasMaxWidth, Value) == 0x000000, "Member 'Text3DComponent_SetHasMaxWidth::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct Text3DComponent_SetHorizontalAlignment final
{
public:
	EText3DHorizontalTextAlignment                Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetHorizontalAlignment) == 0x000001, "Wrong alignment on Text3DComponent_SetHorizontalAlignment");
static_assert(sizeof(Text3DComponent_SetHorizontalAlignment) == 0x000001, "Wrong size on Text3DComponent_SetHorizontalAlignment");
static_assert(offsetof(Text3DComponent_SetHorizontalAlignment, Value) == 0x000000, "Member 'Text3DComponent_SetHorizontalAlignment::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetKerning
// 0x0004 (0x0004 - 0x0000)
struct Text3DComponent_SetKerning final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetKerning) == 0x000004, "Wrong alignment on Text3DComponent_SetKerning");
static_assert(sizeof(Text3DComponent_SetKerning) == 0x000004, "Wrong size on Text3DComponent_SetKerning");
static_assert(offsetof(Text3DComponent_SetKerning, Value) == 0x000000, "Member 'Text3DComponent_SetKerning::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetLineSpacing
// 0x0004 (0x0004 - 0x0000)
struct Text3DComponent_SetLineSpacing final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetLineSpacing) == 0x000004, "Wrong alignment on Text3DComponent_SetLineSpacing");
static_assert(sizeof(Text3DComponent_SetLineSpacing) == 0x000004, "Wrong size on Text3DComponent_SetLineSpacing");
static_assert(offsetof(Text3DComponent_SetLineSpacing, Value) == 0x000000, "Member 'Text3DComponent_SetLineSpacing::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetMaxHeight
// 0x0004 (0x0004 - 0x0000)
struct Text3DComponent_SetMaxHeight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetMaxHeight) == 0x000004, "Wrong alignment on Text3DComponent_SetMaxHeight");
static_assert(sizeof(Text3DComponent_SetMaxHeight) == 0x000004, "Wrong size on Text3DComponent_SetMaxHeight");
static_assert(offsetof(Text3DComponent_SetMaxHeight, Value) == 0x000000, "Member 'Text3DComponent_SetMaxHeight::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetMaxWidth
// 0x0004 (0x0004 - 0x0000)
struct Text3DComponent_SetMaxWidth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetMaxWidth) == 0x000004, "Wrong alignment on Text3DComponent_SetMaxWidth");
static_assert(sizeof(Text3DComponent_SetMaxWidth) == 0x000004, "Wrong size on Text3DComponent_SetMaxWidth");
static_assert(offsetof(Text3DComponent_SetMaxWidth, Value) == 0x000000, "Member 'Text3DComponent_SetMaxWidth::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetOutline
// 0x0001 (0x0001 - 0x0000)
struct Text3DComponent_SetOutline final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetOutline) == 0x000001, "Wrong alignment on Text3DComponent_SetOutline");
static_assert(sizeof(Text3DComponent_SetOutline) == 0x000001, "Wrong size on Text3DComponent_SetOutline");
static_assert(offsetof(Text3DComponent_SetOutline, bValue) == 0x000000, "Member 'Text3DComponent_SetOutline::bValue' has a wrong offset!");

// Function Text3D.Text3DComponent.SetOutlineExpand
// 0x0004 (0x0004 - 0x0000)
struct Text3DComponent_SetOutlineExpand final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetOutlineExpand) == 0x000004, "Wrong alignment on Text3DComponent_SetOutlineExpand");
static_assert(sizeof(Text3DComponent_SetOutlineExpand) == 0x000004, "Wrong size on Text3DComponent_SetOutlineExpand");
static_assert(offsetof(Text3DComponent_SetOutlineExpand, Value) == 0x000000, "Member 'Text3DComponent_SetOutlineExpand::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetScaleProportionally
// 0x0001 (0x0001 - 0x0000)
struct Text3DComponent_SetScaleProportionally final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetScaleProportionally) == 0x000001, "Wrong alignment on Text3DComponent_SetScaleProportionally");
static_assert(sizeof(Text3DComponent_SetScaleProportionally) == 0x000001, "Wrong size on Text3DComponent_SetScaleProportionally");
static_assert(offsetof(Text3DComponent_SetScaleProportionally, Value) == 0x000000, "Member 'Text3DComponent_SetScaleProportionally::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetText
// 0x0018 (0x0018 - 0x0000)
struct Text3DComponent_SetText final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetText) == 0x000008, "Wrong alignment on Text3DComponent_SetText");
static_assert(sizeof(Text3DComponent_SetText) == 0x000018, "Wrong size on Text3DComponent_SetText");
static_assert(offsetof(Text3DComponent_SetText, Value) == 0x000000, "Member 'Text3DComponent_SetText::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct Text3DComponent_SetVerticalAlignment final
{
public:
	EText3DVerticalTextAlignment                  Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetVerticalAlignment) == 0x000001, "Wrong alignment on Text3DComponent_SetVerticalAlignment");
static_assert(sizeof(Text3DComponent_SetVerticalAlignment) == 0x000001, "Wrong size on Text3DComponent_SetVerticalAlignment");
static_assert(offsetof(Text3DComponent_SetVerticalAlignment, Value) == 0x000000, "Member 'Text3DComponent_SetVerticalAlignment::Value' has a wrong offset!");

// Function Text3D.Text3DComponent.SetWordSpacing
// 0x0004 (0x0004 - 0x0000)
struct Text3DComponent_SetWordSpacing final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Text3DComponent_SetWordSpacing) == 0x000004, "Wrong alignment on Text3DComponent_SetWordSpacing");
static_assert(sizeof(Text3DComponent_SetWordSpacing) == 0x000004, "Wrong size on Text3DComponent_SetWordSpacing");
static_assert(offsetof(Text3DComponent_SetWordSpacing, Value) == 0x000000, "Member 'Text3DComponent_SetWordSpacing::Value' has a wrong offset!");

}


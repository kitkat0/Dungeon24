#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_FindFleePath

#include "Basic.hpp"

#include "BTT_FindFleePath_classes.hpp"
#include "BTT_FindFleePath_parameters.hpp"


namespace SDK
{

// Function BTT_FindFleePath.BTT_FindFleePath_C.ExecuteUbergraph_BTT_FindFleePath
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_FindFleePath_C::ExecuteUbergraph_BTT_FindFleePath(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_FindFleePath_C", "ExecuteUbergraph_BTT_FindFleePath");

	Params::BTT_FindFleePath_C_ExecuteUbergraph_BTT_FindFleePath Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_FindFleePath.BTT_FindFleePath_C.FindNextPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Tgf_Monster_C*                Monster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PrevPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CurrentPoint                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NextPoint                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_FindFleePath_C::FindNextPoint(class ABP_Tgf_Monster_C* Monster, const struct FVector& PrevPoint, const struct FVector& CurrentPoint, struct FVector* NextPoint, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_FindFleePath_C", "FindNextPoint");

	Params::BTT_FindFleePath_C_FindNextPoint Parms{};

	Parms.Monster = Monster;
	Parms.PrevPoint = std::move(PrevPoint);
	Parms.CurrentPoint = std::move(CurrentPoint);

	UObject::ProcessEvent(Func, &Parms);

	if (NextPoint != nullptr)
		*NextPoint = std::move(Parms.NextPoint);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BTT_FindFleePath.BTT_FindFleePath_C.ReceiveExecuteAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTT_FindFleePath_C::ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_FindFleePath_C", "ReceiveExecuteAI");

	Params::BTT_FindFleePath_C_ReceiveExecuteAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}

}


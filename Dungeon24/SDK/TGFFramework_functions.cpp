#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TGFFramework

#include "Basic.hpp"

#include "TGFFramework_classes.hpp"
#include "TGFFramework_parameters.hpp"


namespace SDK
{

// Function TGFFramework.ComboBoxText.AddOption
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Option                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UComboBoxText::AddOption(const class FText& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "AddOption");

	Params::ComboBoxText_AddOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.ComboBoxText.ClearOptions
// (Final, Native, Public, BlueprintCallable)

void UComboBoxText::ClearOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "ClearOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.ComboBoxText.ClearSelection
// (Final, Native, Public, BlueprintCallable)

void UComboBoxText::ClearSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "ClearSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TGFFramework.ComboBoxText.OnOpeningEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UComboBoxText::OnOpeningEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "OnOpeningEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction TGFFramework.ComboBoxText.OnSelectionChangedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FText                             SelectedItem                                           (Parm, NativeAccessSpecifierPublic)
// int32                                   SelectedIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComboBoxText::OnSelectionChangedEvent__DelegateSignature(const class FText& SelectedItem, int32 SelectedIndex, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "OnSelectionChangedEvent__DelegateSignature");

	Params::ComboBoxText_OnSelectionChangedEvent__DelegateSignature Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectedIndex = SelectedIndex;
	Parms.SelectionType = SelectionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TGFFramework.ComboBoxText.RefreshOptions
// (Final, Native, Public, BlueprintCallable)

void UComboBoxText::RefreshOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "RefreshOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.ComboBoxText.RemoveOption
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Option                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UComboBoxText::RemoveOption(const class FText& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "RemoveOption");

	Params::ComboBoxText_RemoveOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.ComboBoxText.SetSelectedIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComboBoxText::SetSelectedIndex(const int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "SetSelectedIndex");

	Params::ComboBoxText_SetSelectedIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.ComboBoxText.SetSelectedOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             Option                                                 (Parm, NativeAccessSpecifierPublic)

void UComboBoxText::SetSelectedOption(const class FText& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "SetSelectedOption");

	Params::ComboBoxText_SetSelectedOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.ComboBoxText.FindOptionIndex
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             Option                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UComboBoxText::FindOptionIndex(const class FText& Option) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "FindOptionIndex");

	Params::ComboBoxText_FindOptionIndex Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.ComboBoxText.GetOptionAtIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UComboBoxText::GetOptionAtIndex(int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "GetOptionAtIndex");

	Params::ComboBoxText_GetOptionAtIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.ComboBoxText.GetOptionCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UComboBoxText::GetOptionCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "GetOptionCount");

	Params::ComboBoxText_GetOptionCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.ComboBoxText.GetSelectedIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UComboBoxText::GetSelectedIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "GetSelectedIndex");

	Params::ComboBoxText_GetSelectedIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.ComboBoxText.GetSelectedOption
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UComboBoxText::GetSelectedOption() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "GetSelectedOption");

	Params::ComboBoxText_GetSelectedOption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.ComboBoxText.IsOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UComboBoxText::IsOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComboBoxText", "IsOpen");

	Params::ComboBoxText_IsOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction TGFFramework.CustomEditableText.OnCustomEditableTextFocusLost__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCustomEditableText::OnCustomEditableTextFocusLost__DelegateSignature(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomEditableText", "OnCustomEditableTextFocusLost__DelegateSignature");

	Params::CustomEditableText_OnCustomEditableTextFocusLost__DelegateSignature Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TGFFramework.CustomEditableText.OnCustomEditableTextFocusReceived__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FGeometry                        MyGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FFocusEvent                      InFocusEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCustomEditableText::OnCustomEditableTextFocusReceived__DelegateSignature(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomEditableText", "OnCustomEditableTextFocusReceived__DelegateSignature");

	Params::CustomEditableText_OnCustomEditableTextFocusReceived__DelegateSignature Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TGFFramework.CustomEditableText.OnKeyDown
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FKeyEvent                        InKeyEvent                                             (Parm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UCustomEditableText::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomEditableText", "OnKeyDown");

	Params::CustomEditableText_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TGFFramework.HorizontalToggleGroup.GetCurIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHorizontalToggleGroup::GetCurIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HorizontalToggleGroup", "GetCurIndex");

	Params::HorizontalToggleGroup_GetCurIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.HorizontalToggleGroup.GetToggleGroup
// (Final, Native, Private)
// Parameters:
// class UToggleGroup*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UToggleGroup* UHorizontalToggleGroup::GetToggleGroup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HorizontalToggleGroup", "GetToggleGroup");

	Params::HorizontalToggleGroup_GetToggleGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.HorizontalToggleGroup.NativeOnToggleChanged
// (Native, Protected)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHorizontalToggleGroup::NativeOnToggleChanged(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HorizontalToggleGroup", "NativeOnToggleChanged");

	Params::HorizontalToggleGroup_NativeOnToggleChanged Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.HorizontalToggleGroup.ResetCurIndex
// (Final, Native, Public, BlueprintCallable)

void UHorizontalToggleGroup::ResetCurIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HorizontalToggleGroup", "ResetCurIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.HorizontalToggleGroup.SetCurIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHorizontalToggleGroup::SetCurIndex(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HorizontalToggleGroup", "SetCurIndex");

	Params::HorizontalToggleGroup_SetCurIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFBaseFunctionLibrary.FileExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTGFBaseFunctionLibrary::FileExists(const class FString& InPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TGFBaseFunctionLibrary", "FileExists");

	Params::TGFBaseFunctionLibrary_FileExists Parms{};

	Parms.InPath = std::move(InPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFBaseFunctionLibrary.ForceGC
// (Final, Native, Static, Public, BlueprintCallable)

void UTGFBaseFunctionLibrary::ForceGC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TGFBaseFunctionLibrary", "ForceGC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFBaseFunctionLibrary.GetClassBySoftPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SoftPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UTGFBaseFunctionLibrary::GetClassBySoftPath(const class FString& SoftPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TGFBaseFunctionLibrary", "GetClassBySoftPath");

	Params::TGFBaseFunctionLibrary_GetClassBySoftPath Parms{};

	Parms.SoftPath = std::move(SoftPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFBaseFunctionLibrary.GetDataTableRowNames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       DataTable                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UTGFBaseFunctionLibrary::GetDataTableRowNames(class UDataTable* DataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TGFBaseFunctionLibrary", "GetDataTableRowNames");

	Params::TGFBaseFunctionLibrary_GetDataTableRowNames Parms{};

	Parms.DataTable = DataTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFBaseFunctionLibrary.GetGameEngineSubsystem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UEngineSubsystem>     SubsystemClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEngineSubsystem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEngineSubsystem* UTGFBaseFunctionLibrary::GetGameEngineSubsystem(TSubclassOf<class UEngineSubsystem> SubsystemClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TGFBaseFunctionLibrary", "GetGameEngineSubsystem");

	Params::TGFBaseFunctionLibrary_GetGameEngineSubsystem Parms{};

	Parms.SubsystemClass = SubsystemClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFBaseFunctionLibrary.GetGameInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameInstance* UTGFBaseFunctionLibrary::GetGameInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TGFBaseFunctionLibrary", "GetGameInstance");

	Params::TGFBaseFunctionLibrary_GetGameInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFBaseFunctionLibrary.GetGameInstanceSubsystem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameInstanceSubsystem>SubsystemClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameInstanceSubsystem*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameInstanceSubsystem* UTGFBaseFunctionLibrary::GetGameInstanceSubsystem(TSubclassOf<class UGameInstanceSubsystem> SubsystemClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TGFBaseFunctionLibrary", "GetGameInstanceSubsystem");

	Params::TGFBaseFunctionLibrary_GetGameInstanceSubsystem Parms{};

	Parms.SubsystemClass = SubsystemClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFBaseFunctionLibrary.GetIsEditor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTGFBaseFunctionLibrary::GetIsEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TGFBaseFunctionLibrary", "GetIsEditor");

	Params::TGFBaseFunctionLibrary_GetIsEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFBaseFunctionLibrary.ProjectContentDir
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTGFBaseFunctionLibrary::ProjectContentDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TGFBaseFunctionLibrary", "ProjectContentDir");

	Params::TGFBaseFunctionLibrary_ProjectContentDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFBaseFunctionLibrary.ProjectDir
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTGFBaseFunctionLibrary::ProjectDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TGFBaseFunctionLibrary", "ProjectDir");

	Params::TGFBaseFunctionLibrary_ProjectDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFEventManager.GetEventHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTGFEventHandler*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTGFEventHandler* UTGFEventManager::GetEventHandler(const class FString& EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFEventManager", "GetEventHandler");

	Params::TGFEventManager_GetEventHandler Parms{};

	Parms.EventName = std::move(EventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFSceneFunctionLibrary.ShowWorldActorByTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bIsShow                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTGFSceneFunctionLibrary::ShowWorldActorByTag(bool bIsShow, const class FName& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TGFSceneFunctionLibrary", "ShowWorldActorByTag");

	Params::TGFSceneFunctionLibrary_ShowWorldActorByTag Parms{};

	Parms.bIsShow = bIsShow;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.UserWidgetBase.LoadComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          Param_Class                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          Parent                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UUserWidgetBase::LoadComponent(TSubclassOf<class UUserWidget> Param_Class, class UWidget* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserWidgetBase", "LoadComponent");

	Params::UserWidgetBase_LoadComponent Parms{};

	Parms.Param_Class = Param_Class;
	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.UserWidgetBase.LoadComponentBySoftPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SoftPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          Parent                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UUserWidgetBase::LoadComponentBySoftPath(const class FString& SoftPath, class UWidget* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserWidgetBase", "LoadComponentBySoftPath");

	Params::UserWidgetBase_LoadComponentBySoftPath Parms{};

	Parms.SoftPath = std::move(SoftPath);
	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.UserWidgetBase.SetLocText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TableId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUserWidgetBase::SetLocText(class UWidget* Widget, const class FName TableId, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserWidgetBase", "SetLocText");

	Params::UserWidgetBase_SetLocText Parms{};

	Parms.Widget = Widget;
	Parms.TableId = TableId;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.UserWidgetPanel.OnUserKeyDown
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (Parm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UUserWidgetPanel::OnUserKeyDown(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserWidgetPanel", "OnUserKeyDown");

	Params::UserWidgetPanel_OnUserKeyDown Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TGFFramework.UserWidgetPanel.OnUserKeyUp
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (Parm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UUserWidgetPanel::OnUserKeyUp(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserWidgetPanel", "OnUserKeyUp");

	Params::UserWidgetPanel_OnUserKeyUp Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TGFFramework.UserWidgetPanel.OnUserMouseButtonDown
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (Parm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UUserWidgetPanel::OnUserMouseButtonDown(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserWidgetPanel", "OnUserMouseButtonDown");

	Params::UserWidgetPanel_OnUserMouseButtonDown Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TGFFramework.UserWidgetPanel.OnUserMouseButtonUp
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (Parm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UUserWidgetPanel::OnUserMouseButtonUp(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserWidgetPanel", "OnUserMouseButtonUp");

	Params::UserWidgetPanel_OnUserMouseButtonUp Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFWindow.Close
// (Final, Native, Public, BlueprintCallable)

void UTGFWindow::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindow", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFWindow.GetEventHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTGFEventHandler*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTGFEventHandler* UTGFWindow::GetEventHandler(const class FString& EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindow", "GetEventHandler");

	Params::TGFWindow_GetEventHandler Parms{};

	Parms.EventName = std::move(EventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFWindow.GetWindowManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTGFWindowManager*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTGFWindowManager* UTGFWindow::GetWindowManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindow", "GetWindowManager");

	Params::TGFWindow_GetWindowManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFWindow.HandleDisplayMonitorChanged
// (Event, Public, BlueprintEvent)

void UTGFWindow::HandleDisplayMonitorChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindow", "HandleDisplayMonitorChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TGFFramework.TGFWindow.HandleVideoSettingModifiedResult
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// uint8                                   Type                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ResultValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccessful                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTGFWindow::HandleVideoSettingModifiedResult(const uint8& Type, const int32& ResultValue, bool bSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindow", "HandleVideoSettingModifiedResult");

	Params::TGFWindow_HandleVideoSettingModifiedResult Parms{};

	Parms.Type = Type;
	Parms.ResultValue = ResultValue;
	Parms.bSuccessful = bSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TGFFramework.TGFWindow.ReceiveOnClose
// (Event, Public, BlueprintEvent)

void UTGFWindow::ReceiveOnClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindow", "ReceiveOnClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TGFFramework.TGFWindow.ReceiveOnHallStateChanged
// (Event, Public, BlueprintEvent)

void UTGFWindow::ReceiveOnHallStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindow", "ReceiveOnHallStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TGFFramework.TGFWindow.ReceiveOnOpen
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTGFWindowArgs*                   Args                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTGFWindow::ReceiveOnOpen(class UTGFWindowArgs* Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindow", "ReceiveOnOpen");

	Params::TGFWindow_ReceiveOnOpen Parms{};

	Parms.Args = Args;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TGFFramework.TGFWindow.ReceiveOnStreamingLevelReady
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTGFLvStreamingNotifyArgs*        Args                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTGFWindow::ReceiveOnStreamingLevelReady(class UTGFLvStreamingNotifyArgs* Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindow", "ReceiveOnStreamingLevelReady");

	Params::TGFWindow_ReceiveOnStreamingLevelReady Parms{};

	Parms.Args = Args;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TGFFramework.TGFWindow.ReceiveOnToggleFullScreen
// (Event, Public, BlueprintEvent)

void UTGFWindow::ReceiveOnToggleFullScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindow", "ReceiveOnToggleFullScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TGFFramework.TGFWindow.SetOpenFromWindow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      FromWindow                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTGFWindow::SetOpenFromWindow(class UUserWidget* FromWindow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindow", "SetOpenFromWindow");

	Params::TGFWindow_SetOpenFromWindow Parms{};

	Parms.FromWindow = FromWindow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFWindowManager.BindToggleFullScreenDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTGFWindow>        Window                                                 (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTGFWindowManager::BindToggleFullScreenDelegate(TSoftObjectPtr<class UTGFWindow> Window)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "BindToggleFullScreenDelegate");

	Params::TGFWindowManager_BindToggleFullScreenDelegate Parms{};

	Parms.Window = Window;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFWindowManager.CleanWindows
// (Final, Native, Public, BlueprintCallable)

void UTGFWindowManager::CleanWindows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "CleanWindows");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFWindowManager.CleanWindowWithout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InClassName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTGFWindowManager::CleanWindowWithout(const class FString& InClassName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "CleanWindowWithout");

	Params::TGFWindowManager_CleanWindowWithout Parms{};

	Parms.InClassName = std::move(InClassName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFWindowManager.CloseWindow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      WindowPtr                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTGFWindowManager::CloseWindow(class UUserWidget* WindowPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "CloseWindow");

	Params::TGFWindowManager_CloseWindow Parms{};

	Parms.WindowPtr = WindowPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFWindowManager.CloseWindowBySoftPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SoftPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTGFWindowManager::CloseWindowBySoftPath(const class FString& SoftPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "CloseWindowBySoftPath");

	Params::TGFWindowManager_CloseWindowBySoftPath Parms{};

	Parms.SoftPath = std::move(SoftPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFWindowManager.GetWindowBySoftPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SoftPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTGFWindow*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTGFWindow* UTGFWindowManager::GetWindowBySoftPath(const class FString& SoftPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "GetWindowBySoftPath");

	Params::TGFWindowManager_GetWindowBySoftPath Parms{};

	Parms.SoftPath = std::move(SoftPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFWindowManager.IsUiCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTGFWindowManager::IsUiCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "IsUiCamera");

	Params::TGFWindowManager_IsUiCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFWindowManager.OnHallStateChanged
// (Final, Native, Public)

void UTGFWindowManager::OnHallStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "OnHallStateChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFWindowManager.OnUserKeyDownEvent
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTGFWindowManager::OnUserKeyDownEvent(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "OnUserKeyDownEvent");

	Params::TGFWindowManager_OnUserKeyDownEvent Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFWindowManager.OnUserKeyUpEvent
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTGFWindowManager::OnUserKeyUpEvent(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "OnUserKeyUpEvent");

	Params::TGFWindowManager_OnUserKeyUpEvent Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFWindowManager.OnUserMouseButtonDownEvent
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTGFWindowManager::OnUserMouseButtonDownEvent(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "OnUserMouseButtonDownEvent");

	Params::TGFWindowManager_OnUserMouseButtonDownEvent Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFWindowManager.OnUserMouseButtonUpEvent
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTGFWindowManager::OnUserMouseButtonUpEvent(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "OnUserMouseButtonUpEvent");

	Params::TGFWindowManager_OnUserMouseButtonUpEvent Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFWindowManager.OpenWindow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             WindowSoftClass                                        (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTGFWindowArgs*                   Args                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUnique                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTGFWindow*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTGFWindow* UTGFWindowManager::OpenWindow(TSoftClassPtr<class UClass> WindowSoftClass, class UTGFWindowArgs* Args, bool bUnique)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "OpenWindow");

	Params::TGFWindowManager_OpenWindow Parms{};

	Parms.WindowSoftClass = WindowSoftClass;
	Parms.Args = Args;
	Parms.bUnique = bUnique;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFWindowManager.OpenWindowBySoftPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SoftPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTGFWindowArgs*                   Args                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUnique                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTGFWindow*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTGFWindow* UTGFWindowManager::OpenWindowBySoftPath(const class FString& SoftPath, class UTGFWindowArgs* Args, bool bUnique)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "OpenWindowBySoftPath");

	Params::TGFWindowManager_OpenWindowBySoftPath Parms{};

	Parms.SoftPath = std::move(SoftPath);
	Parms.Args = Args;
	Parms.bUnique = bUnique;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.TGFWindowManager.ToggleCameraRegistration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRegister                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTGFWindowManager::ToggleCameraRegistration(bool bRegister)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "ToggleCameraRegistration");

	Params::TGFWindowManager_ToggleCameraRegistration Parms{};

	Parms.bRegister = bRegister;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.TGFWindowManager.UnBindToggleFullScreenDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTGFWindow>        Window                                                 (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTGFWindowManager::UnBindToggleFullScreenDelegate(TSoftObjectPtr<class UTGFWindow> Window)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TGFWindowManager", "UnBindToggleFullScreenDelegate");

	Params::TGFWindowManager_UnBindToggleFullScreenDelegate Parms{};

	Parms.Window = Window;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.ToggleData.OnCheckBoxChanged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsChecked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UToggleData::OnCheckBoxChanged(bool bIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleData", "OnCheckBoxChanged");

	Params::ToggleData_OnCheckBoxChanged Parms{};

	Parms.bIsChecked = bIsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.UserWidgetBlueprintLibrary.CreateUserWidgetByPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UUserWidgetBlueprintLibrary::CreateUserWidgetByPath(const class FString& Path, class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UserWidgetBlueprintLibrary", "CreateUserWidgetByPath");

	Params::UserWidgetBlueprintLibrary_CreateUserWidgetByPath Parms{};

	Parms.Path = std::move(Path);
	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.UserWidgetBlueprintLibrary.CreateUserWidgetBySoftPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SoftPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UUserWidgetBlueprintLibrary::CreateUserWidgetBySoftPath(const class FString& SoftPath, class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UserWidgetBlueprintLibrary", "CreateUserWidgetBySoftPath");

	Params::UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath Parms{};

	Parms.SoftPath = std::move(SoftPath);
	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.UserWidgetBlueprintLibrary.FindUserWidgetBySoftPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SoftPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOpened                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UUserWidgetBlueprintLibrary::FindUserWidgetBySoftPath(const class FString& SoftPath, bool bOpened, class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UserWidgetBlueprintLibrary", "FindUserWidgetBySoftPath");

	Params::UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath Parms{};

	Parms.SoftPath = std::move(SoftPath);
	Parms.bOpened = bOpened;
	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.UserWidgetBlueprintLibrary.OpenUserWidgetBySoftPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SoftPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUnique                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UUserWidgetBlueprintLibrary::OpenUserWidgetBySoftPath(const class FString& SoftPath, bool bUnique)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UserWidgetBlueprintLibrary", "OpenUserWidgetBySoftPath");

	Params::UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath Parms{};

	Parms.SoftPath = std::move(SoftPath);
	Parms.bUnique = bUnique;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TGFFramework.ImageCache.OnDownloadImageSuccess
// (Final, Native, Public)
// Parameters:
// class UTexture2DDynamic*                InTexture                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImageCache::OnDownloadImageSuccess(class UTexture2DDynamic* InTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImageCache", "OnDownloadImageSuccess");

	Params::ImageCache_OnDownloadImageSuccess Parms{};

	Parms.InTexture = InTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TGFFramework.ImageCache.GetIsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UImageCache::GetIsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImageCache", "GetIsValid");

	Params::ImageCache_GetIsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}


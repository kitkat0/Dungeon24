#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ExtractDevice_Red

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_ExtractDevice_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ExtractDevice_Red.BP_ExtractDevice_Red_C
// 0x0058 (0x0400 - 0x03A8)
class ABP_ExtractDevice_Red_C : public ABP_ExtractDevice_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ExtractDevice_Red_C;             // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      VFX_Once3;                                         // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      VFX_Once2;                                         // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      VFX_Once1;                                         // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          PortalLength;                                      // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DeviceRadius;                                      // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Circles;                                           // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UNiagaraComponent*>              VFXOnceList;                                       // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UClass*                                 PortalClass;                                       // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ExtractDevice_Red(int32 EntryPoint);
	void GetInteractionPromptText(class APlayerController* Param_Instigator, class FText* Key, class FText* Out_Text_Line_1, class FText* Out_Text_Line_2);
	void OnInteractionFinish(class APawn* InteractionPawn);
	void PerformInteraction(class APawn* Interacting_Pawn);
	void ReceiveBeginPlay();
	void SpawnExtractPortal(class ABP_ExtractPortal_C** Portal);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ExtractDevice_Red_C">();
	}
	static class ABP_ExtractDevice_Red_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ExtractDevice_Red_C>();
	}
};
static_assert(alignof(ABP_ExtractDevice_Red_C) == 0x000008, "Wrong alignment on ABP_ExtractDevice_Red_C");
static_assert(sizeof(ABP_ExtractDevice_Red_C) == 0x000400, "Wrong size on ABP_ExtractDevice_Red_C");
static_assert(offsetof(ABP_ExtractDevice_Red_C, UberGraphFrame_BP_ExtractDevice_Red_C) == 0x0003A8, "Member 'ABP_ExtractDevice_Red_C::UberGraphFrame_BP_ExtractDevice_Red_C' has a wrong offset!");
static_assert(offsetof(ABP_ExtractDevice_Red_C, VFX_Once3) == 0x0003B0, "Member 'ABP_ExtractDevice_Red_C::VFX_Once3' has a wrong offset!");
static_assert(offsetof(ABP_ExtractDevice_Red_C, VFX_Once2) == 0x0003B8, "Member 'ABP_ExtractDevice_Red_C::VFX_Once2' has a wrong offset!");
static_assert(offsetof(ABP_ExtractDevice_Red_C, VFX_Once1) == 0x0003C0, "Member 'ABP_ExtractDevice_Red_C::VFX_Once1' has a wrong offset!");
static_assert(offsetof(ABP_ExtractDevice_Red_C, PortalLength) == 0x0003C8, "Member 'ABP_ExtractDevice_Red_C::PortalLength' has a wrong offset!");
static_assert(offsetof(ABP_ExtractDevice_Red_C, DeviceRadius) == 0x0003D0, "Member 'ABP_ExtractDevice_Red_C::DeviceRadius' has a wrong offset!");
static_assert(offsetof(ABP_ExtractDevice_Red_C, Circles) == 0x0003D8, "Member 'ABP_ExtractDevice_Red_C::Circles' has a wrong offset!");
static_assert(offsetof(ABP_ExtractDevice_Red_C, VFXOnceList) == 0x0003E8, "Member 'ABP_ExtractDevice_Red_C::VFXOnceList' has a wrong offset!");
static_assert(offsetof(ABP_ExtractDevice_Red_C, PortalClass) == 0x0003F8, "Member 'ABP_ExtractDevice_Red_C::PortalClass' has a wrong offset!");

}


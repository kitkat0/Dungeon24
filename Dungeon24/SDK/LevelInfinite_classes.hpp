#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelInfinite

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "LevelInfinite_structs.hpp"
#include "Engine_classes.hpp"
#include "INTLCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class LevelInfinite.LevelInfiniteAPI
// 0x0000 (0x0028 - 0x0028)
class ULevelInfiniteAPI final : public UBlueprintFunctionLibrary
{
public:
	static void AutoLogin();
	static bool ClearGameNativeDirectory();
	static void CloseLI();
	static bool FocusLIPassUI();
	static int32 Init(class UGameInstance* Instance, const class FString& Host, const struct FLIUserData& UserData, bool IsTest);
	static int32 InitLI(class UGameInstance* Instance, bool IsTest, const class FString& AppVersion, const class FString& LangType);
	static int32 InitLIP(class UGameInstance* Instance, const class FString& AppVersion, const class FString& LangType);
	static void LoginChannelWithLIPASS(EINTLLoginChannel Channel, const class FString& Permissions, const class FString& ExtraJson);
	static void ModifyLogicSchemeType(ELILogicSchemeType LILogicSchemeType);
	static bool OnBackPressed();
	static void OpenAccountCenter();
	static void OpenAccountCenterWithParams(struct FINTLDeleteAccountParams* Params_0);
	static void OpenBindAccount();
	static void OpenLoginPanel();
	static void SetLanguage(const class FString& Language);
	static void SetUICustomScale(const float Scale);
	static void SetUIRoot(class UCanvasPanel* UiRoot);
	static void SetUserData(const struct FLIUserData& UserData);
	static void StartLIPASSLoginScheme();
	static void StopLIPASSLoginScheme();
	static void UpdateCountryList(const TArray<class FString>& AllowList, const TArray<class FString>& blockList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelInfiniteAPI">();
	}
	static class ULevelInfiniteAPI* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelInfiniteAPI>();
	}
};
static_assert(alignof(ULevelInfiniteAPI) == 0x000008, "Wrong alignment on ULevelInfiniteAPI");
static_assert(sizeof(ULevelInfiniteAPI) == 0x000028, "Wrong size on ULevelInfiniteAPI");

// Class LevelInfinite.LIButton
// 0x03F0 (0x09E0 - 0x05F0)
class ULIButton final : public UButton
{
public:
	uint8                                         Pad_5E8[0x8];                                      // 0x05E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           LIButtonStyle;                                     // 0x05F0(0x03F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LIButton">();
	}
	static class ULIButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULIButton>();
	}
};
static_assert(alignof(ULIButton) == 0x000010, "Wrong alignment on ULIButton");
static_assert(sizeof(ULIButton) == 0x0009E0, "Wrong size on ULIButton");
static_assert(offsetof(ULIButton, LIButtonStyle) == 0x0005F0, "Member 'ULIButton::LIButtonStyle' has a wrong offset!");

// Class LevelInfinite.LIHyperLinkTextBlockDecorator
// 0x0758 (0x0780 - 0x0028)
class ULIHyperLinkTextBlockDecorator final : public URichTextBlockDecorator
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHyperlinkStyle                        M_Style;                                           // 0x0030(0x0750)(Edit, NativeAccessSpecifierPublic)

public:
	void OnHyperLinkClick(const TMap<class FString, class FString>& MetaData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LIHyperLinkTextBlockDecorator">();
	}
	static class ULIHyperLinkTextBlockDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULIHyperLinkTextBlockDecorator>();
	}
};
static_assert(alignof(ULIHyperLinkTextBlockDecorator) == 0x000010, "Wrong alignment on ULIHyperLinkTextBlockDecorator");
static_assert(sizeof(ULIHyperLinkTextBlockDecorator) == 0x000780, "Wrong size on ULIHyperLinkTextBlockDecorator");
static_assert(offsetof(ULIHyperLinkTextBlockDecorator, M_Style) == 0x000030, "Member 'ULIHyperLinkTextBlockDecorator::M_Style' has a wrong offset!");

// Class LevelInfinite.LIListView
// 0x0010 (0x0C30 - 0x0C20)
class ULIListView final : public UListView
{
public:
	ESlateVisibility                              ScrollBarVisibility;                               // 0x0C20(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C21[0xF];                                      // 0x0C21(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LIListView">();
	}
	static class ULIListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULIListView>();
	}
};
static_assert(alignof(ULIListView) == 0x000010, "Wrong alignment on ULIListView");
static_assert(sizeof(ULIListView) == 0x000C30, "Wrong size on ULIListView");
static_assert(offsetof(ULIListView, ScrollBarVisibility) == 0x000C20, "Member 'ULIListView::ScrollBarVisibility' has a wrong offset!");

// Class LevelInfinite.LIPanelBase
// 0x0070 (0x02E8 - 0x0278)
class ULIPanelBase final : public UUserWidget
{
public:
	TDelegate<void(struct FGeometry& MyGeometry, float InDeltaTime)> OnTickDelegate;                                    // 0x0278(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FGeometry& InGeometry, class FString& InKeyName)> OnKeyDownDelegate;                                 // 0x0288(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FGeometry& InGeometry, class FString& InKeyName)> OnKeyUpDelegate;                                   // 0x0298(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FFocusEvent& InFocusEvent)> OnAddedToFocusPathDelegate;                        // 0x02A8(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FFocusEvent& InFocusEvent)> OnRemovedFromFocusPathDelegate;                    // 0x02B8(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UWidgetAnimation* Animation)> OnAnimationStartedDelegate;                        // 0x02C8(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UWidgetAnimation* Animation)> OnAnimationFinishedDelegate;                       // 0x02D8(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void LIAnimationEvent__DelegateSignature(const class UWidgetAnimation* Animation);
	void LIFocusActionEvent__DelegateSignature(const struct FFocusEvent& InFocusEvent);
	bool LIKeyActionEvent__DelegateSignature(const struct FGeometry& InGeometry, const class FString& InKeyName);
	void LITickEvent__DelegateSignature(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetLIUIFocus(class UWidget* InWidgetToFocus);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LIPanelBase">();
	}
	static class ULIPanelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULIPanelBase>();
	}
};
static_assert(alignof(ULIPanelBase) == 0x000008, "Wrong alignment on ULIPanelBase");
static_assert(sizeof(ULIPanelBase) == 0x0002E8, "Wrong size on ULIPanelBase");
static_assert(offsetof(ULIPanelBase, OnTickDelegate) == 0x000278, "Member 'ULIPanelBase::OnTickDelegate' has a wrong offset!");
static_assert(offsetof(ULIPanelBase, OnKeyDownDelegate) == 0x000288, "Member 'ULIPanelBase::OnKeyDownDelegate' has a wrong offset!");
static_assert(offsetof(ULIPanelBase, OnKeyUpDelegate) == 0x000298, "Member 'ULIPanelBase::OnKeyUpDelegate' has a wrong offset!");
static_assert(offsetof(ULIPanelBase, OnAddedToFocusPathDelegate) == 0x0002A8, "Member 'ULIPanelBase::OnAddedToFocusPathDelegate' has a wrong offset!");
static_assert(offsetof(ULIPanelBase, OnRemovedFromFocusPathDelegate) == 0x0002B8, "Member 'ULIPanelBase::OnRemovedFromFocusPathDelegate' has a wrong offset!");
static_assert(offsetof(ULIPanelBase, OnAnimationStartedDelegate) == 0x0002C8, "Member 'ULIPanelBase::OnAnimationStartedDelegate' has a wrong offset!");
static_assert(offsetof(ULIPanelBase, OnAnimationFinishedDelegate) == 0x0002D8, "Member 'ULIPanelBase::OnAnimationFinishedDelegate' has a wrong offset!");

// Class LevelInfinite.LISubSystem
// 0x0000 (0x0028 - 0x0028)
class ULISubSystem final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LISubSystem">();
	}
	static class ULISubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULISubSystem>();
	}
};
static_assert(alignof(ULISubSystem) == 0x000008, "Wrong alignment on ULISubSystem");
static_assert(sizeof(ULISubSystem) == 0x000028, "Wrong size on ULISubSystem");

// Class LevelInfinite.RadarChartWidget
// 0x0080 (0x01D0 - 0x0150)
class URadarChartWidget final : public UWidget
{
public:
	struct FVector2D                              Offset;                                            // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Segmentation;                                      // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SegmentationThickness;                             // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 SegmentationColor;                                 // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlateOutlineThickness;                             // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 PlateOutlineColor;                                 // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 PlateColor;                                        // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ChartColor;                                        // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ChartOutlineColor;                                 // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChartOutlineThickness;                             // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ChartValues;                                       // 0x0190(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             RadiusDelegate;                                    // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SegmentationDelegate;                              // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetChartValue(uint8 Param_Index);
	uint8 GetUInt8__DelegateSignature();
	void SetChartColor(const struct FColor& InColor);
	void SetChartOutlineColor(const struct FColor& InColor);
	void SetChartOutlineThickness(float InThickness);
	void SetChartValue(uint8 Param_Index, float InValue);
	void SetChartValues(const TArray<float>& InValues);
	void SetOffset(const struct FVector2D& InOffset);
	void SetPlateColor(const struct FColor& InColor);
	void SetPlateOutlineColor(const struct FColor& InColor);
	void SetPlateOutlineThickness(float InThickness);
	void SetRadius(float InRadius);
	void SetRotation(float InRotation);
	void SetSegmentation(uint8 InSegmentation);
	void SetSegmentationColor(const struct FColor& InColor);
	void SetSegmentationThickness(float InThickness);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RadarChartWidget">();
	}
	static class URadarChartWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadarChartWidget>();
	}
};
static_assert(alignof(URadarChartWidget) == 0x000008, "Wrong alignment on URadarChartWidget");
static_assert(sizeof(URadarChartWidget) == 0x0001D0, "Wrong size on URadarChartWidget");
static_assert(offsetof(URadarChartWidget, Offset) == 0x000150, "Member 'URadarChartWidget::Offset' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, Rotation) == 0x000160, "Member 'URadarChartWidget::Rotation' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, Radius) == 0x000164, "Member 'URadarChartWidget::Radius' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, Segmentation) == 0x000168, "Member 'URadarChartWidget::Segmentation' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, SegmentationThickness) == 0x00016C, "Member 'URadarChartWidget::SegmentationThickness' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, SegmentationColor) == 0x000170, "Member 'URadarChartWidget::SegmentationColor' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, PlateOutlineThickness) == 0x000174, "Member 'URadarChartWidget::PlateOutlineThickness' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, PlateOutlineColor) == 0x000178, "Member 'URadarChartWidget::PlateOutlineColor' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, PlateColor) == 0x00017C, "Member 'URadarChartWidget::PlateColor' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, ChartColor) == 0x000180, "Member 'URadarChartWidget::ChartColor' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, ChartOutlineColor) == 0x000184, "Member 'URadarChartWidget::ChartOutlineColor' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, ChartOutlineThickness) == 0x000188, "Member 'URadarChartWidget::ChartOutlineThickness' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, ChartValues) == 0x000190, "Member 'URadarChartWidget::ChartValues' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, RadiusDelegate) == 0x0001A0, "Member 'URadarChartWidget::RadiusDelegate' has a wrong offset!");
static_assert(offsetof(URadarChartWidget, SegmentationDelegate) == 0x0001B0, "Member 'URadarChartWidget::SegmentationDelegate' has a wrong offset!");

}


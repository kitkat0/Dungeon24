#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_TGF_Character_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "LyraGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_TGF_Character_Base_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_AnimGraph");
static_assert(sizeof(ABP_TGF_Character_Base_C_AnimGraph) == 0x000010, "Wrong size on ABP_TGF_Character_Base_C_AnimGraph");
static_assert(offsetof(ABP_TGF_Character_Base_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_TGF_Character_Base_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.BlueprintThreadSafeUpdateAnimation
// 0x0020 (0x0020 - 0x0000)
struct ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_UpdateRotationData_DeltaTime_ImplicitCast; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateAimingData_DeltaTime_ImplicitCast;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateAdditiveRate_DeltaTime_ImplicitCast; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation) == 0x000020, "Wrong size on ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation, CallFunc_UpdateRotationData_DeltaTime_ImplicitCast) == 0x000008, "Member 'ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation::CallFunc_UpdateRotationData_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation, CallFunc_UpdateAimingData_DeltaTime_ImplicitCast) == 0x000010, "Member 'ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation::CallFunc_UpdateAimingData_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation, CallFunc_UpdateAdditiveRate_DeltaTime_ImplicitCast) == 0x000018, "Member 'ABP_TGF_Character_Base_C_BlueprintThreadSafeUpdateAnimation::CallFunc_UpdateAdditiveRate_DeltaTime_ImplicitCast' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.DisableInertBlend
// 0x0018 (0x0018 - 0x0000)
struct ABP_TGF_Character_Base_C_DisableInertBlend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValueWithDefault_OutValue;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCurveValueWithDefault_ReturnValue;     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_DisableInertBlend) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_DisableInertBlend");
static_assert(sizeof(ABP_TGF_Character_Base_C_DisableInertBlend) == 0x000018, "Wrong size on ABP_TGF_Character_Base_C_DisableInertBlend");
static_assert(offsetof(ABP_TGF_Character_Base_C_DisableInertBlend, ReturnValue) == 0x000000, "Member 'ABP_TGF_Character_Base_C_DisableInertBlend::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_DisableInertBlend, CallFunc_GetCurveValueWithDefault_OutValue) == 0x000004, "Member 'ABP_TGF_Character_Base_C_DisableInertBlend::CallFunc_GetCurveValueWithDefault_OutValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_DisableInertBlend, CallFunc_GetCurveValueWithDefault_ReturnValue) == 0x000008, "Member 'ABP_TGF_Character_Base_C_DisableInertBlend::CallFunc_GetCurveValueWithDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_DisableInertBlend, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000009, "Member 'ABP_TGF_Character_Base_C_DisableInertBlend::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_DisableInertBlend, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000010, "Member 'ABP_TGF_Character_Base_C_DisableInertBlend::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.ExecuteUbergraph_ABP_TGF_Character_Base
// 0x0030 (0x0030 - 0x0000)
struct ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Tgf_Character_Default_C*            CallFunc_GetLyraCharacterThreadSafe_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base");
static_assert(sizeof(ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base) == 0x000030, "Wrong size on ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base");
static_assert(offsetof(ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base, EntryPoint) == 0x000000, "Member 'ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base, CallFunc_GetLyraCharacterThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base::CallFunc_GetLyraCharacterThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000010, "Member 'ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000018, "Member 'ABP_TGF_Character_Base_C_ExecuteUbergraph_ABP_TGF_Character_Base::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_Additive
// 0x0020 (0x0020 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_Additive final
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_FullBody_Additive;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_Additive) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_Additive");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_Additive) == 0x000020, "Wrong size on ABP_TGF_Character_Base_C_FullBody_Additive");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_Additive, BasePose) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_Additive::BasePose' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_Additive, Param_FullBody_Additive) == 0x000010, "Member 'ABP_TGF_Character_Base_C_FullBody_Additive::Param_FullBody_Additive' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_Aiming
// 0x0030 (0x0030 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_Aiming final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	double                                        Param_AimPitch;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_AimYaw;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoseLink                              Param_FullBody_Aiming;                             // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_Aiming) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_Aiming");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_Aiming) == 0x000030, "Wrong size on ABP_TGF_Character_Base_C_FullBody_Aiming");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_Aiming, InPose) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_Aiming::InPose' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_Aiming, Param_AimPitch) == 0x000010, "Member 'ABP_TGF_Character_Base_C_FullBody_Aiming::Param_AimPitch' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_Aiming, Param_AimYaw) == 0x000018, "Member 'ABP_TGF_Character_Base_C_FullBody_Aiming::Param_AimYaw' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_Aiming, Param_FullBody_Aiming) == 0x000020, "Member 'ABP_TGF_Character_Base_C_FullBody_Aiming::Param_FullBody_Aiming' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_ApexState
// 0x0010 (0x0010 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_ApexState final
{
public:
	struct FPoseLink                              Param_FullBody_ApexState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_ApexState) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_ApexState");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_ApexState) == 0x000010, "Wrong size on ABP_TGF_Character_Base_C_FullBody_ApexState");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_ApexState, Param_FullBody_ApexState) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_ApexState::Param_FullBody_ApexState' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_CrouchingEndState
// 0x0010 (0x0010 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_CrouchingEndState final
{
public:
	struct FPoseLink                              Param_FullBody_CrouchingEndState;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_CrouchingEndState) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_CrouchingEndState");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_CrouchingEndState) == 0x000010, "Wrong size on ABP_TGF_Character_Base_C_FullBody_CrouchingEndState");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_CrouchingEndState, Param_FullBody_CrouchingEndState) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_CrouchingEndState::Param_FullBody_CrouchingEndState' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_CrouchingIdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_CrouchingIdleState final
{
public:
	struct FPoseLink                              Param_FullBody_CrouchingIdleState;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_CrouchingIdleState) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_CrouchingIdleState");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_CrouchingIdleState) == 0x000010, "Wrong size on ABP_TGF_Character_Base_C_FullBody_CrouchingIdleState");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_CrouchingIdleState, Param_FullBody_CrouchingIdleState) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_CrouchingIdleState::Param_FullBody_CrouchingIdleState' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_CrouchingStartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_CrouchingStartState final
{
public:
	struct FPoseLink                              Param_FullBody_CrouchingStartState;                // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_CrouchingStartState) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_CrouchingStartState");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_CrouchingStartState) == 0x000010, "Wrong size on ABP_TGF_Character_Base_C_FullBody_CrouchingStartState");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_CrouchingStartState, Param_FullBody_CrouchingStartState) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_CrouchingStartState::Param_FullBody_CrouchingStartState' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_DeathLayer
// 0x0028 (0x0028 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_DeathLayer final
{
public:
	struct FPoseLink                              NormalPose;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          bDeath;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              Param_FullBody_DeathLayer;                         // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_DeathLayer) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_DeathLayer");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_DeathLayer) == 0x000028, "Wrong size on ABP_TGF_Character_Base_C_FullBody_DeathLayer");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_DeathLayer, NormalPose) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_DeathLayer::NormalPose' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_DeathLayer, bDeath) == 0x000010, "Member 'ABP_TGF_Character_Base_C_FullBody_DeathLayer::bDeath' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_DeathLayer, Param_FullBody_DeathLayer) == 0x000018, "Member 'ABP_TGF_Character_Base_C_FullBody_DeathLayer::Param_FullBody_DeathLayer' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_FallState
// 0x0010 (0x0010 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_FallState final
{
public:
	struct FPoseLink                              Param_FullBody_FallState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_FallState) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_FallState");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_FallState) == 0x000010, "Wrong size on ABP_TGF_Character_Base_C_FullBody_FallState");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_FallState, Param_FullBody_FallState) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_FallState::Param_FullBody_FallState' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_IdleState final
{
public:
	struct FPoseLink                              Param_FullBody_IdleState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_IdleState) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_IdleState");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_IdleState) == 0x000010, "Wrong size on ABP_TGF_Character_Base_C_FullBody_IdleState");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_IdleState, Param_FullBody_IdleState) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_IdleState::Param_FullBody_IdleState' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_JumpStartState
// 0x0010 (0x0010 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_JumpStartState final
{
public:
	struct FPoseLink                              Param_FullBody_JumpStartState;                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_JumpStartState) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_JumpStartState");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_JumpStartState) == 0x000010, "Wrong size on ABP_TGF_Character_Base_C_FullBody_JumpStartState");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_JumpStartState, Param_FullBody_JumpStartState) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_JumpStartState::Param_FullBody_JumpStartState' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_LandState
// 0x0010 (0x0010 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_LandState final
{
public:
	struct FPoseLink                              Param_FullBody_LandState;                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_LandState) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_LandState");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_LandState) == 0x000010, "Wrong size on ABP_TGF_Character_Base_C_FullBody_LandState");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_LandState, Param_FullBody_LandState) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_LandState::Param_FullBody_LandState' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_LegIK
// 0x0020 (0x0020 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_LegIK final
{
public:
	struct FPoseLink                              InFKPose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_FullBody_LegIK;                              // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_LegIK) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_LegIK");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_LegIK) == 0x000020, "Wrong size on ABP_TGF_Character_Base_C_FullBody_LegIK");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_LegIK, InFKPose) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_LegIK::InFKPose' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_LegIK, Param_FullBody_LegIK) == 0x000010, "Member 'ABP_TGF_Character_Base_C_FullBody_LegIK::Param_FullBody_LegIK' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.FullBody_PostProcess
// 0x0020 (0x0020 - 0x0000)
struct ABP_TGF_Character_Base_C_FullBody_PostProcess final
{
public:
	struct FPoseLink                              FullBodyPose;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_FullBody_PostProcess;                        // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_FullBody_PostProcess) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_FullBody_PostProcess");
static_assert(sizeof(ABP_TGF_Character_Base_C_FullBody_PostProcess) == 0x000020, "Wrong size on ABP_TGF_Character_Base_C_FullBody_PostProcess");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_PostProcess, FullBodyPose) == 0x000000, "Member 'ABP_TGF_Character_Base_C_FullBody_PostProcess::FullBodyPose' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_FullBody_PostProcess, Param_FullBody_PostProcess) == 0x000010, "Member 'ABP_TGF_Character_Base_C_FullBody_PostProcess::Param_FullBody_PostProcess' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.GetAdditiveRateValue
// 0x0020 (0x0020 - 0x0000)
struct ABP_TGF_Character_Base_C_GetAdditiveRateValue final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValueWithDefault_OutValue;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCurveValueWithDefault_ReturnValue;     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_GetAdditiveRateValue) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_GetAdditiveRateValue");
static_assert(sizeof(ABP_TGF_Character_Base_C_GetAdditiveRateValue) == 0x000020, "Wrong size on ABP_TGF_Character_Base_C_GetAdditiveRateValue");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetAdditiveRateValue, ReturnValue) == 0x000000, "Member 'ABP_TGF_Character_Base_C_GetAdditiveRateValue::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetAdditiveRateValue, CallFunc_GetCurveValueWithDefault_OutValue) == 0x000008, "Member 'ABP_TGF_Character_Base_C_GetAdditiveRateValue::CallFunc_GetCurveValueWithDefault_OutValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetAdditiveRateValue, CallFunc_GetCurveValueWithDefault_ReturnValue) == 0x00000C, "Member 'ABP_TGF_Character_Base_C_GetAdditiveRateValue::CallFunc_GetCurveValueWithDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetAdditiveRateValue, CallFunc_Array_Get_Item) == 0x000010, "Member 'ABP_TGF_Character_Base_C_GetAdditiveRateValue::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetAdditiveRateValue, CallFunc_FClamp_ReturnValue) == 0x000018, "Member 'ABP_TGF_Character_Base_C_GetAdditiveRateValue::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.GetFullBodyCurveValue
// 0x0018 (0x0018 - 0x0000)
struct ABP_TGF_Character_Base_C_GetFullBodyCurveValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValueWithDefault_OutValue;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCurveValueWithDefault_ReturnValue;     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_GetFullBodyCurveValue) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_GetFullBodyCurveValue");
static_assert(sizeof(ABP_TGF_Character_Base_C_GetFullBodyCurveValue) == 0x000018, "Wrong size on ABP_TGF_Character_Base_C_GetFullBodyCurveValue");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetFullBodyCurveValue, ReturnValue) == 0x000000, "Member 'ABP_TGF_Character_Base_C_GetFullBodyCurveValue::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetFullBodyCurveValue, CallFunc_GetCurveValueWithDefault_OutValue) == 0x000004, "Member 'ABP_TGF_Character_Base_C_GetFullBodyCurveValue::CallFunc_GetCurveValueWithDefault_OutValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetFullBodyCurveValue, CallFunc_GetCurveValueWithDefault_ReturnValue) == 0x000008, "Member 'ABP_TGF_Character_Base_C_GetFullBodyCurveValue::CallFunc_GetCurveValueWithDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetFullBodyCurveValue, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000009, "Member 'ABP_TGF_Character_Base_C_GetFullBodyCurveValue::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetFullBodyCurveValue, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000010, "Member 'ABP_TGF_Character_Base_C_GetFullBodyCurveValue::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.GetLyraCharacterThreadSafe
// 0x0018 (0x0018 - 0x0000)
struct ABP_TGF_Character_Base_C_GetLyraCharacterThreadSafe final
{
public:
	class ABP_Tgf_Character_Default_C*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class ABP_Tgf_Character_Default_C*            K2Node_DynamicCast_AsBP_Tgf_Character_Default;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_GetLyraCharacterThreadSafe) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_GetLyraCharacterThreadSafe");
static_assert(sizeof(ABP_TGF_Character_Base_C_GetLyraCharacterThreadSafe) == 0x000018, "Wrong size on ABP_TGF_Character_Base_C_GetLyraCharacterThreadSafe");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetLyraCharacterThreadSafe, ReturnValue) == 0x000000, "Member 'ABP_TGF_Character_Base_C_GetLyraCharacterThreadSafe::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetLyraCharacterThreadSafe, K2Node_DynamicCast_AsBP_Tgf_Character_Default) == 0x000008, "Member 'ABP_TGF_Character_Base_C_GetLyraCharacterThreadSafe::K2Node_DynamicCast_AsBP_Tgf_Character_Default' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetLyraCharacterThreadSafe, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_TGF_Character_Base_C_GetLyraCharacterThreadSafe::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.GetNeedFreeze
// 0x0018 (0x0018 - 0x0000)
struct ABP_TGF_Character_Base_C_GetNeedFreeze final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Tgf_Character_Default_C*            CallFunc_GetLyraCharacterThreadSafe_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_GetNeedFreeze) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_GetNeedFreeze");
static_assert(sizeof(ABP_TGF_Character_Base_C_GetNeedFreeze) == 0x000018, "Wrong size on ABP_TGF_Character_Base_C_GetNeedFreeze");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetNeedFreeze, ReturnValue) == 0x000000, "Member 'ABP_TGF_Character_Base_C_GetNeedFreeze::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetNeedFreeze, CallFunc_GetLyraCharacterThreadSafe_ReturnValue) == 0x000008, "Member 'ABP_TGF_Character_Base_C_GetNeedFreeze::CallFunc_GetLyraCharacterThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetNeedFreeze, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'ABP_TGF_Character_Base_C_GetNeedFreeze::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetNeedFreeze, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'ABP_TGF_Character_Base_C_GetNeedFreeze::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.GetShouldLandEnding
// 0x0003 (0x0003 - 0x0000)
struct ABP_TGF_Character_Base_C_GetShouldLandEnding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_GetShouldLandEnding) == 0x000001, "Wrong alignment on ABP_TGF_Character_Base_C_GetShouldLandEnding");
static_assert(sizeof(ABP_TGF_Character_Base_C_GetShouldLandEnding) == 0x000003, "Wrong size on ABP_TGF_Character_Base_C_GetShouldLandEnding");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetShouldLandEnding, ReturnValue) == 0x000000, "Member 'ABP_TGF_Character_Base_C_GetShouldLandEnding::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetShouldLandEnding, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'ABP_TGF_Character_Base_C_GetShouldLandEnding::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetShouldLandEnding, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'ABP_TGF_Character_Base_C_GetShouldLandEnding::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.InertBlendLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_TGF_Character_Base_C_InertBlendLayer final
{
public:
	struct FPoseLink                              InBlendPose;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_InertBlendLayer;                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_InertBlendLayer) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_InertBlendLayer");
static_assert(sizeof(ABP_TGF_Character_Base_C_InertBlendLayer) == 0x000020, "Wrong size on ABP_TGF_Character_Base_C_InertBlendLayer");
static_assert(offsetof(ABP_TGF_Character_Base_C_InertBlendLayer, InBlendPose) == 0x000000, "Member 'ABP_TGF_Character_Base_C_InertBlendLayer::InBlendPose' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_InertBlendLayer, Param_InertBlendLayer) == 0x000010, "Member 'ABP_TGF_Character_Base_C_InertBlendLayer::Param_InertBlendLayer' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.LowerBodyUpperBodySplit
// 0x0050 (0x0050 - 0x0000)
struct ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit final
{
public:
	struct FPoseLink                              InBaseLocomition;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              InBaseUpperBodyMontage;                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              InAdditivePose;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              DefaultAdditive;                                   // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_LowerBodyUpperBodySplit;                     // 0x0040(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit");
static_assert(sizeof(ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit) == 0x000050, "Wrong size on ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit");
static_assert(offsetof(ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit, InBaseLocomition) == 0x000000, "Member 'ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit::InBaseLocomition' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit, InBaseUpperBodyMontage) == 0x000010, "Member 'ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit::InBaseUpperBodyMontage' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit, InAdditivePose) == 0x000020, "Member 'ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit::InAdditivePose' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit, DefaultAdditive) == 0x000030, "Member 'ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit::DefaultAdditive' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit, Param_LowerBodyUpperBodySplit) == 0x000040, "Member 'ABP_TGF_Character_Base_C_LowerBodyUpperBodySplit::Param_LowerBodyUpperBodySplit' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.UpdateAdditiveRate
// 0x0038 (0x0038 - 0x0000)
struct ABP_TGF_Character_Base_C_UpdateAdditiveRate final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetLowerBodyAdditiveRate;                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFullBodyCurveValue_ReturnValue;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BlendFloat_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BlendFloat_DeltaTime_ImplicitCast;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BlendFloat_TargetValue_ImplicitCast;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BlendFloat_TotalTime_ImplicitCast;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BlendFloat_CurValue_ImplicitCast;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_LowerBodyAddtiveRate_ImplicitCast; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_UpdateAdditiveRate) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_UpdateAdditiveRate");
static_assert(sizeof(ABP_TGF_Character_Base_C_UpdateAdditiveRate) == 0x000038, "Wrong size on ABP_TGF_Character_Base_C_UpdateAdditiveRate");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, DeltaTime) == 0x000000, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, TargetLowerBodyAdditiveRate) == 0x000008, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::TargetLowerBodyAdditiveRate' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, CallFunc_BooleanOR_ReturnValue) == 0x000010, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, CallFunc_GetFullBodyCurveValue_ReturnValue) == 0x000011, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::CallFunc_GetFullBodyCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, CallFunc_BlendFloat_ReturnValue) == 0x000014, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::CallFunc_BlendFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, CallFunc_BooleanOR_ReturnValue_1) == 0x000018, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, CallFunc_BooleanOR_ReturnValue_2) == 0x00001A, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, CallFunc_BooleanOR_ReturnValue_3) == 0x00001B, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, CallFunc_BlendFloat_DeltaTime_ImplicitCast) == 0x00001C, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::CallFunc_BlendFloat_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, CallFunc_BlendFloat_TargetValue_ImplicitCast) == 0x000020, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::CallFunc_BlendFloat_TargetValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, CallFunc_BlendFloat_TotalTime_ImplicitCast) == 0x000024, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::CallFunc_BlendFloat_TotalTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, CallFunc_BlendFloat_CurValue_ImplicitCast) == 0x000028, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::CallFunc_BlendFloat_CurValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAdditiveRate, K2Node_VariableSet_LowerBodyAddtiveRate_ImplicitCast) == 0x000030, "Member 'ABP_TGF_Character_Base_C_UpdateAdditiveRate::K2Node_VariableSet_LowerBodyAddtiveRate_ImplicitCast' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.UpdateADSState
// 0x0001 (0x0001 - 0x0000)
struct ABP_TGF_Character_Base_C_UpdateADSState final
{
public:
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_UpdateADSState) == 0x000001, "Wrong alignment on ABP_TGF_Character_Base_C_UpdateADSState");
static_assert(sizeof(ABP_TGF_Character_Base_C_UpdateADSState) == 0x000001, "Wrong size on ABP_TGF_Character_Base_C_UpdateADSState");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateADSState, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000000, "Member 'ABP_TGF_Character_Base_C_UpdateADSState::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.UpdateAimingData
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_TGF_Character_Base_C_UpdateAimingData final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedAimPitch;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Control_Rotation;                                  // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ClampAngle_ReturnValue;                   // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ClampAngle_ReturnValue_1;                 // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ClampAngle_AngleDegrees_ImplicitCast;     // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ClampAngle_AngleDegrees_ImplicitCast_1;   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_UpdateAimingData) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_UpdateAimingData");
static_assert(sizeof(ABP_TGF_Character_Base_C_UpdateAimingData) == 0x0000C0, "Wrong size on ABP_TGF_Character_Base_C_UpdateAimingData");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, DeltaTime) == 0x000000, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CachedAimPitch) == 0x000008, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CachedAimPitch' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, Control_Rotation) == 0x000010, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::Control_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000028, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_SafeDivide_ReturnValue) == 0x000030, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000038, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_RInterpTo_ReturnValue) == 0x000068, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_BreakRotator_Roll) == 0x000080, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_BreakRotator_Pitch) == 0x000084, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_BreakRotator_Yaw) == 0x000088, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_ClampAngle_ReturnValue) == 0x000090, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_ClampAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_ClampAngle_ReturnValue_1) == 0x000098, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_ClampAngle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x0000A0, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0000A4, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0000A8, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_ClampAngle_AngleDegrees_ImplicitCast) == 0x0000B0, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_ClampAngle_AngleDegrees_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateAimingData, CallFunc_ClampAngle_AngleDegrees_ImplicitCast_1) == 0x0000B8, "Member 'ABP_TGF_Character_Base_C_UpdateAimingData::CallFunc_ClampAngle_AngleDegrees_ImplicitCast_1' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.UpdateCharacterState
// 0x0006 (0x0006 - 0x0000)
struct ABP_TGF_Character_Base_C_UpdateCharacterState final
{
public:
	bool                                          bCachedCrouchingState;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_UpdateCharacterState) == 0x000001, "Wrong alignment on ABP_TGF_Character_Base_C_UpdateCharacterState");
static_assert(sizeof(ABP_TGF_Character_Base_C_UpdateCharacterState) == 0x000006, "Wrong size on ABP_TGF_Character_Base_C_UpdateCharacterState");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateCharacterState, bCachedCrouchingState) == 0x000000, "Member 'ABP_TGF_Character_Base_C_UpdateCharacterState::bCachedCrouchingState' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateCharacterState, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'ABP_TGF_Character_Base_C_UpdateCharacterState::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateCharacterState, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'ABP_TGF_Character_Base_C_UpdateCharacterState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateCharacterState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'ABP_TGF_Character_Base_C_UpdateCharacterState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateCharacterState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000004, "Member 'ABP_TGF_Character_Base_C_UpdateCharacterState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateCharacterState, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'ABP_TGF_Character_Base_C_UpdateCharacterState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.UpdateMovingVelocity
// 0x0068 (0x0068 - 0x0000)
struct ABP_TGF_Character_Base_C_UpdateMovingVelocity final
{
public:
	bool                                          CallFunc_Vector_IsNearlyZero_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsNearlyZero_ReturnValue_1;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Tgf_Character_Default_C*            CallFunc_GetLyraCharacterThreadSafe_ReturnValue;   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateDirection_ReturnValue;           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimConfigDirection8                         CallFunc_GetAngleDirection8_ReturnValue;           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateDirection_ReturnValue_1;         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimConfigDirection8                         CallFunc_GetAngleDirection8_ReturnValue_1;         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_UpdateMovingVelocity) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_UpdateMovingVelocity");
static_assert(sizeof(ABP_TGF_Character_Base_C_UpdateMovingVelocity) == 0x000068, "Wrong size on ABP_TGF_Character_Base_C_UpdateMovingVelocity");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_Vector_IsNearlyZero_ReturnValue) == 0x000000, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_Vector_IsNearlyZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000008, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_Vector_IsNearlyZero_ReturnValue_1) == 0x000021, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_Vector_IsNearlyZero_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_Abs_ReturnValue) == 0x000028, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_Not_PreBool_ReturnValue_1) == 0x000030, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000031, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_GetLyraCharacterThreadSafe_ReturnValue) == 0x000038, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_GetLyraCharacterThreadSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_CalculateDirection_ReturnValue) == 0x000040, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_CalculateDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_GetAngleDirection8_ReturnValue) == 0x000044, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_GetAngleDirection8_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x000048, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_CalculateDirection_ReturnValue_1) == 0x000060, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_CalculateDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateMovingVelocity, CallFunc_GetAngleDirection8_ReturnValue_1) == 0x000064, "Member 'ABP_TGF_Character_Base_C_UpdateMovingVelocity::CallFunc_GetAngleDirection8_ReturnValue_1' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.UpdateRotationData
// 0x0058 (0x0058 - 0x0000)
struct ABP_TGF_Character_Base_C_UpdateRotationData final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CachedRotation;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_A_ImplicitCast;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_UpdateRotationData) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_UpdateRotationData");
static_assert(sizeof(ABP_TGF_Character_Base_C_UpdateRotationData) == 0x000058, "Wrong size on ABP_TGF_Character_Base_C_UpdateRotationData");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateRotationData, DeltaTime) == 0x000000, "Member 'ABP_TGF_Character_Base_C_UpdateRotationData::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateRotationData, CachedRotation) == 0x000008, "Member 'ABP_TGF_Character_Base_C_UpdateRotationData::CachedRotation' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateRotationData, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000020, "Member 'ABP_TGF_Character_Base_C_UpdateRotationData::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateRotationData, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'ABP_TGF_Character_Base_C_UpdateRotationData::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateRotationData, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'ABP_TGF_Character_Base_C_UpdateRotationData::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateRotationData, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'ABP_TGF_Character_Base_C_UpdateRotationData::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateRotationData, CallFunc_SafeDivide_ReturnValue) == 0x000048, "Member 'ABP_TGF_Character_Base_C_UpdateRotationData::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateRotationData, CallFunc_SafeDivide_A_ImplicitCast) == 0x000050, "Member 'ABP_TGF_Character_Base_C_UpdateRotationData::CallFunc_SafeDivide_A_ImplicitCast' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.UpdateWeaponInfo
// 0x0018 (0x0018 - 0x0000)
struct ABP_TGF_Character_Base_C_UpdateWeaponInfo final
{
public:
	struct FVector                                CallFunc_GetLeftHandSwordLocation_ReturnValue;     // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_UpdateWeaponInfo) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_UpdateWeaponInfo");
static_assert(sizeof(ABP_TGF_Character_Base_C_UpdateWeaponInfo) == 0x000018, "Wrong size on ABP_TGF_Character_Base_C_UpdateWeaponInfo");
static_assert(offsetof(ABP_TGF_Character_Base_C_UpdateWeaponInfo, CallFunc_GetLeftHandSwordLocation_ReturnValue) == 0x000000, "Member 'ABP_TGF_Character_Base_C_UpdateWeaponInfo::CallFunc_GetLeftHandSwordLocation_ReturnValue' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.GetCurrentDeathAnimationLength
// 0x0008 (0x0008 - 0x0000)
struct ABP_TGF_Character_Base_C_GetCurrentDeathAnimationLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDeathAnimationLength_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_GetCurrentDeathAnimationLength) == 0x000004, "Wrong alignment on ABP_TGF_Character_Base_C_GetCurrentDeathAnimationLength");
static_assert(sizeof(ABP_TGF_Character_Base_C_GetCurrentDeathAnimationLength) == 0x000008, "Wrong size on ABP_TGF_Character_Base_C_GetCurrentDeathAnimationLength");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetCurrentDeathAnimationLength, ReturnValue) == 0x000000, "Member 'ABP_TGF_Character_Base_C_GetCurrentDeathAnimationLength::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetCurrentDeathAnimationLength, CallFunc_GetDeathAnimationLength_ReturnValue) == 0x000004, "Member 'ABP_TGF_Character_Base_C_GetCurrentDeathAnimationLength::CallFunc_GetDeathAnimationLength_ReturnValue' has a wrong offset!");

// Function ABP_TGF_Character_Base.ABP_TGF_Character_Base_C.GetDeathAnimationLength
// 0x0020 (0x0020 - 0x0000)
struct ABP_TGF_Character_Base_C_GetDeathAnimationLength final
{
public:
	EAnimConfigDirection                          Param_DeathDirection;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimConfigDirection                          Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayLength_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_TGF_Character_Base_C_GetDeathAnimationLength) == 0x000008, "Wrong alignment on ABP_TGF_Character_Base_C_GetDeathAnimationLength");
static_assert(sizeof(ABP_TGF_Character_Base_C_GetDeathAnimationLength) == 0x000020, "Wrong size on ABP_TGF_Character_Base_C_GetDeathAnimationLength");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetDeathAnimationLength, Param_DeathDirection) == 0x000000, "Member 'ABP_TGF_Character_Base_C_GetDeathAnimationLength::Param_DeathDirection' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetDeathAnimationLength, ReturnValue) == 0x000004, "Member 'ABP_TGF_Character_Base_C_GetDeathAnimationLength::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetDeathAnimationLength, Temp_byte_Variable) == 0x000008, "Member 'ABP_TGF_Character_Base_C_GetDeathAnimationLength::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetDeathAnimationLength, K2Node_Select_Default) == 0x000010, "Member 'ABP_TGF_Character_Base_C_GetDeathAnimationLength::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_TGF_Character_Base_C_GetDeathAnimationLength, CallFunc_GetPlayLength_ReturnValue) == 0x000018, "Member 'ABP_TGF_Character_Base_C_GetDeathAnimationLength::CallFunc_GetPlayLength_ReturnValue' has a wrong offset!");

}


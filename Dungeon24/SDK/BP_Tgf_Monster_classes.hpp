#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Tgf_Monster

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TGF_FAbilitySelectorAlternativeEntry_structs.hpp"
#include "TypedElementFramework_structs.hpp"
#include "LyraGame_structs.hpp"
#include "TGF_EFleeState_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "TGF_FAbilitySelectorEntry_structs.hpp"
#include "TGF_FDormantEntry_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "TGF_EWeakState_structs.hpp"
#include "TGF_FRetreatEntry_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Tgf_Character_Default_classes.hpp"
#include "AkAudio_structs.hpp"
#include "AGRPRO_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Tgf_Monster.BP_Tgf_Monster_C
// 0x0740 (0x10F0 - 0x09B0)
class ABP_Tgf_Monster_C final : public ABP_Tgf_Character_Default_C
{
public:
	uint8                                         Pad_9A1[0x7];                                      // 0x09A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Tgf_Monster_C;                   // 0x09A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTgfMonsterReaction*                    TgfMonsterReaction;                                // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTGFThreatManagerComponent*             TGFThreatManager;                                  // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TgfMonsterMaterialManagerComponent_C* TgfMonsterMaterialManagerComponent;                // 0x09C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTgfNpcStateManagerComponent*           TgfNpcStateManager;                                // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_LootOptionComponent_C*              LootOptionComponent;                               // 0x09D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioObstacleDetectionComponent*       AudioObstacleDetection;                            // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAGR_CombatManager*                     AGR_CombatManager;                                 // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DissipationDeath_Disappear_35685E8845C76072EB36B885C5AF8E34; // 0x09E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DissipationDeath__Direction_35685E8845C76072EB36B885C5AF8E34; // 0x09EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9ED[0x3];                                      // 0x09ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DissipationDeath;                                  // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CommonFade_CharacterOpacity_830B64A440FD46C8ED2330BF3E56C5A7; // 0x09F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CommonFade__Direction_830B64A440FD46C8ED2330BF3E56C5A7; // 0x09FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FD[0x3];                                      // 0x09FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CommonFade;                                        // 0x0A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         HitReactTimeline_Alpha_61B53E184FDC8E59ACB91D91D0FE1265; // 0x0A08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitReactTimeline_SignDirection_61B53E184FDC8E59ACB91D91D0FE1265; // 0x0A0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HitReactTimeline__Direction_61B53E184FDC8E59ACB91D91D0FE1265; // 0x0A10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A11[0x7];                                      // 0x0A11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HitReactTimeline;                                  // 0x0A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_FossRadius_0B147D49452836A43151219638BAAF42; // 0x0A20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_0B147D49452836A43151219638BAAF42; // 0x0A24(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A25[0x3];                                      // 0x0A25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x0A28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0A30(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 Hit_Actor;                                         // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectContextHandle           Gameplay_Effect_Context_Handler;                   // 0x0B20(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_ActorSpawnPoint_C*                  ActorSpawnPoint;                                   // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         TraceMeshAddedCount;                               // 0x0B40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B44[0x4];                                      // 0x0B44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AbilityRange;                                      // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AbilityInterval;                                   // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AbilityIntervalRandomDeviation;                    // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AbilityIntervalStationary;                         // 0x0B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B61[0x7];                                      // 0x0B61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTGF_FAbilitySelectorEntry>     AbilitySelector;                                   // 0x0B68(0x0010)(Edit, BlueprintVisible)
	TArray<struct FTGF_FAbilitySelectorAlternativeEntry> AbilitySelectorAlternative;                        // 0x0B78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FLootPoolItem>                  Loot;                                              // 0x0B88(0x0010)(Edit, BlueprintVisible)
	bool                                          Dormantable;                                       // 0x0B98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B99[0x3];                                      // 0x0B99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DormantTimesMax;                                   // 0x0B9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DormantTimes;                                      // 0x0BA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA4[0x4];                                      // 0x0BA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTGF_FDormantEntry>             Dormants;                                          // 0x0BA8(0x0010)(Edit, BlueprintVisible)
	int32                                         DormantIndex;                                      // 0x0BB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dormant;                                           // 0x0BBC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BBD[0x3];                                      // 0x0BBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ThreatTargetLock;                                  // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThreatDamagedMelee;                                // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThreatDamagedRanged;                               // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThreatDamageTaken;                                 // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThreatTargetLostDistance;                          // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThreatTargetLostTime;                              // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnThreatTargetChanged;                             // 0x0BF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTagContainer                  WeakTag;                                           // 0x0C00(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	ETGF_EWeakState                               Weak;                                              // 0x0C20(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C21[0x7];                                      // 0x0C21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WeakTime;                                          // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetreatRange;                                      // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetreatChance;                                     // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTGF_FRetreatEntry>             Retreats;                                          // 0x0C40(0x0010)(Edit, BlueprintVisible)
	double                                        FleeHealth;                                        // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FleeChance;                                        // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FleeAngle;                                         // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FleeDistanceMin;                                   // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FleeDistanceMax;                                   // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FleePointRadius;                                   // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FleePointCount;                                    // 0x0C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C84[0x4];                                      // 0x0C84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FleePointHoldTimeMin;                              // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FleePointHoldTimeMax;                              // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETGF_EFleeState                               FleeState;                                         // 0x0C98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C99[0x7];                                      // 0x0C99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        FleePath;                                          // 0x0CA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        AbilityTurnSpeed;                                  // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AbilityActivatingTurnSpeed;                        // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Alertable;                                         // 0x0CC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC1[0x7];                                      // 0x0CC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 AlertSuspiciousAbility;                            // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        AlertSearchTime;                                   // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AlertSearchEndTime;                                // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AlertSearchDistance;                               // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flyable;                                           // 0x0CE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE9[0x7];                                      // 0x0CE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlyTargetOffset;                                   // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeakEndTime;                                       // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InCombat;                                          // 0x0D00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D01[0x7];                                      // 0x0D01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnEnterCombat;                                     // 0x0D08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnLeaveCombat;                                     // 0x0D18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_Mechanism_C*                        DeathTriggerMechanism;                             // 0x0D28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_TrapBase_C*                         DeathTriggerTrap;                                  // 0x0D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         DeathTriggerParam;                                 // 0x0D38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wanderable;                                        // 0x0D3C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D3D[0x3];                                      // 0x0D3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WanderRadius;                                      // 0x0D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WanderInterval;                                    // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WanderIntervalRandomDeviation;                     // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScriptTypedElementHandle              In_Element_Handle;                                 // 0x0D58(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  FlankBlockedTags;                                  // 0x0D60(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        FlankChance;                                       // 0x0D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FlankPointCount;                                   // 0x0D88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FlankPointCountRandomDeviation;                    // 0x0D8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlankDirectionConsistent;                          // 0x0D90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D91[0x7];                                      // 0x0D91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlankAngleMin;                                     // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlankAngleMax;                                     // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlankHeightMin;                                    // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlankHeightMax;                                    // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlankTimeMin;                                      // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlankTimeMax;                                      // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  SpeedMods;                                         // 0x0DC8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, double>             SpeedModMap;                                       // 0x0DE8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        SpeedLow;                                          // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpeedLowEnterDistance;                             // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpeedLowLeaveDistance;                             // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlankSpeed;                                        // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SpeedTagLow;                                       // 0x0E58(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SpeedTagFlank;                                     // 0x0E60(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TurnSpeedMods;                                     // 0x0E68(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, double>             TurnSpeedModMap;                                   // 0x0E88(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           TurnSpeedTagLow;                                   // 0x0ED8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TurnSpeedTagAbility;                               // 0x0EE0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TurnSpeedTagAbilityActivating;                     // 0x0EE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AliveLoopSound;                                    // 0x0EF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        WanderIdleChance;                                  // 0x0EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WanderIdleDelay;                                   // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WanderIdleDelayRandomDeviation;                    // 0x0F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WanderIdleAbility;                                 // 0x0F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 SpeedTagRetreat;                                   // 0x0F18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          ReturnToSpawnPoint;                                // 0x0F28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F29[0x7];                                      // 0x0F29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CombatTime;                                        // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWaypointPath*                          FlankPath;                                         // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          EnterCombatSound;                                  // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TurnSpeedLow;                                      // 0x0F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseMoveSpeed;                                     // 0x0F50(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Looted;                                            // 0x0F58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Evade;                                             // 0x0F59(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5A[0x6];                                      // 0x0F5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        EvadeTime;                                         // 0x0F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChaseFailed;                                       // 0x0F68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F69[0x7];                                      // 0x0F69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ChaseFailedTime;                                   // 0x0F70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StareTime;                                         // 0x0F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StareTimeRandomDeviation;                          // 0x0F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlankAfterStare;                                   // 0x0F88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F89[0x7];                                      // 0x0F89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SightPeripheralVisionAngleDegrees;                 // 0x0F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SpeedTagBlockChangeOnDistance;                     // 0x0F98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         CurGAIndex;                                        // 0x0FA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA4[0x4];                                      // 0x0FA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UTgfGameplayAbility*>       CurSrcGADIc;                                       // 0x0FA8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTgfGameplayAbility*                    CurSrcGA;                                          // 0x0FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReplicatedTargetActor;                             // 0x1000(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnDormantEnterBegin;                               // 0x1008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnDormantEnterEnd;                                 // 0x1018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnDormantLeaveBegin;                               // 0x1028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnDormantLeaveEnd;                                 // 0x1038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EVisibilityBasedAnimTickOption                CachedVisibilityBasedAnimTickOption;               // 0x1048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1049[0x7];                                     // 0x1049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CombatLeaveDistance;                               // 0x1050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CombatLeaveTime;                                   // 0x1058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewVar;                                            // 0x1060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CommonFadeTime;                                    // 0x1068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HoldEnabled;                                       // 0x1070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1071[0x7];                                     // 0x1071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HoldGravityReserved;                               // 0x1078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnLocationRelative;                             // 0x1080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorSpawnPointLocation;                           // 0x1098(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RecoverOnLeaveCombat;                              // 0x10B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10B1[0x7];                                     // 0x10B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 RecoverOnLeaveCombatGE;                            // 0x10B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          RecoverSlowlyOnLeaveCombat;                        // 0x10C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C1[0x7];                                     // 0x10C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 RecoverSlowlyOnLeaveCombatGE;                      // 0x10C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          FlankInterruptByAttack;                            // 0x10D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D1[0x7];                                     // 0x10D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlankInterruptByApproachTime;                      // 0x10D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlankInterruptByApproachDistance;                  // 0x10E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddThreatWithForceTargetable(class AActor* Actor, double Threat);
	void AddTraceMesh(class FName StartSocketTraceName, class FName EndSocketTraceName, EAGR_CombatColliderType CollisionHandling, int32* TraceMeshInsId);
	void ApplyDormantGravity(bool Apply);
	void ApplySpeedMod(const struct FGameplayTag& Tag, bool Apply);
	void ApplyTurnSpeedMod(const struct FGameplayTag& Tag, bool Apply);
	void AttackHitEventHandle(const struct FHitResult& Hit, class UPrimitiveComponent* Param_Mesh);
	void BeginDormant(bool Param_Dormant, bool PlayMontage);
	void BlockUpdateSpeedOnDistance(bool Block);
	void BndEvt__BP_Tgf_Monster_AttributeComponent_K2Node_ComponentBoundEvent_0_TgfAttribute_DeathEvent__DelegateSignature(class AActor* OwningActor);
	void BndEvt__BP_Tgf_Monster_AttributeComponent_K2Node_ComponentBoundEvent_0_TgfAttributeInitialized__DelegateSignature();
	void BndEvt__BP_Tgf_Monster_AttributeComponent_K2Node_ComponentBoundEvent_1_TgfAttribute_DamageEvent__DelegateSignature(class AActor* Actor, const struct FGameplayTagContainer& InstigatorTags, const struct FGameplayTagContainer& TargetTags, float Damage, const struct FGameplayEffectSpec& Spec);
	void BndEvt__BP_Tgf_Monster_AttributeComponent_K2Node_ComponentBoundEvent_2_TgfAttribute_DeathEvent__DelegateSignature(class AActor* OwningActor);
	void BndEvt__BP_Tgf_Monster_AttributeComponent_K2Node_ComponentBoundEvent_3_TgfAttribute_DamageEvent__DelegateSignature(class AActor* Actor, const struct FGameplayTagContainer& InstigatorTags, const struct FGameplayTagContainer& TargetTags, float Damage, const struct FGameplayEffectSpec& Spec);
	void BndEvt__BP_Tgf_Monster_TgfMonsterMaterialManagerComponent_K2Node_ComponentBoundEvent_1_TgfCharaMatStateTypeEvent__DelegateSignature(ETgfCharaMatStateType MatStateType);
	void BndEvt__BP_Tgf_Monster_TgfMonsterReaction_K2Node_ComponentBoundEvent_1_TgfMonsterReactionEvent__DelegateSignature(class AActor* FirstChara);
	void CalcSpeedMod(const struct FGameplayTag& Mod, double Value);
	void CalcSpeedMods();
	void CalcTurnSpeedMod(const struct FGameplayTag& Mod, double Value);
	void CalcTurnSpeedMods();
	void CommonFade__FinishedFunc();
	void CommonFade__UpdateFunc();
	void DeInitCurGA(int32 InputIndex);
	void DissipationDeath__FinishedFunc();
	void DissipationDeath__UpdateFunc();
	void EnableProjectileBlocker(bool bEnable);
	void EndDormant(bool Param_Dormant);
	void EnterCombat();
	void EventOnEnterCombat();
	void ExecuteUbergraph_BP_Tgf_Monster(int32 EntryPoint);
	void GenerateLoot(class AActor* Param_Instigator);
	void Get_Location_by_Spawn_Offset(const struct FVector& Location, struct FVector* Result);
	void GetAbilityActivateRange(class UClass* Ability, double* Result);
	void GetCombatTime(double* Result);
	class FString GetDebugInfoString();
	class UClass* GetDormantAbility();
	int32 GetDormantIndex();
	void GetDormantSightPeripheralVisionAngleDegrees(double* Result);
	double GetDormantSightRadius();
	class UClass* GetDormantWakeUpAbility();
	void GetTargetActor(class AActor** Actor);
	void GetTargetLocation(struct FVector* Location);
	void GetTargetLocationClient(struct FVector* Location, bool* bHasTarget);
	void GetWanderRadius(double* Result);
	void HasAnySpeedMod(bool* Result);
	void HasAnyTurnSpeedMod(bool* Result);
	void HasSpeedMod(const struct FGameplayTag& Tag, bool* Result);
	void HasTurnSpeedMod(const struct FGameplayTag& Tag, bool* Result);
	void HitReactTimeline__FinishedFunc();
	void HitReactTimeline__UpdateFunc();
	void InitCurGA(class UTgfGameplayAbility* InputGA, int32* ResultIndex);
	bool IsActivatingAbility();
	void IsDamaged(bool* Result);
	bool IsDormant();
	void IsDormantable(bool* Result);
	bool IsDormantAnimationUsePose();
	bool IsDormantAttackable();
	bool IsDormantCollisionEnabled();
	bool IsDormantIndexValid();
	bool IsDormantInvisible();
	bool IsDormantSensesEnabled();
	bool IsDormantSpecialAttackable();
	bool IsDormantWithGravity();
	void IsEvadable(bool* Result);
	void IsEvade(bool* Result);
	void IsFleed(bool* Result);
	void IsFleeing(bool* Result);
	void IsInCombat(bool* Result);
	bool IsPatrolable();
	void IsStareEnabled(bool* Result);
	void IsWanderable(bool* Result);
	bool IsWeak();
	bool IsWeakening();
	void LeaveCombat();
	void OnChaseFailed();
	void OnChaseSuccessed();
	void OnDormantEnterBegin__DelegateSignature();
	void OnDormantEnterEnd__DelegateSignature();
	void OnDormantLeaveBegin__DelegateSignature();
	void OnDormantLeaveEnd__DelegateSignature();
	void OnEnterCombat__DelegateSignature();
	void OnLeaveCombat__DelegateSignature();
	void OnRep_Dormant();
	void OnSpawned(class ABP_ActorSpawnPoint_C* Param_ActorSpawnPoint);
	void OnThreatListClose();
	void OnThreatListOpen();
	void OnThreatTarget(class AActor* NewThreatTarget);
	void OnThreatTargetChanged__DelegateSignature(class AActor* Target);
	void PickRetreat(bool* Result, int32* Param_Index);
	void PlayEnterCombatAudio();
	void PlayGameplayCue(const struct FGameplayTag& GameplayCue, const struct FVector& Position);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RemoveTraceMesh(int32 TraceMeshInsId, bool* Result);
	void ResetCurGA();
	void SetComponentTick_BP(bool Enabled);
	void SetDormantAttackable(bool Enable);
	void SetDormantCollisionEnabled(bool Enabled);
	void SetEvade(bool Value);
	void SetFleed();
	void SetFleeing();
	void SetFlyable();
	void SetHold(bool Hold);
	void ShouldCheckAbilitySightRange(bool* Result);
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void TriggerMechanismOrTrap();
	void UpdateSpeedOnDistance(double Distance);
	void ValidateFlyable();
	void WeakBegin();
	void WeakBegun();
	void WeakEnd();
	void WeakEnded();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Tgf_Monster_C">();
	}
	static class ABP_Tgf_Monster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Tgf_Monster_C>();
	}
};
static_assert(alignof(ABP_Tgf_Monster_C) == 0x000010, "Wrong alignment on ABP_Tgf_Monster_C");
static_assert(sizeof(ABP_Tgf_Monster_C) == 0x0010F0, "Wrong size on ABP_Tgf_Monster_C");
static_assert(offsetof(ABP_Tgf_Monster_C, UberGraphFrame_BP_Tgf_Monster_C) == 0x0009A8, "Member 'ABP_Tgf_Monster_C::UberGraphFrame_BP_Tgf_Monster_C' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, TgfMonsterReaction) == 0x0009B0, "Member 'ABP_Tgf_Monster_C::TgfMonsterReaction' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, TGFThreatManager) == 0x0009B8, "Member 'ABP_Tgf_Monster_C::TGFThreatManager' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, TgfMonsterMaterialManagerComponent) == 0x0009C0, "Member 'ABP_Tgf_Monster_C::TgfMonsterMaterialManagerComponent' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, TgfNpcStateManager) == 0x0009C8, "Member 'ABP_Tgf_Monster_C::TgfNpcStateManager' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, LootOptionComponent) == 0x0009D0, "Member 'ABP_Tgf_Monster_C::LootOptionComponent' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AudioObstacleDetection) == 0x0009D8, "Member 'ABP_Tgf_Monster_C::AudioObstacleDetection' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AGR_CombatManager) == 0x0009E0, "Member 'ABP_Tgf_Monster_C::AGR_CombatManager' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, DissipationDeath_Disappear_35685E8845C76072EB36B885C5AF8E34) == 0x0009E8, "Member 'ABP_Tgf_Monster_C::DissipationDeath_Disappear_35685E8845C76072EB36B885C5AF8E34' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, DissipationDeath__Direction_35685E8845C76072EB36B885C5AF8E34) == 0x0009EC, "Member 'ABP_Tgf_Monster_C::DissipationDeath__Direction_35685E8845C76072EB36B885C5AF8E34' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, DissipationDeath) == 0x0009F0, "Member 'ABP_Tgf_Monster_C::DissipationDeath' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, CommonFade_CharacterOpacity_830B64A440FD46C8ED2330BF3E56C5A7) == 0x0009F8, "Member 'ABP_Tgf_Monster_C::CommonFade_CharacterOpacity_830B64A440FD46C8ED2330BF3E56C5A7' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, CommonFade__Direction_830B64A440FD46C8ED2330BF3E56C5A7) == 0x0009FC, "Member 'ABP_Tgf_Monster_C::CommonFade__Direction_830B64A440FD46C8ED2330BF3E56C5A7' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, CommonFade) == 0x000A00, "Member 'ABP_Tgf_Monster_C::CommonFade' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, HitReactTimeline_Alpha_61B53E184FDC8E59ACB91D91D0FE1265) == 0x000A08, "Member 'ABP_Tgf_Monster_C::HitReactTimeline_Alpha_61B53E184FDC8E59ACB91D91D0FE1265' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, HitReactTimeline_SignDirection_61B53E184FDC8E59ACB91D91D0FE1265) == 0x000A0C, "Member 'ABP_Tgf_Monster_C::HitReactTimeline_SignDirection_61B53E184FDC8E59ACB91D91D0FE1265' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, HitReactTimeline__Direction_61B53E184FDC8E59ACB91D91D0FE1265) == 0x000A10, "Member 'ABP_Tgf_Monster_C::HitReactTimeline__Direction_61B53E184FDC8E59ACB91D91D0FE1265' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, HitReactTimeline) == 0x000A18, "Member 'ABP_Tgf_Monster_C::HitReactTimeline' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Timeline_FossRadius_0B147D49452836A43151219638BAAF42) == 0x000A20, "Member 'ABP_Tgf_Monster_C::Timeline_FossRadius_0B147D49452836A43151219638BAAF42' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Timeline__Direction_0B147D49452836A43151219638BAAF42) == 0x000A24, "Member 'ABP_Tgf_Monster_C::Timeline__Direction_0B147D49452836A43151219638BAAF42' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Timeline) == 0x000A28, "Member 'ABP_Tgf_Monster_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, HitResult) == 0x000A30, "Member 'ABP_Tgf_Monster_C::HitResult' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Hit_Actor) == 0x000B18, "Member 'ABP_Tgf_Monster_C::Hit_Actor' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Gameplay_Effect_Context_Handler) == 0x000B20, "Member 'ABP_Tgf_Monster_C::Gameplay_Effect_Context_Handler' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ActorSpawnPoint) == 0x000B38, "Member 'ABP_Tgf_Monster_C::ActorSpawnPoint' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, TraceMeshAddedCount) == 0x000B40, "Member 'ABP_Tgf_Monster_C::TraceMeshAddedCount' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AbilityRange) == 0x000B48, "Member 'ABP_Tgf_Monster_C::AbilityRange' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AbilityInterval) == 0x000B50, "Member 'ABP_Tgf_Monster_C::AbilityInterval' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AbilityIntervalRandomDeviation) == 0x000B58, "Member 'ABP_Tgf_Monster_C::AbilityIntervalRandomDeviation' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AbilityIntervalStationary) == 0x000B60, "Member 'ABP_Tgf_Monster_C::AbilityIntervalStationary' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AbilitySelector) == 0x000B68, "Member 'ABP_Tgf_Monster_C::AbilitySelector' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AbilitySelectorAlternative) == 0x000B78, "Member 'ABP_Tgf_Monster_C::AbilitySelectorAlternative' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Loot) == 0x000B88, "Member 'ABP_Tgf_Monster_C::Loot' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Dormantable) == 0x000B98, "Member 'ABP_Tgf_Monster_C::Dormantable' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, DormantTimesMax) == 0x000B9C, "Member 'ABP_Tgf_Monster_C::DormantTimesMax' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, DormantTimes) == 0x000BA0, "Member 'ABP_Tgf_Monster_C::DormantTimes' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Dormants) == 0x000BA8, "Member 'ABP_Tgf_Monster_C::Dormants' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, DormantIndex) == 0x000BB8, "Member 'ABP_Tgf_Monster_C::DormantIndex' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Dormant) == 0x000BBC, "Member 'ABP_Tgf_Monster_C::Dormant' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ThreatTargetLock) == 0x000BC0, "Member 'ABP_Tgf_Monster_C::ThreatTargetLock' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ThreatDamagedMelee) == 0x000BC8, "Member 'ABP_Tgf_Monster_C::ThreatDamagedMelee' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ThreatDamagedRanged) == 0x000BD0, "Member 'ABP_Tgf_Monster_C::ThreatDamagedRanged' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ThreatDamageTaken) == 0x000BD8, "Member 'ABP_Tgf_Monster_C::ThreatDamageTaken' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ThreatTargetLostDistance) == 0x000BE0, "Member 'ABP_Tgf_Monster_C::ThreatTargetLostDistance' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ThreatTargetLostTime) == 0x000BE8, "Member 'ABP_Tgf_Monster_C::ThreatTargetLostTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, OnThreatTargetChanged) == 0x000BF0, "Member 'ABP_Tgf_Monster_C::OnThreatTargetChanged' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, WeakTag) == 0x000C00, "Member 'ABP_Tgf_Monster_C::WeakTag' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Weak) == 0x000C20, "Member 'ABP_Tgf_Monster_C::Weak' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, WeakTime) == 0x000C28, "Member 'ABP_Tgf_Monster_C::WeakTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, RetreatRange) == 0x000C30, "Member 'ABP_Tgf_Monster_C::RetreatRange' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, RetreatChance) == 0x000C38, "Member 'ABP_Tgf_Monster_C::RetreatChance' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Retreats) == 0x000C40, "Member 'ABP_Tgf_Monster_C::Retreats' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FleeHealth) == 0x000C50, "Member 'ABP_Tgf_Monster_C::FleeHealth' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FleeChance) == 0x000C58, "Member 'ABP_Tgf_Monster_C::FleeChance' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FleeAngle) == 0x000C60, "Member 'ABP_Tgf_Monster_C::FleeAngle' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FleeDistanceMin) == 0x000C68, "Member 'ABP_Tgf_Monster_C::FleeDistanceMin' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FleeDistanceMax) == 0x000C70, "Member 'ABP_Tgf_Monster_C::FleeDistanceMax' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FleePointRadius) == 0x000C78, "Member 'ABP_Tgf_Monster_C::FleePointRadius' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FleePointCount) == 0x000C80, "Member 'ABP_Tgf_Monster_C::FleePointCount' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FleePointHoldTimeMin) == 0x000C88, "Member 'ABP_Tgf_Monster_C::FleePointHoldTimeMin' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FleePointHoldTimeMax) == 0x000C90, "Member 'ABP_Tgf_Monster_C::FleePointHoldTimeMax' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FleeState) == 0x000C98, "Member 'ABP_Tgf_Monster_C::FleeState' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FleePath) == 0x000CA0, "Member 'ABP_Tgf_Monster_C::FleePath' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AbilityTurnSpeed) == 0x000CB0, "Member 'ABP_Tgf_Monster_C::AbilityTurnSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AbilityActivatingTurnSpeed) == 0x000CB8, "Member 'ABP_Tgf_Monster_C::AbilityActivatingTurnSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Alertable) == 0x000CC0, "Member 'ABP_Tgf_Monster_C::Alertable' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AlertSuspiciousAbility) == 0x000CC8, "Member 'ABP_Tgf_Monster_C::AlertSuspiciousAbility' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AlertSearchTime) == 0x000CD0, "Member 'ABP_Tgf_Monster_C::AlertSearchTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AlertSearchEndTime) == 0x000CD8, "Member 'ABP_Tgf_Monster_C::AlertSearchEndTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AlertSearchDistance) == 0x000CE0, "Member 'ABP_Tgf_Monster_C::AlertSearchDistance' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Flyable) == 0x000CE8, "Member 'ABP_Tgf_Monster_C::Flyable' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlyTargetOffset) == 0x000CF0, "Member 'ABP_Tgf_Monster_C::FlyTargetOffset' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, WeakEndTime) == 0x000CF8, "Member 'ABP_Tgf_Monster_C::WeakEndTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, InCombat) == 0x000D00, "Member 'ABP_Tgf_Monster_C::InCombat' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, OnEnterCombat) == 0x000D08, "Member 'ABP_Tgf_Monster_C::OnEnterCombat' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, OnLeaveCombat) == 0x000D18, "Member 'ABP_Tgf_Monster_C::OnLeaveCombat' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, DeathTriggerMechanism) == 0x000D28, "Member 'ABP_Tgf_Monster_C::DeathTriggerMechanism' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, DeathTriggerTrap) == 0x000D30, "Member 'ABP_Tgf_Monster_C::DeathTriggerTrap' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, DeathTriggerParam) == 0x000D38, "Member 'ABP_Tgf_Monster_C::DeathTriggerParam' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Wanderable) == 0x000D3C, "Member 'ABP_Tgf_Monster_C::Wanderable' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, WanderRadius) == 0x000D40, "Member 'ABP_Tgf_Monster_C::WanderRadius' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, WanderInterval) == 0x000D48, "Member 'ABP_Tgf_Monster_C::WanderInterval' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, WanderIntervalRandomDeviation) == 0x000D50, "Member 'ABP_Tgf_Monster_C::WanderIntervalRandomDeviation' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, In_Element_Handle) == 0x000D58, "Member 'ABP_Tgf_Monster_C::In_Element_Handle' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankBlockedTags) == 0x000D60, "Member 'ABP_Tgf_Monster_C::FlankBlockedTags' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankChance) == 0x000D80, "Member 'ABP_Tgf_Monster_C::FlankChance' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankPointCount) == 0x000D88, "Member 'ABP_Tgf_Monster_C::FlankPointCount' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankPointCountRandomDeviation) == 0x000D8C, "Member 'ABP_Tgf_Monster_C::FlankPointCountRandomDeviation' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankDirectionConsistent) == 0x000D90, "Member 'ABP_Tgf_Monster_C::FlankDirectionConsistent' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankAngleMin) == 0x000D98, "Member 'ABP_Tgf_Monster_C::FlankAngleMin' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankAngleMax) == 0x000DA0, "Member 'ABP_Tgf_Monster_C::FlankAngleMax' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankHeightMin) == 0x000DA8, "Member 'ABP_Tgf_Monster_C::FlankHeightMin' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankHeightMax) == 0x000DB0, "Member 'ABP_Tgf_Monster_C::FlankHeightMax' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankTimeMin) == 0x000DB8, "Member 'ABP_Tgf_Monster_C::FlankTimeMin' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankTimeMax) == 0x000DC0, "Member 'ABP_Tgf_Monster_C::FlankTimeMax' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, SpeedMods) == 0x000DC8, "Member 'ABP_Tgf_Monster_C::SpeedMods' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, SpeedModMap) == 0x000DE8, "Member 'ABP_Tgf_Monster_C::SpeedModMap' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, SpeedLow) == 0x000E38, "Member 'ABP_Tgf_Monster_C::SpeedLow' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, SpeedLowEnterDistance) == 0x000E40, "Member 'ABP_Tgf_Monster_C::SpeedLowEnterDistance' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, SpeedLowLeaveDistance) == 0x000E48, "Member 'ABP_Tgf_Monster_C::SpeedLowLeaveDistance' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankSpeed) == 0x000E50, "Member 'ABP_Tgf_Monster_C::FlankSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, SpeedTagLow) == 0x000E58, "Member 'ABP_Tgf_Monster_C::SpeedTagLow' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, SpeedTagFlank) == 0x000E60, "Member 'ABP_Tgf_Monster_C::SpeedTagFlank' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, TurnSpeedMods) == 0x000E68, "Member 'ABP_Tgf_Monster_C::TurnSpeedMods' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, TurnSpeedModMap) == 0x000E88, "Member 'ABP_Tgf_Monster_C::TurnSpeedModMap' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, TurnSpeedTagLow) == 0x000ED8, "Member 'ABP_Tgf_Monster_C::TurnSpeedTagLow' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, TurnSpeedTagAbility) == 0x000EE0, "Member 'ABP_Tgf_Monster_C::TurnSpeedTagAbility' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, TurnSpeedTagAbilityActivating) == 0x000EE8, "Member 'ABP_Tgf_Monster_C::TurnSpeedTagAbilityActivating' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, AliveLoopSound) == 0x000EF0, "Member 'ABP_Tgf_Monster_C::AliveLoopSound' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, WanderIdleChance) == 0x000EF8, "Member 'ABP_Tgf_Monster_C::WanderIdleChance' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, WanderIdleDelay) == 0x000F00, "Member 'ABP_Tgf_Monster_C::WanderIdleDelay' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, WanderIdleDelayRandomDeviation) == 0x000F08, "Member 'ABP_Tgf_Monster_C::WanderIdleDelayRandomDeviation' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, WanderIdleAbility) == 0x000F10, "Member 'ABP_Tgf_Monster_C::WanderIdleAbility' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, SpeedTagRetreat) == 0x000F18, "Member 'ABP_Tgf_Monster_C::SpeedTagRetreat' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ReturnToSpawnPoint) == 0x000F28, "Member 'ABP_Tgf_Monster_C::ReturnToSpawnPoint' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, CombatTime) == 0x000F30, "Member 'ABP_Tgf_Monster_C::CombatTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankPath) == 0x000F38, "Member 'ABP_Tgf_Monster_C::FlankPath' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, EnterCombatSound) == 0x000F40, "Member 'ABP_Tgf_Monster_C::EnterCombatSound' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, TurnSpeedLow) == 0x000F48, "Member 'ABP_Tgf_Monster_C::TurnSpeedLow' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, BaseMoveSpeed) == 0x000F50, "Member 'ABP_Tgf_Monster_C::BaseMoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Looted) == 0x000F58, "Member 'ABP_Tgf_Monster_C::Looted' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, Evade) == 0x000F59, "Member 'ABP_Tgf_Monster_C::Evade' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, EvadeTime) == 0x000F60, "Member 'ABP_Tgf_Monster_C::EvadeTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ChaseFailed) == 0x000F68, "Member 'ABP_Tgf_Monster_C::ChaseFailed' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ChaseFailedTime) == 0x000F70, "Member 'ABP_Tgf_Monster_C::ChaseFailedTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, StareTime) == 0x000F78, "Member 'ABP_Tgf_Monster_C::StareTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, StareTimeRandomDeviation) == 0x000F80, "Member 'ABP_Tgf_Monster_C::StareTimeRandomDeviation' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankAfterStare) == 0x000F88, "Member 'ABP_Tgf_Monster_C::FlankAfterStare' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, SightPeripheralVisionAngleDegrees) == 0x000F90, "Member 'ABP_Tgf_Monster_C::SightPeripheralVisionAngleDegrees' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, SpeedTagBlockChangeOnDistance) == 0x000F98, "Member 'ABP_Tgf_Monster_C::SpeedTagBlockChangeOnDistance' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, CurGAIndex) == 0x000FA0, "Member 'ABP_Tgf_Monster_C::CurGAIndex' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, CurSrcGADIc) == 0x000FA8, "Member 'ABP_Tgf_Monster_C::CurSrcGADIc' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, CurSrcGA) == 0x000FF8, "Member 'ABP_Tgf_Monster_C::CurSrcGA' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ReplicatedTargetActor) == 0x001000, "Member 'ABP_Tgf_Monster_C::ReplicatedTargetActor' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, OnDormantEnterBegin) == 0x001008, "Member 'ABP_Tgf_Monster_C::OnDormantEnterBegin' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, OnDormantEnterEnd) == 0x001018, "Member 'ABP_Tgf_Monster_C::OnDormantEnterEnd' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, OnDormantLeaveBegin) == 0x001028, "Member 'ABP_Tgf_Monster_C::OnDormantLeaveBegin' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, OnDormantLeaveEnd) == 0x001038, "Member 'ABP_Tgf_Monster_C::OnDormantLeaveEnd' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, CachedVisibilityBasedAnimTickOption) == 0x001048, "Member 'ABP_Tgf_Monster_C::CachedVisibilityBasedAnimTickOption' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, CombatLeaveDistance) == 0x001050, "Member 'ABP_Tgf_Monster_C::CombatLeaveDistance' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, CombatLeaveTime) == 0x001058, "Member 'ABP_Tgf_Monster_C::CombatLeaveTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, NewVar) == 0x001060, "Member 'ABP_Tgf_Monster_C::NewVar' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, CommonFadeTime) == 0x001068, "Member 'ABP_Tgf_Monster_C::CommonFadeTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, HoldEnabled) == 0x001070, "Member 'ABP_Tgf_Monster_C::HoldEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, HoldGravityReserved) == 0x001078, "Member 'ABP_Tgf_Monster_C::HoldGravityReserved' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, SpawnLocationRelative) == 0x001080, "Member 'ABP_Tgf_Monster_C::SpawnLocationRelative' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, ActorSpawnPointLocation) == 0x001098, "Member 'ABP_Tgf_Monster_C::ActorSpawnPointLocation' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, RecoverOnLeaveCombat) == 0x0010B0, "Member 'ABP_Tgf_Monster_C::RecoverOnLeaveCombat' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, RecoverOnLeaveCombatGE) == 0x0010B8, "Member 'ABP_Tgf_Monster_C::RecoverOnLeaveCombatGE' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, RecoverSlowlyOnLeaveCombat) == 0x0010C0, "Member 'ABP_Tgf_Monster_C::RecoverSlowlyOnLeaveCombat' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, RecoverSlowlyOnLeaveCombatGE) == 0x0010C8, "Member 'ABP_Tgf_Monster_C::RecoverSlowlyOnLeaveCombatGE' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankInterruptByAttack) == 0x0010D0, "Member 'ABP_Tgf_Monster_C::FlankInterruptByAttack' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankInterruptByApproachTime) == 0x0010D8, "Member 'ABP_Tgf_Monster_C::FlankInterruptByApproachTime' has a wrong offset!");
static_assert(offsetof(ABP_Tgf_Monster_C, FlankInterruptByApproachDistance) == 0x0010E0, "Member 'ABP_Tgf_Monster_C::FlankInterruptByApproachDistance' has a wrong offset!");

}


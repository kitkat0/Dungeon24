#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NpcBehavior_Base

#include "Basic.hpp"

#include "BP_NpcBehavior_Base_classes.hpp"
#include "BP_NpcBehavior_Base_parameters.hpp"


namespace SDK
{

// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.GameplayEffectHasTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayEventData               GameplayEventData                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FGameplayTag                     Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_NpcBehavior_Base_C::GameplayEffectHasTag(const struct FGameplayEventData& GameplayEventData, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "GameplayEffectHasTag");

	Params::BP_NpcBehavior_Base_C_GameplayEffectHasTag Parms{};

	Parms.GameplayEventData = std::move(GameplayEventData);
	Parms.Tag = std::move(Tag);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.GetCombatTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NpcBehavior_Base_C::GetCombatTime(double* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "GetCombatTime");

	Params::BP_NpcBehavior_Base_C_GetCombatTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.GetFriendlyCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NpcBehavior_Base_C::GetFriendlyCount(double Range, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "GetFriendlyCount");

	Params::BP_NpcBehavior_Base_C_GetFriendlyCount Parms{};

	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.GetHealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NpcBehavior_Base_C::GetHealth(class AActor* Actor, double* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "GetHealth");

	Params::BP_NpcBehavior_Base_C_GetHealth Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.GetHealthPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NpcBehavior_Base_C::GetHealthPercent(class AActor* Actor, double* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "GetHealthPercent");

	Params::BP_NpcBehavior_Base_C_GetHealthPercent Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.GetHostileCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NpcBehavior_Base_C::GetHostileCount(double Range, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "GetHostileCount");

	Params::BP_NpcBehavior_Base_C_GetHostileCount Parms{};

	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.GetSummonsCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NpcBehavior_Base_C::GetSummonsCount(int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "GetSummonsCount");

	Params::BP_NpcBehavior_Base_C_GetSummonsCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.HasEnemyBehind
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NpcBehavior_Base_C::HasEnemyBehind(double Range, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "HasEnemyBehind");

	Params::BP_NpcBehavior_Base_C_HasEnemyBehind Parms{};

	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.IsAbility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Ability                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FGameplayEventData               EventData                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NpcBehavior_Base_C::IsAbility(class UClass* Ability, struct FGameplayEventData& EventData, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "IsAbility");

	Params::BP_NpcBehavior_Base_C_IsAbility Parms{};

	Parms.Ability = Ability;
	Parms.EventData = std::move(EventData);

	UObject::ProcessEvent(Func, &Parms);

	EventData = std::move(Parms.EventData);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.IsAtBehind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NpcBehavior_Base_C::IsAtBehind(class AActor* A, class AActor* B, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "IsAtBehind");

	Params::BP_NpcBehavior_Base_C_IsAtBehind Parms{};

	Parms.A = A;
	Parms.B = B;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.IsHostile
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NpcBehavior_Base_C::IsHostile(class AActor* Actor, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "IsHostile");

	Params::BP_NpcBehavior_Base_C_IsHostile Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.PlayerIsCareer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayEventData               EventData                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// ETgfActorCareer                         Career                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_NpcBehavior_Base_C::PlayerIsCareer(const struct FGameplayEventData& EventData, ETgfActorCareer Career)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "PlayerIsCareer");

	Params::BP_NpcBehavior_Base_C_PlayerIsCareer Parms{};

	Parms.EventData = std::move(EventData);
	Parms.Career = Career;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.RangeQueryActors
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Actors                                                 (Parm, OutParm)

void UBP_NpcBehavior_Base_C::RangeQueryActors(double Range, TArray<class AActor*>* Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "RangeQueryActors");

	Params::BP_NpcBehavior_Base_C_RangeQueryActors Parms{};

	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);

	if (Actors != nullptr)
		*Actors = std::move(Parms.Actors);
}


// Function BP_NpcBehavior_Base.BP_NpcBehavior_Base_C.SelfHealthInRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InclusiveMin                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InclusiveMax                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_NpcBehavior_Base_C::SelfHealthInRange(double Min, double Max, bool InclusiveMin, bool InclusiveMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NpcBehavior_Base_C", "SelfHealthInRange");

	Params::BP_NpcBehavior_Base_C_SelfHealthInRange Parms{};

	Parms.Min = Min;
	Parms.Max = Max;
	Parms.InclusiveMin = InclusiveMin;
	Parms.InclusiveMax = InclusiveMax;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIC_Monster_Default

#include "Basic.hpp"

#include "AIC_Monster_Default_classes.hpp"
#include "AIC_Monster_Default_parameters.hpp"


namespace SDK
{

// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityFilterBoss
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::AbilityFilterBoss(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityFilterBoss");

	Params::AIC_Monster_Default_C_AbilityFilterBoss Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityFilterEnemyBehind
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::AbilityFilterEnemyBehind(TArray<int32>& Args, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityFilterEnemyBehind");

	Params::AIC_Monster_Default_C_AbilityFilterEnemyBehind Parms{};

	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	Args = std::move(Parms.Args);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityFilterFriendlyCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::AbilityFilterFriendlyCount(TArray<int32>& Args, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityFilterFriendlyCount");

	Params::AIC_Monster_Default_C_AbilityFilterFriendlyCount Parms{};

	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	Args = std::move(Parms.Args);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityFilterHealthHigh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::AbilityFilterHealthHigh(TArray<int32>& Args, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityFilterHealthHigh");

	Params::AIC_Monster_Default_C_AbilityFilterHealthHigh Parms{};

	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	Args = std::move(Parms.Args);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityFilterHealthLow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::AbilityFilterHealthLow(TArray<int32>& Args, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityFilterHealthLow");

	Params::AIC_Monster_Default_C_AbilityFilterHealthLow Parms{};

	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	Args = std::move(Parms.Args);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityFilterHostileCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::AbilityFilterHostileCount(TArray<int32>& Args, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityFilterHostileCount");

	Params::AIC_Monster_Default_C_AbilityFilterHostileCount Parms{};

	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	Args = std::move(Parms.Args);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityFilterNone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::AbilityFilterNone(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityFilterNone");

	Params::AIC_Monster_Default_C_AbilityFilterNone Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityFilterSummonsCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::AbilityFilterSummonsCount(TArray<int32>& Args, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityFilterSummonsCount");

	Params::AIC_Monster_Default_C_AbilityFilterSummonsCount Parms{};

	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	Args = std::move(Parms.Args);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityFilterTags
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FGameplayTagContainer            Param_Tags                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::AbilityFilterTags(TArray<int32>& Args, const struct FGameplayTagContainer& Param_Tags, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityFilterTags");

	Params::AIC_Monster_Default_C_AbilityFilterTags Parms{};

	Parms.Args = std::move(Args);
	Parms.Param_Tags = std::move(Param_Tags);

	UObject::ProcessEvent(Func, &Parms);

	Args = std::move(Parms.Args);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterAlternately
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Ability                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterAlternately(class UClass* Param_Ability, TArray<class AActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterAlternately");

	Params::AIC_Monster_Default_C_AbilityTargetFilterAlternately Parms{};

	Parms.Param_Ability = Param_Ability;
	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterCareer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterCareer(TArray<class AActor*>& Targets, TArray<int32>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterCareer");

	Params::AIC_Monster_Default_C_AbilityTargetFilterCareer Parms{};

	Parms.Targets = std::move(Targets);
	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
	Args = std::move(Parms.Args);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterCareerPriority
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterCareerPriority(TArray<class AActor*>& Targets, TArray<int32>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterCareerPriority");

	Params::AIC_Monster_Default_C_AbilityTargetFilterCareerPriority Parms{};

	Parms.Targets = std::move(Targets);
	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
	Args = std::move(Parms.Args);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterFriendly
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterFriendly(TArray<class AActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterFriendly");

	Params::AIC_Monster_Default_C_AbilityTargetFilterFriendly Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterFurthest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterFurthest(TArray<class AActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterFurthest");

	Params::AIC_Monster_Default_C_AbilityTargetFilterFurthest Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterHealthHighest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterHealthHighest(TArray<class AActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterHealthHighest");

	Params::AIC_Monster_Default_C_AbilityTargetFilterHealthHighest Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterHealthLowest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterHealthLowest(TArray<class AActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterHealthLowest");

	Params::AIC_Monster_Default_C_AbilityTargetFilterHealthLowest Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterHostile
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterHostile(TArray<class AActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterHostile");

	Params::AIC_Monster_Default_C_AbilityTargetFilterHostile Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterItemEquip
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterItemEquip(TArray<class AActor*>& Targets, TArray<int32>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterItemEquip");

	Params::AIC_Monster_Default_C_AbilityTargetFilterItemEquip Parms{};

	Parms.Targets = std::move(Targets);
	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
	Args = std::move(Parms.Args);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterNearest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterNearest(TArray<class AActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterNearest");

	Params::AIC_Monster_Default_C_AbilityTargetFilterNearest Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterNone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterNone(TArray<class AActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterNone");

	Params::AIC_Monster_Default_C_AbilityTargetFilterNone Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterRace
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterRace(TArray<class AActor*>& Targets, TArray<int32>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterRace");

	Params::AIC_Monster_Default_C_AbilityTargetFilterRace Parms{};

	Parms.Targets = std::move(Targets);
	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
	Args = std::move(Parms.Args);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterRange
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterRange(TArray<class AActor*>& Targets, TArray<int32>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterRange");

	Params::AIC_Monster_Default_C_AbilityTargetFilterRange Parms{};

	Parms.Targets = std::move(Targets);
	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
	Args = std::move(Parms.Args);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterTags
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FGameplayTagContainer            Param_Tags                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void AAIC_Monster_Default_C::AbilityTargetFilterTags(TArray<class AActor*>& Targets, TArray<int32>& Args, const struct FGameplayTagContainer& Param_Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterTags");

	Params::AIC_Monster_Default_C_AbilityTargetFilterTags Parms{};

	Parms.Targets = std::move(Targets);
	Parms.Args = std::move(Args);
	Parms.Param_Tags = std::move(Param_Tags);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
	Args = std::move(Parms.Args);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterThreatHighest
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterThreatHighest(TArray<class AActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterThreatHighest");

	Params::AIC_Monster_Default_C_AbilityTargetFilterThreatHighest Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterThreatLowest
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterThreatLowest(TArray<class AActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterThreatLowest");

	Params::AIC_Monster_Default_C_AbilityTargetFilterThreatLowest Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AbilityTargetFilterThreats
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::AbilityTargetFilterThreats(TArray<class AActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AbilityTargetFilterThreats");

	Params::AIC_Monster_Default_C_AbilityTargetFilterThreats Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.AddPriorAbility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Ability                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Chance                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::AddPriorAbility(class UClass* Param_Ability, double Chance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "AddPriorAbility");

	Params::AIC_Monster_Default_C_AddPriorAbility Parms{};

	Parms.Param_Ability = Param_Ability;
	Parms.Chance = Chance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.BndEvt__AC_Monster_Test_0_AIPerception_K2Node_ComponentBoundEvent_0_ActorPerceptionUpdatedDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FAIStimulus                      Stimulus                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void AAIC_Monster_Default_C::BndEvt__AC_Monster_Test_0_AIPerception_K2Node_ComponentBoundEvent_0_ActorPerceptionUpdatedDelegate__DelegateSignature(class AActor* Actor, const struct FAIStimulus& Stimulus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "BndEvt__AC_Monster_Test_0_AIPerception_K2Node_ComponentBoundEvent_0_ActorPerceptionUpdatedDelegate__DelegateSignature");

	Params::AIC_Monster_Default_C_BndEvt__AC_Monster_Test_0_AIPerception_K2Node_ComponentBoundEvent_0_ActorPerceptionUpdatedDelegate__DelegateSignature Parms{};

	Parms.Actor = Actor;
	Parms.Stimulus = std::move(Stimulus);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.CalcDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::CalcDistance(class AActor* Target, double* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "CalcDistance");

	Params::AIC_Monster_Default_C_CalcDistance Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.ClearAbility
// (Public, BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::ClearAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "ClearAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.ClearAbilityInterval
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::ClearAbilityInterval()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "ClearAbilityInterval");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.ClearAction
// (Public, BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::ClearAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "ClearAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.ClearInterrupts
// (Public, BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::ClearInterrupts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "ClearInterrupts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.ClearPriorAbilities
// (Public, BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::ClearPriorAbilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "ClearPriorAbilities");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.ExecuteUbergraph_AIC_Monster_Default
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::ExecuteUbergraph_AIC_Monster_Default(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "ExecuteUbergraph_AIC_Monster_Default");

	Params::AIC_Monster_Default_C_ExecuteUbergraph_AIC_Monster_Default Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.FilterAbilities
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Ability                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTgfAIAbilityTarget              Param_AbilityTarget                                    (Parm, OutParm, NoDestructor)

void AAIC_Monster_Default_C::FilterAbilities(class UClass** Param_Ability, struct FTgfAIAbilityTarget* Param_AbilityTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "FilterAbilities");

	Params::AIC_Monster_Default_C_FilterAbilities Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Ability != nullptr)
		*Param_Ability = Parms.Param_Ability;

	if (Param_AbilityTarget != nullptr)
		*Param_AbilityTarget = std::move(Parms.Param_AbilityTarget);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.FilterAbility
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Ability                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTgfAIAbilityTarget              Target                                                 (Parm, OutParm, NoDestructor)

void AAIC_Monster_Default_C::FilterAbility(class UClass* Param_Ability, bool* Result, struct FTgfAIAbilityTarget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "FilterAbility");

	Params::AIC_Monster_Default_C_FilterAbility Parms{};

	Parms.Param_Ability = Param_Ability;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Target != nullptr)
		*Target = std::move(Parms.Target);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.FilterAbilityFromSelector
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTGF_FAbilitySelectorEntry>AbilitySelector                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UClass*                           Param_Ability                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTgfAIAbilityTarget              Param_AbilityTarget                                    (Parm, OutParm, NoDestructor)

void AAIC_Monster_Default_C::FilterAbilityFromSelector(TArray<struct FTGF_FAbilitySelectorEntry>& AbilitySelector, class UClass** Param_Ability, struct FTgfAIAbilityTarget* Param_AbilityTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "FilterAbilityFromSelector");

	Params::AIC_Monster_Default_C_FilterAbilityFromSelector Parms{};

	Parms.AbilitySelector = std::move(AbilitySelector);

	UObject::ProcessEvent(Func, &Parms);

	AbilitySelector = std::move(Parms.AbilitySelector);

	if (Param_Ability != nullptr)
		*Param_Ability = Parms.Param_Ability;

	if (Param_AbilityTarget != nullptr)
		*Param_AbilityTarget = std::move(Parms.Param_AbilityTarget);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.FilterAbilitySelector
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Tgf_Monster_C*                Monster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FTGF_FAbilitySelectorEntry>Result                                                 (Parm, OutParm)

void AAIC_Monster_Default_C::FilterAbilitySelector(class ABP_Tgf_Monster_C* Monster, TArray<struct FTGF_FAbilitySelectorEntry>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "FilterAbilitySelector");

	Params::AIC_Monster_Default_C_FilterAbilitySelector Parms{};

	Parms.Monster = Monster;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.FilterThreats
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::FilterThreats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "FilterThreats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.GetAbility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Result                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::GetAbility(class UClass** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "GetAbility");

	Params::AIC_Monster_Default_C_GetAbility Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.GetAbilityTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::GetAbilityTarget(class AActor** Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "GetAbilityTarget");

	Params::AIC_Monster_Default_C_GetAbilityTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Target != nullptr)
		*Target = Parms.Target;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.GetHealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::GetHealth(class AActor* Actor, double* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "GetHealth");

	Params::AIC_Monster_Default_C_GetHealth Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.GetHealthPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::GetHealthPercent(class AActor* Actor, double* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "GetHealthPercent");

	Params::AIC_Monster_Default_C_GetHealthPercent Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.HasAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::HasAction(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "HasAction");

	Params::AIC_Monster_Default_C_HasAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.IsAbilityReady
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Ability                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Ready                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::IsAbilityReady(class UClass* Param_Ability, bool* Ready)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "IsAbilityReady");

	Params::AIC_Monster_Default_C_IsAbilityReady Parms{};

	Parms.Param_Ability = Param_Ability;

	UObject::ProcessEvent(Func, &Parms);

	if (Ready != nullptr)
		*Ready = Parms.Ready;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.IsActivatingAbility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::IsActivatingAbility(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "IsActivatingAbility");

	Params::AIC_Monster_Default_C_IsActivatingAbility Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.IsHostile
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::IsHostile(class AActor* Actor, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "IsHostile");

	Params::AIC_Monster_Default_C_IsHostile Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.IsInCombat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::IsInCombat(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "IsInCombat");

	Params::AIC_Monster_Default_C_IsInCombat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.IsInCombatZone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::IsInCombatZone(const struct FVector& Location, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "IsInCombatZone");

	Params::AIC_Monster_Default_C_IsInCombatZone Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.IsTargetable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::IsTargetable(class AActor* Actor, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "IsTargetable");

	Params::AIC_Monster_Default_C_IsTargetable Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.OnDamageTaken
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            InstigatorTags                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FGameplayTagContainer            TargetTags                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayEffectSpec              Spec                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAIC_Monster_Default_C::OnDamageTaken(class AActor* Actor, const struct FGameplayTagContainer& InstigatorTags, const struct FGameplayTagContainer& TargetTags, float Damage, const struct FGameplayEffectSpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "OnDamageTaken");

	Params::AIC_Monster_Default_C_OnDamageTaken Parms{};

	Parms.Actor = Actor;
	Parms.InstigatorTags = std::move(InstigatorTags);
	Parms.TargetTags = std::move(TargetTags);
	Parms.Damage = Damage;
	Parms.Spec = std::move(Spec);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.OnDeathStarted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OwningActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::OnDeathStarted(class AActor* OwningActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "OnDeathStarted");

	Params::AIC_Monster_Default_C_OnDeathStarted Parms{};

	Parms.OwningActor = OwningActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.OnEnterCombat
// (BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::OnEnterCombat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "OnEnterCombat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.OnLeaveCombat
// (BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::OnLeaveCombat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "OnLeaveCombat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.OnReady_6FF5A7C4444669FB1B1574B96598A394
// (BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::OnReady_6FF5A7C4444669FB1B1574B96598A394()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "OnReady_6FF5A7C4444669FB1B1574B96598A394");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.OnReady_7277D2FC41BAB0DB1537B390F56F14EC
// (BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::OnReady_7277D2FC41BAB0DB1537B390F56F14EC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "OnReady_7277D2FC41BAB0DB1537B390F56F14EC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.OnThreatTargetChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::OnThreatTargetChanged(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "OnThreatTargetChanged");

	Params::AIC_Monster_Default_C_OnThreatTargetChanged Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.PickAbility
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::PickAbility(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "PickAbility");

	Params::AIC_Monster_Default_C_PickAbility Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.PickAbilityDirectly
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           InAbility                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::PickAbilityDirectly(class UClass* InAbility, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "PickAbilityDirectly");

	Params::AIC_Monster_Default_C_PickAbilityDirectly Parms{};

	Parms.InAbility = InAbility;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.PickAction
// (Public, BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::PickAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "PickAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.PostFilterAbility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           InAbility                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::PostFilterAbility(class UClass* InAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "PostFilterAbility");

	Params::AIC_Monster_Default_C_PostFilterAbility Parms{};

	Parms.InAbility = InAbility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.RangeQueryActors
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Actors                                                 (Parm, OutParm)

void AAIC_Monster_Default_C::RangeQueryActors(double Range, TArray<class AActor*>* Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "RangeQueryActors");

	Params::AIC_Monster_Default_C_RangeQueryActors Parms{};

	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);

	if (Actors != nullptr)
		*Actors = std::move(Parms.Actors);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.ReceivePossess
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            PossessedPawn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::ReceivePossess(class APawn* PossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "ReceivePossess");

	Params::AIC_Monster_Default_C_ReceivePossess Parms{};

	Parms.PossessedPawn = PossessedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "ReceiveTick");

	Params::AIC_Monster_Default_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.ReceiveUnPossess
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            UnpossessedPawn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::ReceiveUnPossess(class APawn* UnpossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "ReceiveUnPossess");

	Params::AIC_Monster_Default_C_ReceiveUnPossess Parms{};

	Parms.UnpossessedPawn = UnpossessedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.ReplicateAbilityTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::ReplicateAbilityTarget(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "ReplicateAbilityTarget");

	Params::AIC_Monster_Default_C_ReplicateAbilityTarget Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.SafeGetArg
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PrintError                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Arg                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::SafeGetArg(TArray<int32>& Args, int32 Param_Index, bool PrintError, int32* Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "SafeGetArg");

	Params::AIC_Monster_Default_C_SafeGetArg Parms{};

	Parms.Args = std::move(Args);
	Parms.Param_Index = Param_Index;
	Parms.PrintError = PrintError;

	UObject::ProcessEvent(Func, &Parms);

	Args = std::move(Parms.Args);

	if (Arg != nullptr)
		*Arg = Parms.Arg;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.SetBlackboardBoolValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             KeyName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::SetBlackboardBoolValue(class FName KeyName, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "SetBlackboardBoolValue");

	Params::AIC_Monster_Default_C_SetBlackboardBoolValue Parms{};

	Parms.KeyName = KeyName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.SetFlank
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Flank                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::SetFlank(bool Param_Flank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "SetFlank");

	Params::AIC_Monster_Default_C_SetFlank Parms{};

	Parms.Param_Flank = Param_Flank;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.SetFlee
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Flee                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::SetFlee(bool Flee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "SetFlee");

	Params::AIC_Monster_Default_C_SetFlee Parms{};

	Parms.Flee = Flee;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.SetForceTargetable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::SetForceTargetable(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "SetForceTargetable");

	Params::AIC_Monster_Default_C_SetForceTargetable Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.SetInterruptAbility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interrupt                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::SetInterruptAbility(bool Interrupt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "SetInterruptAbility");

	Params::AIC_Monster_Default_C_SetInterruptAbility Parms{};

	Parms.Interrupt = Interrupt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.SetInterruptAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interrupt                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::SetInterruptAction(bool Interrupt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "SetInterruptAction");

	Params::AIC_Monster_Default_C_SetInterruptAction Parms{};

	Parms.Interrupt = Interrupt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.SetRetreat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Retreat                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_RetreatIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::SetRetreat(bool Param_Retreat, int32 Param_RetreatIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "SetRetreat");

	Params::AIC_Monster_Default_C_SetRetreat Parms{};

	Parms.Param_Retreat = Param_Retreat;
	Parms.Param_RetreatIndex = Param_RetreatIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.SetSensesEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::SetSensesEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "SetSensesEnabled");

	Params::AIC_Monster_Default_C_SetSensesEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.ShouldPauseCombatTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_Tgf_Monster_C*                Monster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAIC_Monster_Default_C::ShouldPauseCombatTimer(class ABP_Tgf_Monster_C* Monster, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "ShouldPauseCombatTimer");

	Params::AIC_Monster_Default_C_ShouldPauseCombatTimer Parms{};

	Parms.Monster = Monster;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.StartCombatLeaveTimer
// (BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::StartCombatLeaveTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "StartCombatLeaveTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIC_Monster_Default.AIC_Monster_Default_C.StartThreatTargetTimer
// (BlueprintCallable, BlueprintEvent)

void AAIC_Monster_Default_C::StartThreatTargetTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIC_Monster_Default_C", "StartThreatTargetTimer");

	UObject::ProcessEvent(Func, nullptr);
}

}


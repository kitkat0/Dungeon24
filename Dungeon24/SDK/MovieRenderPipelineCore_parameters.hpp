#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieRenderPipelineCore

#include "Basic.hpp"

#include "MovieRenderPipelineCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MovieRenderPipelineCore.MoviePipelineSetting.SetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MoviePipelineSetting_SetIsEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineSetting_SetIsEnabled) == 0x000001, "Wrong alignment on MoviePipelineSetting_SetIsEnabled");
static_assert(sizeof(MoviePipelineSetting_SetIsEnabled) == 0x000001, "Wrong size on MoviePipelineSetting_SetIsEnabled");
static_assert(offsetof(MoviePipelineSetting_SetIsEnabled, bInEnabled) == 0x000000, "Member 'MoviePipelineSetting_SetIsEnabled::bInEnabled' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineSetting.BuildNewProcessCommandLine
// 0x0020 (0x0020 - 0x0000)
struct MoviePipelineSetting_BuildNewProcessCommandLine final
{
public:
	class FString                                 InOutUnrealURLParams;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InOutCommandLineArgs;                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineSetting_BuildNewProcessCommandLine) == 0x000008, "Wrong alignment on MoviePipelineSetting_BuildNewProcessCommandLine");
static_assert(sizeof(MoviePipelineSetting_BuildNewProcessCommandLine) == 0x000020, "Wrong size on MoviePipelineSetting_BuildNewProcessCommandLine");
static_assert(offsetof(MoviePipelineSetting_BuildNewProcessCommandLine, InOutUnrealURLParams) == 0x000000, "Member 'MoviePipelineSetting_BuildNewProcessCommandLine::InOutUnrealURLParams' has a wrong offset!");
static_assert(offsetof(MoviePipelineSetting_BuildNewProcessCommandLine, InOutCommandLineArgs) == 0x000010, "Member 'MoviePipelineSetting_BuildNewProcessCommandLine::InOutCommandLineArgs' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineSetting.BuildNewProcessCommandLineArgs
// 0x0040 (0x0040 - 0x0000)
struct MoviePipelineSetting_BuildNewProcessCommandLineArgs final
{
public:
	TArray<class FString>                         InOutUnrealURLParams;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         InOutCommandLineArgs;                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         InOutDeviceProfileCvars;                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         InOutExecCmds;                                     // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineSetting_BuildNewProcessCommandLineArgs) == 0x000008, "Wrong alignment on MoviePipelineSetting_BuildNewProcessCommandLineArgs");
static_assert(sizeof(MoviePipelineSetting_BuildNewProcessCommandLineArgs) == 0x000040, "Wrong size on MoviePipelineSetting_BuildNewProcessCommandLineArgs");
static_assert(offsetof(MoviePipelineSetting_BuildNewProcessCommandLineArgs, InOutUnrealURLParams) == 0x000000, "Member 'MoviePipelineSetting_BuildNewProcessCommandLineArgs::InOutUnrealURLParams' has a wrong offset!");
static_assert(offsetof(MoviePipelineSetting_BuildNewProcessCommandLineArgs, InOutCommandLineArgs) == 0x000010, "Member 'MoviePipelineSetting_BuildNewProcessCommandLineArgs::InOutCommandLineArgs' has a wrong offset!");
static_assert(offsetof(MoviePipelineSetting_BuildNewProcessCommandLineArgs, InOutDeviceProfileCvars) == 0x000020, "Member 'MoviePipelineSetting_BuildNewProcessCommandLineArgs::InOutDeviceProfileCvars' has a wrong offset!");
static_assert(offsetof(MoviePipelineSetting_BuildNewProcessCommandLineArgs, InOutExecCmds) == 0x000030, "Member 'MoviePipelineSetting_BuildNewProcessCommandLineArgs::InOutExecCmds' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineSetting.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MoviePipelineSetting_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineSetting_IsEnabled) == 0x000001, "Wrong alignment on MoviePipelineSetting_IsEnabled");
static_assert(sizeof(MoviePipelineSetting_IsEnabled) == 0x000001, "Wrong size on MoviePipelineSetting_IsEnabled");
static_assert(offsetof(MoviePipelineSetting_IsEnabled, ReturnValue) == 0x000000, "Member 'MoviePipelineSetting_IsEnabled::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineSetting_BlueprintBase.ReceiveSetupForPipelineImpl
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineSetting_BlueprintBase_ReceiveSetupForPipelineImpl final
{
public:
	class UMoviePipeline*                         InPipeline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineSetting_BlueprintBase_ReceiveSetupForPipelineImpl) == 0x000008, "Wrong alignment on MoviePipelineSetting_BlueprintBase_ReceiveSetupForPipelineImpl");
static_assert(sizeof(MoviePipelineSetting_BlueprintBase_ReceiveSetupForPipelineImpl) == 0x000008, "Wrong size on MoviePipelineSetting_BlueprintBase_ReceiveSetupForPipelineImpl");
static_assert(offsetof(MoviePipelineSetting_BlueprintBase_ReceiveSetupForPipelineImpl, InPipeline) == 0x000000, "Member 'MoviePipelineSetting_BlueprintBase_ReceiveSetupForPipelineImpl::InPipeline' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineSetting_BlueprintBase.ReceiveTeardownForPipelineImpl
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineSetting_BlueprintBase_ReceiveTeardownForPipelineImpl final
{
public:
	class UMoviePipeline*                         InPipeline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineSetting_BlueprintBase_ReceiveTeardownForPipelineImpl) == 0x000008, "Wrong alignment on MoviePipelineSetting_BlueprintBase_ReceiveTeardownForPipelineImpl");
static_assert(sizeof(MoviePipelineSetting_BlueprintBase_ReceiveTeardownForPipelineImpl) == 0x000008, "Wrong size on MoviePipelineSetting_BlueprintBase_ReceiveTeardownForPipelineImpl");
static_assert(offsetof(MoviePipelineSetting_BlueprintBase_ReceiveTeardownForPipelineImpl, InPipeline) == 0x000000, "Member 'MoviePipelineSetting_BlueprintBase_ReceiveTeardownForPipelineImpl::InPipeline' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineSetting_BlueprintBase.ReceiveGetFormatArguments
// 0x0150 (0x0150 - 0x0000)
struct MoviePipelineSetting_BlueprintBase_ReceiveGetFormatArguments final
{
public:
	struct FMoviePipelineFormatArgs               InOutFormatArgs;                                   // 0x0000(0x00A8)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMoviePipelineFormatArgs               ReturnValue;                                       // 0x00A8(0x00A8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineSetting_BlueprintBase_ReceiveGetFormatArguments) == 0x000008, "Wrong alignment on MoviePipelineSetting_BlueprintBase_ReceiveGetFormatArguments");
static_assert(sizeof(MoviePipelineSetting_BlueprintBase_ReceiveGetFormatArguments) == 0x000150, "Wrong size on MoviePipelineSetting_BlueprintBase_ReceiveGetFormatArguments");
static_assert(offsetof(MoviePipelineSetting_BlueprintBase_ReceiveGetFormatArguments, InOutFormatArgs) == 0x000000, "Member 'MoviePipelineSetting_BlueprintBase_ReceiveGetFormatArguments::InOutFormatArgs' has a wrong offset!");
static_assert(offsetof(MoviePipelineSetting_BlueprintBase_ReceiveGetFormatArguments, ReturnValue) == 0x0000A8, "Member 'MoviePipelineSetting_BlueprintBase_ReceiveGetFormatArguments::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MovieRenderDebugWidget.OnInitializedForPipeline
// 0x0008 (0x0008 - 0x0000)
struct MovieRenderDebugWidget_OnInitializedForPipeline final
{
public:
	class UMoviePipeline*                         ForPipeline;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieRenderDebugWidget_OnInitializedForPipeline) == 0x000008, "Wrong alignment on MovieRenderDebugWidget_OnInitializedForPipeline");
static_assert(sizeof(MovieRenderDebugWidget_OnInitializedForPipeline) == 0x000008, "Wrong size on MovieRenderDebugWidget_OnInitializedForPipeline");
static_assert(offsetof(MovieRenderDebugWidget_OnInitializedForPipeline, ForPipeline) == 0x000000, "Member 'MovieRenderDebugWidget_OnInitializedForPipeline::ForPipeline' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipeline.Initialize
// 0x0008 (0x0008 - 0x0000)
struct MoviePipeline_Initialize final
{
public:
	class UMoviePipelineExecutorJob*              InJob;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipeline_Initialize) == 0x000008, "Wrong alignment on MoviePipeline_Initialize");
static_assert(sizeof(MoviePipeline_Initialize) == 0x000008, "Wrong size on MoviePipeline_Initialize");
static_assert(offsetof(MoviePipeline_Initialize, InJob) == 0x000000, "Member 'MoviePipeline_Initialize::InJob' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipeline.RequestShutdown
// 0x0001 (0x0001 - 0x0000)
struct MoviePipeline_RequestShutdown final
{
public:
	bool                                          bIsError;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipeline_RequestShutdown) == 0x000001, "Wrong alignment on MoviePipeline_RequestShutdown");
static_assert(sizeof(MoviePipeline_RequestShutdown) == 0x000001, "Wrong size on MoviePipeline_RequestShutdown");
static_assert(offsetof(MoviePipeline_RequestShutdown, bIsError) == 0x000000, "Member 'MoviePipeline_RequestShutdown::bIsError' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipeline.SetInitializationTime
// 0x0008 (0x0008 - 0x0000)
struct MoviePipeline_SetInitializationTime final
{
public:
	struct FDateTime                              InDateTime;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipeline_SetInitializationTime) == 0x000008, "Wrong alignment on MoviePipeline_SetInitializationTime");
static_assert(sizeof(MoviePipeline_SetInitializationTime) == 0x000008, "Wrong size on MoviePipeline_SetInitializationTime");
static_assert(offsetof(MoviePipeline_SetInitializationTime, InDateTime) == 0x000000, "Member 'MoviePipeline_SetInitializationTime::InDateTime' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipeline.Shutdown
// 0x0001 (0x0001 - 0x0000)
struct MoviePipeline_Shutdown final
{
public:
	bool                                          bError;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipeline_Shutdown) == 0x000001, "Wrong alignment on MoviePipeline_Shutdown");
static_assert(sizeof(MoviePipeline_Shutdown) == 0x000001, "Wrong size on MoviePipeline_Shutdown");
static_assert(offsetof(MoviePipeline_Shutdown, bError) == 0x000000, "Member 'MoviePipeline_Shutdown::bError' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipeline.GetCurrentJob
// 0x0008 (0x0008 - 0x0000)
struct MoviePipeline_GetCurrentJob final
{
public:
	class UMoviePipelineExecutorJob*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipeline_GetCurrentJob) == 0x000008, "Wrong alignment on MoviePipeline_GetCurrentJob");
static_assert(sizeof(MoviePipeline_GetCurrentJob) == 0x000008, "Wrong size on MoviePipeline_GetCurrentJob");
static_assert(offsetof(MoviePipeline_GetCurrentJob, ReturnValue) == 0x000000, "Member 'MoviePipeline_GetCurrentJob::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipeline.GetInitializationTime
// 0x0008 (0x0008 - 0x0000)
struct MoviePipeline_GetInitializationTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipeline_GetInitializationTime) == 0x000008, "Wrong alignment on MoviePipeline_GetInitializationTime");
static_assert(sizeof(MoviePipeline_GetInitializationTime) == 0x000008, "Wrong size on MoviePipeline_GetInitializationTime");
static_assert(offsetof(MoviePipeline_GetInitializationTime, ReturnValue) == 0x000000, "Member 'MoviePipeline_GetInitializationTime::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipeline.GetPipelineMasterConfig
// 0x0008 (0x0008 - 0x0000)
struct MoviePipeline_GetPipelineMasterConfig final
{
public:
	class UMoviePipelineMasterConfig*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipeline_GetPipelineMasterConfig) == 0x000008, "Wrong alignment on MoviePipeline_GetPipelineMasterConfig");
static_assert(sizeof(MoviePipeline_GetPipelineMasterConfig) == 0x000008, "Wrong size on MoviePipeline_GetPipelineMasterConfig");
static_assert(offsetof(MoviePipeline_GetPipelineMasterConfig, ReturnValue) == 0x000000, "Member 'MoviePipeline_GetPipelineMasterConfig::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipeline.GetPreviewTexture
// 0x0008 (0x0008 - 0x0000)
struct MoviePipeline_GetPreviewTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipeline_GetPreviewTexture) == 0x000008, "Wrong alignment on MoviePipeline_GetPreviewTexture");
static_assert(sizeof(MoviePipeline_GetPreviewTexture) == 0x000008, "Wrong size on MoviePipeline_GetPreviewTexture");
static_assert(offsetof(MoviePipeline_GetPreviewTexture, ReturnValue) == 0x000000, "Member 'MoviePipeline_GetPreviewTexture::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipeline.IsShutdownRequested
// 0x0001 (0x0001 - 0x0000)
struct MoviePipeline_IsShutdownRequested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipeline_IsShutdownRequested) == 0x000001, "Wrong alignment on MoviePipeline_IsShutdownRequested");
static_assert(sizeof(MoviePipeline_IsShutdownRequested) == 0x000001, "Wrong size on MoviePipeline_IsShutdownRequested");
static_assert(offsetof(MoviePipeline_IsShutdownRequested, ReturnValue) == 0x000000, "Member 'MoviePipeline_IsShutdownRequested::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.DuplicateSequence
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineBlueprintLibrary_DuplicateSequence final
{
public:
	class UObject*                                Param_Outer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSequence*                    InSequence;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSequence*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_DuplicateSequence) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_DuplicateSequence");
static_assert(sizeof(MoviePipelineBlueprintLibrary_DuplicateSequence) == 0x000018, "Wrong size on MoviePipelineBlueprintLibrary_DuplicateSequence");
static_assert(offsetof(MoviePipelineBlueprintLibrary_DuplicateSequence, Param_Outer) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_DuplicateSequence::Param_Outer' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_DuplicateSequence, InSequence) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_DuplicateSequence::InSequence' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_DuplicateSequence, ReturnValue) == 0x000010, "Member 'MoviePipelineBlueprintLibrary_DuplicateSequence::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.FindOrGetDefaultSettingForShot
// 0x0020 (0x0020 - 0x0000)
struct MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot final
{
public:
	TSubclassOf<class UMoviePipelineSetting>      InSettingType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMoviePipelineMasterConfig*       InMasterConfig;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMoviePipelineExecutorShot*       InShot;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineSetting*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot");
static_assert(sizeof(MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot) == 0x000020, "Wrong size on MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot");
static_assert(offsetof(MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot, InSettingType) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot::InSettingType' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot, InMasterConfig) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot::InMasterConfig' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot, InShot) == 0x000010, "Member 'MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot::InShot' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot, ReturnValue) == 0x000018, "Member 'MoviePipelineBlueprintLibrary_FindOrGetDefaultSettingForShot::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCompletionPercentage
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetCompletionPercentage final
{
public:
	const class UMoviePipeline*                   InPipeline;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetCompletionPercentage) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetCompletionPercentage");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetCompletionPercentage) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetCompletionPercentage");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCompletionPercentage, InPipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetCompletionPercentage::InPipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCompletionPercentage, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetCompletionPercentage::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentAperture
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetCurrentAperture final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetCurrentAperture) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetCurrentAperture");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetCurrentAperture) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetCurrentAperture");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentAperture, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetCurrentAperture::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentAperture, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetCurrentAperture::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentExecutorShot
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetCurrentExecutorShot final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorShot*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetCurrentExecutorShot) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetCurrentExecutorShot");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetCurrentExecutorShot) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetCurrentExecutorShot");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentExecutorShot, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetCurrentExecutorShot::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentExecutorShot, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetCurrentExecutorShot::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentFocalLength
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetCurrentFocalLength final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetCurrentFocalLength) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetCurrentFocalLength");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetCurrentFocalLength) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetCurrentFocalLength");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentFocalLength, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetCurrentFocalLength::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentFocalLength, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetCurrentFocalLength::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentFocusDistance
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetCurrentFocusDistance final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetCurrentFocusDistance) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetCurrentFocusDistance");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetCurrentFocusDistance) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetCurrentFocusDistance");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentFocusDistance, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetCurrentFocusDistance::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentFocusDistance, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetCurrentFocusDistance::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentSegmentName
// 0x0038 (0x0038 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetCurrentSegmentName final
{
public:
	class UMoviePipeline*                         InMoviePipeline;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutOuterName;                                      // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   OutInnerName;                                      // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetCurrentSegmentName) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetCurrentSegmentName");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetCurrentSegmentName) == 0x000038, "Wrong size on MoviePipelineBlueprintLibrary_GetCurrentSegmentName");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentSegmentName, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetCurrentSegmentName::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentSegmentName, OutOuterName) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetCurrentSegmentName::OutOuterName' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentSegmentName, OutInnerName) == 0x000020, "Member 'MoviePipelineBlueprintLibrary_GetCurrentSegmentName::OutInnerName' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentSegmentState
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetCurrentSegmentState final
{
public:
	class UMoviePipeline*                         InMoviePipeline;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieRenderShotState                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetCurrentSegmentState) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetCurrentSegmentState");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetCurrentSegmentState) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetCurrentSegmentState");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentSegmentState, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetCurrentSegmentState::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentSegmentState, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetCurrentSegmentState::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentSegmentWorkMetrics
// 0x0030 (0x0030 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetCurrentSegmentWorkMetrics final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMoviePipelineSegmentWorkMetrics       ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetCurrentSegmentWorkMetrics) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetCurrentSegmentWorkMetrics");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetCurrentSegmentWorkMetrics) == 0x000030, "Wrong size on MoviePipelineBlueprintLibrary_GetCurrentSegmentWorkMetrics");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentSegmentWorkMetrics, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetCurrentSegmentWorkMetrics::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentSegmentWorkMetrics, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetCurrentSegmentWorkMetrics::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentSequence
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetCurrentSequence final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetCurrentSequence) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetCurrentSequence");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetCurrentSequence) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetCurrentSequence");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentSequence, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetCurrentSequence::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentSequence, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetCurrentSequence::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentShotFrameNumber
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetCurrentShotFrameNumber final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetCurrentShotFrameNumber) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetCurrentShotFrameNumber");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetCurrentShotFrameNumber) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetCurrentShotFrameNumber");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentShotFrameNumber, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetCurrentShotFrameNumber::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentShotFrameNumber, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetCurrentShotFrameNumber::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentShotTimecode
// 0x0020 (0x0020 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetCurrentShotTimecode final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimecode                              ReturnValue;                                       // 0x0008(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetCurrentShotTimecode) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetCurrentShotTimecode");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetCurrentShotTimecode) == 0x000020, "Wrong size on MoviePipelineBlueprintLibrary_GetCurrentShotTimecode");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentShotTimecode, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetCurrentShotTimecode::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetCurrentShotTimecode, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetCurrentShotTimecode::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetEffectiveOutputResolution
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetEffectiveOutputResolution final
{
public:
	class UMoviePipelineMasterConfig*             InMasterConfig;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorShot*             InPipelineExecutorShot;                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetEffectiveOutputResolution) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetEffectiveOutputResolution");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetEffectiveOutputResolution) == 0x000018, "Wrong size on MoviePipelineBlueprintLibrary_GetEffectiveOutputResolution");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetEffectiveOutputResolution, InMasterConfig) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetEffectiveOutputResolution::InMasterConfig' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetEffectiveOutputResolution, InPipelineExecutorShot) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetEffectiveOutputResolution::InPipelineExecutorShot' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetEffectiveOutputResolution, ReturnValue) == 0x000010, "Member 'MoviePipelineBlueprintLibrary_GetEffectiveOutputResolution::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetEstimatedTimeRemaining
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetEstimatedTimeRemaining final
{
public:
	const class UMoviePipeline*                   InPipeline;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              OutEstimate;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetEstimatedTimeRemaining) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetEstimatedTimeRemaining");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetEstimatedTimeRemaining) == 0x000018, "Wrong size on MoviePipelineBlueprintLibrary_GetEstimatedTimeRemaining");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetEstimatedTimeRemaining, InPipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetEstimatedTimeRemaining::InPipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetEstimatedTimeRemaining, OutEstimate) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetEstimatedTimeRemaining::OutEstimate' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetEstimatedTimeRemaining, ReturnValue) == 0x000010, "Member 'MoviePipelineBlueprintLibrary_GetEstimatedTimeRemaining::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetJobAuthor
// 0x0020 (0x0020 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetJobAuthor final
{
public:
	class UMoviePipeline*                         InMoviePipeline;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetJobAuthor) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetJobAuthor");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetJobAuthor) == 0x000020, "Wrong size on MoviePipelineBlueprintLibrary_GetJobAuthor");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetJobAuthor, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetJobAuthor::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetJobAuthor, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetJobAuthor::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetJobInitializationTime
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetJobInitializationTime final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetJobInitializationTime) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetJobInitializationTime");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetJobInitializationTime) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetJobInitializationTime");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetJobInitializationTime, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetJobInitializationTime::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetJobInitializationTime, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetJobInitializationTime::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetJobName
// 0x0020 (0x0020 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetJobName final
{
public:
	class UMoviePipeline*                         InMoviePipeline;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetJobName) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetJobName");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetJobName) == 0x000020, "Wrong size on MoviePipelineBlueprintLibrary_GetJobName");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetJobName, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetJobName::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetJobName, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetJobName::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetMapPackageName
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetMapPackageName final
{
public:
	class UMoviePipelineExecutorJob*              InJob;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetMapPackageName) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetMapPackageName");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetMapPackageName) == 0x000018, "Wrong size on MoviePipelineBlueprintLibrary_GetMapPackageName");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetMapPackageName, InJob) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetMapPackageName::InJob' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetMapPackageName, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetMapPackageName::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetMasterFrameNumber
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetMasterFrameNumber final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetMasterFrameNumber) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetMasterFrameNumber");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetMasterFrameNumber) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetMasterFrameNumber");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetMasterFrameNumber, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetMasterFrameNumber::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetMasterFrameNumber, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetMasterFrameNumber::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetMasterTimecode
// 0x0020 (0x0020 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetMasterTimecode final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimecode                              ReturnValue;                                       // 0x0008(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetMasterTimecode) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetMasterTimecode");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetMasterTimecode) == 0x000020, "Wrong size on MoviePipelineBlueprintLibrary_GetMasterTimecode");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetMasterTimecode, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetMasterTimecode::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetMasterTimecode, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetMasterTimecode::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetMoviePipelineEngineChangelistLabel
// 0x0020 (0x0020 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetMoviePipelineEngineChangelistLabel final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetMoviePipelineEngineChangelistLabel) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetMoviePipelineEngineChangelistLabel");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetMoviePipelineEngineChangelistLabel) == 0x000020, "Wrong size on MoviePipelineBlueprintLibrary_GetMoviePipelineEngineChangelistLabel");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetMoviePipelineEngineChangelistLabel, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetMoviePipelineEngineChangelistLabel::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetMoviePipelineEngineChangelistLabel, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetMoviePipelineEngineChangelistLabel::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetOverallOutputFrames
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetOverallOutputFrames final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutCurrentIndex;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTotalCount;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetOverallOutputFrames) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetOverallOutputFrames");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetOverallOutputFrames) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetOverallOutputFrames");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetOverallOutputFrames, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetOverallOutputFrames::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetOverallOutputFrames, OutCurrentIndex) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetOverallOutputFrames::OutCurrentIndex' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetOverallOutputFrames, OutTotalCount) == 0x00000C, "Member 'MoviePipelineBlueprintLibrary_GetOverallOutputFrames::OutTotalCount' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetOverallSegmentCounts
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetOverallSegmentCounts final
{
public:
	const class UMoviePipeline*                   InMoviePipeline;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutCurrentIndex;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTotalCount;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetOverallSegmentCounts) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetOverallSegmentCounts");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetOverallSegmentCounts) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetOverallSegmentCounts");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetOverallSegmentCounts, InMoviePipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetOverallSegmentCounts::InMoviePipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetOverallSegmentCounts, OutCurrentIndex) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetOverallSegmentCounts::OutCurrentIndex' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetOverallSegmentCounts, OutTotalCount) == 0x00000C, "Member 'MoviePipelineBlueprintLibrary_GetOverallSegmentCounts::OutTotalCount' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetPipelineState
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineBlueprintLibrary_GetPipelineState final
{
public:
	const class UMoviePipeline*                   InPipeline;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieRenderPipelineState                     ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_GetPipelineState) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_GetPipelineState");
static_assert(sizeof(MoviePipelineBlueprintLibrary_GetPipelineState) == 0x000010, "Wrong size on MoviePipelineBlueprintLibrary_GetPipelineState");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetPipelineState, InPipeline) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_GetPipelineState::InPipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_GetPipelineState, ReturnValue) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_GetPipelineState::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.LoadManifestFileFromString
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineBlueprintLibrary_LoadManifestFileFromString final
{
public:
	class FString                                 InManifestFilePath;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineQueue*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_LoadManifestFileFromString) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_LoadManifestFileFromString");
static_assert(sizeof(MoviePipelineBlueprintLibrary_LoadManifestFileFromString) == 0x000018, "Wrong size on MoviePipelineBlueprintLibrary_LoadManifestFileFromString");
static_assert(offsetof(MoviePipelineBlueprintLibrary_LoadManifestFileFromString, InManifestFilePath) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_LoadManifestFileFromString::InManifestFilePath' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_LoadManifestFileFromString, ReturnValue) == 0x000010, "Member 'MoviePipelineBlueprintLibrary_LoadManifestFileFromString::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.ResolveFilenameFormatArguments
// 0x01E0 (0x01E0 - 0x0000)
struct MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments final
{
public:
	class FString                                 InFormatString;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMoviePipelineFilenameResolveParams    InParams;                                          // 0x0010(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 OutFinalPath;                                      // 0x0128(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMoviePipelineFormatArgs               OutMergedFormatArgs;                               // 0x0138(0x00A8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments");
static_assert(sizeof(MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments) == 0x0001E0, "Wrong size on MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments");
static_assert(offsetof(MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments, InFormatString) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments::InFormatString' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments, InParams) == 0x000010, "Member 'MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments::InParams' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments, OutFinalPath) == 0x000128, "Member 'MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments::OutFinalPath' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments, OutMergedFormatArgs) == 0x000138, "Member 'MoviePipelineBlueprintLibrary_ResolveFilenameFormatArguments::OutMergedFormatArgs' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.ResolveVersionNumber
// 0x0120 (0x0120 - 0x0000)
struct MoviePipelineBlueprintLibrary_ResolveVersionNumber final
{
public:
	struct FMoviePipelineFilenameResolveParams    InParams;                                          // 0x0000(0x0118)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0118(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_ResolveVersionNumber) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_ResolveVersionNumber");
static_assert(sizeof(MoviePipelineBlueprintLibrary_ResolveVersionNumber) == 0x000120, "Wrong size on MoviePipelineBlueprintLibrary_ResolveVersionNumber");
static_assert(offsetof(MoviePipelineBlueprintLibrary_ResolveVersionNumber, InParams) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_ResolveVersionNumber::InParams' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_ResolveVersionNumber, ReturnValue) == 0x000118, "Member 'MoviePipelineBlueprintLibrary_ResolveVersionNumber::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.UpdateJobShotListFromSequence
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineBlueprintLibrary_UpdateJobShotListFromSequence final
{
public:
	class ULevelSequence*                         InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorJob*              InJob;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShotsChanged;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineBlueprintLibrary_UpdateJobShotListFromSequence) == 0x000008, "Wrong alignment on MoviePipelineBlueprintLibrary_UpdateJobShotListFromSequence");
static_assert(sizeof(MoviePipelineBlueprintLibrary_UpdateJobShotListFromSequence) == 0x000018, "Wrong size on MoviePipelineBlueprintLibrary_UpdateJobShotListFromSequence");
static_assert(offsetof(MoviePipelineBlueprintLibrary_UpdateJobShotListFromSequence, InSequence) == 0x000000, "Member 'MoviePipelineBlueprintLibrary_UpdateJobShotListFromSequence::InSequence' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_UpdateJobShotListFromSequence, InJob) == 0x000008, "Member 'MoviePipelineBlueprintLibrary_UpdateJobShotListFromSequence::InJob' has a wrong offset!");
static_assert(offsetof(MoviePipelineBlueprintLibrary_UpdateJobShotListFromSequence, bShotsChanged) == 0x000010, "Member 'MoviePipelineBlueprintLibrary_UpdateJobShotListFromSequence::bShotsChanged' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineConfigBase.CopyFrom
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineConfigBase_CopyFrom final
{
public:
	class UMoviePipelineConfigBase*               InConfig;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineConfigBase_CopyFrom) == 0x000008, "Wrong alignment on MoviePipelineConfigBase_CopyFrom");
static_assert(sizeof(MoviePipelineConfigBase_CopyFrom) == 0x000008, "Wrong size on MoviePipelineConfigBase_CopyFrom");
static_assert(offsetof(MoviePipelineConfigBase_CopyFrom, InConfig) == 0x000000, "Member 'MoviePipelineConfigBase_CopyFrom::InConfig' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineConfigBase.FindOrAddSettingByClass
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineConfigBase_FindOrAddSettingByClass final
{
public:
	TSubclassOf<class UMoviePipelineSetting>      InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDisabledSettings;                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMoviePipelineSetting*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineConfigBase_FindOrAddSettingByClass) == 0x000008, "Wrong alignment on MoviePipelineConfigBase_FindOrAddSettingByClass");
static_assert(sizeof(MoviePipelineConfigBase_FindOrAddSettingByClass) == 0x000018, "Wrong size on MoviePipelineConfigBase_FindOrAddSettingByClass");
static_assert(offsetof(MoviePipelineConfigBase_FindOrAddSettingByClass, InClass) == 0x000000, "Member 'MoviePipelineConfigBase_FindOrAddSettingByClass::InClass' has a wrong offset!");
static_assert(offsetof(MoviePipelineConfigBase_FindOrAddSettingByClass, bIncludeDisabledSettings) == 0x000008, "Member 'MoviePipelineConfigBase_FindOrAddSettingByClass::bIncludeDisabledSettings' has a wrong offset!");
static_assert(offsetof(MoviePipelineConfigBase_FindOrAddSettingByClass, ReturnValue) == 0x000010, "Member 'MoviePipelineConfigBase_FindOrAddSettingByClass::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineConfigBase.RemoveSetting
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineConfigBase_RemoveSetting final
{
public:
	class UMoviePipelineSetting*                  InSetting;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineConfigBase_RemoveSetting) == 0x000008, "Wrong alignment on MoviePipelineConfigBase_RemoveSetting");
static_assert(sizeof(MoviePipelineConfigBase_RemoveSetting) == 0x000008, "Wrong size on MoviePipelineConfigBase_RemoveSetting");
static_assert(offsetof(MoviePipelineConfigBase_RemoveSetting, InSetting) == 0x000000, "Member 'MoviePipelineConfigBase_RemoveSetting::InSetting' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineConfigBase.FindSettingByClass
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineConfigBase_FindSettingByClass final
{
public:
	TSubclassOf<class UMoviePipelineSetting>      InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDisabledSettings;                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMoviePipelineSetting*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineConfigBase_FindSettingByClass) == 0x000008, "Wrong alignment on MoviePipelineConfigBase_FindSettingByClass");
static_assert(sizeof(MoviePipelineConfigBase_FindSettingByClass) == 0x000018, "Wrong size on MoviePipelineConfigBase_FindSettingByClass");
static_assert(offsetof(MoviePipelineConfigBase_FindSettingByClass, InClass) == 0x000000, "Member 'MoviePipelineConfigBase_FindSettingByClass::InClass' has a wrong offset!");
static_assert(offsetof(MoviePipelineConfigBase_FindSettingByClass, bIncludeDisabledSettings) == 0x000008, "Member 'MoviePipelineConfigBase_FindSettingByClass::bIncludeDisabledSettings' has a wrong offset!");
static_assert(offsetof(MoviePipelineConfigBase_FindSettingByClass, ReturnValue) == 0x000010, "Member 'MoviePipelineConfigBase_FindSettingByClass::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineConfigBase.FindSettingsByClass
// 0x0020 (0x0020 - 0x0000)
struct MoviePipelineConfigBase_FindSettingsByClass final
{
public:
	TSubclassOf<class UMoviePipelineSetting>      InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDisabledSettings;                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMoviePipelineSetting*>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineConfigBase_FindSettingsByClass) == 0x000008, "Wrong alignment on MoviePipelineConfigBase_FindSettingsByClass");
static_assert(sizeof(MoviePipelineConfigBase_FindSettingsByClass) == 0x000020, "Wrong size on MoviePipelineConfigBase_FindSettingsByClass");
static_assert(offsetof(MoviePipelineConfigBase_FindSettingsByClass, InClass) == 0x000000, "Member 'MoviePipelineConfigBase_FindSettingsByClass::InClass' has a wrong offset!");
static_assert(offsetof(MoviePipelineConfigBase_FindSettingsByClass, bIncludeDisabledSettings) == 0x000008, "Member 'MoviePipelineConfigBase_FindSettingsByClass::bIncludeDisabledSettings' has a wrong offset!");
static_assert(offsetof(MoviePipelineConfigBase_FindSettingsByClass, ReturnValue) == 0x000010, "Member 'MoviePipelineConfigBase_FindSettingsByClass::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineConfigBase.GetUserSettings
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineConfigBase_GetUserSettings final
{
public:
	TArray<class UMoviePipelineSetting*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineConfigBase_GetUserSettings) == 0x000008, "Wrong alignment on MoviePipelineConfigBase_GetUserSettings");
static_assert(sizeof(MoviePipelineConfigBase_GetUserSettings) == 0x000010, "Wrong size on MoviePipelineConfigBase_GetUserSettings");
static_assert(offsetof(MoviePipelineConfigBase_GetUserSettings, ReturnValue) == 0x000000, "Member 'MoviePipelineConfigBase_GetUserSettings::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.ConnectSocket
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineExecutorBase_ConnectSocket final
{
public:
	class FString                                 InHostName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPort;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineExecutorBase_ConnectSocket) == 0x000008, "Wrong alignment on MoviePipelineExecutorBase_ConnectSocket");
static_assert(sizeof(MoviePipelineExecutorBase_ConnectSocket) == 0x000018, "Wrong size on MoviePipelineExecutorBase_ConnectSocket");
static_assert(offsetof(MoviePipelineExecutorBase_ConnectSocket, InHostName) == 0x000000, "Member 'MoviePipelineExecutorBase_ConnectSocket::InHostName' has a wrong offset!");
static_assert(offsetof(MoviePipelineExecutorBase_ConnectSocket, InPort) == 0x000010, "Member 'MoviePipelineExecutorBase_ConnectSocket::InPort' has a wrong offset!");
static_assert(offsetof(MoviePipelineExecutorBase_ConnectSocket, ReturnValue) == 0x000014, "Member 'MoviePipelineExecutorBase_ConnectSocket::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.Execute
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineExecutorBase_Execute final
{
public:
	class UMoviePipelineQueue*                    InPipelineQueue;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorBase_Execute) == 0x000008, "Wrong alignment on MoviePipelineExecutorBase_Execute");
static_assert(sizeof(MoviePipelineExecutorBase_Execute) == 0x000008, "Wrong size on MoviePipelineExecutorBase_Execute");
static_assert(offsetof(MoviePipelineExecutorBase_Execute, InPipelineQueue) == 0x000000, "Member 'MoviePipelineExecutorBase_Execute::InPipelineQueue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.OnExecutorErroredImpl
// 0x0028 (0x0028 - 0x0000)
struct MoviePipelineExecutorBase_OnExecutorErroredImpl final
{
public:
	class UMoviePipeline*                         ErroredPipeline;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFatal;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ErrorReason;                                       // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorBase_OnExecutorErroredImpl) == 0x000008, "Wrong alignment on MoviePipelineExecutorBase_OnExecutorErroredImpl");
static_assert(sizeof(MoviePipelineExecutorBase_OnExecutorErroredImpl) == 0x000028, "Wrong size on MoviePipelineExecutorBase_OnExecutorErroredImpl");
static_assert(offsetof(MoviePipelineExecutorBase_OnExecutorErroredImpl, ErroredPipeline) == 0x000000, "Member 'MoviePipelineExecutorBase_OnExecutorErroredImpl::ErroredPipeline' has a wrong offset!");
static_assert(offsetof(MoviePipelineExecutorBase_OnExecutorErroredImpl, bFatal) == 0x000008, "Member 'MoviePipelineExecutorBase_OnExecutorErroredImpl::bFatal' has a wrong offset!");
static_assert(offsetof(MoviePipelineExecutorBase_OnExecutorErroredImpl, ErrorReason) == 0x000010, "Member 'MoviePipelineExecutorBase_OnExecutorErroredImpl::ErrorReason' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.SendHTTPRequest
// 0x0088 (0x0088 - 0x0000)
struct MoviePipelineExecutorBase_SendHTTPRequest final
{
public:
	class FString                                 InURL;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InVerb;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InMessage;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            InHeaders;                                         // 0x0030(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineExecutorBase_SendHTTPRequest) == 0x000008, "Wrong alignment on MoviePipelineExecutorBase_SendHTTPRequest");
static_assert(sizeof(MoviePipelineExecutorBase_SendHTTPRequest) == 0x000088, "Wrong size on MoviePipelineExecutorBase_SendHTTPRequest");
static_assert(offsetof(MoviePipelineExecutorBase_SendHTTPRequest, InURL) == 0x000000, "Member 'MoviePipelineExecutorBase_SendHTTPRequest::InURL' has a wrong offset!");
static_assert(offsetof(MoviePipelineExecutorBase_SendHTTPRequest, InVerb) == 0x000010, "Member 'MoviePipelineExecutorBase_SendHTTPRequest::InVerb' has a wrong offset!");
static_assert(offsetof(MoviePipelineExecutorBase_SendHTTPRequest, InMessage) == 0x000020, "Member 'MoviePipelineExecutorBase_SendHTTPRequest::InMessage' has a wrong offset!");
static_assert(offsetof(MoviePipelineExecutorBase_SendHTTPRequest, InHeaders) == 0x000030, "Member 'MoviePipelineExecutorBase_SendHTTPRequest::InHeaders' has a wrong offset!");
static_assert(offsetof(MoviePipelineExecutorBase_SendHTTPRequest, ReturnValue) == 0x000080, "Member 'MoviePipelineExecutorBase_SendHTTPRequest::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.SendSocketMessage
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineExecutorBase_SendSocketMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineExecutorBase_SendSocketMessage) == 0x000008, "Wrong alignment on MoviePipelineExecutorBase_SendSocketMessage");
static_assert(sizeof(MoviePipelineExecutorBase_SendSocketMessage) == 0x000018, "Wrong size on MoviePipelineExecutorBase_SendSocketMessage");
static_assert(offsetof(MoviePipelineExecutorBase_SendSocketMessage, InMessage) == 0x000000, "Member 'MoviePipelineExecutorBase_SendSocketMessage::InMessage' has a wrong offset!");
static_assert(offsetof(MoviePipelineExecutorBase_SendSocketMessage, ReturnValue) == 0x000010, "Member 'MoviePipelineExecutorBase_SendSocketMessage::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.SetMoviePipelineClass
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineExecutorBase_SetMoviePipelineClass final
{
public:
	class UClass*                                 InPipelineClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorBase_SetMoviePipelineClass) == 0x000008, "Wrong alignment on MoviePipelineExecutorBase_SetMoviePipelineClass");
static_assert(sizeof(MoviePipelineExecutorBase_SetMoviePipelineClass) == 0x000008, "Wrong size on MoviePipelineExecutorBase_SetMoviePipelineClass");
static_assert(offsetof(MoviePipelineExecutorBase_SetMoviePipelineClass, InPipelineClass) == 0x000000, "Member 'MoviePipelineExecutorBase_SetMoviePipelineClass::InPipelineClass' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.SetStatusMessage
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineExecutorBase_SetStatusMessage final
{
public:
	class FString                                 InStatus;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorBase_SetStatusMessage) == 0x000008, "Wrong alignment on MoviePipelineExecutorBase_SetStatusMessage");
static_assert(sizeof(MoviePipelineExecutorBase_SetStatusMessage) == 0x000010, "Wrong size on MoviePipelineExecutorBase_SetStatusMessage");
static_assert(offsetof(MoviePipelineExecutorBase_SetStatusMessage, InStatus) == 0x000000, "Member 'MoviePipelineExecutorBase_SetStatusMessage::InStatus' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.SetStatusProgress
// 0x0004 (0x0004 - 0x0000)
struct MoviePipelineExecutorBase_SetStatusProgress final
{
public:
	float                                         InProgress;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorBase_SetStatusProgress) == 0x000004, "Wrong alignment on MoviePipelineExecutorBase_SetStatusProgress");
static_assert(sizeof(MoviePipelineExecutorBase_SetStatusProgress) == 0x000004, "Wrong size on MoviePipelineExecutorBase_SetStatusProgress");
static_assert(offsetof(MoviePipelineExecutorBase_SetStatusProgress, InProgress) == 0x000000, "Member 'MoviePipelineExecutorBase_SetStatusProgress::InProgress' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.GetStatusMessage
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineExecutorBase_GetStatusMessage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorBase_GetStatusMessage) == 0x000008, "Wrong alignment on MoviePipelineExecutorBase_GetStatusMessage");
static_assert(sizeof(MoviePipelineExecutorBase_GetStatusMessage) == 0x000010, "Wrong size on MoviePipelineExecutorBase_GetStatusMessage");
static_assert(offsetof(MoviePipelineExecutorBase_GetStatusMessage, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorBase_GetStatusMessage::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.GetStatusProgress
// 0x0004 (0x0004 - 0x0000)
struct MoviePipelineExecutorBase_GetStatusProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorBase_GetStatusProgress) == 0x000004, "Wrong alignment on MoviePipelineExecutorBase_GetStatusProgress");
static_assert(sizeof(MoviePipelineExecutorBase_GetStatusProgress) == 0x000004, "Wrong size on MoviePipelineExecutorBase_GetStatusProgress");
static_assert(offsetof(MoviePipelineExecutorBase_GetStatusProgress, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorBase_GetStatusProgress::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.IsRendering
// 0x0001 (0x0001 - 0x0000)
struct MoviePipelineExecutorBase_IsRendering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorBase_IsRendering) == 0x000001, "Wrong alignment on MoviePipelineExecutorBase_IsRendering");
static_assert(sizeof(MoviePipelineExecutorBase_IsRendering) == 0x000001, "Wrong size on MoviePipelineExecutorBase_IsRendering");
static_assert(offsetof(MoviePipelineExecutorBase_IsRendering, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorBase_IsRendering::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorBase.IsSocketConnected
// 0x0001 (0x0001 - 0x0000)
struct MoviePipelineExecutorBase_IsSocketConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorBase_IsSocketConnected) == 0x000001, "Wrong alignment on MoviePipelineExecutorBase_IsSocketConnected");
static_assert(sizeof(MoviePipelineExecutorBase_IsSocketConnected) == 0x000001, "Wrong size on MoviePipelineExecutorBase_IsSocketConnected");
static_assert(offsetof(MoviePipelineExecutorBase_IsSocketConnected, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorBase_IsSocketConnected::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineMasterConfig.GetAllSettings
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineMasterConfig_GetAllSettings final
{
public:
	bool                                          bIncludeDisabledSettings;                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeTransientSettings;                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMoviePipelineSetting*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineMasterConfig_GetAllSettings) == 0x000008, "Wrong alignment on MoviePipelineMasterConfig_GetAllSettings");
static_assert(sizeof(MoviePipelineMasterConfig_GetAllSettings) == 0x000018, "Wrong size on MoviePipelineMasterConfig_GetAllSettings");
static_assert(offsetof(MoviePipelineMasterConfig_GetAllSettings, bIncludeDisabledSettings) == 0x000000, "Member 'MoviePipelineMasterConfig_GetAllSettings::bIncludeDisabledSettings' has a wrong offset!");
static_assert(offsetof(MoviePipelineMasterConfig_GetAllSettings, bIncludeTransientSettings) == 0x000001, "Member 'MoviePipelineMasterConfig_GetAllSettings::bIncludeTransientSettings' has a wrong offset!");
static_assert(offsetof(MoviePipelineMasterConfig_GetAllSettings, ReturnValue) == 0x000008, "Member 'MoviePipelineMasterConfig_GetAllSettings::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineMasterConfig.GetEffectiveFrameRate
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineMasterConfig_GetEffectiveFrameRate final
{
public:
	const class ULevelSequence*                   InSequence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineMasterConfig_GetEffectiveFrameRate) == 0x000008, "Wrong alignment on MoviePipelineMasterConfig_GetEffectiveFrameRate");
static_assert(sizeof(MoviePipelineMasterConfig_GetEffectiveFrameRate) == 0x000010, "Wrong size on MoviePipelineMasterConfig_GetEffectiveFrameRate");
static_assert(offsetof(MoviePipelineMasterConfig_GetEffectiveFrameRate, InSequence) == 0x000000, "Member 'MoviePipelineMasterConfig_GetEffectiveFrameRate::InSequence' has a wrong offset!");
static_assert(offsetof(MoviePipelineMasterConfig_GetEffectiveFrameRate, ReturnValue) == 0x000008, "Member 'MoviePipelineMasterConfig_GetEffectiveFrameRate::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineMasterConfig.GetTransientSettings
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineMasterConfig_GetTransientSettings final
{
public:
	TArray<class UMoviePipelineSetting*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineMasterConfig_GetTransientSettings) == 0x000008, "Wrong alignment on MoviePipelineMasterConfig_GetTransientSettings");
static_assert(sizeof(MoviePipelineMasterConfig_GetTransientSettings) == 0x000010, "Wrong size on MoviePipelineMasterConfig_GetTransientSettings");
static_assert(offsetof(MoviePipelineMasterConfig_GetTransientSettings, ReturnValue) == 0x000000, "Member 'MoviePipelineMasterConfig_GetTransientSettings::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelinePythonHostExecutor.ExecuteDelayed
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelinePythonHostExecutor_ExecuteDelayed final
{
public:
	class UMoviePipelineQueue*                    InPipelineQueue;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelinePythonHostExecutor_ExecuteDelayed) == 0x000008, "Wrong alignment on MoviePipelinePythonHostExecutor_ExecuteDelayed");
static_assert(sizeof(MoviePipelinePythonHostExecutor_ExecuteDelayed) == 0x000008, "Wrong size on MoviePipelinePythonHostExecutor_ExecuteDelayed");
static_assert(offsetof(MoviePipelinePythonHostExecutor_ExecuteDelayed, InPipelineQueue) == 0x000000, "Member 'MoviePipelinePythonHostExecutor_ExecuteDelayed::InPipelineQueue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelinePythonHostExecutor.OnMapLoad
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelinePythonHostExecutor_OnMapLoad final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelinePythonHostExecutor_OnMapLoad) == 0x000008, "Wrong alignment on MoviePipelinePythonHostExecutor_OnMapLoad");
static_assert(sizeof(MoviePipelinePythonHostExecutor_OnMapLoad) == 0x000008, "Wrong size on MoviePipelinePythonHostExecutor_OnMapLoad");
static_assert(offsetof(MoviePipelinePythonHostExecutor_OnMapLoad, InWorld) == 0x000000, "Member 'MoviePipelinePythonHostExecutor_OnMapLoad::InWorld' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelinePythonHostExecutor.GetLastLoadedWorld
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelinePythonHostExecutor_GetLastLoadedWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelinePythonHostExecutor_GetLastLoadedWorld) == 0x000008, "Wrong alignment on MoviePipelinePythonHostExecutor_GetLastLoadedWorld");
static_assert(sizeof(MoviePipelinePythonHostExecutor_GetLastLoadedWorld) == 0x000008, "Wrong size on MoviePipelinePythonHostExecutor_GetLastLoadedWorld");
static_assert(offsetof(MoviePipelinePythonHostExecutor_GetLastLoadedWorld, ReturnValue) == 0x000000, "Member 'MoviePipelinePythonHostExecutor_GetLastLoadedWorld::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorShot.AllocateNewShotOverrideConfig
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineExecutorShot_AllocateNewShotOverrideConfig final
{
public:
	TSubclassOf<class UMoviePipelineShotConfig>   InConfigType;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineShotConfig*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorShot_AllocateNewShotOverrideConfig) == 0x000008, "Wrong alignment on MoviePipelineExecutorShot_AllocateNewShotOverrideConfig");
static_assert(sizeof(MoviePipelineExecutorShot_AllocateNewShotOverrideConfig) == 0x000010, "Wrong size on MoviePipelineExecutorShot_AllocateNewShotOverrideConfig");
static_assert(offsetof(MoviePipelineExecutorShot_AllocateNewShotOverrideConfig, InConfigType) == 0x000000, "Member 'MoviePipelineExecutorShot_AllocateNewShotOverrideConfig::InConfigType' has a wrong offset!");
static_assert(offsetof(MoviePipelineExecutorShot_AllocateNewShotOverrideConfig, ReturnValue) == 0x000008, "Member 'MoviePipelineExecutorShot_AllocateNewShotOverrideConfig::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorShot.SetShotOverrideConfiguration
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineExecutorShot_SetShotOverrideConfiguration final
{
public:
	class UMoviePipelineShotConfig*               InPreset;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorShot_SetShotOverrideConfiguration) == 0x000008, "Wrong alignment on MoviePipelineExecutorShot_SetShotOverrideConfiguration");
static_assert(sizeof(MoviePipelineExecutorShot_SetShotOverrideConfiguration) == 0x000008, "Wrong size on MoviePipelineExecutorShot_SetShotOverrideConfiguration");
static_assert(offsetof(MoviePipelineExecutorShot_SetShotOverrideConfiguration, InPreset) == 0x000000, "Member 'MoviePipelineExecutorShot_SetShotOverrideConfiguration::InPreset' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorShot.SetShotOverridePresetOrigin
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineExecutorShot_SetShotOverridePresetOrigin final
{
public:
	class UMoviePipelineShotConfig*               InPreset;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorShot_SetShotOverridePresetOrigin) == 0x000008, "Wrong alignment on MoviePipelineExecutorShot_SetShotOverridePresetOrigin");
static_assert(sizeof(MoviePipelineExecutorShot_SetShotOverridePresetOrigin) == 0x000008, "Wrong size on MoviePipelineExecutorShot_SetShotOverridePresetOrigin");
static_assert(offsetof(MoviePipelineExecutorShot_SetShotOverridePresetOrigin, InPreset) == 0x000000, "Member 'MoviePipelineExecutorShot_SetShotOverridePresetOrigin::InPreset' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorShot.SetStatusMessage
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineExecutorShot_SetStatusMessage final
{
public:
	class FString                                 InStatus;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorShot_SetStatusMessage) == 0x000008, "Wrong alignment on MoviePipelineExecutorShot_SetStatusMessage");
static_assert(sizeof(MoviePipelineExecutorShot_SetStatusMessage) == 0x000010, "Wrong size on MoviePipelineExecutorShot_SetStatusMessage");
static_assert(offsetof(MoviePipelineExecutorShot_SetStatusMessage, InStatus) == 0x000000, "Member 'MoviePipelineExecutorShot_SetStatusMessage::InStatus' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorShot.SetStatusProgress
// 0x0004 (0x0004 - 0x0000)
struct MoviePipelineExecutorShot_SetStatusProgress final
{
public:
	float                                         InProgress;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorShot_SetStatusProgress) == 0x000004, "Wrong alignment on MoviePipelineExecutorShot_SetStatusProgress");
static_assert(sizeof(MoviePipelineExecutorShot_SetStatusProgress) == 0x000004, "Wrong size on MoviePipelineExecutorShot_SetStatusProgress");
static_assert(offsetof(MoviePipelineExecutorShot_SetStatusProgress, InProgress) == 0x000000, "Member 'MoviePipelineExecutorShot_SetStatusProgress::InProgress' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorShot.GetCameraName
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineExecutorShot_GetCameraName final
{
public:
	int32                                         InCameraIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorShot_GetCameraName) == 0x000008, "Wrong alignment on MoviePipelineExecutorShot_GetCameraName");
static_assert(sizeof(MoviePipelineExecutorShot_GetCameraName) == 0x000018, "Wrong size on MoviePipelineExecutorShot_GetCameraName");
static_assert(offsetof(MoviePipelineExecutorShot_GetCameraName, InCameraIndex) == 0x000000, "Member 'MoviePipelineExecutorShot_GetCameraName::InCameraIndex' has a wrong offset!");
static_assert(offsetof(MoviePipelineExecutorShot_GetCameraName, ReturnValue) == 0x000008, "Member 'MoviePipelineExecutorShot_GetCameraName::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorShot.GetShotOverrideConfiguration
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineExecutorShot_GetShotOverrideConfiguration final
{
public:
	class UMoviePipelineShotConfig*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorShot_GetShotOverrideConfiguration) == 0x000008, "Wrong alignment on MoviePipelineExecutorShot_GetShotOverrideConfiguration");
static_assert(sizeof(MoviePipelineExecutorShot_GetShotOverrideConfiguration) == 0x000008, "Wrong size on MoviePipelineExecutorShot_GetShotOverrideConfiguration");
static_assert(offsetof(MoviePipelineExecutorShot_GetShotOverrideConfiguration, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorShot_GetShotOverrideConfiguration::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorShot.GetShotOverridePresetOrigin
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineExecutorShot_GetShotOverridePresetOrigin final
{
public:
	class UMoviePipelineShotConfig*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorShot_GetShotOverridePresetOrigin) == 0x000008, "Wrong alignment on MoviePipelineExecutorShot_GetShotOverridePresetOrigin");
static_assert(sizeof(MoviePipelineExecutorShot_GetShotOverridePresetOrigin) == 0x000008, "Wrong size on MoviePipelineExecutorShot_GetShotOverridePresetOrigin");
static_assert(offsetof(MoviePipelineExecutorShot_GetShotOverridePresetOrigin, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorShot_GetShotOverridePresetOrigin::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorShot.GetStatusMessage
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineExecutorShot_GetStatusMessage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorShot_GetStatusMessage) == 0x000008, "Wrong alignment on MoviePipelineExecutorShot_GetStatusMessage");
static_assert(sizeof(MoviePipelineExecutorShot_GetStatusMessage) == 0x000010, "Wrong size on MoviePipelineExecutorShot_GetStatusMessage");
static_assert(offsetof(MoviePipelineExecutorShot_GetStatusMessage, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorShot_GetStatusMessage::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorShot.GetStatusProgress
// 0x0004 (0x0004 - 0x0000)
struct MoviePipelineExecutorShot_GetStatusProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorShot_GetStatusProgress) == 0x000004, "Wrong alignment on MoviePipelineExecutorShot_GetStatusProgress");
static_assert(sizeof(MoviePipelineExecutorShot_GetStatusProgress) == 0x000004, "Wrong size on MoviePipelineExecutorShot_GetStatusProgress");
static_assert(offsetof(MoviePipelineExecutorShot_GetStatusProgress, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorShot_GetStatusProgress::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorShot.ShouldRender
// 0x0001 (0x0001 - 0x0000)
struct MoviePipelineExecutorShot_ShouldRender final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorShot_ShouldRender) == 0x000001, "Wrong alignment on MoviePipelineExecutorShot_ShouldRender");
static_assert(sizeof(MoviePipelineExecutorShot_ShouldRender) == 0x000001, "Wrong size on MoviePipelineExecutorShot_ShouldRender");
static_assert(offsetof(MoviePipelineExecutorShot_ShouldRender, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorShot_ShouldRender::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.SetConfiguration
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineExecutorJob_SetConfiguration final
{
public:
	class UMoviePipelineMasterConfig*             InPreset;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_SetConfiguration) == 0x000008, "Wrong alignment on MoviePipelineExecutorJob_SetConfiguration");
static_assert(sizeof(MoviePipelineExecutorJob_SetConfiguration) == 0x000008, "Wrong size on MoviePipelineExecutorJob_SetConfiguration");
static_assert(offsetof(MoviePipelineExecutorJob_SetConfiguration, InPreset) == 0x000000, "Member 'MoviePipelineExecutorJob_SetConfiguration::InPreset' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.SetConsumed
// 0x0001 (0x0001 - 0x0000)
struct MoviePipelineExecutorJob_SetConsumed final
{
public:
	bool                                          bInConsumed;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_SetConsumed) == 0x000001, "Wrong alignment on MoviePipelineExecutorJob_SetConsumed");
static_assert(sizeof(MoviePipelineExecutorJob_SetConsumed) == 0x000001, "Wrong size on MoviePipelineExecutorJob_SetConsumed");
static_assert(offsetof(MoviePipelineExecutorJob_SetConsumed, bInConsumed) == 0x000000, "Member 'MoviePipelineExecutorJob_SetConsumed::bInConsumed' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.SetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MoviePipelineExecutorJob_SetIsEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_SetIsEnabled) == 0x000001, "Wrong alignment on MoviePipelineExecutorJob_SetIsEnabled");
static_assert(sizeof(MoviePipelineExecutorJob_SetIsEnabled) == 0x000001, "Wrong size on MoviePipelineExecutorJob_SetIsEnabled");
static_assert(offsetof(MoviePipelineExecutorJob_SetIsEnabled, bInEnabled) == 0x000000, "Member 'MoviePipelineExecutorJob_SetIsEnabled::bInEnabled' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.SetPresetOrigin
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineExecutorJob_SetPresetOrigin final
{
public:
	class UMoviePipelineMasterConfig*             InPreset;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_SetPresetOrigin) == 0x000008, "Wrong alignment on MoviePipelineExecutorJob_SetPresetOrigin");
static_assert(sizeof(MoviePipelineExecutorJob_SetPresetOrigin) == 0x000008, "Wrong size on MoviePipelineExecutorJob_SetPresetOrigin");
static_assert(offsetof(MoviePipelineExecutorJob_SetPresetOrigin, InPreset) == 0x000000, "Member 'MoviePipelineExecutorJob_SetPresetOrigin::InPreset' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.SetSequence
// 0x0020 (0x0020 - 0x0000)
struct MoviePipelineExecutorJob_SetSequence final
{
public:
	struct FSoftObjectPath                        InSequence;                                        // 0x0000(0x0020)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_SetSequence) == 0x000008, "Wrong alignment on MoviePipelineExecutorJob_SetSequence");
static_assert(sizeof(MoviePipelineExecutorJob_SetSequence) == 0x000020, "Wrong size on MoviePipelineExecutorJob_SetSequence");
static_assert(offsetof(MoviePipelineExecutorJob_SetSequence, InSequence) == 0x000000, "Member 'MoviePipelineExecutorJob_SetSequence::InSequence' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.SetStatusMessage
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineExecutorJob_SetStatusMessage final
{
public:
	class FString                                 InStatus;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_SetStatusMessage) == 0x000008, "Wrong alignment on MoviePipelineExecutorJob_SetStatusMessage");
static_assert(sizeof(MoviePipelineExecutorJob_SetStatusMessage) == 0x000010, "Wrong size on MoviePipelineExecutorJob_SetStatusMessage");
static_assert(offsetof(MoviePipelineExecutorJob_SetStatusMessage, InStatus) == 0x000000, "Member 'MoviePipelineExecutorJob_SetStatusMessage::InStatus' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.SetStatusProgress
// 0x0004 (0x0004 - 0x0000)
struct MoviePipelineExecutorJob_SetStatusProgress final
{
public:
	float                                         InProgress;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_SetStatusProgress) == 0x000004, "Wrong alignment on MoviePipelineExecutorJob_SetStatusProgress");
static_assert(sizeof(MoviePipelineExecutorJob_SetStatusProgress) == 0x000004, "Wrong size on MoviePipelineExecutorJob_SetStatusProgress");
static_assert(offsetof(MoviePipelineExecutorJob_SetStatusProgress, InProgress) == 0x000000, "Member 'MoviePipelineExecutorJob_SetStatusProgress::InProgress' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.GetConfiguration
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineExecutorJob_GetConfiguration final
{
public:
	class UMoviePipelineMasterConfig*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_GetConfiguration) == 0x000008, "Wrong alignment on MoviePipelineExecutorJob_GetConfiguration");
static_assert(sizeof(MoviePipelineExecutorJob_GetConfiguration) == 0x000008, "Wrong size on MoviePipelineExecutorJob_GetConfiguration");
static_assert(offsetof(MoviePipelineExecutorJob_GetConfiguration, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorJob_GetConfiguration::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.GetPresetOrigin
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineExecutorJob_GetPresetOrigin final
{
public:
	class UMoviePipelineMasterConfig*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_GetPresetOrigin) == 0x000008, "Wrong alignment on MoviePipelineExecutorJob_GetPresetOrigin");
static_assert(sizeof(MoviePipelineExecutorJob_GetPresetOrigin) == 0x000008, "Wrong size on MoviePipelineExecutorJob_GetPresetOrigin");
static_assert(offsetof(MoviePipelineExecutorJob_GetPresetOrigin, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorJob_GetPresetOrigin::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.GetStatusMessage
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineExecutorJob_GetStatusMessage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_GetStatusMessage) == 0x000008, "Wrong alignment on MoviePipelineExecutorJob_GetStatusMessage");
static_assert(sizeof(MoviePipelineExecutorJob_GetStatusMessage) == 0x000010, "Wrong size on MoviePipelineExecutorJob_GetStatusMessage");
static_assert(offsetof(MoviePipelineExecutorJob_GetStatusMessage, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorJob_GetStatusMessage::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.GetStatusProgress
// 0x0004 (0x0004 - 0x0000)
struct MoviePipelineExecutorJob_GetStatusProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_GetStatusProgress) == 0x000004, "Wrong alignment on MoviePipelineExecutorJob_GetStatusProgress");
static_assert(sizeof(MoviePipelineExecutorJob_GetStatusProgress) == 0x000004, "Wrong size on MoviePipelineExecutorJob_GetStatusProgress");
static_assert(offsetof(MoviePipelineExecutorJob_GetStatusProgress, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorJob_GetStatusProgress::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.IsConsumed
// 0x0001 (0x0001 - 0x0000)
struct MoviePipelineExecutorJob_IsConsumed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_IsConsumed) == 0x000001, "Wrong alignment on MoviePipelineExecutorJob_IsConsumed");
static_assert(sizeof(MoviePipelineExecutorJob_IsConsumed) == 0x000001, "Wrong size on MoviePipelineExecutorJob_IsConsumed");
static_assert(offsetof(MoviePipelineExecutorJob_IsConsumed, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorJob_IsConsumed::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineExecutorJob.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MoviePipelineExecutorJob_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineExecutorJob_IsEnabled) == 0x000001, "Wrong alignment on MoviePipelineExecutorJob_IsEnabled");
static_assert(sizeof(MoviePipelineExecutorJob_IsEnabled) == 0x000001, "Wrong size on MoviePipelineExecutorJob_IsEnabled");
static_assert(offsetof(MoviePipelineExecutorJob_IsEnabled, ReturnValue) == 0x000000, "Member 'MoviePipelineExecutorJob_IsEnabled::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueue.AllocateNewJob
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineQueue_AllocateNewJob final
{
public:
	TSubclassOf<class UMoviePipelineExecutorJob>  InJobType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorJob*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueue_AllocateNewJob) == 0x000008, "Wrong alignment on MoviePipelineQueue_AllocateNewJob");
static_assert(sizeof(MoviePipelineQueue_AllocateNewJob) == 0x000010, "Wrong size on MoviePipelineQueue_AllocateNewJob");
static_assert(offsetof(MoviePipelineQueue_AllocateNewJob, InJobType) == 0x000000, "Member 'MoviePipelineQueue_AllocateNewJob::InJobType' has a wrong offset!");
static_assert(offsetof(MoviePipelineQueue_AllocateNewJob, ReturnValue) == 0x000008, "Member 'MoviePipelineQueue_AllocateNewJob::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueue.CopyFrom
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineQueue_CopyFrom final
{
public:
	class UMoviePipelineQueue*                    InQueue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueue_CopyFrom) == 0x000008, "Wrong alignment on MoviePipelineQueue_CopyFrom");
static_assert(sizeof(MoviePipelineQueue_CopyFrom) == 0x000008, "Wrong size on MoviePipelineQueue_CopyFrom");
static_assert(offsetof(MoviePipelineQueue_CopyFrom, InQueue) == 0x000000, "Member 'MoviePipelineQueue_CopyFrom::InQueue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueue.DeleteJob
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineQueue_DeleteJob final
{
public:
	class UMoviePipelineExecutorJob*              InJob;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueue_DeleteJob) == 0x000008, "Wrong alignment on MoviePipelineQueue_DeleteJob");
static_assert(sizeof(MoviePipelineQueue_DeleteJob) == 0x000008, "Wrong size on MoviePipelineQueue_DeleteJob");
static_assert(offsetof(MoviePipelineQueue_DeleteJob, InJob) == 0x000000, "Member 'MoviePipelineQueue_DeleteJob::InJob' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueue.DuplicateJob
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineQueue_DuplicateJob final
{
public:
	class UMoviePipelineExecutorJob*              InJob;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorJob*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueue_DuplicateJob) == 0x000008, "Wrong alignment on MoviePipelineQueue_DuplicateJob");
static_assert(sizeof(MoviePipelineQueue_DuplicateJob) == 0x000010, "Wrong size on MoviePipelineQueue_DuplicateJob");
static_assert(offsetof(MoviePipelineQueue_DuplicateJob, InJob) == 0x000000, "Member 'MoviePipelineQueue_DuplicateJob::InJob' has a wrong offset!");
static_assert(offsetof(MoviePipelineQueue_DuplicateJob, ReturnValue) == 0x000008, "Member 'MoviePipelineQueue_DuplicateJob::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueue.SetJobIndex
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineQueue_SetJobIndex final
{
public:
	class UMoviePipelineExecutorJob*              InJob;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineQueue_SetJobIndex) == 0x000008, "Wrong alignment on MoviePipelineQueue_SetJobIndex");
static_assert(sizeof(MoviePipelineQueue_SetJobIndex) == 0x000010, "Wrong size on MoviePipelineQueue_SetJobIndex");
static_assert(offsetof(MoviePipelineQueue_SetJobIndex, InJob) == 0x000000, "Member 'MoviePipelineQueue_SetJobIndex::InJob' has a wrong offset!");
static_assert(offsetof(MoviePipelineQueue_SetJobIndex, Param_Index) == 0x000008, "Member 'MoviePipelineQueue_SetJobIndex::Param_Index' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueue.GetJobs
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineQueue_GetJobs final
{
public:
	TArray<class UMoviePipelineExecutorJob*>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueue_GetJobs) == 0x000008, "Wrong alignment on MoviePipelineQueue_GetJobs");
static_assert(sizeof(MoviePipelineQueue_GetJobs) == 0x000010, "Wrong size on MoviePipelineQueue_GetJobs");
static_assert(offsetof(MoviePipelineQueue_GetJobs, ReturnValue) == 0x000000, "Member 'MoviePipelineQueue_GetJobs::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.AllocateJob
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineQueueEngineSubsystem_AllocateJob final
{
public:
	class ULevelSequence*                         InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorJob*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueueEngineSubsystem_AllocateJob) == 0x000008, "Wrong alignment on MoviePipelineQueueEngineSubsystem_AllocateJob");
static_assert(sizeof(MoviePipelineQueueEngineSubsystem_AllocateJob) == 0x000010, "Wrong size on MoviePipelineQueueEngineSubsystem_AllocateJob");
static_assert(offsetof(MoviePipelineQueueEngineSubsystem_AllocateJob, InSequence) == 0x000000, "Member 'MoviePipelineQueueEngineSubsystem_AllocateJob::InSequence' has a wrong offset!");
static_assert(offsetof(MoviePipelineQueueEngineSubsystem_AllocateJob, ReturnValue) == 0x000008, "Member 'MoviePipelineQueueEngineSubsystem_AllocateJob::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.RenderJob
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineQueueEngineSubsystem_RenderJob final
{
public:
	class UMoviePipelineExecutorJob*              InJob;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueueEngineSubsystem_RenderJob) == 0x000008, "Wrong alignment on MoviePipelineQueueEngineSubsystem_RenderJob");
static_assert(sizeof(MoviePipelineQueueEngineSubsystem_RenderJob) == 0x000008, "Wrong size on MoviePipelineQueueEngineSubsystem_RenderJob");
static_assert(offsetof(MoviePipelineQueueEngineSubsystem_RenderJob, InJob) == 0x000000, "Member 'MoviePipelineQueueEngineSubsystem_RenderJob::InJob' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.RenderQueueWithExecutor
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutor final
{
public:
	TSubclassOf<class UMoviePipelineExecutorBase> InExecutorType;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorBase*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutor) == 0x000008, "Wrong alignment on MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutor");
static_assert(sizeof(MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutor) == 0x000010, "Wrong size on MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutor");
static_assert(offsetof(MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutor, InExecutorType) == 0x000000, "Member 'MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutor::InExecutorType' has a wrong offset!");
static_assert(offsetof(MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutor, ReturnValue) == 0x000008, "Member 'MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutor::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.RenderQueueWithExecutorInstance
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutorInstance final
{
public:
	class UMoviePipelineExecutorBase*             InExecutor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutorInstance) == 0x000008, "Wrong alignment on MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutorInstance");
static_assert(sizeof(MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutorInstance) == 0x000008, "Wrong size on MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutorInstance");
static_assert(offsetof(MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutorInstance, InExecutor) == 0x000000, "Member 'MoviePipelineQueueEngineSubsystem_RenderQueueWithExecutorInstance::InExecutor' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.SetConfiguration
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineQueueEngineSubsystem_SetConfiguration final
{
public:
	TSubclassOf<class UMovieRenderDebugWidget>    InProgressWidgetClass;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderPlayerViewport;                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineQueueEngineSubsystem_SetConfiguration) == 0x000008, "Wrong alignment on MoviePipelineQueueEngineSubsystem_SetConfiguration");
static_assert(sizeof(MoviePipelineQueueEngineSubsystem_SetConfiguration) == 0x000010, "Wrong size on MoviePipelineQueueEngineSubsystem_SetConfiguration");
static_assert(offsetof(MoviePipelineQueueEngineSubsystem_SetConfiguration, InProgressWidgetClass) == 0x000000, "Member 'MoviePipelineQueueEngineSubsystem_SetConfiguration::InProgressWidgetClass' has a wrong offset!");
static_assert(offsetof(MoviePipelineQueueEngineSubsystem_SetConfiguration, bRenderPlayerViewport) == 0x000008, "Member 'MoviePipelineQueueEngineSubsystem_SetConfiguration::bRenderPlayerViewport' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.GetActiveExecutor
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineQueueEngineSubsystem_GetActiveExecutor final
{
public:
	class UMoviePipelineExecutorBase*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueueEngineSubsystem_GetActiveExecutor) == 0x000008, "Wrong alignment on MoviePipelineQueueEngineSubsystem_GetActiveExecutor");
static_assert(sizeof(MoviePipelineQueueEngineSubsystem_GetActiveExecutor) == 0x000008, "Wrong size on MoviePipelineQueueEngineSubsystem_GetActiveExecutor");
static_assert(offsetof(MoviePipelineQueueEngineSubsystem_GetActiveExecutor, ReturnValue) == 0x000000, "Member 'MoviePipelineQueueEngineSubsystem_GetActiveExecutor::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.GetQueue
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineQueueEngineSubsystem_GetQueue final
{
public:
	class UMoviePipelineQueue*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueueEngineSubsystem_GetQueue) == 0x000008, "Wrong alignment on MoviePipelineQueueEngineSubsystem_GetQueue");
static_assert(sizeof(MoviePipelineQueueEngineSubsystem_GetQueue) == 0x000008, "Wrong size on MoviePipelineQueueEngineSubsystem_GetQueue");
static_assert(offsetof(MoviePipelineQueueEngineSubsystem_GetQueue, ReturnValue) == 0x000000, "Member 'MoviePipelineQueueEngineSubsystem_GetQueue::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.IsRendering
// 0x0001 (0x0001 - 0x0000)
struct MoviePipelineQueueEngineSubsystem_IsRendering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineQueueEngineSubsystem_IsRendering) == 0x000001, "Wrong alignment on MoviePipelineQueueEngineSubsystem_IsRendering");
static_assert(sizeof(MoviePipelineQueueEngineSubsystem_IsRendering) == 0x000001, "Wrong size on MoviePipelineQueueEngineSubsystem_IsRendering");
static_assert(offsetof(MoviePipelineQueueEngineSubsystem_IsRendering, ReturnValue) == 0x000000, "Member 'MoviePipelineQueueEngineSubsystem_IsRendering::ReturnValue' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AbilitySelectionComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "LyraGame_structs.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AbilitySelectionComponent.BP_AbilitySelectionComponent_C
// 0x0098 (0x0140 - 0x00A8)
class UBP_AbilitySelectionComponent_C final : public UControllerComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 OwnerActor;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ALyraPlayerController*                  OwnerController;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurTargetActor;                                    // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreNoActiveAbility;                             // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x00D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           AddTag;                                            // 0x00F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SearchDistance;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HasTargetSearchDistance;                           // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HasTargetDegree;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSelectionTargetChanged;                          // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTagContainer                  TargetShouldNotHasTags;                            // 0x0120(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void CheckAndSwitchTarget(class AActor* OldTarget, class AActor* NewTarget);
	void CheckValidBase(bool* CheckResult);
	void ExecuteUbergraph_BP_AbilitySelectionComponent(int32 EntryPoint);
	void OnSelectionTargetChanged__DelegateSignature(class AActor* OldTarget, class AActor* NewTarget);
	void ProcessResult();
	void ProcessSelection();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AbilitySelectionComponent_C">();
	}
	static class UBP_AbilitySelectionComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AbilitySelectionComponent_C>();
	}
};
static_assert(alignof(UBP_AbilitySelectionComponent_C) == 0x000008, "Wrong alignment on UBP_AbilitySelectionComponent_C");
static_assert(sizeof(UBP_AbilitySelectionComponent_C) == 0x000140, "Wrong size on UBP_AbilitySelectionComponent_C");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, UberGraphFrame) == 0x0000A8, "Member 'UBP_AbilitySelectionComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, OwnerActor) == 0x0000B0, "Member 'UBP_AbilitySelectionComponent_C::OwnerActor' has a wrong offset!");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, OwnerController) == 0x0000B8, "Member 'UBP_AbilitySelectionComponent_C::OwnerController' has a wrong offset!");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, CurTargetActor) == 0x0000C0, "Member 'UBP_AbilitySelectionComponent_C::CurTargetActor' has a wrong offset!");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, IgnoreNoActiveAbility) == 0x0000C8, "Member 'UBP_AbilitySelectionComponent_C::IgnoreNoActiveAbility' has a wrong offset!");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, RequiredTags) == 0x0000D0, "Member 'UBP_AbilitySelectionComponent_C::RequiredTags' has a wrong offset!");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, AddTag) == 0x0000F0, "Member 'UBP_AbilitySelectionComponent_C::AddTag' has a wrong offset!");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, SearchDistance) == 0x0000F8, "Member 'UBP_AbilitySelectionComponent_C::SearchDistance' has a wrong offset!");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, HasTargetSearchDistance) == 0x000100, "Member 'UBP_AbilitySelectionComponent_C::HasTargetSearchDistance' has a wrong offset!");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, HasTargetDegree) == 0x000108, "Member 'UBP_AbilitySelectionComponent_C::HasTargetDegree' has a wrong offset!");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, OnSelectionTargetChanged) == 0x000110, "Member 'UBP_AbilitySelectionComponent_C::OnSelectionTargetChanged' has a wrong offset!");
static_assert(offsetof(UBP_AbilitySelectionComponent_C, TargetShouldNotHasTags) == 0x000120, "Member 'UBP_AbilitySelectionComponent_C::TargetShouldNotHasTags' has a wrong offset!");

}


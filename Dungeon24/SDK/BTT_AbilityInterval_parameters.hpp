#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AbilityInterval

#include "Basic.hpp"


namespace SDK::Params
{

// Function BTT_AbilityInterval.BTT_AbilityInterval_C.ExecuteUbergraph_BTT_AbilityInterval
// 0x0058 (0x0058 - 0x0000)
struct BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_2;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_2;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInAbilityInterval_Result;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInAbilityInterval_Result_1;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval) == 0x000008, "Wrong alignment on BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval");
static_assert(sizeof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval) == 0x000058, "Wrong size on BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval");
static_assert(offsetof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval, EntryPoint) == 0x000000, "Member 'BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval, K2Node_Event_OwnerController_2) == 0x000008, "Member 'BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval::K2Node_Event_OwnerController_2' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval, K2Node_Event_ControlledPawn_2) == 0x000010, "Member 'BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval::K2Node_Event_ControlledPawn_2' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval, K2Node_Event_OwnerController_1) == 0x000020, "Member 'BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval, K2Node_Event_ControlledPawn_1) == 0x000028, "Member 'BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval, CallFunc_IsInAbilityInterval_Result) == 0x000030, "Member 'BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval::CallFunc_IsInAbilityInterval_Result' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval, K2Node_Event_OwnerController) == 0x000038, "Member 'BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval, K2Node_Event_ControlledPawn) == 0x000040, "Member 'BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval, CallFunc_IsInAbilityInterval_Result_1) == 0x000048, "Member 'BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval::CallFunc_IsInAbilityInterval_Result_1' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000050, "Member 'BTT_AbilityInterval_C_ExecuteUbergraph_BTT_AbilityInterval::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");

// Function BTT_AbilityInterval.BTT_AbilityInterval_C.IsInAbilityInterval
// 0x0020 (0x0020 - 0x0000)
struct BTT_AbilityInterval_C_IsInAbilityInterval final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetTimeSeconds_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBlackboardValueAsFloat_ReturnValue;    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_AbilityInterval_C_IsInAbilityInterval) == 0x000008, "Wrong alignment on BTT_AbilityInterval_C_IsInAbilityInterval");
static_assert(sizeof(BTT_AbilityInterval_C_IsInAbilityInterval) == 0x000020, "Wrong size on BTT_AbilityInterval_C_IsInAbilityInterval");
static_assert(offsetof(BTT_AbilityInterval_C_IsInAbilityInterval, Result) == 0x000000, "Member 'BTT_AbilityInterval_C_IsInAbilityInterval::Result' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_IsInAbilityInterval, CallFunc_GetTimeSeconds_ReturnValue) == 0x000008, "Member 'BTT_AbilityInterval_C_IsInAbilityInterval::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_IsInAbilityInterval, CallFunc_GetBlackboardValueAsFloat_ReturnValue) == 0x000010, "Member 'BTT_AbilityInterval_C_IsInAbilityInterval::CallFunc_GetBlackboardValueAsFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_IsInAbilityInterval, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000014, "Member 'BTT_AbilityInterval_C_IsInAbilityInterval::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_IsInAbilityInterval, CallFunc_Less_DoubleDouble_B_ImplicitCast) == 0x000018, "Member 'BTT_AbilityInterval_C_IsInAbilityInterval::CallFunc_Less_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function BTT_AbilityInterval.BTT_AbilityInterval_C.ReceiveAbortAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_AbilityInterval_C_ReceiveAbortAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_AbilityInterval_C_ReceiveAbortAI) == 0x000008, "Wrong alignment on BTT_AbilityInterval_C_ReceiveAbortAI");
static_assert(sizeof(BTT_AbilityInterval_C_ReceiveAbortAI) == 0x000010, "Wrong size on BTT_AbilityInterval_C_ReceiveAbortAI");
static_assert(offsetof(BTT_AbilityInterval_C_ReceiveAbortAI, OwnerController) == 0x000000, "Member 'BTT_AbilityInterval_C_ReceiveAbortAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ReceiveAbortAI, ControlledPawn) == 0x000008, "Member 'BTT_AbilityInterval_C_ReceiveAbortAI::ControlledPawn' has a wrong offset!");

// Function BTT_AbilityInterval.BTT_AbilityInterval_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_AbilityInterval_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_AbilityInterval_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_AbilityInterval_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_AbilityInterval_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_AbilityInterval_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_AbilityInterval_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_AbilityInterval_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_AbilityInterval_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// Function BTT_AbilityInterval.BTT_AbilityInterval_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTT_AbilityInterval_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_AbilityInterval_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTT_AbilityInterval_C_ReceiveTickAI");
static_assert(sizeof(BTT_AbilityInterval_C_ReceiveTickAI) == 0x000018, "Wrong size on BTT_AbilityInterval_C_ReceiveTickAI");
static_assert(offsetof(BTT_AbilityInterval_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTT_AbilityInterval_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTT_AbilityInterval_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_AbilityInterval_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTT_AbilityInterval_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

}


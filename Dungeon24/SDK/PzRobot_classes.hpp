#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PzRobot

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "PzRobot_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Class PzRobot.PzRobotAction
// 0x0000 (0x0028 - 0x0028)
class UPzRobotAction final : public UObject
{
public:
	bool AI(const class FString& Param) const;
	void AI_Reset() const;
	bool ClientTravel(const class FString& Param) const;
	void ClientTravel_Reset() const;
	bool GM(const class FString& Param) const;
	void GM_Reset() const;
	bool InputLookMouse(const class FString& Param) const;
	void InputLookMouse_Reset() const;
	bool InputTag(const class FString& Param) const;
	void InputTag_Reset() const;
	bool Move(const class FString& Param) const;
	void Move_Reset() const;
	bool MoveToPosition(const class FString& Param) const;
	void MoveToPosition_Reset() const;
	bool MoveToward(const class FString& Param) const;
	void MoveToward_Reset() const;
	bool RandomToPosition(const class FString& Param) const;
	void RandomToPosition_Reset() const;
	bool Sleep(const class FString& Param) const;
	void Sleep_Reset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PzRobotAction">();
	}
	static class UPzRobotAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPzRobotAction>();
	}
};
static_assert(alignof(UPzRobotAction) == 0x000008, "Wrong alignment on UPzRobotAction");
static_assert(sizeof(UPzRobotAction) == 0x000028, "Wrong size on UPzRobotAction");

// Class PzRobot.PzRobotAIController
// 0x0108 (0x0130 - 0x0028)
class UPzRobotAIController final : public UObject
{
public:
	class UPzRobotAction*                         PzRobotActionObj;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class ATgfStaticInteraction*                  TargetInterableActor;                              // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         TargetEnemyActor;                                  // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         DealedInterableActors;                             // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         DealedEnemyActors;                                 // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         FailedInterableActors;                             // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         FailedEnemyActors;                                 // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x48];                                      // 0x00A0(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class ATgfStaticInteraction*                  TargetExtractDevice;                               // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetExtractPortal;                               // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x30];                                      // 0x00F8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	ERobotStatus                                  Status_;                                           // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckActorVisible(class AActor* TargetActor);
	bool CheckNavigateFinish();
	TArray<class AActor*> DetectActors(const TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, const TArray<class AActor*>& ActorsToIgnore, float Radius);
	class ALyraCharacter* DetectEnemyActor();
	void DetectExtractDevices();
	class ATgfStaticInteraction* DetectInteractActor();
	void DoAttack();
	void DoInteract();
	bool DoRandomAttackAction();
	void EnterExtractPortal();
	struct FVector GetPlayerCurrentLocation();
	struct FVector GetRandomDstLocation(float Radius);
	void Initialize();
	void NavigateToEnemy();
	void NavigateToInteraction();
	void NavigateToRandom();
	void Navigation(const struct FVector& DstLocation);
	void NavigationToActor(const class AActor* TargetActor);
	bool ReleaseFireQAndFireE();
	void RotateToEnemy();
	void RotateToInteraction();
	void SetPlayerMoveRotation();
	void SetRobotStatus(ERobotStatus St);
	bool SetRotationToLocation(const struct FVector& Location);
	void TickDetectActor();
	void UnInitialize();

	ERobotStatus GetRobotStatus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PzRobotAIController">();
	}
	static class UPzRobotAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPzRobotAIController>();
	}
};
static_assert(alignof(UPzRobotAIController) == 0x000008, "Wrong alignment on UPzRobotAIController");
static_assert(sizeof(UPzRobotAIController) == 0x000130, "Wrong size on UPzRobotAIController");
static_assert(offsetof(UPzRobotAIController, PzRobotActionObj) == 0x000028, "Member 'UPzRobotAIController::PzRobotActionObj' has a wrong offset!");
static_assert(offsetof(UPzRobotAIController, TargetInterableActor) == 0x000050, "Member 'UPzRobotAIController::TargetInterableActor' has a wrong offset!");
static_assert(offsetof(UPzRobotAIController, TargetEnemyActor) == 0x000058, "Member 'UPzRobotAIController::TargetEnemyActor' has a wrong offset!");
static_assert(offsetof(UPzRobotAIController, DealedInterableActors) == 0x000060, "Member 'UPzRobotAIController::DealedInterableActors' has a wrong offset!");
static_assert(offsetof(UPzRobotAIController, DealedEnemyActors) == 0x000070, "Member 'UPzRobotAIController::DealedEnemyActors' has a wrong offset!");
static_assert(offsetof(UPzRobotAIController, FailedInterableActors) == 0x000080, "Member 'UPzRobotAIController::FailedInterableActors' has a wrong offset!");
static_assert(offsetof(UPzRobotAIController, FailedEnemyActors) == 0x000090, "Member 'UPzRobotAIController::FailedEnemyActors' has a wrong offset!");
static_assert(offsetof(UPzRobotAIController, TargetExtractDevice) == 0x0000E8, "Member 'UPzRobotAIController::TargetExtractDevice' has a wrong offset!");
static_assert(offsetof(UPzRobotAIController, TargetExtractPortal) == 0x0000F0, "Member 'UPzRobotAIController::TargetExtractPortal' has a wrong offset!");
static_assert(offsetof(UPzRobotAIController, Status_) == 0x000128, "Member 'UPzRobotAIController::Status_' has a wrong offset!");

}


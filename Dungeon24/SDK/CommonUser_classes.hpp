#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonUser

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CommonUser_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class CommonUser.AsyncAction_CommonUserInitialize
// 0x0040 (0x0070 - 0x0030)
class UAsyncAction_CommonUserInitialize final : public UCancellableAsyncAction
{
public:
	FMulticastInlineDelegateProperty_             OnInitializationComplete;                          // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x30];                                      // 0x0040(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAsyncAction_CommonUserInitialize* InitializeForLocalPlay(class UCommonUserSubsystem* Target, int32 LocalPlayerIndex, const struct FInputDeviceId& PrimaryInputDevice, bool bCanUseGuestLogin);
	static class UAsyncAction_CommonUserInitialize* LoginForOnlinePlay(class UCommonUserSubsystem* Target, int32 LocalPlayerIndex);

	void HandleInitializationComplete(const class UCommonUserInfo* UserInfo, bool bSuccess, const class FText& Error, ECommonUserPrivilege RequestedPrivilege, ECommonUserOnlineContext OnlineContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncAction_CommonUserInitialize">();
	}
	static class UAsyncAction_CommonUserInitialize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncAction_CommonUserInitialize>();
	}
};
static_assert(alignof(UAsyncAction_CommonUserInitialize) == 0x000008, "Wrong alignment on UAsyncAction_CommonUserInitialize");
static_assert(sizeof(UAsyncAction_CommonUserInitialize) == 0x000070, "Wrong size on UAsyncAction_CommonUserInitialize");
static_assert(offsetof(UAsyncAction_CommonUserInitialize, OnInitializationComplete) == 0x000030, "Member 'UAsyncAction_CommonUserInitialize::OnInitializationComplete' has a wrong offset!");

// Class CommonUser.CommonSession_HostSessionRequest
// 0x0080 (0x00A8 - 0x0028)
class UCommonSession_HostSessionRequest final : public UObject
{
public:
	ECommonSessionOnlineMode                      OnlineMode;                                        // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLobbies;                                       // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModeNameForAdvertisement;                          // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        MapId;                                             // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraArgs;                                         // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MaxPlayerCount;                                    // 0x00A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonSession_HostSessionRequest">();
	}
	static class UCommonSession_HostSessionRequest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonSession_HostSessionRequest>();
	}
};
static_assert(alignof(UCommonSession_HostSessionRequest) == 0x000008, "Wrong alignment on UCommonSession_HostSessionRequest");
static_assert(sizeof(UCommonSession_HostSessionRequest) == 0x0000A8, "Wrong size on UCommonSession_HostSessionRequest");
static_assert(offsetof(UCommonSession_HostSessionRequest, OnlineMode) == 0x000028, "Member 'UCommonSession_HostSessionRequest::OnlineMode' has a wrong offset!");
static_assert(offsetof(UCommonSession_HostSessionRequest, bUseLobbies) == 0x000029, "Member 'UCommonSession_HostSessionRequest::bUseLobbies' has a wrong offset!");
static_assert(offsetof(UCommonSession_HostSessionRequest, ModeNameForAdvertisement) == 0x000030, "Member 'UCommonSession_HostSessionRequest::ModeNameForAdvertisement' has a wrong offset!");
static_assert(offsetof(UCommonSession_HostSessionRequest, MapId) == 0x000040, "Member 'UCommonSession_HostSessionRequest::MapId' has a wrong offset!");
static_assert(offsetof(UCommonSession_HostSessionRequest, ExtraArgs) == 0x000050, "Member 'UCommonSession_HostSessionRequest::ExtraArgs' has a wrong offset!");
static_assert(offsetof(UCommonSession_HostSessionRequest, MaxPlayerCount) == 0x0000A0, "Member 'UCommonSession_HostSessionRequest::MaxPlayerCount' has a wrong offset!");

// Class CommonUser.CommonSession_SearchResult
// 0x0120 (0x0148 - 0x0028)
class UCommonSession_SearchResult final : public UObject
{
public:
	uint8                                         Pad_28[0x120];                                     // 0x0028(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetDescription() const;
	void GetIntSetting(class FName Key, int32* Value, bool* bFoundValue) const;
	int32 GetMaxPublicConnections() const;
	int32 GetNumOpenPrivateConnections() const;
	int32 GetNumOpenPublicConnections() const;
	int32 GetPingInMs() const;
	void GetStringSetting(class FName Key, class FString* Value, bool* bFoundValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonSession_SearchResult">();
	}
	static class UCommonSession_SearchResult* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonSession_SearchResult>();
	}
};
static_assert(alignof(UCommonSession_SearchResult) == 0x000008, "Wrong alignment on UCommonSession_SearchResult");
static_assert(sizeof(UCommonSession_SearchResult) == 0x000148, "Wrong size on UCommonSession_SearchResult");

// Class CommonUser.CommonSession_SearchSessionRequest
// 0x0040 (0x0068 - 0x0028)
class UCommonSession_SearchSessionRequest final : public UObject
{
public:
	ECommonSessionOnlineMode                      OnlineMode;                                        // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLobbies;                                       // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCommonSession_SearchResult*>    Results;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             K2_OnSearchFinished;                               // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonSession_SearchSessionRequest">();
	}
	static class UCommonSession_SearchSessionRequest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonSession_SearchSessionRequest>();
	}
};
static_assert(alignof(UCommonSession_SearchSessionRequest) == 0x000008, "Wrong alignment on UCommonSession_SearchSessionRequest");
static_assert(sizeof(UCommonSession_SearchSessionRequest) == 0x000068, "Wrong size on UCommonSession_SearchSessionRequest");
static_assert(offsetof(UCommonSession_SearchSessionRequest, OnlineMode) == 0x000028, "Member 'UCommonSession_SearchSessionRequest::OnlineMode' has a wrong offset!");
static_assert(offsetof(UCommonSession_SearchSessionRequest, bUseLobbies) == 0x000029, "Member 'UCommonSession_SearchSessionRequest::bUseLobbies' has a wrong offset!");
static_assert(offsetof(UCommonSession_SearchSessionRequest, Results) == 0x000030, "Member 'UCommonSession_SearchSessionRequest::Results' has a wrong offset!");
static_assert(offsetof(UCommonSession_SearchSessionRequest, K2_OnSearchFinished) == 0x000058, "Member 'UCommonSession_SearchSessionRequest::K2_OnSearchFinished' has a wrong offset!");

// Class CommonUser.CommonSessionSubsystem
// 0x00B0 (0x00E0 - 0x0030)
class UCommonSessionSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             K2_OnUserRequestedSessionEvent;                    // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             K2_OnJoinSessionCompleteEvent;                     // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x18];                                      // 0x0080(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             K2_OnCreateSessionCompleteEvent;                   // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x38];                                      // 0x00A8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CleanUpSessions();
	class UCommonSession_HostSessionRequest* CreateOnlineHostSessionRequest();
	class UCommonSession_SearchSessionRequest* CreateOnlineSearchSessionRequest();
	void FindSessions(class APlayerController* SearchingPlayer, class UCommonSession_SearchSessionRequest* Request);
	void HostSession(class APlayerController* HostingPlayer, class UCommonSession_HostSessionRequest* Request);
	void JoinSession(class APlayerController* JoiningPlayer, class UCommonSession_SearchResult* Request);
	void QuickPlaySession(class APlayerController* JoiningOrHostingPlayer, class UCommonSession_HostSessionRequest* Request);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonSessionSubsystem">();
	}
	static class UCommonSessionSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonSessionSubsystem>();
	}
};
static_assert(alignof(UCommonSessionSubsystem) == 0x000008, "Wrong alignment on UCommonSessionSubsystem");
static_assert(sizeof(UCommonSessionSubsystem) == 0x0000E0, "Wrong size on UCommonSessionSubsystem");
static_assert(offsetof(UCommonSessionSubsystem, K2_OnUserRequestedSessionEvent) == 0x000048, "Member 'UCommonSessionSubsystem::K2_OnUserRequestedSessionEvent' has a wrong offset!");
static_assert(offsetof(UCommonSessionSubsystem, K2_OnJoinSessionCompleteEvent) == 0x000070, "Member 'UCommonSessionSubsystem::K2_OnJoinSessionCompleteEvent' has a wrong offset!");
static_assert(offsetof(UCommonSessionSubsystem, K2_OnCreateSessionCompleteEvent) == 0x000098, "Member 'UCommonSessionSubsystem::K2_OnCreateSessionCompleteEvent' has a wrong offset!");

// Class CommonUser.CommonUserInfo
// 0x0060 (0x0088 - 0x0028)
class UCommonUserInfo final : public UObject
{
public:
	struct FInputDeviceId                         PrimaryInputDevice;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlatformUserId                        PlatformUser;                                      // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalPlayerIndex;                                  // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeGuest;                                       // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGuest;                                          // 0x0035(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonUserInitializationState                InitializationState;                               // 0x0036(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x51];                                      // 0x0037(0x0051)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ECommonUserPrivilegeResult GetCachedPrivilegeResult(ECommonUserPrivilege Privilege, ECommonUserOnlineContext Context) const;
	class FString GetDebugString() const;
	struct FUniqueNetIdRepl GetNetId(ECommonUserOnlineContext Context) const;
	class FString GetNickname() const;
	ECommonUserAvailability GetPrivilegeAvailability(ECommonUserPrivilege Privilege) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUserInfo">();
	}
	static class UCommonUserInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUserInfo>();
	}
};
static_assert(alignof(UCommonUserInfo) == 0x000008, "Wrong alignment on UCommonUserInfo");
static_assert(sizeof(UCommonUserInfo) == 0x000088, "Wrong size on UCommonUserInfo");
static_assert(offsetof(UCommonUserInfo, PrimaryInputDevice) == 0x000028, "Member 'UCommonUserInfo::PrimaryInputDevice' has a wrong offset!");
static_assert(offsetof(UCommonUserInfo, PlatformUser) == 0x00002C, "Member 'UCommonUserInfo::PlatformUser' has a wrong offset!");
static_assert(offsetof(UCommonUserInfo, LocalPlayerIndex) == 0x000030, "Member 'UCommonUserInfo::LocalPlayerIndex' has a wrong offset!");
static_assert(offsetof(UCommonUserInfo, bCanBeGuest) == 0x000034, "Member 'UCommonUserInfo::bCanBeGuest' has a wrong offset!");
static_assert(offsetof(UCommonUserInfo, bIsGuest) == 0x000035, "Member 'UCommonUserInfo::bIsGuest' has a wrong offset!");
static_assert(offsetof(UCommonUserInfo, InitializationState) == 0x000036, "Member 'UCommonUserInfo::InitializationState' has a wrong offset!");

// Class CommonUser.CommonUserSubsystem
// 0x0128 (0x0158 - 0x0030)
class UCommonUserSubsystem final : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnUserInitializeComplete;                          // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHandleSystemMessage;                             // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUserPrivilegeChanged;                            // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x70];                                      // 0x0060(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UCommonUserInfo*>           LocalUserInfos;                                    // 0x00D0(0x0050)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x38];                                     // 0x0120(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CancelUserInitialization(int32 LocalPlayerIndex);
	void ListenForLoginKeyInput(const TArray<struct FKey>& AnyUserKeys, const TArray<struct FKey>& NewUserKeys, const struct FCommonUserInitializeParams& Params_0);
	void ResetUserState();
	void SendSystemMessage(const struct FGameplayTag& MessageType, const class FText& TitleText, const class FText& BodyText);
	void SetMaxLocalPlayers(int32 InMaxLocalPLayers);
	bool TryToInitializeForLocalPlay(int32 LocalPlayerIndex, const struct FInputDeviceId& PrimaryInputDevice, bool bCanUseGuestLogin);
	bool TryToInitializeUser(const struct FCommonUserInitializeParams& Params_0);
	bool TryToLoginForOnlinePlay(int32 LocalPlayerIndex);

	ECommonUserInitializationState GetLocalPlayerInitializationState(int32 LocalPlayerIndex) const;
	int32 GetMaxLocalPlayers() const;
	int32 GetNumLocalPlayers() const;
	const class UCommonUserInfo* GetUserInfoForControllerId(int32 ControllerId) const;
	const class UCommonUserInfo* GetUserInfoForInputDevice(const struct FInputDeviceId& InputDevice) const;
	const class UCommonUserInfo* GetUserInfoForLocalPlayerIndex(int32 LocalPlayerIndex) const;
	const class UCommonUserInfo* GetUserInfoForPlatformUser(const struct FPlatformUserId& PlatformUser) const;
	const class UCommonUserInfo* GetUserInfoForPlatformUserIndex(int32 PlatformUserIndex) const;
	const class UCommonUserInfo* GetUserInfoForUniqueNetId(const struct FUniqueNetIdRepl& NetId) const;
	bool HasTraitTag(const struct FGameplayTag& TraitTag) const;
	bool ShouldWaitForStartInput() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUserSubsystem">();
	}
	static class UCommonUserSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUserSubsystem>();
	}
};
static_assert(alignof(UCommonUserSubsystem) == 0x000008, "Wrong alignment on UCommonUserSubsystem");
static_assert(sizeof(UCommonUserSubsystem) == 0x000158, "Wrong size on UCommonUserSubsystem");
static_assert(offsetof(UCommonUserSubsystem, OnUserInitializeComplete) == 0x000030, "Member 'UCommonUserSubsystem::OnUserInitializeComplete' has a wrong offset!");
static_assert(offsetof(UCommonUserSubsystem, OnHandleSystemMessage) == 0x000040, "Member 'UCommonUserSubsystem::OnHandleSystemMessage' has a wrong offset!");
static_assert(offsetof(UCommonUserSubsystem, OnUserPrivilegeChanged) == 0x000050, "Member 'UCommonUserSubsystem::OnUserPrivilegeChanged' has a wrong offset!");
static_assert(offsetof(UCommonUserSubsystem, LocalUserInfos) == 0x0000D0, "Member 'UCommonUserSubsystem::LocalUserInfos' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PzRobot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PzRobot_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function PzRobot.PzRobotAction.AI
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAction_AI final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAction_AI) == 0x000008, "Wrong alignment on PzRobotAction_AI");
static_assert(sizeof(PzRobotAction_AI) == 0x000018, "Wrong size on PzRobotAction_AI");
static_assert(offsetof(PzRobotAction_AI, Param) == 0x000000, "Member 'PzRobotAction_AI::Param' has a wrong offset!");
static_assert(offsetof(PzRobotAction_AI, ReturnValue) == 0x000010, "Member 'PzRobotAction_AI::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAction.ClientTravel
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAction_ClientTravel final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAction_ClientTravel) == 0x000008, "Wrong alignment on PzRobotAction_ClientTravel");
static_assert(sizeof(PzRobotAction_ClientTravel) == 0x000018, "Wrong size on PzRobotAction_ClientTravel");
static_assert(offsetof(PzRobotAction_ClientTravel, Param) == 0x000000, "Member 'PzRobotAction_ClientTravel::Param' has a wrong offset!");
static_assert(offsetof(PzRobotAction_ClientTravel, ReturnValue) == 0x000010, "Member 'PzRobotAction_ClientTravel::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAction.GM
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAction_GM final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAction_GM) == 0x000008, "Wrong alignment on PzRobotAction_GM");
static_assert(sizeof(PzRobotAction_GM) == 0x000018, "Wrong size on PzRobotAction_GM");
static_assert(offsetof(PzRobotAction_GM, Param) == 0x000000, "Member 'PzRobotAction_GM::Param' has a wrong offset!");
static_assert(offsetof(PzRobotAction_GM, ReturnValue) == 0x000010, "Member 'PzRobotAction_GM::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAction.InputLookMouse
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAction_InputLookMouse final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAction_InputLookMouse) == 0x000008, "Wrong alignment on PzRobotAction_InputLookMouse");
static_assert(sizeof(PzRobotAction_InputLookMouse) == 0x000018, "Wrong size on PzRobotAction_InputLookMouse");
static_assert(offsetof(PzRobotAction_InputLookMouse, Param) == 0x000000, "Member 'PzRobotAction_InputLookMouse::Param' has a wrong offset!");
static_assert(offsetof(PzRobotAction_InputLookMouse, ReturnValue) == 0x000010, "Member 'PzRobotAction_InputLookMouse::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAction.InputTag
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAction_InputTag final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAction_InputTag) == 0x000008, "Wrong alignment on PzRobotAction_InputTag");
static_assert(sizeof(PzRobotAction_InputTag) == 0x000018, "Wrong size on PzRobotAction_InputTag");
static_assert(offsetof(PzRobotAction_InputTag, Param) == 0x000000, "Member 'PzRobotAction_InputTag::Param' has a wrong offset!");
static_assert(offsetof(PzRobotAction_InputTag, ReturnValue) == 0x000010, "Member 'PzRobotAction_InputTag::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAction.Move
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAction_Move final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAction_Move) == 0x000008, "Wrong alignment on PzRobotAction_Move");
static_assert(sizeof(PzRobotAction_Move) == 0x000018, "Wrong size on PzRobotAction_Move");
static_assert(offsetof(PzRobotAction_Move, Param) == 0x000000, "Member 'PzRobotAction_Move::Param' has a wrong offset!");
static_assert(offsetof(PzRobotAction_Move, ReturnValue) == 0x000010, "Member 'PzRobotAction_Move::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAction.MoveToPosition
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAction_MoveToPosition final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAction_MoveToPosition) == 0x000008, "Wrong alignment on PzRobotAction_MoveToPosition");
static_assert(sizeof(PzRobotAction_MoveToPosition) == 0x000018, "Wrong size on PzRobotAction_MoveToPosition");
static_assert(offsetof(PzRobotAction_MoveToPosition, Param) == 0x000000, "Member 'PzRobotAction_MoveToPosition::Param' has a wrong offset!");
static_assert(offsetof(PzRobotAction_MoveToPosition, ReturnValue) == 0x000010, "Member 'PzRobotAction_MoveToPosition::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAction.MoveToward
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAction_MoveToward final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAction_MoveToward) == 0x000008, "Wrong alignment on PzRobotAction_MoveToward");
static_assert(sizeof(PzRobotAction_MoveToward) == 0x000018, "Wrong size on PzRobotAction_MoveToward");
static_assert(offsetof(PzRobotAction_MoveToward, Param) == 0x000000, "Member 'PzRobotAction_MoveToward::Param' has a wrong offset!");
static_assert(offsetof(PzRobotAction_MoveToward, ReturnValue) == 0x000010, "Member 'PzRobotAction_MoveToward::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAction.RandomToPosition
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAction_RandomToPosition final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAction_RandomToPosition) == 0x000008, "Wrong alignment on PzRobotAction_RandomToPosition");
static_assert(sizeof(PzRobotAction_RandomToPosition) == 0x000018, "Wrong size on PzRobotAction_RandomToPosition");
static_assert(offsetof(PzRobotAction_RandomToPosition, Param) == 0x000000, "Member 'PzRobotAction_RandomToPosition::Param' has a wrong offset!");
static_assert(offsetof(PzRobotAction_RandomToPosition, ReturnValue) == 0x000010, "Member 'PzRobotAction_RandomToPosition::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAction.Sleep
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAction_Sleep final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAction_Sleep) == 0x000008, "Wrong alignment on PzRobotAction_Sleep");
static_assert(sizeof(PzRobotAction_Sleep) == 0x000018, "Wrong size on PzRobotAction_Sleep");
static_assert(offsetof(PzRobotAction_Sleep, Param) == 0x000000, "Member 'PzRobotAction_Sleep::Param' has a wrong offset!");
static_assert(offsetof(PzRobotAction_Sleep, ReturnValue) == 0x000010, "Member 'PzRobotAction_Sleep::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAIController.CheckActorVisible
// 0x0010 (0x0010 - 0x0000)
struct PzRobotAIController_CheckActorVisible final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAIController_CheckActorVisible) == 0x000008, "Wrong alignment on PzRobotAIController_CheckActorVisible");
static_assert(sizeof(PzRobotAIController_CheckActorVisible) == 0x000010, "Wrong size on PzRobotAIController_CheckActorVisible");
static_assert(offsetof(PzRobotAIController_CheckActorVisible, TargetActor) == 0x000000, "Member 'PzRobotAIController_CheckActorVisible::TargetActor' has a wrong offset!");
static_assert(offsetof(PzRobotAIController_CheckActorVisible, ReturnValue) == 0x000008, "Member 'PzRobotAIController_CheckActorVisible::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAIController.CheckNavigateFinish
// 0x0001 (0x0001 - 0x0000)
struct PzRobotAIController_CheckNavigateFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_CheckNavigateFinish) == 0x000001, "Wrong alignment on PzRobotAIController_CheckNavigateFinish");
static_assert(sizeof(PzRobotAIController_CheckNavigateFinish) == 0x000001, "Wrong size on PzRobotAIController_CheckNavigateFinish");
static_assert(offsetof(PzRobotAIController_CheckNavigateFinish, ReturnValue) == 0x000000, "Member 'PzRobotAIController_CheckNavigateFinish::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAIController.DetectActors
// 0x0040 (0x0040 - 0x0000)
struct PzRobotAIController_DetectActors final
{
public:
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UClass*                                 ActorClassFilter;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_DetectActors) == 0x000008, "Wrong alignment on PzRobotAIController_DetectActors");
static_assert(sizeof(PzRobotAIController_DetectActors) == 0x000040, "Wrong size on PzRobotAIController_DetectActors");
static_assert(offsetof(PzRobotAIController_DetectActors, ObjectTypes) == 0x000000, "Member 'PzRobotAIController_DetectActors::ObjectTypes' has a wrong offset!");
static_assert(offsetof(PzRobotAIController_DetectActors, ActorClassFilter) == 0x000010, "Member 'PzRobotAIController_DetectActors::ActorClassFilter' has a wrong offset!");
static_assert(offsetof(PzRobotAIController_DetectActors, ActorsToIgnore) == 0x000018, "Member 'PzRobotAIController_DetectActors::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(PzRobotAIController_DetectActors, Radius) == 0x000028, "Member 'PzRobotAIController_DetectActors::Radius' has a wrong offset!");
static_assert(offsetof(PzRobotAIController_DetectActors, ReturnValue) == 0x000030, "Member 'PzRobotAIController_DetectActors::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAIController.DetectEnemyActor
// 0x0008 (0x0008 - 0x0000)
struct PzRobotAIController_DetectEnemyActor final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_DetectEnemyActor) == 0x000008, "Wrong alignment on PzRobotAIController_DetectEnemyActor");
static_assert(sizeof(PzRobotAIController_DetectEnemyActor) == 0x000008, "Wrong size on PzRobotAIController_DetectEnemyActor");
static_assert(offsetof(PzRobotAIController_DetectEnemyActor, ReturnValue) == 0x000000, "Member 'PzRobotAIController_DetectEnemyActor::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAIController.DetectInteractActor
// 0x0008 (0x0008 - 0x0000)
struct PzRobotAIController_DetectInteractActor final
{
public:
	class ATgfStaticInteraction*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_DetectInteractActor) == 0x000008, "Wrong alignment on PzRobotAIController_DetectInteractActor");
static_assert(sizeof(PzRobotAIController_DetectInteractActor) == 0x000008, "Wrong size on PzRobotAIController_DetectInteractActor");
static_assert(offsetof(PzRobotAIController_DetectInteractActor, ReturnValue) == 0x000000, "Member 'PzRobotAIController_DetectInteractActor::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAIController.DoRandomAttackAction
// 0x0001 (0x0001 - 0x0000)
struct PzRobotAIController_DoRandomAttackAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_DoRandomAttackAction) == 0x000001, "Wrong alignment on PzRobotAIController_DoRandomAttackAction");
static_assert(sizeof(PzRobotAIController_DoRandomAttackAction) == 0x000001, "Wrong size on PzRobotAIController_DoRandomAttackAction");
static_assert(offsetof(PzRobotAIController_DoRandomAttackAction, ReturnValue) == 0x000000, "Member 'PzRobotAIController_DoRandomAttackAction::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAIController.GetPlayerCurrentLocation
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAIController_GetPlayerCurrentLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_GetPlayerCurrentLocation) == 0x000008, "Wrong alignment on PzRobotAIController_GetPlayerCurrentLocation");
static_assert(sizeof(PzRobotAIController_GetPlayerCurrentLocation) == 0x000018, "Wrong size on PzRobotAIController_GetPlayerCurrentLocation");
static_assert(offsetof(PzRobotAIController_GetPlayerCurrentLocation, ReturnValue) == 0x000000, "Member 'PzRobotAIController_GetPlayerCurrentLocation::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAIController.GetRandomDstLocation
// 0x0020 (0x0020 - 0x0000)
struct PzRobotAIController_GetRandomDstLocation final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_GetRandomDstLocation) == 0x000008, "Wrong alignment on PzRobotAIController_GetRandomDstLocation");
static_assert(sizeof(PzRobotAIController_GetRandomDstLocation) == 0x000020, "Wrong size on PzRobotAIController_GetRandomDstLocation");
static_assert(offsetof(PzRobotAIController_GetRandomDstLocation, Radius) == 0x000000, "Member 'PzRobotAIController_GetRandomDstLocation::Radius' has a wrong offset!");
static_assert(offsetof(PzRobotAIController_GetRandomDstLocation, ReturnValue) == 0x000008, "Member 'PzRobotAIController_GetRandomDstLocation::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAIController.Navigation
// 0x0018 (0x0018 - 0x0000)
struct PzRobotAIController_Navigation final
{
public:
	struct FVector                                DstLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_Navigation) == 0x000008, "Wrong alignment on PzRobotAIController_Navigation");
static_assert(sizeof(PzRobotAIController_Navigation) == 0x000018, "Wrong size on PzRobotAIController_Navigation");
static_assert(offsetof(PzRobotAIController_Navigation, DstLocation) == 0x000000, "Member 'PzRobotAIController_Navigation::DstLocation' has a wrong offset!");

// Function PzRobot.PzRobotAIController.NavigationToActor
// 0x0008 (0x0008 - 0x0000)
struct PzRobotAIController_NavigationToActor final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_NavigationToActor) == 0x000008, "Wrong alignment on PzRobotAIController_NavigationToActor");
static_assert(sizeof(PzRobotAIController_NavigationToActor) == 0x000008, "Wrong size on PzRobotAIController_NavigationToActor");
static_assert(offsetof(PzRobotAIController_NavigationToActor, TargetActor) == 0x000000, "Member 'PzRobotAIController_NavigationToActor::TargetActor' has a wrong offset!");

// Function PzRobot.PzRobotAIController.ReleaseFireQAndFireE
// 0x0001 (0x0001 - 0x0000)
struct PzRobotAIController_ReleaseFireQAndFireE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_ReleaseFireQAndFireE) == 0x000001, "Wrong alignment on PzRobotAIController_ReleaseFireQAndFireE");
static_assert(sizeof(PzRobotAIController_ReleaseFireQAndFireE) == 0x000001, "Wrong size on PzRobotAIController_ReleaseFireQAndFireE");
static_assert(offsetof(PzRobotAIController_ReleaseFireQAndFireE, ReturnValue) == 0x000000, "Member 'PzRobotAIController_ReleaseFireQAndFireE::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAIController.SetRobotStatus
// 0x0001 (0x0001 - 0x0000)
struct PzRobotAIController_SetRobotStatus final
{
public:
	ERobotStatus                                  St;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_SetRobotStatus) == 0x000001, "Wrong alignment on PzRobotAIController_SetRobotStatus");
static_assert(sizeof(PzRobotAIController_SetRobotStatus) == 0x000001, "Wrong size on PzRobotAIController_SetRobotStatus");
static_assert(offsetof(PzRobotAIController_SetRobotStatus, St) == 0x000000, "Member 'PzRobotAIController_SetRobotStatus::St' has a wrong offset!");

// Function PzRobot.PzRobotAIController.SetRotationToLocation
// 0x0020 (0x0020 - 0x0000)
struct PzRobotAIController_SetRotationToLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PzRobotAIController_SetRotationToLocation) == 0x000008, "Wrong alignment on PzRobotAIController_SetRotationToLocation");
static_assert(sizeof(PzRobotAIController_SetRotationToLocation) == 0x000020, "Wrong size on PzRobotAIController_SetRotationToLocation");
static_assert(offsetof(PzRobotAIController_SetRotationToLocation, Location) == 0x000000, "Member 'PzRobotAIController_SetRotationToLocation::Location' has a wrong offset!");
static_assert(offsetof(PzRobotAIController_SetRotationToLocation, ReturnValue) == 0x000018, "Member 'PzRobotAIController_SetRotationToLocation::ReturnValue' has a wrong offset!");

// Function PzRobot.PzRobotAIController.GetRobotStatus
// 0x0001 (0x0001 - 0x0000)
struct PzRobotAIController_GetRobotStatus final
{
public:
	ERobotStatus                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PzRobotAIController_GetRobotStatus) == 0x000001, "Wrong alignment on PzRobotAIController_GetRobotStatus");
static_assert(sizeof(PzRobotAIController_GetRobotStatus) == 0x000001, "Wrong size on PzRobotAIController_GetRobotStatus");
static_assert(offsetof(PzRobotAIController_GetRobotStatus, ReturnValue) == 0x000000, "Member 'PzRobotAIController_GetRobotStatus::ReturnValue' has a wrong offset!");

}


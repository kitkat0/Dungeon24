#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_TGF_MeleeWeaponBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "HitPendingData_structs.hpp"
#include "B_WeaponBase_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "AGRPRO_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_TGF_MeleeWeaponBase.B_TGF_MeleeWeaponBase_C
// 0x03A0 (0x07B0 - 0x0410)
#pragma pack(push, 0x1)
class alignas(0x10) AB_TGF_MeleeWeaponBase_C : public AB_WeaponBase_C
{
public:
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_B_TGF_MeleeWeaponBase_C;            // 0x0408(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FHitResult                             HitResult;                                         // 0x0410(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 Hit_Actor;                                         // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WeaponLengthOffset;                                // 0x0500(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CosmeticAnimStyleTags;                             // 0x0518(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayEffectContextHandle           GameplayEffectContextHandler;                      // 0x0538(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 OwnerActor;                                        // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         TraceMeshAddedCount;                               // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurHitProportion;                                  // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResultServer;                                   // 0x0568(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 Hit_Actor_Server;                                  // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ValidDistance;                                     // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseHitValidation;                                  // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanProcessHit;                                     // 0x0661(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_662[0x2];                                      // 0x0662(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurHitCount;                                       // 0x0664(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class AActor*, int32>                    ActorHitCount;                                     // 0x0668(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class AActor*, struct FHitPendingData>   ActorHitPending;                                   // 0x06B8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         ShineType;                                         // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_70C[0x4];                                      // 0x070C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ShineMaterial;                                     // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CurCurve;                                          // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CurTime;                                           // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurShine;                                          // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72C[0x4];                                      // 0x072C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CurEndShineTimer;                                  // 0x0730(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ChargeEndTime;                                     // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurGAIndex;                                        // 0x0740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_744[0x4];                                      // 0x0744(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UTgfGameplayAbility*>       CurSrcGADIc;                                       // 0x0748(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTgfGameplayAbility*                    CurSrcGA;                                          // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ReboundProportion;                                 // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddTraceMesh(class FName StartSocketTraceName, class FName EndSocketTraceName, EAGR_CombatColliderType CollisionHandling, const struct FTransform& StartSocketOffset, const struct FTransform& EndSocketOffset, class FName SocketParent, int32* TraceMeshInsId);
	void AttackHitEventHandle(const struct FHitResult& Hit, class UPrimitiveComponent* Mesh);
	void BeginShine(class UCurveFloat* BeginCurve, double AutoEndTime);
	void Check_Hit_Valid(class AActor* SrcActor, class AActor* TargetActor, bool* Result);
	void CREATEDELEGATE_PROXYFUNCTION_0(float HitProportion);
	void CREATEDELEGATE_PROXYFUNCTION_1(float HitProportion);
	void DeInitCurGA(int32 InputIndex);
	void DeInitHitData();
	void DoReset();
	void EnableProjectileBlocker(bool Enable);
	void EndProcessHit();
	void EndShine(class UCurveFloat* EndCurve);
	void ExecuteUbergraph_B_TGF_MeleeWeaponBase(int32 EntryPoint);
	void InitCurGA(class UTgfGameplayAbility* InputGA, int32* ResultIndex);
	void InitHitData();
	void Is_Hit_Interactor_Environment(const struct FHitResult& Param_HitResult, class AActor* HitActor, bool* Result);
	void IsHitInteractorBattle(class AActor* CheckActor, bool* Result);
	void IsReboundEnviroment(const struct FHitResult& Param_HitResult, class AActor* HitActor, bool* Result);
	void OnAttackHitEventServer(const struct FHitResult& Hit, class UPrimitiveComponent* Mesh, double CriticalRandomValue, double ClientProportion);
	void PreAttackHitEventHandle(double HitProportion);
	void ProportionCanRebound(bool* Result);
	void ReceiveBeginPlay();
	void ReceiveOnUnHeld();
	void ReceiveTick(float DeltaSeconds);
	void RefreshCurve(class UCurveFloat* InputCurve);
	void RemoveTraceMesh(int32 TraceMeshInsId, bool* Result);
	void ResetCurGA();
	void ResetHitData();
	void ResetShine();
	void ResetShineSelf();
	void ShouldAddTraceMesh(bool* Result);
	void StartProcessHit(int32 HitCount);
	void UpdateMaterials();
	void UpdateShine(double DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_TGF_MeleeWeaponBase_C">();
	}
	static class AB_TGF_MeleeWeaponBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_TGF_MeleeWeaponBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AB_TGF_MeleeWeaponBase_C) == 0x000010, "Wrong alignment on AB_TGF_MeleeWeaponBase_C");
static_assert(sizeof(AB_TGF_MeleeWeaponBase_C) == 0x0007B0, "Wrong size on AB_TGF_MeleeWeaponBase_C");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, UberGraphFrame_B_TGF_MeleeWeaponBase_C) == 0x000408, "Member 'AB_TGF_MeleeWeaponBase_C::UberGraphFrame_B_TGF_MeleeWeaponBase_C' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, HitResult) == 0x000410, "Member 'AB_TGF_MeleeWeaponBase_C::HitResult' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, Hit_Actor) == 0x0004F8, "Member 'AB_TGF_MeleeWeaponBase_C::Hit_Actor' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, WeaponLengthOffset) == 0x000500, "Member 'AB_TGF_MeleeWeaponBase_C::WeaponLengthOffset' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, CosmeticAnimStyleTags) == 0x000518, "Member 'AB_TGF_MeleeWeaponBase_C::CosmeticAnimStyleTags' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, GameplayEffectContextHandler) == 0x000538, "Member 'AB_TGF_MeleeWeaponBase_C::GameplayEffectContextHandler' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, OwnerActor) == 0x000550, "Member 'AB_TGF_MeleeWeaponBase_C::OwnerActor' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, TraceMeshAddedCount) == 0x000558, "Member 'AB_TGF_MeleeWeaponBase_C::TraceMeshAddedCount' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, CurHitProportion) == 0x000560, "Member 'AB_TGF_MeleeWeaponBase_C::CurHitProportion' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, HitResultServer) == 0x000568, "Member 'AB_TGF_MeleeWeaponBase_C::HitResultServer' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, Hit_Actor_Server) == 0x000650, "Member 'AB_TGF_MeleeWeaponBase_C::Hit_Actor_Server' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, ValidDistance) == 0x000658, "Member 'AB_TGF_MeleeWeaponBase_C::ValidDistance' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, UseHitValidation) == 0x000660, "Member 'AB_TGF_MeleeWeaponBase_C::UseHitValidation' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, CanProcessHit) == 0x000661, "Member 'AB_TGF_MeleeWeaponBase_C::CanProcessHit' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, CurHitCount) == 0x000664, "Member 'AB_TGF_MeleeWeaponBase_C::CurHitCount' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, ActorHitCount) == 0x000668, "Member 'AB_TGF_MeleeWeaponBase_C::ActorHitCount' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, ActorHitPending) == 0x0006B8, "Member 'AB_TGF_MeleeWeaponBase_C::ActorHitPending' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, ShineType) == 0x000708, "Member 'AB_TGF_MeleeWeaponBase_C::ShineType' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, ShineMaterial) == 0x000710, "Member 'AB_TGF_MeleeWeaponBase_C::ShineMaterial' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, CurCurve) == 0x000718, "Member 'AB_TGF_MeleeWeaponBase_C::CurCurve' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, CurTime) == 0x000720, "Member 'AB_TGF_MeleeWeaponBase_C::CurTime' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, CurShine) == 0x000728, "Member 'AB_TGF_MeleeWeaponBase_C::CurShine' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, CurEndShineTimer) == 0x000730, "Member 'AB_TGF_MeleeWeaponBase_C::CurEndShineTimer' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, ChargeEndTime) == 0x000738, "Member 'AB_TGF_MeleeWeaponBase_C::ChargeEndTime' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, CurGAIndex) == 0x000740, "Member 'AB_TGF_MeleeWeaponBase_C::CurGAIndex' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, CurSrcGADIc) == 0x000748, "Member 'AB_TGF_MeleeWeaponBase_C::CurSrcGADIc' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, CurSrcGA) == 0x000798, "Member 'AB_TGF_MeleeWeaponBase_C::CurSrcGA' has a wrong offset!");
static_assert(offsetof(AB_TGF_MeleeWeaponBase_C, ReboundProportion) == 0x0007A0, "Member 'AB_TGF_MeleeWeaponBase_C::ReboundProportion' has a wrong offset!");

}


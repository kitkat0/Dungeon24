#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIExtension

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum UIExtension.EUIExtensionAction
// NumValues: 0x0003
enum class EUIExtensionAction : uint8
{
	Added                                    = 0,
	Removed                                  = 1,
	EUIExtensionAction_MAX                   = 2,
};

// Enum UIExtension.EUIExtensionPointMatch
// NumValues: 0x0003
enum class EUIExtensionPointMatch : uint8
{
	ExactMatch                               = 0,
	PartialMatch                             = 1,
	EUIExtensionPointMatch_MAX               = 2,
};

// ScriptStruct UIExtension.UIExtensionPointHandle
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FUIExtensionPointHandle final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIExtensionPointHandle) == 0x000008, "Wrong alignment on FUIExtensionPointHandle");
static_assert(sizeof(FUIExtensionPointHandle) == 0x000018, "Wrong size on FUIExtensionPointHandle");

// ScriptStruct UIExtension.UIExtensionHandle
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FUIExtensionHandle final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIExtensionHandle) == 0x000008, "Wrong alignment on FUIExtensionHandle");
static_assert(sizeof(FUIExtensionHandle) == 0x000018, "Wrong size on FUIExtensionHandle");

// ScriptStruct UIExtension.UIExtensionRequest
// 0x0038 (0x0038 - 0x0000)
struct FUIExtensionRequest final
{
public:
	struct FUIExtensionHandle                     ExtensionHandle;                                   // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ExtensionPointTag;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Data;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIExtensionRequest) == 0x000008, "Wrong alignment on FUIExtensionRequest");
static_assert(sizeof(FUIExtensionRequest) == 0x000038, "Wrong size on FUIExtensionRequest");
static_assert(offsetof(FUIExtensionRequest, ExtensionHandle) == 0x000000, "Member 'FUIExtensionRequest::ExtensionHandle' has a wrong offset!");
static_assert(offsetof(FUIExtensionRequest, ExtensionPointTag) == 0x000018, "Member 'FUIExtensionRequest::ExtensionPointTag' has a wrong offset!");
static_assert(offsetof(FUIExtensionRequest, Priority) == 0x000020, "Member 'FUIExtensionRequest::Priority' has a wrong offset!");
static_assert(offsetof(FUIExtensionRequest, Data) == 0x000028, "Member 'FUIExtensionRequest::Data' has a wrong offset!");
static_assert(offsetof(FUIExtensionRequest, ContextObject) == 0x000030, "Member 'FUIExtensionRequest::ContextObject' has a wrong offset!");

}


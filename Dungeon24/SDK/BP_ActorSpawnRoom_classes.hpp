#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ActorSpawnRoom

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "LyraGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ActorSpawnRoom.BP_ActorSpawnRoom_C
// 0x0080 (0x0318 - 0x0298)
class ABP_ActorSpawnRoom_C final : public ATgfModularActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ActorSpawnOptionComponent_C*        ActorSpawnOptionComponent;                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereVisualizer;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPlayerDistanceCheckerComponent*        PlayerDistanceChecker;                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Roll;                                              // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpawnWhenPhaseStarts;                             // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceThreshold;                                 // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_ActorSpawnSet_C*>            AvailableSets;                                     // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         LootIndex;                                         // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SpawnPhaseTag;                                     // 0x02EC(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	int32                                         FixedSpawnNumber;                                  // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SetNumber;                                         // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ActuallySpawn;                                     // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bFirstTimeActuallySpawn;                           // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActuallySpawn__DelegateSignature();
	void BndEvt__BP_ActorSpawnRoom_PlayerDistanceChecker_K2Node_ComponentBoundEvent_1_Event_SomePlayerComesClose__DelegateSignature(const struct FVector& PlayerLocation);
	void ExecuteUbergraph_BP_ActorSpawnRoom(int32 EntryPoint);
	void OnReady_4BF65E5B4139E1DAB366E0A9DE8D3B21();
	void OnReady_6C2F1DE84C0028304E02B6A30307569B();
	void ReceiveBeginPlay();
	void Spawn(const struct FVector& PlayerLocation);
	void SpawnOneSet(const struct FVector& PlayerLocation, int32 SpawnNumber);
	void UserConstructionScript();
	void WhenPhaseStarts(const struct FGameplayTag& PhaseTag);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ActorSpawnRoom_C">();
	}
	static class ABP_ActorSpawnRoom_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ActorSpawnRoom_C>();
	}
};
static_assert(alignof(ABP_ActorSpawnRoom_C) == 0x000008, "Wrong alignment on ABP_ActorSpawnRoom_C");
static_assert(sizeof(ABP_ActorSpawnRoom_C) == 0x000318, "Wrong size on ABP_ActorSpawnRoom_C");
static_assert(offsetof(ABP_ActorSpawnRoom_C, UberGraphFrame) == 0x000298, "Member 'ABP_ActorSpawnRoom_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, ActorSpawnOptionComponent) == 0x0002A0, "Member 'ABP_ActorSpawnRoom_C::ActorSpawnOptionComponent' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, SphereVisualizer) == 0x0002A8, "Member 'ABP_ActorSpawnRoom_C::SphereVisualizer' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, PlayerDistanceChecker) == 0x0002B0, "Member 'ABP_ActorSpawnRoom_C::PlayerDistanceChecker' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_ActorSpawnRoom_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, Roll) == 0x0002C0, "Member 'ABP_ActorSpawnRoom_C::Roll' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, bSpawnWhenPhaseStarts) == 0x0002C8, "Member 'ABP_ActorSpawnRoom_C::bSpawnWhenPhaseStarts' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, DistanceThreshold) == 0x0002D0, "Member 'ABP_ActorSpawnRoom_C::DistanceThreshold' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, AvailableSets) == 0x0002D8, "Member 'ABP_ActorSpawnRoom_C::AvailableSets' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, LootIndex) == 0x0002E8, "Member 'ABP_ActorSpawnRoom_C::LootIndex' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, SpawnPhaseTag) == 0x0002EC, "Member 'ABP_ActorSpawnRoom_C::SpawnPhaseTag' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, FixedSpawnNumber) == 0x0002F4, "Member 'ABP_ActorSpawnRoom_C::FixedSpawnNumber' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, SetNumber) == 0x0002F8, "Member 'ABP_ActorSpawnRoom_C::SetNumber' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, ActuallySpawn) == 0x000300, "Member 'ABP_ActorSpawnRoom_C::ActuallySpawn' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnRoom_C, bFirstTimeActuallySpawn) == 0x000310, "Member 'ABP_ActorSpawnRoom_C::bFirstTimeActuallySpawn' has a wrong offset!");

}


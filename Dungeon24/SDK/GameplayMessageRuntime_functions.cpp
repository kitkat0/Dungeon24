#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayMessageRuntime

#include "Basic.hpp"

#include "GameplayMessageRuntime_classes.hpp"
#include "GameplayMessageRuntime_parameters.hpp"


namespace SDK
{

// Function GameplayMessageRuntime.AsyncAction_ListenForGameplayMessage.ListenForGameplayMessages
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Channel                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptStruct*                    PayloadType                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameplayMessageMatch                   MatchType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncAction_ListenForGameplayMessage*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_ListenForGameplayMessage* UAsyncAction_ListenForGameplayMessage::ListenForGameplayMessages(class UObject* WorldContextObject, const struct FGameplayTag& Channel, class UScriptStruct* PayloadType, EGameplayMessageMatch MatchType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncAction_ListenForGameplayMessage", "ListenForGameplayMessages");

	Params::AsyncAction_ListenForGameplayMessage_ListenForGameplayMessages Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Channel = std::move(Channel);
	Parms.PayloadType = PayloadType;
	Parms.MatchType = MatchType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayMessageRuntime.AsyncAction_ListenForGameplayMessage.GetPayload
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   OutPayload                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAsyncAction_ListenForGameplayMessage::GetPayload(int32& OutPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncAction_ListenForGameplayMessage", "GetPayload");

	Params::AsyncAction_ListenForGameplayMessage_GetPayload Parms{};

	Parms.OutPayload = OutPayload;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutPayload = Parms.OutPayload;

	return Parms.ReturnValue;
}


// Function GameplayMessageRuntime.GameplayMessageSubsystem.K2_BroadcastMessage
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Channel                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Message                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayMessageSubsystem::K2_BroadcastMessage(const struct FGameplayTag& Channel, const int32& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayMessageSubsystem", "K2_BroadcastMessage");

	Params::GameplayMessageSubsystem_K2_BroadcastMessage Parms{};

	Parms.Channel = std::move(Channel);
	Parms.Message = Message;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}


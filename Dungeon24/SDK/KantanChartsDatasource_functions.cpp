#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KantanChartsDatasource

#include "Basic.hpp"

#include "KantanChartsDatasource_classes.hpp"
#include "KantanChartsDatasource_parameters.hpp"


namespace SDK
{

// Function KantanChartsDatasource.KantanCartesianDatasourceInterface.GetNumSeries
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IKantanCartesianDatasourceInterface::GetNumSeries() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianDatasourceInterface", "GetNumSeries");

	Params::KantanCartesianDatasourceInterface_GetNumSeries Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsDatasource.KantanCartesianDatasourceInterface.GetSeriesDatapoints
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   SeriesIdx                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKantanCartesianDatapoint>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FKantanCartesianDatapoint> IKantanCartesianDatasourceInterface::GetSeriesDatapoints(int32 SeriesIdx) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianDatasourceInterface", "GetSeriesDatapoints");

	Params::KantanCartesianDatasourceInterface_GetSeriesDatapoints Parms{};

	Parms.SeriesIdx = SeriesIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsDatasource.KantanCartesianDatasourceInterface.GetSeriesId
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   CatIdx                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName IKantanCartesianDatasourceInterface::GetSeriesId(int32 CatIdx) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianDatasourceInterface", "GetSeriesId");

	Params::KantanCartesianDatasourceInterface_GetSeriesId Parms{};

	Parms.CatIdx = CatIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsDatasource.KantanCartesianDatasourceInterface.GetSeriesName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   SeriesIdx                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText IKantanCartesianDatasourceInterface::GetSeriesName(int32 SeriesIdx) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianDatasourceInterface", "GetSeriesName");

	Params::KantanCartesianDatasourceInterface_GetSeriesName Parms{};

	Parms.SeriesIdx = SeriesIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsDatasource.KantanCategoryDatasourceInterface.GetCategoryId
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   CatIdx                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName IKantanCategoryDatasourceInterface::GetCategoryId(int32 CatIdx) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCategoryDatasourceInterface", "GetCategoryId");

	Params::KantanCategoryDatasourceInterface_GetCategoryId Parms{};

	Parms.CatIdx = CatIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsDatasource.KantanCategoryDatasourceInterface.GetCategoryName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   CatIdx                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText IKantanCategoryDatasourceInterface::GetCategoryName(int32 CatIdx) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCategoryDatasourceInterface", "GetCategoryName");

	Params::KantanCategoryDatasourceInterface_GetCategoryName Parms{};

	Parms.CatIdx = CatIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsDatasource.KantanCategoryDatasourceInterface.GetCategoryValue
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   CatIdx                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IKantanCategoryDatasourceInterface::GetCategoryValue(int32 CatIdx) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCategoryDatasourceInterface", "GetCategoryValue");

	Params::KantanCategoryDatasourceInterface_GetCategoryValue Parms{};

	Parms.CatIdx = CatIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsDatasource.KantanCategoryDatasourceInterface.GetNumCategories
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IKantanCategoryDatasourceInterface::GetNumCategories() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCategoryDatasourceInterface", "GetNumCategories");

	Params::KantanCategoryDatasourceInterface_GetNumCategories Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsDatasource.KantanSimpleCartesianDatasource.NewSimpleCartesianDatasource
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   MaxDatapoints                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UKantanSimpleCartesianDatasource* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKantanSimpleCartesianDatasource* UKantanSimpleCartesianDatasource::NewSimpleCartesianDatasource(int32 MaxDatapoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KantanSimpleCartesianDatasource", "NewSimpleCartesianDatasource");

	Params::KantanSimpleCartesianDatasource_NewSimpleCartesianDatasource Parms{};

	Parms.MaxDatapoints = MaxDatapoints;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_AddDatapoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             SeriesId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanSimpleCartesianDatasource::BP_AddDatapoint(class FName SeriesId, const struct FVector2D& Point, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanSimpleCartesianDatasource", "BP_AddDatapoint");

	Params::KantanSimpleCartesianDatasource_BP_AddDatapoint Parms{};

	Parms.SeriesId = SeriesId;
	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_AddSeries
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Param_Name                                             (Parm, NativeAccessSpecifierPublic)
// class FName                             SeriesId                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanSimpleCartesianDatasource::BP_AddSeries(const class FText& Param_Name, class FName* SeriesId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanSimpleCartesianDatasource", "BP_AddSeries");

	Params::KantanSimpleCartesianDatasource_BP_AddSeries Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SeriesId != nullptr)
		*SeriesId = Parms.SeriesId;
}


// Function KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_AddSeriesWithId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Param_Name                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanSimpleCartesianDatasource::BP_AddSeriesWithId(class FName ID, const class FText& Param_Name, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanSimpleCartesianDatasource", "BP_AddSeriesWithId");

	Params::KantanSimpleCartesianDatasource_BP_AddSeriesWithId Parms{};

	Parms.ID = ID;
	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_RemoveAllSeries
// (Final, Native, Public, BlueprintCallable)

void UKantanSimpleCartesianDatasource::BP_RemoveAllSeries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanSimpleCartesianDatasource", "BP_RemoveAllSeries");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_RemoveSeries
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanSimpleCartesianDatasource::BP_RemoveSeries(class FName ID, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanSimpleCartesianDatasource", "BP_RemoveSeries");

	Params::KantanSimpleCartesianDatasource_BP_RemoveSeries Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_SetDatapointLimit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanSimpleCartesianDatasource::BP_SetDatapointLimit(int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanSimpleCartesianDatasource", "BP_SetDatapointLimit");

	Params::KantanSimpleCartesianDatasource_BP_SetDatapointLimit Parms{};

	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsDatasource.KantanSimpleCategoryDatasource.NewSimpleCategoryDatasource
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UKantanSimpleCategoryDatasource*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKantanSimpleCategoryDatasource* UKantanSimpleCategoryDatasource::NewSimpleCategoryDatasource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KantanSimpleCategoryDatasource", "NewSimpleCategoryDatasource");

	Params::KantanSimpleCategoryDatasource_NewSimpleCategoryDatasource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsDatasource.KantanSimpleCategoryDatasource.BP_AddCategory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Param_Name                                             (Parm, NativeAccessSpecifierPublic)
// class FName                             CatId                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanSimpleCategoryDatasource::BP_AddCategory(const class FText& Param_Name, class FName* CatId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanSimpleCategoryDatasource", "BP_AddCategory");

	Params::KantanSimpleCategoryDatasource_BP_AddCategory Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CatId != nullptr)
		*CatId = Parms.CatId;
}


// Function KantanChartsDatasource.KantanSimpleCategoryDatasource.BP_AddCategoryWithId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Param_Name                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanSimpleCategoryDatasource::BP_AddCategoryWithId(class FName ID, const class FText& Param_Name, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanSimpleCategoryDatasource", "BP_AddCategoryWithId");

	Params::KantanSimpleCategoryDatasource_BP_AddCategoryWithId Parms{};

	Parms.ID = ID;
	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsDatasource.KantanSimpleCategoryDatasource.BP_RemoveAllCategories
// (Final, Native, Public, BlueprintCallable)

void UKantanSimpleCategoryDatasource::BP_RemoveAllCategories()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanSimpleCategoryDatasource", "BP_RemoveAllCategories");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsDatasource.KantanSimpleCategoryDatasource.BP_RemoveCategory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanSimpleCategoryDatasource::BP_RemoveCategory(class FName ID, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanSimpleCategoryDatasource", "BP_RemoveCategory");

	Params::KantanSimpleCategoryDatasource_BP_RemoveCategory Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsDatasource.KantanSimpleCategoryDatasource.BP_UpdateCategoryValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanSimpleCategoryDatasource::BP_UpdateCategoryValue(class FName ID, float Value, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanSimpleCategoryDatasource", "BP_UpdateCategoryValue");

	Params::KantanSimpleCategoryDatasource_BP_UpdateCategoryValue Parms{};

	Parms.ID = ID;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}

}


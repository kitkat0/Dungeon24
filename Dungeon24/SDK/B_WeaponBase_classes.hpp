#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_WeaponBase

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "LyraGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_WeaponBase.B_WeaponBase_C
// 0x0060 (0x0410 - 0x03B0)
#pragma pack(push, 0x1)
class alignas(0x10) AB_WeaponBase_C : public ALyraWeaponBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAGR_CombatManager*                     AGR_CombatManager;                                 // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  OwnerAsPawn;                                       // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Impact_Positions;                                  // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Impact_Normals;                                    // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<EPhysicalSurface>                      ImpactSurfaceTypes;                                // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ApplyTeamColorsToWeapon;                           // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_WeaponBase(int32 EntryPoint);
	void IsFirstPersonActor(bool* bRet);
	void ReceiveBeginPlay();
	void RenderStaticForOneBoneMesh(class USkeletalMeshComponent* InMeshComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_WeaponBase_C">();
	}
	static class AB_WeaponBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_WeaponBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AB_WeaponBase_C) == 0x000010, "Wrong alignment on AB_WeaponBase_C");
static_assert(sizeof(AB_WeaponBase_C) == 0x000410, "Wrong size on AB_WeaponBase_C");
static_assert(offsetof(AB_WeaponBase_C, UberGraphFrame) == 0x0003B0, "Member 'AB_WeaponBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_WeaponBase_C, AGR_CombatManager) == 0x0003B8, "Member 'AB_WeaponBase_C::AGR_CombatManager' has a wrong offset!");
static_assert(offsetof(AB_WeaponBase_C, SkeletalMesh) == 0x0003C0, "Member 'AB_WeaponBase_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AB_WeaponBase_C, OwnerAsPawn) == 0x0003C8, "Member 'AB_WeaponBase_C::OwnerAsPawn' has a wrong offset!");
static_assert(offsetof(AB_WeaponBase_C, Impact_Positions) == 0x0003D0, "Member 'AB_WeaponBase_C::Impact_Positions' has a wrong offset!");
static_assert(offsetof(AB_WeaponBase_C, Impact_Normals) == 0x0003E0, "Member 'AB_WeaponBase_C::Impact_Normals' has a wrong offset!");
static_assert(offsetof(AB_WeaponBase_C, ImpactSurfaceTypes) == 0x0003F0, "Member 'AB_WeaponBase_C::ImpactSurfaceTypes' has a wrong offset!");
static_assert(offsetof(AB_WeaponBase_C, ApplyTeamColorsToWeapon) == 0x000400, "Member 'AB_WeaponBase_C::ApplyTeamColorsToWeapon' has a wrong offset!");

}


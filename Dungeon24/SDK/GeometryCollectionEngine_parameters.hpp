#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryCollectionEngine

#include "Basic.hpp"

#include "GeometryCollectionEngine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ChaosSolverEngine_structs.hpp"
#include "Chaos_structs.hpp"


namespace SDK::Params
{

// Function GeometryCollectionEngine.ChaosDestructionListener.AddChaosSolverActor
// 0x0008 (0x0008 - 0x0000)
struct ChaosDestructionListener_AddChaosSolverActor final
{
public:
	class AChaosSolverActor*                      ChaosSolverActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_AddChaosSolverActor) == 0x000008, "Wrong alignment on ChaosDestructionListener_AddChaosSolverActor");
static_assert(sizeof(ChaosDestructionListener_AddChaosSolverActor) == 0x000008, "Wrong size on ChaosDestructionListener_AddChaosSolverActor");
static_assert(offsetof(ChaosDestructionListener_AddChaosSolverActor, ChaosSolverActor) == 0x000000, "Member 'ChaosDestructionListener_AddChaosSolverActor::ChaosSolverActor' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.AddGeometryCollectionActor
// 0x0008 (0x0008 - 0x0000)
struct ChaosDestructionListener_AddGeometryCollectionActor final
{
public:
	class AGeometryCollectionActor*               GeometryCollectionActor;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_AddGeometryCollectionActor) == 0x000008, "Wrong alignment on ChaosDestructionListener_AddGeometryCollectionActor");
static_assert(sizeof(ChaosDestructionListener_AddGeometryCollectionActor) == 0x000008, "Wrong size on ChaosDestructionListener_AddGeometryCollectionActor");
static_assert(offsetof(ChaosDestructionListener_AddGeometryCollectionActor, GeometryCollectionActor) == 0x000000, "Member 'ChaosDestructionListener_AddGeometryCollectionActor::GeometryCollectionActor' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.RemoveChaosSolverActor
// 0x0008 (0x0008 - 0x0000)
struct ChaosDestructionListener_RemoveChaosSolverActor final
{
public:
	class AChaosSolverActor*                      ChaosSolverActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_RemoveChaosSolverActor) == 0x000008, "Wrong alignment on ChaosDestructionListener_RemoveChaosSolverActor");
static_assert(sizeof(ChaosDestructionListener_RemoveChaosSolverActor) == 0x000008, "Wrong size on ChaosDestructionListener_RemoveChaosSolverActor");
static_assert(offsetof(ChaosDestructionListener_RemoveChaosSolverActor, ChaosSolverActor) == 0x000000, "Member 'ChaosDestructionListener_RemoveChaosSolverActor::ChaosSolverActor' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.RemoveGeometryCollectionActor
// 0x0008 (0x0008 - 0x0000)
struct ChaosDestructionListener_RemoveGeometryCollectionActor final
{
public:
	class AGeometryCollectionActor*               GeometryCollectionActor;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_RemoveGeometryCollectionActor) == 0x000008, "Wrong alignment on ChaosDestructionListener_RemoveGeometryCollectionActor");
static_assert(sizeof(ChaosDestructionListener_RemoveGeometryCollectionActor) == 0x000008, "Wrong size on ChaosDestructionListener_RemoveGeometryCollectionActor");
static_assert(offsetof(ChaosDestructionListener_RemoveGeometryCollectionActor, GeometryCollectionActor) == 0x000000, "Member 'ChaosDestructionListener_RemoveGeometryCollectionActor::GeometryCollectionActor' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SetBreakingEventEnabled
// 0x0001 (0x0001 - 0x0000)
struct ChaosDestructionListener_SetBreakingEventEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_SetBreakingEventEnabled) == 0x000001, "Wrong alignment on ChaosDestructionListener_SetBreakingEventEnabled");
static_assert(sizeof(ChaosDestructionListener_SetBreakingEventEnabled) == 0x000001, "Wrong size on ChaosDestructionListener_SetBreakingEventEnabled");
static_assert(offsetof(ChaosDestructionListener_SetBreakingEventEnabled, bIsEnabled) == 0x000000, "Member 'ChaosDestructionListener_SetBreakingEventEnabled::bIsEnabled' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SetBreakingEventRequestSettings
// 0x0018 (0x0018 - 0x0000)
struct ChaosDestructionListener_SetBreakingEventRequestSettings final
{
public:
	struct FChaosBreakingEventRequestSettings     InSettings;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_SetBreakingEventRequestSettings) == 0x000004, "Wrong alignment on ChaosDestructionListener_SetBreakingEventRequestSettings");
static_assert(sizeof(ChaosDestructionListener_SetBreakingEventRequestSettings) == 0x000018, "Wrong size on ChaosDestructionListener_SetBreakingEventRequestSettings");
static_assert(offsetof(ChaosDestructionListener_SetBreakingEventRequestSettings, InSettings) == 0x000000, "Member 'ChaosDestructionListener_SetBreakingEventRequestSettings::InSettings' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SetCollisionEventEnabled
// 0x0001 (0x0001 - 0x0000)
struct ChaosDestructionListener_SetCollisionEventEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_SetCollisionEventEnabled) == 0x000001, "Wrong alignment on ChaosDestructionListener_SetCollisionEventEnabled");
static_assert(sizeof(ChaosDestructionListener_SetCollisionEventEnabled) == 0x000001, "Wrong size on ChaosDestructionListener_SetCollisionEventEnabled");
static_assert(offsetof(ChaosDestructionListener_SetCollisionEventEnabled, bIsEnabled) == 0x000000, "Member 'ChaosDestructionListener_SetCollisionEventEnabled::bIsEnabled' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SetCollisionEventRequestSettings
// 0x0018 (0x0018 - 0x0000)
struct ChaosDestructionListener_SetCollisionEventRequestSettings final
{
public:
	struct FChaosCollisionEventRequestSettings    InSettings;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_SetCollisionEventRequestSettings) == 0x000004, "Wrong alignment on ChaosDestructionListener_SetCollisionEventRequestSettings");
static_assert(sizeof(ChaosDestructionListener_SetCollisionEventRequestSettings) == 0x000018, "Wrong size on ChaosDestructionListener_SetCollisionEventRequestSettings");
static_assert(offsetof(ChaosDestructionListener_SetCollisionEventRequestSettings, InSettings) == 0x000000, "Member 'ChaosDestructionListener_SetCollisionEventRequestSettings::InSettings' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SetRemovalEventEnabled
// 0x0001 (0x0001 - 0x0000)
struct ChaosDestructionListener_SetRemovalEventEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_SetRemovalEventEnabled) == 0x000001, "Wrong alignment on ChaosDestructionListener_SetRemovalEventEnabled");
static_assert(sizeof(ChaosDestructionListener_SetRemovalEventEnabled) == 0x000001, "Wrong size on ChaosDestructionListener_SetRemovalEventEnabled");
static_assert(offsetof(ChaosDestructionListener_SetRemovalEventEnabled, bIsEnabled) == 0x000000, "Member 'ChaosDestructionListener_SetRemovalEventEnabled::bIsEnabled' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SetRemovalEventRequestSettings
// 0x0010 (0x0010 - 0x0000)
struct ChaosDestructionListener_SetRemovalEventRequestSettings final
{
public:
	struct FChaosRemovalEventRequestSettings      InSettings;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_SetRemovalEventRequestSettings) == 0x000004, "Wrong alignment on ChaosDestructionListener_SetRemovalEventRequestSettings");
static_assert(sizeof(ChaosDestructionListener_SetRemovalEventRequestSettings) == 0x000010, "Wrong size on ChaosDestructionListener_SetRemovalEventRequestSettings");
static_assert(offsetof(ChaosDestructionListener_SetRemovalEventRequestSettings, InSettings) == 0x000000, "Member 'ChaosDestructionListener_SetRemovalEventRequestSettings::InSettings' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SetTrailingEventEnabled
// 0x0001 (0x0001 - 0x0000)
struct ChaosDestructionListener_SetTrailingEventEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_SetTrailingEventEnabled) == 0x000001, "Wrong alignment on ChaosDestructionListener_SetTrailingEventEnabled");
static_assert(sizeof(ChaosDestructionListener_SetTrailingEventEnabled) == 0x000001, "Wrong size on ChaosDestructionListener_SetTrailingEventEnabled");
static_assert(offsetof(ChaosDestructionListener_SetTrailingEventEnabled, bIsEnabled) == 0x000000, "Member 'ChaosDestructionListener_SetTrailingEventEnabled::bIsEnabled' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SetTrailingEventRequestSettings
// 0x0018 (0x0018 - 0x0000)
struct ChaosDestructionListener_SetTrailingEventRequestSettings final
{
public:
	struct FChaosTrailingEventRequestSettings     InSettings;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_SetTrailingEventRequestSettings) == 0x000004, "Wrong alignment on ChaosDestructionListener_SetTrailingEventRequestSettings");
static_assert(sizeof(ChaosDestructionListener_SetTrailingEventRequestSettings) == 0x000018, "Wrong size on ChaosDestructionListener_SetTrailingEventRequestSettings");
static_assert(offsetof(ChaosDestructionListener_SetTrailingEventRequestSettings, InSettings) == 0x000000, "Member 'ChaosDestructionListener_SetTrailingEventRequestSettings::InSettings' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SortBreakingEvents
// 0x0018 (0x0018 - 0x0000)
struct ChaosDestructionListener_SortBreakingEvents final
{
public:
	TArray<struct FChaosBreakingEventData>        BreakingEvents;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EChaosBreakingSortMethod                      SortMethod;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosDestructionListener_SortBreakingEvents) == 0x000008, "Wrong alignment on ChaosDestructionListener_SortBreakingEvents");
static_assert(sizeof(ChaosDestructionListener_SortBreakingEvents) == 0x000018, "Wrong size on ChaosDestructionListener_SortBreakingEvents");
static_assert(offsetof(ChaosDestructionListener_SortBreakingEvents, BreakingEvents) == 0x000000, "Member 'ChaosDestructionListener_SortBreakingEvents::BreakingEvents' has a wrong offset!");
static_assert(offsetof(ChaosDestructionListener_SortBreakingEvents, SortMethod) == 0x000010, "Member 'ChaosDestructionListener_SortBreakingEvents::SortMethod' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SortCollisionEvents
// 0x0018 (0x0018 - 0x0000)
struct ChaosDestructionListener_SortCollisionEvents final
{
public:
	TArray<struct FChaosCollisionEventData>       CollisionEvents;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EChaosCollisionSortMethod                     SortMethod;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosDestructionListener_SortCollisionEvents) == 0x000008, "Wrong alignment on ChaosDestructionListener_SortCollisionEvents");
static_assert(sizeof(ChaosDestructionListener_SortCollisionEvents) == 0x000018, "Wrong size on ChaosDestructionListener_SortCollisionEvents");
static_assert(offsetof(ChaosDestructionListener_SortCollisionEvents, CollisionEvents) == 0x000000, "Member 'ChaosDestructionListener_SortCollisionEvents::CollisionEvents' has a wrong offset!");
static_assert(offsetof(ChaosDestructionListener_SortCollisionEvents, SortMethod) == 0x000010, "Member 'ChaosDestructionListener_SortCollisionEvents::SortMethod' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SortRemovalEvents
// 0x0018 (0x0018 - 0x0000)
struct ChaosDestructionListener_SortRemovalEvents final
{
public:
	TArray<struct FChaosRemovalEventData>         RemovalEvents;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EChaosRemovalSortMethod                       SortMethod;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosDestructionListener_SortRemovalEvents) == 0x000008, "Wrong alignment on ChaosDestructionListener_SortRemovalEvents");
static_assert(sizeof(ChaosDestructionListener_SortRemovalEvents) == 0x000018, "Wrong size on ChaosDestructionListener_SortRemovalEvents");
static_assert(offsetof(ChaosDestructionListener_SortRemovalEvents, RemovalEvents) == 0x000000, "Member 'ChaosDestructionListener_SortRemovalEvents::RemovalEvents' has a wrong offset!");
static_assert(offsetof(ChaosDestructionListener_SortRemovalEvents, SortMethod) == 0x000010, "Member 'ChaosDestructionListener_SortRemovalEvents::SortMethod' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.SortTrailingEvents
// 0x0018 (0x0018 - 0x0000)
struct ChaosDestructionListener_SortTrailingEvents final
{
public:
	TArray<struct FChaosTrailingEventData>        TrailingEvents;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EChaosTrailingSortMethod                      SortMethod;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosDestructionListener_SortTrailingEvents) == 0x000008, "Wrong alignment on ChaosDestructionListener_SortTrailingEvents");
static_assert(sizeof(ChaosDestructionListener_SortTrailingEvents) == 0x000018, "Wrong size on ChaosDestructionListener_SortTrailingEvents");
static_assert(offsetof(ChaosDestructionListener_SortTrailingEvents, TrailingEvents) == 0x000000, "Member 'ChaosDestructionListener_SortTrailingEvents::TrailingEvents' has a wrong offset!");
static_assert(offsetof(ChaosDestructionListener_SortTrailingEvents, SortMethod) == 0x000010, "Member 'ChaosDestructionListener_SortTrailingEvents::SortMethod' has a wrong offset!");

// Function GeometryCollectionEngine.ChaosDestructionListener.IsEventListening
// 0x0001 (0x0001 - 0x0000)
struct ChaosDestructionListener_IsEventListening final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosDestructionListener_IsEventListening) == 0x000001, "Wrong alignment on ChaosDestructionListener_IsEventListening");
static_assert(sizeof(ChaosDestructionListener_IsEventListening) == 0x000001, "Wrong size on ChaosDestructionListener_IsEventListening");
static_assert(offsetof(ChaosDestructionListener_IsEventListening, ReturnValue) == 0x000000, "Member 'ChaosDestructionListener_IsEventListening::ReturnValue' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionActor.RaycastSingle
// 0x0120 (0x0120 - 0x0000)
struct GeometryCollectionActor_RaycastSingle final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0030(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryCollectionActor_RaycastSingle) == 0x000008, "Wrong alignment on GeometryCollectionActor_RaycastSingle");
static_assert(sizeof(GeometryCollectionActor_RaycastSingle) == 0x000120, "Wrong size on GeometryCollectionActor_RaycastSingle");
static_assert(offsetof(GeometryCollectionActor_RaycastSingle, Start) == 0x000000, "Member 'GeometryCollectionActor_RaycastSingle::Start' has a wrong offset!");
static_assert(offsetof(GeometryCollectionActor_RaycastSingle, End) == 0x000018, "Member 'GeometryCollectionActor_RaycastSingle::End' has a wrong offset!");
static_assert(offsetof(GeometryCollectionActor_RaycastSingle, OutHit) == 0x000030, "Member 'GeometryCollectionActor_RaycastSingle::OutHit' has a wrong offset!");
static_assert(offsetof(GeometryCollectionActor_RaycastSingle, ReturnValue) == 0x000118, "Member 'GeometryCollectionActor_RaycastSingle::ReturnValue' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyAngularVelocity
// 0x0020 (0x0020 - 0x0000)
struct GeometryCollectionComponent_ApplyAngularVelocity final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AngularVelocity;                                   // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_ApplyAngularVelocity) == 0x000008, "Wrong alignment on GeometryCollectionComponent_ApplyAngularVelocity");
static_assert(sizeof(GeometryCollectionComponent_ApplyAngularVelocity) == 0x000020, "Wrong size on GeometryCollectionComponent_ApplyAngularVelocity");
static_assert(offsetof(GeometryCollectionComponent_ApplyAngularVelocity, ItemIndex) == 0x000000, "Member 'GeometryCollectionComponent_ApplyAngularVelocity::ItemIndex' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyAngularVelocity, AngularVelocity) == 0x000008, "Member 'GeometryCollectionComponent_ApplyAngularVelocity::AngularVelocity' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyBreakingAngularVelocity
// 0x0020 (0x0020 - 0x0000)
struct GeometryCollectionComponent_ApplyBreakingAngularVelocity final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AngularVelocity;                                   // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_ApplyBreakingAngularVelocity) == 0x000008, "Wrong alignment on GeometryCollectionComponent_ApplyBreakingAngularVelocity");
static_assert(sizeof(GeometryCollectionComponent_ApplyBreakingAngularVelocity) == 0x000020, "Wrong size on GeometryCollectionComponent_ApplyBreakingAngularVelocity");
static_assert(offsetof(GeometryCollectionComponent_ApplyBreakingAngularVelocity, ItemIndex) == 0x000000, "Member 'GeometryCollectionComponent_ApplyBreakingAngularVelocity::ItemIndex' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyBreakingAngularVelocity, AngularVelocity) == 0x000008, "Member 'GeometryCollectionComponent_ApplyBreakingAngularVelocity::AngularVelocity' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyBreakingLinearVelocity
// 0x0020 (0x0020 - 0x0000)
struct GeometryCollectionComponent_ApplyBreakingLinearVelocity final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LinearVelocity;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_ApplyBreakingLinearVelocity) == 0x000008, "Wrong alignment on GeometryCollectionComponent_ApplyBreakingLinearVelocity");
static_assert(sizeof(GeometryCollectionComponent_ApplyBreakingLinearVelocity) == 0x000020, "Wrong size on GeometryCollectionComponent_ApplyBreakingLinearVelocity");
static_assert(offsetof(GeometryCollectionComponent_ApplyBreakingLinearVelocity, ItemIndex) == 0x000000, "Member 'GeometryCollectionComponent_ApplyBreakingLinearVelocity::ItemIndex' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyBreakingLinearVelocity, LinearVelocity) == 0x000008, "Member 'GeometryCollectionComponent_ApplyBreakingLinearVelocity::LinearVelocity' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyExternalStrain
// 0x0030 (0x0030 - 0x0000)
struct GeometryCollectionComponent_ApplyExternalStrain final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PropagationDepth;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropagationFactor;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strain;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_ApplyExternalStrain) == 0x000008, "Wrong alignment on GeometryCollectionComponent_ApplyExternalStrain");
static_assert(sizeof(GeometryCollectionComponent_ApplyExternalStrain) == 0x000030, "Wrong size on GeometryCollectionComponent_ApplyExternalStrain");
static_assert(offsetof(GeometryCollectionComponent_ApplyExternalStrain, ItemIndex) == 0x000000, "Member 'GeometryCollectionComponent_ApplyExternalStrain::ItemIndex' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyExternalStrain, Location) == 0x000008, "Member 'GeometryCollectionComponent_ApplyExternalStrain::Location' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyExternalStrain, Radius) == 0x000020, "Member 'GeometryCollectionComponent_ApplyExternalStrain::Radius' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyExternalStrain, PropagationDepth) == 0x000024, "Member 'GeometryCollectionComponent_ApplyExternalStrain::PropagationDepth' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyExternalStrain, PropagationFactor) == 0x000028, "Member 'GeometryCollectionComponent_ApplyExternalStrain::PropagationFactor' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyExternalStrain, Strain) == 0x00002C, "Member 'GeometryCollectionComponent_ApplyExternalStrain::Strain' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyInternalStrain
// 0x0030 (0x0030 - 0x0000)
struct GeometryCollectionComponent_ApplyInternalStrain final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PropagationDepth;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropagationFactor;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strain;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_ApplyInternalStrain) == 0x000008, "Wrong alignment on GeometryCollectionComponent_ApplyInternalStrain");
static_assert(sizeof(GeometryCollectionComponent_ApplyInternalStrain) == 0x000030, "Wrong size on GeometryCollectionComponent_ApplyInternalStrain");
static_assert(offsetof(GeometryCollectionComponent_ApplyInternalStrain, ItemIndex) == 0x000000, "Member 'GeometryCollectionComponent_ApplyInternalStrain::ItemIndex' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyInternalStrain, Location) == 0x000008, "Member 'GeometryCollectionComponent_ApplyInternalStrain::Location' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyInternalStrain, Radius) == 0x000020, "Member 'GeometryCollectionComponent_ApplyInternalStrain::Radius' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyInternalStrain, PropagationDepth) == 0x000024, "Member 'GeometryCollectionComponent_ApplyInternalStrain::PropagationDepth' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyInternalStrain, PropagationFactor) == 0x000028, "Member 'GeometryCollectionComponent_ApplyInternalStrain::PropagationFactor' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyInternalStrain, Strain) == 0x00002C, "Member 'GeometryCollectionComponent_ApplyInternalStrain::Strain' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyKinematicField
// 0x0020 (0x0020 - 0x0000)
struct GeometryCollectionComponent_ApplyKinematicField final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_ApplyKinematicField) == 0x000008, "Wrong alignment on GeometryCollectionComponent_ApplyKinematicField");
static_assert(sizeof(GeometryCollectionComponent_ApplyKinematicField) == 0x000020, "Wrong size on GeometryCollectionComponent_ApplyKinematicField");
static_assert(offsetof(GeometryCollectionComponent_ApplyKinematicField, Radius) == 0x000000, "Member 'GeometryCollectionComponent_ApplyKinematicField::Radius' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyKinematicField, Position) == 0x000008, "Member 'GeometryCollectionComponent_ApplyKinematicField::Position' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyLinearVelocity
// 0x0020 (0x0020 - 0x0000)
struct GeometryCollectionComponent_ApplyLinearVelocity final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LinearVelocity;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_ApplyLinearVelocity) == 0x000008, "Wrong alignment on GeometryCollectionComponent_ApplyLinearVelocity");
static_assert(sizeof(GeometryCollectionComponent_ApplyLinearVelocity) == 0x000020, "Wrong size on GeometryCollectionComponent_ApplyLinearVelocity");
static_assert(offsetof(GeometryCollectionComponent_ApplyLinearVelocity, ItemIndex) == 0x000000, "Member 'GeometryCollectionComponent_ApplyLinearVelocity::ItemIndex' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyLinearVelocity, LinearVelocity) == 0x000008, "Member 'GeometryCollectionComponent_ApplyLinearVelocity::LinearVelocity' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyPhysicsField
// 0x0018 (0x0018 - 0x0000)
struct GeometryCollectionComponent_ApplyPhysicsField final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryCollectionPhysicsTypeEnum            Target;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFieldSystemMetaData*                   MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFieldNodeBase*                         Field;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_ApplyPhysicsField) == 0x000008, "Wrong alignment on GeometryCollectionComponent_ApplyPhysicsField");
static_assert(sizeof(GeometryCollectionComponent_ApplyPhysicsField) == 0x000018, "Wrong size on GeometryCollectionComponent_ApplyPhysicsField");
static_assert(offsetof(GeometryCollectionComponent_ApplyPhysicsField, Enabled) == 0x000000, "Member 'GeometryCollectionComponent_ApplyPhysicsField::Enabled' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyPhysicsField, Target) == 0x000001, "Member 'GeometryCollectionComponent_ApplyPhysicsField::Target' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyPhysicsField, MetaData) == 0x000008, "Member 'GeometryCollectionComponent_ApplyPhysicsField::MetaData' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_ApplyPhysicsField, Field) == 0x000010, "Member 'GeometryCollectionComponent_ApplyPhysicsField::Field' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.CrumbleCluster
// 0x0004 (0x0004 - 0x0000)
struct GeometryCollectionComponent_CrumbleCluster final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_CrumbleCluster) == 0x000004, "Wrong alignment on GeometryCollectionComponent_CrumbleCluster");
static_assert(sizeof(GeometryCollectionComponent_CrumbleCluster) == 0x000004, "Wrong size on GeometryCollectionComponent_CrumbleCluster");
static_assert(offsetof(GeometryCollectionComponent_CrumbleCluster, ItemIndex) == 0x000000, "Member 'GeometryCollectionComponent_CrumbleCluster::ItemIndex' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.GetInitialLevel
// 0x0008 (0x0008 - 0x0000)
struct GeometryCollectionComponent_GetInitialLevel final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_GetInitialLevel) == 0x000004, "Wrong alignment on GeometryCollectionComponent_GetInitialLevel");
static_assert(sizeof(GeometryCollectionComponent_GetInitialLevel) == 0x000008, "Wrong size on GeometryCollectionComponent_GetInitialLevel");
static_assert(offsetof(GeometryCollectionComponent_GetInitialLevel, ItemIndex) == 0x000000, "Member 'GeometryCollectionComponent_GetInitialLevel::ItemIndex' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_GetInitialLevel, ReturnValue) == 0x000004, "Member 'GeometryCollectionComponent_GetInitialLevel::ReturnValue' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.GetMassAndExtents
// 0x0040 (0x0040 - 0x0000)
struct GeometryCollectionComponent_GetMassAndExtents final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMass;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   OutExtents;                                        // 0x0008(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_GetMassAndExtents) == 0x000008, "Wrong alignment on GeometryCollectionComponent_GetMassAndExtents");
static_assert(sizeof(GeometryCollectionComponent_GetMassAndExtents) == 0x000040, "Wrong size on GeometryCollectionComponent_GetMassAndExtents");
static_assert(offsetof(GeometryCollectionComponent_GetMassAndExtents, ItemIndex) == 0x000000, "Member 'GeometryCollectionComponent_GetMassAndExtents::ItemIndex' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_GetMassAndExtents, OutMass) == 0x000004, "Member 'GeometryCollectionComponent_GetMassAndExtents::OutMass' has a wrong offset!");
static_assert(offsetof(GeometryCollectionComponent_GetMassAndExtents, OutExtents) == 0x000008, "Member 'GeometryCollectionComponent_GetMassAndExtents::OutExtents' has a wrong offset!");

// DelegateFunction GeometryCollectionEngine.GeometryCollectionComponent.NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GeometryCollectionComponent_NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature final
{
public:
	class UGeometryCollectionComponent*           FracturedComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature) == 0x000008, "Wrong alignment on GeometryCollectionComponent_NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature");
static_assert(sizeof(GeometryCollectionComponent_NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature) == 0x000008, "Wrong size on GeometryCollectionComponent_NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature");
static_assert(offsetof(GeometryCollectionComponent_NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature, FracturedComponent) == 0x000000, "Member 'GeometryCollectionComponent_NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature::FracturedComponent' has a wrong offset!");

// DelegateFunction GeometryCollectionEngine.GeometryCollectionComponent.NotifyGeometryCollectionPhysicsStateChange__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GeometryCollectionComponent_NotifyGeometryCollectionPhysicsStateChange__DelegateSignature final
{
public:
	class UGeometryCollectionComponent*           FracturedComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_NotifyGeometryCollectionPhysicsStateChange__DelegateSignature) == 0x000008, "Wrong alignment on GeometryCollectionComponent_NotifyGeometryCollectionPhysicsStateChange__DelegateSignature");
static_assert(sizeof(GeometryCollectionComponent_NotifyGeometryCollectionPhysicsStateChange__DelegateSignature) == 0x000008, "Wrong size on GeometryCollectionComponent_NotifyGeometryCollectionPhysicsStateChange__DelegateSignature");
static_assert(offsetof(GeometryCollectionComponent_NotifyGeometryCollectionPhysicsStateChange__DelegateSignature, FracturedComponent) == 0x000000, "Member 'GeometryCollectionComponent_NotifyGeometryCollectionPhysicsStateChange__DelegateSignature::FracturedComponent' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.ReceivePhysicsCollision
// 0x00C0 (0x00C0 - 0x0000)
struct GeometryCollectionComponent_ReceivePhysicsCollision final
{
public:
	struct FChaosPhysicsCollisionInfo             CollisionInfo;                                     // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_ReceivePhysicsCollision) == 0x000008, "Wrong alignment on GeometryCollectionComponent_ReceivePhysicsCollision");
static_assert(sizeof(GeometryCollectionComponent_ReceivePhysicsCollision) == 0x0000C0, "Wrong size on GeometryCollectionComponent_ReceivePhysicsCollision");
static_assert(offsetof(GeometryCollectionComponent_ReceivePhysicsCollision, CollisionInfo) == 0x000000, "Member 'GeometryCollectionComponent_ReceivePhysicsCollision::CollisionInfo' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyBreaks
// 0x0001 (0x0001 - 0x0000)
struct GeometryCollectionComponent_SetNotifyBreaks final
{
public:
	bool                                          bNewNotifyBreaks;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_SetNotifyBreaks) == 0x000001, "Wrong alignment on GeometryCollectionComponent_SetNotifyBreaks");
static_assert(sizeof(GeometryCollectionComponent_SetNotifyBreaks) == 0x000001, "Wrong size on GeometryCollectionComponent_SetNotifyBreaks");
static_assert(offsetof(GeometryCollectionComponent_SetNotifyBreaks, bNewNotifyBreaks) == 0x000000, "Member 'GeometryCollectionComponent_SetNotifyBreaks::bNewNotifyBreaks' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyCrumblings
// 0x0001 (0x0001 - 0x0000)
struct GeometryCollectionComponent_SetNotifyCrumblings final
{
public:
	bool                                          bNewNotifyCrumblings;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_SetNotifyCrumblings) == 0x000001, "Wrong alignment on GeometryCollectionComponent_SetNotifyCrumblings");
static_assert(sizeof(GeometryCollectionComponent_SetNotifyCrumblings) == 0x000001, "Wrong size on GeometryCollectionComponent_SetNotifyCrumblings");
static_assert(offsetof(GeometryCollectionComponent_SetNotifyCrumblings, bNewNotifyCrumblings) == 0x000000, "Member 'GeometryCollectionComponent_SetNotifyCrumblings::bNewNotifyCrumblings' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyRemovals
// 0x0001 (0x0001 - 0x0000)
struct GeometryCollectionComponent_SetNotifyRemovals final
{
public:
	bool                                          bNewNotifyRemovals;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_SetNotifyRemovals) == 0x000001, "Wrong alignment on GeometryCollectionComponent_SetNotifyRemovals");
static_assert(sizeof(GeometryCollectionComponent_SetNotifyRemovals) == 0x000001, "Wrong size on GeometryCollectionComponent_SetNotifyRemovals");
static_assert(offsetof(GeometryCollectionComponent_SetNotifyRemovals, bNewNotifyRemovals) == 0x000000, "Member 'GeometryCollectionComponent_SetNotifyRemovals::bNewNotifyRemovals' has a wrong offset!");

// Function GeometryCollectionEngine.GeometryCollectionComponent.SetRestCollection
// 0x0008 (0x0008 - 0x0000)
struct GeometryCollectionComponent_SetRestCollection final
{
public:
	const class UGeometryCollection*              RestCollectionIn;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionComponent_SetRestCollection) == 0x000008, "Wrong alignment on GeometryCollectionComponent_SetRestCollection");
static_assert(sizeof(GeometryCollectionComponent_SetRestCollection) == 0x000008, "Wrong size on GeometryCollectionComponent_SetRestCollection");
static_assert(offsetof(GeometryCollectionComponent_SetRestCollection, RestCollectionIn) == 0x000000, "Member 'GeometryCollectionComponent_SetRestCollection::RestCollectionIn' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FaceData

#include "Basic.hpp"

#include "FaceData_classes.hpp"
#include "FaceData_parameters.hpp"


namespace SDK
{

// Function FaceData.FaceData_C.GetFaceConfigs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UExcelLoaderConfigGroupWrapper*   ConfigApi                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   FaceId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkinId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Completed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTgfFaceConfig                   FaceConfig                                             (Parm, OutParm)

void UFaceData_C::GetFaceConfigs(class UExcelLoaderConfigGroupWrapper* ConfigApi, int32 FaceId, int32 SkinId, bool* Completed, struct FTgfFaceConfig* FaceConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaceData_C", "GetFaceConfigs");

	Params::FaceData_C_GetFaceConfigs Parms{};

	Parms.ConfigApi = ConfigApi;
	Parms.FaceId = FaceId;
	Parms.SkinId = SkinId;

	UObject::ProcessEvent(Func, &Parms);

	if (Completed != nullptr)
		*Completed = Parms.Completed;

	if (FaceConfig != nullptr)
		*FaceConfig = std::move(Parms.FaceConfig);
}


// Function FaceData.FaceData_C.SwitchFace
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UExcelLoaderConfigGroupWrapper*   ConfigApi                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   FaceId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ATgfAvatarActor*                  InAvatar                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UFaceData_C::SwitchFace(class UExcelLoaderConfigGroupWrapper* ConfigApi, int32 FaceId, class ATgfAvatarActor*& InAvatar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaceData_C", "SwitchFace");

	Params::FaceData_C_SwitchFace Parms{};

	Parms.ConfigApi = ConfigApi;
	Parms.FaceId = FaceId;
	Parms.InAvatar = InAvatar;

	UObject::ProcessEvent(Func, &Parms);

	InAvatar = Parms.InAvatar;
}


// Function FaceData.FaceData_C.SwitchSkinMaterials
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMaterialInstance*>        SkinMaterials                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UFaceData_C::SwitchSkinMaterials(TArray<class UMaterialInstance*>& SkinMaterials, class USkeletalMeshComponent* SkeletalMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaceData_C", "SwitchSkinMaterials");

	Params::FaceData_C_SwitchSkinMaterials Parms{};

	Parms.SkinMaterials = std::move(SkinMaterials);
	Parms.SkeletalMeshComponent = SkeletalMeshComponent;

	UObject::ProcessEvent(Func, &Parms);

	SkinMaterials = std::move(Parms.SkinMaterials);
}

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TgfWaiting

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TgfWaiting.BP_TgfWaiting_C
// 0x00B0 (0x0158 - 0x00A8)
class UBP_TgfWaiting_C final : public UGameStateComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        WaitingUserRemainTime;                             // 0x00B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentUserCount;                                  // 0x00B8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalUserCount;                                    // 0x00BC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWaitingUser;                                     // 0x00C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             UserCountChangeEventDispatcher;                    // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        EnteringGameRemainTime;                            // 0x00D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnteringGame;                                    // 0x00E0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TickSeconds;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TickDeltaSeconds;                                  // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 URL;                                               // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 URL2;                                              // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             WaitingUserRemainTimeChangeEventDispatcher;        // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             IsWaitingUserChangeEventDispatcher;                // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EnteringGameRemainTimeChangeEventDispatcher;       // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             IsEnteringGameChangeEventDispatcher;               // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AddInvSeeToCharacter(class ABP_Tgf_Hero_Default_C* Character);
	void AddWaitingTagsToCharacter(class ABP_Tgf_Hero_Default_C* Character);
	void EnterGame();
	void EnteringGameRemainTimeChangeEventDispatcher__DelegateSignature(double Time);
	void ExecuteUbergraph_BP_TgfWaiting(int32 EntryPoint);
	void FinishEnteringGame();
	void FinishWaitingUser();
	void GetEnteringGameRemainTime(double* RemainTime);
	void GetWaitingUserRemainTime(double* RemainTime);
	void IsEnteringGameChangeEventDispatcher__DelegateSignature(bool Value, double Time);
	void IsWaitingUserChangeEventDispatcher__DelegateSignature(bool Value, double Time);
	void OnCharacterBeginPlay(class ABP_Fighter_HeroSample_C* Character);
	void OnClientLoaded();
	void OnMessageReceived_0170F7E7461BB7958DA8A7B2905ABB94(class UAsyncAction_ListenForGameplayMessage* ProxyObject, const struct FGameplayTag& ActualChannel);
	void OnPlayerLoginSuccess(int32 Param_CurrentUserCount, int32 Param_TotalUserCount, class ALyraCharacter* Character);
	void OnPlayerLogout(int32 Param_CurrentUserCount, int32 Param_TotalUserCount);
	void OnReady_BA56B8324F553C3B00D4E2BF46D7E1DB();
	void OnRep_CurrentUserCount();
	void OnRep_EnteringGameRemainTime();
	void OnRep_IsEnteringGame();
	void OnRep_IsWaitingUser();
	void OnRep_TotalUserCount();
	void OnRep_WaitingUserRemainTime();
	void OnRoomReady();
	void OnUserCountChanged(int32 Param_CurrentUserCount, int32 Param_TotalUserCount);
	void OnWaitingRoomLeave();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void RemoveInvSeeFromCharacter(class ABP_Tgf_Hero_Default_C* Character);
	void RemoveWaitingTagsFromCharacter(class ABP_Tgf_Hero_Default_C* Character);
	void StartEnteringGameCountdown();
	void StartWaitingUserCountdown();
	void StopEnteringGameCountdown();
	void StopWaitingUserCountdown();
	void UpdateEnteringGameCountdown(double DeltaSeconds);
	void UpdateWaitingUserRemainTime(double DeltaSeconds);
	void UserCountChangeEventDispatcher__DelegateSignature(int32 Param_CurrentUserCount, int32 Param_TotalUserCount);
	void WaitingUserRemainTimeChangeEventDispatcher__DelegateSignature(double Time);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TgfWaiting_C">();
	}
	static class UBP_TgfWaiting_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TgfWaiting_C>();
	}
};
static_assert(alignof(UBP_TgfWaiting_C) == 0x000008, "Wrong alignment on UBP_TgfWaiting_C");
static_assert(sizeof(UBP_TgfWaiting_C) == 0x000158, "Wrong size on UBP_TgfWaiting_C");
static_assert(offsetof(UBP_TgfWaiting_C, UberGraphFrame) == 0x0000A8, "Member 'UBP_TgfWaiting_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, WaitingUserRemainTime) == 0x0000B0, "Member 'UBP_TgfWaiting_C::WaitingUserRemainTime' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, CurrentUserCount) == 0x0000B8, "Member 'UBP_TgfWaiting_C::CurrentUserCount' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, TotalUserCount) == 0x0000BC, "Member 'UBP_TgfWaiting_C::TotalUserCount' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, IsWaitingUser) == 0x0000C0, "Member 'UBP_TgfWaiting_C::IsWaitingUser' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, UserCountChangeEventDispatcher) == 0x0000C8, "Member 'UBP_TgfWaiting_C::UserCountChangeEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, EnteringGameRemainTime) == 0x0000D8, "Member 'UBP_TgfWaiting_C::EnteringGameRemainTime' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, IsEnteringGame) == 0x0000E0, "Member 'UBP_TgfWaiting_C::IsEnteringGame' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, TickSeconds) == 0x0000E8, "Member 'UBP_TgfWaiting_C::TickSeconds' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, TickDeltaSeconds) == 0x0000F0, "Member 'UBP_TgfWaiting_C::TickDeltaSeconds' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, URL) == 0x0000F8, "Member 'UBP_TgfWaiting_C::URL' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, URL2) == 0x000108, "Member 'UBP_TgfWaiting_C::URL2' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, WaitingUserRemainTimeChangeEventDispatcher) == 0x000118, "Member 'UBP_TgfWaiting_C::WaitingUserRemainTimeChangeEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, IsWaitingUserChangeEventDispatcher) == 0x000128, "Member 'UBP_TgfWaiting_C::IsWaitingUserChangeEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, EnteringGameRemainTimeChangeEventDispatcher) == 0x000138, "Member 'UBP_TgfWaiting_C::EnteringGameRemainTimeChangeEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_TgfWaiting_C, IsEnteringGameChangeEventDispatcher) == 0x000148, "Member 'UBP_TgfWaiting_C::IsEnteringGameChangeEventDispatcher' has a wrong offset!");

}


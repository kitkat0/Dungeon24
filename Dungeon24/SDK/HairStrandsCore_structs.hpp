#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HairStrandsCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum HairStrandsCore.EHairAtlasTextureType
// NumValues: 0x0007
enum class EHairAtlasTextureType : uint8
{
	Depth                                    = 0,
	Tangent                                  = 1,
	Attribute                                = 2,
	Coverage                                 = 3,
	AuxilaryData                             = 4,
	Material                                 = 5,
	EHairAtlasTextureType_MAX                = 6,
};

// Enum HairStrandsCore.EHairCardsClusterType
// NumValues: 0x0003
enum class EHairCardsClusterType : uint8
{
	Low                                      = 0,
	High                                     = 1,
	EHairCardsClusterType_MAX                = 2,
};

// Enum HairStrandsCore.EHairCardsGenerationType
// NumValues: 0x0003
enum class EHairCardsGenerationType : uint8
{
	CardsCount                               = 0,
	UseGuides                                = 1,
	EHairCardsGenerationType_MAX             = 2,
};

// Enum HairStrandsCore.EHairCardsSourceType
// NumValues: 0x0003
enum class EHairCardsSourceType : uint8
{
	Procedural                               = 0,
	Imported                                 = 1,
	EHairCardsSourceType_MAX                 = 2,
};

// Enum HairStrandsCore.EHairInterpolationQuality
// NumValues: 0x0005
enum class EHairInterpolationQuality : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Unknown                                  = 3,
	EHairInterpolationQuality_MAX            = 4,
};

// Enum HairStrandsCore.EHairInterpolationWeight
// NumValues: 0x0006
enum class EHairInterpolationWeight : uint8
{
	Parametric                               = 0,
	Root                                     = 1,
	Index                                    = 2,
	Distance                                 = 3,
	Unknown                                  = 4,
	EHairInterpolationWeight_MAX             = 5,
};

// Enum HairStrandsCore.EGroomGeometryType
// NumValues: 0x0004
enum class EGroomGeometryType : uint8
{
	Strands                                  = 0,
	Cards                                    = 1,
	Meshes                                   = 2,
	EGroomGeometryType_MAX                   = 3,
};

// Enum HairStrandsCore.EGroomBindingType
// NumValues: 0x0004
enum class EGroomBindingType : uint8
{
	NoneBinding                              = 0,
	Rigid                                    = 1,
	Skinning                                 = 2,
	EGroomBindingType_MAX                    = 3,
};

// Enum HairStrandsCore.EGroomOverrideType
// NumValues: 0x0004
enum class EGroomOverrideType : uint8
{
	Auto                                     = 0,
	Enable                                   = 1,
	Disable                                  = 2,
	EGroomOverrideType_MAX                   = 3,
};

// Enum HairStrandsCore.EGroomNiagaraSolvers
// NumValues: 0x0005
enum class EGroomNiagaraSolvers : uint8
{
	None                                     = 0,
	CosseratRods                             = 2,
	AngularSprings                           = 4,
	CustomSolver                             = 8,
	EGroomNiagaraSolvers_MAX                 = 9,
};

// Enum HairStrandsCore.EGroomStrandsSize
// NumValues: 0x0007
enum class EGroomStrandsSize : uint8
{
	None                                     = 0,
	Size2                                    = 2,
	Size4                                    = 4,
	Size8                                    = 8,
	Size16                                   = 16,
	Size32                                   = 32,
	EGroomStrandsSize_MAX                    = 33,
};

// Enum HairStrandsCore.EGroomInterpolationType
// NumValues: 0x0005
enum class EGroomInterpolationType : uint8
{
	None                                     = 0,
	RigidTransform                           = 2,
	OffsetTransform                          = 4,
	SmoothTransform                          = 8,
	EGroomInterpolationType_MAX              = 9,
};

// Enum HairStrandsCore.EGroomBindingMeshType
// NumValues: 0x0003
enum class EGroomBindingMeshType : uint8
{
	SkeletalMesh                             = 0,
	GeometryCache                            = 1,
	EGroomBindingMeshType_MAX                = 2,
};

// Enum HairStrandsCore.EGroomCacheAttributes
// NumValues: 0x0009
enum class EGroomCacheAttributes : uint8
{
	None                                     = 0,
	Position                                 = 1,
	Width                                    = 2,
	Color                                    = 4,
	PositionWidth                            = 3,
	PositionColor                            = 5,
	WidthColor                               = 5,
	PositionWidthColor                       = 7,
	EGroomCacheAttributes_MAX                = 8,
};

// Enum HairStrandsCore.EGroomCacheType
// NumValues: 0x0004
enum class EGroomCacheType : uint8
{
	None                                     = 0,
	Strands                                  = 1,
	Guides                                   = 2,
	EGroomCacheType_MAX                      = 3,
};

// Enum HairStrandsCore.EGroomBasisType
// NumValues: 0x0007
enum class EGroomBasisType : uint8
{
	NoBasis                                  = 0,
	BezierBasis                              = 1,
	BsplineBasis                             = 2,
	CatmullromBasis                          = 3,
	HermiteBasis                             = 4,
	PowerBasis                               = 5,
	EGroomBasisType_MAX                      = 6,
};

// Enum HairStrandsCore.EGroomCurveType
// NumValues: 0x0004
enum class EGroomCurveType : uint8
{
	Cubic                                    = 0,
	Linear                                   = 1,
	VariableOrder                            = 2,
	EGroomCurveType_MAX                      = 3,
};

// Enum HairStrandsCore.EFollicleMaskChannel
// NumValues: 0x0005
enum class EFollicleMaskChannel : uint8
{
	R                                        = 0,
	G                                        = 1,
	B                                        = 2,
	A                                        = 3,
	EFollicleMaskChannel_MAX                 = 4,
};

// Enum HairStrandsCore.EStrandsTexturesTraceType
// NumValues: 0x0004
enum class EStrandsTexturesTraceType : uint8
{
	TraceInside                              = 0,
	TraceOuside                              = 1,
	TraceBidirectional                       = 2,
	EStrandsTexturesTraceType_MAX            = 3,
};

// Enum HairStrandsCore.EStrandsTexturesMeshType
// NumValues: 0x0003
enum class EStrandsTexturesMeshType : uint8
{
	Static                                   = 0,
	Skeletal                                 = 1,
	EStrandsTexturesMeshType_MAX             = 2,
};

// Enum HairStrandsCore.EGroomInterpolationQuality
// NumValues: 0x0005
enum class EGroomInterpolationQuality : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Unknown                                  = 3,
	EGroomInterpolationQuality_MAX           = 4,
};

// Enum HairStrandsCore.EGroomInterpolationWeight
// NumValues: 0x0005
enum class EGroomInterpolationWeight : uint8
{
	Parametric                               = 0,
	Root                                     = 1,
	Index                                    = 2,
	Unknown                                  = 3,
	EGroomInterpolationWeight_MAX            = 4,
};

// ScriptStruct HairStrandsCore.GroomCacheImportSettings
// 0x0030 (0x0030 - 0x0000)
struct FGroomCacheImportSettings final
{
public:
	bool                                          bImportGroomCache;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FrameStart;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameEnd;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipEmptyFrames;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImportGroomAsset;                                 // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        GroomAsset;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroomCacheImportSettings) == 0x000008, "Wrong alignment on FGroomCacheImportSettings");
static_assert(sizeof(FGroomCacheImportSettings) == 0x000030, "Wrong size on FGroomCacheImportSettings");
static_assert(offsetof(FGroomCacheImportSettings, bImportGroomCache) == 0x000000, "Member 'FGroomCacheImportSettings::bImportGroomCache' has a wrong offset!");
static_assert(offsetof(FGroomCacheImportSettings, FrameStart) == 0x000004, "Member 'FGroomCacheImportSettings::FrameStart' has a wrong offset!");
static_assert(offsetof(FGroomCacheImportSettings, FrameEnd) == 0x000008, "Member 'FGroomCacheImportSettings::FrameEnd' has a wrong offset!");
static_assert(offsetof(FGroomCacheImportSettings, bSkipEmptyFrames) == 0x00000C, "Member 'FGroomCacheImportSettings::bSkipEmptyFrames' has a wrong offset!");
static_assert(offsetof(FGroomCacheImportSettings, bImportGroomAsset) == 0x00000D, "Member 'FGroomCacheImportSettings::bImportGroomAsset' has a wrong offset!");
static_assert(offsetof(FGroomCacheImportSettings, GroomAsset) == 0x000010, "Member 'FGroomCacheImportSettings::GroomAsset' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupDesc
// 0x0040 (0x0040 - 0x0000)
struct FHairGroupDesc final
{
public:
	float                                         HairLength;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairWidth;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HairWidth_Override;                                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HairRootScale;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HairRootScale_Override;                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HairTipScale;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HairTipScale_Override;                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HairShadowDensity;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HairShadowDensity_Override;                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HairRaytracingRadiusScale;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HairRaytracingRadiusScale_Override;                // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHairRaytracingGeometry;                        // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHairRaytracingGeometry_Override;               // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LODBias;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseStableRasterization;                           // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseStableRasterization_Override;                  // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScatterSceneLighting;                             // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScatterSceneLighting_Override;                    // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportVoxelization;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportVoxelization_Override;                     // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HairLengthScale;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HairLengthScale_Override;                          // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHairGroupDesc) == 0x000004, "Wrong alignment on FHairGroupDesc");
static_assert(sizeof(FHairGroupDesc) == 0x000040, "Wrong size on FHairGroupDesc");
static_assert(offsetof(FHairGroupDesc, HairLength) == 0x000000, "Member 'FHairGroupDesc::HairLength' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairWidth) == 0x000004, "Member 'FHairGroupDesc::HairWidth' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairWidth_Override) == 0x000008, "Member 'FHairGroupDesc::HairWidth_Override' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairRootScale) == 0x00000C, "Member 'FHairGroupDesc::HairRootScale' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairRootScale_Override) == 0x000010, "Member 'FHairGroupDesc::HairRootScale_Override' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairTipScale) == 0x000014, "Member 'FHairGroupDesc::HairTipScale' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairTipScale_Override) == 0x000018, "Member 'FHairGroupDesc::HairTipScale_Override' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairShadowDensity) == 0x00001C, "Member 'FHairGroupDesc::HairShadowDensity' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairShadowDensity_Override) == 0x000020, "Member 'FHairGroupDesc::HairShadowDensity_Override' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairRaytracingRadiusScale) == 0x000024, "Member 'FHairGroupDesc::HairRaytracingRadiusScale' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairRaytracingRadiusScale_Override) == 0x000028, "Member 'FHairGroupDesc::HairRaytracingRadiusScale_Override' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, bUseHairRaytracingGeometry) == 0x000029, "Member 'FHairGroupDesc::bUseHairRaytracingGeometry' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, bUseHairRaytracingGeometry_Override) == 0x00002A, "Member 'FHairGroupDesc::bUseHairRaytracingGeometry_Override' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, LODBias) == 0x00002C, "Member 'FHairGroupDesc::LODBias' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, bUseStableRasterization) == 0x000030, "Member 'FHairGroupDesc::bUseStableRasterization' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, bUseStableRasterization_Override) == 0x000031, "Member 'FHairGroupDesc::bUseStableRasterization_Override' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, bScatterSceneLighting) == 0x000032, "Member 'FHairGroupDesc::bScatterSceneLighting' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, bScatterSceneLighting_Override) == 0x000033, "Member 'FHairGroupDesc::bScatterSceneLighting_Override' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, bSupportVoxelization) == 0x000034, "Member 'FHairGroupDesc::bSupportVoxelization' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, bSupportVoxelization_Override) == 0x000035, "Member 'FHairGroupDesc::bSupportVoxelization_Override' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairLengthScale) == 0x000038, "Member 'FHairGroupDesc::HairLengthScale' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairLengthScale_Override) == 0x00003C, "Member 'FHairGroupDesc::HairLengthScale_Override' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupInfo
// 0x0028 (0x0028 - 0x0000)
struct FHairGroupInfo
{
public:
	int32                                         GroupID;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupName;                                         // 0x0004(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCurves;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumGuides;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCurveVertices;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumGuideVertices;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCurveLength;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxImportedWidth;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCardsID;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGroupInfo) == 0x000004, "Wrong alignment on FHairGroupInfo");
static_assert(sizeof(FHairGroupInfo) == 0x000028, "Wrong size on FHairGroupInfo");
static_assert(offsetof(FHairGroupInfo, GroupID) == 0x000000, "Member 'FHairGroupInfo::GroupID' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, GroupName) == 0x000004, "Member 'FHairGroupInfo::GroupName' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, NumCurves) == 0x00000C, "Member 'FHairGroupInfo::NumCurves' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, NumGuides) == 0x000010, "Member 'FHairGroupInfo::NumGuides' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, NumCurveVertices) == 0x000014, "Member 'FHairGroupInfo::NumCurveVertices' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, NumGuideVertices) == 0x000018, "Member 'FHairGroupInfo::NumGuideVertices' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, MaxCurveLength) == 0x00001C, "Member 'FHairGroupInfo::MaxCurveLength' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, MaxImportedWidth) == 0x000020, "Member 'FHairGroupInfo::MaxImportedWidth' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, GroupCardsID) == 0x000024, "Member 'FHairGroupInfo::GroupCardsID' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupsMaterial
// 0x0010 (0x0010 - 0x0000)
struct FHairGroupsMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGroupsMaterial) == 0x000008, "Wrong alignment on FHairGroupsMaterial");
static_assert(sizeof(FHairGroupsMaterial) == 0x000010, "Wrong size on FHairGroupsMaterial");
static_assert(offsetof(FHairGroupsMaterial, Material) == 0x000000, "Member 'FHairGroupsMaterial::Material' has a wrong offset!");
static_assert(offsetof(FHairGroupsMaterial, SlotName) == 0x000008, "Member 'FHairGroupsMaterial::SlotName' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupInfoWithVisibility
// 0x0004 (0x002C - 0x0028)
struct FHairGroupInfoWithVisibility final : public FHairGroupInfo
{
public:
	bool                                          bIsVisible;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHairGroupInfoWithVisibility) == 0x000004, "Wrong alignment on FHairGroupInfoWithVisibility");
static_assert(sizeof(FHairGroupInfoWithVisibility) == 0x00002C, "Wrong size on FHairGroupInfoWithVisibility");
static_assert(offsetof(FHairGroupInfoWithVisibility, bIsVisible) == 0x000028, "Member 'FHairGroupInfoWithVisibility::bIsVisible' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairCardsClusterSettings
// 0x0008 (0x0008 - 0x0000)
struct FHairCardsClusterSettings final
{
public:
	float                                         ClusterDecimation;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHairCardsClusterType                         Type;                                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGuide;                                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHairCardsClusterSettings) == 0x000004, "Wrong alignment on FHairCardsClusterSettings");
static_assert(sizeof(FHairCardsClusterSettings) == 0x000008, "Wrong size on FHairCardsClusterSettings");
static_assert(offsetof(FHairCardsClusterSettings, ClusterDecimation) == 0x000000, "Member 'FHairCardsClusterSettings::ClusterDecimation' has a wrong offset!");
static_assert(offsetof(FHairCardsClusterSettings, Type) == 0x000004, "Member 'FHairCardsClusterSettings::Type' has a wrong offset!");
static_assert(offsetof(FHairCardsClusterSettings, bUseGuide) == 0x000005, "Member 'FHairCardsClusterSettings::bUseGuide' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairCardsGeometrySettings
// 0x001C (0x001C - 0x0000)
struct FHairCardsGeometrySettings final
{
public:
	EHairCardsGenerationType                      GenerationType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CardsCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHairCardsClusterType                         ClusterType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSegmentLength;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularThreshold;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCardsLength;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCardsLength;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairCardsGeometrySettings) == 0x000004, "Wrong alignment on FHairCardsGeometrySettings");
static_assert(sizeof(FHairCardsGeometrySettings) == 0x00001C, "Wrong size on FHairCardsGeometrySettings");
static_assert(offsetof(FHairCardsGeometrySettings, GenerationType) == 0x000000, "Member 'FHairCardsGeometrySettings::GenerationType' has a wrong offset!");
static_assert(offsetof(FHairCardsGeometrySettings, CardsCount) == 0x000004, "Member 'FHairCardsGeometrySettings::CardsCount' has a wrong offset!");
static_assert(offsetof(FHairCardsGeometrySettings, ClusterType) == 0x000008, "Member 'FHairCardsGeometrySettings::ClusterType' has a wrong offset!");
static_assert(offsetof(FHairCardsGeometrySettings, MinSegmentLength) == 0x00000C, "Member 'FHairCardsGeometrySettings::MinSegmentLength' has a wrong offset!");
static_assert(offsetof(FHairCardsGeometrySettings, AngularThreshold) == 0x000010, "Member 'FHairCardsGeometrySettings::AngularThreshold' has a wrong offset!");
static_assert(offsetof(FHairCardsGeometrySettings, MinCardsLength) == 0x000014, "Member 'FHairCardsGeometrySettings::MinCardsLength' has a wrong offset!");
static_assert(offsetof(FHairCardsGeometrySettings, MaxCardsLength) == 0x000018, "Member 'FHairCardsGeometrySettings::MaxCardsLength' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairCardsTextureSettings
// 0x0010 (0x0010 - 0x0000)
struct FHairCardsTextureSettings final
{
public:
	int32                                         AtlasMaxResolution;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PixelPerCentimeters;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LengthTextureCount;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DensityTextureCount;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairCardsTextureSettings) == 0x000004, "Wrong alignment on FHairCardsTextureSettings");
static_assert(sizeof(FHairCardsTextureSettings) == 0x000010, "Wrong size on FHairCardsTextureSettings");
static_assert(offsetof(FHairCardsTextureSettings, AtlasMaxResolution) == 0x000000, "Member 'FHairCardsTextureSettings::AtlasMaxResolution' has a wrong offset!");
static_assert(offsetof(FHairCardsTextureSettings, PixelPerCentimeters) == 0x000004, "Member 'FHairCardsTextureSettings::PixelPerCentimeters' has a wrong offset!");
static_assert(offsetof(FHairCardsTextureSettings, LengthTextureCount) == 0x000008, "Member 'FHairCardsTextureSettings::LengthTextureCount' has a wrong offset!");
static_assert(offsetof(FHairCardsTextureSettings, DensityTextureCount) == 0x00000C, "Member 'FHairCardsTextureSettings::DensityTextureCount' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupsProceduralCards
// 0x0038 (0x0038 - 0x0000)
struct FHairGroupsProceduralCards final
{
public:
	struct FHairCardsClusterSettings              ClusterSettings;                                   // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FHairCardsGeometrySettings             GeometrySettings;                                  // 0x0008(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHairCardsTextureSettings              TextureSettings;                                   // 0x0024(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGroupsProceduralCards) == 0x000004, "Wrong alignment on FHairGroupsProceduralCards");
static_assert(sizeof(FHairGroupsProceduralCards) == 0x000038, "Wrong size on FHairGroupsProceduralCards");
static_assert(offsetof(FHairGroupsProceduralCards, ClusterSettings) == 0x000000, "Member 'FHairGroupsProceduralCards::ClusterSettings' has a wrong offset!");
static_assert(offsetof(FHairGroupsProceduralCards, GeometrySettings) == 0x000008, "Member 'FHairGroupsProceduralCards::GeometrySettings' has a wrong offset!");
static_assert(offsetof(FHairGroupsProceduralCards, TextureSettings) == 0x000024, "Member 'FHairGroupsProceduralCards::TextureSettings' has a wrong offset!");
static_assert(offsetof(FHairGroupsProceduralCards, Version) == 0x000034, "Member 'FHairGroupsProceduralCards::Version' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupCardsInfo
// 0x0008 (0x0008 - 0x0000)
struct FHairGroupCardsInfo final
{
public:
	int32                                         NumCards;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCardVertices;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGroupCardsInfo) == 0x000004, "Wrong alignment on FHairGroupCardsInfo");
static_assert(sizeof(FHairGroupCardsInfo) == 0x000008, "Wrong size on FHairGroupCardsInfo");
static_assert(offsetof(FHairGroupCardsInfo, NumCards) == 0x000000, "Member 'FHairGroupCardsInfo::NumCards' has a wrong offset!");
static_assert(offsetof(FHairGroupCardsInfo, NumCardVertices) == 0x000004, "Member 'FHairGroupCardsInfo::NumCardVertices' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupCardsTextures
// 0x0038 (0x0038 - 0x0000)
struct FHairGroupCardsTextures final
{
public:
	class UTexture2D*                             DepthTexture;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CoverageTexture;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TangentTexture;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             AttributeTexture;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             AuxilaryDataTexture;                               // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MaterialTexture;                                   // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHairGroupCardsTextures) == 0x000008, "Wrong alignment on FHairGroupCardsTextures");
static_assert(sizeof(FHairGroupCardsTextures) == 0x000038, "Wrong size on FHairGroupCardsTextures");
static_assert(offsetof(FHairGroupCardsTextures, DepthTexture) == 0x000000, "Member 'FHairGroupCardsTextures::DepthTexture' has a wrong offset!");
static_assert(offsetof(FHairGroupCardsTextures, CoverageTexture) == 0x000008, "Member 'FHairGroupCardsTextures::CoverageTexture' has a wrong offset!");
static_assert(offsetof(FHairGroupCardsTextures, TangentTexture) == 0x000010, "Member 'FHairGroupCardsTextures::TangentTexture' has a wrong offset!");
static_assert(offsetof(FHairGroupCardsTextures, AttributeTexture) == 0x000018, "Member 'FHairGroupCardsTextures::AttributeTexture' has a wrong offset!");
static_assert(offsetof(FHairGroupCardsTextures, AuxilaryDataTexture) == 0x000020, "Member 'FHairGroupCardsTextures::AuxilaryDataTexture' has a wrong offset!");
static_assert(offsetof(FHairGroupCardsTextures, MaterialTexture) == 0x000028, "Member 'FHairGroupCardsTextures::MaterialTexture' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupsCardsSourceDescription
// 0x00C8 (0x00C8 - 0x0000)
struct FHairGroupsCardsSourceDescription final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialSlotName;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHairCardsSourceType                          SourceType;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            ProceduralMesh;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProceduralMeshKey;                                 // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            ImportedMesh;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHairGroupsProceduralCards             ProceduralSettings;                                // 0x0038(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHairGroupCardsTextures                Textures;                                          // 0x0070(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODIndex;                                          // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHairGroupCardsInfo                    CardsInfo;                                         // 0x00B0(0x0008)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ImportedMeshKey;                                   // 0x00B8(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGroupsCardsSourceDescription) == 0x000008, "Wrong alignment on FHairGroupsCardsSourceDescription");
static_assert(sizeof(FHairGroupsCardsSourceDescription) == 0x0000C8, "Wrong size on FHairGroupsCardsSourceDescription");
static_assert(offsetof(FHairGroupsCardsSourceDescription, Material) == 0x000000, "Member 'FHairGroupsCardsSourceDescription::Material' has a wrong offset!");
static_assert(offsetof(FHairGroupsCardsSourceDescription, MaterialSlotName) == 0x000008, "Member 'FHairGroupsCardsSourceDescription::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(FHairGroupsCardsSourceDescription, SourceType) == 0x000010, "Member 'FHairGroupsCardsSourceDescription::SourceType' has a wrong offset!");
static_assert(offsetof(FHairGroupsCardsSourceDescription, ProceduralMesh) == 0x000018, "Member 'FHairGroupsCardsSourceDescription::ProceduralMesh' has a wrong offset!");
static_assert(offsetof(FHairGroupsCardsSourceDescription, ProceduralMeshKey) == 0x000020, "Member 'FHairGroupsCardsSourceDescription::ProceduralMeshKey' has a wrong offset!");
static_assert(offsetof(FHairGroupsCardsSourceDescription, ImportedMesh) == 0x000030, "Member 'FHairGroupsCardsSourceDescription::ImportedMesh' has a wrong offset!");
static_assert(offsetof(FHairGroupsCardsSourceDescription, ProceduralSettings) == 0x000038, "Member 'FHairGroupsCardsSourceDescription::ProceduralSettings' has a wrong offset!");
static_assert(offsetof(FHairGroupsCardsSourceDescription, Textures) == 0x000070, "Member 'FHairGroupsCardsSourceDescription::Textures' has a wrong offset!");
static_assert(offsetof(FHairGroupsCardsSourceDescription, GroupIndex) == 0x0000A8, "Member 'FHairGroupsCardsSourceDescription::GroupIndex' has a wrong offset!");
static_assert(offsetof(FHairGroupsCardsSourceDescription, LODIndex) == 0x0000AC, "Member 'FHairGroupsCardsSourceDescription::LODIndex' has a wrong offset!");
static_assert(offsetof(FHairGroupsCardsSourceDescription, CardsInfo) == 0x0000B0, "Member 'FHairGroupsCardsSourceDescription::CardsInfo' has a wrong offset!");
static_assert(offsetof(FHairGroupsCardsSourceDescription, ImportedMeshKey) == 0x0000B8, "Member 'FHairGroupsCardsSourceDescription::ImportedMeshKey' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairLODSettings
// 0x001C (0x001C - 0x0000)
struct FHairLODSettings final
{
public:
	float                                         CurveDecimation;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VertexDecimation;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularThreshold;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenSize;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThicknessScale;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomGeometryType                            GeometryType;                                      // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomBindingType                             BindingType;                                       // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomOverrideType                            Simulation;                                        // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomOverrideType                            GlobalInterpolation;                               // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHairLODSettings) == 0x000004, "Wrong alignment on FHairLODSettings");
static_assert(sizeof(FHairLODSettings) == 0x00001C, "Wrong size on FHairLODSettings");
static_assert(offsetof(FHairLODSettings, CurveDecimation) == 0x000000, "Member 'FHairLODSettings::CurveDecimation' has a wrong offset!");
static_assert(offsetof(FHairLODSettings, VertexDecimation) == 0x000004, "Member 'FHairLODSettings::VertexDecimation' has a wrong offset!");
static_assert(offsetof(FHairLODSettings, AngularThreshold) == 0x000008, "Member 'FHairLODSettings::AngularThreshold' has a wrong offset!");
static_assert(offsetof(FHairLODSettings, ScreenSize) == 0x00000C, "Member 'FHairLODSettings::ScreenSize' has a wrong offset!");
static_assert(offsetof(FHairLODSettings, ThicknessScale) == 0x000010, "Member 'FHairLODSettings::ThicknessScale' has a wrong offset!");
static_assert(offsetof(FHairLODSettings, bVisible) == 0x000014, "Member 'FHairLODSettings::bVisible' has a wrong offset!");
static_assert(offsetof(FHairLODSettings, GeometryType) == 0x000015, "Member 'FHairLODSettings::GeometryType' has a wrong offset!");
static_assert(offsetof(FHairLODSettings, BindingType) == 0x000016, "Member 'FHairLODSettings::BindingType' has a wrong offset!");
static_assert(offsetof(FHairLODSettings, Simulation) == 0x000017, "Member 'FHairLODSettings::Simulation' has a wrong offset!");
static_assert(offsetof(FHairLODSettings, GlobalInterpolation) == 0x000018, "Member 'FHairLODSettings::GlobalInterpolation' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairDecimationSettings
// 0x0008 (0x0008 - 0x0000)
struct FHairDecimationSettings final
{
public:
	float                                         CurveDecimation;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VertexDecimation;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairDecimationSettings) == 0x000004, "Wrong alignment on FHairDecimationSettings");
static_assert(sizeof(FHairDecimationSettings) == 0x000008, "Wrong size on FHairDecimationSettings");
static_assert(offsetof(FHairDecimationSettings, CurveDecimation) == 0x000000, "Member 'FHairDecimationSettings::CurveDecimation' has a wrong offset!");
static_assert(offsetof(FHairDecimationSettings, VertexDecimation) == 0x000004, "Member 'FHairDecimationSettings::VertexDecimation' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairInterpolationSettings
// 0x000C (0x000C - 0x0000)
struct FHairInterpolationSettings final
{
public:
	bool                                          bOverrideGuides;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HairToGuideDensity;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHairInterpolationQuality                     InterpolationQuality;                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHairInterpolationWeight                      InterpolationDistance;                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeGuide;                                   // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUniqueGuide;                                   // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairInterpolationSettings) == 0x000004, "Wrong alignment on FHairInterpolationSettings");
static_assert(sizeof(FHairInterpolationSettings) == 0x00000C, "Wrong size on FHairInterpolationSettings");
static_assert(offsetof(FHairInterpolationSettings, bOverrideGuides) == 0x000000, "Member 'FHairInterpolationSettings::bOverrideGuides' has a wrong offset!");
static_assert(offsetof(FHairInterpolationSettings, HairToGuideDensity) == 0x000004, "Member 'FHairInterpolationSettings::HairToGuideDensity' has a wrong offset!");
static_assert(offsetof(FHairInterpolationSettings, InterpolationQuality) == 0x000008, "Member 'FHairInterpolationSettings::InterpolationQuality' has a wrong offset!");
static_assert(offsetof(FHairInterpolationSettings, InterpolationDistance) == 0x000009, "Member 'FHairInterpolationSettings::InterpolationDistance' has a wrong offset!");
static_assert(offsetof(FHairInterpolationSettings, bRandomizeGuide) == 0x00000A, "Member 'FHairInterpolationSettings::bRandomizeGuide' has a wrong offset!");
static_assert(offsetof(FHairInterpolationSettings, bUseUniqueGuide) == 0x00000B, "Member 'FHairInterpolationSettings::bUseUniqueGuide' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairDeformationSettings
// 0x000C (0x000C - 0x0000)
struct FHairDeformationSettings final
{
public:
	bool                                          bCanEditRigging;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRigging;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumCurves;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoints;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairDeformationSettings) == 0x000004, "Wrong alignment on FHairDeformationSettings");
static_assert(sizeof(FHairDeformationSettings) == 0x00000C, "Wrong size on FHairDeformationSettings");
static_assert(offsetof(FHairDeformationSettings, bCanEditRigging) == 0x000000, "Member 'FHairDeformationSettings::bCanEditRigging' has a wrong offset!");
static_assert(offsetof(FHairDeformationSettings, bEnableRigging) == 0x000001, "Member 'FHairDeformationSettings::bEnableRigging' has a wrong offset!");
static_assert(offsetof(FHairDeformationSettings, NumCurves) == 0x000004, "Member 'FHairDeformationSettings::NumCurves' has a wrong offset!");
static_assert(offsetof(FHairDeformationSettings, NumPoints) == 0x000008, "Member 'FHairDeformationSettings::NumPoints' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupsInterpolation
// 0x0020 (0x0020 - 0x0000)
struct FHairGroupsInterpolation final
{
public:
	struct FHairDecimationSettings                DecimationSettings;                                // 0x0000(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHairInterpolationSettings             InterpolationSettings;                             // 0x0008(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHairDeformationSettings               RiggingSettings;                                   // 0x0014(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGroupsInterpolation) == 0x000004, "Wrong alignment on FHairGroupsInterpolation");
static_assert(sizeof(FHairGroupsInterpolation) == 0x000020, "Wrong size on FHairGroupsInterpolation");
static_assert(offsetof(FHairGroupsInterpolation, DecimationSettings) == 0x000000, "Member 'FHairGroupsInterpolation::DecimationSettings' has a wrong offset!");
static_assert(offsetof(FHairGroupsInterpolation, InterpolationSettings) == 0x000008, "Member 'FHairGroupsInterpolation::InterpolationSettings' has a wrong offset!");
static_assert(offsetof(FHairGroupsInterpolation, RiggingSettings) == 0x000014, "Member 'FHairGroupsInterpolation::RiggingSettings' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupsLOD
// 0x0018 (0x0018 - 0x0000)
struct FHairGroupsLOD final
{
public:
	TArray<struct FHairLODSettings>               LODs;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ClusterWorldSize;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClusterScreenSizeScale;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGroupsLOD) == 0x000008, "Wrong alignment on FHairGroupsLOD");
static_assert(sizeof(FHairGroupsLOD) == 0x000018, "Wrong size on FHairGroupsLOD");
static_assert(offsetof(FHairGroupsLOD, LODs) == 0x000000, "Member 'FHairGroupsLOD::LODs' has a wrong offset!");
static_assert(offsetof(FHairGroupsLOD, ClusterWorldSize) == 0x000010, "Member 'FHairGroupsLOD::ClusterWorldSize' has a wrong offset!");
static_assert(offsetof(FHairGroupsLOD, ClusterScreenSizeScale) == 0x000014, "Member 'FHairGroupsLOD::ClusterScreenSizeScale' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupsMeshesSourceDescription
// 0x0068 (0x0068 - 0x0000)
struct FHairGroupsMeshesSourceDescription final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialSlotName;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            ImportedMesh;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHairGroupCardsTextures                Textures;                                          // 0x0018(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODIndex;                                          // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImportedMeshKey;                                   // 0x0058(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGroupsMeshesSourceDescription) == 0x000008, "Wrong alignment on FHairGroupsMeshesSourceDescription");
static_assert(sizeof(FHairGroupsMeshesSourceDescription) == 0x000068, "Wrong size on FHairGroupsMeshesSourceDescription");
static_assert(offsetof(FHairGroupsMeshesSourceDescription, Material) == 0x000000, "Member 'FHairGroupsMeshesSourceDescription::Material' has a wrong offset!");
static_assert(offsetof(FHairGroupsMeshesSourceDescription, MaterialSlotName) == 0x000008, "Member 'FHairGroupsMeshesSourceDescription::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(FHairGroupsMeshesSourceDescription, ImportedMesh) == 0x000010, "Member 'FHairGroupsMeshesSourceDescription::ImportedMesh' has a wrong offset!");
static_assert(offsetof(FHairGroupsMeshesSourceDescription, Textures) == 0x000018, "Member 'FHairGroupsMeshesSourceDescription::Textures' has a wrong offset!");
static_assert(offsetof(FHairGroupsMeshesSourceDescription, GroupIndex) == 0x000050, "Member 'FHairGroupsMeshesSourceDescription::GroupIndex' has a wrong offset!");
static_assert(offsetof(FHairGroupsMeshesSourceDescription, LODIndex) == 0x000054, "Member 'FHairGroupsMeshesSourceDescription::LODIndex' has a wrong offset!");
static_assert(offsetof(FHairGroupsMeshesSourceDescription, ImportedMeshKey) == 0x000058, "Member 'FHairGroupsMeshesSourceDescription::ImportedMeshKey' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairSolverSettings
// 0x0048 (0x0048 - 0x0000)
struct FHairSolverSettings final
{
public:
	bool                                          EnableSimulation;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomNiagaraSolvers                          NiagaraSolver;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          CustomSystem;                                      // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityPreloading;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubSteps;                                          // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IterationCount;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHairSolverSettings) == 0x000008, "Wrong alignment on FHairSolverSettings");
static_assert(sizeof(FHairSolverSettings) == 0x000048, "Wrong size on FHairSolverSettings");
static_assert(offsetof(FHairSolverSettings, EnableSimulation) == 0x000000, "Member 'FHairSolverSettings::EnableSimulation' has a wrong offset!");
static_assert(offsetof(FHairSolverSettings, NiagaraSolver) == 0x000001, "Member 'FHairSolverSettings::NiagaraSolver' has a wrong offset!");
static_assert(offsetof(FHairSolverSettings, CustomSystem) == 0x000008, "Member 'FHairSolverSettings::CustomSystem' has a wrong offset!");
static_assert(offsetof(FHairSolverSettings, GravityPreloading) == 0x000038, "Member 'FHairSolverSettings::GravityPreloading' has a wrong offset!");
static_assert(offsetof(FHairSolverSettings, SubSteps) == 0x00003C, "Member 'FHairSolverSettings::SubSteps' has a wrong offset!");
static_assert(offsetof(FHairSolverSettings, IterationCount) == 0x000040, "Member 'FHairSolverSettings::IterationCount' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairExternalForces
// 0x0038 (0x0038 - 0x0000)
struct FHairExternalForces final
{
public:
	struct FVector                                GravityVector;                                     // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirDrag;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AirVelocity;                                       // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairExternalForces) == 0x000008, "Wrong alignment on FHairExternalForces");
static_assert(sizeof(FHairExternalForces) == 0x000038, "Wrong size on FHairExternalForces");
static_assert(offsetof(FHairExternalForces, GravityVector) == 0x000000, "Member 'FHairExternalForces::GravityVector' has a wrong offset!");
static_assert(offsetof(FHairExternalForces, AirDrag) == 0x000018, "Member 'FHairExternalForces::AirDrag' has a wrong offset!");
static_assert(offsetof(FHairExternalForces, AirVelocity) == 0x000020, "Member 'FHairExternalForces::AirVelocity' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairBendConstraint
// 0x0098 (0x0098 - 0x0000)
struct FHairBendConstraint final
{
public:
	bool                                          SolveBend;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProjectBend;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BendDamping;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendStiffness;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     BendScale;                                         // 0x0010(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairBendConstraint) == 0x000008, "Wrong alignment on FHairBendConstraint");
static_assert(sizeof(FHairBendConstraint) == 0x000098, "Wrong size on FHairBendConstraint");
static_assert(offsetof(FHairBendConstraint, SolveBend) == 0x000000, "Member 'FHairBendConstraint::SolveBend' has a wrong offset!");
static_assert(offsetof(FHairBendConstraint, ProjectBend) == 0x000001, "Member 'FHairBendConstraint::ProjectBend' has a wrong offset!");
static_assert(offsetof(FHairBendConstraint, BendDamping) == 0x000004, "Member 'FHairBendConstraint::BendDamping' has a wrong offset!");
static_assert(offsetof(FHairBendConstraint, BendStiffness) == 0x000008, "Member 'FHairBendConstraint::BendStiffness' has a wrong offset!");
static_assert(offsetof(FHairBendConstraint, BendScale) == 0x000010, "Member 'FHairBendConstraint::BendScale' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairStretchConstraint
// 0x0098 (0x0098 - 0x0000)
struct FHairStretchConstraint final
{
public:
	bool                                          SolveStretch;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProjectStretch;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StretchDamping;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchStiffness;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     StretchScale;                                      // 0x0010(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairStretchConstraint) == 0x000008, "Wrong alignment on FHairStretchConstraint");
static_assert(sizeof(FHairStretchConstraint) == 0x000098, "Wrong size on FHairStretchConstraint");
static_assert(offsetof(FHairStretchConstraint, SolveStretch) == 0x000000, "Member 'FHairStretchConstraint::SolveStretch' has a wrong offset!");
static_assert(offsetof(FHairStretchConstraint, ProjectStretch) == 0x000001, "Member 'FHairStretchConstraint::ProjectStretch' has a wrong offset!");
static_assert(offsetof(FHairStretchConstraint, StretchDamping) == 0x000004, "Member 'FHairStretchConstraint::StretchDamping' has a wrong offset!");
static_assert(offsetof(FHairStretchConstraint, StretchStiffness) == 0x000008, "Member 'FHairStretchConstraint::StretchStiffness' has a wrong offset!");
static_assert(offsetof(FHairStretchConstraint, StretchScale) == 0x000010, "Member 'FHairStretchConstraint::StretchScale' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairCollisionConstraint
// 0x00A8 (0x00A8 - 0x0000)
struct FHairCollisionConstraint final
{
public:
	bool                                          SolveCollision;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProjectCollision;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaticFriction;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KineticFriction;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandsViscosity;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             GridDimension;                                     // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionRadius;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     RadiusScale;                                       // 0x0020(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairCollisionConstraint) == 0x000008, "Wrong alignment on FHairCollisionConstraint");
static_assert(sizeof(FHairCollisionConstraint) == 0x0000A8, "Wrong size on FHairCollisionConstraint");
static_assert(offsetof(FHairCollisionConstraint, SolveCollision) == 0x000000, "Member 'FHairCollisionConstraint::SolveCollision' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, ProjectCollision) == 0x000001, "Member 'FHairCollisionConstraint::ProjectCollision' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, StaticFriction) == 0x000004, "Member 'FHairCollisionConstraint::StaticFriction' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, KineticFriction) == 0x000008, "Member 'FHairCollisionConstraint::KineticFriction' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, StrandsViscosity) == 0x00000C, "Member 'FHairCollisionConstraint::StrandsViscosity' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, GridDimension) == 0x000010, "Member 'FHairCollisionConstraint::GridDimension' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, CollisionRadius) == 0x00001C, "Member 'FHairCollisionConstraint::CollisionRadius' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, RadiusScale) == 0x000020, "Member 'FHairCollisionConstraint::RadiusScale' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairMaterialConstraints
// 0x01D8 (0x01D8 - 0x0000)
struct FHairMaterialConstraints final
{
public:
	struct FHairBendConstraint                    BendConstraint;                                    // 0x0000(0x0098)(Edit, NativeAccessSpecifierPublic)
	struct FHairStretchConstraint                 StretchConstraint;                                 // 0x0098(0x0098)(Edit, NativeAccessSpecifierPublic)
	struct FHairCollisionConstraint               CollisionConstraint;                               // 0x0130(0x00A8)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairMaterialConstraints) == 0x000008, "Wrong alignment on FHairMaterialConstraints");
static_assert(sizeof(FHairMaterialConstraints) == 0x0001D8, "Wrong size on FHairMaterialConstraints");
static_assert(offsetof(FHairMaterialConstraints, BendConstraint) == 0x000000, "Member 'FHairMaterialConstraints::BendConstraint' has a wrong offset!");
static_assert(offsetof(FHairMaterialConstraints, StretchConstraint) == 0x000098, "Member 'FHairMaterialConstraints::StretchConstraint' has a wrong offset!");
static_assert(offsetof(FHairMaterialConstraints, CollisionConstraint) == 0x000130, "Member 'FHairMaterialConstraints::CollisionConstraint' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairStrandsParameters
// 0x0098 (0x0098 - 0x0000)
struct FHairStrandsParameters final
{
public:
	EGroomStrandsSize                             StrandsSize;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StrandsDensity;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandsSmoothing;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandsThickness;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     ThicknessScale;                                    // 0x0010(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairStrandsParameters) == 0x000008, "Wrong alignment on FHairStrandsParameters");
static_assert(sizeof(FHairStrandsParameters) == 0x000098, "Wrong size on FHairStrandsParameters");
static_assert(offsetof(FHairStrandsParameters, StrandsSize) == 0x000000, "Member 'FHairStrandsParameters::StrandsSize' has a wrong offset!");
static_assert(offsetof(FHairStrandsParameters, StrandsDensity) == 0x000004, "Member 'FHairStrandsParameters::StrandsDensity' has a wrong offset!");
static_assert(offsetof(FHairStrandsParameters, StrandsSmoothing) == 0x000008, "Member 'FHairStrandsParameters::StrandsSmoothing' has a wrong offset!");
static_assert(offsetof(FHairStrandsParameters, StrandsThickness) == 0x00000C, "Member 'FHairStrandsParameters::StrandsThickness' has a wrong offset!");
static_assert(offsetof(FHairStrandsParameters, ThicknessScale) == 0x000010, "Member 'FHairStrandsParameters::ThicknessScale' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupsPhysics
// 0x02F0 (0x02F0 - 0x0000)
struct FHairGroupsPhysics final
{
public:
	struct FHairSolverSettings                    SolverSettings;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FHairExternalForces                    ExternalForces;                                    // 0x0048(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHairMaterialConstraints               MaterialConstraints;                               // 0x0080(0x01D8)(Edit, NativeAccessSpecifierPublic)
	struct FHairStrandsParameters                 StrandsParameters;                                 // 0x0258(0x0098)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGroupsPhysics) == 0x000008, "Wrong alignment on FHairGroupsPhysics");
static_assert(sizeof(FHairGroupsPhysics) == 0x0002F0, "Wrong size on FHairGroupsPhysics");
static_assert(offsetof(FHairGroupsPhysics, SolverSettings) == 0x000000, "Member 'FHairGroupsPhysics::SolverSettings' has a wrong offset!");
static_assert(offsetof(FHairGroupsPhysics, ExternalForces) == 0x000048, "Member 'FHairGroupsPhysics::ExternalForces' has a wrong offset!");
static_assert(offsetof(FHairGroupsPhysics, MaterialConstraints) == 0x000080, "Member 'FHairGroupsPhysics::MaterialConstraints' has a wrong offset!");
static_assert(offsetof(FHairGroupsPhysics, StrandsParameters) == 0x000258, "Member 'FHairGroupsPhysics::StrandsParameters' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairSimulationSolver
// 0x0001 (0x0001 - 0x0000)
struct FHairSimulationSolver final
{
public:
	bool                                          bEnableSimulation;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairSimulationSolver) == 0x000001, "Wrong alignment on FHairSimulationSolver");
static_assert(sizeof(FHairSimulationSolver) == 0x000001, "Wrong size on FHairSimulationSolver");
static_assert(offsetof(FHairSimulationSolver, bEnableSimulation) == 0x000000, "Member 'FHairSimulationSolver::bEnableSimulation' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairSimulationForces
// 0x0038 (0x0038 - 0x0000)
struct FHairSimulationForces final
{
public:
	struct FVector                                GravityVector;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirDrag;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AirVelocity;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairSimulationForces) == 0x000008, "Wrong alignment on FHairSimulationForces");
static_assert(sizeof(FHairSimulationForces) == 0x000038, "Wrong size on FHairSimulationForces");
static_assert(offsetof(FHairSimulationForces, GravityVector) == 0x000000, "Member 'FHairSimulationForces::GravityVector' has a wrong offset!");
static_assert(offsetof(FHairSimulationForces, AirDrag) == 0x000018, "Member 'FHairSimulationForces::AirDrag' has a wrong offset!");
static_assert(offsetof(FHairSimulationForces, AirVelocity) == 0x000020, "Member 'FHairSimulationForces::AirVelocity' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairSimulationConstraints
// 0x0020 (0x0020 - 0x0000)
struct FHairSimulationConstraints final
{
public:
	float                                         BendDamping;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendStiffness;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchDamping;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchStiffness;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticFriction;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KineticFriction;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandsViscosity;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionRadius;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairSimulationConstraints) == 0x000004, "Wrong alignment on FHairSimulationConstraints");
static_assert(sizeof(FHairSimulationConstraints) == 0x000020, "Wrong size on FHairSimulationConstraints");
static_assert(offsetof(FHairSimulationConstraints, BendDamping) == 0x000000, "Member 'FHairSimulationConstraints::BendDamping' has a wrong offset!");
static_assert(offsetof(FHairSimulationConstraints, BendStiffness) == 0x000004, "Member 'FHairSimulationConstraints::BendStiffness' has a wrong offset!");
static_assert(offsetof(FHairSimulationConstraints, StretchDamping) == 0x000008, "Member 'FHairSimulationConstraints::StretchDamping' has a wrong offset!");
static_assert(offsetof(FHairSimulationConstraints, StretchStiffness) == 0x00000C, "Member 'FHairSimulationConstraints::StretchStiffness' has a wrong offset!");
static_assert(offsetof(FHairSimulationConstraints, StaticFriction) == 0x000010, "Member 'FHairSimulationConstraints::StaticFriction' has a wrong offset!");
static_assert(offsetof(FHairSimulationConstraints, KineticFriction) == 0x000014, "Member 'FHairSimulationConstraints::KineticFriction' has a wrong offset!");
static_assert(offsetof(FHairSimulationConstraints, StrandsViscosity) == 0x000018, "Member 'FHairSimulationConstraints::StrandsViscosity' has a wrong offset!");
static_assert(offsetof(FHairSimulationConstraints, CollisionRadius) == 0x00001C, "Member 'FHairSimulationConstraints::CollisionRadius' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairSimulationSetup
// 0x0028 (0x0028 - 0x0000)
struct FHairSimulationSetup final
{
public:
	bool                                          bResetSimulation;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugSimulation;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalSimulation;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinearVelocityScale;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularVelocityScale;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocalBone;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportDistance;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHairSimulationSetup) == 0x000008, "Wrong alignment on FHairSimulationSetup");
static_assert(sizeof(FHairSimulationSetup) == 0x000028, "Wrong size on FHairSimulationSetup");
static_assert(offsetof(FHairSimulationSetup, bResetSimulation) == 0x000000, "Member 'FHairSimulationSetup::bResetSimulation' has a wrong offset!");
static_assert(offsetof(FHairSimulationSetup, bDebugSimulation) == 0x000001, "Member 'FHairSimulationSetup::bDebugSimulation' has a wrong offset!");
static_assert(offsetof(FHairSimulationSetup, bLocalSimulation) == 0x000002, "Member 'FHairSimulationSetup::bLocalSimulation' has a wrong offset!");
static_assert(offsetof(FHairSimulationSetup, LinearVelocityScale) == 0x000004, "Member 'FHairSimulationSetup::LinearVelocityScale' has a wrong offset!");
static_assert(offsetof(FHairSimulationSetup, AngularVelocityScale) == 0x000008, "Member 'FHairSimulationSetup::AngularVelocityScale' has a wrong offset!");
static_assert(offsetof(FHairSimulationSetup, LocalBone) == 0x000010, "Member 'FHairSimulationSetup::LocalBone' has a wrong offset!");
static_assert(offsetof(FHairSimulationSetup, TeleportDistance) == 0x000020, "Member 'FHairSimulationSetup::TeleportDistance' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairSimulationSettings
// 0x0090 (0x0090 - 0x0000)
struct FHairSimulationSettings final
{
public:
	bool                                          bOverrideSettings;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHairSimulationSetup                   SimulationSetup;                                   // 0x0008(0x0028)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FHairSimulationSolver                  SolverSettings;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHairSimulationForces                  ExternalForces;                                    // 0x0038(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FHairSimulationConstraints             MaterialConstraints;                               // 0x0070(0x0020)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairSimulationSettings) == 0x000008, "Wrong alignment on FHairSimulationSettings");
static_assert(sizeof(FHairSimulationSettings) == 0x000090, "Wrong size on FHairSimulationSettings");
static_assert(offsetof(FHairSimulationSettings, bOverrideSettings) == 0x000000, "Member 'FHairSimulationSettings::bOverrideSettings' has a wrong offset!");
static_assert(offsetof(FHairSimulationSettings, SimulationSetup) == 0x000008, "Member 'FHairSimulationSettings::SimulationSetup' has a wrong offset!");
static_assert(offsetof(FHairSimulationSettings, SolverSettings) == 0x000030, "Member 'FHairSimulationSettings::SolverSettings' has a wrong offset!");
static_assert(offsetof(FHairSimulationSettings, ExternalForces) == 0x000038, "Member 'FHairSimulationSettings::ExternalForces' has a wrong offset!");
static_assert(offsetof(FHairSimulationSettings, MaterialConstraints) == 0x000070, "Member 'FHairSimulationSettings::MaterialConstraints' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGeometrySettings
// 0x000C (0x000C - 0x0000)
struct FHairGeometrySettings final
{
public:
	float                                         HairWidth;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairRootScale;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairTipScale;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGeometrySettings) == 0x000004, "Wrong alignment on FHairGeometrySettings");
static_assert(sizeof(FHairGeometrySettings) == 0x00000C, "Wrong size on FHairGeometrySettings");
static_assert(offsetof(FHairGeometrySettings, HairWidth) == 0x000000, "Member 'FHairGeometrySettings::HairWidth' has a wrong offset!");
static_assert(offsetof(FHairGeometrySettings, HairRootScale) == 0x000004, "Member 'FHairGeometrySettings::HairRootScale' has a wrong offset!");
static_assert(offsetof(FHairGeometrySettings, HairTipScale) == 0x000008, "Member 'FHairGeometrySettings::HairTipScale' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairShadowSettings
// 0x000C (0x000C - 0x0000)
struct FHairShadowSettings final
{
public:
	float                                         HairShadowDensity;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairRaytracingRadiusScale;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHairRaytracingGeometry;                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoxelize;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHairShadowSettings) == 0x000004, "Wrong alignment on FHairShadowSettings");
static_assert(sizeof(FHairShadowSettings) == 0x00000C, "Wrong size on FHairShadowSettings");
static_assert(offsetof(FHairShadowSettings, HairShadowDensity) == 0x000000, "Member 'FHairShadowSettings::HairShadowDensity' has a wrong offset!");
static_assert(offsetof(FHairShadowSettings, HairRaytracingRadiusScale) == 0x000004, "Member 'FHairShadowSettings::HairRaytracingRadiusScale' has a wrong offset!");
static_assert(offsetof(FHairShadowSettings, bUseHairRaytracingGeometry) == 0x000008, "Member 'FHairShadowSettings::bUseHairRaytracingGeometry' has a wrong offset!");
static_assert(offsetof(FHairShadowSettings, bVoxelize) == 0x000009, "Member 'FHairShadowSettings::bVoxelize' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairAdvancedRenderingSettings
// 0x0002 (0x0002 - 0x0000)
struct FHairAdvancedRenderingSettings final
{
public:
	bool                                          bUseStableRasterization;                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScatterSceneLighting;                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairAdvancedRenderingSettings) == 0x000001, "Wrong alignment on FHairAdvancedRenderingSettings");
static_assert(sizeof(FHairAdvancedRenderingSettings) == 0x000002, "Wrong size on FHairAdvancedRenderingSettings");
static_assert(offsetof(FHairAdvancedRenderingSettings, bUseStableRasterization) == 0x000000, "Member 'FHairAdvancedRenderingSettings::bUseStableRasterization' has a wrong offset!");
static_assert(offsetof(FHairAdvancedRenderingSettings, bScatterSceneLighting) == 0x000001, "Member 'FHairAdvancedRenderingSettings::bScatterSceneLighting' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupsRendering
// 0x0030 (0x0030 - 0x0000)
struct FHairGroupsRendering final
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHairGeometrySettings                  GeometrySettings;                                  // 0x0010(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHairShadowSettings                    ShadowSettings;                                    // 0x001C(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHairAdvancedRenderingSettings         AdvancedSettings;                                  // 0x0028(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHairGroupsRendering) == 0x000008, "Wrong alignment on FHairGroupsRendering");
static_assert(sizeof(FHairGroupsRendering) == 0x000030, "Wrong size on FHairGroupsRendering");
static_assert(offsetof(FHairGroupsRendering, MaterialSlotName) == 0x000000, "Member 'FHairGroupsRendering::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(FHairGroupsRendering, Material) == 0x000008, "Member 'FHairGroupsRendering::Material' has a wrong offset!");
static_assert(offsetof(FHairGroupsRendering, GeometrySettings) == 0x000010, "Member 'FHairGroupsRendering::GeometrySettings' has a wrong offset!");
static_assert(offsetof(FHairGroupsRendering, ShadowSettings) == 0x00001C, "Member 'FHairGroupsRendering::ShadowSettings' has a wrong offset!");
static_assert(offsetof(FHairGroupsRendering, AdvancedSettings) == 0x000028, "Member 'FHairGroupsRendering::AdvancedSettings' has a wrong offset!");

// ScriptStruct HairStrandsCore.GoomBindingGroupInfo
// 0x0010 (0x0010 - 0x0000)
struct FGoomBindingGroupInfo final
{
public:
	int32                                         RenRootCount;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RenLODCount;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimRootCount;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimLODCount;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoomBindingGroupInfo) == 0x000004, "Wrong alignment on FGoomBindingGroupInfo");
static_assert(sizeof(FGoomBindingGroupInfo) == 0x000010, "Wrong size on FGoomBindingGroupInfo");
static_assert(offsetof(FGoomBindingGroupInfo, RenRootCount) == 0x000000, "Member 'FGoomBindingGroupInfo::RenRootCount' has a wrong offset!");
static_assert(offsetof(FGoomBindingGroupInfo, RenLODCount) == 0x000004, "Member 'FGoomBindingGroupInfo::RenLODCount' has a wrong offset!");
static_assert(offsetof(FGoomBindingGroupInfo, SimRootCount) == 0x000008, "Member 'FGoomBindingGroupInfo::SimRootCount' has a wrong offset!");
static_assert(offsetof(FGoomBindingGroupInfo, SimLODCount) == 0x00000C, "Member 'FGoomBindingGroupInfo::SimLODCount' has a wrong offset!");

// ScriptStruct HairStrandsCore.GroomAnimationInfo
// 0x0020 (0x0020 - 0x0000)
struct FGroomAnimationInfo final
{
public:
	uint32                                        NumFrames;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsPerFrame;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomCacheAttributes                         Attributes;                                        // 0x001C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroomAnimationInfo) == 0x000004, "Wrong alignment on FGroomAnimationInfo");
static_assert(sizeof(FGroomAnimationInfo) == 0x000020, "Wrong size on FGroomAnimationInfo");
static_assert(offsetof(FGroomAnimationInfo, NumFrames) == 0x000000, "Member 'FGroomAnimationInfo::NumFrames' has a wrong offset!");
static_assert(offsetof(FGroomAnimationInfo, SecondsPerFrame) == 0x000004, "Member 'FGroomAnimationInfo::SecondsPerFrame' has a wrong offset!");
static_assert(offsetof(FGroomAnimationInfo, Duration) == 0x000008, "Member 'FGroomAnimationInfo::Duration' has a wrong offset!");
static_assert(offsetof(FGroomAnimationInfo, StartTime) == 0x00000C, "Member 'FGroomAnimationInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FGroomAnimationInfo, EndTime) == 0x000010, "Member 'FGroomAnimationInfo::EndTime' has a wrong offset!");
static_assert(offsetof(FGroomAnimationInfo, StartFrame) == 0x000014, "Member 'FGroomAnimationInfo::StartFrame' has a wrong offset!");
static_assert(offsetof(FGroomAnimationInfo, EndFrame) == 0x000018, "Member 'FGroomAnimationInfo::EndFrame' has a wrong offset!");
static_assert(offsetof(FGroomAnimationInfo, Attributes) == 0x00001C, "Member 'FGroomAnimationInfo::Attributes' has a wrong offset!");

// ScriptStruct HairStrandsCore.GroomCacheInfo
// 0x0028 (0x0028 - 0x0000)
struct FGroomCacheInfo final
{
public:
	int32                                         Version;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomCacheType                               Type;                                              // 0x0004(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGroomAnimationInfo                    AnimationInfo;                                     // 0x0008(0x0020)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroomCacheInfo) == 0x000004, "Wrong alignment on FGroomCacheInfo");
static_assert(sizeof(FGroomCacheInfo) == 0x000028, "Wrong size on FGroomCacheInfo");
static_assert(offsetof(FGroomCacheInfo, Version) == 0x000000, "Member 'FGroomCacheInfo::Version' has a wrong offset!");
static_assert(offsetof(FGroomCacheInfo, Type) == 0x000004, "Member 'FGroomCacheInfo::Type' has a wrong offset!");
static_assert(offsetof(FGroomCacheInfo, AnimationInfo) == 0x000008, "Member 'FGroomCacheInfo::AnimationInfo' has a wrong offset!");

// ScriptStruct HairStrandsCore.FollicleMaskOptions
// 0x0010 (0x0010 - 0x0000)
struct FFollicleMaskOptions final
{
public:
	class UGroomAsset*                            Groom;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFollicleMaskChannel                          Channel;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFollicleMaskOptions) == 0x000008, "Wrong alignment on FFollicleMaskOptions");
static_assert(sizeof(FFollicleMaskOptions) == 0x000010, "Wrong size on FFollicleMaskOptions");
static_assert(offsetof(FFollicleMaskOptions, Groom) == 0x000000, "Member 'FFollicleMaskOptions::Groom' has a wrong offset!");
static_assert(offsetof(FFollicleMaskOptions, Channel) == 0x000008, "Member 'FFollicleMaskOptions::Channel' has a wrong offset!");

// ScriptStruct HairStrandsCore.GroomHairGroupPreview
// 0x0038 (0x0038 - 0x0000)
struct FGroomHairGroupPreview final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurveCount;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuideCount;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasRootUV;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasColorAttributes;                               // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasRoughnessAttributes;                           // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPrecomputedWeights;                            // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHairGroupsInterpolation               InterpolationSettings;                             // 0x0018(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroomHairGroupPreview) == 0x000004, "Wrong alignment on FGroomHairGroupPreview");
static_assert(sizeof(FGroomHairGroupPreview) == 0x000038, "Wrong size on FGroomHairGroupPreview");
static_assert(offsetof(FGroomHairGroupPreview, GroupName) == 0x000000, "Member 'FGroomHairGroupPreview::GroupName' has a wrong offset!");
static_assert(offsetof(FGroomHairGroupPreview, GroupID) == 0x000008, "Member 'FGroomHairGroupPreview::GroupID' has a wrong offset!");
static_assert(offsetof(FGroomHairGroupPreview, CurveCount) == 0x00000C, "Member 'FGroomHairGroupPreview::CurveCount' has a wrong offset!");
static_assert(offsetof(FGroomHairGroupPreview, GuideCount) == 0x000010, "Member 'FGroomHairGroupPreview::GuideCount' has a wrong offset!");
static_assert(offsetof(FGroomHairGroupPreview, bHasRootUV) == 0x000014, "Member 'FGroomHairGroupPreview::bHasRootUV' has a wrong offset!");
static_assert(offsetof(FGroomHairGroupPreview, bHasColorAttributes) == 0x000015, "Member 'FGroomHairGroupPreview::bHasColorAttributes' has a wrong offset!");
static_assert(offsetof(FGroomHairGroupPreview, bHasRoughnessAttributes) == 0x000016, "Member 'FGroomHairGroupPreview::bHasRoughnessAttributes' has a wrong offset!");
static_assert(offsetof(FGroomHairGroupPreview, bHasPrecomputedWeights) == 0x000017, "Member 'FGroomHairGroupPreview::bHasPrecomputedWeights' has a wrong offset!");
static_assert(offsetof(FGroomHairGroupPreview, InterpolationSettings) == 0x000018, "Member 'FGroomHairGroupPreview::InterpolationSettings' has a wrong offset!");

// ScriptStruct HairStrandsCore.GroomConversionSettings
// 0x0030 (0x0030 - 0x0000)
struct FGroomConversionSettings final
{
public:
	struct FVector                                Rotation;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroomConversionSettings) == 0x000008, "Wrong alignment on FGroomConversionSettings");
static_assert(sizeof(FGroomConversionSettings) == 0x000030, "Wrong size on FGroomConversionSettings");
static_assert(offsetof(FGroomConversionSettings, Rotation) == 0x000000, "Member 'FGroomConversionSettings::Rotation' has a wrong offset!");
static_assert(offsetof(FGroomConversionSettings, Scale) == 0x000018, "Member 'FGroomConversionSettings::Scale' has a wrong offset!");

// ScriptStruct HairStrandsCore.GroomBuildSettings
// 0x000C (0x000C - 0x0000)
struct FGroomBuildSettings final
{
public:
	bool                                          bOverrideGuides;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HairToGuideDensity;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomInterpolationQuality                    InterpolationQuality;                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomInterpolationWeight                     InterpolationDistance;                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeGuide;                                   // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUniqueGuide;                                   // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroomBuildSettings) == 0x000004, "Wrong alignment on FGroomBuildSettings");
static_assert(sizeof(FGroomBuildSettings) == 0x00000C, "Wrong size on FGroomBuildSettings");
static_assert(offsetof(FGroomBuildSettings, bOverrideGuides) == 0x000000, "Member 'FGroomBuildSettings::bOverrideGuides' has a wrong offset!");
static_assert(offsetof(FGroomBuildSettings, HairToGuideDensity) == 0x000004, "Member 'FGroomBuildSettings::HairToGuideDensity' has a wrong offset!");
static_assert(offsetof(FGroomBuildSettings, InterpolationQuality) == 0x000008, "Member 'FGroomBuildSettings::InterpolationQuality' has a wrong offset!");
static_assert(offsetof(FGroomBuildSettings, InterpolationDistance) == 0x000009, "Member 'FGroomBuildSettings::InterpolationDistance' has a wrong offset!");
static_assert(offsetof(FGroomBuildSettings, bRandomizeGuide) == 0x00000A, "Member 'FGroomBuildSettings::bRandomizeGuide' has a wrong offset!");
static_assert(offsetof(FGroomBuildSettings, bUseUniqueGuide) == 0x00000B, "Member 'FGroomBuildSettings::bUseUniqueGuide' has a wrong offset!");

// ScriptStruct HairStrandsCore.MovieSceneGroomCacheParams
// 0x0020 (0x0020 - 0x0000)
struct FMovieSceneGroomCacheParams
{
public:
	class UGroomCache*                            GroomCache;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           FirstLoopStartFrameOffset;                         // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           StartFrameOffset;                                  // 0x000C(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           EndFrameOffset;                                    // 0x0010(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bReverse : 1;                                      // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneGroomCacheParams) == 0x000008, "Wrong alignment on FMovieSceneGroomCacheParams");
static_assert(sizeof(FMovieSceneGroomCacheParams) == 0x000020, "Wrong size on FMovieSceneGroomCacheParams");
static_assert(offsetof(FMovieSceneGroomCacheParams, GroomCache) == 0x000000, "Member 'FMovieSceneGroomCacheParams::GroomCache' has a wrong offset!");
static_assert(offsetof(FMovieSceneGroomCacheParams, FirstLoopStartFrameOffset) == 0x000008, "Member 'FMovieSceneGroomCacheParams::FirstLoopStartFrameOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneGroomCacheParams, StartFrameOffset) == 0x00000C, "Member 'FMovieSceneGroomCacheParams::StartFrameOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneGroomCacheParams, EndFrameOffset) == 0x000010, "Member 'FMovieSceneGroomCacheParams::EndFrameOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneGroomCacheParams, PlayRate) == 0x000014, "Member 'FMovieSceneGroomCacheParams::PlayRate' has a wrong offset!");

// ScriptStruct HairStrandsCore.MovieSceneGroomCacheSectionTemplateParameters
// 0x0008 (0x0028 - 0x0020)
struct FMovieSceneGroomCacheSectionTemplateParameters final : public FMovieSceneGroomCacheParams
{
public:
	struct FFrameNumber                           SectionStartTime;                                  // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           SectionEndTime;                                    // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneGroomCacheSectionTemplateParameters) == 0x000008, "Wrong alignment on FMovieSceneGroomCacheSectionTemplateParameters");
static_assert(sizeof(FMovieSceneGroomCacheSectionTemplateParameters) == 0x000028, "Wrong size on FMovieSceneGroomCacheSectionTemplateParameters");
static_assert(offsetof(FMovieSceneGroomCacheSectionTemplateParameters, SectionStartTime) == 0x000020, "Member 'FMovieSceneGroomCacheSectionTemplateParameters::SectionStartTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneGroomCacheSectionTemplateParameters, SectionEndTime) == 0x000024, "Member 'FMovieSceneGroomCacheSectionTemplateParameters::SectionEndTime' has a wrong offset!");

// ScriptStruct HairStrandsCore.MovieSceneGroomCacheSectionTemplate
// 0x0028 (0x0048 - 0x0020)
struct FMovieSceneGroomCacheSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneGroomCacheSectionTemplateParameters Params;                                            // 0x0020(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneGroomCacheSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneGroomCacheSectionTemplate");
static_assert(sizeof(FMovieSceneGroomCacheSectionTemplate) == 0x000048, "Wrong size on FMovieSceneGroomCacheSectionTemplate");
static_assert(offsetof(FMovieSceneGroomCacheSectionTemplate, Params) == 0x000020, "Member 'FMovieSceneGroomCacheSectionTemplate::Params' has a wrong offset!");

}


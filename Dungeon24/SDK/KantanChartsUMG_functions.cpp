#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KantanChartsUMG

#include "Basic.hpp"

#include "KantanChartsUMG_classes.hpp"
#include "KantanChartsUMG_parameters.hpp"


namespace SDK
{

// Function KantanChartsUMG.KantanChart.SetChartTitle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InTitle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UKantanChart::SetChartTitle(const class FText& InTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanChart", "SetChartTitle");

	Params::KantanChart_SetChartTitle Parms{};

	Parms.InTitle = std::move(InTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanChart.SetChartTitlePadding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMargin                          InPadding                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKantanChart::SetChartTitlePadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanChart", "SetChartTitlePadding");

	Params::KantanChart_SetChartTitlePadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanChart.SetMargins
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMargin                          InMargins                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKantanChart::SetMargins(const struct FMargin& InMargins)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanChart", "SetMargins");

	Params::KantanChart_SetMargins Parms{};

	Parms.InMargins = std::move(InMargins);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanChart.SetUpdateTickRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InRate                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanChart::SetUpdateTickRate(float InRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanChart", "SetUpdateTickRate");

	Params::KantanChart_SetUpdateTickRate Parms{};

	Parms.InRate = InRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanCategoryChart.AddCategoryStyleOverride
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             CategoryId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanCategoryChart::AddCategoryStyleOverride(class FName CategoryId, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCategoryChart", "AddCategoryStyleOverride");

	Params::KantanCategoryChart_AddCategoryStyleOverride Parms{};

	Parms.CategoryId = CategoryId;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanBarChartBase.SetBarToGapRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InRatio                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanBarChartBase::SetBarToGapRatio(float InRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanBarChartBase", "SetBarToGapRatio");

	Params::KantanBarChartBase_SetBarToGapRatio Parms{};

	Parms.InRatio = InRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanBarChartBase.SetExtentsDisplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EKantanBarValueExtents                  InExtents                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanBarChartBase::SetExtentsDisplay(EKantanBarValueExtents InExtents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanBarChartBase", "SetExtentsDisplay");

	Params::KantanBarChartBase_SetExtentsDisplay Parms{};

	Parms.InExtents = InExtents;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanBarChartBase.SetLabelPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EKantanBarLabelPosition                 InPosition                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanBarChartBase::SetLabelPosition(EKantanBarLabelPosition InPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanBarChartBase", "SetLabelPosition");

	Params::KantanBarChartBase_SetLabelPosition Parms{};

	Parms.InPosition = InPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanBarChartBase.SetMaxBarValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMaxValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanBarChartBase::SetMaxBarValue(float InMaxValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanBarChartBase", "SetMaxBarValue");

	Params::KantanBarChartBase_SetMaxBarValue Parms{};

	Parms.InMaxValue = InMaxValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanBarChartBase.SetOrientation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EKantanBarChartOrientation              InOrientation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanBarChartBase::SetOrientation(EKantanBarChartOrientation InOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanBarChartBase", "SetOrientation");

	Params::KantanBarChartBase_SetOrientation Parms{};

	Parms.InOrientation = InOrientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanBarChartBase.SetValueAxisConfig
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCartesianAxisConfig             InCfg                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UKantanBarChartBase::SetValueAxisConfig(const struct FCartesianAxisConfig& InCfg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanBarChartBase", "SetValueAxisConfig");

	Params::KantanBarChartBase_SetValueAxisConfig Parms{};

	Parms.InCfg = std::move(InCfg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.BarChart.SetDatasource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InDatasource                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBarChart::SetDatasource(class UObject* InDatasource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BarChart", "SetDatasource");

	Params::BarChart_SetDatasource Parms{};

	Parms.InDatasource = InDatasource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsUMG.KantanCartesianChartBase.AddSeriesStyleOverride
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             SeriesId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UKantanPointStyle*                PointStyle                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanCartesianChartBase::AddSeriesStyleOverride(class FName SeriesId, class UKantanPointStyle* PointStyle, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianChartBase", "AddSeriesStyleOverride");

	Params::KantanCartesianChartBase_AddSeriesStyleOverride Parms{};

	Parms.SeriesId = SeriesId;
	Parms.PointStyle = PointStyle;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanCartesianChartBase.ConfigureSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDrawPoints                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDrawLines                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanCartesianChartBase::ConfigureSeries(class FName ID, bool bDrawPoints, bool bDrawLines)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianChartBase", "ConfigureSeries");

	Params::KantanCartesianChartBase_ConfigureSeries Parms{};

	Parms.ID = ID;
	Parms.bDrawPoints = bDrawPoints;
	Parms.bDrawLines = bDrawLines;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanCartesianChartBase.EnableSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanCartesianChartBase::EnableSeries(class FName ID, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianChartBase", "EnableSeries");

	Params::KantanCartesianChartBase_EnableSeries Parms{};

	Parms.ID = ID;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanCartesianChartBase.SetAxisTitlePadding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMargin                          InPadding                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKantanCartesianChartBase::SetAxisTitlePadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianChartBase", "SetAxisTitlePadding");

	Params::KantanCartesianChartBase_SetAxisTitlePadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanCartesianChartBase.SetDataPointSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EKantanDataPointSize                    InSize                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanCartesianChartBase::SetDataPointSize(EKantanDataPointSize InSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianChartBase", "SetDataPointSize");

	Params::KantanCartesianChartBase_SetDataPointSize Parms{};

	Parms.InSize = InSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanCartesianChartBase.SetPlotScale
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InScale                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InFocalCoords                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanCartesianChartBase::SetPlotScale(const struct FVector2D& InScale, const struct FVector2D& InFocalCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianChartBase", "SetPlotScale");

	Params::KantanCartesianChartBase_SetPlotScale Parms{};

	Parms.InScale = std::move(InScale);
	Parms.InFocalCoords = std::move(InFocalCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanCartesianChartBase.SetPlotScaleByRange
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCartesianAxisRange              InRangeX                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FCartesianAxisRange              InRangeY                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UKantanCartesianChartBase::SetPlotScaleByRange(const struct FCartesianAxisRange& InRangeX, const struct FCartesianAxisRange& InRangeY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianChartBase", "SetPlotScaleByRange");

	Params::KantanCartesianChartBase_SetPlotScaleByRange Parms{};

	Parms.InRangeX = std::move(InRangeX);
	Parms.InRangeY = std::move(InRangeY);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanCartesianChartBase.SetXAxisConfig
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCartesianAxisConfig             InCfg                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UKantanCartesianChartBase::SetXAxisConfig(const struct FCartesianAxisConfig& InCfg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianChartBase", "SetXAxisConfig");

	Params::KantanCartesianChartBase_SetXAxisConfig Parms{};

	Parms.InCfg = std::move(InCfg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanCartesianChartBase.SetYAxisConfig
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCartesianAxisConfig             InCfg                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UKantanCartesianChartBase::SetYAxisConfig(const struct FCartesianAxisConfig& InCfg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanCartesianChartBase", "SetYAxisConfig");

	Params::KantanCartesianChartBase_SetYAxisConfig Parms{};

	Parms.InCfg = std::move(InCfg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.CartesianPlot.SetDatasource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InDatasource                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCartesianPlot::SetDatasource(class UObject* InDatasource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CartesianPlot", "SetDatasource");

	Params::CartesianPlot_SetDatasource Parms{};

	Parms.InDatasource = InDatasource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KantanChartsUMG.KantanChartLegend.SetBackground
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSlateBrush                      InBrush                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UKantanChartLegend::SetBackground(const struct FSlateBrush& InBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanChartLegend", "SetBackground");

	Params::KantanChartLegend_SetBackground Parms{};

	Parms.InBrush = std::move(InBrush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanChartLegend.SetChart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UKantanCartesianChartBase*        InChart                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanChartLegend::SetChart(class UKantanCartesianChartBase* InChart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanChartLegend", "SetChart");

	Params::KantanChartLegend_SetChart Parms{};

	Parms.InChart = InChart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanChartLegend.SetFontSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InFontSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKantanChartLegend::SetFontSize(int32 InFontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanChartLegend", "SetFontSize");

	Params::KantanChartLegend_SetFontSize Parms{};

	Parms.InFontSize = InFontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanChartLegend.SetMargins
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMargin                          InMargins                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKantanChartLegend::SetMargins(const struct FMargin& InMargins)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanChartLegend", "SetMargins");

	Params::KantanChartLegend_SetMargins Parms{};

	Parms.InMargins = std::move(InMargins);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanChartLegend.SetSeriesPadding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMargin                          InPadding                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKantanChartLegend::SetSeriesPadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanChartLegend", "SetSeriesPadding");

	Params::KantanChartLegend_SetSeriesPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanTimeSeriesPlotBase.SetLowerTimeBound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FCartesianRangeBound             InLowerBound                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UKantanTimeSeriesPlotBase::SetLowerTimeBound(const struct FCartesianRangeBound& InLowerBound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanTimeSeriesPlotBase", "SetLowerTimeBound");

	Params::KantanTimeSeriesPlotBase_SetLowerTimeBound Parms{};

	Parms.InLowerBound = std::move(InLowerBound);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanTimeSeriesPlotBase.SetLowerValueBound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FCartesianRangeBound             InLowerBound                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UKantanTimeSeriesPlotBase::SetLowerValueBound(const struct FCartesianRangeBound& InLowerBound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanTimeSeriesPlotBase", "SetLowerValueBound");

	Params::KantanTimeSeriesPlotBase_SetLowerValueBound Parms{};

	Parms.InLowerBound = std::move(InLowerBound);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanTimeSeriesPlotBase.SetUpperTimeBound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FCartesianRangeBound             InUpperBound                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UKantanTimeSeriesPlotBase::SetUpperTimeBound(const struct FCartesianRangeBound& InUpperBound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanTimeSeriesPlotBase", "SetUpperTimeBound");

	Params::KantanTimeSeriesPlotBase_SetUpperTimeBound Parms{};

	Parms.InUpperBound = std::move(InUpperBound);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.KantanTimeSeriesPlotBase.SetUpperValueBound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FCartesianRangeBound             InUpperBound                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UKantanTimeSeriesPlotBase::SetUpperValueBound(const struct FCartesianRangeBound& InUpperBound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KantanTimeSeriesPlotBase", "SetUpperValueBound");

	Params::KantanTimeSeriesPlotBase_SetUpperValueBound Parms{};

	Parms.InUpperBound = std::move(InUpperBound);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.SimpleBarChart.BP_AddCategory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Param_Name                                             (Parm, NativeAccessSpecifierPublic)
// class FName                             CatId                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleBarChart::BP_AddCategory(const class FText& Param_Name, class FName* CatId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleBarChart", "BP_AddCategory");

	Params::SimpleBarChart_BP_AddCategory Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CatId != nullptr)
		*CatId = Parms.CatId;
}


// Function KantanChartsUMG.SimpleBarChart.BP_AddCategoryWithId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Param_Name                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleBarChart::BP_AddCategoryWithId(class FName ID, const class FText& Param_Name, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleBarChart", "BP_AddCategoryWithId");

	Params::SimpleBarChart_BP_AddCategoryWithId Parms{};

	Parms.ID = ID;
	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsUMG.SimpleBarChart.BP_RemoveAllCategories
// (Final, Native, Public, BlueprintCallable)

void USimpleBarChart::BP_RemoveAllCategories()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleBarChart", "BP_RemoveAllCategories");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.SimpleBarChart.BP_RemoveCategory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleBarChart::BP_RemoveCategory(class FName ID, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleBarChart", "BP_RemoveCategory");

	Params::SimpleBarChart_BP_RemoveCategory Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsUMG.SimpleBarChart.BP_UpdateCategoryValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleBarChart::BP_UpdateCategoryValue(class FName ID, float Value, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleBarChart", "BP_UpdateCategoryValue");

	Params::SimpleBarChart_BP_UpdateCategoryValue Parms{};

	Parms.ID = ID;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsUMG.SimpleCartesianPlot.BP_AddDatapoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             SeriesId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleCartesianPlot::BP_AddDatapoint(class FName SeriesId, const struct FVector2D& Point, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCartesianPlot", "BP_AddDatapoint");

	Params::SimpleCartesianPlot_BP_AddDatapoint Parms{};

	Parms.SeriesId = SeriesId;
	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsUMG.SimpleCartesianPlot.BP_AddSeries
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SeriesId                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Param_Name                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowPoints                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowLines                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleCartesianPlot::BP_AddSeries(class FName* SeriesId, const class FText& Param_Name, bool bEnabled, bool bShowPoints, bool bShowLines)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCartesianPlot", "BP_AddSeries");

	Params::SimpleCartesianPlot_BP_AddSeries Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.bEnabled = bEnabled;
	Parms.bShowPoints = bShowPoints;
	Parms.bShowLines = bShowLines;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SeriesId != nullptr)
		*SeriesId = Parms.SeriesId;
}


// Function KantanChartsUMG.SimpleCartesianPlot.BP_AddSeriesWithId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Param_Name                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowPoints                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowLines                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleCartesianPlot::BP_AddSeriesWithId(bool* bSuccess, class FName ID, const class FText& Param_Name, bool bEnabled, bool bShowPoints, bool bShowLines)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCartesianPlot", "BP_AddSeriesWithId");

	Params::SimpleCartesianPlot_BP_AddSeriesWithId Parms{};

	Parms.ID = ID;
	Parms.Param_Name = std::move(Param_Name);
	Parms.bEnabled = bEnabled;
	Parms.bShowPoints = bShowPoints;
	Parms.bShowLines = bShowLines;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsUMG.SimpleCartesianPlot.BP_RemoveAllSeries
// (Final, Native, Public, BlueprintCallable)

void USimpleCartesianPlot::BP_RemoveAllSeries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCartesianPlot", "BP_RemoveAllSeries");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.SimpleCartesianPlot.BP_RemoveSeries
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleCartesianPlot::BP_RemoveSeries(class FName ID, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCartesianPlot", "BP_RemoveSeries");

	Params::SimpleCartesianPlot_BP_RemoveSeries Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddDatapoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             SeriesId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleTimeSeriesPlot::BP_AddDatapoint(class FName SeriesId, const struct FVector2D& Point, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleTimeSeriesPlot", "BP_AddDatapoint");

	Params::SimpleTimeSeriesPlot_BP_AddDatapoint Parms{};

	Parms.SeriesId = SeriesId;
	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddDatapointNow
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SeriesId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleTimeSeriesPlot::BP_AddDatapointNow(class FName SeriesId, float Value, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleTimeSeriesPlot", "BP_AddDatapointNow");

	Params::SimpleTimeSeriesPlot_BP_AddDatapointNow Parms{};

	Parms.SeriesId = SeriesId;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddSeries
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SeriesId                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Param_Name                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowPoints                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowLines                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleTimeSeriesPlot::BP_AddSeries(class FName* SeriesId, const class FText& Param_Name, bool bEnabled, bool bShowPoints, bool bShowLines)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleTimeSeriesPlot", "BP_AddSeries");

	Params::SimpleTimeSeriesPlot_BP_AddSeries Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.bEnabled = bEnabled;
	Parms.bShowPoints = bShowPoints;
	Parms.bShowLines = bShowLines;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SeriesId != nullptr)
		*SeriesId = Parms.SeriesId;
}


// Function KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddSeriesWithId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Param_Name                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowPoints                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowLines                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleTimeSeriesPlot::BP_AddSeriesWithId(bool* bSuccess, class FName ID, const class FText& Param_Name, bool bEnabled, bool bShowPoints, bool bShowLines)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleTimeSeriesPlot", "BP_AddSeriesWithId");

	Params::SimpleTimeSeriesPlot_BP_AddSeriesWithId Parms{};

	Parms.ID = ID;
	Parms.Param_Name = std::move(Param_Name);
	Parms.bEnabled = bEnabled;
	Parms.bShowPoints = bShowPoints;
	Parms.bShowLines = bShowLines;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsUMG.SimpleTimeSeriesPlot.BP_RemoveAllSeries
// (Final, Native, Public, BlueprintCallable)

void USimpleTimeSeriesPlot::BP_RemoveAllSeries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleTimeSeriesPlot", "BP_RemoveAllSeries");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KantanChartsUMG.SimpleTimeSeriesPlot.BP_RemoveSeries
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleTimeSeriesPlot::BP_RemoveSeries(class FName ID, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleTimeSeriesPlot", "BP_RemoveSeries");

	Params::SimpleTimeSeriesPlot_BP_RemoveSeries Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function KantanChartsUMG.TimeSeriesPlot.SetDatasource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InDatasource                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeSeriesPlot::SetDatasource(class UObject* InDatasource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeSeriesPlot", "SetDatasource");

	Params::TimeSeriesPlot_SetDatasource Parms{};

	Parms.InDatasource = InDatasource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}


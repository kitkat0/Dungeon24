#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TGFFramework

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function TGFFramework.ComboBoxText.AddOption
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxText_AddOption final
{
public:
	class FText                                   Option;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_AddOption) == 0x000008, "Wrong alignment on ComboBoxText_AddOption");
static_assert(sizeof(ComboBoxText_AddOption) == 0x000018, "Wrong size on ComboBoxText_AddOption");
static_assert(offsetof(ComboBoxText_AddOption, Option) == 0x000000, "Member 'ComboBoxText_AddOption::Option' has a wrong offset!");

// DelegateFunction TGFFramework.ComboBoxText.OnSelectionChangedEvent__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct ComboBoxText_OnSelectionChangedEvent__DelegateSignature final
{
public:
	class FText                                   SelectedItem;                                      // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         SelectedIndex;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxText_OnSelectionChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on ComboBoxText_OnSelectionChangedEvent__DelegateSignature");
static_assert(sizeof(ComboBoxText_OnSelectionChangedEvent__DelegateSignature) == 0x000020, "Wrong size on ComboBoxText_OnSelectionChangedEvent__DelegateSignature");
static_assert(offsetof(ComboBoxText_OnSelectionChangedEvent__DelegateSignature, SelectedItem) == 0x000000, "Member 'ComboBoxText_OnSelectionChangedEvent__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(ComboBoxText_OnSelectionChangedEvent__DelegateSignature, SelectedIndex) == 0x000018, "Member 'ComboBoxText_OnSelectionChangedEvent__DelegateSignature::SelectedIndex' has a wrong offset!");
static_assert(offsetof(ComboBoxText_OnSelectionChangedEvent__DelegateSignature, SelectionType) == 0x00001C, "Member 'ComboBoxText_OnSelectionChangedEvent__DelegateSignature::SelectionType' has a wrong offset!");

// Function TGFFramework.ComboBoxText.RemoveOption
// 0x0020 (0x0020 - 0x0000)
struct ComboBoxText_RemoveOption final
{
public:
	class FText                                   Option;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxText_RemoveOption) == 0x000008, "Wrong alignment on ComboBoxText_RemoveOption");
static_assert(sizeof(ComboBoxText_RemoveOption) == 0x000020, "Wrong size on ComboBoxText_RemoveOption");
static_assert(offsetof(ComboBoxText_RemoveOption, Option) == 0x000000, "Member 'ComboBoxText_RemoveOption::Option' has a wrong offset!");
static_assert(offsetof(ComboBoxText_RemoveOption, ReturnValue) == 0x000018, "Member 'ComboBoxText_RemoveOption::ReturnValue' has a wrong offset!");

// Function TGFFramework.ComboBoxText.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct ComboBoxText_SetSelectedIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_SetSelectedIndex) == 0x000004, "Wrong alignment on ComboBoxText_SetSelectedIndex");
static_assert(sizeof(ComboBoxText_SetSelectedIndex) == 0x000004, "Wrong size on ComboBoxText_SetSelectedIndex");
static_assert(offsetof(ComboBoxText_SetSelectedIndex, Param_Index) == 0x000000, "Member 'ComboBoxText_SetSelectedIndex::Param_Index' has a wrong offset!");

// Function TGFFramework.ComboBoxText.SetSelectedOption
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxText_SetSelectedOption final
{
public:
	class FText                                   Option;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_SetSelectedOption) == 0x000008, "Wrong alignment on ComboBoxText_SetSelectedOption");
static_assert(sizeof(ComboBoxText_SetSelectedOption) == 0x000018, "Wrong size on ComboBoxText_SetSelectedOption");
static_assert(offsetof(ComboBoxText_SetSelectedOption, Option) == 0x000000, "Member 'ComboBoxText_SetSelectedOption::Option' has a wrong offset!");

// Function TGFFramework.ComboBoxText.FindOptionIndex
// 0x0020 (0x0020 - 0x0000)
struct ComboBoxText_FindOptionIndex final
{
public:
	class FText                                   Option;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxText_FindOptionIndex) == 0x000008, "Wrong alignment on ComboBoxText_FindOptionIndex");
static_assert(sizeof(ComboBoxText_FindOptionIndex) == 0x000020, "Wrong size on ComboBoxText_FindOptionIndex");
static_assert(offsetof(ComboBoxText_FindOptionIndex, Option) == 0x000000, "Member 'ComboBoxText_FindOptionIndex::Option' has a wrong offset!");
static_assert(offsetof(ComboBoxText_FindOptionIndex, ReturnValue) == 0x000018, "Member 'ComboBoxText_FindOptionIndex::ReturnValue' has a wrong offset!");

// Function TGFFramework.ComboBoxText.GetOptionAtIndex
// 0x0020 (0x0020 - 0x0000)
struct ComboBoxText_GetOptionAtIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_GetOptionAtIndex) == 0x000008, "Wrong alignment on ComboBoxText_GetOptionAtIndex");
static_assert(sizeof(ComboBoxText_GetOptionAtIndex) == 0x000020, "Wrong size on ComboBoxText_GetOptionAtIndex");
static_assert(offsetof(ComboBoxText_GetOptionAtIndex, Param_Index) == 0x000000, "Member 'ComboBoxText_GetOptionAtIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(ComboBoxText_GetOptionAtIndex, ReturnValue) == 0x000008, "Member 'ComboBoxText_GetOptionAtIndex::ReturnValue' has a wrong offset!");

// Function TGFFramework.ComboBoxText.GetOptionCount
// 0x0004 (0x0004 - 0x0000)
struct ComboBoxText_GetOptionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_GetOptionCount) == 0x000004, "Wrong alignment on ComboBoxText_GetOptionCount");
static_assert(sizeof(ComboBoxText_GetOptionCount) == 0x000004, "Wrong size on ComboBoxText_GetOptionCount");
static_assert(offsetof(ComboBoxText_GetOptionCount, ReturnValue) == 0x000000, "Member 'ComboBoxText_GetOptionCount::ReturnValue' has a wrong offset!");

// Function TGFFramework.ComboBoxText.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct ComboBoxText_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_GetSelectedIndex) == 0x000004, "Wrong alignment on ComboBoxText_GetSelectedIndex");
static_assert(sizeof(ComboBoxText_GetSelectedIndex) == 0x000004, "Wrong size on ComboBoxText_GetSelectedIndex");
static_assert(offsetof(ComboBoxText_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'ComboBoxText_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function TGFFramework.ComboBoxText.GetSelectedOption
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxText_GetSelectedOption final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_GetSelectedOption) == 0x000008, "Wrong alignment on ComboBoxText_GetSelectedOption");
static_assert(sizeof(ComboBoxText_GetSelectedOption) == 0x000018, "Wrong size on ComboBoxText_GetSelectedOption");
static_assert(offsetof(ComboBoxText_GetSelectedOption, ReturnValue) == 0x000000, "Member 'ComboBoxText_GetSelectedOption::ReturnValue' has a wrong offset!");

// Function TGFFramework.ComboBoxText.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct ComboBoxText_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_IsOpen) == 0x000001, "Wrong alignment on ComboBoxText_IsOpen");
static_assert(sizeof(ComboBoxText_IsOpen) == 0x000001, "Wrong size on ComboBoxText_IsOpen");
static_assert(offsetof(ComboBoxText_IsOpen, ReturnValue) == 0x000000, "Member 'ComboBoxText_IsOpen::ReturnValue' has a wrong offset!");

// DelegateFunction TGFFramework.CustomEditableText.OnCustomEditableTextFocusLost__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct CustomEditableText_OnCustomEditableTextFocusLost__DelegateSignature final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEditableText_OnCustomEditableTextFocusLost__DelegateSignature) == 0x000004, "Wrong alignment on CustomEditableText_OnCustomEditableTextFocusLost__DelegateSignature");
static_assert(sizeof(CustomEditableText_OnCustomEditableTextFocusLost__DelegateSignature) == 0x000008, "Wrong size on CustomEditableText_OnCustomEditableTextFocusLost__DelegateSignature");
static_assert(offsetof(CustomEditableText_OnCustomEditableTextFocusLost__DelegateSignature, InFocusEvent) == 0x000000, "Member 'CustomEditableText_OnCustomEditableTextFocusLost__DelegateSignature::InFocusEvent' has a wrong offset!");

// DelegateFunction TGFFramework.CustomEditableText.OnCustomEditableTextFocusReceived__DelegateSignature
// 0x0048 (0x0048 - 0x0000)
struct CustomEditableText_OnCustomEditableTextFocusReceived__DelegateSignature final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0040(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEditableText_OnCustomEditableTextFocusReceived__DelegateSignature) == 0x000008, "Wrong alignment on CustomEditableText_OnCustomEditableTextFocusReceived__DelegateSignature");
static_assert(sizeof(CustomEditableText_OnCustomEditableTextFocusReceived__DelegateSignature) == 0x000048, "Wrong size on CustomEditableText_OnCustomEditableTextFocusReceived__DelegateSignature");
static_assert(offsetof(CustomEditableText_OnCustomEditableTextFocusReceived__DelegateSignature, MyGeometry) == 0x000000, "Member 'CustomEditableText_OnCustomEditableTextFocusReceived__DelegateSignature::MyGeometry' has a wrong offset!");
static_assert(offsetof(CustomEditableText_OnCustomEditableTextFocusReceived__DelegateSignature, InFocusEvent) == 0x000040, "Member 'CustomEditableText_OnCustomEditableTextFocusReceived__DelegateSignature::InFocusEvent' has a wrong offset!");

// Function TGFFramework.CustomEditableText.OnKeyDown
// 0x0138 (0x0138 - 0x0000)
struct CustomEditableText_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0040(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x0080(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEditableText_OnKeyDown) == 0x000008, "Wrong alignment on CustomEditableText_OnKeyDown");
static_assert(sizeof(CustomEditableText_OnKeyDown) == 0x000138, "Wrong size on CustomEditableText_OnKeyDown");
static_assert(offsetof(CustomEditableText_OnKeyDown, MyGeometry) == 0x000000, "Member 'CustomEditableText_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(CustomEditableText_OnKeyDown, InKeyEvent) == 0x000040, "Member 'CustomEditableText_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(CustomEditableText_OnKeyDown, ReturnValue) == 0x000080, "Member 'CustomEditableText_OnKeyDown::ReturnValue' has a wrong offset!");

// Function TGFFramework.HorizontalToggleGroup.GetCurIndex
// 0x0004 (0x0004 - 0x0000)
struct HorizontalToggleGroup_GetCurIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HorizontalToggleGroup_GetCurIndex) == 0x000004, "Wrong alignment on HorizontalToggleGroup_GetCurIndex");
static_assert(sizeof(HorizontalToggleGroup_GetCurIndex) == 0x000004, "Wrong size on HorizontalToggleGroup_GetCurIndex");
static_assert(offsetof(HorizontalToggleGroup_GetCurIndex, ReturnValue) == 0x000000, "Member 'HorizontalToggleGroup_GetCurIndex::ReturnValue' has a wrong offset!");

// Function TGFFramework.HorizontalToggleGroup.GetToggleGroup
// 0x0008 (0x0008 - 0x0000)
struct HorizontalToggleGroup_GetToggleGroup final
{
public:
	class UToggleGroup*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HorizontalToggleGroup_GetToggleGroup) == 0x000008, "Wrong alignment on HorizontalToggleGroup_GetToggleGroup");
static_assert(sizeof(HorizontalToggleGroup_GetToggleGroup) == 0x000008, "Wrong size on HorizontalToggleGroup_GetToggleGroup");
static_assert(offsetof(HorizontalToggleGroup_GetToggleGroup, ReturnValue) == 0x000000, "Member 'HorizontalToggleGroup_GetToggleGroup::ReturnValue' has a wrong offset!");

// Function TGFFramework.HorizontalToggleGroup.NativeOnToggleChanged
// 0x0004 (0x0004 - 0x0000)
struct HorizontalToggleGroup_NativeOnToggleChanged final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HorizontalToggleGroup_NativeOnToggleChanged) == 0x000004, "Wrong alignment on HorizontalToggleGroup_NativeOnToggleChanged");
static_assert(sizeof(HorizontalToggleGroup_NativeOnToggleChanged) == 0x000004, "Wrong size on HorizontalToggleGroup_NativeOnToggleChanged");
static_assert(offsetof(HorizontalToggleGroup_NativeOnToggleChanged, Param_Index) == 0x000000, "Member 'HorizontalToggleGroup_NativeOnToggleChanged::Param_Index' has a wrong offset!");

// Function TGFFramework.HorizontalToggleGroup.SetCurIndex
// 0x0004 (0x0004 - 0x0000)
struct HorizontalToggleGroup_SetCurIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HorizontalToggleGroup_SetCurIndex) == 0x000004, "Wrong alignment on HorizontalToggleGroup_SetCurIndex");
static_assert(sizeof(HorizontalToggleGroup_SetCurIndex) == 0x000004, "Wrong size on HorizontalToggleGroup_SetCurIndex");
static_assert(offsetof(HorizontalToggleGroup_SetCurIndex, Param_Index) == 0x000000, "Member 'HorizontalToggleGroup_SetCurIndex::Param_Index' has a wrong offset!");

// Function TGFFramework.TGFBaseFunctionLibrary.FileExists
// 0x0018 (0x0018 - 0x0000)
struct TGFBaseFunctionLibrary_FileExists final
{
public:
	class FString                                 InPath;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFBaseFunctionLibrary_FileExists) == 0x000008, "Wrong alignment on TGFBaseFunctionLibrary_FileExists");
static_assert(sizeof(TGFBaseFunctionLibrary_FileExists) == 0x000018, "Wrong size on TGFBaseFunctionLibrary_FileExists");
static_assert(offsetof(TGFBaseFunctionLibrary_FileExists, InPath) == 0x000000, "Member 'TGFBaseFunctionLibrary_FileExists::InPath' has a wrong offset!");
static_assert(offsetof(TGFBaseFunctionLibrary_FileExists, ReturnValue) == 0x000010, "Member 'TGFBaseFunctionLibrary_FileExists::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFBaseFunctionLibrary.GetClassBySoftPath
// 0x0018 (0x0018 - 0x0000)
struct TGFBaseFunctionLibrary_GetClassBySoftPath final
{
public:
	class FString                                 SoftPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFBaseFunctionLibrary_GetClassBySoftPath) == 0x000008, "Wrong alignment on TGFBaseFunctionLibrary_GetClassBySoftPath");
static_assert(sizeof(TGFBaseFunctionLibrary_GetClassBySoftPath) == 0x000018, "Wrong size on TGFBaseFunctionLibrary_GetClassBySoftPath");
static_assert(offsetof(TGFBaseFunctionLibrary_GetClassBySoftPath, SoftPath) == 0x000000, "Member 'TGFBaseFunctionLibrary_GetClassBySoftPath::SoftPath' has a wrong offset!");
static_assert(offsetof(TGFBaseFunctionLibrary_GetClassBySoftPath, ReturnValue) == 0x000010, "Member 'TGFBaseFunctionLibrary_GetClassBySoftPath::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFBaseFunctionLibrary.GetDataTableRowNames
// 0x0018 (0x0018 - 0x0000)
struct TGFBaseFunctionLibrary_GetDataTableRowNames final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFBaseFunctionLibrary_GetDataTableRowNames) == 0x000008, "Wrong alignment on TGFBaseFunctionLibrary_GetDataTableRowNames");
static_assert(sizeof(TGFBaseFunctionLibrary_GetDataTableRowNames) == 0x000018, "Wrong size on TGFBaseFunctionLibrary_GetDataTableRowNames");
static_assert(offsetof(TGFBaseFunctionLibrary_GetDataTableRowNames, DataTable) == 0x000000, "Member 'TGFBaseFunctionLibrary_GetDataTableRowNames::DataTable' has a wrong offset!");
static_assert(offsetof(TGFBaseFunctionLibrary_GetDataTableRowNames, ReturnValue) == 0x000008, "Member 'TGFBaseFunctionLibrary_GetDataTableRowNames::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFBaseFunctionLibrary.GetGameEngineSubsystem
// 0x0010 (0x0010 - 0x0000)
struct TGFBaseFunctionLibrary_GetGameEngineSubsystem final
{
public:
	TSubclassOf<class UEngineSubsystem>           SubsystemClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEngineSubsystem*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFBaseFunctionLibrary_GetGameEngineSubsystem) == 0x000008, "Wrong alignment on TGFBaseFunctionLibrary_GetGameEngineSubsystem");
static_assert(sizeof(TGFBaseFunctionLibrary_GetGameEngineSubsystem) == 0x000010, "Wrong size on TGFBaseFunctionLibrary_GetGameEngineSubsystem");
static_assert(offsetof(TGFBaseFunctionLibrary_GetGameEngineSubsystem, SubsystemClass) == 0x000000, "Member 'TGFBaseFunctionLibrary_GetGameEngineSubsystem::SubsystemClass' has a wrong offset!");
static_assert(offsetof(TGFBaseFunctionLibrary_GetGameEngineSubsystem, ReturnValue) == 0x000008, "Member 'TGFBaseFunctionLibrary_GetGameEngineSubsystem::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFBaseFunctionLibrary.GetGameInstance
// 0x0008 (0x0008 - 0x0000)
struct TGFBaseFunctionLibrary_GetGameInstance final
{
public:
	class UGameInstance*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFBaseFunctionLibrary_GetGameInstance) == 0x000008, "Wrong alignment on TGFBaseFunctionLibrary_GetGameInstance");
static_assert(sizeof(TGFBaseFunctionLibrary_GetGameInstance) == 0x000008, "Wrong size on TGFBaseFunctionLibrary_GetGameInstance");
static_assert(offsetof(TGFBaseFunctionLibrary_GetGameInstance, ReturnValue) == 0x000000, "Member 'TGFBaseFunctionLibrary_GetGameInstance::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFBaseFunctionLibrary.GetGameInstanceSubsystem
// 0x0010 (0x0010 - 0x0000)
struct TGFBaseFunctionLibrary_GetGameInstanceSubsystem final
{
public:
	TSubclassOf<class UGameInstanceSubsystem>     SubsystemClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameInstanceSubsystem*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFBaseFunctionLibrary_GetGameInstanceSubsystem) == 0x000008, "Wrong alignment on TGFBaseFunctionLibrary_GetGameInstanceSubsystem");
static_assert(sizeof(TGFBaseFunctionLibrary_GetGameInstanceSubsystem) == 0x000010, "Wrong size on TGFBaseFunctionLibrary_GetGameInstanceSubsystem");
static_assert(offsetof(TGFBaseFunctionLibrary_GetGameInstanceSubsystem, SubsystemClass) == 0x000000, "Member 'TGFBaseFunctionLibrary_GetGameInstanceSubsystem::SubsystemClass' has a wrong offset!");
static_assert(offsetof(TGFBaseFunctionLibrary_GetGameInstanceSubsystem, ReturnValue) == 0x000008, "Member 'TGFBaseFunctionLibrary_GetGameInstanceSubsystem::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFBaseFunctionLibrary.GetIsEditor
// 0x0001 (0x0001 - 0x0000)
struct TGFBaseFunctionLibrary_GetIsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFBaseFunctionLibrary_GetIsEditor) == 0x000001, "Wrong alignment on TGFBaseFunctionLibrary_GetIsEditor");
static_assert(sizeof(TGFBaseFunctionLibrary_GetIsEditor) == 0x000001, "Wrong size on TGFBaseFunctionLibrary_GetIsEditor");
static_assert(offsetof(TGFBaseFunctionLibrary_GetIsEditor, ReturnValue) == 0x000000, "Member 'TGFBaseFunctionLibrary_GetIsEditor::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFBaseFunctionLibrary.ProjectContentDir
// 0x0010 (0x0010 - 0x0000)
struct TGFBaseFunctionLibrary_ProjectContentDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFBaseFunctionLibrary_ProjectContentDir) == 0x000008, "Wrong alignment on TGFBaseFunctionLibrary_ProjectContentDir");
static_assert(sizeof(TGFBaseFunctionLibrary_ProjectContentDir) == 0x000010, "Wrong size on TGFBaseFunctionLibrary_ProjectContentDir");
static_assert(offsetof(TGFBaseFunctionLibrary_ProjectContentDir, ReturnValue) == 0x000000, "Member 'TGFBaseFunctionLibrary_ProjectContentDir::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFBaseFunctionLibrary.ProjectDir
// 0x0010 (0x0010 - 0x0000)
struct TGFBaseFunctionLibrary_ProjectDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFBaseFunctionLibrary_ProjectDir) == 0x000008, "Wrong alignment on TGFBaseFunctionLibrary_ProjectDir");
static_assert(sizeof(TGFBaseFunctionLibrary_ProjectDir) == 0x000010, "Wrong size on TGFBaseFunctionLibrary_ProjectDir");
static_assert(offsetof(TGFBaseFunctionLibrary_ProjectDir, ReturnValue) == 0x000000, "Member 'TGFBaseFunctionLibrary_ProjectDir::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFEventManager.GetEventHandler
// 0x0018 (0x0018 - 0x0000)
struct TGFEventManager_GetEventHandler final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFEventHandler*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFEventManager_GetEventHandler) == 0x000008, "Wrong alignment on TGFEventManager_GetEventHandler");
static_assert(sizeof(TGFEventManager_GetEventHandler) == 0x000018, "Wrong size on TGFEventManager_GetEventHandler");
static_assert(offsetof(TGFEventManager_GetEventHandler, EventName) == 0x000000, "Member 'TGFEventManager_GetEventHandler::EventName' has a wrong offset!");
static_assert(offsetof(TGFEventManager_GetEventHandler, ReturnValue) == 0x000010, "Member 'TGFEventManager_GetEventHandler::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFSceneFunctionLibrary.ShowWorldActorByTag
// 0x000C (0x000C - 0x0000)
struct TGFSceneFunctionLibrary_ShowWorldActorByTag final
{
public:
	bool                                          bIsShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFSceneFunctionLibrary_ShowWorldActorByTag) == 0x000004, "Wrong alignment on TGFSceneFunctionLibrary_ShowWorldActorByTag");
static_assert(sizeof(TGFSceneFunctionLibrary_ShowWorldActorByTag) == 0x00000C, "Wrong size on TGFSceneFunctionLibrary_ShowWorldActorByTag");
static_assert(offsetof(TGFSceneFunctionLibrary_ShowWorldActorByTag, bIsShow) == 0x000000, "Member 'TGFSceneFunctionLibrary_ShowWorldActorByTag::bIsShow' has a wrong offset!");
static_assert(offsetof(TGFSceneFunctionLibrary_ShowWorldActorByTag, Tag) == 0x000004, "Member 'TGFSceneFunctionLibrary_ShowWorldActorByTag::Tag' has a wrong offset!");

// Function TGFFramework.UserWidgetBase.LoadComponent
// 0x0018 (0x0018 - 0x0000)
struct UserWidgetBase_LoadComponent final
{
public:
	TSubclassOf<class UUserWidget>                Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetBase_LoadComponent) == 0x000008, "Wrong alignment on UserWidgetBase_LoadComponent");
static_assert(sizeof(UserWidgetBase_LoadComponent) == 0x000018, "Wrong size on UserWidgetBase_LoadComponent");
static_assert(offsetof(UserWidgetBase_LoadComponent, Param_Class) == 0x000000, "Member 'UserWidgetBase_LoadComponent::Param_Class' has a wrong offset!");
static_assert(offsetof(UserWidgetBase_LoadComponent, Parent) == 0x000008, "Member 'UserWidgetBase_LoadComponent::Parent' has a wrong offset!");
static_assert(offsetof(UserWidgetBase_LoadComponent, ReturnValue) == 0x000010, "Member 'UserWidgetBase_LoadComponent::ReturnValue' has a wrong offset!");

// Function TGFFramework.UserWidgetBase.LoadComponentBySoftPath
// 0x0020 (0x0020 - 0x0000)
struct UserWidgetBase_LoadComponentBySoftPath final
{
public:
	class FString                                 SoftPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetBase_LoadComponentBySoftPath) == 0x000008, "Wrong alignment on UserWidgetBase_LoadComponentBySoftPath");
static_assert(sizeof(UserWidgetBase_LoadComponentBySoftPath) == 0x000020, "Wrong size on UserWidgetBase_LoadComponentBySoftPath");
static_assert(offsetof(UserWidgetBase_LoadComponentBySoftPath, SoftPath) == 0x000000, "Member 'UserWidgetBase_LoadComponentBySoftPath::SoftPath' has a wrong offset!");
static_assert(offsetof(UserWidgetBase_LoadComponentBySoftPath, Parent) == 0x000010, "Member 'UserWidgetBase_LoadComponentBySoftPath::Parent' has a wrong offset!");
static_assert(offsetof(UserWidgetBase_LoadComponentBySoftPath, ReturnValue) == 0x000018, "Member 'UserWidgetBase_LoadComponentBySoftPath::ReturnValue' has a wrong offset!");

// Function TGFFramework.UserWidgetBase.SetLocText
// 0x0020 (0x0020 - 0x0000)
struct UserWidgetBase_SetLocText final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TableId;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetBase_SetLocText) == 0x000008, "Wrong alignment on UserWidgetBase_SetLocText");
static_assert(sizeof(UserWidgetBase_SetLocText) == 0x000020, "Wrong size on UserWidgetBase_SetLocText");
static_assert(offsetof(UserWidgetBase_SetLocText, Widget) == 0x000000, "Member 'UserWidgetBase_SetLocText::Widget' has a wrong offset!");
static_assert(offsetof(UserWidgetBase_SetLocText, TableId) == 0x000008, "Member 'UserWidgetBase_SetLocText::TableId' has a wrong offset!");
static_assert(offsetof(UserWidgetBase_SetLocText, Key) == 0x000010, "Member 'UserWidgetBase_SetLocText::Key' has a wrong offset!");

// Function TGFFramework.UserWidgetPanel.OnUserKeyDown
// 0x00F8 (0x00F8 - 0x0000)
struct UserWidgetPanel_OnUserKeyDown final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetPanel_OnUserKeyDown) == 0x000008, "Wrong alignment on UserWidgetPanel_OnUserKeyDown");
static_assert(sizeof(UserWidgetPanel_OnUserKeyDown) == 0x0000F8, "Wrong size on UserWidgetPanel_OnUserKeyDown");
static_assert(offsetof(UserWidgetPanel_OnUserKeyDown, InKeyEvent) == 0x000000, "Member 'UserWidgetPanel_OnUserKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(UserWidgetPanel_OnUserKeyDown, ReturnValue) == 0x000040, "Member 'UserWidgetPanel_OnUserKeyDown::ReturnValue' has a wrong offset!");

// Function TGFFramework.UserWidgetPanel.OnUserKeyUp
// 0x00F8 (0x00F8 - 0x0000)
struct UserWidgetPanel_OnUserKeyUp final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetPanel_OnUserKeyUp) == 0x000008, "Wrong alignment on UserWidgetPanel_OnUserKeyUp");
static_assert(sizeof(UserWidgetPanel_OnUserKeyUp) == 0x0000F8, "Wrong size on UserWidgetPanel_OnUserKeyUp");
static_assert(offsetof(UserWidgetPanel_OnUserKeyUp, InKeyEvent) == 0x000000, "Member 'UserWidgetPanel_OnUserKeyUp::InKeyEvent' has a wrong offset!");
static_assert(offsetof(UserWidgetPanel_OnUserKeyUp, ReturnValue) == 0x000040, "Member 'UserWidgetPanel_OnUserKeyUp::ReturnValue' has a wrong offset!");

// Function TGFFramework.UserWidgetPanel.OnUserMouseButtonDown
// 0x0150 (0x0150 - 0x0000)
struct UserWidgetPanel_OnUserMouseButtonDown final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x0098(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetPanel_OnUserMouseButtonDown) == 0x000008, "Wrong alignment on UserWidgetPanel_OnUserMouseButtonDown");
static_assert(sizeof(UserWidgetPanel_OnUserMouseButtonDown) == 0x000150, "Wrong size on UserWidgetPanel_OnUserMouseButtonDown");
static_assert(offsetof(UserWidgetPanel_OnUserMouseButtonDown, MouseEvent) == 0x000000, "Member 'UserWidgetPanel_OnUserMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(UserWidgetPanel_OnUserMouseButtonDown, ReturnValue) == 0x000098, "Member 'UserWidgetPanel_OnUserMouseButtonDown::ReturnValue' has a wrong offset!");

// Function TGFFramework.UserWidgetPanel.OnUserMouseButtonUp
// 0x0150 (0x0150 - 0x0000)
struct UserWidgetPanel_OnUserMouseButtonUp final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x0098(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetPanel_OnUserMouseButtonUp) == 0x000008, "Wrong alignment on UserWidgetPanel_OnUserMouseButtonUp");
static_assert(sizeof(UserWidgetPanel_OnUserMouseButtonUp) == 0x000150, "Wrong size on UserWidgetPanel_OnUserMouseButtonUp");
static_assert(offsetof(UserWidgetPanel_OnUserMouseButtonUp, MouseEvent) == 0x000000, "Member 'UserWidgetPanel_OnUserMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(UserWidgetPanel_OnUserMouseButtonUp, ReturnValue) == 0x000098, "Member 'UserWidgetPanel_OnUserMouseButtonUp::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFWindow.GetEventHandler
// 0x0018 (0x0018 - 0x0000)
struct TGFWindow_GetEventHandler final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFEventHandler*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindow_GetEventHandler) == 0x000008, "Wrong alignment on TGFWindow_GetEventHandler");
static_assert(sizeof(TGFWindow_GetEventHandler) == 0x000018, "Wrong size on TGFWindow_GetEventHandler");
static_assert(offsetof(TGFWindow_GetEventHandler, EventName) == 0x000000, "Member 'TGFWindow_GetEventHandler::EventName' has a wrong offset!");
static_assert(offsetof(TGFWindow_GetEventHandler, ReturnValue) == 0x000010, "Member 'TGFWindow_GetEventHandler::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFWindow.GetWindowManager
// 0x0008 (0x0008 - 0x0000)
struct TGFWindow_GetWindowManager final
{
public:
	class UTGFWindowManager*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindow_GetWindowManager) == 0x000008, "Wrong alignment on TGFWindow_GetWindowManager");
static_assert(sizeof(TGFWindow_GetWindowManager) == 0x000008, "Wrong size on TGFWindow_GetWindowManager");
static_assert(offsetof(TGFWindow_GetWindowManager, ReturnValue) == 0x000000, "Member 'TGFWindow_GetWindowManager::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFWindow.HandleVideoSettingModifiedResult
// 0x000C (0x000C - 0x0000)
struct TGFWindow_HandleVideoSettingModifiedResult final
{
public:
	uint8                                         Type;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResultValue;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessful;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFWindow_HandleVideoSettingModifiedResult) == 0x000004, "Wrong alignment on TGFWindow_HandleVideoSettingModifiedResult");
static_assert(sizeof(TGFWindow_HandleVideoSettingModifiedResult) == 0x00000C, "Wrong size on TGFWindow_HandleVideoSettingModifiedResult");
static_assert(offsetof(TGFWindow_HandleVideoSettingModifiedResult, Type) == 0x000000, "Member 'TGFWindow_HandleVideoSettingModifiedResult::Type' has a wrong offset!");
static_assert(offsetof(TGFWindow_HandleVideoSettingModifiedResult, ResultValue) == 0x000004, "Member 'TGFWindow_HandleVideoSettingModifiedResult::ResultValue' has a wrong offset!");
static_assert(offsetof(TGFWindow_HandleVideoSettingModifiedResult, bSuccessful) == 0x000008, "Member 'TGFWindow_HandleVideoSettingModifiedResult::bSuccessful' has a wrong offset!");

// Function TGFFramework.TGFWindow.ReceiveOnOpen
// 0x0008 (0x0008 - 0x0000)
struct TGFWindow_ReceiveOnOpen final
{
public:
	class UTGFWindowArgs*                         Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindow_ReceiveOnOpen) == 0x000008, "Wrong alignment on TGFWindow_ReceiveOnOpen");
static_assert(sizeof(TGFWindow_ReceiveOnOpen) == 0x000008, "Wrong size on TGFWindow_ReceiveOnOpen");
static_assert(offsetof(TGFWindow_ReceiveOnOpen, Args) == 0x000000, "Member 'TGFWindow_ReceiveOnOpen::Args' has a wrong offset!");

// Function TGFFramework.TGFWindow.ReceiveOnStreamingLevelReady
// 0x0008 (0x0008 - 0x0000)
struct TGFWindow_ReceiveOnStreamingLevelReady final
{
public:
	class UTGFLvStreamingNotifyArgs*              Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindow_ReceiveOnStreamingLevelReady) == 0x000008, "Wrong alignment on TGFWindow_ReceiveOnStreamingLevelReady");
static_assert(sizeof(TGFWindow_ReceiveOnStreamingLevelReady) == 0x000008, "Wrong size on TGFWindow_ReceiveOnStreamingLevelReady");
static_assert(offsetof(TGFWindow_ReceiveOnStreamingLevelReady, Args) == 0x000000, "Member 'TGFWindow_ReceiveOnStreamingLevelReady::Args' has a wrong offset!");

// Function TGFFramework.TGFWindow.SetOpenFromWindow
// 0x0008 (0x0008 - 0x0000)
struct TGFWindow_SetOpenFromWindow final
{
public:
	class UUserWidget*                            FromWindow;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindow_SetOpenFromWindow) == 0x000008, "Wrong alignment on TGFWindow_SetOpenFromWindow");
static_assert(sizeof(TGFWindow_SetOpenFromWindow) == 0x000008, "Wrong size on TGFWindow_SetOpenFromWindow");
static_assert(offsetof(TGFWindow_SetOpenFromWindow, FromWindow) == 0x000000, "Member 'TGFWindow_SetOpenFromWindow::FromWindow' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.BindToggleFullScreenDelegate
// 0x0030 (0x0030 - 0x0000)
struct TGFWindowManager_BindToggleFullScreenDelegate final
{
public:
	TSoftObjectPtr<class UTGFWindow>              Window;                                            // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_BindToggleFullScreenDelegate) == 0x000008, "Wrong alignment on TGFWindowManager_BindToggleFullScreenDelegate");
static_assert(sizeof(TGFWindowManager_BindToggleFullScreenDelegate) == 0x000030, "Wrong size on TGFWindowManager_BindToggleFullScreenDelegate");
static_assert(offsetof(TGFWindowManager_BindToggleFullScreenDelegate, Window) == 0x000000, "Member 'TGFWindowManager_BindToggleFullScreenDelegate::Window' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.CleanWindowWithout
// 0x0010 (0x0010 - 0x0000)
struct TGFWindowManager_CleanWindowWithout final
{
public:
	class FString                                 InClassName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_CleanWindowWithout) == 0x000008, "Wrong alignment on TGFWindowManager_CleanWindowWithout");
static_assert(sizeof(TGFWindowManager_CleanWindowWithout) == 0x000010, "Wrong size on TGFWindowManager_CleanWindowWithout");
static_assert(offsetof(TGFWindowManager_CleanWindowWithout, InClassName) == 0x000000, "Member 'TGFWindowManager_CleanWindowWithout::InClassName' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.CloseWindow
// 0x0010 (0x0010 - 0x0000)
struct TGFWindowManager_CloseWindow final
{
public:
	class UUserWidget*                            WindowPtr;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFWindowManager_CloseWindow) == 0x000008, "Wrong alignment on TGFWindowManager_CloseWindow");
static_assert(sizeof(TGFWindowManager_CloseWindow) == 0x000010, "Wrong size on TGFWindowManager_CloseWindow");
static_assert(offsetof(TGFWindowManager_CloseWindow, WindowPtr) == 0x000000, "Member 'TGFWindowManager_CloseWindow::WindowPtr' has a wrong offset!");
static_assert(offsetof(TGFWindowManager_CloseWindow, ReturnValue) == 0x000008, "Member 'TGFWindowManager_CloseWindow::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.CloseWindowBySoftPath
// 0x0018 (0x0018 - 0x0000)
struct TGFWindowManager_CloseWindowBySoftPath final
{
public:
	class FString                                 SoftPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFWindowManager_CloseWindowBySoftPath) == 0x000008, "Wrong alignment on TGFWindowManager_CloseWindowBySoftPath");
static_assert(sizeof(TGFWindowManager_CloseWindowBySoftPath) == 0x000018, "Wrong size on TGFWindowManager_CloseWindowBySoftPath");
static_assert(offsetof(TGFWindowManager_CloseWindowBySoftPath, SoftPath) == 0x000000, "Member 'TGFWindowManager_CloseWindowBySoftPath::SoftPath' has a wrong offset!");
static_assert(offsetof(TGFWindowManager_CloseWindowBySoftPath, ReturnValue) == 0x000010, "Member 'TGFWindowManager_CloseWindowBySoftPath::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.GetWindowBySoftPath
// 0x0018 (0x0018 - 0x0000)
struct TGFWindowManager_GetWindowBySoftPath final
{
public:
	class FString                                 SoftPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFWindow*                             ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_GetWindowBySoftPath) == 0x000008, "Wrong alignment on TGFWindowManager_GetWindowBySoftPath");
static_assert(sizeof(TGFWindowManager_GetWindowBySoftPath) == 0x000018, "Wrong size on TGFWindowManager_GetWindowBySoftPath");
static_assert(offsetof(TGFWindowManager_GetWindowBySoftPath, SoftPath) == 0x000000, "Member 'TGFWindowManager_GetWindowBySoftPath::SoftPath' has a wrong offset!");
static_assert(offsetof(TGFWindowManager_GetWindowBySoftPath, ReturnValue) == 0x000010, "Member 'TGFWindowManager_GetWindowBySoftPath::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.IsUiCamera
// 0x0001 (0x0001 - 0x0000)
struct TGFWindowManager_IsUiCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_IsUiCamera) == 0x000001, "Wrong alignment on TGFWindowManager_IsUiCamera");
static_assert(sizeof(TGFWindowManager_IsUiCamera) == 0x000001, "Wrong size on TGFWindowManager_IsUiCamera");
static_assert(offsetof(TGFWindowManager_IsUiCamera, ReturnValue) == 0x000000, "Member 'TGFWindowManager_IsUiCamera::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.OnUserKeyDownEvent
// 0x0040 (0x0040 - 0x0000)
struct TGFWindowManager_OnUserKeyDownEvent final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_OnUserKeyDownEvent) == 0x000008, "Wrong alignment on TGFWindowManager_OnUserKeyDownEvent");
static_assert(sizeof(TGFWindowManager_OnUserKeyDownEvent) == 0x000040, "Wrong size on TGFWindowManager_OnUserKeyDownEvent");
static_assert(offsetof(TGFWindowManager_OnUserKeyDownEvent, InKeyEvent) == 0x000000, "Member 'TGFWindowManager_OnUserKeyDownEvent::InKeyEvent' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.OnUserKeyUpEvent
// 0x0040 (0x0040 - 0x0000)
struct TGFWindowManager_OnUserKeyUpEvent final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_OnUserKeyUpEvent) == 0x000008, "Wrong alignment on TGFWindowManager_OnUserKeyUpEvent");
static_assert(sizeof(TGFWindowManager_OnUserKeyUpEvent) == 0x000040, "Wrong size on TGFWindowManager_OnUserKeyUpEvent");
static_assert(offsetof(TGFWindowManager_OnUserKeyUpEvent, InKeyEvent) == 0x000000, "Member 'TGFWindowManager_OnUserKeyUpEvent::InKeyEvent' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.OnUserMouseButtonDownEvent
// 0x0098 (0x0098 - 0x0000)
struct TGFWindowManager_OnUserMouseButtonDownEvent final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_OnUserMouseButtonDownEvent) == 0x000008, "Wrong alignment on TGFWindowManager_OnUserMouseButtonDownEvent");
static_assert(sizeof(TGFWindowManager_OnUserMouseButtonDownEvent) == 0x000098, "Wrong size on TGFWindowManager_OnUserMouseButtonDownEvent");
static_assert(offsetof(TGFWindowManager_OnUserMouseButtonDownEvent, MouseEvent) == 0x000000, "Member 'TGFWindowManager_OnUserMouseButtonDownEvent::MouseEvent' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.OnUserMouseButtonUpEvent
// 0x0098 (0x0098 - 0x0000)
struct TGFWindowManager_OnUserMouseButtonUpEvent final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_OnUserMouseButtonUpEvent) == 0x000008, "Wrong alignment on TGFWindowManager_OnUserMouseButtonUpEvent");
static_assert(sizeof(TGFWindowManager_OnUserMouseButtonUpEvent) == 0x000098, "Wrong size on TGFWindowManager_OnUserMouseButtonUpEvent");
static_assert(offsetof(TGFWindowManager_OnUserMouseButtonUpEvent, MouseEvent) == 0x000000, "Member 'TGFWindowManager_OnUserMouseButtonUpEvent::MouseEvent' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.OpenWindow
// 0x0048 (0x0048 - 0x0000)
struct TGFWindowManager_OpenWindow final
{
public:
	TSoftClassPtr<class UClass>                   WindowSoftClass;                                   // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFWindowArgs*                         Args;                                              // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnique;                                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTGFWindow*                             ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_OpenWindow) == 0x000008, "Wrong alignment on TGFWindowManager_OpenWindow");
static_assert(sizeof(TGFWindowManager_OpenWindow) == 0x000048, "Wrong size on TGFWindowManager_OpenWindow");
static_assert(offsetof(TGFWindowManager_OpenWindow, WindowSoftClass) == 0x000000, "Member 'TGFWindowManager_OpenWindow::WindowSoftClass' has a wrong offset!");
static_assert(offsetof(TGFWindowManager_OpenWindow, Args) == 0x000030, "Member 'TGFWindowManager_OpenWindow::Args' has a wrong offset!");
static_assert(offsetof(TGFWindowManager_OpenWindow, bUnique) == 0x000038, "Member 'TGFWindowManager_OpenWindow::bUnique' has a wrong offset!");
static_assert(offsetof(TGFWindowManager_OpenWindow, ReturnValue) == 0x000040, "Member 'TGFWindowManager_OpenWindow::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.OpenWindowBySoftPath
// 0x0028 (0x0028 - 0x0000)
struct TGFWindowManager_OpenWindowBySoftPath final
{
public:
	class FString                                 SoftPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFWindowArgs*                         Args;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnique;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTGFWindow*                             ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_OpenWindowBySoftPath) == 0x000008, "Wrong alignment on TGFWindowManager_OpenWindowBySoftPath");
static_assert(sizeof(TGFWindowManager_OpenWindowBySoftPath) == 0x000028, "Wrong size on TGFWindowManager_OpenWindowBySoftPath");
static_assert(offsetof(TGFWindowManager_OpenWindowBySoftPath, SoftPath) == 0x000000, "Member 'TGFWindowManager_OpenWindowBySoftPath::SoftPath' has a wrong offset!");
static_assert(offsetof(TGFWindowManager_OpenWindowBySoftPath, Args) == 0x000010, "Member 'TGFWindowManager_OpenWindowBySoftPath::Args' has a wrong offset!");
static_assert(offsetof(TGFWindowManager_OpenWindowBySoftPath, bUnique) == 0x000018, "Member 'TGFWindowManager_OpenWindowBySoftPath::bUnique' has a wrong offset!");
static_assert(offsetof(TGFWindowManager_OpenWindowBySoftPath, ReturnValue) == 0x000020, "Member 'TGFWindowManager_OpenWindowBySoftPath::ReturnValue' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.ToggleCameraRegistration
// 0x0001 (0x0001 - 0x0000)
struct TGFWindowManager_ToggleCameraRegistration final
{
public:
	bool                                          bRegister;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_ToggleCameraRegistration) == 0x000001, "Wrong alignment on TGFWindowManager_ToggleCameraRegistration");
static_assert(sizeof(TGFWindowManager_ToggleCameraRegistration) == 0x000001, "Wrong size on TGFWindowManager_ToggleCameraRegistration");
static_assert(offsetof(TGFWindowManager_ToggleCameraRegistration, bRegister) == 0x000000, "Member 'TGFWindowManager_ToggleCameraRegistration::bRegister' has a wrong offset!");

// Function TGFFramework.TGFWindowManager.UnBindToggleFullScreenDelegate
// 0x0030 (0x0030 - 0x0000)
struct TGFWindowManager_UnBindToggleFullScreenDelegate final
{
public:
	TSoftObjectPtr<class UTGFWindow>              Window;                                            // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFWindowManager_UnBindToggleFullScreenDelegate) == 0x000008, "Wrong alignment on TGFWindowManager_UnBindToggleFullScreenDelegate");
static_assert(sizeof(TGFWindowManager_UnBindToggleFullScreenDelegate) == 0x000030, "Wrong size on TGFWindowManager_UnBindToggleFullScreenDelegate");
static_assert(offsetof(TGFWindowManager_UnBindToggleFullScreenDelegate, Window) == 0x000000, "Member 'TGFWindowManager_UnBindToggleFullScreenDelegate::Window' has a wrong offset!");

// Function TGFFramework.ToggleData.OnCheckBoxChanged
// 0x0001 (0x0001 - 0x0000)
struct ToggleData_OnCheckBoxChanged final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleData_OnCheckBoxChanged) == 0x000001, "Wrong alignment on ToggleData_OnCheckBoxChanged");
static_assert(sizeof(ToggleData_OnCheckBoxChanged) == 0x000001, "Wrong size on ToggleData_OnCheckBoxChanged");
static_assert(offsetof(ToggleData_OnCheckBoxChanged, bIsChecked) == 0x000000, "Member 'ToggleData_OnCheckBoxChanged::bIsChecked' has a wrong offset!");

// Function TGFFramework.UserWidgetBlueprintLibrary.CreateUserWidgetByPath
// 0x0020 (0x0020 - 0x0000)
struct UserWidgetBlueprintLibrary_CreateUserWidgetByPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 InWorld;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetBlueprintLibrary_CreateUserWidgetByPath) == 0x000008, "Wrong alignment on UserWidgetBlueprintLibrary_CreateUserWidgetByPath");
static_assert(sizeof(UserWidgetBlueprintLibrary_CreateUserWidgetByPath) == 0x000020, "Wrong size on UserWidgetBlueprintLibrary_CreateUserWidgetByPath");
static_assert(offsetof(UserWidgetBlueprintLibrary_CreateUserWidgetByPath, Path) == 0x000000, "Member 'UserWidgetBlueprintLibrary_CreateUserWidgetByPath::Path' has a wrong offset!");
static_assert(offsetof(UserWidgetBlueprintLibrary_CreateUserWidgetByPath, InWorld) == 0x000010, "Member 'UserWidgetBlueprintLibrary_CreateUserWidgetByPath::InWorld' has a wrong offset!");
static_assert(offsetof(UserWidgetBlueprintLibrary_CreateUserWidgetByPath, ReturnValue) == 0x000018, "Member 'UserWidgetBlueprintLibrary_CreateUserWidgetByPath::ReturnValue' has a wrong offset!");

// Function TGFFramework.UserWidgetBlueprintLibrary.CreateUserWidgetBySoftPath
// 0x0020 (0x0020 - 0x0000)
struct UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath final
{
public:
	class FString                                 SoftPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 InWorld;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath) == 0x000008, "Wrong alignment on UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath");
static_assert(sizeof(UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath) == 0x000020, "Wrong size on UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath");
static_assert(offsetof(UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath, SoftPath) == 0x000000, "Member 'UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath::SoftPath' has a wrong offset!");
static_assert(offsetof(UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath, InWorld) == 0x000010, "Member 'UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath::InWorld' has a wrong offset!");
static_assert(offsetof(UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath, ReturnValue) == 0x000018, "Member 'UserWidgetBlueprintLibrary_CreateUserWidgetBySoftPath::ReturnValue' has a wrong offset!");

// Function TGFFramework.UserWidgetBlueprintLibrary.FindUserWidgetBySoftPath
// 0x0028 (0x0028 - 0x0000)
struct UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath final
{
public:
	class FString                                 SoftPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpened;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 InWorld;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath) == 0x000008, "Wrong alignment on UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath");
static_assert(sizeof(UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath) == 0x000028, "Wrong size on UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath");
static_assert(offsetof(UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath, SoftPath) == 0x000000, "Member 'UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath::SoftPath' has a wrong offset!");
static_assert(offsetof(UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath, bOpened) == 0x000010, "Member 'UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath::bOpened' has a wrong offset!");
static_assert(offsetof(UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath, InWorld) == 0x000018, "Member 'UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath::InWorld' has a wrong offset!");
static_assert(offsetof(UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath, ReturnValue) == 0x000020, "Member 'UserWidgetBlueprintLibrary_FindUserWidgetBySoftPath::ReturnValue' has a wrong offset!");

// Function TGFFramework.UserWidgetBlueprintLibrary.OpenUserWidgetBySoftPath
// 0x0020 (0x0020 - 0x0000)
struct UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath final
{
public:
	class FString                                 SoftPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnique;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath) == 0x000008, "Wrong alignment on UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath");
static_assert(sizeof(UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath) == 0x000020, "Wrong size on UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath");
static_assert(offsetof(UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath, SoftPath) == 0x000000, "Member 'UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath::SoftPath' has a wrong offset!");
static_assert(offsetof(UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath, bUnique) == 0x000010, "Member 'UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath::bUnique' has a wrong offset!");
static_assert(offsetof(UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath, ReturnValue) == 0x000018, "Member 'UserWidgetBlueprintLibrary_OpenUserWidgetBySoftPath::ReturnValue' has a wrong offset!");

// Function TGFFramework.ImageCache.OnDownloadImageSuccess
// 0x0008 (0x0008 - 0x0000)
struct ImageCache_OnDownloadImageSuccess final
{
public:
	class UTexture2DDynamic*                      InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageCache_OnDownloadImageSuccess) == 0x000008, "Wrong alignment on ImageCache_OnDownloadImageSuccess");
static_assert(sizeof(ImageCache_OnDownloadImageSuccess) == 0x000008, "Wrong size on ImageCache_OnDownloadImageSuccess");
static_assert(offsetof(ImageCache_OnDownloadImageSuccess, InTexture) == 0x000000, "Member 'ImageCache_OnDownloadImageSuccess::InTexture' has a wrong offset!");

// Function TGFFramework.ImageCache.GetIsValid
// 0x0001 (0x0001 - 0x0000)
struct ImageCache_GetIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageCache_GetIsValid) == 0x000001, "Wrong alignment on ImageCache_GetIsValid");
static_assert(sizeof(ImageCache_GetIsValid) == 0x000001, "Wrong size on ImageCache_GetIsValid");
static_assert(offsetof(ImageCache_GetIsValid, ReturnValue) == 0x000000, "Member 'ImageCache_GetIsValid::ReturnValue' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KantanChartsSlate

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum KantanChartsSlate.EChartAxisPosition
// NumValues: 0x0004
enum class EChartAxisPosition : uint8
{
	LeftBottom                               = 0,
	RightTop                                 = 1,
	Floating                                 = 2,
	EChartAxisPosition_MAX                   = 3,
};

// Enum KantanChartsSlate.ECartesianScalingType
// NumValues: 0x0003
enum class ECartesianScalingType : uint8
{
	FixedScale                               = 0,
	FixedRange                               = 1,
	ECartesianScalingType_MAX                = 2,
};

// Enum KantanChartsSlate.ECartesianRangeBoundType
// NumValues: 0x0004
enum class ECartesianRangeBoundType : uint8
{
	FixedValue                               = 0,
	FitToData                                = 1,
	FitToDataRounded                         = 2,
	ECartesianRangeBoundType_MAX             = 3,
};

// Enum KantanChartsSlate.EKantanDataPointSize
// NumValues: 0x0004
enum class EKantanDataPointSize : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	EKantanDataPointSize_MAX                 = 3,
};

// Enum KantanChartsSlate.EKantanBarChartOrientation
// NumValues: 0x0003
enum class EKantanBarChartOrientation : uint8
{
	Vertical                                 = 0,
	Horizontal                               = 1,
	EKantanBarChartOrientation_MAX           = 2,
};

// Enum KantanChartsSlate.EKantanBarLabelPosition
// NumValues: 0x0004
enum class EKantanBarLabelPosition : uint8
{
	NoLabels                                 = 0,
	Standard                                 = 1,
	Overlaid                                 = 2,
	EKantanBarLabelPosition_MAX              = 3,
};

// Enum KantanChartsSlate.EKantanBarValueExtents
// NumValues: 0x0004
enum class EKantanBarValueExtents : uint8
{
	NoValueLines                             = 0,
	ZeroLineOnly                             = 1,
	ZeroAndMaxLines                          = 2,
	EKantanBarValueExtents_MAX               = 3,
};

// ScriptStruct KantanChartsSlate.CartesianAxisInstanceConfig
// 0x0004 (0x0004 - 0x0000)
struct FCartesianAxisInstanceConfig final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTitle;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowMarkers;                                      // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLabels;                                       // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCartesianAxisInstanceConfig) == 0x000001, "Wrong alignment on FCartesianAxisInstanceConfig");
static_assert(sizeof(FCartesianAxisInstanceConfig) == 0x000004, "Wrong size on FCartesianAxisInstanceConfig");
static_assert(offsetof(FCartesianAxisInstanceConfig, bEnabled) == 0x000000, "Member 'FCartesianAxisInstanceConfig::bEnabled' has a wrong offset!");
static_assert(offsetof(FCartesianAxisInstanceConfig, bShowTitle) == 0x000001, "Member 'FCartesianAxisInstanceConfig::bShowTitle' has a wrong offset!");
static_assert(offsetof(FCartesianAxisInstanceConfig, bShowMarkers) == 0x000002, "Member 'FCartesianAxisInstanceConfig::bShowMarkers' has a wrong offset!");
static_assert(offsetof(FCartesianAxisInstanceConfig, bShowLabels) == 0x000003, "Member 'FCartesianAxisInstanceConfig::bShowLabels' has a wrong offset!");

// ScriptStruct KantanChartsSlate.CartesianAxisConfig
// 0x0048 (0x0048 - 0x0000)
struct FCartesianAxisConfig final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Unit;                                              // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	float                                         MarkerSpacing;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValueDigits;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCartesianAxisInstanceConfig           LeftBottomAxis;                                    // 0x0038(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCartesianAxisInstanceConfig           RightTopAxis;                                      // 0x003C(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCartesianAxisInstanceConfig           FloatingAxis;                                      // 0x0040(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCartesianAxisConfig) == 0x000008, "Wrong alignment on FCartesianAxisConfig");
static_assert(sizeof(FCartesianAxisConfig) == 0x000048, "Wrong size on FCartesianAxisConfig");
static_assert(offsetof(FCartesianAxisConfig, Title) == 0x000000, "Member 'FCartesianAxisConfig::Title' has a wrong offset!");
static_assert(offsetof(FCartesianAxisConfig, Unit) == 0x000018, "Member 'FCartesianAxisConfig::Unit' has a wrong offset!");
static_assert(offsetof(FCartesianAxisConfig, MarkerSpacing) == 0x000030, "Member 'FCartesianAxisConfig::MarkerSpacing' has a wrong offset!");
static_assert(offsetof(FCartesianAxisConfig, MaxValueDigits) == 0x000034, "Member 'FCartesianAxisConfig::MaxValueDigits' has a wrong offset!");
static_assert(offsetof(FCartesianAxisConfig, LeftBottomAxis) == 0x000038, "Member 'FCartesianAxisConfig::LeftBottomAxis' has a wrong offset!");
static_assert(offsetof(FCartesianAxisConfig, RightTopAxis) == 0x00003C, "Member 'FCartesianAxisConfig::RightTopAxis' has a wrong offset!");
static_assert(offsetof(FCartesianAxisConfig, FloatingAxis) == 0x000040, "Member 'FCartesianAxisConfig::FloatingAxis' has a wrong offset!");

// ScriptStruct KantanChartsSlate.KantanChartStyle
// 0x0168 (0x0170 - 0x0008)
struct FKantanChartStyle : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Background;                                        // 0x0010(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           ChartLineColor;                                    // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChartLineThickness;                                // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         BaseFont;                                          // 0x00F8(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleFontSize;                                     // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AxisDescriptionFontSize;                           // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AxisValueFontSize;                                 // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FontColor;                                         // 0x015C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKantanChartStyle) == 0x000010, "Wrong alignment on FKantanChartStyle");
static_assert(sizeof(FKantanChartStyle) == 0x000170, "Wrong size on FKantanChartStyle");
static_assert(offsetof(FKantanChartStyle, Background) == 0x000010, "Member 'FKantanChartStyle::Background' has a wrong offset!");
static_assert(offsetof(FKantanChartStyle, ChartLineColor) == 0x0000E0, "Member 'FKantanChartStyle::ChartLineColor' has a wrong offset!");
static_assert(offsetof(FKantanChartStyle, ChartLineThickness) == 0x0000F0, "Member 'FKantanChartStyle::ChartLineThickness' has a wrong offset!");
static_assert(offsetof(FKantanChartStyle, BaseFont) == 0x0000F8, "Member 'FKantanChartStyle::BaseFont' has a wrong offset!");
static_assert(offsetof(FKantanChartStyle, TitleFontSize) == 0x000150, "Member 'FKantanChartStyle::TitleFontSize' has a wrong offset!");
static_assert(offsetof(FKantanChartStyle, AxisDescriptionFontSize) == 0x000154, "Member 'FKantanChartStyle::AxisDescriptionFontSize' has a wrong offset!");
static_assert(offsetof(FKantanChartStyle, AxisValueFontSize) == 0x000158, "Member 'FKantanChartStyle::AxisValueFontSize' has a wrong offset!");
static_assert(offsetof(FKantanChartStyle, FontColor) == 0x00015C, "Member 'FKantanChartStyle::FontColor' has a wrong offset!");

// ScriptStruct KantanChartsSlate.KantanBarChartStyle
// 0x0010 (0x0180 - 0x0170)
struct FKantanBarChartStyle final : public FKantanChartStyle
{
public:
	float                                         BarOpacity;                                        // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarOutlineOpacity;                                 // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarOutlineThickness;                               // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKantanBarChartStyle) == 0x000010, "Wrong alignment on FKantanBarChartStyle");
static_assert(sizeof(FKantanBarChartStyle) == 0x000180, "Wrong size on FKantanBarChartStyle");
static_assert(offsetof(FKantanBarChartStyle, BarOpacity) == 0x000170, "Member 'FKantanBarChartStyle::BarOpacity' has a wrong offset!");
static_assert(offsetof(FKantanBarChartStyle, BarOutlineOpacity) == 0x000174, "Member 'FKantanBarChartStyle::BarOutlineOpacity' has a wrong offset!");
static_assert(offsetof(FKantanBarChartStyle, BarOutlineThickness) == 0x000178, "Member 'FKantanBarChartStyle::BarOutlineThickness' has a wrong offset!");

// ScriptStruct KantanChartsSlate.KantanCartesianChartStyle
// 0x0010 (0x0180 - 0x0170)
struct FKantanCartesianChartStyle final : public FKantanChartStyle
{
public:
	float                                         DataOpacity;                                       // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DataLineThickness;                                 // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKantanCartesianChartStyle) == 0x000010, "Wrong alignment on FKantanCartesianChartStyle");
static_assert(sizeof(FKantanCartesianChartStyle) == 0x000180, "Wrong size on FKantanCartesianChartStyle");
static_assert(offsetof(FKantanCartesianChartStyle, DataOpacity) == 0x000170, "Member 'FKantanCartesianChartStyle::DataOpacity' has a wrong offset!");
static_assert(offsetof(FKantanCartesianChartStyle, DataLineThickness) == 0x000174, "Member 'FKantanCartesianChartStyle::DataLineThickness' has a wrong offset!");

// ScriptStruct KantanChartsSlate.CartesianAxisRange
// 0x0008 (0x0008 - 0x0000)
struct FCartesianAxisRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCartesianAxisRange) == 0x000004, "Wrong alignment on FCartesianAxisRange");
static_assert(sizeof(FCartesianAxisRange) == 0x000008, "Wrong size on FCartesianAxisRange");
static_assert(offsetof(FCartesianAxisRange, Min) == 0x000000, "Member 'FCartesianAxisRange::Min' has a wrong offset!");
static_assert(offsetof(FCartesianAxisRange, Max) == 0x000004, "Member 'FCartesianAxisRange::Max' has a wrong offset!");

// ScriptStruct KantanChartsSlate.KantanCartesianPlotScale
// 0x0038 (0x0038 - 0x0000)
struct FKantanCartesianPlotScale final
{
public:
	ECartesianScalingType                         Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Scale;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FocalCoordinates;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCartesianAxisRange                    RangeX;                                            // 0x0028(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCartesianAxisRange                    RangeY;                                            // 0x0030(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKantanCartesianPlotScale) == 0x000008, "Wrong alignment on FKantanCartesianPlotScale");
static_assert(sizeof(FKantanCartesianPlotScale) == 0x000038, "Wrong size on FKantanCartesianPlotScale");
static_assert(offsetof(FKantanCartesianPlotScale, Type) == 0x000000, "Member 'FKantanCartesianPlotScale::Type' has a wrong offset!");
static_assert(offsetof(FKantanCartesianPlotScale, Scale) == 0x000008, "Member 'FKantanCartesianPlotScale::Scale' has a wrong offset!");
static_assert(offsetof(FKantanCartesianPlotScale, FocalCoordinates) == 0x000018, "Member 'FKantanCartesianPlotScale::FocalCoordinates' has a wrong offset!");
static_assert(offsetof(FKantanCartesianPlotScale, RangeX) == 0x000028, "Member 'FKantanCartesianPlotScale::RangeX' has a wrong offset!");
static_assert(offsetof(FKantanCartesianPlotScale, RangeY) == 0x000030, "Member 'FKantanCartesianPlotScale::RangeY' has a wrong offset!");

// ScriptStruct KantanChartsSlate.CartesianRangeBound
// 0x0008 (0x0008 - 0x0000)
struct FCartesianRangeBound final
{
public:
	ECartesianRangeBoundType                      Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedBoundValue;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCartesianRangeBound) == 0x000004, "Wrong alignment on FCartesianRangeBound");
static_assert(sizeof(FCartesianRangeBound) == 0x000008, "Wrong size on FCartesianRangeBound");
static_assert(offsetof(FCartesianRangeBound, Type) == 0x000000, "Member 'FCartesianRangeBound::Type' has a wrong offset!");
static_assert(offsetof(FCartesianRangeBound, FixedBoundValue) == 0x000004, "Member 'FCartesianRangeBound::FixedBoundValue' has a wrong offset!");

// ScriptStruct KantanChartsSlate.KantanCategoryStyle
// 0x0018 (0x0018 - 0x0000)
struct FKantanCategoryStyle final
{
public:
	class FName                                   CategoryStyleId;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKantanCategoryStyle) == 0x000004, "Wrong alignment on FKantanCategoryStyle");
static_assert(sizeof(FKantanCategoryStyle) == 0x000018, "Wrong size on FKantanCategoryStyle");
static_assert(offsetof(FKantanCategoryStyle, CategoryStyleId) == 0x000000, "Member 'FKantanCategoryStyle::CategoryStyleId' has a wrong offset!");
static_assert(offsetof(FKantanCategoryStyle, Color) == 0x000008, "Member 'FKantanCategoryStyle::Color' has a wrong offset!");

// ScriptStruct KantanChartsSlate.KantanSeriesStyle
// 0x0020 (0x0020 - 0x0000)
struct FKantanSeriesStyle final
{
public:
	class FName                                   StyleId;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKantanPointStyle*                      PointStyle;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKantanSeriesStyle) == 0x000008, "Wrong alignment on FKantanSeriesStyle");
static_assert(sizeof(FKantanSeriesStyle) == 0x000020, "Wrong size on FKantanSeriesStyle");
static_assert(offsetof(FKantanSeriesStyle, StyleId) == 0x000000, "Member 'FKantanSeriesStyle::StyleId' has a wrong offset!");
static_assert(offsetof(FKantanSeriesStyle, PointStyle) == 0x000008, "Member 'FKantanSeriesStyle::PointStyle' has a wrong offset!");
static_assert(offsetof(FKantanSeriesStyle, Color) == 0x000010, "Member 'FKantanSeriesStyle::Color' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioModulation

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "AudioExtensions_classes.hpp"
#include "AudioModulation_structs.hpp"


namespace SDK
{

// Class AudioModulation.AudioModulationStyle
// 0x0000 (0x0028 - 0x0028)
class UAudioModulationStyle final : public UBlueprintFunctionLibrary
{
public:
	static const struct FColor GetControlBusColor();
	static const struct FColor GetControlBusMixColor();
	static const struct FColor GetModulationGeneratorColor();
	static const struct FColor GetParameterColor();
	static const struct FColor GetPatchColor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioModulationStyle">();
	}
	static class UAudioModulationStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioModulationStyle>();
	}
};
static_assert(alignof(UAudioModulationStyle) == 0x000008, "Wrong alignment on UAudioModulationStyle");
static_assert(sizeof(UAudioModulationStyle) == 0x000028, "Wrong size on UAudioModulationStyle");

// Class AudioModulation.AudioModulationSettings
// 0x0010 (0x0048 - 0x0038)
class UAudioModulationSettings final : public UDeveloperSettings
{
public:
	TArray<struct FSoftObjectPath>                Parameters;                                        // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioModulationSettings">();
	}
	static class UAudioModulationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioModulationSettings>();
	}
};
static_assert(alignof(UAudioModulationSettings) == 0x000008, "Wrong alignment on UAudioModulationSettings");
static_assert(sizeof(UAudioModulationSettings) == 0x000048, "Wrong size on UAudioModulationSettings");
static_assert(offsetof(UAudioModulationSettings, Parameters) == 0x000038, "Member 'UAudioModulationSettings::Parameters' has a wrong offset!");

// Class AudioModulation.AudioModulationStatics
// 0x0000 (0x0028 - 0x0028)
class UAudioModulationStatics final : public UBlueprintFunctionLibrary
{
public:
	static void ActivateBus(const class UObject* WorldContextObject, class USoundControlBus* Bus);
	static void ActivateBusMix(const class UObject* WorldContextObject, class USoundControlBusMix* Mix);
	static void ActivateGenerator(const class UObject* WorldContextObject, class USoundModulationGenerator* Generator);
	static void ClearAllGlobalBusMixValues(const class UObject* WorldContextObject, float FadeTime);
	static void ClearGlobalBusMixValue(const class UObject* WorldContextObject, class USoundControlBus* Bus, float FadeTime);
	static class USoundControlBus* CreateBus(class UObject* WorldContextObject, class FName Param_Name, class USoundModulationParameter* Parameter, bool Activate);
	static class USoundControlBusMix* CreateBusMix(class UObject* WorldContextObject, class FName Param_Name, const TArray<struct FSoundControlBusMixStage>& Stages, bool Activate);
	static struct FSoundControlBusMixStage CreateBusMixStage(const class UObject* WorldContextObject, class USoundControlBus* Bus, float Value, float AttackTime, float ReleaseTime);
	static void DeactivateBus(const class UObject* WorldContextObject, class USoundControlBus* Bus);
	static void DeactivateBusMix(const class UObject* WorldContextObject, class USoundControlBusMix* Mix);
	static void DeactivateGenerator(const class UObject* WorldContextObject, class USoundModulationGenerator* Generator);
	static TArray<struct FSoundControlBusMixStage> LoadMixFromProfile(const class UObject* WorldContextObject, class USoundControlBusMix* Mix, bool bActivate, int32 ProfileIndex);
	static void SaveMixToProfile(const class UObject* WorldContextObject, class USoundControlBusMix* Mix, int32 ProfileIndex);
	static void SetGlobalBusMixValue(const class UObject* WorldContextObject, class USoundControlBus* Bus, float Value, float FadeTime);
	static void UpdateMix(const class UObject* WorldContextObject, class USoundControlBusMix* Mix, const TArray<struct FSoundControlBusMixStage>& Stages, float FadeTime);
	static void UpdateMixByFilter(const class UObject* WorldContextObject, class USoundControlBusMix* Mix, const class FString& AddressFilter, TSubclassOf<class USoundModulationParameter> ParamClassFilter, class USoundModulationParameter* ParamFilter, float Value, float FadeTime);
	static void UpdateMixFromObject(const class UObject* WorldContextObject, class USoundControlBusMix* Mix, float FadeTime);
	static void UpdateModulator(const class UObject* WorldContextObject, class USoundModulatorBase* Modulator);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioModulationStatics">();
	}
	static class UAudioModulationStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioModulationStatics>();
	}
};
static_assert(alignof(UAudioModulationStatics) == 0x000008, "Wrong alignment on UAudioModulationStatics");
static_assert(sizeof(UAudioModulationStatics) == 0x000028, "Wrong size on UAudioModulationStatics");

// Class AudioModulation.SoundModulationGenerator
// 0x0000 (0x0030 - 0x0030)
class USoundModulationGenerator : public USoundModulatorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationGenerator">();
	}
	static class USoundModulationGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationGenerator>();
	}
};
static_assert(alignof(USoundModulationGenerator) == 0x000008, "Wrong alignment on USoundModulationGenerator");
static_assert(sizeof(USoundModulationGenerator) == 0x000030, "Wrong size on USoundModulationGenerator");

// Class AudioModulation.SoundModulationGeneratorEnvelopeFollower
// 0x0020 (0x0050 - 0x0030)
class USoundModulationGeneratorEnvelopeFollower final : public USoundModulationGenerator
{
public:
	struct FEnvelopeFollowerGeneratorParams       Params;                                            // 0x0030(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationGeneratorEnvelopeFollower">();
	}
	static class USoundModulationGeneratorEnvelopeFollower* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationGeneratorEnvelopeFollower>();
	}
};
static_assert(alignof(USoundModulationGeneratorEnvelopeFollower) == 0x000008, "Wrong alignment on USoundModulationGeneratorEnvelopeFollower");
static_assert(sizeof(USoundModulationGeneratorEnvelopeFollower) == 0x000050, "Wrong size on USoundModulationGeneratorEnvelopeFollower");
static_assert(offsetof(USoundModulationGeneratorEnvelopeFollower, Params) == 0x000030, "Member 'USoundModulationGeneratorEnvelopeFollower::Params' has a wrong offset!");

// Class AudioModulation.SoundModulationGeneratorLFO
// 0x0020 (0x0050 - 0x0030)
class USoundModulationGeneratorLFO final : public USoundModulationGenerator
{
public:
	struct FSoundModulationLFOParams              Params;                                            // 0x0030(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationGeneratorLFO">();
	}
	static class USoundModulationGeneratorLFO* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationGeneratorLFO>();
	}
};
static_assert(alignof(USoundModulationGeneratorLFO) == 0x000008, "Wrong alignment on USoundModulationGeneratorLFO");
static_assert(sizeof(USoundModulationGeneratorLFO) == 0x000050, "Wrong size on USoundModulationGeneratorLFO");
static_assert(offsetof(USoundModulationGeneratorLFO, Params) == 0x000030, "Member 'USoundModulationGeneratorLFO::Params' has a wrong offset!");

// Class AudioModulation.SoundControlBus
// 0x0030 (0x0060 - 0x0030)
class USoundControlBus final : public USoundModulatorBase
{
public:
	bool                                          bBypass;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Address;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundModulationGenerator*>      Generators;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class USoundModulationParameter*              Parameter;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundControlBus">();
	}
	static class USoundControlBus* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundControlBus>();
	}
};
static_assert(alignof(USoundControlBus) == 0x000008, "Wrong alignment on USoundControlBus");
static_assert(sizeof(USoundControlBus) == 0x000060, "Wrong size on USoundControlBus");
static_assert(offsetof(USoundControlBus, bBypass) == 0x000030, "Member 'USoundControlBus::bBypass' has a wrong offset!");
static_assert(offsetof(USoundControlBus, Address) == 0x000038, "Member 'USoundControlBus::Address' has a wrong offset!");
static_assert(offsetof(USoundControlBus, Generators) == 0x000048, "Member 'USoundControlBus::Generators' has a wrong offset!");
static_assert(offsetof(USoundControlBus, Parameter) == 0x000058, "Member 'USoundControlBus::Parameter' has a wrong offset!");

// Class AudioModulation.SoundControlBusMix
// 0x0018 (0x0040 - 0x0028)
class USoundControlBusMix final : public UObject
{
public:
	uint32                                        ProfileIndex;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoundControlBusMixStage>       MixStages;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void ActivateMix();
	void DeactivateAllMixes();
	void DeactivateMix();
	void LoadMixFromProfile();
	void SaveMixToProfile();
	void SoloMix();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundControlBusMix">();
	}
	static class USoundControlBusMix* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundControlBusMix>();
	}
};
static_assert(alignof(USoundControlBusMix) == 0x000008, "Wrong alignment on USoundControlBusMix");
static_assert(sizeof(USoundControlBusMix) == 0x000040, "Wrong size on USoundControlBusMix");
static_assert(offsetof(USoundControlBusMix, ProfileIndex) == 0x000028, "Member 'USoundControlBusMix::ProfileIndex' has a wrong offset!");
static_assert(offsetof(USoundControlBusMix, MixStages) == 0x000030, "Member 'USoundControlBusMix::MixStages' has a wrong offset!");

// Class AudioModulation.SoundModulationParameter
// 0x0010 (0x0038 - 0x0028)
class USoundModulationParameter : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundModulationParameterSettings      Settings;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationParameter">();
	}
	static class USoundModulationParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationParameter>();
	}
};
static_assert(alignof(USoundModulationParameter) == 0x000008, "Wrong alignment on USoundModulationParameter");
static_assert(sizeof(USoundModulationParameter) == 0x000038, "Wrong size on USoundModulationParameter");
static_assert(offsetof(USoundModulationParameter, Settings) == 0x000030, "Member 'USoundModulationParameter::Settings' has a wrong offset!");

// Class AudioModulation.SoundModulationParameterScaled
// 0x0008 (0x0040 - 0x0038)
class USoundModulationParameterScaled final : public USoundModulationParameter
{
public:
	float                                         UnitMin;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitMax;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationParameterScaled">();
	}
	static class USoundModulationParameterScaled* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationParameterScaled>();
	}
};
static_assert(alignof(USoundModulationParameterScaled) == 0x000008, "Wrong alignment on USoundModulationParameterScaled");
static_assert(sizeof(USoundModulationParameterScaled) == 0x000040, "Wrong size on USoundModulationParameterScaled");
static_assert(offsetof(USoundModulationParameterScaled, UnitMin) == 0x000038, "Member 'USoundModulationParameterScaled::UnitMin' has a wrong offset!");
static_assert(offsetof(USoundModulationParameterScaled, UnitMax) == 0x00003C, "Member 'USoundModulationParameterScaled::UnitMax' has a wrong offset!");

// Class AudioModulation.SoundModulationParameterFrequencyBase
// 0x0000 (0x0038 - 0x0038)
class USoundModulationParameterFrequencyBase : public USoundModulationParameter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationParameterFrequencyBase">();
	}
	static class USoundModulationParameterFrequencyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationParameterFrequencyBase>();
	}
};
static_assert(alignof(USoundModulationParameterFrequencyBase) == 0x000008, "Wrong alignment on USoundModulationParameterFrequencyBase");
static_assert(sizeof(USoundModulationParameterFrequencyBase) == 0x000038, "Wrong size on USoundModulationParameterFrequencyBase");

// Class AudioModulation.SoundModulationParameterFrequency
// 0x0008 (0x0040 - 0x0038)
class USoundModulationParameterFrequency final : public USoundModulationParameterFrequencyBase
{
public:
	float                                         UnitMin;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitMax;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationParameterFrequency">();
	}
	static class USoundModulationParameterFrequency* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationParameterFrequency>();
	}
};
static_assert(alignof(USoundModulationParameterFrequency) == 0x000008, "Wrong alignment on USoundModulationParameterFrequency");
static_assert(sizeof(USoundModulationParameterFrequency) == 0x000040, "Wrong size on USoundModulationParameterFrequency");
static_assert(offsetof(USoundModulationParameterFrequency, UnitMin) == 0x000038, "Member 'USoundModulationParameterFrequency::UnitMin' has a wrong offset!");
static_assert(offsetof(USoundModulationParameterFrequency, UnitMax) == 0x00003C, "Member 'USoundModulationParameterFrequency::UnitMax' has a wrong offset!");

// Class AudioModulation.SoundModulationParameterFilterFrequency
// 0x0000 (0x0038 - 0x0038)
class USoundModulationParameterFilterFrequency : public USoundModulationParameterFrequencyBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationParameterFilterFrequency">();
	}
	static class USoundModulationParameterFilterFrequency* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationParameterFilterFrequency>();
	}
};
static_assert(alignof(USoundModulationParameterFilterFrequency) == 0x000008, "Wrong alignment on USoundModulationParameterFilterFrequency");
static_assert(sizeof(USoundModulationParameterFilterFrequency) == 0x000038, "Wrong size on USoundModulationParameterFilterFrequency");

// Class AudioModulation.SoundModulationParameterLPFFrequency
// 0x0000 (0x0038 - 0x0038)
class USoundModulationParameterLPFFrequency final : public USoundModulationParameterFilterFrequency
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationParameterLPFFrequency">();
	}
	static class USoundModulationParameterLPFFrequency* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationParameterLPFFrequency>();
	}
};
static_assert(alignof(USoundModulationParameterLPFFrequency) == 0x000008, "Wrong alignment on USoundModulationParameterLPFFrequency");
static_assert(sizeof(USoundModulationParameterLPFFrequency) == 0x000038, "Wrong size on USoundModulationParameterLPFFrequency");

// Class AudioModulation.SoundModulationParameterHPFFrequency
// 0x0000 (0x0038 - 0x0038)
class USoundModulationParameterHPFFrequency final : public USoundModulationParameterFilterFrequency
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationParameterHPFFrequency">();
	}
	static class USoundModulationParameterHPFFrequency* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationParameterHPFFrequency>();
	}
};
static_assert(alignof(USoundModulationParameterHPFFrequency) == 0x000008, "Wrong alignment on USoundModulationParameterHPFFrequency");
static_assert(sizeof(USoundModulationParameterHPFFrequency) == 0x000038, "Wrong size on USoundModulationParameterHPFFrequency");

// Class AudioModulation.SoundModulationParameterBipolar
// 0x0008 (0x0040 - 0x0038)
class USoundModulationParameterBipolar final : public USoundModulationParameter
{
public:
	float                                         UnitRange;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationParameterBipolar">();
	}
	static class USoundModulationParameterBipolar* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationParameterBipolar>();
	}
};
static_assert(alignof(USoundModulationParameterBipolar) == 0x000008, "Wrong alignment on USoundModulationParameterBipolar");
static_assert(sizeof(USoundModulationParameterBipolar) == 0x000040, "Wrong size on USoundModulationParameterBipolar");
static_assert(offsetof(USoundModulationParameterBipolar, UnitRange) == 0x000038, "Member 'USoundModulationParameterBipolar::UnitRange' has a wrong offset!");

// Class AudioModulation.SoundModulationParameterVolume
// 0x0008 (0x0040 - 0x0038)
class USoundModulationParameterVolume final : public USoundModulationParameter
{
public:
	float                                         MinVolume;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationParameterVolume">();
	}
	static class USoundModulationParameterVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationParameterVolume>();
	}
};
static_assert(alignof(USoundModulationParameterVolume) == 0x000008, "Wrong alignment on USoundModulationParameterVolume");
static_assert(sizeof(USoundModulationParameterVolume) == 0x000040, "Wrong size on USoundModulationParameterVolume");
static_assert(offsetof(USoundModulationParameterVolume, MinVolume) == 0x000038, "Member 'USoundModulationParameterVolume::MinVolume' has a wrong offset!");

// Class AudioModulation.SoundModulationPatch
// 0x0020 (0x0050 - 0x0030)
class USoundModulationPatch final : public USoundModulatorBase
{
public:
	struct FSoundControlModulationPatch           PatchSettings;                                     // 0x0030(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundModulationPatch">();
	}
	static class USoundModulationPatch* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundModulationPatch>();
	}
};
static_assert(alignof(USoundModulationPatch) == 0x000008, "Wrong alignment on USoundModulationPatch");
static_assert(sizeof(USoundModulationPatch) == 0x000050, "Wrong size on USoundModulationPatch");
static_assert(offsetof(USoundModulationPatch, PatchSettings) == 0x000030, "Member 'USoundModulationPatch::PatchSettings' has a wrong offset!");

}


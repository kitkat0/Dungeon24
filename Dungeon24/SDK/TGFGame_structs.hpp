#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TGFGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "TGFBattleProtocol_structs.hpp"
#include "Engine_structs.hpp"
#include "LyraGame_structs.hpp"


namespace SDK
{

// Enum TGFGame.EAlertResult
// NumValues: 0x0003
enum class EAlertResult : uint8
{
	Confirmed                                = 0,
	Unknown                                  = 1,
	EAlertResult_MAX                         = 2,
};

// Enum TGFGame.EConfirmResult
// NumValues: 0x0004
enum class EConfirmResult : uint8
{
	Confirmed                                = 0,
	Cancelled                                = 1,
	Unknown                                  = 2,
	EConfirmResult_MAX                       = 3,
};

// Enum TGFGame.EAppState
// NumValues: 0x0005
enum class EAppState : uint8
{
	None                                     = 0,
	Login                                    = 1,
	Hall                                     = 2,
	Battle                                   = 3,
	Max                                      = 4,
};

// Enum TGFGame.EHallState
// NumValues: 0x0007
enum class EHallState : uint8
{
	HallEmpty                                = 0,
	HallMain                                 = 1,
	CreateRole                               = 2,
	Wardrobe                                 = 3,
	StoreDetail                              = 4,
	UICover                                  = 5,
	Max                                      = 6,
};

// Enum TGFGame.ETGFBattlePassTaskType
// NumValues: 0x0004
enum class ETGFBattlePassTaskType : uint8
{
	Normal                                   = 0,
	Dispatch                                 = 1,
	Sealed                                   = 2,
	ETGFBattlePassTaskType_MAX               = 3,
};

// Enum TGFGame.EBattleType
// NumValues: 0x0004
enum class EBattleType : uint8
{
	None                                     = 0,
	Local                                    = 1,
	Remote                                   = 2,
	EBattleType_MAX                          = 3,
};

// Enum TGFGame.ETgfFusionStateType
// NumValues: 0x0005
enum class ETgfFusionStateType : uint8
{
	None                                     = 0,
	Unlock                                   = 1,
	Running                                  = 2,
	Finish                                   = 3,
	ETgfFusionStateType_MAX                  = 4,
};

// Enum TGFGame.EMarqueeType
// NumValues: 0x0006
enum class EMarqueeType : uint8
{
	E_MARQUEE_TYPE_INVALID                   = 0,
	E_MARQUEE_TYPE_LOW                       = 1,
	E_MARQUEE_TYPE_MID                       = 2,
	E_MARQUEE_TYPE_HIGH                      = 3,
	E_MARQUEE_TYPE_BATTLE                    = 4,
	E_MARQUEE_TYPE_MAX                       = 5,
};

// Enum TGFGame.EMatchState
// NumValues: 0x0004
enum class EMatchState : uint8
{
	None                                     = 0,
	Matching                                 = 1,
	Matched                                  = 2,
	EMatchState_MAX                          = 3,
};

// Enum TGFGame.ENMatchWindowStatus
// NumValues: 0x0004
enum class ENMatchWindowStatus : uint8
{
	None                                     = 0,
	Matching                                 = 1,
	Matched                                  = 2,
	ENMatchWindowStatus_MAX                  = 3,
};

// Enum TGFGame.EPVPRoomMemberCamp
// NumValues: 0x0005
enum class EPVPRoomMemberCamp : uint8
{
	None                                     = 0,
	CampA                                    = 1,
	CampB                                    = 2,
	Watcher                                  = 3,
	EPVPRoomMemberCamp_MAX                   = 4,
};

// Enum TGFGame.ESocialToggleType
// NumValues: 0x000A
enum class ESocialToggleType : uint8
{
	E_SOCIAL_TOGGLE_INVALID                  = 0,
	E_SOCIAL_TOGGLE_FRIEND                   = 10,
	E_SOCIAL_TOGGLE_GAME_FRIEND              = 11,
	E_SOCIAL_TOGGLE_STEAM_FRIEND             = 12,
	E_SOCIAL_TOGGLE_FRIEND_APPLY             = 20,
	E_SOCIAL_TOGGLE_RECENT_PLAYER            = 30,
	E_SOCIAL_TOGGLE_MEMBER_SEARCH            = 40,
	E_SOCIAL_TOGGLE_QUICKLY_TEAM             = 41,
	E_SOCIAL_TOGGLE_RECRUIT                  = 42,
	E_SOCIAL_TOGGLE_MAX                      = 43,
};

// Enum TGFGame.ESearchPlayerTag
// NumValues: 0x0004
enum class ESearchPlayerTag : uint8
{
	E_INVALID                                = 0,
	E_SOCIAL                                 = 1,
	E_TEAM_INVITE                            = 2,
	E_MAX                                    = 3,
};

// Enum TGFGame.ECreateRoleFrom
// NumValues: 0x0004
enum class ECreateRoleFrom : uint8
{
	E_INVALID                                = 0,
	E_LOGIN                                  = 1,
	E_HALL                                   = 2,
	E_MAX                                    = 3,
};

// Enum TGFGame.ETeamRole
// NumValues: 0x0004
enum class ETeamRole : uint8
{
	None                                     = 0,
	Captain                                  = 1,
	Member                                   = 2,
	ETeamRole_MAX                            = 3,
};

// Enum TGFGame.EnRoleGenderType
// NumValues: 0x0004
enum class EnRoleGenderType : uint8
{
	EN_ROLE_GENDER_NONE                      = 0,
	EN_ROLE_GENDER_MALE                      = 1,
	EN_ROLE_GENDER_DEMALE                    = 2,
	EN_ROLE_GENDER_MAX                       = 3,
};

// Enum TGFGame.ETimeFormatType
// NumValues: 0x0005
enum class ETimeFormatType : uint8
{
	None                                     = 0,
	DateTime                                 = 1,
	TimeOnly                                 = 2,
	DateOnly                                 = 3,
	ETimeFormatType_MAX                      = 4,
};

// Enum TGFGame.ETradeBidOrderState
// NumValues: 0x0008
enum class ETradeBidOrderState : uint8
{
	None                                     = 0,
	Failed                                   = 1,
	CurrentlyWinning                         = 2,
	OutBid                                   = 3,
	Success                                  = 4,
	Processing                               = 5,
	OrderError                               = 6,
	ETradeBidOrderState_MAX                  = 7,
};

// Enum TGFGame.ETradeSaleOrderType
// NumValues: 0x0004
enum class ETradeSaleOrderType : uint8
{
	None                                     = 0,
	Hint                                     = 1,
	Auction                                  = 2,
	ETradeSaleOrderType_MAX                  = 3,
};

// Enum TGFGame.ETradeSaleOrderState
// NumValues: 0x0008
enum class ETradeSaleOrderState : uint8
{
	None                                     = 0,
	Trading                                  = 1,
	Expired                                  = 2,
	Cancel                                   = 3,
	SoldOut                                  = 4,
	Processing                               = 5,
	OrderError                               = 6,
	ETradeSaleOrderState_MAX                 = 7,
};

// Enum TGFGame.ETradeMarketId
// NumValues: 0x0004
enum class ETradeMarketId : uint8
{
	None                                     = 0,
	HomogenTrade                             = 1,
	Auction                                  = 2,
	ETradeMarketId_MAX                       = 3,
};

// ScriptStruct TGFGame.BannerConfig
// 0x0050 (0x0050 - 0x0000)
struct FBannerConfig final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BannerId;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnable;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortOrder;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartDateTime;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDateTime;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocalImagePath;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HttpImageUrl;                                      // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClickHref;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBannerConfig) == 0x000008, "Wrong alignment on FBannerConfig");
static_assert(sizeof(FBannerConfig) == 0x000050, "Wrong size on FBannerConfig");
static_assert(offsetof(FBannerConfig, bIsValid) == 0x000000, "Member 'FBannerConfig::bIsValid' has a wrong offset!");
static_assert(offsetof(FBannerConfig, BannerId) == 0x000004, "Member 'FBannerConfig::BannerId' has a wrong offset!");
static_assert(offsetof(FBannerConfig, bIsEnable) == 0x000008, "Member 'FBannerConfig::bIsEnable' has a wrong offset!");
static_assert(offsetof(FBannerConfig, SortOrder) == 0x00000C, "Member 'FBannerConfig::SortOrder' has a wrong offset!");
static_assert(offsetof(FBannerConfig, StartDateTime) == 0x000010, "Member 'FBannerConfig::StartDateTime' has a wrong offset!");
static_assert(offsetof(FBannerConfig, EndDateTime) == 0x000018, "Member 'FBannerConfig::EndDateTime' has a wrong offset!");
static_assert(offsetof(FBannerConfig, LocalImagePath) == 0x000020, "Member 'FBannerConfig::LocalImagePath' has a wrong offset!");
static_assert(offsetof(FBannerConfig, HttpImageUrl) == 0x000030, "Member 'FBannerConfig::HttpImageUrl' has a wrong offset!");
static_assert(offsetof(FBannerConfig, ClickHref) == 0x000040, "Member 'FBannerConfig::ClickHref' has a wrong offset!");

// ScriptStruct TGFGame.TGFItem
// 0x0058 (0x0058 - 0x0000)
struct FTGFItem final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guid;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expire_timepoint;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       Position;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFItem) == 0x000008, "Wrong alignment on FTGFItem");
static_assert(sizeof(FTGFItem) == 0x000058, "Wrong size on FTGFItem");
static_assert(offsetof(FTGFItem, Type_id) == 0x000000, "Member 'FTGFItem::Type_id' has a wrong offset!");
static_assert(offsetof(FTGFItem, Count) == 0x000004, "Member 'FTGFItem::Count' has a wrong offset!");
static_assert(offsetof(FTGFItem, Guid) == 0x000008, "Member 'FTGFItem::Guid' has a wrong offset!");
static_assert(offsetof(FTGFItem, Expire_timepoint) == 0x00000C, "Member 'FTGFItem::Expire_timepoint' has a wrong offset!");
static_assert(offsetof(FTGFItem, Position) == 0x000010, "Member 'FTGFItem::Position' has a wrong offset!");

// ScriptStruct TGFGame.TGFMailReceiveKey
// 0x0028 (0x0028 - 0x0000)
struct FTGFMailReceiveKey final
{
public:
	int64                                         MailId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTGFItem>                       Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Indexes;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFMailReceiveKey) == 0x000008, "Wrong alignment on FTGFMailReceiveKey");
static_assert(sizeof(FTGFMailReceiveKey) == 0x000028, "Wrong size on FTGFMailReceiveKey");
static_assert(offsetof(FTGFMailReceiveKey, MailId) == 0x000000, "Member 'FTGFMailReceiveKey::MailId' has a wrong offset!");
static_assert(offsetof(FTGFMailReceiveKey, Items) == 0x000008, "Member 'FTGFMailReceiveKey::Items' has a wrong offset!");
static_assert(offsetof(FTGFMailReceiveKey, Indexes) == 0x000018, "Member 'FTGFMailReceiveKey::Indexes' has a wrong offset!");

// ScriptStruct TGFGame.FlawlessStruct
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FFlawlessStruct final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlawlessStruct) == 0x000004, "Wrong alignment on FFlawlessStruct");
static_assert(sizeof(FFlawlessStruct) == 0x00000C, "Wrong size on FFlawlessStruct");

// ScriptStruct TGFGame.RecommendProductSet
// 0x0050 (0x0050 - 0x0000)
struct FRecommendProductSet final
{
public:
	TMap<int32, class UTGFTradeMarketProductData*> ProductDataMap;                                    // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecommendProductSet) == 0x000008, "Wrong alignment on FRecommendProductSet");
static_assert(sizeof(FRecommendProductSet) == 0x000050, "Wrong size on FRecommendProductSet");
static_assert(offsetof(FRecommendProductSet, ProductDataMap) == 0x000000, "Member 'FRecommendProductSet::ProductDataMap' has a wrong offset!");

// ScriptStruct TGFGame.RecommendProductPool
// 0x00F0 (0x00F0 - 0x0000)
struct FRecommendProductPool final
{
public:
	struct FRecommendProductSet                   ProductSetBase;                                    // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<ETgfEquipSubType, struct FRecommendProductSet> ProductSetEquipSubType;                            // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<ETGFProtoTgfEnItemMinorType, struct FRecommendProductSet> ProductSetItemMinorType;                           // 0x00A0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecommendProductPool) == 0x000008, "Wrong alignment on FRecommendProductPool");
static_assert(sizeof(FRecommendProductPool) == 0x0000F0, "Wrong size on FRecommendProductPool");
static_assert(offsetof(FRecommendProductPool, ProductSetBase) == 0x000000, "Member 'FRecommendProductPool::ProductSetBase' has a wrong offset!");
static_assert(offsetof(FRecommendProductPool, ProductSetEquipSubType) == 0x000050, "Member 'FRecommendProductPool::ProductSetEquipSubType' has a wrong offset!");
static_assert(offsetof(FRecommendProductPool, ProductSetItemMinorType) == 0x0000A0, "Member 'FRecommendProductPool::ProductSetItemMinorType' has a wrong offset!");

// ScriptStruct TGFGame.ChatChannelConfigRow
// 0x0080 (0x0088 - 0x0008)
struct FChatChannelConfigRow final : public FTableRowBase
{
public:
	ETGFProtoTgfEnChatChannelType                 ChannelType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ChannelName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLength;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendInterval;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInPanel;                                      // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<ETGFProtoTgfEnChatChannelType>           CanShowChannelSet;                                 // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChatChannelConfigRow) == 0x000008, "Wrong alignment on FChatChannelConfigRow");
static_assert(sizeof(FChatChannelConfigRow) == 0x000088, "Wrong size on FChatChannelConfigRow");
static_assert(offsetof(FChatChannelConfigRow, ChannelType) == 0x000008, "Member 'FChatChannelConfigRow::ChannelType' has a wrong offset!");
static_assert(offsetof(FChatChannelConfigRow, ChannelName) == 0x000010, "Member 'FChatChannelConfigRow::ChannelName' has a wrong offset!");
static_assert(offsetof(FChatChannelConfigRow, MaxCount) == 0x000028, "Member 'FChatChannelConfigRow::MaxCount' has a wrong offset!");
static_assert(offsetof(FChatChannelConfigRow, MaxLength) == 0x00002C, "Member 'FChatChannelConfigRow::MaxLength' has a wrong offset!");
static_assert(offsetof(FChatChannelConfigRow, SendInterval) == 0x000030, "Member 'FChatChannelConfigRow::SendInterval' has a wrong offset!");
static_assert(offsetof(FChatChannelConfigRow, bShowInPanel) == 0x000034, "Member 'FChatChannelConfigRow::bShowInPanel' has a wrong offset!");
static_assert(offsetof(FChatChannelConfigRow, CanShowChannelSet) == 0x000038, "Member 'FChatChannelConfigRow::CanShowChannelSet' has a wrong offset!");

// ScriptStruct TGFGame.CultureTextMap
// 0x0058 (0x0058 - 0x0000)
struct FCultureTextMap final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETGFProtoTgfEnMutlLanguageType, class FString> CultureTextMap;                                    // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCultureTextMap) == 0x000008, "Wrong alignment on FCultureTextMap");
static_assert(sizeof(FCultureTextMap) == 0x000058, "Wrong size on FCultureTextMap");
static_assert(offsetof(FCultureTextMap, bIsValid) == 0x000000, "Member 'FCultureTextMap::bIsValid' has a wrong offset!");
static_assert(offsetof(FCultureTextMap, CultureTextMap) == 0x000008, "Member 'FCultureTextMap::CultureTextMap' has a wrong offset!");

// ScriptStruct TGFGame.SystemNotify
// 0x0070 (0x0070 - 0x0000)
struct FSystemNotify final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnChatMsgSendType                 MsgSendType;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCultureTextMap                        CultureTextMap;                                    // 0x0008(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int64                                         RevocationSequence;                                // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ExpirationTimestamp;                               // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSystemNotify) == 0x000008, "Wrong alignment on FSystemNotify");
static_assert(sizeof(FSystemNotify) == 0x000070, "Wrong size on FSystemNotify");
static_assert(offsetof(FSystemNotify, bIsValid) == 0x000000, "Member 'FSystemNotify::bIsValid' has a wrong offset!");
static_assert(offsetof(FSystemNotify, MsgSendType) == 0x000001, "Member 'FSystemNotify::MsgSendType' has a wrong offset!");
static_assert(offsetof(FSystemNotify, CultureTextMap) == 0x000008, "Member 'FSystemNotify::CultureTextMap' has a wrong offset!");
static_assert(offsetof(FSystemNotify, RevocationSequence) == 0x000060, "Member 'FSystemNotify::RevocationSequence' has a wrong offset!");
static_assert(offsetof(FSystemNotify, ExpirationTimestamp) == 0x000068, "Member 'FSystemNotify::ExpirationTimestamp' has a wrong offset!");

// ScriptStruct TGFGame.UserKey
// 0x0010 (0x0010 - 0x0000)
struct FUserKey final
{
public:
	int32                                         ZoneId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         UserId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserKey) == 0x000008, "Wrong alignment on FUserKey");
static_assert(sizeof(FUserKey) == 0x000010, "Wrong size on FUserKey");
static_assert(offsetof(FUserKey, ZoneId) == 0x000000, "Member 'FUserKey::ZoneId' has a wrong offset!");
static_assert(offsetof(FUserKey, UserId) == 0x000008, "Member 'FUserKey::UserId' has a wrong offset!");

// ScriptStruct TGFGame.RoleKey
// 0x0010 (0x0010 - 0x0000)
struct FRoleKey final
{
public:
	int32                                         ZoneId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         RoleGuid;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoleKey) == 0x000008, "Wrong alignment on FRoleKey");
static_assert(sizeof(FRoleKey) == 0x000010, "Wrong size on FRoleKey");
static_assert(offsetof(FRoleKey, ZoneId) == 0x000000, "Member 'FRoleKey::ZoneId' has a wrong offset!");
static_assert(offsetof(FRoleKey, RoleGuid) == 0x000008, "Member 'FRoleKey::RoleGuid' has a wrong offset!");

// ScriptStruct TGFGame.ChatMessage
// 0x00E0 (0x00E0 - 0x0000)
struct FChatMessage final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnChatChannelType                 ChannelType;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Sequence;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SendTimeStamp;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SendTimeNanos;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUserKey                               SenderUserKey;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRoleKey                               SenderRoleKey;                                     // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserKey                               ReceiverUserKey;                                   // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRoleKey                               ReceiverRoleKey;                                   // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextContent;                                       // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSystemNotify                          SystemNotify;                                      // 0x0070(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChatMessage) == 0x000008, "Wrong alignment on FChatMessage");
static_assert(sizeof(FChatMessage) == 0x0000E0, "Wrong size on FChatMessage");
static_assert(offsetof(FChatMessage, bIsValid) == 0x000000, "Member 'FChatMessage::bIsValid' has a wrong offset!");
static_assert(offsetof(FChatMessage, ChannelType) == 0x000001, "Member 'FChatMessage::ChannelType' has a wrong offset!");
static_assert(offsetof(FChatMessage, Sequence) == 0x000008, "Member 'FChatMessage::Sequence' has a wrong offset!");
static_assert(offsetof(FChatMessage, SendTimeStamp) == 0x000010, "Member 'FChatMessage::SendTimeStamp' has a wrong offset!");
static_assert(offsetof(FChatMessage, SendTimeNanos) == 0x000018, "Member 'FChatMessage::SendTimeNanos' has a wrong offset!");
static_assert(offsetof(FChatMessage, SenderUserKey) == 0x000020, "Member 'FChatMessage::SenderUserKey' has a wrong offset!");
static_assert(offsetof(FChatMessage, SenderRoleKey) == 0x000030, "Member 'FChatMessage::SenderRoleKey' has a wrong offset!");
static_assert(offsetof(FChatMessage, ReceiverUserKey) == 0x000040, "Member 'FChatMessage::ReceiverUserKey' has a wrong offset!");
static_assert(offsetof(FChatMessage, ReceiverRoleKey) == 0x000050, "Member 'FChatMessage::ReceiverRoleKey' has a wrong offset!");
static_assert(offsetof(FChatMessage, TextContent) == 0x000060, "Member 'FChatMessage::TextContent' has a wrong offset!");
static_assert(offsetof(FChatMessage, SystemNotify) == 0x000070, "Member 'FChatMessage::SystemNotify' has a wrong offset!");

// ScriptStruct TGFGame.TGFDRoleDressUp
// 0x0004 (0x0004 - 0x0000)
struct FTGFDRoleDressUp final
{
public:
	int32                                         Default_dress_up_type_id;                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFDRoleDressUp) == 0x000004, "Wrong alignment on FTGFDRoleDressUp");
static_assert(sizeof(FTGFDRoleDressUp) == 0x000004, "Wrong size on FTGFDRoleDressUp");
static_assert(offsetof(FTGFDRoleDressUp, Default_dress_up_type_id) == 0x000000, "Member 'FTGFDRoleDressUp::Default_dress_up_type_id' has a wrong offset!");

// ScriptStruct TGFGame.TGFRoleMetaIndex
// 0x0008 (0x0008 - 0x0000)
struct FTGFRoleMetaIndex final
{
public:
	int32                                         Faction;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorCareer                               Career;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EnRoleGenderType                              Gender;                                            // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 Race;                                              // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfForceType                                 Force;                                             // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFRoleMetaIndex) == 0x000004, "Wrong alignment on FTGFRoleMetaIndex");
static_assert(sizeof(FTGFRoleMetaIndex) == 0x000008, "Wrong size on FTGFRoleMetaIndex");
static_assert(offsetof(FTGFRoleMetaIndex, Faction) == 0x000000, "Member 'FTGFRoleMetaIndex::Faction' has a wrong offset!");
static_assert(offsetof(FTGFRoleMetaIndex, Career) == 0x000004, "Member 'FTGFRoleMetaIndex::Career' has a wrong offset!");
static_assert(offsetof(FTGFRoleMetaIndex, Gender) == 0x000005, "Member 'FTGFRoleMetaIndex::Gender' has a wrong offset!");
static_assert(offsetof(FTGFRoleMetaIndex, Race) == 0x000006, "Member 'FTGFRoleMetaIndex::Race' has a wrong offset!");
static_assert(offsetof(FTGFRoleMetaIndex, Force) == 0x000007, "Member 'FTGFRoleMetaIndex::Force' has a wrong offset!");

// ScriptStruct TGFGame.TGFTradeProductSearchResultData
// 0x0018 (0x0018 - 0x0000)
struct FTGFTradeProductSearchResultData final
{
public:
	TArray<class UTGFTradeMarketProductData*>     ResultDatas;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          HasNextPage;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFTradeProductSearchResultData) == 0x000008, "Wrong alignment on FTGFTradeProductSearchResultData");
static_assert(sizeof(FTGFTradeProductSearchResultData) == 0x000018, "Wrong size on FTGFTradeProductSearchResultData");
static_assert(offsetof(FTGFTradeProductSearchResultData, ResultDatas) == 0x000000, "Member 'FTGFTradeProductSearchResultData::ResultDatas' has a wrong offset!");
static_assert(offsetof(FTGFTradeProductSearchResultData, HasNextPage) == 0x000010, "Member 'FTGFTradeProductSearchResultData::HasNextPage' has a wrong offset!");

// ScriptStruct TGFGame.CraftTab
// 0x0050 (0x0050 - 0x0000)
struct FCraftTab final
{
public:
	TMap<int32, class UFusionItemData*>           Crafts;                                            // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftTab) == 0x000008, "Wrong alignment on FCraftTab");
static_assert(sizeof(FCraftTab) == 0x000050, "Wrong size on FCraftTab");
static_assert(offsetof(FCraftTab, Crafts) == 0x000000, "Member 'FCraftTab::Crafts' has a wrong offset!");

// ScriptStruct TGFGame.RpcGameClientServiceMethods
// 0x0730 (0x0730 - 0x0000)
struct FRpcGameClientServiceMethods final
{
public:
	class FName                                   PreLogin;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoginNotifySync;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Login;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClientActionLog;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Ping;                                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BusinessPing;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NetworkLatencyReport;                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UpdateAccountData;                                 // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TelemetryReport;                                   // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModalMessage;                                      // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerGetInfo;                                     // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerDirtyChange;                                 // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerGetInfoByPage;                               // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerBatchGetBasicInfo;                           // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerBatchGetIdKey;                               // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerRename;                                      // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerUpdateIcon;                                  // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerUpdateOptions;                               // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerGmCommand;                                   // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerSettingData;                                 // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerKickoffReason;                               // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerAcePacket;                                   // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerAcePacketSync;                               // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventCmdInfoSync;                                  // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerUriRedirect;                                 // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerReceiveHomelandReward;                       // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReportAction;                                      // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerBirthdayUpdate;                              // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CacheBatchGet;                                     // 0x00E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CacheUnwatch;                                      // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CacheExpired;                                      // 0x00F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CacheUpdateMeta;                                   // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerAllCacheExpired;                             // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MailGetAll;                                        // 0x0108(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MailRead;                                          // 0x0110(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MailReadAll;                                       // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MailReceiveAttachment;                             // 0x0120(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MailReceiveAttachmentAll;                          // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MailChangeSync;                                    // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MailReceiveAttachmentPartly;                       // 0x0138(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HallSetRole;                                       // 0x0140(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HallSwitch;                                        // 0x0148(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleMatchingPreSearch;                           // 0x0150(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleMatchingCancelPreSearch;                     // 0x0158(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleMatchingSearch;                              // 0x0160(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleMatchingHeartbeat;                           // 0x0168(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleMatchingExit;                                // 0x0170(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleMatchingConfirmRefuse;                       // 0x0178(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleMatchingLogSync;                             // 0x0180(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleRoomLogSync;                                 // 0x0188(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleRoomHeartbeat;                               // 0x0190(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleRecordListGet;                               // 0x0198(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleRecordDataGet;                               // 0x01A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleRecordDataSet;                               // 0x01A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleRoomPlayerAct;                               // 0x01B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleUpdateSetting;                               // 0x01B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleSettleSync;                                  // 0x01C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleFetchBattleUserData;                         // 0x01C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelPrestart;                                     // 0x01D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelStart;                                        // 0x01D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelFinish;                                       // 0x01E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelSelect;                                       // 0x01E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelChallenge;                                    // 0x01F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapMove;                                           // 0x01F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FriendGetAll;                                      // 0x0200(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FriendInvite;                                      // 0x0208(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FriendAcceptInvite;                                // 0x0210(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FriendRejectInvite;                                // 0x0218(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FriendRemove;                                      // 0x0220(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FriendSendGift;                                    // 0x0228(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FriendReceiveGift;                                 // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FriendGetSuggest;                                  // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FriendAcceptAllInvite;                             // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FriendRejectAllInvite;                             // 0x0248(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildCreate;                                       // 0x0250(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildExit;                                         // 0x0258(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildPayOff;                                       // 0x0260(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildGetAll;                                       // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildBatchGet;                                     // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildSuggest;                                      // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildSetRole;                                      // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildRename;                                       // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildSetConfigure;                                 // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildSendApply;                                    // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildApproveApply;                                 // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildRejectApply;                                  // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildSendInvitation;                               // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildApproveInvitation;                            // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildRejectInvitation;                             // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildRevokeInvitation;                             // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildRemoveMember;                                 // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildAddImpeachment;                               // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuildVoteImpeachment;                              // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChatGetAllChannels;                                // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChatGetChannelSnapshot;                            // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChatChannelHeartbeat;                              // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChatSendMessage;                                   // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChatUpdatePanel;                                   // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamSendInvitation;                                // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamApproveInvitation;                             // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamRejectInvitation;                              // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamExit;                                          // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamRemoveMember;                                  // 0x0330(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamSendBattleConfirm;                             // 0x0338(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamSendBattleUnconfirm;                           // 0x0340(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamTransferCaptain;                               // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamApplyJoinTeam;                                 // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamAcceptApply;                                   // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamChangeTeamFinder;                              // 0x0360(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamRejectApply;                                   // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamMatchSearch;                                   // 0x0370(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamMatchCheck;                                    // 0x0378(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamMatchExit;                                     // 0x0380(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoleCreate;                                        // 0x0388(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoleDelete;                                        // 0x0390(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoleDeleteLazy;                                    // 0x0398(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoleCancelLazyDelete;                              // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoleWear;                                          // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoleWeaponSetSwap;                                 // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoleTakeOff;                                       // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoleFetchUserRole;                                 // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoleMoveSeason;                                    // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoleReshapeFacePinching;                           // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoleSelectSkill;                                   // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestRewardsReceive;                               // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestSpecialProgressReport;                        // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestItemSubmit;                                   // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RankGetSpecifyRank;                                // 0x03F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RankGetSelfRank;                                   // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RankCacheExpiredSync;                              // 0x0408(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LotteryDraw;                                       // 0x0410(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MarketGetProductList;                              // 0x0418(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MarketBuyProduct;                                  // 0x0420(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MarketSellItems;                                   // 0x0428(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MarketBuySoldItem;                                 // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MarketResetRefreshEffect;                          // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MarketVideoPopup;                                  // 0x0440(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PayGetAll;                                         // 0x0448(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PayUpdateDiamond;                                  // 0x0450(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PayDirectBuy;                                      // 0x0458(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PayAuthDataExpiredSync;                            // 0x0460(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PayCheckBillApplied;                               // 0x0468(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PayUpdateAuthorizationData;                        // 0x0470(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PayCancel;                                         // 0x0478(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PayExchangeFreeDiamond;                            // 0x0480(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PayPendingFlowNtf;                                 // 0x0488(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PaySubmitPendingFlow;                              // 0x0490(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InventoryItemMove;                                 // 0x0498(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InventoryItemSwap;                                 // 0x04A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InventoryPageAdd;                                  // 0x04A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseItem;                                           // 0x04B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseItemBath;                                       // 0x04B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Crafting;                                          // 0x04C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CraftingCancel;                                    // 0x04C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CraftingRecived;                                   // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeProductPriceBasicInfo;                        // 0x04D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeProductPriceInfo;                             // 0x04E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeProductPercentageInfo;                        // 0x04E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradePurchaseOrderPublish;                         // 0x04F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeSalesOrderPublish;                            // 0x04F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeBidOrderPublish;                              // 0x0500(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeAuctionOrderPublish;                          // 0x0508(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeAuctionFetchOrderInfo;                        // 0x0510(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeAuctionIndex;                                 // 0x0518(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeOrderCancel;                                  // 0x0520(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeOrderHistory;                                 // 0x0528(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeOrderDelete;                                  // 0x0530(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeReceiveConfirmationProduct;                   // 0x0538(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeAuctionRecommendOrderTicket;                  // 0x0540(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeProductRecommendOrderTicket;                  // 0x0548(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TradeProductSearchOrderTicket;                     // 0x0550(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GearRepair;                                        // 0x0558(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GearInlaid;                                        // 0x0560(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GearDismantle;                                     // 0x0568(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GearSoulBound;                                     // 0x0570(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GearHeirloomUnlock;                                // 0x0578(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GearHeirloomUnload;                                // 0x0580(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GearHeirloomInstantiation;                         // 0x0588(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GearGemUnlock;                                     // 0x0590(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GearHeirloomGuideInlaidGem;                        // 0x0598(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GearHeirloomGuideInlaidClear;                      // 0x05A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FacadeUpdate;                                      // 0x05A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FacadeUpdateRoleSkin;                              // 0x05B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FacadeSaveSkinTemplate;                            // 0x05B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FacadeDeleteSkinTemplate;                          // 0x05C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FacadeGetOnSaleFacade;                             // 0x05C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterList;                                // 0x05D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterRandomRewards;                       // 0x05D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterRandomRewardSelected;                // 0x05E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterBuyPassport;                         // 0x05E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterPassportReceiveRewards;              // 0x05F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterPassportReceiveCycleRewards;         // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterPassportRefreshQuest;                // 0x0600(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterTrialOpen;                           // 0x0608(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterTrialSelfQuit;                       // 0x0610(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterTrialReceiveReward;                  // 0x0618(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterTrialHistoryRecord;                  // 0x0620(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityCenterTrialRecordSync;                     // 0x0628(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomCreate;                                        // 0x0630(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomEnter;                                         // 0x0638(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomLeave;                                         // 0x0640(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomDisband;                                       // 0x0648(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomChangeMyselfPos;                               // 0x0650(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomChangeMemberPos;                               // 0x0658(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomSelectBattleMap;                               // 0x0660(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomSelectBattleType;                              // 0x0668(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomGetReady;                                      // 0x0670(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomCancelReady;                                   // 0x0678(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomStartBattle;                                   // 0x0680(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomNameChange;                                    // 0x0688(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomKeywordChange;                                 // 0x0690(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomTransferOwner;                                 // 0x0698(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomKickoffMember;                                 // 0x06A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomSuggest;                                       // 0x06A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomBatchGet;                                      // 0x06B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomAcceptInvite;                                  // 0x06B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomSendInvite;                                    // 0x06C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomRejectInvite;                                  // 0x06C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomIgnoreRoomAllInvite;                           // 0x06D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RoomIgnoreAllUserInvite;                           // 0x06D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HopeInstructSync;                                  // 0x06E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HopeCertificationSync;                             // 0x06E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HopeReportExecute;                                 // 0x06F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MithrilForceRoleInit;                              // 0x06F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MithrilForceRoleSelect;                            // 0x0700(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MithrilForceReceiveReward;                         // 0x0708(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MithrilRoleWear;                                   // 0x0710(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DlcPacketSync;                                     // 0x0718(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DlcReceivePacket;                                  // 0x0720(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RefreshDLCInfo;                                    // 0x0728(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRpcGameClientServiceMethods) == 0x000004, "Wrong alignment on FRpcGameClientServiceMethods");
static_assert(sizeof(FRpcGameClientServiceMethods) == 0x000730, "Wrong size on FRpcGameClientServiceMethods");
static_assert(offsetof(FRpcGameClientServiceMethods, PreLogin) == 0x000000, "Member 'FRpcGameClientServiceMethods::PreLogin' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, LoginNotifySync) == 0x000008, "Member 'FRpcGameClientServiceMethods::LoginNotifySync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, Login) == 0x000010, "Member 'FRpcGameClientServiceMethods::Login' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ClientActionLog) == 0x000018, "Member 'FRpcGameClientServiceMethods::ClientActionLog' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, Ping) == 0x000020, "Member 'FRpcGameClientServiceMethods::Ping' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BusinessPing) == 0x000028, "Member 'FRpcGameClientServiceMethods::BusinessPing' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, NetworkLatencyReport) == 0x000030, "Member 'FRpcGameClientServiceMethods::NetworkLatencyReport' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, UpdateAccountData) == 0x000038, "Member 'FRpcGameClientServiceMethods::UpdateAccountData' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TelemetryReport) == 0x000040, "Member 'FRpcGameClientServiceMethods::TelemetryReport' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ModalMessage) == 0x000048, "Member 'FRpcGameClientServiceMethods::ModalMessage' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerGetInfo) == 0x000050, "Member 'FRpcGameClientServiceMethods::PlayerGetInfo' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerDirtyChange) == 0x000058, "Member 'FRpcGameClientServiceMethods::PlayerDirtyChange' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerGetInfoByPage) == 0x000060, "Member 'FRpcGameClientServiceMethods::PlayerGetInfoByPage' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerBatchGetBasicInfo) == 0x000068, "Member 'FRpcGameClientServiceMethods::PlayerBatchGetBasicInfo' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerBatchGetIdKey) == 0x000070, "Member 'FRpcGameClientServiceMethods::PlayerBatchGetIdKey' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerRename) == 0x000078, "Member 'FRpcGameClientServiceMethods::PlayerRename' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerUpdateIcon) == 0x000080, "Member 'FRpcGameClientServiceMethods::PlayerUpdateIcon' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerUpdateOptions) == 0x000088, "Member 'FRpcGameClientServiceMethods::PlayerUpdateOptions' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerGmCommand) == 0x000090, "Member 'FRpcGameClientServiceMethods::PlayerGmCommand' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerSettingData) == 0x000098, "Member 'FRpcGameClientServiceMethods::PlayerSettingData' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerKickoffReason) == 0x0000A0, "Member 'FRpcGameClientServiceMethods::PlayerKickoffReason' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerAcePacket) == 0x0000A8, "Member 'FRpcGameClientServiceMethods::PlayerAcePacket' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerAcePacketSync) == 0x0000B0, "Member 'FRpcGameClientServiceMethods::PlayerAcePacketSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, EventCmdInfoSync) == 0x0000B8, "Member 'FRpcGameClientServiceMethods::EventCmdInfoSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerUriRedirect) == 0x0000C0, "Member 'FRpcGameClientServiceMethods::PlayerUriRedirect' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerReceiveHomelandReward) == 0x0000C8, "Member 'FRpcGameClientServiceMethods::PlayerReceiveHomelandReward' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ReportAction) == 0x0000D0, "Member 'FRpcGameClientServiceMethods::ReportAction' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerBirthdayUpdate) == 0x0000D8, "Member 'FRpcGameClientServiceMethods::PlayerBirthdayUpdate' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, CacheBatchGet) == 0x0000E0, "Member 'FRpcGameClientServiceMethods::CacheBatchGet' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, CacheUnwatch) == 0x0000E8, "Member 'FRpcGameClientServiceMethods::CacheUnwatch' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, CacheExpired) == 0x0000F0, "Member 'FRpcGameClientServiceMethods::CacheExpired' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, CacheUpdateMeta) == 0x0000F8, "Member 'FRpcGameClientServiceMethods::CacheUpdateMeta' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PlayerAllCacheExpired) == 0x000100, "Member 'FRpcGameClientServiceMethods::PlayerAllCacheExpired' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MailGetAll) == 0x000108, "Member 'FRpcGameClientServiceMethods::MailGetAll' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MailRead) == 0x000110, "Member 'FRpcGameClientServiceMethods::MailRead' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MailReadAll) == 0x000118, "Member 'FRpcGameClientServiceMethods::MailReadAll' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MailReceiveAttachment) == 0x000120, "Member 'FRpcGameClientServiceMethods::MailReceiveAttachment' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MailReceiveAttachmentAll) == 0x000128, "Member 'FRpcGameClientServiceMethods::MailReceiveAttachmentAll' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MailChangeSync) == 0x000130, "Member 'FRpcGameClientServiceMethods::MailChangeSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MailReceiveAttachmentPartly) == 0x000138, "Member 'FRpcGameClientServiceMethods::MailReceiveAttachmentPartly' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, HallSetRole) == 0x000140, "Member 'FRpcGameClientServiceMethods::HallSetRole' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, HallSwitch) == 0x000148, "Member 'FRpcGameClientServiceMethods::HallSwitch' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleMatchingPreSearch) == 0x000150, "Member 'FRpcGameClientServiceMethods::BattleMatchingPreSearch' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleMatchingCancelPreSearch) == 0x000158, "Member 'FRpcGameClientServiceMethods::BattleMatchingCancelPreSearch' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleMatchingSearch) == 0x000160, "Member 'FRpcGameClientServiceMethods::BattleMatchingSearch' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleMatchingHeartbeat) == 0x000168, "Member 'FRpcGameClientServiceMethods::BattleMatchingHeartbeat' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleMatchingExit) == 0x000170, "Member 'FRpcGameClientServiceMethods::BattleMatchingExit' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleMatchingConfirmRefuse) == 0x000178, "Member 'FRpcGameClientServiceMethods::BattleMatchingConfirmRefuse' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleMatchingLogSync) == 0x000180, "Member 'FRpcGameClientServiceMethods::BattleMatchingLogSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleRoomLogSync) == 0x000188, "Member 'FRpcGameClientServiceMethods::BattleRoomLogSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleRoomHeartbeat) == 0x000190, "Member 'FRpcGameClientServiceMethods::BattleRoomHeartbeat' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleRecordListGet) == 0x000198, "Member 'FRpcGameClientServiceMethods::BattleRecordListGet' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleRecordDataGet) == 0x0001A0, "Member 'FRpcGameClientServiceMethods::BattleRecordDataGet' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleRecordDataSet) == 0x0001A8, "Member 'FRpcGameClientServiceMethods::BattleRecordDataSet' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleRoomPlayerAct) == 0x0001B0, "Member 'FRpcGameClientServiceMethods::BattleRoomPlayerAct' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleUpdateSetting) == 0x0001B8, "Member 'FRpcGameClientServiceMethods::BattleUpdateSetting' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleSettleSync) == 0x0001C0, "Member 'FRpcGameClientServiceMethods::BattleSettleSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, BattleFetchBattleUserData) == 0x0001C8, "Member 'FRpcGameClientServiceMethods::BattleFetchBattleUserData' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, LevelPrestart) == 0x0001D0, "Member 'FRpcGameClientServiceMethods::LevelPrestart' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, LevelStart) == 0x0001D8, "Member 'FRpcGameClientServiceMethods::LevelStart' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, LevelFinish) == 0x0001E0, "Member 'FRpcGameClientServiceMethods::LevelFinish' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, LevelSelect) == 0x0001E8, "Member 'FRpcGameClientServiceMethods::LevelSelect' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, LevelChallenge) == 0x0001F0, "Member 'FRpcGameClientServiceMethods::LevelChallenge' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MapMove) == 0x0001F8, "Member 'FRpcGameClientServiceMethods::MapMove' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FriendGetAll) == 0x000200, "Member 'FRpcGameClientServiceMethods::FriendGetAll' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FriendInvite) == 0x000208, "Member 'FRpcGameClientServiceMethods::FriendInvite' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FriendAcceptInvite) == 0x000210, "Member 'FRpcGameClientServiceMethods::FriendAcceptInvite' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FriendRejectInvite) == 0x000218, "Member 'FRpcGameClientServiceMethods::FriendRejectInvite' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FriendRemove) == 0x000220, "Member 'FRpcGameClientServiceMethods::FriendRemove' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FriendSendGift) == 0x000228, "Member 'FRpcGameClientServiceMethods::FriendSendGift' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FriendReceiveGift) == 0x000230, "Member 'FRpcGameClientServiceMethods::FriendReceiveGift' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FriendGetSuggest) == 0x000238, "Member 'FRpcGameClientServiceMethods::FriendGetSuggest' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FriendAcceptAllInvite) == 0x000240, "Member 'FRpcGameClientServiceMethods::FriendAcceptAllInvite' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FriendRejectAllInvite) == 0x000248, "Member 'FRpcGameClientServiceMethods::FriendRejectAllInvite' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildCreate) == 0x000250, "Member 'FRpcGameClientServiceMethods::GuildCreate' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildExit) == 0x000258, "Member 'FRpcGameClientServiceMethods::GuildExit' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildPayOff) == 0x000260, "Member 'FRpcGameClientServiceMethods::GuildPayOff' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildGetAll) == 0x000268, "Member 'FRpcGameClientServiceMethods::GuildGetAll' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildBatchGet) == 0x000270, "Member 'FRpcGameClientServiceMethods::GuildBatchGet' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildSuggest) == 0x000278, "Member 'FRpcGameClientServiceMethods::GuildSuggest' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildSetRole) == 0x000280, "Member 'FRpcGameClientServiceMethods::GuildSetRole' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildRename) == 0x000288, "Member 'FRpcGameClientServiceMethods::GuildRename' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildSetConfigure) == 0x000290, "Member 'FRpcGameClientServiceMethods::GuildSetConfigure' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildSendApply) == 0x000298, "Member 'FRpcGameClientServiceMethods::GuildSendApply' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildApproveApply) == 0x0002A0, "Member 'FRpcGameClientServiceMethods::GuildApproveApply' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildRejectApply) == 0x0002A8, "Member 'FRpcGameClientServiceMethods::GuildRejectApply' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildSendInvitation) == 0x0002B0, "Member 'FRpcGameClientServiceMethods::GuildSendInvitation' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildApproveInvitation) == 0x0002B8, "Member 'FRpcGameClientServiceMethods::GuildApproveInvitation' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildRejectInvitation) == 0x0002C0, "Member 'FRpcGameClientServiceMethods::GuildRejectInvitation' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildRevokeInvitation) == 0x0002C8, "Member 'FRpcGameClientServiceMethods::GuildRevokeInvitation' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildRemoveMember) == 0x0002D0, "Member 'FRpcGameClientServiceMethods::GuildRemoveMember' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildAddImpeachment) == 0x0002D8, "Member 'FRpcGameClientServiceMethods::GuildAddImpeachment' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GuildVoteImpeachment) == 0x0002E0, "Member 'FRpcGameClientServiceMethods::GuildVoteImpeachment' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ChatGetAllChannels) == 0x0002E8, "Member 'FRpcGameClientServiceMethods::ChatGetAllChannels' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ChatGetChannelSnapshot) == 0x0002F0, "Member 'FRpcGameClientServiceMethods::ChatGetChannelSnapshot' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ChatChannelHeartbeat) == 0x0002F8, "Member 'FRpcGameClientServiceMethods::ChatChannelHeartbeat' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ChatSendMessage) == 0x000300, "Member 'FRpcGameClientServiceMethods::ChatSendMessage' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ChatUpdatePanel) == 0x000308, "Member 'FRpcGameClientServiceMethods::ChatUpdatePanel' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamSendInvitation) == 0x000310, "Member 'FRpcGameClientServiceMethods::TeamSendInvitation' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamApproveInvitation) == 0x000318, "Member 'FRpcGameClientServiceMethods::TeamApproveInvitation' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamRejectInvitation) == 0x000320, "Member 'FRpcGameClientServiceMethods::TeamRejectInvitation' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamExit) == 0x000328, "Member 'FRpcGameClientServiceMethods::TeamExit' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamRemoveMember) == 0x000330, "Member 'FRpcGameClientServiceMethods::TeamRemoveMember' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamSendBattleConfirm) == 0x000338, "Member 'FRpcGameClientServiceMethods::TeamSendBattleConfirm' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamSendBattleUnconfirm) == 0x000340, "Member 'FRpcGameClientServiceMethods::TeamSendBattleUnconfirm' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamTransferCaptain) == 0x000348, "Member 'FRpcGameClientServiceMethods::TeamTransferCaptain' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamApplyJoinTeam) == 0x000350, "Member 'FRpcGameClientServiceMethods::TeamApplyJoinTeam' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamAcceptApply) == 0x000358, "Member 'FRpcGameClientServiceMethods::TeamAcceptApply' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamChangeTeamFinder) == 0x000360, "Member 'FRpcGameClientServiceMethods::TeamChangeTeamFinder' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamRejectApply) == 0x000368, "Member 'FRpcGameClientServiceMethods::TeamRejectApply' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamMatchSearch) == 0x000370, "Member 'FRpcGameClientServiceMethods::TeamMatchSearch' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamMatchCheck) == 0x000378, "Member 'FRpcGameClientServiceMethods::TeamMatchCheck' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TeamMatchExit) == 0x000380, "Member 'FRpcGameClientServiceMethods::TeamMatchExit' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoleCreate) == 0x000388, "Member 'FRpcGameClientServiceMethods::RoleCreate' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoleDelete) == 0x000390, "Member 'FRpcGameClientServiceMethods::RoleDelete' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoleDeleteLazy) == 0x000398, "Member 'FRpcGameClientServiceMethods::RoleDeleteLazy' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoleCancelLazyDelete) == 0x0003A0, "Member 'FRpcGameClientServiceMethods::RoleCancelLazyDelete' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoleWear) == 0x0003A8, "Member 'FRpcGameClientServiceMethods::RoleWear' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoleWeaponSetSwap) == 0x0003B0, "Member 'FRpcGameClientServiceMethods::RoleWeaponSetSwap' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoleTakeOff) == 0x0003B8, "Member 'FRpcGameClientServiceMethods::RoleTakeOff' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoleFetchUserRole) == 0x0003C0, "Member 'FRpcGameClientServiceMethods::RoleFetchUserRole' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoleMoveSeason) == 0x0003C8, "Member 'FRpcGameClientServiceMethods::RoleMoveSeason' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoleReshapeFacePinching) == 0x0003D0, "Member 'FRpcGameClientServiceMethods::RoleReshapeFacePinching' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoleSelectSkill) == 0x0003D8, "Member 'FRpcGameClientServiceMethods::RoleSelectSkill' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, QuestRewardsReceive) == 0x0003E0, "Member 'FRpcGameClientServiceMethods::QuestRewardsReceive' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, QuestSpecialProgressReport) == 0x0003E8, "Member 'FRpcGameClientServiceMethods::QuestSpecialProgressReport' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, QuestItemSubmit) == 0x0003F0, "Member 'FRpcGameClientServiceMethods::QuestItemSubmit' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RankGetSpecifyRank) == 0x0003F8, "Member 'FRpcGameClientServiceMethods::RankGetSpecifyRank' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RankGetSelfRank) == 0x000400, "Member 'FRpcGameClientServiceMethods::RankGetSelfRank' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RankCacheExpiredSync) == 0x000408, "Member 'FRpcGameClientServiceMethods::RankCacheExpiredSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, LotteryDraw) == 0x000410, "Member 'FRpcGameClientServiceMethods::LotteryDraw' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MarketGetProductList) == 0x000418, "Member 'FRpcGameClientServiceMethods::MarketGetProductList' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MarketBuyProduct) == 0x000420, "Member 'FRpcGameClientServiceMethods::MarketBuyProduct' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MarketSellItems) == 0x000428, "Member 'FRpcGameClientServiceMethods::MarketSellItems' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MarketBuySoldItem) == 0x000430, "Member 'FRpcGameClientServiceMethods::MarketBuySoldItem' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MarketResetRefreshEffect) == 0x000438, "Member 'FRpcGameClientServiceMethods::MarketResetRefreshEffect' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MarketVideoPopup) == 0x000440, "Member 'FRpcGameClientServiceMethods::MarketVideoPopup' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PayGetAll) == 0x000448, "Member 'FRpcGameClientServiceMethods::PayGetAll' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PayUpdateDiamond) == 0x000450, "Member 'FRpcGameClientServiceMethods::PayUpdateDiamond' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PayDirectBuy) == 0x000458, "Member 'FRpcGameClientServiceMethods::PayDirectBuy' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PayAuthDataExpiredSync) == 0x000460, "Member 'FRpcGameClientServiceMethods::PayAuthDataExpiredSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PayCheckBillApplied) == 0x000468, "Member 'FRpcGameClientServiceMethods::PayCheckBillApplied' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PayUpdateAuthorizationData) == 0x000470, "Member 'FRpcGameClientServiceMethods::PayUpdateAuthorizationData' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PayCancel) == 0x000478, "Member 'FRpcGameClientServiceMethods::PayCancel' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PayExchangeFreeDiamond) == 0x000480, "Member 'FRpcGameClientServiceMethods::PayExchangeFreeDiamond' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PayPendingFlowNtf) == 0x000488, "Member 'FRpcGameClientServiceMethods::PayPendingFlowNtf' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, PaySubmitPendingFlow) == 0x000490, "Member 'FRpcGameClientServiceMethods::PaySubmitPendingFlow' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, InventoryItemMove) == 0x000498, "Member 'FRpcGameClientServiceMethods::InventoryItemMove' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, InventoryItemSwap) == 0x0004A0, "Member 'FRpcGameClientServiceMethods::InventoryItemSwap' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, InventoryPageAdd) == 0x0004A8, "Member 'FRpcGameClientServiceMethods::InventoryPageAdd' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, UseItem) == 0x0004B0, "Member 'FRpcGameClientServiceMethods::UseItem' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, UseItemBath) == 0x0004B8, "Member 'FRpcGameClientServiceMethods::UseItemBath' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, Crafting) == 0x0004C0, "Member 'FRpcGameClientServiceMethods::Crafting' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, CraftingCancel) == 0x0004C8, "Member 'FRpcGameClientServiceMethods::CraftingCancel' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, CraftingRecived) == 0x0004D0, "Member 'FRpcGameClientServiceMethods::CraftingRecived' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeProductPriceBasicInfo) == 0x0004D8, "Member 'FRpcGameClientServiceMethods::TradeProductPriceBasicInfo' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeProductPriceInfo) == 0x0004E0, "Member 'FRpcGameClientServiceMethods::TradeProductPriceInfo' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeProductPercentageInfo) == 0x0004E8, "Member 'FRpcGameClientServiceMethods::TradeProductPercentageInfo' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradePurchaseOrderPublish) == 0x0004F0, "Member 'FRpcGameClientServiceMethods::TradePurchaseOrderPublish' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeSalesOrderPublish) == 0x0004F8, "Member 'FRpcGameClientServiceMethods::TradeSalesOrderPublish' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeBidOrderPublish) == 0x000500, "Member 'FRpcGameClientServiceMethods::TradeBidOrderPublish' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeAuctionOrderPublish) == 0x000508, "Member 'FRpcGameClientServiceMethods::TradeAuctionOrderPublish' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeAuctionFetchOrderInfo) == 0x000510, "Member 'FRpcGameClientServiceMethods::TradeAuctionFetchOrderInfo' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeAuctionIndex) == 0x000518, "Member 'FRpcGameClientServiceMethods::TradeAuctionIndex' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeOrderCancel) == 0x000520, "Member 'FRpcGameClientServiceMethods::TradeOrderCancel' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeOrderHistory) == 0x000528, "Member 'FRpcGameClientServiceMethods::TradeOrderHistory' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeOrderDelete) == 0x000530, "Member 'FRpcGameClientServiceMethods::TradeOrderDelete' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeReceiveConfirmationProduct) == 0x000538, "Member 'FRpcGameClientServiceMethods::TradeReceiveConfirmationProduct' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeAuctionRecommendOrderTicket) == 0x000540, "Member 'FRpcGameClientServiceMethods::TradeAuctionRecommendOrderTicket' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeProductRecommendOrderTicket) == 0x000548, "Member 'FRpcGameClientServiceMethods::TradeProductRecommendOrderTicket' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, TradeProductSearchOrderTicket) == 0x000550, "Member 'FRpcGameClientServiceMethods::TradeProductSearchOrderTicket' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GearRepair) == 0x000558, "Member 'FRpcGameClientServiceMethods::GearRepair' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GearInlaid) == 0x000560, "Member 'FRpcGameClientServiceMethods::GearInlaid' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GearDismantle) == 0x000568, "Member 'FRpcGameClientServiceMethods::GearDismantle' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GearSoulBound) == 0x000570, "Member 'FRpcGameClientServiceMethods::GearSoulBound' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GearHeirloomUnlock) == 0x000578, "Member 'FRpcGameClientServiceMethods::GearHeirloomUnlock' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GearHeirloomUnload) == 0x000580, "Member 'FRpcGameClientServiceMethods::GearHeirloomUnload' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GearHeirloomInstantiation) == 0x000588, "Member 'FRpcGameClientServiceMethods::GearHeirloomInstantiation' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GearGemUnlock) == 0x000590, "Member 'FRpcGameClientServiceMethods::GearGemUnlock' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GearHeirloomGuideInlaidGem) == 0x000598, "Member 'FRpcGameClientServiceMethods::GearHeirloomGuideInlaidGem' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, GearHeirloomGuideInlaidClear) == 0x0005A0, "Member 'FRpcGameClientServiceMethods::GearHeirloomGuideInlaidClear' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FacadeUpdate) == 0x0005A8, "Member 'FRpcGameClientServiceMethods::FacadeUpdate' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FacadeUpdateRoleSkin) == 0x0005B0, "Member 'FRpcGameClientServiceMethods::FacadeUpdateRoleSkin' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FacadeSaveSkinTemplate) == 0x0005B8, "Member 'FRpcGameClientServiceMethods::FacadeSaveSkinTemplate' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FacadeDeleteSkinTemplate) == 0x0005C0, "Member 'FRpcGameClientServiceMethods::FacadeDeleteSkinTemplate' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, FacadeGetOnSaleFacade) == 0x0005C8, "Member 'FRpcGameClientServiceMethods::FacadeGetOnSaleFacade' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterList) == 0x0005D0, "Member 'FRpcGameClientServiceMethods::ActivityCenterList' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterRandomRewards) == 0x0005D8, "Member 'FRpcGameClientServiceMethods::ActivityCenterRandomRewards' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterRandomRewardSelected) == 0x0005E0, "Member 'FRpcGameClientServiceMethods::ActivityCenterRandomRewardSelected' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterBuyPassport) == 0x0005E8, "Member 'FRpcGameClientServiceMethods::ActivityCenterBuyPassport' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterPassportReceiveRewards) == 0x0005F0, "Member 'FRpcGameClientServiceMethods::ActivityCenterPassportReceiveRewards' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterPassportReceiveCycleRewards) == 0x0005F8, "Member 'FRpcGameClientServiceMethods::ActivityCenterPassportReceiveCycleRewards' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterPassportRefreshQuest) == 0x000600, "Member 'FRpcGameClientServiceMethods::ActivityCenterPassportRefreshQuest' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterTrialOpen) == 0x000608, "Member 'FRpcGameClientServiceMethods::ActivityCenterTrialOpen' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterTrialSelfQuit) == 0x000610, "Member 'FRpcGameClientServiceMethods::ActivityCenterTrialSelfQuit' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterTrialReceiveReward) == 0x000618, "Member 'FRpcGameClientServiceMethods::ActivityCenterTrialReceiveReward' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterTrialHistoryRecord) == 0x000620, "Member 'FRpcGameClientServiceMethods::ActivityCenterTrialHistoryRecord' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, ActivityCenterTrialRecordSync) == 0x000628, "Member 'FRpcGameClientServiceMethods::ActivityCenterTrialRecordSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomCreate) == 0x000630, "Member 'FRpcGameClientServiceMethods::RoomCreate' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomEnter) == 0x000638, "Member 'FRpcGameClientServiceMethods::RoomEnter' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomLeave) == 0x000640, "Member 'FRpcGameClientServiceMethods::RoomLeave' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomDisband) == 0x000648, "Member 'FRpcGameClientServiceMethods::RoomDisband' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomChangeMyselfPos) == 0x000650, "Member 'FRpcGameClientServiceMethods::RoomChangeMyselfPos' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomChangeMemberPos) == 0x000658, "Member 'FRpcGameClientServiceMethods::RoomChangeMemberPos' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomSelectBattleMap) == 0x000660, "Member 'FRpcGameClientServiceMethods::RoomSelectBattleMap' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomSelectBattleType) == 0x000668, "Member 'FRpcGameClientServiceMethods::RoomSelectBattleType' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomGetReady) == 0x000670, "Member 'FRpcGameClientServiceMethods::RoomGetReady' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomCancelReady) == 0x000678, "Member 'FRpcGameClientServiceMethods::RoomCancelReady' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomStartBattle) == 0x000680, "Member 'FRpcGameClientServiceMethods::RoomStartBattle' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomNameChange) == 0x000688, "Member 'FRpcGameClientServiceMethods::RoomNameChange' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomKeywordChange) == 0x000690, "Member 'FRpcGameClientServiceMethods::RoomKeywordChange' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomTransferOwner) == 0x000698, "Member 'FRpcGameClientServiceMethods::RoomTransferOwner' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomKickoffMember) == 0x0006A0, "Member 'FRpcGameClientServiceMethods::RoomKickoffMember' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomSuggest) == 0x0006A8, "Member 'FRpcGameClientServiceMethods::RoomSuggest' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomBatchGet) == 0x0006B0, "Member 'FRpcGameClientServiceMethods::RoomBatchGet' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomAcceptInvite) == 0x0006B8, "Member 'FRpcGameClientServiceMethods::RoomAcceptInvite' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomSendInvite) == 0x0006C0, "Member 'FRpcGameClientServiceMethods::RoomSendInvite' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomRejectInvite) == 0x0006C8, "Member 'FRpcGameClientServiceMethods::RoomRejectInvite' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomIgnoreRoomAllInvite) == 0x0006D0, "Member 'FRpcGameClientServiceMethods::RoomIgnoreRoomAllInvite' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RoomIgnoreAllUserInvite) == 0x0006D8, "Member 'FRpcGameClientServiceMethods::RoomIgnoreAllUserInvite' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, HopeInstructSync) == 0x0006E0, "Member 'FRpcGameClientServiceMethods::HopeInstructSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, HopeCertificationSync) == 0x0006E8, "Member 'FRpcGameClientServiceMethods::HopeCertificationSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, HopeReportExecute) == 0x0006F0, "Member 'FRpcGameClientServiceMethods::HopeReportExecute' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MithrilForceRoleInit) == 0x0006F8, "Member 'FRpcGameClientServiceMethods::MithrilForceRoleInit' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MithrilForceRoleSelect) == 0x000700, "Member 'FRpcGameClientServiceMethods::MithrilForceRoleSelect' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MithrilForceReceiveReward) == 0x000708, "Member 'FRpcGameClientServiceMethods::MithrilForceReceiveReward' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, MithrilRoleWear) == 0x000710, "Member 'FRpcGameClientServiceMethods::MithrilRoleWear' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, DlcPacketSync) == 0x000718, "Member 'FRpcGameClientServiceMethods::DlcPacketSync' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, DlcReceivePacket) == 0x000720, "Member 'FRpcGameClientServiceMethods::DlcReceivePacket' has a wrong offset!");
static_assert(offsetof(FRpcGameClientServiceMethods, RefreshDLCInfo) == 0x000728, "Member 'FRpcGameClientServiceMethods::RefreshDLCInfo' has a wrong offset!");

// ScriptStruct TGFGame.GlobalUserKey
// 0x0008 (0x0008 - 0x0000)
struct FGlobalUserKey final
{
public:
	int64                                         GlobalUserId;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalUserKey) == 0x000008, "Wrong alignment on FGlobalUserKey");
static_assert(sizeof(FGlobalUserKey) == 0x000008, "Wrong size on FGlobalUserKey");
static_assert(offsetof(FGlobalUserKey, GlobalUserId) == 0x000000, "Member 'FGlobalUserKey::GlobalUserId' has a wrong offset!");

// ScriptStruct TGFGame.GlobalUserUpdateCallback
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FGlobalUserUpdateCallback final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGlobalUserKey                         GlobalUserKey;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubscribe;                                      // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x4F];                                      // 0x0011(0x004F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGlobalUserUpdateCallback) == 0x000010, "Wrong alignment on FGlobalUserUpdateCallback");
static_assert(sizeof(FGlobalUserUpdateCallback) == 0x000060, "Wrong size on FGlobalUserUpdateCallback");
static_assert(offsetof(FGlobalUserUpdateCallback, bIsValid) == 0x000000, "Member 'FGlobalUserUpdateCallback::bIsValid' has a wrong offset!");
static_assert(offsetof(FGlobalUserUpdateCallback, GlobalUserKey) == 0x000008, "Member 'FGlobalUserUpdateCallback::GlobalUserKey' has a wrong offset!");
static_assert(offsetof(FGlobalUserUpdateCallback, bIsSubscribe) == 0x000010, "Member 'FGlobalUserUpdateCallback::bIsSubscribe' has a wrong offset!");

// ScriptStruct TGFGame.GuideConfigRow
// 0x0070 (0x0078 - 0x0008)
struct FGuideConfigRow final : public FTableRowBase
{
public:
	class FText                                   SheetNameText;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SheetTitleText;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         BelongToSheet;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      TextureArray;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMediaSource>>    MediaSourceArray;                                  // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuideConfigRow) == 0x000008, "Wrong alignment on FGuideConfigRow");
static_assert(sizeof(FGuideConfigRow) == 0x000078, "Wrong size on FGuideConfigRow");
static_assert(offsetof(FGuideConfigRow, SheetNameText) == 0x000008, "Member 'FGuideConfigRow::SheetNameText' has a wrong offset!");
static_assert(offsetof(FGuideConfigRow, SheetTitleText) == 0x000020, "Member 'FGuideConfigRow::SheetTitleText' has a wrong offset!");
static_assert(offsetof(FGuideConfigRow, BelongToSheet) == 0x000038, "Member 'FGuideConfigRow::BelongToSheet' has a wrong offset!");
static_assert(offsetof(FGuideConfigRow, Order) == 0x00003C, "Member 'FGuideConfigRow::Order' has a wrong offset!");
static_assert(offsetof(FGuideConfigRow, DescriptionText) == 0x000040, "Member 'FGuideConfigRow::DescriptionText' has a wrong offset!");
static_assert(offsetof(FGuideConfigRow, TextureArray) == 0x000058, "Member 'FGuideConfigRow::TextureArray' has a wrong offset!");
static_assert(offsetof(FGuideConfigRow, MediaSourceArray) == 0x000068, "Member 'FGuideConfigRow::MediaSourceArray' has a wrong offset!");

// ScriptStruct TGFGame.HeirloomGearGemSlot
// 0x0010 (0x0010 - 0x0000)
struct FHeirloomGearGemSlot final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InlaidShapeType;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AffixEffectiveLocation;                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeirloomGearGemSlot) == 0x000004, "Wrong alignment on FHeirloomGearGemSlot");
static_assert(sizeof(FHeirloomGearGemSlot) == 0x000010, "Wrong size on FHeirloomGearGemSlot");
static_assert(offsetof(FHeirloomGearGemSlot, bIsValid) == 0x000000, "Member 'FHeirloomGearGemSlot::bIsValid' has a wrong offset!");
static_assert(offsetof(FHeirloomGearGemSlot, SlotId) == 0x000004, "Member 'FHeirloomGearGemSlot::SlotId' has a wrong offset!");
static_assert(offsetof(FHeirloomGearGemSlot, InlaidShapeType) == 0x000008, "Member 'FHeirloomGearGemSlot::InlaidShapeType' has a wrong offset!");
static_assert(offsetof(FHeirloomGearGemSlot, AffixEffectiveLocation) == 0x00000C, "Member 'FHeirloomGearGemSlot::AffixEffectiveLocation' has a wrong offset!");

// ScriptStruct TGFGame.DRoleFacePinching
// 0x0038 (0x0038 - 0x0000)
struct FDRoleFacePinching final
{
public:
	int64                                         FacePinchingGuid;                                  // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceType;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HairType;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeardType;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinType;                                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HairColor;                                         // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeardColor;                                        // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TatooType;                                         // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TatooColor;                                        // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EyeColor;                                          // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScarType;                                          // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeupType;                                        // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeupColor;                                       // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDRoleFacePinching) == 0x000008, "Wrong alignment on FDRoleFacePinching");
static_assert(sizeof(FDRoleFacePinching) == 0x000038, "Wrong size on FDRoleFacePinching");
static_assert(offsetof(FDRoleFacePinching, FacePinchingGuid) == 0x000000, "Member 'FDRoleFacePinching::FacePinchingGuid' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, FaceType) == 0x000008, "Member 'FDRoleFacePinching::FaceType' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, HairType) == 0x00000C, "Member 'FDRoleFacePinching::HairType' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, BeardType) == 0x000010, "Member 'FDRoleFacePinching::BeardType' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, SkinType) == 0x000014, "Member 'FDRoleFacePinching::SkinType' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, HairColor) == 0x000018, "Member 'FDRoleFacePinching::HairColor' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, BeardColor) == 0x00001C, "Member 'FDRoleFacePinching::BeardColor' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, TatooType) == 0x000020, "Member 'FDRoleFacePinching::TatooType' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, TatooColor) == 0x000024, "Member 'FDRoleFacePinching::TatooColor' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, EyeColor) == 0x000028, "Member 'FDRoleFacePinching::EyeColor' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, ScarType) == 0x00002C, "Member 'FDRoleFacePinching::ScarType' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, MakeupType) == 0x000030, "Member 'FDRoleFacePinching::MakeupType' has a wrong offset!");
static_assert(offsetof(FDRoleFacePinching, MakeupColor) == 0x000034, "Member 'FDRoleFacePinching::MakeupColor' has a wrong offset!");

// ScriptStruct TGFGame.DRoleDressUp
// 0x0040 (0x0040 - 0x0000)
struct FDRoleDressUp final
{
public:
	int32                                         DefaultDressUpTypeId;                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDRoleFacePinching                     CurrentFacePinching;                               // 0x0008(0x0038)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDRoleDressUp) == 0x000008, "Wrong alignment on FDRoleDressUp");
static_assert(sizeof(FDRoleDressUp) == 0x000040, "Wrong size on FDRoleDressUp");
static_assert(offsetof(FDRoleDressUp, DefaultDressUpTypeId) == 0x000000, "Member 'FDRoleDressUp::DefaultDressUpTypeId' has a wrong offset!");
static_assert(offsetof(FDRoleDressUp, CurrentFacePinching) == 0x000008, "Member 'FDRoleDressUp::CurrentFacePinching' has a wrong offset!");

// ScriptStruct TGFGame.SDKNoticePictureInfo
// 0x0068 (0x0068 - 0x0000)
struct FSDKNoticePictureInfo final
{
public:
	class FString                                 PicUrl;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PicHash;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PicTitle;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PicSize;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScreenDir;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PicRedirectUrl;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraData;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDKNoticePictureInfo) == 0x000008, "Wrong alignment on FSDKNoticePictureInfo");
static_assert(sizeof(FSDKNoticePictureInfo) == 0x000068, "Wrong size on FSDKNoticePictureInfo");
static_assert(offsetof(FSDKNoticePictureInfo, PicUrl) == 0x000000, "Member 'FSDKNoticePictureInfo::PicUrl' has a wrong offset!");
static_assert(offsetof(FSDKNoticePictureInfo, PicHash) == 0x000010, "Member 'FSDKNoticePictureInfo::PicHash' has a wrong offset!");
static_assert(offsetof(FSDKNoticePictureInfo, PicTitle) == 0x000020, "Member 'FSDKNoticePictureInfo::PicTitle' has a wrong offset!");
static_assert(offsetof(FSDKNoticePictureInfo, PicSize) == 0x000030, "Member 'FSDKNoticePictureInfo::PicSize' has a wrong offset!");
static_assert(offsetof(FSDKNoticePictureInfo, ScreenDir) == 0x000040, "Member 'FSDKNoticePictureInfo::ScreenDir' has a wrong offset!");
static_assert(offsetof(FSDKNoticePictureInfo, PicRedirectUrl) == 0x000048, "Member 'FSDKNoticePictureInfo::PicRedirectUrl' has a wrong offset!");
static_assert(offsetof(FSDKNoticePictureInfo, ExtraData) == 0x000058, "Member 'FSDKNoticePictureInfo::ExtraData' has a wrong offset!");

// ScriptStruct TGFGame.SDKNoticeTextInfo
// 0x0080 (0x0080 - 0x0000)
struct FSDKNoticeTextInfo final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectUrl;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentId;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AppContentId;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LangType;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateTime;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExtraData;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSDKNoticePictureInfo>          PictureList;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDKNoticeTextInfo) == 0x000008, "Wrong alignment on FSDKNoticeTextInfo");
static_assert(sizeof(FSDKNoticeTextInfo) == 0x000080, "Wrong size on FSDKNoticeTextInfo");
static_assert(offsetof(FSDKNoticeTextInfo, Title) == 0x000000, "Member 'FSDKNoticeTextInfo::Title' has a wrong offset!");
static_assert(offsetof(FSDKNoticeTextInfo, Content) == 0x000010, "Member 'FSDKNoticeTextInfo::Content' has a wrong offset!");
static_assert(offsetof(FSDKNoticeTextInfo, RedirectUrl) == 0x000020, "Member 'FSDKNoticeTextInfo::RedirectUrl' has a wrong offset!");
static_assert(offsetof(FSDKNoticeTextInfo, ContentId) == 0x000030, "Member 'FSDKNoticeTextInfo::ContentId' has a wrong offset!");
static_assert(offsetof(FSDKNoticeTextInfo, AppContentId) == 0x000038, "Member 'FSDKNoticeTextInfo::AppContentId' has a wrong offset!");
static_assert(offsetof(FSDKNoticeTextInfo, LangType) == 0x000048, "Member 'FSDKNoticeTextInfo::LangType' has a wrong offset!");
static_assert(offsetof(FSDKNoticeTextInfo, UpdateTime) == 0x000058, "Member 'FSDKNoticeTextInfo::UpdateTime' has a wrong offset!");
static_assert(offsetof(FSDKNoticeTextInfo, ExtraData) == 0x000060, "Member 'FSDKNoticeTextInfo::ExtraData' has a wrong offset!");
static_assert(offsetof(FSDKNoticeTextInfo, PictureList) == 0x000070, "Member 'FSDKNoticeTextInfo::PictureList' has a wrong offset!");

// ScriptStruct TGFGame.SDKNoticeInfo
// 0x0178 (0x0178 - 0x0000)
struct FSDKNoticeInfo final
{
public:
	int32                                         NoticeId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeginTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndTime;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateTime;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSDKNoticePictureInfo>          PictureUrlList;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NoticeType;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NoticeGroup;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentType;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSDKNoticeTextInfo                     TextInfo;                                          // 0x0050(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 WebUrl;                                            // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppId;                                             // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppNoticeId;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status;                                            // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AreaList;                                          // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSDKNoticeTextInfo>             ContentList;                                       // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraData;                                         // 0x0128(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDKNoticeInfo) == 0x000008, "Wrong alignment on FSDKNoticeInfo");
static_assert(sizeof(FSDKNoticeInfo) == 0x000178, "Wrong size on FSDKNoticeInfo");
static_assert(offsetof(FSDKNoticeInfo, NoticeId) == 0x000000, "Member 'FSDKNoticeInfo::NoticeId' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, BeginTime) == 0x000004, "Member 'FSDKNoticeInfo::BeginTime' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, EndTime) == 0x000008, "Member 'FSDKNoticeInfo::EndTime' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, UpdateTime) == 0x00000C, "Member 'FSDKNoticeInfo::UpdateTime' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, PictureUrlList) == 0x000010, "Member 'FSDKNoticeInfo::PictureUrlList' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, NoticeType) == 0x000020, "Member 'FSDKNoticeInfo::NoticeType' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, NoticeGroup) == 0x000028, "Member 'FSDKNoticeInfo::NoticeGroup' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, Order) == 0x000038, "Member 'FSDKNoticeInfo::Order' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, ContentType) == 0x00003C, "Member 'FSDKNoticeInfo::ContentType' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, Language) == 0x000040, "Member 'FSDKNoticeInfo::Language' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, TextInfo) == 0x000050, "Member 'FSDKNoticeInfo::TextInfo' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, WebUrl) == 0x0000D0, "Member 'FSDKNoticeInfo::WebUrl' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, AppId) == 0x0000E0, "Member 'FSDKNoticeInfo::AppId' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, AppNoticeId) == 0x0000F0, "Member 'FSDKNoticeInfo::AppNoticeId' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, Status) == 0x000100, "Member 'FSDKNoticeInfo::Status' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, AreaList) == 0x000108, "Member 'FSDKNoticeInfo::AreaList' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, ContentList) == 0x000118, "Member 'FSDKNoticeInfo::ContentList' has a wrong offset!");
static_assert(offsetof(FSDKNoticeInfo, ExtraData) == 0x000128, "Member 'FSDKNoticeInfo::ExtraData' has a wrong offset!");

// ScriptStruct TGFGame.RoleCreateData
// 0x0060 (0x0060 - 0x0000)
struct FRoleCreateData final
{
public:
	int32                                         RoleTypeId;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoleName;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDRoleDressUp                          DressUp;                                           // 0x0018(0x0040)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Gender;                                            // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WithHelmetInView;                                  // 0x005C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRoleCreateData) == 0x000008, "Wrong alignment on FRoleCreateData");
static_assert(sizeof(FRoleCreateData) == 0x000060, "Wrong size on FRoleCreateData");
static_assert(offsetof(FRoleCreateData, RoleTypeId) == 0x000000, "Member 'FRoleCreateData::RoleTypeId' has a wrong offset!");
static_assert(offsetof(FRoleCreateData, RoleName) == 0x000008, "Member 'FRoleCreateData::RoleName' has a wrong offset!");
static_assert(offsetof(FRoleCreateData, DressUp) == 0x000018, "Member 'FRoleCreateData::DressUp' has a wrong offset!");
static_assert(offsetof(FRoleCreateData, Gender) == 0x000058, "Member 'FRoleCreateData::Gender' has a wrong offset!");
static_assert(offsetof(FRoleCreateData, WithHelmetInView) == 0x00005C, "Member 'FRoleCreateData::WithHelmetInView' has a wrong offset!");

// ScriptStruct TGFGame.MapNameConfigRow
// 0x0038 (0x0040 - 0x0008)
struct FMapNameConfigRow final : public FTableRowBase
{
public:
	int32                                         MapId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelType;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JoinMembers;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MapRes;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MapSelectBgRes;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapNameConfigRow) == 0x000008, "Wrong alignment on FMapNameConfigRow");
static_assert(sizeof(FMapNameConfigRow) == 0x000040, "Wrong size on FMapNameConfigRow");
static_assert(offsetof(FMapNameConfigRow, MapId) == 0x000008, "Member 'FMapNameConfigRow::MapId' has a wrong offset!");
static_assert(offsetof(FMapNameConfigRow, Difficulty) == 0x00000C, "Member 'FMapNameConfigRow::Difficulty' has a wrong offset!");
static_assert(offsetof(FMapNameConfigRow, LevelId) == 0x000010, "Member 'FMapNameConfigRow::LevelId' has a wrong offset!");
static_assert(offsetof(FMapNameConfigRow, LevelType) == 0x000014, "Member 'FMapNameConfigRow::LevelType' has a wrong offset!");
static_assert(offsetof(FMapNameConfigRow, MapName) == 0x000018, "Member 'FMapNameConfigRow::MapName' has a wrong offset!");
static_assert(offsetof(FMapNameConfigRow, JoinMembers) == 0x000028, "Member 'FMapNameConfigRow::JoinMembers' has a wrong offset!");
static_assert(offsetof(FMapNameConfigRow, MapRes) == 0x000030, "Member 'FMapNameConfigRow::MapRes' has a wrong offset!");
static_assert(offsetof(FMapNameConfigRow, MapSelectBgRes) == 0x000038, "Member 'FMapNameConfigRow::MapSelectBgRes' has a wrong offset!");

// ScriptStruct TGFGame.PVPMapRow
// 0x0030 (0x0038 - 0x0008)
struct FPVPMapRow final : public FTableRowBase
{
public:
	int32                                         MapId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MapName;                                           // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture2D*                             MapRes;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocked;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPVPMapRow) == 0x000008, "Wrong alignment on FPVPMapRow");
static_assert(sizeof(FPVPMapRow) == 0x000038, "Wrong size on FPVPMapRow");
static_assert(offsetof(FPVPMapRow, MapId) == 0x000008, "Member 'FPVPMapRow::MapId' has a wrong offset!");
static_assert(offsetof(FPVPMapRow, MapName) == 0x000010, "Member 'FPVPMapRow::MapName' has a wrong offset!");
static_assert(offsetof(FPVPMapRow, MapRes) == 0x000028, "Member 'FPVPMapRow::MapRes' has a wrong offset!");
static_assert(offsetof(FPVPMapRow, IsLocked) == 0x000030, "Member 'FPVPMapRow::IsLocked' has a wrong offset!");

// ScriptStruct TGFGame.MarketCost
// 0x0010 (0x0010 - 0x0000)
struct FMarketCost final
{
public:
	int32                                         VirtualItemId;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginPrice;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffordable;                                       // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarketCost) == 0x000004, "Wrong alignment on FMarketCost");
static_assert(sizeof(FMarketCost) == 0x000010, "Wrong size on FMarketCost");
static_assert(offsetof(FMarketCost, VirtualItemId) == 0x000000, "Member 'FMarketCost::VirtualItemId' has a wrong offset!");
static_assert(offsetof(FMarketCost, Amount) == 0x000004, "Member 'FMarketCost::Amount' has a wrong offset!");
static_assert(offsetof(FMarketCost, OriginPrice) == 0x000008, "Member 'FMarketCost::OriginPrice' has a wrong offset!");
static_assert(offsetof(FMarketCost, bAffordable) == 0x00000C, "Member 'FMarketCost::bAffordable' has a wrong offset!");

// ScriptStruct TGFGame.MarketProductTab
// 0x0028 (0x0028 - 0x0000)
struct FMarketProductTab final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         NextAutoRefreshTime;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMarketProduct*>                 Products;                                          // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarketProductTab) == 0x000008, "Wrong alignment on FMarketProductTab");
static_assert(sizeof(FMarketProductTab) == 0x000028, "Wrong size on FMarketProductTab");
static_assert(offsetof(FMarketProductTab, NextAutoRefreshTime) == 0x000008, "Member 'FMarketProductTab::NextAutoRefreshTime' has a wrong offset!");
static_assert(offsetof(FMarketProductTab, Products) == 0x000010, "Member 'FMarketProductTab::Products' has a wrong offset!");

// ScriptStruct TGFGame.MarqueeConfig
// 0x0188 (0x0188 - 0x0000)
struct FMarqueeConfig final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MarqueeId;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnable;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartDateTime;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDateTime;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarqueeType                                  MarqueeType;                                       // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortOrder;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Interval;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<int32>                                   ZoneWhitelistSet;                                  // 0x0038(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<int32>                                   ZoneBlacklistSet;                                  // 0x0088(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         VersionWhitelist;                                  // 0x00D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FString>                           RegionWhitelist;                                   // 0x00E0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCultureTextMap                        CultureTextMap;                                    // 0x0130(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarqueeConfig) == 0x000008, "Wrong alignment on FMarqueeConfig");
static_assert(sizeof(FMarqueeConfig) == 0x000188, "Wrong size on FMarqueeConfig");
static_assert(offsetof(FMarqueeConfig, bIsValid) == 0x000000, "Member 'FMarqueeConfig::bIsValid' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, MarqueeId) == 0x000004, "Member 'FMarqueeConfig::MarqueeId' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, bIsEnable) == 0x000008, "Member 'FMarqueeConfig::bIsEnable' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, StartDateTime) == 0x000010, "Member 'FMarqueeConfig::StartDateTime' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, EndDateTime) == 0x000018, "Member 'FMarqueeConfig::EndDateTime' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, MarqueeType) == 0x000020, "Member 'FMarqueeConfig::MarqueeType' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, SortOrder) == 0x000024, "Member 'FMarqueeConfig::SortOrder' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, LoopCount) == 0x000028, "Member 'FMarqueeConfig::LoopCount' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, Interval) == 0x000030, "Member 'FMarqueeConfig::Interval' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, ZoneWhitelistSet) == 0x000038, "Member 'FMarqueeConfig::ZoneWhitelistSet' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, ZoneBlacklistSet) == 0x000088, "Member 'FMarqueeConfig::ZoneBlacklistSet' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, VersionWhitelist) == 0x0000D8, "Member 'FMarqueeConfig::VersionWhitelist' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, RegionWhitelist) == 0x0000E0, "Member 'FMarqueeConfig::RegionWhitelist' has a wrong offset!");
static_assert(offsetof(FMarqueeConfig, CultureTextMap) == 0x000130, "Member 'FMarqueeConfig::CultureTextMap' has a wrong offset!");

// ScriptStruct TGFGame.MarqueeMessage
// 0x0020 (0x0020 - 0x0000)
struct FMarqueeMessage final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarqueeType                                  MarqueeType;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MarqueeId;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextContent;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarqueeMessage) == 0x000008, "Wrong alignment on FMarqueeMessage");
static_assert(sizeof(FMarqueeMessage) == 0x000020, "Wrong size on FMarqueeMessage");
static_assert(offsetof(FMarqueeMessage, bIsValid) == 0x000000, "Member 'FMarqueeMessage::bIsValid' has a wrong offset!");
static_assert(offsetof(FMarqueeMessage, MarqueeType) == 0x000001, "Member 'FMarqueeMessage::MarqueeType' has a wrong offset!");
static_assert(offsetof(FMarqueeMessage, MarqueeId) == 0x000004, "Member 'FMarqueeMessage::MarqueeId' has a wrong offset!");
static_assert(offsetof(FMarqueeMessage, SortOrder) == 0x000008, "Member 'FMarqueeMessage::SortOrder' has a wrong offset!");
static_assert(offsetof(FMarqueeMessage, TextContent) == 0x000010, "Member 'FMarqueeMessage::TextContent' has a wrong offset!");

// ScriptStruct TGFGame.MatchLevelInfo
// 0x0020 (0x0020 - 0x0000)
struct FMatchLevelInfo final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelId;                                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelType;                                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchLevelInfo) == 0x000008, "Wrong alignment on FMatchLevelInfo");
static_assert(sizeof(FMatchLevelInfo) == 0x000020, "Wrong size on FMatchLevelInfo");
static_assert(offsetof(FMatchLevelInfo, bIsValid) == 0x000000, "Member 'FMatchLevelInfo::bIsValid' has a wrong offset!");
static_assert(offsetof(FMatchLevelInfo, LevelId) == 0x000004, "Member 'FMatchLevelInfo::LevelId' has a wrong offset!");
static_assert(offsetof(FMatchLevelInfo, LevelType) == 0x000008, "Member 'FMatchLevelInfo::LevelType' has a wrong offset!");
static_assert(offsetof(FMatchLevelInfo, Region) == 0x000010, "Member 'FMatchLevelInfo::Region' has a wrong offset!");

// ScriptStruct TGFGame.CtiProductInfo
// 0x0088 (0x0088 - 0x0000)
struct FCtiProductInfo final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentPrice;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DecimalPoint;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayPrice;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalPrice;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformProductId;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductName;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionCode;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnifiedProductId;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCtiProductInfo) == 0x000008, "Wrong alignment on FCtiProductInfo");
static_assert(sizeof(FCtiProductInfo) == 0x000088, "Wrong size on FCtiProductInfo");
static_assert(offsetof(FCtiProductInfo, CurrencyCode) == 0x000000, "Member 'FCtiProductInfo::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FCtiProductInfo, CurrentPrice) == 0x000010, "Member 'FCtiProductInfo::CurrentPrice' has a wrong offset!");
static_assert(offsetof(FCtiProductInfo, DecimalPoint) == 0x000020, "Member 'FCtiProductInfo::DecimalPoint' has a wrong offset!");
static_assert(offsetof(FCtiProductInfo, DisplayPrice) == 0x000028, "Member 'FCtiProductInfo::DisplayPrice' has a wrong offset!");
static_assert(offsetof(FCtiProductInfo, OriginalPrice) == 0x000038, "Member 'FCtiProductInfo::OriginalPrice' has a wrong offset!");
static_assert(offsetof(FCtiProductInfo, PlatformProductId) == 0x000048, "Member 'FCtiProductInfo::PlatformProductId' has a wrong offset!");
static_assert(offsetof(FCtiProductInfo, ProductName) == 0x000058, "Member 'FCtiProductInfo::ProductName' has a wrong offset!");
static_assert(offsetof(FCtiProductInfo, RegionCode) == 0x000068, "Member 'FCtiProductInfo::RegionCode' has a wrong offset!");
static_assert(offsetof(FCtiProductInfo, UnifiedProductId) == 0x000078, "Member 'FCtiProductInfo::UnifiedProductId' has a wrong offset!");

// ScriptStruct TGFGame.PlayerProfile
// 0x0068 (0x0068 - 0x0000)
struct FPlayerProfile final
{
public:
	class FString                                 Open_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         User_id;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nick_name;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Logo_url;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sex;                                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Custom_nick_name;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Avatar_icon_type_id;                               // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Avatar_box_icon_type_id;                           // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stat_custom_nick_name_times;                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stat_avatar_icon_type_id_times;                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stat_avatar_box_icon_type_id_times;                // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerProfile) == 0x000008, "Wrong alignment on FPlayerProfile");
static_assert(sizeof(FPlayerProfile) == 0x000068, "Wrong size on FPlayerProfile");
static_assert(offsetof(FPlayerProfile, Open_id) == 0x000000, "Member 'FPlayerProfile::Open_id' has a wrong offset!");
static_assert(offsetof(FPlayerProfile, User_id) == 0x000010, "Member 'FPlayerProfile::User_id' has a wrong offset!");
static_assert(offsetof(FPlayerProfile, Nick_name) == 0x000018, "Member 'FPlayerProfile::Nick_name' has a wrong offset!");
static_assert(offsetof(FPlayerProfile, Logo_url) == 0x000028, "Member 'FPlayerProfile::Logo_url' has a wrong offset!");
static_assert(offsetof(FPlayerProfile, Sex) == 0x000038, "Member 'FPlayerProfile::Sex' has a wrong offset!");
static_assert(offsetof(FPlayerProfile, Custom_nick_name) == 0x000040, "Member 'FPlayerProfile::Custom_nick_name' has a wrong offset!");
static_assert(offsetof(FPlayerProfile, Avatar_icon_type_id) == 0x000050, "Member 'FPlayerProfile::Avatar_icon_type_id' has a wrong offset!");
static_assert(offsetof(FPlayerProfile, Avatar_box_icon_type_id) == 0x000054, "Member 'FPlayerProfile::Avatar_box_icon_type_id' has a wrong offset!");
static_assert(offsetof(FPlayerProfile, Stat_custom_nick_name_times) == 0x000058, "Member 'FPlayerProfile::Stat_custom_nick_name_times' has a wrong offset!");
static_assert(offsetof(FPlayerProfile, Stat_avatar_icon_type_id_times) == 0x00005C, "Member 'FPlayerProfile::Stat_avatar_icon_type_id_times' has a wrong offset!");
static_assert(offsetof(FPlayerProfile, Stat_avatar_box_icon_type_id_times) == 0x000060, "Member 'FPlayerProfile::Stat_avatar_box_icon_type_id_times' has a wrong offset!");

// ScriptStruct TGFGame.PVPModeRow
// 0x0028 (0x0030 - 0x0008)
struct FPVPModeRow final : public FTableRowBase
{
public:
	int32                                         ModeId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ModeName;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsLocked;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPVPModeRow) == 0x000008, "Wrong alignment on FPVPModeRow");
static_assert(sizeof(FPVPModeRow) == 0x000030, "Wrong size on FPVPModeRow");
static_assert(offsetof(FPVPModeRow, ModeId) == 0x000008, "Member 'FPVPModeRow::ModeId' has a wrong offset!");
static_assert(offsetof(FPVPModeRow, ModeName) == 0x000010, "Member 'FPVPModeRow::ModeName' has a wrong offset!");
static_assert(offsetof(FPVPModeRow, IsLocked) == 0x000028, "Member 'FPVPModeRow::IsLocked' has a wrong offset!");

// ScriptStruct TGFGame.RoleAttributeValue
// 0x000C (0x000C - 0x0000)
struct FRoleAttributeValue final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Total_value;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         base_value;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoleAttributeValue) == 0x000004, "Wrong alignment on FRoleAttributeValue");
static_assert(sizeof(FRoleAttributeValue) == 0x00000C, "Wrong size on FRoleAttributeValue");
static_assert(offsetof(FRoleAttributeValue, Type_id) == 0x000000, "Member 'FRoleAttributeValue::Type_id' has a wrong offset!");
static_assert(offsetof(FRoleAttributeValue, Total_value) == 0x000004, "Member 'FRoleAttributeValue::Total_value' has a wrong offset!");
static_assert(offsetof(FRoleAttributeValue, base_value) == 0x000008, "Member 'FRoleAttributeValue::base_value' has a wrong offset!");

// ScriptStruct TGFGame.RoleUpdateCallback
// 0x0130 (0x0130 - 0x0000)
struct alignas(0x10) FRoleUpdateCallback final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubscribe;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FRoleKey>                         RoleKeySet;                                        // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FRoleKey, class URoleInfo*>       RoleInfoMap;                                       // 0x0058(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x88];                                      // 0x00A8(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRoleUpdateCallback) == 0x000010, "Wrong alignment on FRoleUpdateCallback");
static_assert(sizeof(FRoleUpdateCallback) == 0x000130, "Wrong size on FRoleUpdateCallback");
static_assert(offsetof(FRoleUpdateCallback, bIsValid) == 0x000000, "Member 'FRoleUpdateCallback::bIsValid' has a wrong offset!");
static_assert(offsetof(FRoleUpdateCallback, bIsSubscribe) == 0x000001, "Member 'FRoleUpdateCallback::bIsSubscribe' has a wrong offset!");
static_assert(offsetof(FRoleUpdateCallback, RoleKeySet) == 0x000008, "Member 'FRoleUpdateCallback::RoleKeySet' has a wrong offset!");
static_assert(offsetof(FRoleUpdateCallback, RoleInfoMap) == 0x000058, "Member 'FRoleUpdateCallback::RoleInfoMap' has a wrong offset!");

// ScriptStruct TGFGame.SDKBaseResult
// 0x0040 (0x0040 - 0x0000)
struct FSDKBaseResult
{
public:
	int32                                         MethodId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetCode;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RetMsg;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThirdCode;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThirdMsg;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraJson;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDKBaseResult) == 0x000008, "Wrong alignment on FSDKBaseResult");
static_assert(sizeof(FSDKBaseResult) == 0x000040, "Wrong size on FSDKBaseResult");
static_assert(offsetof(FSDKBaseResult, MethodId) == 0x000000, "Member 'FSDKBaseResult::MethodId' has a wrong offset!");
static_assert(offsetof(FSDKBaseResult, RetCode) == 0x000004, "Member 'FSDKBaseResult::RetCode' has a wrong offset!");
static_assert(offsetof(FSDKBaseResult, RetMsg) == 0x000008, "Member 'FSDKBaseResult::RetMsg' has a wrong offset!");
static_assert(offsetof(FSDKBaseResult, ThirdCode) == 0x000018, "Member 'FSDKBaseResult::ThirdCode' has a wrong offset!");
static_assert(offsetof(FSDKBaseResult, ThirdMsg) == 0x000020, "Member 'FSDKBaseResult::ThirdMsg' has a wrong offset!");
static_assert(offsetof(FSDKBaseResult, ExtraJson) == 0x000030, "Member 'FSDKBaseResult::ExtraJson' has a wrong offset!");

// ScriptStruct TGFGame.SDKLoginResult
// 0x0130 (0x0170 - 0x0040)
struct FSDKLoginResult final : public FSDKBaseResult
{
public:
	class FString                                 OpenID;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TokenExpireTime;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstLogin;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegChannelDis;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gender;                                            // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Birthday;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PictureUrl;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pf;                                                // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PfKey;                                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RealNameAuth;                                      // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChannelID;                                         // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Channel;                                           // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelInfo;                                       // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConfirmCode;                                       // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConfirmCodeExpireTime;                             // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BindList;                                          // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LegalDoc;                                          // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransferCode;                                      // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransferCodeExpireTime;                            // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeleteAccountStatus;                               // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeleteAccountInfo;                                 // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeleteLIAccountStatus;                             // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Email;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDKLoginResult) == 0x000008, "Wrong alignment on FSDKLoginResult");
static_assert(sizeof(FSDKLoginResult) == 0x000170, "Wrong size on FSDKLoginResult");
static_assert(offsetof(FSDKLoginResult, OpenID) == 0x000040, "Member 'FSDKLoginResult::OpenID' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, Token) == 0x000050, "Member 'FSDKLoginResult::Token' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, TokenExpireTime) == 0x000060, "Member 'FSDKLoginResult::TokenExpireTime' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, FirstLogin) == 0x000064, "Member 'FSDKLoginResult::FirstLogin' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, RegChannelDis) == 0x000068, "Member 'FSDKLoginResult::RegChannelDis' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, UserName) == 0x000078, "Member 'FSDKLoginResult::UserName' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, Gender) == 0x000088, "Member 'FSDKLoginResult::Gender' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, Birthday) == 0x000090, "Member 'FSDKLoginResult::Birthday' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, PictureUrl) == 0x0000A0, "Member 'FSDKLoginResult::PictureUrl' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, Pf) == 0x0000B0, "Member 'FSDKLoginResult::Pf' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, PfKey) == 0x0000C0, "Member 'FSDKLoginResult::PfKey' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, RealNameAuth) == 0x0000D0, "Member 'FSDKLoginResult::RealNameAuth' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, ChannelID) == 0x0000D4, "Member 'FSDKLoginResult::ChannelID' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, Channel) == 0x0000D8, "Member 'FSDKLoginResult::Channel' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, ChannelInfo) == 0x0000E8, "Member 'FSDKLoginResult::ChannelInfo' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, ConfirmCode) == 0x0000F8, "Member 'FSDKLoginResult::ConfirmCode' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, ConfirmCodeExpireTime) == 0x000108, "Member 'FSDKLoginResult::ConfirmCodeExpireTime' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, BindList) == 0x000110, "Member 'FSDKLoginResult::BindList' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, LegalDoc) == 0x000120, "Member 'FSDKLoginResult::LegalDoc' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, TransferCode) == 0x000130, "Member 'FSDKLoginResult::TransferCode' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, TransferCodeExpireTime) == 0x000140, "Member 'FSDKLoginResult::TransferCodeExpireTime' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, DeleteAccountStatus) == 0x000144, "Member 'FSDKLoginResult::DeleteAccountStatus' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, DeleteAccountInfo) == 0x000148, "Member 'FSDKLoginResult::DeleteAccountInfo' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, DeleteLIAccountStatus) == 0x000158, "Member 'FSDKLoginResult::DeleteLIAccountStatus' has a wrong offset!");
static_assert(offsetof(FSDKLoginResult, Email) == 0x000160, "Member 'FSDKLoginResult::Email' has a wrong offset!");

// ScriptStruct TGFGame.SocialToggleConfigRow
// 0x0080 (0x0088 - 0x0008)
struct FSocialToggleConfigRow final : public FTableRowBase
{
public:
	ESocialToggleType                             ToggleType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ToggleName;                                        // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              GrayIconTexture;                                   // 0x0058(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocialToggleConfigRow) == 0x000008, "Wrong alignment on FSocialToggleConfigRow");
static_assert(sizeof(FSocialToggleConfigRow) == 0x000088, "Wrong size on FSocialToggleConfigRow");
static_assert(offsetof(FSocialToggleConfigRow, ToggleType) == 0x000008, "Member 'FSocialToggleConfigRow::ToggleType' has a wrong offset!");
static_assert(offsetof(FSocialToggleConfigRow, ToggleName) == 0x000010, "Member 'FSocialToggleConfigRow::ToggleName' has a wrong offset!");
static_assert(offsetof(FSocialToggleConfigRow, IconTexture) == 0x000028, "Member 'FSocialToggleConfigRow::IconTexture' has a wrong offset!");
static_assert(offsetof(FSocialToggleConfigRow, GrayIconTexture) == 0x000058, "Member 'FSocialToggleConfigRow::GrayIconTexture' has a wrong offset!");

// ScriptStruct TGFGame.StringResult
// 0x0018 (0x0018 - 0x0000)
struct FStringResult final
{
public:
	bool                                          bIsHandled;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutString;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStringResult) == 0x000008, "Wrong alignment on FStringResult");
static_assert(sizeof(FStringResult) == 0x000018, "Wrong size on FStringResult");
static_assert(offsetof(FStringResult, bIsHandled) == 0x000000, "Member 'FStringResult::bIsHandled' has a wrong offset!");
static_assert(offsetof(FStringResult, OutString) == 0x000008, "Member 'FStringResult::OutString' has a wrong offset!");

// ScriptStruct TGFGame.TGFGameAdventureDetailConfigRow
// 0x0068 (0x0070 - 0x0008)
struct FTGFGameAdventureDetailConfigRow final : public FTableRowBase
{
public:
	int32                                         AdventureID;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TitleIcon;                                         // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LetterContent;                                     // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFGameAdventureDetailConfigRow) == 0x000008, "Wrong alignment on FTGFGameAdventureDetailConfigRow");
static_assert(sizeof(FTGFGameAdventureDetailConfigRow) == 0x000070, "Wrong size on FTGFGameAdventureDetailConfigRow");
static_assert(offsetof(FTGFGameAdventureDetailConfigRow, AdventureID) == 0x000008, "Member 'FTGFGameAdventureDetailConfigRow::AdventureID' has a wrong offset!");
static_assert(offsetof(FTGFGameAdventureDetailConfigRow, Title) == 0x000010, "Member 'FTGFGameAdventureDetailConfigRow::Title' has a wrong offset!");
static_assert(offsetof(FTGFGameAdventureDetailConfigRow, TitleIcon) == 0x000028, "Member 'FTGFGameAdventureDetailConfigRow::TitleIcon' has a wrong offset!");
static_assert(offsetof(FTGFGameAdventureDetailConfigRow, LetterContent) == 0x000058, "Member 'FTGFGameAdventureDetailConfigRow::LetterContent' has a wrong offset!");

// ScriptStruct TGFGame.TGFSteamAchievementTaskParamConfigRow
// 0x0028 (0x0030 - 0x0008)
struct FTGFSteamAchievementTaskParamConfigRow final : public FTableRowBase
{
public:
	ETGFInGameRookieTaskType                      ClientTaskType;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ArrParams;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFSteamAchievementTaskParamConfigRow) == 0x000008, "Wrong alignment on FTGFSteamAchievementTaskParamConfigRow");
static_assert(sizeof(FTGFSteamAchievementTaskParamConfigRow) == 0x000030, "Wrong size on FTGFSteamAchievementTaskParamConfigRow");
static_assert(offsetof(FTGFSteamAchievementTaskParamConfigRow, ClientTaskType) == 0x000008, "Member 'FTGFSteamAchievementTaskParamConfigRow::ClientTaskType' has a wrong offset!");
static_assert(offsetof(FTGFSteamAchievementTaskParamConfigRow, ArrParams) == 0x000010, "Member 'FTGFSteamAchievementTaskParamConfigRow::ArrParams' has a wrong offset!");
static_assert(offsetof(FTGFSteamAchievementTaskParamConfigRow, Comment) == 0x000020, "Member 'FTGFSteamAchievementTaskParamConfigRow::Comment' has a wrong offset!");

// ScriptStruct TGFGame.TextTableRaw
// 0x0020 (0x0028 - 0x0008)
struct FTextTableRaw final : public FTableRowBase
{
public:
	class FString                                 CN;                                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EN;                                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextTableRaw) == 0x000008, "Wrong alignment on FTextTableRaw");
static_assert(sizeof(FTextTableRaw) == 0x000028, "Wrong size on FTextTableRaw");
static_assert(offsetof(FTextTableRaw, CN) == 0x000008, "Member 'FTextTableRaw::CN' has a wrong offset!");
static_assert(offsetof(FTextTableRaw, EN) == 0x000018, "Member 'FTextTableRaw::EN' has a wrong offset!");

// ScriptStruct TGFGame.TgfAudioSystemSettings
// 0x000C (0x000C - 0x0000)
struct FTgfAudioSystemSettings final
{
public:
	float                                         MasterVolume;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BGMVolume;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SFXVolume;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfAudioSystemSettings) == 0x000004, "Wrong alignment on FTgfAudioSystemSettings");
static_assert(sizeof(FTgfAudioSystemSettings) == 0x00000C, "Wrong size on FTgfAudioSystemSettings");
static_assert(offsetof(FTgfAudioSystemSettings, MasterVolume) == 0x000000, "Member 'FTgfAudioSystemSettings::MasterVolume' has a wrong offset!");
static_assert(offsetof(FTgfAudioSystemSettings, BGMVolume) == 0x000004, "Member 'FTgfAudioSystemSettings::BGMVolume' has a wrong offset!");
static_assert(offsetof(FTgfAudioSystemSettings, SFXVolume) == 0x000008, "Member 'FTgfAudioSystemSettings::SFXVolume' has a wrong offset!");

// ScriptStruct TGFGame.TGFConditionRule
// 0x0001 (0x0001 - 0x0000)
struct FTGFConditionRule final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFConditionRule) == 0x000001, "Wrong alignment on FTGFConditionRule");
static_assert(sizeof(FTGFConditionRule) == 0x000001, "Wrong size on FTGFConditionRule");

// ScriptStruct TGFGame.TGFCraftingSlotData
// 0x0020 (0x0020 - 0x0000)
struct FTGFCraftingSlotData final
{
public:
	int32                                         RecipeId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UncompletedCount;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         StartTime;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TimeCost;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFCraftingSlotData) == 0x000008, "Wrong alignment on FTGFCraftingSlotData");
static_assert(sizeof(FTGFCraftingSlotData) == 0x000020, "Wrong size on FTGFCraftingSlotData");
static_assert(offsetof(FTGFCraftingSlotData, RecipeId) == 0x000000, "Member 'FTGFCraftingSlotData::RecipeId' has a wrong offset!");
static_assert(offsetof(FTGFCraftingSlotData, Count) == 0x000004, "Member 'FTGFCraftingSlotData::Count' has a wrong offset!");
static_assert(offsetof(FTGFCraftingSlotData, UncompletedCount) == 0x000008, "Member 'FTGFCraftingSlotData::UncompletedCount' has a wrong offset!");
static_assert(offsetof(FTGFCraftingSlotData, StartTime) == 0x000010, "Member 'FTGFCraftingSlotData::StartTime' has a wrong offset!");
static_assert(offsetof(FTGFCraftingSlotData, TimeCost) == 0x000018, "Member 'FTGFCraftingSlotData::TimeCost' has a wrong offset!");

// ScriptStruct TGFGame.TGFItemMoveAction
// 0x0040 (0x0040 - 0x0000)
struct FTGFItemMoveAction final
{
public:
	struct FTGFItemPosition                       Src_cell;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTGFItemPosition                       Dest_cell;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Stack_count;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Src_count_after_stack;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dest_count_after_stack;                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Heap_count;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFItemMoveAction) == 0x000008, "Wrong alignment on FTGFItemMoveAction");
static_assert(sizeof(FTGFItemMoveAction) == 0x000040, "Wrong size on FTGFItemMoveAction");
static_assert(offsetof(FTGFItemMoveAction, Src_cell) == 0x000000, "Member 'FTGFItemMoveAction::Src_cell' has a wrong offset!");
static_assert(offsetof(FTGFItemMoveAction, Dest_cell) == 0x000018, "Member 'FTGFItemMoveAction::Dest_cell' has a wrong offset!");
static_assert(offsetof(FTGFItemMoveAction, Stack_count) == 0x000030, "Member 'FTGFItemMoveAction::Stack_count' has a wrong offset!");
static_assert(offsetof(FTGFItemMoveAction, Src_count_after_stack) == 0x000034, "Member 'FTGFItemMoveAction::Src_count_after_stack' has a wrong offset!");
static_assert(offsetof(FTGFItemMoveAction, Dest_count_after_stack) == 0x000038, "Member 'FTGFItemMoveAction::Dest_count_after_stack' has a wrong offset!");
static_assert(offsetof(FTGFItemMoveAction, Heap_count) == 0x00003C, "Member 'FTGFItemMoveAction::Heap_count' has a wrong offset!");

// ScriptStruct TGFGame.TGFItemOffset
// 0x0010 (0x0010 - 0x0000)
struct FTGFItemOffset final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Expire_offset;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFItemOffset) == 0x000008, "Wrong alignment on FTGFItemOffset");
static_assert(sizeof(FTGFItemOffset) == 0x000010, "Wrong size on FTGFItemOffset");
static_assert(offsetof(FTGFItemOffset, Type_id) == 0x000000, "Member 'FTGFItemOffset::Type_id' has a wrong offset!");
static_assert(offsetof(FTGFItemOffset, Count) == 0x000004, "Member 'FTGFItemOffset::Count' has a wrong offset!");
static_assert(offsetof(FTGFItemOffset, Expire_offset) == 0x000008, "Member 'FTGFItemOffset::Expire_offset' has a wrong offset!");

// ScriptStruct TGFGame.TGFMailMultiLanguage
// 0x0020 (0x0020 - 0x0000)
struct FTGFMailMultiLanguage final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFMailMultiLanguage) == 0x000008, "Wrong alignment on FTGFMailMultiLanguage");
static_assert(sizeof(FTGFMailMultiLanguage) == 0x000020, "Wrong size on FTGFMailMultiLanguage");
static_assert(offsetof(FTGFMailMultiLanguage, Title) == 0x000000, "Member 'FTGFMailMultiLanguage::Title' has a wrong offset!");
static_assert(offsetof(FTGFMailMultiLanguage, Content) == 0x000010, "Member 'FTGFMailMultiLanguage::Content' has a wrong offset!");

// ScriptStruct TGFGame.TGFMailItemOffset
// 0x0018 (0x0018 - 0x0000)
struct FTGFMailItemOffset final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFItemOffset                         ItemOffset;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFMailItemOffset) == 0x000008, "Wrong alignment on FTGFMailItemOffset");
static_assert(sizeof(FTGFMailItemOffset) == 0x000018, "Wrong size on FTGFMailItemOffset");
static_assert(offsetof(FTGFMailItemOffset, Index) == 0x000000, "Member 'FTGFMailItemOffset::Index' has a wrong offset!");
static_assert(offsetof(FTGFMailItemOffset, ItemOffset) == 0x000008, "Member 'FTGFMailItemOffset::ItemOffset' has a wrong offset!");

// ScriptStruct TGFGame.TGFMailItem
// 0x0060 (0x0060 - 0x0000)
struct FTGFMailItem final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFItem                               Item;                                              // 0x0008(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFMailItem) == 0x000008, "Wrong alignment on FTGFMailItem");
static_assert(sizeof(FTGFMailItem) == 0x000060, "Wrong size on FTGFMailItem");
static_assert(offsetof(FTGFMailItem, Index) == 0x000000, "Member 'FTGFMailItem::Index' has a wrong offset!");
static_assert(offsetof(FTGFMailItem, Item) == 0x000008, "Member 'FTGFMailItem::Item' has a wrong offset!");

// ScriptStruct TGFGame.TGFMailUserInfo
// 0x0080 (0x0080 - 0x0000)
struct FTGFMailUserInfo final
{
public:
	struct FPlayerProfile                         Profile;                                           // 0x0000(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int64                                         Account_id;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Account_type;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Login_channel;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Friend_channel;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFMailUserInfo) == 0x000008, "Wrong alignment on FTGFMailUserInfo");
static_assert(sizeof(FTGFMailUserInfo) == 0x000080, "Wrong size on FTGFMailUserInfo");
static_assert(offsetof(FTGFMailUserInfo, Profile) == 0x000000, "Member 'FTGFMailUserInfo::Profile' has a wrong offset!");
static_assert(offsetof(FTGFMailUserInfo, Account_id) == 0x000068, "Member 'FTGFMailUserInfo::Account_id' has a wrong offset!");
static_assert(offsetof(FTGFMailUserInfo, Account_type) == 0x000070, "Member 'FTGFMailUserInfo::Account_type' has a wrong offset!");
static_assert(offsetof(FTGFMailUserInfo, Login_channel) == 0x000074, "Member 'FTGFMailUserInfo::Login_channel' has a wrong offset!");
static_assert(offsetof(FTGFMailUserInfo, Friend_channel) == 0x000078, "Member 'FTGFMailUserInfo::Friend_channel' has a wrong offset!");

// ScriptStruct TGFGame.TGFMailContent
// 0x0200 (0x0200 - 0x0000)
struct FTGFMailContent final
{
public:
	int64                                         Mail_id;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnMailMajorType                   Major_type;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFProtoTgfEnMailStatusType                  Status;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFMailUserInfo                       Sender;                                            // 0x0030(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Tip;                                               // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Delivery_time;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Start_time;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Local_start_time;                                  // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Show_time;                                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Expired_time;                                      // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mail_template_id;                                  // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            Mail_template_extensions;                          // 0x00F0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FTGFMailMultiLanguage>     Language_data;                                     // 0x0140(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FTGFMailItemOffset>             Attachments_offset;                                // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFMailItem>                   Attachments_detail;                                // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<int32>                                   ReceivedIndexes;                                   // 0x01B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFMailContent) == 0x000008, "Wrong alignment on FTGFMailContent");
static_assert(sizeof(FTGFMailContent) == 0x000200, "Wrong size on FTGFMailContent");
static_assert(offsetof(FTGFMailContent, Mail_id) == 0x000000, "Member 'FTGFMailContent::Mail_id' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Major_type) == 0x000008, "Member 'FTGFMailContent::Major_type' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Status) == 0x000009, "Member 'FTGFMailContent::Status' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Title) == 0x000010, "Member 'FTGFMailContent::Title' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Content) == 0x000020, "Member 'FTGFMailContent::Content' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Sender) == 0x000030, "Member 'FTGFMailContent::Sender' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Tip) == 0x0000B0, "Member 'FTGFMailContent::Tip' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Delivery_time) == 0x0000C0, "Member 'FTGFMailContent::Delivery_time' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Start_time) == 0x0000C8, "Member 'FTGFMailContent::Start_time' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Local_start_time) == 0x0000D0, "Member 'FTGFMailContent::Local_start_time' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Show_time) == 0x0000D8, "Member 'FTGFMailContent::Show_time' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Expired_time) == 0x0000E0, "Member 'FTGFMailContent::Expired_time' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Mail_template_id) == 0x0000E8, "Member 'FTGFMailContent::Mail_template_id' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Mail_template_extensions) == 0x0000F0, "Member 'FTGFMailContent::Mail_template_extensions' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Language_data) == 0x000140, "Member 'FTGFMailContent::Language_data' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Attachments_offset) == 0x000190, "Member 'FTGFMailContent::Attachments_offset' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, Attachments_detail) == 0x0001A0, "Member 'FTGFMailContent::Attachments_detail' has a wrong offset!");
static_assert(offsetof(FTGFMailContent, ReceivedIndexes) == 0x0001B0, "Member 'FTGFMailContent::ReceivedIndexes' has a wrong offset!");

// ScriptStruct TGFGame.TGFRegionData
// 0x0040 (0x0040 - 0x0000)
struct FTGFRegionData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpeedtestIp;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeedtestPort;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LatencyMillisecond;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClusterId;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFRegionData) == 0x000008, "Wrong alignment on FTGFRegionData");
static_assert(sizeof(FTGFRegionData) == 0x000040, "Wrong size on FTGFRegionData");
static_assert(offsetof(FTGFRegionData, ID) == 0x000000, "Member 'FTGFRegionData::ID' has a wrong offset!");
static_assert(offsetof(FTGFRegionData, Name) == 0x000010, "Member 'FTGFRegionData::Name' has a wrong offset!");
static_assert(offsetof(FTGFRegionData, SpeedtestIp) == 0x000020, "Member 'FTGFRegionData::SpeedtestIp' has a wrong offset!");
static_assert(offsetof(FTGFRegionData, SpeedtestPort) == 0x000030, "Member 'FTGFRegionData::SpeedtestPort' has a wrong offset!");
static_assert(offsetof(FTGFRegionData, LatencyMillisecond) == 0x000034, "Member 'FTGFRegionData::LatencyMillisecond' has a wrong offset!");
static_assert(offsetof(FTGFRegionData, ClusterId) == 0x000038, "Member 'FTGFRegionData::ClusterId' has a wrong offset!");

// ScriptStruct TGFGame.TGFRegionDetailData
// 0x0098 (0x0098 - 0x0000)
struct FTGFRegionDetailData final
{
public:
	bool                                          ShowDsRegion;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpeedtestInterval;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeedtestPacketCount;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GRomeLinkMgrDomain;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GRomeLinkMgrDomainPort;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URegionData*>                    DsRegions;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class URegionData*>                    HiddenDsRegions;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, class URegionData*>               TMapClusterIdRegion;                               // 0x0048(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFRegionDetailData) == 0x000008, "Wrong alignment on FTGFRegionDetailData");
static_assert(sizeof(FTGFRegionDetailData) == 0x000098, "Wrong size on FTGFRegionDetailData");
static_assert(offsetof(FTGFRegionDetailData, ShowDsRegion) == 0x000000, "Member 'FTGFRegionDetailData::ShowDsRegion' has a wrong offset!");
static_assert(offsetof(FTGFRegionDetailData, SpeedtestInterval) == 0x000004, "Member 'FTGFRegionDetailData::SpeedtestInterval' has a wrong offset!");
static_assert(offsetof(FTGFRegionDetailData, SpeedtestPacketCount) == 0x000008, "Member 'FTGFRegionDetailData::SpeedtestPacketCount' has a wrong offset!");
static_assert(offsetof(FTGFRegionDetailData, GRomeLinkMgrDomain) == 0x000010, "Member 'FTGFRegionDetailData::GRomeLinkMgrDomain' has a wrong offset!");
static_assert(offsetof(FTGFRegionDetailData, GRomeLinkMgrDomainPort) == 0x000020, "Member 'FTGFRegionDetailData::GRomeLinkMgrDomainPort' has a wrong offset!");
static_assert(offsetof(FTGFRegionDetailData, DsRegions) == 0x000028, "Member 'FTGFRegionDetailData::DsRegions' has a wrong offset!");
static_assert(offsetof(FTGFRegionDetailData, HiddenDsRegions) == 0x000038, "Member 'FTGFRegionDetailData::HiddenDsRegions' has a wrong offset!");
static_assert(offsetof(FTGFRegionDetailData, TMapClusterIdRegion) == 0x000048, "Member 'FTGFRegionDetailData::TMapClusterIdRegion' has a wrong offset!");

// ScriptStruct TGFGame.TGFReportRecord
// 0x0090 (0x0090 - 0x0000)
struct FTGFReportRecord final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventType;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str1;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str2;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str3;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str4;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str5;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Int1;                                              // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Int2;                                              // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Int3;                                              // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ActionTime;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFReportRecord) == 0x000008, "Wrong alignment on FTGFReportRecord");
static_assert(sizeof(FTGFReportRecord) == 0x000090, "Wrong size on FTGFReportRecord");
static_assert(offsetof(FTGFReportRecord, EventName) == 0x000000, "Member 'FTGFReportRecord::EventName' has a wrong offset!");
static_assert(offsetof(FTGFReportRecord, EventType) == 0x000010, "Member 'FTGFReportRecord::EventType' has a wrong offset!");
static_assert(offsetof(FTGFReportRecord, Str1) == 0x000020, "Member 'FTGFReportRecord::Str1' has a wrong offset!");
static_assert(offsetof(FTGFReportRecord, Str2) == 0x000030, "Member 'FTGFReportRecord::Str2' has a wrong offset!");
static_assert(offsetof(FTGFReportRecord, Str3) == 0x000040, "Member 'FTGFReportRecord::Str3' has a wrong offset!");
static_assert(offsetof(FTGFReportRecord, Str4) == 0x000050, "Member 'FTGFReportRecord::Str4' has a wrong offset!");
static_assert(offsetof(FTGFReportRecord, Str5) == 0x000060, "Member 'FTGFReportRecord::Str5' has a wrong offset!");
static_assert(offsetof(FTGFReportRecord, Int1) == 0x000070, "Member 'FTGFReportRecord::Int1' has a wrong offset!");
static_assert(offsetof(FTGFReportRecord, Int2) == 0x000078, "Member 'FTGFReportRecord::Int2' has a wrong offset!");
static_assert(offsetof(FTGFReportRecord, Int3) == 0x000080, "Member 'FTGFReportRecord::Int3' has a wrong offset!");
static_assert(offsetof(FTGFReportRecord, ActionTime) == 0x000088, "Member 'FTGFReportRecord::ActionTime' has a wrong offset!");

// ScriptStruct TGFGame.TGFScreenResolutionEntry
// 0x000C (0x000C - 0x0000)
struct FTGFScreenResolutionEntry final
{
public:
	uint32                                        Width;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Height;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        RefreshRate;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFScreenResolutionEntry) == 0x000004, "Wrong alignment on FTGFScreenResolutionEntry");
static_assert(sizeof(FTGFScreenResolutionEntry) == 0x00000C, "Wrong size on FTGFScreenResolutionEntry");
static_assert(offsetof(FTGFScreenResolutionEntry, Width) == 0x000000, "Member 'FTGFScreenResolutionEntry::Width' has a wrong offset!");
static_assert(offsetof(FTGFScreenResolutionEntry, Height) == 0x000004, "Member 'FTGFScreenResolutionEntry::Height' has a wrong offset!");
static_assert(offsetof(FTGFScreenResolutionEntry, RefreshRate) == 0x000008, "Member 'FTGFScreenResolutionEntry::RefreshRate' has a wrong offset!");

// ScriptStruct TGFGame.TGFScreenResolutionPackage
// 0x0030 (0x0030 - 0x0000)
struct FTGFScreenResolutionPackage final
{
public:
	TArray<struct FTGFScreenResolutionEntry>      FullScreenResolutions;                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFScreenResolutionEntry>      WindowedFullScreenResolutions;                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFScreenResolutionEntry>      WindowedResolutions;                               // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFScreenResolutionPackage) == 0x000008, "Wrong alignment on FTGFScreenResolutionPackage");
static_assert(sizeof(FTGFScreenResolutionPackage) == 0x000030, "Wrong size on FTGFScreenResolutionPackage");
static_assert(offsetof(FTGFScreenResolutionPackage, FullScreenResolutions) == 0x000000, "Member 'FTGFScreenResolutionPackage::FullScreenResolutions' has a wrong offset!");
static_assert(offsetof(FTGFScreenResolutionPackage, WindowedFullScreenResolutions) == 0x000010, "Member 'FTGFScreenResolutionPackage::WindowedFullScreenResolutions' has a wrong offset!");
static_assert(offsetof(FTGFScreenResolutionPackage, WindowedResolutions) == 0x000020, "Member 'FTGFScreenResolutionPackage::WindowedResolutions' has a wrong offset!");

// ScriptStruct TGFGame.TGFTradeSearchResultData
// 0x0018 (0x0018 - 0x0000)
struct FTGFTradeSearchResultData final
{
public:
	TArray<class UTradeSearchResultOrder*>        ResultDatas;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          HasNextPage;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFTradeSearchResultData) == 0x000008, "Wrong alignment on FTGFTradeSearchResultData");
static_assert(sizeof(FTGFTradeSearchResultData) == 0x000018, "Wrong size on FTGFTradeSearchResultData");
static_assert(offsetof(FTGFTradeSearchResultData, ResultDatas) == 0x000000, "Member 'FTGFTradeSearchResultData::ResultDatas' has a wrong offset!");
static_assert(offsetof(FTGFTradeSearchResultData, HasNextPage) == 0x000010, "Member 'FTGFTradeSearchResultData::HasNextPage' has a wrong offset!");

// ScriptStruct TGFGame.TGFUserCraftingData
// 0x0020 (0x0020 - 0x0000)
struct FTGFUserCraftingData final
{
public:
	TArray<int32>                                 Recipe;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFCraftingSlotData>           Crafting;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFUserCraftingData) == 0x000008, "Wrong alignment on FTGFUserCraftingData");
static_assert(sizeof(FTGFUserCraftingData) == 0x000020, "Wrong size on FTGFUserCraftingData");
static_assert(offsetof(FTGFUserCraftingData, Recipe) == 0x000000, "Member 'FTGFUserCraftingData::Recipe' has a wrong offset!");
static_assert(offsetof(FTGFUserCraftingData, Crafting) == 0x000010, "Member 'FTGFUserCraftingData::Crafting' has a wrong offset!");

// ScriptStruct TGFGame.TGFUserInvetoryData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FTGFUserInvetoryData final
{
public:
	int32                                         Row_size;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column_size;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x28];                                       // 0x0008(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFUserInvetoryData) == 0x000008, "Wrong alignment on FTGFUserInvetoryData");
static_assert(sizeof(FTGFUserInvetoryData) == 0x000030, "Wrong size on FTGFUserInvetoryData");
static_assert(offsetof(FTGFUserInvetoryData, Row_size) == 0x000000, "Member 'FTGFUserInvetoryData::Row_size' has a wrong offset!");
static_assert(offsetof(FTGFUserInvetoryData, Column_size) == 0x000004, "Member 'FTGFUserInvetoryData::Column_size' has a wrong offset!");

// ScriptStruct TGFGame.TGFUserRole
// 0x0070 (0x0070 - 0x0000)
struct FTGFUserRole final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Role_guid;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Role_name;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expire_timepoint;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Last_use_timepoint;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Create_timepoint;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFRoleMetaIndex                      Meta;                                              // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Role_level;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTGFProtoTgfDRoleDressUp*               Dress_up;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTGFItem>                       Wearing_equips;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTGFProtoTgfDBattleAffixAppendData*     Role_affix;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTGFProtoTgfDRoleSkillData*             Role_skill;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Lazy_delete_timepoint;                             // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFUserRole) == 0x000008, "Wrong alignment on FTGFUserRole");
static_assert(sizeof(FTGFUserRole) == 0x000070, "Wrong size on FTGFUserRole");
static_assert(offsetof(FTGFUserRole, Type_id) == 0x000000, "Member 'FTGFUserRole::Type_id' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Role_guid) == 0x000008, "Member 'FTGFUserRole::Role_guid' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Role_name) == 0x000010, "Member 'FTGFUserRole::Role_name' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Expire_timepoint) == 0x000020, "Member 'FTGFUserRole::Expire_timepoint' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Last_use_timepoint) == 0x000024, "Member 'FTGFUserRole::Last_use_timepoint' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Create_timepoint) == 0x000028, "Member 'FTGFUserRole::Create_timepoint' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Meta) == 0x00002C, "Member 'FTGFUserRole::Meta' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Role_level) == 0x000034, "Member 'FTGFUserRole::Role_level' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Exp) == 0x000038, "Member 'FTGFUserRole::Exp' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Dress_up) == 0x000040, "Member 'FTGFUserRole::Dress_up' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Wearing_equips) == 0x000048, "Member 'FTGFUserRole::Wearing_equips' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Role_affix) == 0x000058, "Member 'FTGFUserRole::Role_affix' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Role_skill) == 0x000060, "Member 'FTGFUserRole::Role_skill' has a wrong offset!");
static_assert(offsetof(FTGFUserRole, Lazy_delete_timepoint) == 0x000068, "Member 'FTGFUserRole::Lazy_delete_timepoint' has a wrong offset!");

// ScriptStruct TGFGame.RangeTime
// 0x0010 (0x0010 - 0x0000)
struct FRangeTime final
{
public:
	int64                                         BeginTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EndTime;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRangeTime) == 0x000008, "Wrong alignment on FRangeTime");
static_assert(sizeof(FRangeTime) == 0x000010, "Wrong size on FRangeTime");
static_assert(offsetof(FRangeTime, BeginTime) == 0x000000, "Member 'FRangeTime::BeginTime' has a wrong offset!");
static_assert(offsetof(FRangeTime, EndTime) == 0x000008, "Member 'FRangeTime::EndTime' has a wrong offset!");

// ScriptStruct TGFGame.BanModule
// 0x0088 (0x0088 - 0x0000)
struct FBanModule final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ModuleId;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BanId;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         BanDuration;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EndDateTimestamp;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TemplateId;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCultureTextMap                        ReasonCultureTextMap;                              // 0x0030(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBanModule) == 0x000008, "Wrong alignment on FBanModule");
static_assert(sizeof(FBanModule) == 0x000088, "Wrong size on FBanModule");
static_assert(offsetof(FBanModule, bIsValid) == 0x000000, "Member 'FBanModule::bIsValid' has a wrong offset!");
static_assert(offsetof(FBanModule, ModuleId) == 0x000004, "Member 'FBanModule::ModuleId' has a wrong offset!");
static_assert(offsetof(FBanModule, BanId) == 0x000008, "Member 'FBanModule::BanId' has a wrong offset!");
static_assert(offsetof(FBanModule, BanDuration) == 0x000010, "Member 'FBanModule::BanDuration' has a wrong offset!");
static_assert(offsetof(FBanModule, EndDateTimestamp) == 0x000018, "Member 'FBanModule::EndDateTimestamp' has a wrong offset!");
static_assert(offsetof(FBanModule, TemplateId) == 0x000020, "Member 'FBanModule::TemplateId' has a wrong offset!");
static_assert(offsetof(FBanModule, ReasonCultureTextMap) == 0x000030, "Member 'FBanModule::ReasonCultureTextMap' has a wrong offset!");

// ScriptStruct TGFGame.UnlockModule
// 0x0090 (0x0090 - 0x0000)
struct FUnlockModule final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ModuleId;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         UnlockTimestamp;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGlobalForbid;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FBanModule>                BanModuleMap;                                      // 0x0018(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int64                                         StartTimestamp;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRangeTime>                     RangeDateTimeArray;                                // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRangeTime>                     RangeDailyTimeArray;                               // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnlockModule) == 0x000008, "Wrong alignment on FUnlockModule");
static_assert(sizeof(FUnlockModule) == 0x000090, "Wrong size on FUnlockModule");
static_assert(offsetof(FUnlockModule, bIsValid) == 0x000000, "Member 'FUnlockModule::bIsValid' has a wrong offset!");
static_assert(offsetof(FUnlockModule, ModuleId) == 0x000004, "Member 'FUnlockModule::ModuleId' has a wrong offset!");
static_assert(offsetof(FUnlockModule, UnlockTimestamp) == 0x000008, "Member 'FUnlockModule::UnlockTimestamp' has a wrong offset!");
static_assert(offsetof(FUnlockModule, bGlobalForbid) == 0x000010, "Member 'FUnlockModule::bGlobalForbid' has a wrong offset!");
static_assert(offsetof(FUnlockModule, BanModuleMap) == 0x000018, "Member 'FUnlockModule::BanModuleMap' has a wrong offset!");
static_assert(offsetof(FUnlockModule, StartTimestamp) == 0x000068, "Member 'FUnlockModule::StartTimestamp' has a wrong offset!");
static_assert(offsetof(FUnlockModule, RangeDateTimeArray) == 0x000070, "Member 'FUnlockModule::RangeDateTimeArray' has a wrong offset!");
static_assert(offsetof(FUnlockModule, RangeDailyTimeArray) == 0x000080, "Member 'FUnlockModule::RangeDailyTimeArray' has a wrong offset!");

// ScriptStruct TGFGame.UnlockModuleMap
// 0x0058 (0x0058 - 0x0000)
struct FUnlockModuleMap final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FUnlockModule>             UnlockModuleMap;                                   // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnlockModuleMap) == 0x000008, "Wrong alignment on FUnlockModuleMap");
static_assert(sizeof(FUnlockModuleMap) == 0x000058, "Wrong size on FUnlockModuleMap");
static_assert(offsetof(FUnlockModuleMap, bIsValid) == 0x000000, "Member 'FUnlockModuleMap::bIsValid' has a wrong offset!");
static_assert(offsetof(FUnlockModuleMap, UnlockModuleMap) == 0x000008, "Member 'FUnlockModuleMap::UnlockModuleMap' has a wrong offset!");

// ScriptStruct TGFGame.ModuleCircularData
// 0x0010 (0x0010 - 0x0000)
struct FModuleCircularData final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ModuleId;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Duration;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModuleCircularData) == 0x000008, "Wrong alignment on FModuleCircularData");
static_assert(sizeof(FModuleCircularData) == 0x000010, "Wrong size on FModuleCircularData");
static_assert(offsetof(FModuleCircularData, bIsValid) == 0x000000, "Member 'FModuleCircularData::bIsValid' has a wrong offset!");
static_assert(offsetof(FModuleCircularData, ModuleId) == 0x000004, "Member 'FModuleCircularData::ModuleId' has a wrong offset!");
static_assert(offsetof(FModuleCircularData, Duration) == 0x000008, "Member 'FModuleCircularData::Duration' has a wrong offset!");

// ScriptStruct TGFGame.ModuleCircularCfgData
// 0x0030 (0x0030 - 0x0000)
struct FModuleCircularCfgData final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         StartTime;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EndTime;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CircleTime;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FModuleCircularData>            CircularQueue;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModuleCircularCfgData) == 0x000008, "Wrong alignment on FModuleCircularCfgData");
static_assert(sizeof(FModuleCircularCfgData) == 0x000030, "Wrong size on FModuleCircularCfgData");
static_assert(offsetof(FModuleCircularCfgData, bIsValid) == 0x000000, "Member 'FModuleCircularCfgData::bIsValid' has a wrong offset!");
static_assert(offsetof(FModuleCircularCfgData, ID) == 0x000004, "Member 'FModuleCircularCfgData::ID' has a wrong offset!");
static_assert(offsetof(FModuleCircularCfgData, StartTime) == 0x000008, "Member 'FModuleCircularCfgData::StartTime' has a wrong offset!");
static_assert(offsetof(FModuleCircularCfgData, EndTime) == 0x000010, "Member 'FModuleCircularCfgData::EndTime' has a wrong offset!");
static_assert(offsetof(FModuleCircularCfgData, CircleTime) == 0x000018, "Member 'FModuleCircularCfgData::CircleTime' has a wrong offset!");
static_assert(offsetof(FModuleCircularCfgData, CircularQueue) == 0x000020, "Member 'FModuleCircularCfgData::CircularQueue' has a wrong offset!");

// ScriptStruct TGFGame.ModuleCircularCfgDataMap
// 0x0058 (0x0058 - 0x0000)
struct FModuleCircularCfgDataMap final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FModuleCircularCfgData>    ModuleCircularCfgDataMap;                          // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModuleCircularCfgDataMap) == 0x000008, "Wrong alignment on FModuleCircularCfgDataMap");
static_assert(sizeof(FModuleCircularCfgDataMap) == 0x000058, "Wrong size on FModuleCircularCfgDataMap");
static_assert(offsetof(FModuleCircularCfgDataMap, bIsValid) == 0x000000, "Member 'FModuleCircularCfgDataMap::bIsValid' has a wrong offset!");
static_assert(offsetof(FModuleCircularCfgDataMap, ModuleCircularCfgDataMap) == 0x000008, "Member 'FModuleCircularCfgDataMap::ModuleCircularCfgDataMap' has a wrong offset!");

// ScriptStruct TGFGame.PlayerKey
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPlayerKey final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerKey) == 0x000008, "Wrong alignment on FPlayerKey");
static_assert(sizeof(FPlayerKey) == 0x000020, "Wrong size on FPlayerKey");

// ScriptStruct TGFGame.PlayerKeyArray
// 0x0010 (0x0010 - 0x0000)
struct FPlayerKeyArray final
{
public:
	TArray<struct FPlayerKey>                     PlayerKeyArray;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerKeyArray) == 0x000008, "Wrong alignment on FPlayerKeyArray");
static_assert(sizeof(FPlayerKeyArray) == 0x000010, "Wrong size on FPlayerKeyArray");
static_assert(offsetof(FPlayerKeyArray, PlayerKeyArray) == 0x000000, "Member 'FPlayerKeyArray::PlayerKeyArray' has a wrong offset!");

// ScriptStruct TGFGame.UpdateHandlerArray
// 0x0010 (0x0010 - 0x0000)
struct FUpdateHandlerArray final
{
public:
	TArray<int64>                                 UpdateHandlerArray;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateHandlerArray) == 0x000008, "Wrong alignment on FUpdateHandlerArray");
static_assert(sizeof(FUpdateHandlerArray) == 0x000010, "Wrong size on FUpdateHandlerArray");
static_assert(offsetof(FUpdateHandlerArray, UpdateHandlerArray) == 0x000000, "Member 'FUpdateHandlerArray::UpdateHandlerArray' has a wrong offset!");

// ScriptStruct TGFGame.RoomKey
// 0x0010 (0x0010 - 0x0000)
struct FRoomKey final
{
public:
	int64                                         RoomId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RoomSvrId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoomKey) == 0x000008, "Wrong alignment on FRoomKey");
static_assert(sizeof(FRoomKey) == 0x000010, "Wrong size on FRoomKey");
static_assert(offsetof(FRoomKey, RoomId) == 0x000000, "Member 'FRoomKey::RoomId' has a wrong offset!");
static_assert(offsetof(FRoomKey, RoomSvrId) == 0x000008, "Member 'FRoomKey::RoomSvrId' has a wrong offset!");

// ScriptStruct TGFGame.RoleCommonHeadPortraitConfigRow
// 0x0018 (0x0020 - 0x0008)
struct FRoleCommonHeadPortraitConfigRow final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CareerHeadPath;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoleCommonHeadPortraitConfigRow) == 0x000008, "Wrong alignment on FRoleCommonHeadPortraitConfigRow");
static_assert(sizeof(FRoleCommonHeadPortraitConfigRow) == 0x000020, "Wrong size on FRoleCommonHeadPortraitConfigRow");
static_assert(offsetof(FRoleCommonHeadPortraitConfigRow, ID) == 0x000008, "Member 'FRoleCommonHeadPortraitConfigRow::ID' has a wrong offset!");
static_assert(offsetof(FRoleCommonHeadPortraitConfigRow, CareerHeadPath) == 0x000010, "Member 'FRoleCommonHeadPortraitConfigRow::CareerHeadPath' has a wrong offset!");

// ScriptStruct TGFGame.UserUpdateCallback
// 0x0130 (0x0130 - 0x0000)
struct alignas(0x10) FUserUpdateCallback final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubscribe;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FUserKey>                         UserKeySet;                                        // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FUserKey, class UUserInfo*>       UserInfoMap;                                       // 0x0058(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x88];                                      // 0x00A8(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserUpdateCallback) == 0x000010, "Wrong alignment on FUserUpdateCallback");
static_assert(sizeof(FUserUpdateCallback) == 0x000130, "Wrong size on FUserUpdateCallback");
static_assert(offsetof(FUserUpdateCallback, bIsValid) == 0x000000, "Member 'FUserUpdateCallback::bIsValid' has a wrong offset!");
static_assert(offsetof(FUserUpdateCallback, bIsSubscribe) == 0x000001, "Member 'FUserUpdateCallback::bIsSubscribe' has a wrong offset!");
static_assert(offsetof(FUserUpdateCallback, UserKeySet) == 0x000008, "Member 'FUserUpdateCallback::UserKeySet' has a wrong offset!");
static_assert(offsetof(FUserUpdateCallback, UserInfoMap) == 0x000058, "Member 'FUserUpdateCallback::UserInfoMap' has a wrong offset!");

}


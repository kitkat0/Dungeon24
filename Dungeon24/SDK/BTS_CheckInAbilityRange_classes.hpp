#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_CheckInAbilityRange

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_CheckInAbilityRange.BTS_CheckInAbilityRange_C
// 0x0088 (0x0120 - 0x0098)
class UBTS_CheckInAbilityRange_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 InAbilityRange;                                    // 0x00A0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 Ability;                                           // 0x00C8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 AbilityTarget;                                     // 0x00F0(0x0028)(Edit, BlueprintVisible)
	double                                        Height;                                            // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTS_CheckInAbilityRange(int32 EntryPoint);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_CheckInAbilityRange_C">();
	}
	static class UBTS_CheckInAbilityRange_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_CheckInAbilityRange_C>();
	}
};
static_assert(alignof(UBTS_CheckInAbilityRange_C) == 0x000008, "Wrong alignment on UBTS_CheckInAbilityRange_C");
static_assert(sizeof(UBTS_CheckInAbilityRange_C) == 0x000120, "Wrong size on UBTS_CheckInAbilityRange_C");
static_assert(offsetof(UBTS_CheckInAbilityRange_C, UberGraphFrame) == 0x000098, "Member 'UBTS_CheckInAbilityRange_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_CheckInAbilityRange_C, InAbilityRange) == 0x0000A0, "Member 'UBTS_CheckInAbilityRange_C::InAbilityRange' has a wrong offset!");
static_assert(offsetof(UBTS_CheckInAbilityRange_C, Ability) == 0x0000C8, "Member 'UBTS_CheckInAbilityRange_C::Ability' has a wrong offset!");
static_assert(offsetof(UBTS_CheckInAbilityRange_C, AbilityTarget) == 0x0000F0, "Member 'UBTS_CheckInAbilityRange_C::AbilityTarget' has a wrong offset!");
static_assert(offsetof(UBTS_CheckInAbilityRange_C, Height) == 0x000118, "Member 'UBTS_CheckInAbilityRange_C::Height' has a wrong offset!");

}


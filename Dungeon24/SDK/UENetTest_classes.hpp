#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UENetTest

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class UENetTest.DetailHolder
// 0x00A0 (0x00C8 - 0x0028)
class UDetailHolder final : public UObject
{
public:
	class FString                                 Field;                                             // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FieldType;                                         // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FieldValue;                                        // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pid;                                               // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Deep;                                              // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedHide;                                          // 0x0064(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MessageFullName;                                   // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Repeated;                                          // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RepeatedType;                                      // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRPC;                                             // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Rpc_name;                                          // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type_url;                                          // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          C2S;                                               // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DetailHolder">();
	}
	static class UDetailHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDetailHolder>();
	}
};
static_assert(alignof(UDetailHolder) == 0x000008, "Wrong alignment on UDetailHolder");
static_assert(sizeof(UDetailHolder) == 0x0000C8, "Wrong size on UDetailHolder");
static_assert(offsetof(UDetailHolder, Field) == 0x000028, "Member 'UDetailHolder::Field' has a wrong offset!");
static_assert(offsetof(UDetailHolder, FieldType) == 0x000038, "Member 'UDetailHolder::FieldType' has a wrong offset!");
static_assert(offsetof(UDetailHolder, FieldValue) == 0x000048, "Member 'UDetailHolder::FieldValue' has a wrong offset!");
static_assert(offsetof(UDetailHolder, ID) == 0x000058, "Member 'UDetailHolder::ID' has a wrong offset!");
static_assert(offsetof(UDetailHolder, Pid) == 0x00005C, "Member 'UDetailHolder::Pid' has a wrong offset!");
static_assert(offsetof(UDetailHolder, Deep) == 0x000060, "Member 'UDetailHolder::Deep' has a wrong offset!");
static_assert(offsetof(UDetailHolder, NeedHide) == 0x000064, "Member 'UDetailHolder::NeedHide' has a wrong offset!");
static_assert(offsetof(UDetailHolder, MessageFullName) == 0x000068, "Member 'UDetailHolder::MessageFullName' has a wrong offset!");
static_assert(offsetof(UDetailHolder, Repeated) == 0x000078, "Member 'UDetailHolder::Repeated' has a wrong offset!");
static_assert(offsetof(UDetailHolder, RepeatedType) == 0x000088, "Member 'UDetailHolder::RepeatedType' has a wrong offset!");
static_assert(offsetof(UDetailHolder, IsRPC) == 0x000098, "Member 'UDetailHolder::IsRPC' has a wrong offset!");
static_assert(offsetof(UDetailHolder, Rpc_name) == 0x0000A0, "Member 'UDetailHolder::Rpc_name' has a wrong offset!");
static_assert(offsetof(UDetailHolder, Type_url) == 0x0000B0, "Member 'UDetailHolder::Type_url' has a wrong offset!");
static_assert(offsetof(UDetailHolder, C2S) == 0x0000C0, "Member 'UDetailHolder::C2S' has a wrong offset!");

// Class UENetTest.BlockHolder
// 0x0010 (0x0038 - 0x0028)
class UBlockHolder final : public UObject
{
public:
	class FString                                 ProtoName;                                         // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlockHolder">();
	}
	static class UBlockHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlockHolder>();
	}
};
static_assert(alignof(UBlockHolder) == 0x000008, "Wrong alignment on UBlockHolder");
static_assert(sizeof(UBlockHolder) == 0x000038, "Wrong size on UBlockHolder");
static_assert(offsetof(UBlockHolder, ProtoName) == 0x000028, "Member 'UBlockHolder::ProtoName' has a wrong offset!");

// Class UENetTest.PackHolder
// 0x0068 (0x0090 - 0x0028)
class UPackHolder final : public UObject
{
public:
	struct FGuid                                  PackID;                                            // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackName;                                          // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UProtoHolder*>                   ProtoHolderList;                                   // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UProtoHolder*>                   ProtoHolderListSelectSeq;                          // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Selected;                                          // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x17];                                      // 0x0069(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PackStr;                                           // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PackHolder">();
	}
	static class UPackHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPackHolder>();
	}
};
static_assert(alignof(UPackHolder) == 0x000008, "Wrong alignment on UPackHolder");
static_assert(sizeof(UPackHolder) == 0x000090, "Wrong size on UPackHolder");
static_assert(offsetof(UPackHolder, PackID) == 0x000028, "Member 'UPackHolder::PackID' has a wrong offset!");
static_assert(offsetof(UPackHolder, PackName) == 0x000038, "Member 'UPackHolder::PackName' has a wrong offset!");
static_assert(offsetof(UPackHolder, ProtoHolderList) == 0x000048, "Member 'UPackHolder::ProtoHolderList' has a wrong offset!");
static_assert(offsetof(UPackHolder, ProtoHolderListSelectSeq) == 0x000058, "Member 'UPackHolder::ProtoHolderListSelectSeq' has a wrong offset!");
static_assert(offsetof(UPackHolder, Selected) == 0x000068, "Member 'UPackHolder::Selected' has a wrong offset!");
static_assert(offsetof(UPackHolder, PackStr) == 0x000080, "Member 'UPackHolder::PackStr' has a wrong offset!");

// Class UENetTest.NetTestWidget
// 0x0000 (0x0278 - 0x0278)
class UNetTestWidget final : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetTestWidget">();
	}
	static class UNetTestWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetTestWidget>();
	}
};
static_assert(alignof(UNetTestWidget) == 0x000008, "Wrong alignment on UNetTestWidget");
static_assert(sizeof(UNetTestWidget) == 0x000278, "Wrong size on UNetTestWidget");

// Class UENetTest.NetTestGameInstanceSubsystem
// 0x0110 (0x0140 - 0x0030)
class UNetTestGameInstanceSubsystem final : public UGameInstanceSubsystem
{
public:
	class UUserWidget*                            NetTestWidget;                                     // 0x0030(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProtoListWidget*                       RPCListWidget;                                     // 0x0038(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            MenuListWin;                                       // 0x0040(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UProtoHolder*>                   RPCListProtoHolderList;                            // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UProtoHolder*>                   HistoryHolderList;                                 // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ProtoListShowing;                                  // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SmallWindowShowing;                                // 0x0071(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URPCDetailWidget*                       DetailWidget;                                      // 0x0078(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0xC];                                       // 0x0080(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          FuzzingAllHolders;                                 // 0x008C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x2B];                                      // 0x008D(0x002B)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            BlockListWin;                                      // 0x00B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         IgnoreRPCList;                                     // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          InPackRPCDetail;                                   // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PackInfoList;                                      // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPackHolder*>                    LocalPackHolderList;                               // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UUserWidget*                            PackListWin;                                       // 0x0100(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            PackRPCListWin;                                    // 0x0108(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x18];                                     // 0x0110(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UPackHolder*                            SelectedPackHolder;                                // 0x0128(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TargetLocation;                                    // 0x0130(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddOrRemoveFromAlwaysBlockList(const class FString& Func_0);
	void AddToIgnoreRPCList(const class FString& RpcName);
	void AddToPackInfoList(const class FString& PackInfo);
	void ChangePackSelectedSeq(class UProtoHolder* Proto);
	void ClearAllPack();
	void ClearPackSelectedSeq();
	void ClearProtoList();
	void CreateNetTestWindow();
	void DeleteSelectedPack();
	void FuzzTestAll();
	void FuzzTestOnce(class UDetailHolder* Holder);
	TArray<class FString> GetFuzzParamList(class UDetailHolder* Holder);
	TArray<class FString> GetIgnoreRPCList();
	void InitNewPackList();
	void InitPackList();
	void InitPackRPCList();
	void InitProtoList(bool ScrollToLast);
	bool IsCollectStatus();
	bool IsHideEngineStatus();
	bool IsInAlwaysBlockList(const class FString& Func_0);
	bool IsInBlockList(const class FString& Func_0);
	bool IsInterceptStatus();
	bool IsSCCollectStatus();
	void RefreshBlockList(bool ScrollToLast);
	void RefreshDetailList();
	void RefreshPackSelectedSeq();
	void RemoveFromBlockList(class UBlockHolder* Holder);
	void RemoveFromIgnoreRPCList(const class FString& RpcName);
	void RemoveFromPackInfoList(const class FString& PackInfo);
	void ResetFuzzStatus();
	void SaveNewPack(const class FString& PackName);
	bool SavePackRPCSendDelayTime(class UProtoHolder* Proto, int32 Delay);
	void SendPackRPCTimes(int32 Time);
	bool SendPackRPCTimesOutOfOrder();
	void SendRPCTimes(int32 Time);
	void SendRPCWithDelay(class UProtoHolder* RPC);
	void SetBlockListView(class UListView* ListView);
	void SetDetailListView(class UListView* ListView);
	void SetNetTestListView(class UListView* ListView);
	void SetNewPackListView(class UListView* ListView);
	void SetPackListView(class UListView* ListView);
	void SetPackRPCListView(class UListView* ListView);
	void SetProtoList();
	TArray<class FString> StartFuzzTest(class UDetailHolder* Holder);
	void ToggleCollectStatus();
	void ToggleHideEngineStatus();
	void ToggleInterceptStatus();
	void ToggleSCCollectStatus();
	void ToSelectedNewPack(class UProtoHolder* Proto, bool Add);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetTestGameInstanceSubsystem">();
	}
	static class UNetTestGameInstanceSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetTestGameInstanceSubsystem>();
	}
};
static_assert(alignof(UNetTestGameInstanceSubsystem) == 0x000008, "Wrong alignment on UNetTestGameInstanceSubsystem");
static_assert(sizeof(UNetTestGameInstanceSubsystem) == 0x000140, "Wrong size on UNetTestGameInstanceSubsystem");
static_assert(offsetof(UNetTestGameInstanceSubsystem, NetTestWidget) == 0x000030, "Member 'UNetTestGameInstanceSubsystem::NetTestWidget' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, RPCListWidget) == 0x000038, "Member 'UNetTestGameInstanceSubsystem::RPCListWidget' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, MenuListWin) == 0x000040, "Member 'UNetTestGameInstanceSubsystem::MenuListWin' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, RPCListProtoHolderList) == 0x000050, "Member 'UNetTestGameInstanceSubsystem::RPCListProtoHolderList' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, HistoryHolderList) == 0x000060, "Member 'UNetTestGameInstanceSubsystem::HistoryHolderList' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, ProtoListShowing) == 0x000070, "Member 'UNetTestGameInstanceSubsystem::ProtoListShowing' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, SmallWindowShowing) == 0x000071, "Member 'UNetTestGameInstanceSubsystem::SmallWindowShowing' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, DetailWidget) == 0x000078, "Member 'UNetTestGameInstanceSubsystem::DetailWidget' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, FuzzingAllHolders) == 0x00008C, "Member 'UNetTestGameInstanceSubsystem::FuzzingAllHolders' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, BlockListWin) == 0x0000B8, "Member 'UNetTestGameInstanceSubsystem::BlockListWin' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, IgnoreRPCList) == 0x0000C8, "Member 'UNetTestGameInstanceSubsystem::IgnoreRPCList' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, InPackRPCDetail) == 0x0000D8, "Member 'UNetTestGameInstanceSubsystem::InPackRPCDetail' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, PackInfoList) == 0x0000E0, "Member 'UNetTestGameInstanceSubsystem::PackInfoList' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, LocalPackHolderList) == 0x0000F0, "Member 'UNetTestGameInstanceSubsystem::LocalPackHolderList' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, PackListWin) == 0x000100, "Member 'UNetTestGameInstanceSubsystem::PackListWin' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, PackRPCListWin) == 0x000108, "Member 'UNetTestGameInstanceSubsystem::PackRPCListWin' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, SelectedPackHolder) == 0x000128, "Member 'UNetTestGameInstanceSubsystem::SelectedPackHolder' has a wrong offset!");
static_assert(offsetof(UNetTestGameInstanceSubsystem, TargetLocation) == 0x000130, "Member 'UNetTestGameInstanceSubsystem::TargetLocation' has a wrong offset!");

// Class UENetTest.ProtoHolder
// 0x0048 (0x0070 - 0x0028)
class UProtoHolder final : public UObject
{
public:
	class FString                                 RpcName;                                           // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  RPCId;                                             // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ItemCtrl;                                          // 0x0058(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Selected;                                          // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToServer;                                          // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sent;                                              // 0x0062(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRPC;                                             // 0x0063(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PackSelected;                                      // 0x0064(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PackSelectedSeq;                                   // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PackDelayTime;                                     // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnItemSelected();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProtoHolder">();
	}
	static class UProtoHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProtoHolder>();
	}
};
static_assert(alignof(UProtoHolder) == 0x000008, "Wrong alignment on UProtoHolder");
static_assert(sizeof(UProtoHolder) == 0x000070, "Wrong size on UProtoHolder");
static_assert(offsetof(UProtoHolder, RpcName) == 0x000028, "Member 'UProtoHolder::RpcName' has a wrong offset!");
static_assert(offsetof(UProtoHolder, RPCId) == 0x000048, "Member 'UProtoHolder::RPCId' has a wrong offset!");
static_assert(offsetof(UProtoHolder, ItemCtrl) == 0x000058, "Member 'UProtoHolder::ItemCtrl' has a wrong offset!");
static_assert(offsetof(UProtoHolder, Selected) == 0x000060, "Member 'UProtoHolder::Selected' has a wrong offset!");
static_assert(offsetof(UProtoHolder, ToServer) == 0x000061, "Member 'UProtoHolder::ToServer' has a wrong offset!");
static_assert(offsetof(UProtoHolder, Sent) == 0x000062, "Member 'UProtoHolder::Sent' has a wrong offset!");
static_assert(offsetof(UProtoHolder, IsRPC) == 0x000063, "Member 'UProtoHolder::IsRPC' has a wrong offset!");
static_assert(offsetof(UProtoHolder, PackSelected) == 0x000064, "Member 'UProtoHolder::PackSelected' has a wrong offset!");
static_assert(offsetof(UProtoHolder, PackSelectedSeq) == 0x000068, "Member 'UProtoHolder::PackSelectedSeq' has a wrong offset!");
static_assert(offsetof(UProtoHolder, PackDelayTime) == 0x00006C, "Member 'UProtoHolder::PackDelayTime' has a wrong offset!");

// Class UENetTest.ProtoListWidget
// 0x0000 (0x0278 - 0x0278)
class UProtoListWidget final : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProtoListWidget">();
	}
	static class UProtoListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProtoListWidget>();
	}
};
static_assert(alignof(UProtoListWidget) == 0x000008, "Wrong alignment on UProtoListWidget");
static_assert(sizeof(UProtoListWidget) == 0x000278, "Wrong size on UProtoListWidget");

// Class UENetTest.RPCDetailWidget
// 0x0028 (0x02A0 - 0x0278)
class URPCDetailWidget final : public UUserWidget
{
public:
	class UProtoHolder*                           SelectedItem;                                      // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDetailHolder*>                  DetailHolderList;                                  // 0x0280(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DetailHolderToMessage();
	void DetailHolderToParamPtr();
	void InitDetailList(bool Cache);
	void SendRPCFromTool();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RPCDetailWidget">();
	}
	static class URPCDetailWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URPCDetailWidget>();
	}
};
static_assert(alignof(URPCDetailWidget) == 0x000008, "Wrong alignment on URPCDetailWidget");
static_assert(sizeof(URPCDetailWidget) == 0x0002A0, "Wrong size on URPCDetailWidget");
static_assert(offsetof(URPCDetailWidget, SelectedItem) == 0x000278, "Member 'URPCDetailWidget::SelectedItem' has a wrong offset!");
static_assert(offsetof(URPCDetailWidget, DetailHolderList) == 0x000280, "Member 'URPCDetailWidget::DetailHolderList' has a wrong offset!");

}


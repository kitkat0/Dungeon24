#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ReplicationGraph

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct ReplicationGraph.ConnectionAlwaysRelevantNodePair
// 0x0010 (0x0010 - 0x0000)
struct FConnectionAlwaysRelevantNodePair final
{
public:
	class UNetConnection*                         NetConnection;                                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_AlwaysRelevant_ForConnection* Node;                                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConnectionAlwaysRelevantNodePair) == 0x000008, "Wrong alignment on FConnectionAlwaysRelevantNodePair");
static_assert(sizeof(FConnectionAlwaysRelevantNodePair) == 0x000010, "Wrong size on FConnectionAlwaysRelevantNodePair");
static_assert(offsetof(FConnectionAlwaysRelevantNodePair, NetConnection) == 0x000000, "Member 'FConnectionAlwaysRelevantNodePair::NetConnection' has a wrong offset!");
static_assert(offsetof(FConnectionAlwaysRelevantNodePair, Node) == 0x000008, "Member 'FConnectionAlwaysRelevantNodePair::Node' has a wrong offset!");

// ScriptStruct ReplicationGraph.AlwaysRelevantActorInfo
// 0x0018 (0x0018 - 0x0000)
struct FAlwaysRelevantActorInfo final
{
public:
	class UNetConnection*                         Connection;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LastViewer;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LastViewTarget;                                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlwaysRelevantActorInfo) == 0x000008, "Wrong alignment on FAlwaysRelevantActorInfo");
static_assert(sizeof(FAlwaysRelevantActorInfo) == 0x000018, "Wrong size on FAlwaysRelevantActorInfo");
static_assert(offsetof(FAlwaysRelevantActorInfo, Connection) == 0x000000, "Member 'FAlwaysRelevantActorInfo::Connection' has a wrong offset!");
static_assert(offsetof(FAlwaysRelevantActorInfo, LastViewer) == 0x000008, "Member 'FAlwaysRelevantActorInfo::LastViewer' has a wrong offset!");
static_assert(offsetof(FAlwaysRelevantActorInfo, LastViewTarget) == 0x000010, "Member 'FAlwaysRelevantActorInfo::LastViewTarget' has a wrong offset!");

// ScriptStruct ReplicationGraph.TearOffActorInfo
// 0x0018 (0x0018 - 0x0000)
struct FTearOffActorInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTearOffActorInfo) == 0x000008, "Wrong alignment on FTearOffActorInfo");
static_assert(sizeof(FTearOffActorInfo) == 0x000018, "Wrong size on FTearOffActorInfo");
static_assert(offsetof(FTearOffActorInfo, Actor) == 0x000008, "Member 'FTearOffActorInfo::Actor' has a wrong offset!");

// ScriptStruct ReplicationGraph.LastLocationGatherInfo
// 0x0038 (0x0038 - 0x0000)
struct FLastLocationGatherInfo final
{
public:
	class UNetConnection*                         Connection;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastLocation;                                      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastOutOfRangeLocationCheck;                       // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLastLocationGatherInfo) == 0x000008, "Wrong alignment on FLastLocationGatherInfo");
static_assert(sizeof(FLastLocationGatherInfo) == 0x000038, "Wrong size on FLastLocationGatherInfo");
static_assert(offsetof(FLastLocationGatherInfo, Connection) == 0x000000, "Member 'FLastLocationGatherInfo::Connection' has a wrong offset!");
static_assert(offsetof(FLastLocationGatherInfo, LastLocation) == 0x000008, "Member 'FLastLocationGatherInfo::LastLocation' has a wrong offset!");
static_assert(offsetof(FLastLocationGatherInfo, LastOutOfRangeLocationCheck) == 0x000020, "Member 'FLastLocationGatherInfo::LastOutOfRangeLocationCheck' has a wrong offset!");

// ScriptStruct ReplicationGraph.ClassReplicationInfo
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FClassReplicationInfo final
{
public:
	float                                         DistancePriorityScale;                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarvationPriorityScale;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedNetPriorityBias;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ReplicationPeriodFrame;                            // 0x000C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        FastPath_ReplicationPeriodFrame;                   // 0x000E(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ActorChannelFrameTimeout;                          // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x56];                                      // 0x0012(0x0056)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CullDistance;                                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CullDistanceSquared;                               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FClassReplicationInfo) == 0x000010, "Wrong alignment on FClassReplicationInfo");
static_assert(sizeof(FClassReplicationInfo) == 0x000070, "Wrong size on FClassReplicationInfo");
static_assert(offsetof(FClassReplicationInfo, DistancePriorityScale) == 0x000000, "Member 'FClassReplicationInfo::DistancePriorityScale' has a wrong offset!");
static_assert(offsetof(FClassReplicationInfo, StarvationPriorityScale) == 0x000004, "Member 'FClassReplicationInfo::StarvationPriorityScale' has a wrong offset!");
static_assert(offsetof(FClassReplicationInfo, AccumulatedNetPriorityBias) == 0x000008, "Member 'FClassReplicationInfo::AccumulatedNetPriorityBias' has a wrong offset!");
static_assert(offsetof(FClassReplicationInfo, ReplicationPeriodFrame) == 0x00000C, "Member 'FClassReplicationInfo::ReplicationPeriodFrame' has a wrong offset!");
static_assert(offsetof(FClassReplicationInfo, FastPath_ReplicationPeriodFrame) == 0x00000E, "Member 'FClassReplicationInfo::FastPath_ReplicationPeriodFrame' has a wrong offset!");
static_assert(offsetof(FClassReplicationInfo, ActorChannelFrameTimeout) == 0x000010, "Member 'FClassReplicationInfo::ActorChannelFrameTimeout' has a wrong offset!");
static_assert(offsetof(FClassReplicationInfo, CullDistance) == 0x000068, "Member 'FClassReplicationInfo::CullDistance' has a wrong offset!");
static_assert(offsetof(FClassReplicationInfo, CullDistanceSquared) == 0x00006C, "Member 'FClassReplicationInfo::CullDistanceSquared' has a wrong offset!");

}


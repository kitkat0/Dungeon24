#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ActorSpawnPoint

#include "Basic.hpp"

#include "EPatrolMode_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EMonsterDormantable_structs.hpp"
#include "LyraGame_structs.hpp"
#include "LyraGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ActorSpawnPoint.BP_ActorSpawnPoint_C
// 0x0178 (0x0410 - 0x0298)
class ABP_ActorSpawnPoint_C final : public ATgfModularActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ActorSpawnOptionComponent_C*        ActorSpawnOptionComponent;                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Visualizer;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Chance;                                            // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Data;                                              // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DataActor;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         DataItemID;                                        // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMonsterDormantable                           DataMonsterDormantable;                            // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DataMonsterDormantTimesMax;                        // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DataMonsterDormantIndex;                           // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DataMonsterDormantSightRadius;                     // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DataMonsterDormantGravity;                         // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPatrolMode                                   DataMonsterPatrolMode;                             // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EA[0x6];                                      // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PatrolPoint_C*>              DataMonsterPatrolPath;                             // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          DataMonsterWanderable;                             // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DataMonsterWanderRadius;                           // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DataMonsterStareEnabled;                           // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULyraAbilitySet*>                DataMonsterAbilitySet;                             // 0x0318(0x0010)(Edit, BlueprintVisible)
	class AActor*                                 DataMonsterCombatZone;                             // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_Mechanism_C*                        ControlledMechanism;                               // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_TrapBase_C*                         ControlledTrap;                                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         TriggerParam;                                      // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpawnDelayTime;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RefreshInterval;                                   // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActivateDelayTime;                                 // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CollectableClass;                                  // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bNotifySpawningCollectable;                        // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNotifyOnlyFirstTime;                              // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36A[0x2];                                      // 0x036A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackCount;                                        // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNotified;                                         // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootIndex;                                         // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Floor;                                             // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ActorToSpawn;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemToSpawn;                                       // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformToSpawn;                                  // 0x0390(0x0060)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         SpawnedActors;                                     // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class ABP_ActorSpawnPoint_C>> MonstersToWake;                                    // 0x0400(0x0010)(Edit, BlueprintVisible)

public:
	void ActuallySpawn();
	void AddToSpawnedActors(class AActor* Actor);
	void BroadcastMonsterSpawningMessage(const struct FGameplayTag& Channel, class ABP_Tgf_Monster_C* Monster);
	void ChooseRowFromDataTable(struct FFActorSpawn* Out_Row);
	void ExecuteUbergraph_BP_ActorSpawnPoint(int32 EntryPoint);
	void GetDisplayText(class FString* Result);
	void GetTransformToSpawn(struct FTransform* Transform);
	bool HasAnySpawnedActor();
	void OnReady_77CA167141BAC560760D2C99C02FD061();
	void PrintPreSpawnLog(class UClass* Actor, const class FString& OptionString);
	void PrintSpawnLog(class AActor* Actor);
	void ReceiveBeginPlay();
	void Spawn();
	void SpawnActor(class AB_LyraGameMode_C* GameMode, class UClass* Actor, const struct FTransform& Transform, bool* Result);
	void SpawnCollectable(int32 InItemID, const struct FTransform& Transform);
	void SpawnImmediately();
	void StopRefreshing();
	void UserConstructionScript();
	void ValidateData();
	void WaitForInterval();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ActorSpawnPoint_C">();
	}
	static class ABP_ActorSpawnPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ActorSpawnPoint_C>();
	}
};
static_assert(alignof(ABP_ActorSpawnPoint_C) == 0x000010, "Wrong alignment on ABP_ActorSpawnPoint_C");
static_assert(sizeof(ABP_ActorSpawnPoint_C) == 0x000410, "Wrong size on ABP_ActorSpawnPoint_C");
static_assert(offsetof(ABP_ActorSpawnPoint_C, UberGraphFrame) == 0x000298, "Member 'ABP_ActorSpawnPoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, ActorSpawnOptionComponent) == 0x0002A0, "Member 'ABP_ActorSpawnPoint_C::ActorSpawnOptionComponent' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, Visualizer) == 0x0002A8, "Member 'ABP_ActorSpawnPoint_C::Visualizer' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_ActorSpawnPoint_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, Chance) == 0x0002B8, "Member 'ABP_ActorSpawnPoint_C::Chance' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, Data) == 0x0002C0, "Member 'ABP_ActorSpawnPoint_C::Data' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataActor) == 0x0002C8, "Member 'ABP_ActorSpawnPoint_C::DataActor' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataItemID) == 0x0002D0, "Member 'ABP_ActorSpawnPoint_C::DataItemID' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterDormantable) == 0x0002D4, "Member 'ABP_ActorSpawnPoint_C::DataMonsterDormantable' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterDormantTimesMax) == 0x0002D8, "Member 'ABP_ActorSpawnPoint_C::DataMonsterDormantTimesMax' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterDormantIndex) == 0x0002DC, "Member 'ABP_ActorSpawnPoint_C::DataMonsterDormantIndex' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterDormantSightRadius) == 0x0002E0, "Member 'ABP_ActorSpawnPoint_C::DataMonsterDormantSightRadius' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterDormantGravity) == 0x0002E8, "Member 'ABP_ActorSpawnPoint_C::DataMonsterDormantGravity' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterPatrolMode) == 0x0002E9, "Member 'ABP_ActorSpawnPoint_C::DataMonsterPatrolMode' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterPatrolPath) == 0x0002F0, "Member 'ABP_ActorSpawnPoint_C::DataMonsterPatrolPath' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterWanderable) == 0x000300, "Member 'ABP_ActorSpawnPoint_C::DataMonsterWanderable' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterWanderRadius) == 0x000308, "Member 'ABP_ActorSpawnPoint_C::DataMonsterWanderRadius' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterStareEnabled) == 0x000310, "Member 'ABP_ActorSpawnPoint_C::DataMonsterStareEnabled' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterAbilitySet) == 0x000318, "Member 'ABP_ActorSpawnPoint_C::DataMonsterAbilitySet' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, DataMonsterCombatZone) == 0x000328, "Member 'ABP_ActorSpawnPoint_C::DataMonsterCombatZone' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, ControlledMechanism) == 0x000330, "Member 'ABP_ActorSpawnPoint_C::ControlledMechanism' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, ControlledTrap) == 0x000338, "Member 'ABP_ActorSpawnPoint_C::ControlledTrap' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, TriggerParam) == 0x000340, "Member 'ABP_ActorSpawnPoint_C::TriggerParam' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, SpawnDelayTime) == 0x000348, "Member 'ABP_ActorSpawnPoint_C::SpawnDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, RefreshInterval) == 0x000350, "Member 'ABP_ActorSpawnPoint_C::RefreshInterval' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, ActivateDelayTime) == 0x000358, "Member 'ABP_ActorSpawnPoint_C::ActivateDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, CollectableClass) == 0x000360, "Member 'ABP_ActorSpawnPoint_C::CollectableClass' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, bNotifySpawningCollectable) == 0x000368, "Member 'ABP_ActorSpawnPoint_C::bNotifySpawningCollectable' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, bNotifyOnlyFirstTime) == 0x000369, "Member 'ABP_ActorSpawnPoint_C::bNotifyOnlyFirstTime' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, StackCount) == 0x00036C, "Member 'ABP_ActorSpawnPoint_C::StackCount' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, bNotified) == 0x000370, "Member 'ABP_ActorSpawnPoint_C::bNotified' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, LootIndex) == 0x000374, "Member 'ABP_ActorSpawnPoint_C::LootIndex' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, Floor) == 0x000378, "Member 'ABP_ActorSpawnPoint_C::Floor' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, ActorToSpawn) == 0x000380, "Member 'ABP_ActorSpawnPoint_C::ActorToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, ItemToSpawn) == 0x000388, "Member 'ABP_ActorSpawnPoint_C::ItemToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, TransformToSpawn) == 0x000390, "Member 'ABP_ActorSpawnPoint_C::TransformToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, SpawnedActors) == 0x0003F0, "Member 'ABP_ActorSpawnPoint_C::SpawnedActors' has a wrong offset!");
static_assert(offsetof(ABP_ActorSpawnPoint_C, MonstersToWake) == 0x000400, "Member 'ABP_ActorSpawnPoint_C::MonstersToWake' has a wrong offset!");

}


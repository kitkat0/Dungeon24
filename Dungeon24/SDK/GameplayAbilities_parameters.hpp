#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayAbilities

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GameplayAbilities.AbilityAsync_WaitAttributeChanged.WaitForAttributeChanged
// 0x0050 (0x0050 - 0x0000)
struct AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityAsync_WaitAttributeChanged*     ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged) == 0x000008, "Wrong alignment on AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged");
static_assert(sizeof(AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged) == 0x000050, "Wrong size on AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged");
static_assert(offsetof(AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged, TargetActor) == 0x000000, "Member 'AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged::TargetActor' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged, Attribute) == 0x000008, "Member 'AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged::Attribute' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged, OnlyTriggerOnce) == 0x000040, "Member 'AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged::OnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged, ReturnValue) == 0x000048, "Member 'AbilityAsync_WaitAttributeChanged_WaitForAttributeChanged::ReturnValue' has a wrong offset!");

// DelegateFunction GameplayAbilities.AbilityAsync_WaitAttributeChanged.AsyncWaitAttributeChangedDelegate__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct AbilityAsync_WaitAttributeChanged_AsyncWaitAttributeChangedDelegate__DelegateSignature final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityAsync_WaitAttributeChanged_AsyncWaitAttributeChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AbilityAsync_WaitAttributeChanged_AsyncWaitAttributeChangedDelegate__DelegateSignature");
static_assert(sizeof(AbilityAsync_WaitAttributeChanged_AsyncWaitAttributeChangedDelegate__DelegateSignature) == 0x000040, "Wrong size on AbilityAsync_WaitAttributeChanged_AsyncWaitAttributeChangedDelegate__DelegateSignature");
static_assert(offsetof(AbilityAsync_WaitAttributeChanged_AsyncWaitAttributeChangedDelegate__DelegateSignature, Attribute) == 0x000000, "Member 'AbilityAsync_WaitAttributeChanged_AsyncWaitAttributeChangedDelegate__DelegateSignature::Attribute' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitAttributeChanged_AsyncWaitAttributeChangedDelegate__DelegateSignature, NewValue) == 0x000038, "Member 'AbilityAsync_WaitAttributeChanged_AsyncWaitAttributeChangedDelegate__DelegateSignature::NewValue' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitAttributeChanged_AsyncWaitAttributeChangedDelegate__DelegateSignature, OldValue) == 0x00003C, "Member 'AbilityAsync_WaitAttributeChanged_AsyncWaitAttributeChangedDelegate__DelegateSignature::OldValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitInputPress.WaitInputPress
// 0x0018 (0x0018 - 0x0000)
struct AbilityTask_WaitInputPress_WaitInputPress final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTestAlreadyPressed;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputPress*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputPress_WaitInputPress) == 0x000008, "Wrong alignment on AbilityTask_WaitInputPress_WaitInputPress");
static_assert(sizeof(AbilityTask_WaitInputPress_WaitInputPress) == 0x000018, "Wrong size on AbilityTask_WaitInputPress_WaitInputPress");
static_assert(offsetof(AbilityTask_WaitInputPress_WaitInputPress, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitInputPress_WaitInputPress::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputPress_WaitInputPress, bTestAlreadyPressed) == 0x000008, "Member 'AbilityTask_WaitInputPress_WaitInputPress::bTestAlreadyPressed' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputPress_WaitInputPress, ReturnValue) == 0x000010, "Member 'AbilityTask_WaitInputPress_WaitInputPress::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityAsync_WaitGameplayEvent.WaitGameplayEventToActor
// 0x0020 (0x0020 - 0x0000)
struct AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyMatchExact;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityAsync_WaitGameplayEvent*        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor) == 0x000008, "Wrong alignment on AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor");
static_assert(sizeof(AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor) == 0x000020, "Wrong size on AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor");
static_assert(offsetof(AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor, TargetActor) == 0x000000, "Member 'AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor::TargetActor' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor, EventTag) == 0x000008, "Member 'AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor::EventTag' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor, OnlyTriggerOnce) == 0x000010, "Member 'AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor::OnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor, OnlyMatchExact) == 0x000011, "Member 'AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor::OnlyMatchExact' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor, ReturnValue) == 0x000018, "Member 'AbilityAsync_WaitGameplayEvent_WaitGameplayEventToActor::ReturnValue' has a wrong offset!");

// DelegateFunction GameplayAbilities.AbilityAsync_WaitGameplayEvent.EventReceivedDelegate__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct AbilityAsync_WaitGameplayEvent_EventReceivedDelegate__DelegateSignature final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityAsync_WaitGameplayEvent_EventReceivedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AbilityAsync_WaitGameplayEvent_EventReceivedDelegate__DelegateSignature");
static_assert(sizeof(AbilityAsync_WaitGameplayEvent_EventReceivedDelegate__DelegateSignature) == 0x0000B0, "Wrong size on AbilityAsync_WaitGameplayEvent_EventReceivedDelegate__DelegateSignature");
static_assert(offsetof(AbilityAsync_WaitGameplayEvent_EventReceivedDelegate__DelegateSignature, Payload) == 0x000000, "Member 'AbilityAsync_WaitGameplayEvent_EventReceivedDelegate__DelegateSignature::Payload' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitMovementModeChange.CreateWaitMovementModeChange
// 0x0018 (0x0018 - 0x0000)
struct AbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 NewMode;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitMovementModeChange*    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange) == 0x000008, "Wrong alignment on AbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange");
static_assert(sizeof(AbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange) == 0x000018, "Wrong size on AbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange");
static_assert(offsetof(AbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange, NewMode) == 0x000008, "Member 'AbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange::NewMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange, ReturnValue) == 0x000010, "Member 'AbilityTask_WaitMovementModeChange_CreateWaitMovementModeChange::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitMovementModeChange.OnMovementModeChange
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_WaitMovementModeChange_OnMovementModeChange final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityTask_WaitMovementModeChange_OnMovementModeChange) == 0x000008, "Wrong alignment on AbilityTask_WaitMovementModeChange_OnMovementModeChange");
static_assert(sizeof(AbilityTask_WaitMovementModeChange_OnMovementModeChange) == 0x000010, "Wrong size on AbilityTask_WaitMovementModeChange_OnMovementModeChange");
static_assert(offsetof(AbilityTask_WaitMovementModeChange_OnMovementModeChange, Character) == 0x000000, "Member 'AbilityTask_WaitMovementModeChange_OnMovementModeChange::Character' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitMovementModeChange_OnMovementModeChange, PrevMovementMode) == 0x000008, "Member 'AbilityTask_WaitMovementModeChange_OnMovementModeChange::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitMovementModeChange_OnMovementModeChange, PreviousCustomMode) == 0x000009, "Member 'AbilityTask_WaitMovementModeChange_OnMovementModeChange::PreviousCustomMode' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitOverlap.WaitForOverlap
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_WaitOverlap_WaitForOverlap final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitOverlap*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitOverlap_WaitForOverlap) == 0x000008, "Wrong alignment on AbilityTask_WaitOverlap_WaitForOverlap");
static_assert(sizeof(AbilityTask_WaitOverlap_WaitForOverlap) == 0x000010, "Wrong size on AbilityTask_WaitOverlap_WaitForOverlap");
static_assert(offsetof(AbilityTask_WaitOverlap_WaitForOverlap, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitOverlap_WaitForOverlap::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitOverlap_WaitForOverlap, ReturnValue) == 0x000008, "Member 'AbilityTask_WaitOverlap_WaitForOverlap::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitOverlap.OnHitCallback
// 0x0118 (0x0118 - 0x0000)
struct AbilityTask_WaitOverlap_OnHitCallback final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitOverlap_OnHitCallback) == 0x000008, "Wrong alignment on AbilityTask_WaitOverlap_OnHitCallback");
static_assert(sizeof(AbilityTask_WaitOverlap_OnHitCallback) == 0x000118, "Wrong size on AbilityTask_WaitOverlap_OnHitCallback");
static_assert(offsetof(AbilityTask_WaitOverlap_OnHitCallback, HitComp) == 0x000000, "Member 'AbilityTask_WaitOverlap_OnHitCallback::HitComp' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitOverlap_OnHitCallback, OtherActor) == 0x000008, "Member 'AbilityTask_WaitOverlap_OnHitCallback::OtherActor' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitOverlap_OnHitCallback, OtherComp) == 0x000010, "Member 'AbilityTask_WaitOverlap_OnHitCallback::OtherComp' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitOverlap_OnHitCallback, NormalImpulse) == 0x000018, "Member 'AbilityTask_WaitOverlap_OnHitCallback::NormalImpulse' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitOverlap_OnHitCallback, Hit) == 0x000030, "Member 'AbilityTask_WaitOverlap_OnHitCallback::Hit' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitTargetData.WaitTargetData
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_WaitTargetData_WaitTargetData final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayTargetingConfirmation                ConfirmationType;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGameplayAbilityTargetActor> Param_Class;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitTargetData*            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitTargetData_WaitTargetData) == 0x000008, "Wrong alignment on AbilityTask_WaitTargetData_WaitTargetData");
static_assert(sizeof(AbilityTask_WaitTargetData_WaitTargetData) == 0x000028, "Wrong size on AbilityTask_WaitTargetData_WaitTargetData");
static_assert(offsetof(AbilityTask_WaitTargetData_WaitTargetData, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitTargetData_WaitTargetData::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_WaitTargetData, TaskInstanceName) == 0x000008, "Member 'AbilityTask_WaitTargetData_WaitTargetData::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_WaitTargetData, ConfirmationType) == 0x000010, "Member 'AbilityTask_WaitTargetData_WaitTargetData::ConfirmationType' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_WaitTargetData, Param_Class) == 0x000018, "Member 'AbilityTask_WaitTargetData_WaitTargetData::Param_Class' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_WaitTargetData, ReturnValue) == 0x000020, "Member 'AbilityTask_WaitTargetData_WaitTargetData::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitTargetData.WaitTargetDataUsingActor
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_WaitTargetData_WaitTargetDataUsingActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayTargetingConfirmation                ConfirmationType;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameplayAbilityTargetActor*            Param_TargetActor;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitTargetData*            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitTargetData_WaitTargetDataUsingActor) == 0x000008, "Wrong alignment on AbilityTask_WaitTargetData_WaitTargetDataUsingActor");
static_assert(sizeof(AbilityTask_WaitTargetData_WaitTargetDataUsingActor) == 0x000028, "Wrong size on AbilityTask_WaitTargetData_WaitTargetDataUsingActor");
static_assert(offsetof(AbilityTask_WaitTargetData_WaitTargetDataUsingActor, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitTargetData_WaitTargetDataUsingActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_WaitTargetDataUsingActor, TaskInstanceName) == 0x000008, "Member 'AbilityTask_WaitTargetData_WaitTargetDataUsingActor::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_WaitTargetDataUsingActor, ConfirmationType) == 0x000010, "Member 'AbilityTask_WaitTargetData_WaitTargetDataUsingActor::ConfirmationType' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_WaitTargetDataUsingActor, Param_TargetActor) == 0x000018, "Member 'AbilityTask_WaitTargetData_WaitTargetDataUsingActor::Param_TargetActor' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_WaitTargetDataUsingActor, ReturnValue) == 0x000020, "Member 'AbilityTask_WaitTargetData_WaitTargetDataUsingActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitTargetData.BeginSpawningActor
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_WaitTargetData_BeginSpawningActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameplayAbilityTargetActor> Param_Class;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameplayAbilityTargetActor*            SpawnedActor;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityTask_WaitTargetData_BeginSpawningActor) == 0x000008, "Wrong alignment on AbilityTask_WaitTargetData_BeginSpawningActor");
static_assert(sizeof(AbilityTask_WaitTargetData_BeginSpawningActor) == 0x000020, "Wrong size on AbilityTask_WaitTargetData_BeginSpawningActor");
static_assert(offsetof(AbilityTask_WaitTargetData_BeginSpawningActor, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitTargetData_BeginSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_BeginSpawningActor, Param_Class) == 0x000008, "Member 'AbilityTask_WaitTargetData_BeginSpawningActor::Param_Class' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_BeginSpawningActor, SpawnedActor) == 0x000010, "Member 'AbilityTask_WaitTargetData_BeginSpawningActor::SpawnedActor' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_BeginSpawningActor, ReturnValue) == 0x000018, "Member 'AbilityTask_WaitTargetData_BeginSpawningActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitTargetData.FinishSpawningActor
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_WaitTargetData_FinishSpawningActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameplayAbilityTargetActor*            SpawnedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitTargetData_FinishSpawningActor) == 0x000008, "Wrong alignment on AbilityTask_WaitTargetData_FinishSpawningActor");
static_assert(sizeof(AbilityTask_WaitTargetData_FinishSpawningActor) == 0x000010, "Wrong size on AbilityTask_WaitTargetData_FinishSpawningActor");
static_assert(offsetof(AbilityTask_WaitTargetData_FinishSpawningActor, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitTargetData_FinishSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_FinishSpawningActor, SpawnedActor) == 0x000008, "Member 'AbilityTask_WaitTargetData_FinishSpawningActor::SpawnedActor' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitTargetData.OnTargetDataCancelledCallback
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_WaitTargetData_OnTargetDataCancelledCallback final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitTargetData_OnTargetDataCancelledCallback) == 0x000008, "Wrong alignment on AbilityTask_WaitTargetData_OnTargetDataCancelledCallback");
static_assert(sizeof(AbilityTask_WaitTargetData_OnTargetDataCancelledCallback) == 0x000028, "Wrong size on AbilityTask_WaitTargetData_OnTargetDataCancelledCallback");
static_assert(offsetof(AbilityTask_WaitTargetData_OnTargetDataCancelledCallback, Data) == 0x000000, "Member 'AbilityTask_WaitTargetData_OnTargetDataCancelledCallback::Data' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitTargetData.OnTargetDataReadyCallback
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_WaitTargetData_OnTargetDataReadyCallback final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitTargetData_OnTargetDataReadyCallback) == 0x000008, "Wrong alignment on AbilityTask_WaitTargetData_OnTargetDataReadyCallback");
static_assert(sizeof(AbilityTask_WaitTargetData_OnTargetDataReadyCallback) == 0x000028, "Wrong size on AbilityTask_WaitTargetData_OnTargetDataReadyCallback");
static_assert(offsetof(AbilityTask_WaitTargetData_OnTargetDataReadyCallback, Data) == 0x000000, "Member 'AbilityTask_WaitTargetData_OnTargetDataReadyCallback::Data' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitTargetData.OnTargetDataReplicatedCallback
// 0x0030 (0x0030 - 0x0000)
struct AbilityTask_WaitTargetData_OnTargetDataReplicatedCallback final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivationTag;                                     // 0x0028(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitTargetData_OnTargetDataReplicatedCallback) == 0x000008, "Wrong alignment on AbilityTask_WaitTargetData_OnTargetDataReplicatedCallback");
static_assert(sizeof(AbilityTask_WaitTargetData_OnTargetDataReplicatedCallback) == 0x000030, "Wrong size on AbilityTask_WaitTargetData_OnTargetDataReplicatedCallback");
static_assert(offsetof(AbilityTask_WaitTargetData_OnTargetDataReplicatedCallback, Data) == 0x000000, "Member 'AbilityTask_WaitTargetData_OnTargetDataReplicatedCallback::Data' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitTargetData_OnTargetDataReplicatedCallback, ActivationTag) == 0x000028, "Member 'AbilityTask_WaitTargetData_OnTargetDataReplicatedCallback::ActivationTag' has a wrong offset!");

// Function GameplayAbilities.AbilityAsync_WaitGameplayEffectApplied.WaitGameplayEffectAppliedToActor
// 0x00A8 (0x00A8 - 0x0000)
struct AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTargetDataFilterHandle        SourceFilter;                                      // 0x0008(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               SourceTagRequirements;                             // 0x0018(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTagRequirements;                             // 0x0058(0x0040)(Parm, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ListenForPeriodicEffect;                           // 0x0099(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityAsync_WaitGameplayEffectApplied* ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor) == 0x000008, "Wrong alignment on AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor");
static_assert(sizeof(AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor) == 0x0000A8, "Wrong size on AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor");
static_assert(offsetof(AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor, TargetActor) == 0x000000, "Member 'AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor::TargetActor' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor, SourceFilter) == 0x000008, "Member 'AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor::SourceFilter' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor, SourceTagRequirements) == 0x000018, "Member 'AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor::SourceTagRequirements' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor, TargetTagRequirements) == 0x000058, "Member 'AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor::TargetTagRequirements' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor, TriggerOnce) == 0x000098, "Member 'AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor, ListenForPeriodicEffect) == 0x000099, "Member 'AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor::ListenForPeriodicEffect' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor, ReturnValue) == 0x0000A0, "Member 'AbilityAsync_WaitGameplayEffectApplied_WaitGameplayEffectAppliedToActor::ReturnValue' has a wrong offset!");

// DelegateFunction GameplayAbilities.AbilityAsync_WaitGameplayEffectApplied.OnAppliedDelegate__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct AbilityAsync_WaitGameplayEffectApplied_OnAppliedDelegate__DelegateSignature final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityAsync_WaitGameplayEffectApplied_OnAppliedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AbilityAsync_WaitGameplayEffectApplied_OnAppliedDelegate__DelegateSignature");
static_assert(sizeof(AbilityAsync_WaitGameplayEffectApplied_OnAppliedDelegate__DelegateSignature) == 0x000020, "Wrong size on AbilityAsync_WaitGameplayEffectApplied_OnAppliedDelegate__DelegateSignature");
static_assert(offsetof(AbilityAsync_WaitGameplayEffectApplied_OnAppliedDelegate__DelegateSignature, Source) == 0x000000, "Member 'AbilityAsync_WaitGameplayEffectApplied_OnAppliedDelegate__DelegateSignature::Source' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEffectApplied_OnAppliedDelegate__DelegateSignature, SpecHandle) == 0x000008, "Member 'AbilityAsync_WaitGameplayEffectApplied_OnAppliedDelegate__DelegateSignature::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayEffectApplied_OnAppliedDelegate__DelegateSignature, ActiveHandle) == 0x000018, "Member 'AbilityAsync_WaitGameplayEffectApplied_OnAppliedDelegate__DelegateSignature::ActiveHandle' has a wrong offset!");

// Function GameplayAbilities.AbilityAsync_WaitGameplayTagAdded.WaitGameplayTagAddToActor
// 0x0020 (0x0020 - 0x0000)
struct AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityAsync_WaitGameplayTagAdded*     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor) == 0x000008, "Wrong alignment on AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor");
static_assert(sizeof(AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor) == 0x000020, "Wrong size on AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor");
static_assert(offsetof(AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor, TargetActor) == 0x000000, "Member 'AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor::TargetActor' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor, Tag) == 0x000008, "Member 'AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor::Tag' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor, OnlyTriggerOnce) == 0x000010, "Member 'AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor::OnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor, ReturnValue) == 0x000018, "Member 'AbilityAsync_WaitGameplayTagAdded_WaitGameplayTagAddToActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityAsync_WaitGameplayTagRemoved.WaitGameplayTagRemoveFromActor
// 0x0020 (0x0020 - 0x0000)
struct AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityAsync_WaitGameplayTagRemoved*   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor) == 0x000008, "Wrong alignment on AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor");
static_assert(sizeof(AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor) == 0x000020, "Wrong size on AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor");
static_assert(offsetof(AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor, TargetActor) == 0x000000, "Member 'AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor::TargetActor' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor, Tag) == 0x000008, "Member 'AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor::Tag' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor, OnlyTriggerOnce) == 0x000010, "Member 'AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor::OnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor, ReturnValue) == 0x000018, "Member 'AbilityAsync_WaitGameplayTagRemoved_WaitGameplayTagRemoveFromActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityAsync_WaitGameplayTagQuery.WaitGameplayTagQueryOnActor
// 0x0060 (0x0060 - 0x0000)
struct AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EWaitGameplayTagQueryTriggerCondition         TriggerCondition;                                  // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyTriggerOnce;                                  // 0x0051(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityAsync_WaitGameplayTagQuery*     ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor) == 0x000008, "Wrong alignment on AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor");
static_assert(sizeof(AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor) == 0x000060, "Wrong size on AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor");
static_assert(offsetof(AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor, TargetActor) == 0x000000, "Member 'AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor::TargetActor' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor, TagQuery) == 0x000008, "Member 'AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor::TagQuery' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor, TriggerCondition) == 0x000050, "Member 'AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor::TriggerCondition' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor, bOnlyTriggerOnce) == 0x000051, "Member 'AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor::bOnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor, ReturnValue) == 0x000058, "Member 'AbilityAsync_WaitGameplayTagQuery_WaitGameplayTagQueryOnActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.BP_ApplyGameplayEffectToOwner
// 0x0018 (0x0018 - 0x0000)
struct GameplayAbility_BP_ApplyGameplayEffectToOwner final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_BP_ApplyGameplayEffectToOwner) == 0x000008, "Wrong alignment on GameplayAbility_BP_ApplyGameplayEffectToOwner");
static_assert(sizeof(GameplayAbility_BP_ApplyGameplayEffectToOwner) == 0x000018, "Wrong size on GameplayAbility_BP_ApplyGameplayEffectToOwner");
static_assert(offsetof(GameplayAbility_BP_ApplyGameplayEffectToOwner, GameplayEffectClass) == 0x000000, "Member 'GameplayAbility_BP_ApplyGameplayEffectToOwner::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(GameplayAbility_BP_ApplyGameplayEffectToOwner, GameplayEffectLevel) == 0x000008, "Member 'GameplayAbility_BP_ApplyGameplayEffectToOwner::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(GameplayAbility_BP_ApplyGameplayEffectToOwner, Stacks) == 0x00000C, "Member 'GameplayAbility_BP_ApplyGameplayEffectToOwner::Stacks' has a wrong offset!");
static_assert(offsetof(GameplayAbility_BP_ApplyGameplayEffectToOwner, ReturnValue) == 0x000010, "Member 'GameplayAbility_BP_ApplyGameplayEffectToOwner::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.BP_ApplyGameplayEffectToTarget
// 0x0048 (0x0048 - 0x0000)
struct GameplayAbility_BP_ApplyGameplayEffectToTarget final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_BP_ApplyGameplayEffectToTarget) == 0x000008, "Wrong alignment on GameplayAbility_BP_ApplyGameplayEffectToTarget");
static_assert(sizeof(GameplayAbility_BP_ApplyGameplayEffectToTarget) == 0x000048, "Wrong size on GameplayAbility_BP_ApplyGameplayEffectToTarget");
static_assert(offsetof(GameplayAbility_BP_ApplyGameplayEffectToTarget, TargetData) == 0x000000, "Member 'GameplayAbility_BP_ApplyGameplayEffectToTarget::TargetData' has a wrong offset!");
static_assert(offsetof(GameplayAbility_BP_ApplyGameplayEffectToTarget, GameplayEffectClass) == 0x000028, "Member 'GameplayAbility_BP_ApplyGameplayEffectToTarget::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(GameplayAbility_BP_ApplyGameplayEffectToTarget, GameplayEffectLevel) == 0x000030, "Member 'GameplayAbility_BP_ApplyGameplayEffectToTarget::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(GameplayAbility_BP_ApplyGameplayEffectToTarget, Stacks) == 0x000034, "Member 'GameplayAbility_BP_ApplyGameplayEffectToTarget::Stacks' has a wrong offset!");
static_assert(offsetof(GameplayAbility_BP_ApplyGameplayEffectToTarget, ReturnValue) == 0x000038, "Member 'GameplayAbility_BP_ApplyGameplayEffectToTarget::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.BP_RemoveGameplayEffectFromOwnerWithAssetTags
// 0x0028 (0x0028 - 0x0000)
struct GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags final
{
public:
	struct FGameplayTagContainer                  WithAssetTags;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags) == 0x000008, "Wrong alignment on GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags");
static_assert(sizeof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags) == 0x000028, "Wrong size on GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags");
static_assert(offsetof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags, WithAssetTags) == 0x000000, "Member 'GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags::WithAssetTags' has a wrong offset!");
static_assert(offsetof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags, StacksToRemove) == 0x000020, "Member 'GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithAssetTags::StacksToRemove' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.BP_RemoveGameplayEffectFromOwnerWithGrantedTags
// 0x0028 (0x0028 - 0x0000)
struct GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags final
{
public:
	struct FGameplayTagContainer                  WithGrantedTags;                                   // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags) == 0x000008, "Wrong alignment on GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags");
static_assert(sizeof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags) == 0x000028, "Wrong size on GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags");
static_assert(offsetof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags, WithGrantedTags) == 0x000000, "Member 'GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags::WithGrantedTags' has a wrong offset!");
static_assert(offsetof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags, StacksToRemove) == 0x000020, "Member 'GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithGrantedTags::StacksToRemove' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.BP_RemoveGameplayEffectFromOwnerWithHandle
// 0x000C (0x000C - 0x0000)
struct GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithHandle final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithHandle) == 0x000004, "Wrong alignment on GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithHandle");
static_assert(sizeof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithHandle) == 0x00000C, "Wrong size on GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithHandle");
static_assert(offsetof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithHandle, Handle) == 0x000000, "Member 'GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithHandle::Handle' has a wrong offset!");
static_assert(offsetof(GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithHandle, StacksToRemove) == 0x000008, "Member 'GameplayAbility_BP_RemoveGameplayEffectFromOwnerWithHandle::StacksToRemove' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.CancelTaskByInstanceName
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_CancelTaskByInstanceName final
{
public:
	class FName                                   InstanceName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_CancelTaskByInstanceName) == 0x000004, "Wrong alignment on GameplayAbility_CancelTaskByInstanceName");
static_assert(sizeof(GameplayAbility_CancelTaskByInstanceName) == 0x000008, "Wrong size on GameplayAbility_CancelTaskByInstanceName");
static_assert(offsetof(GameplayAbility_CancelTaskByInstanceName, InstanceName) == 0x000000, "Member 'GameplayAbility_CancelTaskByInstanceName::InstanceName' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.ConfirmTaskByInstanceName
// 0x000C (0x000C - 0x0000)
struct GameplayAbility_ConfirmTaskByInstanceName final
{
public:
	class FName                                   InstanceName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndTask;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbility_ConfirmTaskByInstanceName) == 0x000004, "Wrong alignment on GameplayAbility_ConfirmTaskByInstanceName");
static_assert(sizeof(GameplayAbility_ConfirmTaskByInstanceName) == 0x00000C, "Wrong size on GameplayAbility_ConfirmTaskByInstanceName");
static_assert(offsetof(GameplayAbility_ConfirmTaskByInstanceName, InstanceName) == 0x000000, "Member 'GameplayAbility_ConfirmTaskByInstanceName::InstanceName' has a wrong offset!");
static_assert(offsetof(GameplayAbility_ConfirmTaskByInstanceName, bEndTask) == 0x000008, "Member 'GameplayAbility_ConfirmTaskByInstanceName::bEndTask' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.EndAbilityState
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_EndAbilityState final
{
public:
	class FName                                   OptionalStateNameToEnd;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_EndAbilityState) == 0x000004, "Wrong alignment on GameplayAbility_EndAbilityState");
static_assert(sizeof(GameplayAbility_EndAbilityState) == 0x000008, "Wrong size on GameplayAbility_EndAbilityState");
static_assert(offsetof(GameplayAbility_EndAbilityState, OptionalStateNameToEnd) == 0x000000, "Member 'GameplayAbility_EndAbilityState::OptionalStateNameToEnd' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.EndTaskByInstanceName
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_EndTaskByInstanceName final
{
public:
	class FName                                   InstanceName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_EndTaskByInstanceName) == 0x000004, "Wrong alignment on GameplayAbility_EndTaskByInstanceName");
static_assert(sizeof(GameplayAbility_EndTaskByInstanceName) == 0x000008, "Wrong size on GameplayAbility_EndTaskByInstanceName");
static_assert(offsetof(GameplayAbility_EndTaskByInstanceName, InstanceName) == 0x000000, "Member 'GameplayAbility_EndTaskByInstanceName::InstanceName' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_ActivateAbilityFromEvent
// 0x00B0 (0x00B0 - 0x0000)
struct GameplayAbility_K2_ActivateAbilityFromEvent final
{
public:
	struct FGameplayEventData                     EventData;                                         // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_ActivateAbilityFromEvent) == 0x000008, "Wrong alignment on GameplayAbility_K2_ActivateAbilityFromEvent");
static_assert(sizeof(GameplayAbility_K2_ActivateAbilityFromEvent) == 0x0000B0, "Wrong size on GameplayAbility_K2_ActivateAbilityFromEvent");
static_assert(offsetof(GameplayAbility_K2_ActivateAbilityFromEvent, EventData) == 0x000000, "Member 'GameplayAbility_K2_ActivateAbilityFromEvent::EventData' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_AddGameplayCue
// 0x0028 (0x0028 - 0x0000)
struct GameplayAbility_K2_AddGameplayCue final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           Context;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bRemoveOnAbilityEnd;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbility_K2_AddGameplayCue) == 0x000008, "Wrong alignment on GameplayAbility_K2_AddGameplayCue");
static_assert(sizeof(GameplayAbility_K2_AddGameplayCue) == 0x000028, "Wrong size on GameplayAbility_K2_AddGameplayCue");
static_assert(offsetof(GameplayAbility_K2_AddGameplayCue, GameplayCueTag) == 0x000000, "Member 'GameplayAbility_K2_AddGameplayCue::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_AddGameplayCue, Context) == 0x000008, "Member 'GameplayAbility_K2_AddGameplayCue::Context' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_AddGameplayCue, bRemoveOnAbilityEnd) == 0x000020, "Member 'GameplayAbility_K2_AddGameplayCue::bRemoveOnAbilityEnd' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_AddGameplayCueWithParams
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayAbility_K2_AddGameplayCueWithParams final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameter;                              // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bRemoveOnAbilityEnd;                               // 0x00E8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbility_K2_AddGameplayCueWithParams) == 0x000008, "Wrong alignment on GameplayAbility_K2_AddGameplayCueWithParams");
static_assert(sizeof(GameplayAbility_K2_AddGameplayCueWithParams) == 0x0000F0, "Wrong size on GameplayAbility_K2_AddGameplayCueWithParams");
static_assert(offsetof(GameplayAbility_K2_AddGameplayCueWithParams, GameplayCueTag) == 0x000000, "Member 'GameplayAbility_K2_AddGameplayCueWithParams::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_AddGameplayCueWithParams, GameplayCueParameter) == 0x000008, "Member 'GameplayAbility_K2_AddGameplayCueWithParams::GameplayCueParameter' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_AddGameplayCueWithParams, bRemoveOnAbilityEnd) == 0x0000E8, "Member 'GameplayAbility_K2_AddGameplayCueWithParams::bRemoveOnAbilityEnd' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_ApplyGameplayEffectSpecToOwner
// 0x0018 (0x0018 - 0x0000)
struct GameplayAbility_K2_ApplyGameplayEffectSpecToOwner final
{
public:
	struct FGameplayEffectSpecHandle              EffectSpecHandle;                                  // 0x0000(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_ApplyGameplayEffectSpecToOwner) == 0x000008, "Wrong alignment on GameplayAbility_K2_ApplyGameplayEffectSpecToOwner");
static_assert(sizeof(GameplayAbility_K2_ApplyGameplayEffectSpecToOwner) == 0x000018, "Wrong size on GameplayAbility_K2_ApplyGameplayEffectSpecToOwner");
static_assert(offsetof(GameplayAbility_K2_ApplyGameplayEffectSpecToOwner, EffectSpecHandle) == 0x000000, "Member 'GameplayAbility_K2_ApplyGameplayEffectSpecToOwner::EffectSpecHandle' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_ApplyGameplayEffectSpecToOwner, ReturnValue) == 0x000010, "Member 'GameplayAbility_K2_ApplyGameplayEffectSpecToOwner::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_ApplyGameplayEffectSpecToTarget
// 0x0048 (0x0048 - 0x0000)
struct GameplayAbility_K2_ApplyGameplayEffectSpecToTarget final
{
public:
	struct FGameplayEffectSpecHandle              EffectSpecHandle;                                  // 0x0000(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0010(0x0028)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_ApplyGameplayEffectSpecToTarget) == 0x000008, "Wrong alignment on GameplayAbility_K2_ApplyGameplayEffectSpecToTarget");
static_assert(sizeof(GameplayAbility_K2_ApplyGameplayEffectSpecToTarget) == 0x000048, "Wrong size on GameplayAbility_K2_ApplyGameplayEffectSpecToTarget");
static_assert(offsetof(GameplayAbility_K2_ApplyGameplayEffectSpecToTarget, EffectSpecHandle) == 0x000000, "Member 'GameplayAbility_K2_ApplyGameplayEffectSpecToTarget::EffectSpecHandle' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_ApplyGameplayEffectSpecToTarget, TargetData) == 0x000010, "Member 'GameplayAbility_K2_ApplyGameplayEffectSpecToTarget::TargetData' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_ApplyGameplayEffectSpecToTarget, ReturnValue) == 0x000038, "Member 'GameplayAbility_K2_ApplyGameplayEffectSpecToTarget::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_CheckAbilityCooldown
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbility_K2_CheckAbilityCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_CheckAbilityCooldown) == 0x000001, "Wrong alignment on GameplayAbility_K2_CheckAbilityCooldown");
static_assert(sizeof(GameplayAbility_K2_CheckAbilityCooldown) == 0x000001, "Wrong size on GameplayAbility_K2_CheckAbilityCooldown");
static_assert(offsetof(GameplayAbility_K2_CheckAbilityCooldown, ReturnValue) == 0x000000, "Member 'GameplayAbility_K2_CheckAbilityCooldown::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_CheckAbilityCost
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbility_K2_CheckAbilityCost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_CheckAbilityCost) == 0x000001, "Wrong alignment on GameplayAbility_K2_CheckAbilityCost");
static_assert(sizeof(GameplayAbility_K2_CheckAbilityCost) == 0x000001, "Wrong size on GameplayAbility_K2_CheckAbilityCost");
static_assert(offsetof(GameplayAbility_K2_CheckAbilityCost, ReturnValue) == 0x000000, "Member 'GameplayAbility_K2_CheckAbilityCost::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_CommitAbility
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbility_K2_CommitAbility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_CommitAbility) == 0x000001, "Wrong alignment on GameplayAbility_K2_CommitAbility");
static_assert(sizeof(GameplayAbility_K2_CommitAbility) == 0x000001, "Wrong size on GameplayAbility_K2_CommitAbility");
static_assert(offsetof(GameplayAbility_K2_CommitAbility, ReturnValue) == 0x000000, "Member 'GameplayAbility_K2_CommitAbility::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_CommitAbilityCooldown
// 0x0003 (0x0003 - 0x0000)
struct GameplayAbility_K2_CommitAbilityCooldown final
{
public:
	bool                                          BroadcastCommitEvent;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceCooldown;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_CommitAbilityCooldown) == 0x000001, "Wrong alignment on GameplayAbility_K2_CommitAbilityCooldown");
static_assert(sizeof(GameplayAbility_K2_CommitAbilityCooldown) == 0x000003, "Wrong size on GameplayAbility_K2_CommitAbilityCooldown");
static_assert(offsetof(GameplayAbility_K2_CommitAbilityCooldown, BroadcastCommitEvent) == 0x000000, "Member 'GameplayAbility_K2_CommitAbilityCooldown::BroadcastCommitEvent' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_CommitAbilityCooldown, ForceCooldown) == 0x000001, "Member 'GameplayAbility_K2_CommitAbilityCooldown::ForceCooldown' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_CommitAbilityCooldown, ReturnValue) == 0x000002, "Member 'GameplayAbility_K2_CommitAbilityCooldown::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_CommitAbilityCost
// 0x0002 (0x0002 - 0x0000)
struct GameplayAbility_K2_CommitAbilityCost final
{
public:
	bool                                          BroadcastCommitEvent;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_CommitAbilityCost) == 0x000001, "Wrong alignment on GameplayAbility_K2_CommitAbilityCost");
static_assert(sizeof(GameplayAbility_K2_CommitAbilityCost) == 0x000002, "Wrong size on GameplayAbility_K2_CommitAbilityCost");
static_assert(offsetof(GameplayAbility_K2_CommitAbilityCost, BroadcastCommitEvent) == 0x000000, "Member 'GameplayAbility_K2_CommitAbilityCost::BroadcastCommitEvent' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_CommitAbilityCost, ReturnValue) == 0x000001, "Member 'GameplayAbility_K2_CommitAbilityCost::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_ExecuteGameplayCue
// 0x0020 (0x0020 - 0x0000)
struct GameplayAbility_K2_ExecuteGameplayCue final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           Context;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_ExecuteGameplayCue) == 0x000008, "Wrong alignment on GameplayAbility_K2_ExecuteGameplayCue");
static_assert(sizeof(GameplayAbility_K2_ExecuteGameplayCue) == 0x000020, "Wrong size on GameplayAbility_K2_ExecuteGameplayCue");
static_assert(offsetof(GameplayAbility_K2_ExecuteGameplayCue, GameplayCueTag) == 0x000000, "Member 'GameplayAbility_K2_ExecuteGameplayCue::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_ExecuteGameplayCue, Context) == 0x000008, "Member 'GameplayAbility_K2_ExecuteGameplayCue::Context' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_ExecuteGameplayCueWithParams
// 0x00E8 (0x00E8 - 0x0000)
struct GameplayAbility_K2_ExecuteGameplayCueWithParams final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_ExecuteGameplayCueWithParams) == 0x000008, "Wrong alignment on GameplayAbility_K2_ExecuteGameplayCueWithParams");
static_assert(sizeof(GameplayAbility_K2_ExecuteGameplayCueWithParams) == 0x0000E8, "Wrong size on GameplayAbility_K2_ExecuteGameplayCueWithParams");
static_assert(offsetof(GameplayAbility_K2_ExecuteGameplayCueWithParams, GameplayCueTag) == 0x000000, "Member 'GameplayAbility_K2_ExecuteGameplayCueWithParams::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_ExecuteGameplayCueWithParams, GameplayCueParameters) == 0x000008, "Member 'GameplayAbility_K2_ExecuteGameplayCueWithParams::GameplayCueParameters' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbility_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_OnEndAbility) == 0x000001, "Wrong alignment on GameplayAbility_K2_OnEndAbility");
static_assert(sizeof(GameplayAbility_K2_OnEndAbility) == 0x000001, "Wrong size on GameplayAbility_K2_OnEndAbility");
static_assert(offsetof(GameplayAbility_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GameplayAbility_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_RemoveGameplayCue
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_K2_RemoveGameplayCue final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_RemoveGameplayCue) == 0x000004, "Wrong alignment on GameplayAbility_K2_RemoveGameplayCue");
static_assert(sizeof(GameplayAbility_K2_RemoveGameplayCue) == 0x000008, "Wrong size on GameplayAbility_K2_RemoveGameplayCue");
static_assert(offsetof(GameplayAbility_K2_RemoveGameplayCue, GameplayCueTag) == 0x000000, "Member 'GameplayAbility_K2_RemoveGameplayCue::GameplayCueTag' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.MakeTargetLocationInfoFromOwnerActor
// 0x00A0 (0x00A0 - 0x0000)
struct GameplayAbility_MakeTargetLocationInfoFromOwnerActor final
{
public:
	struct FGameplayAbilityTargetingLocationInfo  ReturnValue;                                       // 0x0000(0x00A0)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_MakeTargetLocationInfoFromOwnerActor) == 0x000010, "Wrong alignment on GameplayAbility_MakeTargetLocationInfoFromOwnerActor");
static_assert(sizeof(GameplayAbility_MakeTargetLocationInfoFromOwnerActor) == 0x0000A0, "Wrong size on GameplayAbility_MakeTargetLocationInfoFromOwnerActor");
static_assert(offsetof(GameplayAbility_MakeTargetLocationInfoFromOwnerActor, ReturnValue) == 0x000000, "Member 'GameplayAbility_MakeTargetLocationInfoFromOwnerActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.MakeTargetLocationInfoFromOwnerSkeletalMeshComponent
// 0x00B0 (0x00B0 - 0x0000)
struct GameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetingLocationInfo  ReturnValue;                                       // 0x0010(0x00A0)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent) == 0x000010, "Wrong alignment on GameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent");
static_assert(sizeof(GameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent) == 0x0000B0, "Wrong size on GameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent");
static_assert(offsetof(GameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent, SocketName) == 0x000000, "Member 'GameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent::SocketName' has a wrong offset!");
static_assert(offsetof(GameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent, ReturnValue) == 0x000010, "Member 'GameplayAbility_MakeTargetLocationInfoFromOwnerSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.MontageJumpToSection
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_MontageJumpToSection final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_MontageJumpToSection) == 0x000004, "Wrong alignment on GameplayAbility_MontageJumpToSection");
static_assert(sizeof(GameplayAbility_MontageJumpToSection) == 0x000008, "Wrong size on GameplayAbility_MontageJumpToSection");
static_assert(offsetof(GameplayAbility_MontageJumpToSection, SectionName) == 0x000000, "Member 'GameplayAbility_MontageJumpToSection::SectionName' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.MontageSetNextSectionName
// 0x0010 (0x0010 - 0x0000)
struct GameplayAbility_MontageSetNextSectionName final
{
public:
	class FName                                   FromSectionName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToSectionName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_MontageSetNextSectionName) == 0x000004, "Wrong alignment on GameplayAbility_MontageSetNextSectionName");
static_assert(sizeof(GameplayAbility_MontageSetNextSectionName) == 0x000010, "Wrong size on GameplayAbility_MontageSetNextSectionName");
static_assert(offsetof(GameplayAbility_MontageSetNextSectionName, FromSectionName) == 0x000000, "Member 'GameplayAbility_MontageSetNextSectionName::FromSectionName' has a wrong offset!");
static_assert(offsetof(GameplayAbility_MontageSetNextSectionName, ToSectionName) == 0x000008, "Member 'GameplayAbility_MontageSetNextSectionName::ToSectionName' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.MontageStop
// 0x0004 (0x0004 - 0x0000)
struct GameplayAbility_MontageStop final
{
public:
	float                                         OverrideBlendOutTime;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_MontageStop) == 0x000004, "Wrong alignment on GameplayAbility_MontageStop");
static_assert(sizeof(GameplayAbility_MontageStop) == 0x000004, "Wrong size on GameplayAbility_MontageStop");
static_assert(offsetof(GameplayAbility_MontageStop, OverrideBlendOutTime) == 0x000000, "Member 'GameplayAbility_MontageStop::OverrideBlendOutTime' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.SendGameplayEvent
// 0x00B8 (0x00B8 - 0x0000)
struct GameplayAbility_SendGameplayEvent final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     Payload;                                           // 0x0008(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_SendGameplayEvent) == 0x000008, "Wrong alignment on GameplayAbility_SendGameplayEvent");
static_assert(sizeof(GameplayAbility_SendGameplayEvent) == 0x0000B8, "Wrong size on GameplayAbility_SendGameplayEvent");
static_assert(offsetof(GameplayAbility_SendGameplayEvent, EventTag) == 0x000000, "Member 'GameplayAbility_SendGameplayEvent::EventTag' has a wrong offset!");
static_assert(offsetof(GameplayAbility_SendGameplayEvent, Payload) == 0x000008, "Member 'GameplayAbility_SendGameplayEvent::Payload' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.SetCanBeCanceled
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbility_SetCanBeCanceled final
{
public:
	bool                                          bCanBeCanceled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_SetCanBeCanceled) == 0x000001, "Wrong alignment on GameplayAbility_SetCanBeCanceled");
static_assert(sizeof(GameplayAbility_SetCanBeCanceled) == 0x000001, "Wrong size on GameplayAbility_SetCanBeCanceled");
static_assert(offsetof(GameplayAbility_SetCanBeCanceled, bCanBeCanceled) == 0x000000, "Member 'GameplayAbility_SetCanBeCanceled::bCanBeCanceled' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.SetShouldBlockOtherAbilities
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbility_SetShouldBlockOtherAbilities final
{
public:
	bool                                          bShouldBlockAbilities;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_SetShouldBlockOtherAbilities) == 0x000001, "Wrong alignment on GameplayAbility_SetShouldBlockOtherAbilities");
static_assert(sizeof(GameplayAbility_SetShouldBlockOtherAbilities) == 0x000001, "Wrong size on GameplayAbility_SetShouldBlockOtherAbilities");
static_assert(offsetof(GameplayAbility_SetShouldBlockOtherAbilities, bShouldBlockAbilities) == 0x000000, "Member 'GameplayAbility_SetShouldBlockOtherAbilities::bShouldBlockAbilities' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetAbilityLevel
// 0x0004 (0x0004 - 0x0000)
struct GameplayAbility_GetAbilityLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetAbilityLevel) == 0x000004, "Wrong alignment on GameplayAbility_GetAbilityLevel");
static_assert(sizeof(GameplayAbility_GetAbilityLevel) == 0x000004, "Wrong size on GameplayAbility_GetAbilityLevel");
static_assert(offsetof(GameplayAbility_GetAbilityLevel, ReturnValue) == 0x000000, "Member 'GameplayAbility_GetAbilityLevel::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetAbilityLevel_BP
// 0x0058 (0x0058 - 0x0000)
struct GameplayAbility_GetAbilityLevel_BP final
{
public:
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbility_GetAbilityLevel_BP) == 0x000008, "Wrong alignment on GameplayAbility_GetAbilityLevel_BP");
static_assert(sizeof(GameplayAbility_GetAbilityLevel_BP) == 0x000058, "Wrong size on GameplayAbility_GetAbilityLevel_BP");
static_assert(offsetof(GameplayAbility_GetAbilityLevel_BP, Handle) == 0x000000, "Member 'GameplayAbility_GetAbilityLevel_BP::Handle' has a wrong offset!");
static_assert(offsetof(GameplayAbility_GetAbilityLevel_BP, ActorInfo) == 0x000008, "Member 'GameplayAbility_GetAbilityLevel_BP::ActorInfo' has a wrong offset!");
static_assert(offsetof(GameplayAbility_GetAbilityLevel_BP, ReturnValue) == 0x000050, "Member 'GameplayAbility_GetAbilityLevel_BP::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetAbilitySystemComponentFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_GetAbilitySystemComponentFromActorInfo final
{
public:
	class UAbilitySystemComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetAbilitySystemComponentFromActorInfo) == 0x000008, "Wrong alignment on GameplayAbility_GetAbilitySystemComponentFromActorInfo");
static_assert(sizeof(GameplayAbility_GetAbilitySystemComponentFromActorInfo) == 0x000008, "Wrong size on GameplayAbility_GetAbilitySystemComponentFromActorInfo");
static_assert(offsetof(GameplayAbility_GetAbilitySystemComponentFromActorInfo, ReturnValue) == 0x000000, "Member 'GameplayAbility_GetAbilitySystemComponentFromActorInfo::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetActorInfo
// 0x0048 (0x0048 - 0x0000)
struct GameplayAbility_GetActorInfo final
{
public:
	struct FGameplayAbilityActorInfo              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetActorInfo) == 0x000008, "Wrong alignment on GameplayAbility_GetActorInfo");
static_assert(sizeof(GameplayAbility_GetActorInfo) == 0x000048, "Wrong size on GameplayAbility_GetActorInfo");
static_assert(offsetof(GameplayAbility_GetActorInfo, ReturnValue) == 0x000000, "Member 'GameplayAbility_GetActorInfo::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetAvatarActorFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_GetAvatarActorFromActorInfo final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetAvatarActorFromActorInfo) == 0x000008, "Wrong alignment on GameplayAbility_GetAvatarActorFromActorInfo");
static_assert(sizeof(GameplayAbility_GetAvatarActorFromActorInfo) == 0x000008, "Wrong size on GameplayAbility_GetAvatarActorFromActorInfo");
static_assert(offsetof(GameplayAbility_GetAvatarActorFromActorInfo, ReturnValue) == 0x000000, "Member 'GameplayAbility_GetAvatarActorFromActorInfo::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetContextFromOwner
// 0x0040 (0x0040 - 0x0000)
struct GameplayAbility_GetContextFromOwner final
{
public:
	struct FGameplayAbilityTargetDataHandle       OptionalTargetData;                                // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetContextFromOwner) == 0x000008, "Wrong alignment on GameplayAbility_GetContextFromOwner");
static_assert(sizeof(GameplayAbility_GetContextFromOwner) == 0x000040, "Wrong size on GameplayAbility_GetContextFromOwner");
static_assert(offsetof(GameplayAbility_GetContextFromOwner, OptionalTargetData) == 0x000000, "Member 'GameplayAbility_GetContextFromOwner::OptionalTargetData' has a wrong offset!");
static_assert(offsetof(GameplayAbility_GetContextFromOwner, ReturnValue) == 0x000028, "Member 'GameplayAbility_GetContextFromOwner::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetCooldownTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct GameplayAbility_GetCooldownTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetCooldownTimeRemaining) == 0x000004, "Wrong alignment on GameplayAbility_GetCooldownTimeRemaining");
static_assert(sizeof(GameplayAbility_GetCooldownTimeRemaining) == 0x000004, "Wrong size on GameplayAbility_GetCooldownTimeRemaining");
static_assert(offsetof(GameplayAbility_GetCooldownTimeRemaining, ReturnValue) == 0x000000, "Member 'GameplayAbility_GetCooldownTimeRemaining::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetCurrentMontage
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_GetCurrentMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetCurrentMontage) == 0x000008, "Wrong alignment on GameplayAbility_GetCurrentMontage");
static_assert(sizeof(GameplayAbility_GetCurrentMontage) == 0x000008, "Wrong size on GameplayAbility_GetCurrentMontage");
static_assert(offsetof(GameplayAbility_GetCurrentMontage, ReturnValue) == 0x000000, "Member 'GameplayAbility_GetCurrentMontage::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetCurrentSourceObject
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_GetCurrentSourceObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetCurrentSourceObject) == 0x000008, "Wrong alignment on GameplayAbility_GetCurrentSourceObject");
static_assert(sizeof(GameplayAbility_GetCurrentSourceObject) == 0x000008, "Wrong size on GameplayAbility_GetCurrentSourceObject");
static_assert(offsetof(GameplayAbility_GetCurrentSourceObject, ReturnValue) == 0x000000, "Member 'GameplayAbility_GetCurrentSourceObject::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetGrantedByEffectContext
// 0x0018 (0x0018 - 0x0000)
struct GameplayAbility_GetGrantedByEffectContext final
{
public:
	struct FGameplayEffectContextHandle           ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetGrantedByEffectContext) == 0x000008, "Wrong alignment on GameplayAbility_GetGrantedByEffectContext");
static_assert(sizeof(GameplayAbility_GetGrantedByEffectContext) == 0x000018, "Wrong size on GameplayAbility_GetGrantedByEffectContext");
static_assert(offsetof(GameplayAbility_GetGrantedByEffectContext, ReturnValue) == 0x000000, "Member 'GameplayAbility_GetGrantedByEffectContext::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetOwningActorFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_GetOwningActorFromActorInfo final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetOwningActorFromActorInfo) == 0x000008, "Wrong alignment on GameplayAbility_GetOwningActorFromActorInfo");
static_assert(sizeof(GameplayAbility_GetOwningActorFromActorInfo) == 0x000008, "Wrong size on GameplayAbility_GetOwningActorFromActorInfo");
static_assert(offsetof(GameplayAbility_GetOwningActorFromActorInfo, ReturnValue) == 0x000000, "Member 'GameplayAbility_GetOwningActorFromActorInfo::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetOwningComponentFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_GetOwningComponentFromActorInfo final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetOwningComponentFromActorInfo) == 0x000008, "Wrong alignment on GameplayAbility_GetOwningComponentFromActorInfo");
static_assert(sizeof(GameplayAbility_GetOwningComponentFromActorInfo) == 0x000008, "Wrong size on GameplayAbility_GetOwningComponentFromActorInfo");
static_assert(offsetof(GameplayAbility_GetOwningComponentFromActorInfo, ReturnValue) == 0x000000, "Member 'GameplayAbility_GetOwningComponentFromActorInfo::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.GetSourceObject_BP
// 0x0058 (0x0058 - 0x0000)
struct GameplayAbility_GetSourceObject_BP final
{
public:
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_GetSourceObject_BP) == 0x000008, "Wrong alignment on GameplayAbility_GetSourceObject_BP");
static_assert(sizeof(GameplayAbility_GetSourceObject_BP) == 0x000058, "Wrong size on GameplayAbility_GetSourceObject_BP");
static_assert(offsetof(GameplayAbility_GetSourceObject_BP, Handle) == 0x000000, "Member 'GameplayAbility_GetSourceObject_BP::Handle' has a wrong offset!");
static_assert(offsetof(GameplayAbility_GetSourceObject_BP, ActorInfo) == 0x000008, "Member 'GameplayAbility_GetSourceObject_BP::ActorInfo' has a wrong offset!");
static_assert(offsetof(GameplayAbility_GetSourceObject_BP, ReturnValue) == 0x000050, "Member 'GameplayAbility_GetSourceObject_BP::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.IsLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbility_IsLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_IsLocallyControlled) == 0x000001, "Wrong alignment on GameplayAbility_IsLocallyControlled");
static_assert(sizeof(GameplayAbility_IsLocallyControlled) == 0x000001, "Wrong size on GameplayAbility_IsLocallyControlled");
static_assert(offsetof(GameplayAbility_IsLocallyControlled, ReturnValue) == 0x000000, "Member 'GameplayAbility_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_CanActivateAbility
// 0x0078 (0x0078 - 0x0000)
struct GameplayAbility_K2_CanActivateAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0048(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0050(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbility_K2_CanActivateAbility) == 0x000008, "Wrong alignment on GameplayAbility_K2_CanActivateAbility");
static_assert(sizeof(GameplayAbility_K2_CanActivateAbility) == 0x000078, "Wrong size on GameplayAbility_K2_CanActivateAbility");
static_assert(offsetof(GameplayAbility_K2_CanActivateAbility, ActorInfo) == 0x000000, "Member 'GameplayAbility_K2_CanActivateAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_CanActivateAbility, Handle) == 0x000048, "Member 'GameplayAbility_K2_CanActivateAbility::Handle' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_CanActivateAbility, RelevantTags) == 0x000050, "Member 'GameplayAbility_K2_CanActivateAbility::RelevantTags' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_CanActivateAbility, ReturnValue) == 0x000070, "Member 'GameplayAbility_K2_CanActivateAbility::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_HasAuthority
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbility_K2_HasAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_K2_HasAuthority) == 0x000001, "Wrong alignment on GameplayAbility_K2_HasAuthority");
static_assert(sizeof(GameplayAbility_K2_HasAuthority) == 0x000001, "Wrong size on GameplayAbility_K2_HasAuthority");
static_assert(offsetof(GameplayAbility_K2_HasAuthority, ReturnValue) == 0x000000, "Member 'GameplayAbility_K2_HasAuthority::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.K2_ShouldAbilityRespondToEvent
// 0x0100 (0x0100 - 0x0000)
struct GameplayAbility_K2_ShouldAbilityRespondToEvent final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     Payload;                                           // 0x0048(0x00B0)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbility_K2_ShouldAbilityRespondToEvent) == 0x000008, "Wrong alignment on GameplayAbility_K2_ShouldAbilityRespondToEvent");
static_assert(sizeof(GameplayAbility_K2_ShouldAbilityRespondToEvent) == 0x000100, "Wrong size on GameplayAbility_K2_ShouldAbilityRespondToEvent");
static_assert(offsetof(GameplayAbility_K2_ShouldAbilityRespondToEvent, ActorInfo) == 0x000000, "Member 'GameplayAbility_K2_ShouldAbilityRespondToEvent::ActorInfo' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_ShouldAbilityRespondToEvent, Payload) == 0x000048, "Member 'GameplayAbility_K2_ShouldAbilityRespondToEvent::Payload' has a wrong offset!");
static_assert(offsetof(GameplayAbility_K2_ShouldAbilityRespondToEvent, ReturnValue) == 0x0000F8, "Member 'GameplayAbility_K2_ShouldAbilityRespondToEvent::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbility.MakeOutgoingGameplayEffectSpec
// 0x0020 (0x0020 - 0x0000)
struct GameplayAbility_MakeOutgoingGameplayEffectSpec final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_MakeOutgoingGameplayEffectSpec) == 0x000008, "Wrong alignment on GameplayAbility_MakeOutgoingGameplayEffectSpec");
static_assert(sizeof(GameplayAbility_MakeOutgoingGameplayEffectSpec) == 0x000020, "Wrong size on GameplayAbility_MakeOutgoingGameplayEffectSpec");
static_assert(offsetof(GameplayAbility_MakeOutgoingGameplayEffectSpec, GameplayEffectClass) == 0x000000, "Member 'GameplayAbility_MakeOutgoingGameplayEffectSpec::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(GameplayAbility_MakeOutgoingGameplayEffectSpec, Level) == 0x000008, "Member 'GameplayAbility_MakeOutgoingGameplayEffectSpec::Level' has a wrong offset!");
static_assert(offsetof(GameplayAbility_MakeOutgoingGameplayEffectSpec, ReturnValue) == 0x000010, "Member 'GameplayAbility_MakeOutgoingGameplayEffectSpec::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbilityWorldReticle.FaceTowardSource
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbilityWorldReticle_FaceTowardSource final
{
public:
	bool                                          bFaceIn2D;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityWorldReticle_FaceTowardSource) == 0x000001, "Wrong alignment on GameplayAbilityWorldReticle_FaceTowardSource");
static_assert(sizeof(GameplayAbilityWorldReticle_FaceTowardSource) == 0x000001, "Wrong size on GameplayAbilityWorldReticle_FaceTowardSource");
static_assert(offsetof(GameplayAbilityWorldReticle_FaceTowardSource, bFaceIn2D) == 0x000000, "Member 'GameplayAbilityWorldReticle_FaceTowardSource::bFaceIn2D' has a wrong offset!");

// Function GameplayAbilities.GameplayAbilityWorldReticle.OnTargetingAnActor
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbilityWorldReticle_OnTargetingAnActor final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityWorldReticle_OnTargetingAnActor) == 0x000001, "Wrong alignment on GameplayAbilityWorldReticle_OnTargetingAnActor");
static_assert(sizeof(GameplayAbilityWorldReticle_OnTargetingAnActor) == 0x000001, "Wrong size on GameplayAbilityWorldReticle_OnTargetingAnActor");
static_assert(offsetof(GameplayAbilityWorldReticle_OnTargetingAnActor, bNewValue) == 0x000000, "Member 'GameplayAbilityWorldReticle_OnTargetingAnActor::bNewValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbilityWorldReticle.OnValidTargetChanged
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbilityWorldReticle_OnValidTargetChanged final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityWorldReticle_OnValidTargetChanged) == 0x000001, "Wrong alignment on GameplayAbilityWorldReticle_OnValidTargetChanged");
static_assert(sizeof(GameplayAbilityWorldReticle_OnValidTargetChanged) == 0x000001, "Wrong size on GameplayAbilityWorldReticle_OnValidTargetChanged");
static_assert(offsetof(GameplayAbilityWorldReticle_OnValidTargetChanged, bNewValue) == 0x000000, "Member 'GameplayAbilityWorldReticle_OnValidTargetChanged::bNewValue' has a wrong offset!");

// Function GameplayAbilities.GameplayAbilityWorldReticle.SetReticleMaterialParamFloat
// 0x000C (0x000C - 0x0000)
struct GameplayAbilityWorldReticle_SetReticleMaterialParamFloat final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityWorldReticle_SetReticleMaterialParamFloat) == 0x000004, "Wrong alignment on GameplayAbilityWorldReticle_SetReticleMaterialParamFloat");
static_assert(sizeof(GameplayAbilityWorldReticle_SetReticleMaterialParamFloat) == 0x00000C, "Wrong size on GameplayAbilityWorldReticle_SetReticleMaterialParamFloat");
static_assert(offsetof(GameplayAbilityWorldReticle_SetReticleMaterialParamFloat, ParamName) == 0x000000, "Member 'GameplayAbilityWorldReticle_SetReticleMaterialParamFloat::ParamName' has a wrong offset!");
static_assert(offsetof(GameplayAbilityWorldReticle_SetReticleMaterialParamFloat, Value) == 0x000008, "Member 'GameplayAbilityWorldReticle_SetReticleMaterialParamFloat::Value' has a wrong offset!");

// Function GameplayAbilities.GameplayAbilityWorldReticle.SetReticleMaterialParamVector
// 0x0020 (0x0020 - 0x0000)
struct GameplayAbilityWorldReticle_SetReticleMaterialParamVector final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityWorldReticle_SetReticleMaterialParamVector) == 0x000008, "Wrong alignment on GameplayAbilityWorldReticle_SetReticleMaterialParamVector");
static_assert(sizeof(GameplayAbilityWorldReticle_SetReticleMaterialParamVector) == 0x000020, "Wrong size on GameplayAbilityWorldReticle_SetReticleMaterialParamVector");
static_assert(offsetof(GameplayAbilityWorldReticle_SetReticleMaterialParamVector, ParamName) == 0x000000, "Member 'GameplayAbilityWorldReticle_SetReticleMaterialParamVector::ParamName' has a wrong offset!");
static_assert(offsetof(GameplayAbilityWorldReticle_SetReticleMaterialParamVector, Value) == 0x000008, "Member 'GameplayAbilityWorldReticle_SetReticleMaterialParamVector::Value' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_ApplyRootMotionConstantForce.ApplyRootMotionConstantForce
// 0x0070 (0x0070 - 0x0000)
struct AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Param_WorldDirection;                              // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Strength;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bIsAdditive;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Param_StrengthOverTime;                            // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinish;                               // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bEnableGravity;                              // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_ApplyRootMotionConstantForce* ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce) == 0x000008, "Wrong alignment on AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce");
static_assert(sizeof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce) == 0x000070, "Wrong size on AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, OwningAbility) == 0x000000, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, TaskInstanceName) == 0x000008, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, Param_WorldDirection) == 0x000010, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::Param_WorldDirection' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, Param_Strength) == 0x000028, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::Param_Strength' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, Param_Duration) == 0x00002C, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::Param_Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, Param_bIsAdditive) == 0x000030, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::Param_bIsAdditive' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, Param_StrengthOverTime) == 0x000038, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::Param_StrengthOverTime' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, VelocityOnFinishMode) == 0x000040, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, SetVelocityOnFinish) == 0x000048, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::SetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, ClampVelocityOnFinish) == 0x000060, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, Param_bEnableGravity) == 0x000064, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::Param_bEnableGravity' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce, ReturnValue) == 0x000068, "Member 'AbilityTask_ApplyRootMotionConstantForce_ApplyRootMotionConstantForce::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_ApplyRootMotionJumpForce.ApplyRootMotionJumpForce
// 0x0078 (0x0078 - 0x0000)
struct AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Param_Rotation;                                    // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Param_Distance;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Height;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_MinimumLandedTriggerTime;                    // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bFinishOnLanded;                             // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinish;                               // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           Param_PathOffsetCurve;                             // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Param_TimeMappingCurve;                            // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_ApplyRootMotionJumpForce*  ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce) == 0x000008, "Wrong alignment on AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce");
static_assert(sizeof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce) == 0x000078, "Wrong size on AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, OwningAbility) == 0x000000, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, TaskInstanceName) == 0x000008, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, Param_Rotation) == 0x000010, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::Param_Rotation' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, Param_Distance) == 0x000028, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::Param_Distance' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, Param_Height) == 0x00002C, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::Param_Height' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, Param_Duration) == 0x000030, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::Param_Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, Param_MinimumLandedTriggerTime) == 0x000034, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::Param_MinimumLandedTriggerTime' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, Param_bFinishOnLanded) == 0x000038, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::Param_bFinishOnLanded' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, VelocityOnFinishMode) == 0x000039, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, SetVelocityOnFinish) == 0x000040, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::SetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, ClampVelocityOnFinish) == 0x000058, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, Param_PathOffsetCurve) == 0x000060, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::Param_PathOffsetCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, Param_TimeMappingCurve) == 0x000068, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::Param_TimeMappingCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce, ReturnValue) == 0x000070, "Member 'AbilityTask_ApplyRootMotionJumpForce_ApplyRootMotionJumpForce::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_ApplyRootMotionJumpForce.OnLandedCallback
// 0x00E8 (0x00E8 - 0x0000)
struct AbilityTask_ApplyRootMotionJumpForce_OnLandedCallback final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotionJumpForce_OnLandedCallback) == 0x000008, "Wrong alignment on AbilityTask_ApplyRootMotionJumpForce_OnLandedCallback");
static_assert(sizeof(AbilityTask_ApplyRootMotionJumpForce_OnLandedCallback) == 0x0000E8, "Wrong size on AbilityTask_ApplyRootMotionJumpForce_OnLandedCallback");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpForce_OnLandedCallback, Hit) == 0x000000, "Member 'AbilityTask_ApplyRootMotionJumpForce_OnLandedCallback::Hit' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_ApplyRootMotionMoveToActorForce.ApplyRootMotionMoveToActorForce
// 0x0090 (0x0090 - 0x0000)
struct AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Param_TargetActor;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Param_TargetLocationOffset;                        // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionMoveToActorTargetOffsetType        Param_OffsetAlignment;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_Duration;                                    // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TargetLerpSpeedHorizontal;                         // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TargetLerpSpeedVertical;                           // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bSetNewMovementMode;                         // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 MovementMode;                                      // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bRestrictSpeedToExpected;                    // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           Param_PathOffsetCurve;                             // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Param_TimeMappingCurve;                            // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinish;                               // 0x0068(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bDisableDestinationReachedInterrupt;         // 0x0084(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_ApplyRootMotionMoveToActorForce* ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce) == 0x000008, "Wrong alignment on AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce");
static_assert(sizeof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce) == 0x000090, "Wrong size on AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, OwningAbility) == 0x000000, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, TaskInstanceName) == 0x000008, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, Param_TargetActor) == 0x000010, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::Param_TargetActor' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, Param_TargetLocationOffset) == 0x000018, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::Param_TargetLocationOffset' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, Param_OffsetAlignment) == 0x000030, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::Param_OffsetAlignment' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, Param_Duration) == 0x000034, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::Param_Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, TargetLerpSpeedHorizontal) == 0x000038, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::TargetLerpSpeedHorizontal' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, TargetLerpSpeedVertical) == 0x000040, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::TargetLerpSpeedVertical' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, Param_bSetNewMovementMode) == 0x000048, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::Param_bSetNewMovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, MovementMode) == 0x000049, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::MovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, Param_bRestrictSpeedToExpected) == 0x00004A, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::Param_bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, Param_PathOffsetCurve) == 0x000050, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::Param_PathOffsetCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, Param_TimeMappingCurve) == 0x000058, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::Param_TimeMappingCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, VelocityOnFinishMode) == 0x000060, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, SetVelocityOnFinish) == 0x000068, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::SetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, ClampVelocityOnFinish) == 0x000080, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, Param_bDisableDestinationReachedInterrupt) == 0x000084, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::Param_bDisableDestinationReachedInterrupt' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce, ReturnValue) == 0x000088, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToActorForce::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_ApplyRootMotionMoveToActorForce.ApplyRootMotionMoveToTargetDataActorForce
// 0x00B8 (0x00B8 - 0x0000)
struct AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       TargetDataHandle;                                  // 0x0010(0x0028)(Parm, NativeAccessSpecifierPublic)
	int32                                         TargetDataIndex;                                   // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetActorIndex;                                  // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Param_TargetLocationOffset;                        // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionMoveToActorTargetOffsetType        Param_OffsetAlignment;                             // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_Duration;                                    // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TargetLerpSpeedHorizontal;                         // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TargetLerpSpeedVertical;                           // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bSetNewMovementMode;                         // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 MovementMode;                                      // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bRestrictSpeedToExpected;                    // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           Param_PathOffsetCurve;                             // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Param_TimeMappingCurve;                            // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinish;                               // 0x0090(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bDisableDestinationReachedInterrupt;         // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_ApplyRootMotionMoveToActorForce* ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce) == 0x000008, "Wrong alignment on AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce");
static_assert(sizeof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce) == 0x0000B8, "Wrong size on AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, OwningAbility) == 0x000000, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, TaskInstanceName) == 0x000008, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, TargetDataHandle) == 0x000010, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::TargetDataHandle' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, TargetDataIndex) == 0x000038, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::TargetDataIndex' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, TargetActorIndex) == 0x00003C, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::TargetActorIndex' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, Param_TargetLocationOffset) == 0x000040, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::Param_TargetLocationOffset' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, Param_OffsetAlignment) == 0x000058, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::Param_OffsetAlignment' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, Param_Duration) == 0x00005C, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::Param_Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, TargetLerpSpeedHorizontal) == 0x000060, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::TargetLerpSpeedHorizontal' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, TargetLerpSpeedVertical) == 0x000068, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::TargetLerpSpeedVertical' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, Param_bSetNewMovementMode) == 0x000070, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::Param_bSetNewMovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, MovementMode) == 0x000071, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::MovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, Param_bRestrictSpeedToExpected) == 0x000072, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::Param_bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, Param_PathOffsetCurve) == 0x000078, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::Param_PathOffsetCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, Param_TimeMappingCurve) == 0x000080, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::Param_TimeMappingCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, VelocityOnFinishMode) == 0x000088, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, SetVelocityOnFinish) == 0x000090, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::SetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, ClampVelocityOnFinish) == 0x0000A8, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, Param_bDisableDestinationReachedInterrupt) == 0x0000AC, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::Param_bDisableDestinationReachedInterrupt' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce, ReturnValue) == 0x0000B0, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_ApplyRootMotionMoveToTargetDataActorForce::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_ApplyRootMotionMoveToActorForce.OnTargetActorSwapped
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_ApplyRootMotionMoveToActorForce_OnTargetActorSwapped final
{
public:
	class AActor*                                 OriginalTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewTarget;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotionMoveToActorForce_OnTargetActorSwapped) == 0x000008, "Wrong alignment on AbilityTask_ApplyRootMotionMoveToActorForce_OnTargetActorSwapped");
static_assert(sizeof(AbilityTask_ApplyRootMotionMoveToActorForce_OnTargetActorSwapped) == 0x000010, "Wrong size on AbilityTask_ApplyRootMotionMoveToActorForce_OnTargetActorSwapped");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_OnTargetActorSwapped, OriginalTarget) == 0x000000, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_OnTargetActorSwapped::OriginalTarget' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToActorForce_OnTargetActorSwapped, NewTarget) == 0x000008, "Member 'AbilityTask_ApplyRootMotionMoveToActorForce_OnTargetActorSwapped::NewTarget' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_ApplyRootMotionMoveToForce.ApplyRootMotionMoveToForce
// 0x0068 (0x0068 - 0x0000)
struct AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Param_TargetLocation;                              // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bSetNewMovementMode;                         // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 MovementMode;                                      // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bRestrictSpeedToExpected;                    // 0x002E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           Param_PathOffsetCurve;                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinish;                               // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_ApplyRootMotionMoveToForce* ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce) == 0x000008, "Wrong alignment on AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce");
static_assert(sizeof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce) == 0x000068, "Wrong size on AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, OwningAbility) == 0x000000, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, TaskInstanceName) == 0x000008, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, Param_TargetLocation) == 0x000010, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::Param_TargetLocation' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, Param_Duration) == 0x000028, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::Param_Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, Param_bSetNewMovementMode) == 0x00002C, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::Param_bSetNewMovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, MovementMode) == 0x00002D, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::MovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, Param_bRestrictSpeedToExpected) == 0x00002E, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::Param_bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, Param_PathOffsetCurve) == 0x000030, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::Param_PathOffsetCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, VelocityOnFinishMode) == 0x000038, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, SetVelocityOnFinish) == 0x000040, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::SetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, ClampVelocityOnFinish) == 0x000058, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce, ReturnValue) == 0x000060, "Member 'AbilityTask_ApplyRootMotionMoveToForce_ApplyRootMotionMoveToForce::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_ApplyRootMotionRadialForce.ApplyRootMotionRadialForce
// 0x00A0 (0x00A0 - 0x0000)
struct AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Param_Location;                                    // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Param_LocationActor;                               // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Strength;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Radius;                                      // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bIsPush;                                     // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bIsAdditive;                                 // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bNoZForce;                                   // 0x003E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Param_StrengthDistanceFalloff;                     // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Param_StrengthOverTime;                            // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bUseFixedWorldDirection;                     // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Param_FixedWorldDirection;                         // 0x0058(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinish;                               // 0x0078(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_ApplyRootMotionRadialForce* ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce) == 0x000008, "Wrong alignment on AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce");
static_assert(sizeof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce) == 0x0000A0, "Wrong size on AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, OwningAbility) == 0x000000, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, TaskInstanceName) == 0x000008, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_Location) == 0x000010, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_Location' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_LocationActor) == 0x000028, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_LocationActor' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_Strength) == 0x000030, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_Strength' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_Duration) == 0x000034, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_Radius) == 0x000038, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_Radius' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_bIsPush) == 0x00003C, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_bIsPush' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_bIsAdditive) == 0x00003D, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_bIsAdditive' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_bNoZForce) == 0x00003E, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_bNoZForce' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_StrengthDistanceFalloff) == 0x000040, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_StrengthDistanceFalloff' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_StrengthOverTime) == 0x000048, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_StrengthOverTime' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_bUseFixedWorldDirection) == 0x000050, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_bUseFixedWorldDirection' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, Param_FixedWorldDirection) == 0x000058, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::Param_FixedWorldDirection' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, VelocityOnFinishMode) == 0x000070, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, SetVelocityOnFinish) == 0x000078, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::SetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, ClampVelocityOnFinish) == 0x000090, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce, ReturnValue) == 0x000098, "Member 'AbilityTask_ApplyRootMotionRadialForce_ApplyRootMotionRadialForce::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_MoveToLocation.MoveToLocation
// 0x0048 (0x0048 - 0x0000)
struct AbilityTask_MoveToLocation_MoveToLocation final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            OptionalInterpolationCurve;                        // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           OptionalVectorInterpolationCurve;                  // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_MoveToLocation*            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_MoveToLocation_MoveToLocation) == 0x000008, "Wrong alignment on AbilityTask_MoveToLocation_MoveToLocation");
static_assert(sizeof(AbilityTask_MoveToLocation_MoveToLocation) == 0x000048, "Wrong size on AbilityTask_MoveToLocation_MoveToLocation");
static_assert(offsetof(AbilityTask_MoveToLocation_MoveToLocation, OwningAbility) == 0x000000, "Member 'AbilityTask_MoveToLocation_MoveToLocation::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveToLocation_MoveToLocation, TaskInstanceName) == 0x000008, "Member 'AbilityTask_MoveToLocation_MoveToLocation::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveToLocation_MoveToLocation, Location) == 0x000010, "Member 'AbilityTask_MoveToLocation_MoveToLocation::Location' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveToLocation_MoveToLocation, Duration) == 0x000028, "Member 'AbilityTask_MoveToLocation_MoveToLocation::Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveToLocation_MoveToLocation, OptionalInterpolationCurve) == 0x000030, "Member 'AbilityTask_MoveToLocation_MoveToLocation::OptionalInterpolationCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveToLocation_MoveToLocation, OptionalVectorInterpolationCurve) == 0x000038, "Member 'AbilityTask_MoveToLocation_MoveToLocation::OptionalVectorInterpolationCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveToLocation_MoveToLocation, ReturnValue) == 0x000040, "Member 'AbilityTask_MoveToLocation_MoveToLocation::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_NetworkSyncPoint.WaitNetSync
// 0x0018 (0x0018 - 0x0000)
struct AbilityTask_NetworkSyncPoint_WaitNetSync final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityTaskNetSyncType                       SyncType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_NetworkSyncPoint*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_NetworkSyncPoint_WaitNetSync) == 0x000008, "Wrong alignment on AbilityTask_NetworkSyncPoint_WaitNetSync");
static_assert(sizeof(AbilityTask_NetworkSyncPoint_WaitNetSync) == 0x000018, "Wrong size on AbilityTask_NetworkSyncPoint_WaitNetSync");
static_assert(offsetof(AbilityTask_NetworkSyncPoint_WaitNetSync, OwningAbility) == 0x000000, "Member 'AbilityTask_NetworkSyncPoint_WaitNetSync::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_NetworkSyncPoint_WaitNetSync, SyncType) == 0x000008, "Member 'AbilityTask_NetworkSyncPoint_WaitNetSync::SyncType' has a wrong offset!");
static_assert(offsetof(AbilityTask_NetworkSyncPoint_WaitNetSync, ReturnValue) == 0x000010, "Member 'AbilityTask_NetworkSyncPoint_WaitNetSync::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_PlayMontageAndWait.CreatePlayMontageAndWaitProxy
// 0x0040 (0x0040 - 0x0000)
struct AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Param_MontageToPlay;                               // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Rate;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param_StartSection;                                // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bStopWhenAbilityEnds;                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_AnimRootMotionTranslationScale;              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_StartTimeSeconds;                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bDirectJumpSection;                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_PlayMontageDelay;                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_PlayMontageAndWait*        ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy) == 0x000008, "Wrong alignment on AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy");
static_assert(sizeof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy) == 0x000040, "Wrong size on AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy, OwningAbility) == 0x000000, "Member 'AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy, TaskInstanceName) == 0x000008, "Member 'AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy, Param_MontageToPlay) == 0x000010, "Member 'AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy::Param_MontageToPlay' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy, Param_Rate) == 0x000018, "Member 'AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy::Param_Rate' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy, Param_StartSection) == 0x00001C, "Member 'AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy::Param_StartSection' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy, Param_bStopWhenAbilityEnds) == 0x000024, "Member 'AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy::Param_bStopWhenAbilityEnds' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy, Param_AnimRootMotionTranslationScale) == 0x000028, "Member 'AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy::Param_AnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy, Param_StartTimeSeconds) == 0x00002C, "Member 'AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy::Param_StartTimeSeconds' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy, Param_bDirectJumpSection) == 0x000030, "Member 'AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy::Param_bDirectJumpSection' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy, Param_PlayMontageDelay) == 0x000034, "Member 'AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy::Param_PlayMontageDelay' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy, ReturnValue) == 0x000038, "Member 'AbilityTask_PlayMontageAndWait_CreatePlayMontageAndWaitProxy::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_PlayMontageAndWait.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_PlayMontageAndWait_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityTask_PlayMontageAndWait_OnMontageBlendingOut) == 0x000008, "Wrong alignment on AbilityTask_PlayMontageAndWait_OnMontageBlendingOut");
static_assert(sizeof(AbilityTask_PlayMontageAndWait_OnMontageBlendingOut) == 0x000010, "Wrong size on AbilityTask_PlayMontageAndWait_OnMontageBlendingOut");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_OnMontageBlendingOut, Montage) == 0x000000, "Member 'AbilityTask_PlayMontageAndWait_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'AbilityTask_PlayMontageAndWait_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_PlayMontageAndWait.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_PlayMontageAndWait_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityTask_PlayMontageAndWait_OnMontageEnded) == 0x000008, "Wrong alignment on AbilityTask_PlayMontageAndWait_OnMontageEnded");
static_assert(sizeof(AbilityTask_PlayMontageAndWait_OnMontageEnded) == 0x000010, "Wrong size on AbilityTask_PlayMontageAndWait_OnMontageEnded");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_OnMontageEnded, Montage) == 0x000000, "Member 'AbilityTask_PlayMontageAndWait_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_OnMontageEnded, bInterrupted) == 0x000008, "Member 'AbilityTask_PlayMontageAndWait_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_PlayMontageAndWait.OnNotifyBeginReceived
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_PlayMontageAndWait_OnNotifyBeginReceived final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointNotifyPayload;                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_PlayMontageAndWait_OnNotifyBeginReceived) == 0x000008, "Wrong alignment on AbilityTask_PlayMontageAndWait_OnNotifyBeginReceived");
static_assert(sizeof(AbilityTask_PlayMontageAndWait_OnNotifyBeginReceived) == 0x000028, "Wrong size on AbilityTask_PlayMontageAndWait_OnNotifyBeginReceived");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_OnNotifyBeginReceived, NotifyName) == 0x000000, "Member 'AbilityTask_PlayMontageAndWait_OnNotifyBeginReceived::NotifyName' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_OnNotifyBeginReceived, BranchingPointNotifyPayload) == 0x000008, "Member 'AbilityTask_PlayMontageAndWait_OnNotifyBeginReceived::BranchingPointNotifyPayload' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_PlayMontageAndWait.OnNotifyEndReceived
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_PlayMontageAndWait_OnNotifyEndReceived final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointNotifyPayload;                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_PlayMontageAndWait_OnNotifyEndReceived) == 0x000008, "Wrong alignment on AbilityTask_PlayMontageAndWait_OnNotifyEndReceived");
static_assert(sizeof(AbilityTask_PlayMontageAndWait_OnNotifyEndReceived) == 0x000028, "Wrong size on AbilityTask_PlayMontageAndWait_OnNotifyEndReceived");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_OnNotifyEndReceived, NotifyName) == 0x000000, "Member 'AbilityTask_PlayMontageAndWait_OnNotifyEndReceived::NotifyName' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWait_OnNotifyEndReceived, BranchingPointNotifyPayload) == 0x000008, "Member 'AbilityTask_PlayMontageAndWait_OnNotifyEndReceived::BranchingPointNotifyPayload' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_Repeat.RepeatAction
// 0x0018 (0x0018 - 0x0000)
struct AbilityTask_Repeat_RepeatAction final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenActions;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalActionCount;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_Repeat*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_Repeat_RepeatAction) == 0x000008, "Wrong alignment on AbilityTask_Repeat_RepeatAction");
static_assert(sizeof(AbilityTask_Repeat_RepeatAction) == 0x000018, "Wrong size on AbilityTask_Repeat_RepeatAction");
static_assert(offsetof(AbilityTask_Repeat_RepeatAction, OwningAbility) == 0x000000, "Member 'AbilityTask_Repeat_RepeatAction::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_Repeat_RepeatAction, TimeBetweenActions) == 0x000008, "Member 'AbilityTask_Repeat_RepeatAction::TimeBetweenActions' has a wrong offset!");
static_assert(offsetof(AbilityTask_Repeat_RepeatAction, TotalActionCount) == 0x00000C, "Member 'AbilityTask_Repeat_RepeatAction::TotalActionCount' has a wrong offset!");
static_assert(offsetof(AbilityTask_Repeat_RepeatAction, ReturnValue) == 0x000010, "Member 'AbilityTask_Repeat_RepeatAction::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_SpawnActor.SpawnActor
// 0x0040 (0x0040 - 0x0000)
struct AbilityTask_SpawnActor_SpawnActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Param_Class;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_SpawnActor*                ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_SpawnActor_SpawnActor) == 0x000008, "Wrong alignment on AbilityTask_SpawnActor_SpawnActor");
static_assert(sizeof(AbilityTask_SpawnActor_SpawnActor) == 0x000040, "Wrong size on AbilityTask_SpawnActor_SpawnActor");
static_assert(offsetof(AbilityTask_SpawnActor_SpawnActor, OwningAbility) == 0x000000, "Member 'AbilityTask_SpawnActor_SpawnActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_SpawnActor_SpawnActor, TargetData) == 0x000008, "Member 'AbilityTask_SpawnActor_SpawnActor::TargetData' has a wrong offset!");
static_assert(offsetof(AbilityTask_SpawnActor_SpawnActor, Param_Class) == 0x000030, "Member 'AbilityTask_SpawnActor_SpawnActor::Param_Class' has a wrong offset!");
static_assert(offsetof(AbilityTask_SpawnActor_SpawnActor, ReturnValue) == 0x000038, "Member 'AbilityTask_SpawnActor_SpawnActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_SpawnActor.BeginSpawningActor
// 0x0048 (0x0048 - 0x0000)
struct AbilityTask_SpawnActor_BeginSpawningActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Param_Class;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnedActor;                                      // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityTask_SpawnActor_BeginSpawningActor) == 0x000008, "Wrong alignment on AbilityTask_SpawnActor_BeginSpawningActor");
static_assert(sizeof(AbilityTask_SpawnActor_BeginSpawningActor) == 0x000048, "Wrong size on AbilityTask_SpawnActor_BeginSpawningActor");
static_assert(offsetof(AbilityTask_SpawnActor_BeginSpawningActor, OwningAbility) == 0x000000, "Member 'AbilityTask_SpawnActor_BeginSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_SpawnActor_BeginSpawningActor, TargetData) == 0x000008, "Member 'AbilityTask_SpawnActor_BeginSpawningActor::TargetData' has a wrong offset!");
static_assert(offsetof(AbilityTask_SpawnActor_BeginSpawningActor, Param_Class) == 0x000030, "Member 'AbilityTask_SpawnActor_BeginSpawningActor::Param_Class' has a wrong offset!");
static_assert(offsetof(AbilityTask_SpawnActor_BeginSpawningActor, SpawnedActor) == 0x000038, "Member 'AbilityTask_SpawnActor_BeginSpawningActor::SpawnedActor' has a wrong offset!");
static_assert(offsetof(AbilityTask_SpawnActor_BeginSpawningActor, ReturnValue) == 0x000040, "Member 'AbilityTask_SpawnActor_BeginSpawningActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_SpawnActor.FinishSpawningActor
// 0x0038 (0x0038 - 0x0000)
struct AbilityTask_SpawnActor_FinishSpawningActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnedActor;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_SpawnActor_FinishSpawningActor) == 0x000008, "Wrong alignment on AbilityTask_SpawnActor_FinishSpawningActor");
static_assert(sizeof(AbilityTask_SpawnActor_FinishSpawningActor) == 0x000038, "Wrong size on AbilityTask_SpawnActor_FinishSpawningActor");
static_assert(offsetof(AbilityTask_SpawnActor_FinishSpawningActor, OwningAbility) == 0x000000, "Member 'AbilityTask_SpawnActor_FinishSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_SpawnActor_FinishSpawningActor, TargetData) == 0x000008, "Member 'AbilityTask_SpawnActor_FinishSpawningActor::TargetData' has a wrong offset!");
static_assert(offsetof(AbilityTask_SpawnActor_FinishSpawningActor, SpawnedActor) == 0x000030, "Member 'AbilityTask_SpawnActor_FinishSpawningActor::SpawnedActor' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_StartAbilityState.StartAbilityState
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_StartAbilityState_StartAbilityState final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndCurrentState;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_StartAbilityState*         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_StartAbilityState_StartAbilityState) == 0x000008, "Wrong alignment on AbilityTask_StartAbilityState_StartAbilityState");
static_assert(sizeof(AbilityTask_StartAbilityState_StartAbilityState) == 0x000020, "Wrong size on AbilityTask_StartAbilityState_StartAbilityState");
static_assert(offsetof(AbilityTask_StartAbilityState_StartAbilityState, OwningAbility) == 0x000000, "Member 'AbilityTask_StartAbilityState_StartAbilityState::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_StartAbilityState_StartAbilityState, StateName) == 0x000008, "Member 'AbilityTask_StartAbilityState_StartAbilityState::StateName' has a wrong offset!");
static_assert(offsetof(AbilityTask_StartAbilityState_StartAbilityState, bEndCurrentState) == 0x000010, "Member 'AbilityTask_StartAbilityState_StartAbilityState::bEndCurrentState' has a wrong offset!");
static_assert(offsetof(AbilityTask_StartAbilityState_StartAbilityState, ReturnValue) == 0x000018, "Member 'AbilityTask_StartAbilityState_StartAbilityState::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_VisualizeTargeting.VisualizeTargeting
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_VisualizeTargeting_VisualizeTargeting final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameplayAbilityTargetActor> Param_Class;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_VisualizeTargeting*        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_VisualizeTargeting_VisualizeTargeting) == 0x000008, "Wrong alignment on AbilityTask_VisualizeTargeting_VisualizeTargeting");
static_assert(sizeof(AbilityTask_VisualizeTargeting_VisualizeTargeting) == 0x000028, "Wrong size on AbilityTask_VisualizeTargeting_VisualizeTargeting");
static_assert(offsetof(AbilityTask_VisualizeTargeting_VisualizeTargeting, OwningAbility) == 0x000000, "Member 'AbilityTask_VisualizeTargeting_VisualizeTargeting::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_VisualizeTargeting, Param_Class) == 0x000008, "Member 'AbilityTask_VisualizeTargeting_VisualizeTargeting::Param_Class' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_VisualizeTargeting, TaskInstanceName) == 0x000010, "Member 'AbilityTask_VisualizeTargeting_VisualizeTargeting::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_VisualizeTargeting, Duration) == 0x000018, "Member 'AbilityTask_VisualizeTargeting_VisualizeTargeting::Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_VisualizeTargeting, ReturnValue) == 0x000020, "Member 'AbilityTask_VisualizeTargeting_VisualizeTargeting::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_VisualizeTargeting.VisualizeTargetingUsingActor
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameplayAbilityTargetActor*            TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_VisualizeTargeting*        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor) == 0x000008, "Wrong alignment on AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor");
static_assert(sizeof(AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor) == 0x000028, "Wrong size on AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor");
static_assert(offsetof(AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor, OwningAbility) == 0x000000, "Member 'AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor, TargetActor) == 0x000008, "Member 'AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor::TargetActor' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor, TaskInstanceName) == 0x000010, "Member 'AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor, Duration) == 0x000018, "Member 'AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor::Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor, ReturnValue) == 0x000020, "Member 'AbilityTask_VisualizeTargeting_VisualizeTargetingUsingActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_VisualizeTargeting.BeginSpawningActor
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_VisualizeTargeting_BeginSpawningActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameplayAbilityTargetActor> Param_Class;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameplayAbilityTargetActor*            SpawnedActor;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityTask_VisualizeTargeting_BeginSpawningActor) == 0x000008, "Wrong alignment on AbilityTask_VisualizeTargeting_BeginSpawningActor");
static_assert(sizeof(AbilityTask_VisualizeTargeting_BeginSpawningActor) == 0x000020, "Wrong size on AbilityTask_VisualizeTargeting_BeginSpawningActor");
static_assert(offsetof(AbilityTask_VisualizeTargeting_BeginSpawningActor, OwningAbility) == 0x000000, "Member 'AbilityTask_VisualizeTargeting_BeginSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_BeginSpawningActor, Param_Class) == 0x000008, "Member 'AbilityTask_VisualizeTargeting_BeginSpawningActor::Param_Class' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_BeginSpawningActor, SpawnedActor) == 0x000010, "Member 'AbilityTask_VisualizeTargeting_BeginSpawningActor::SpawnedActor' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_BeginSpawningActor, ReturnValue) == 0x000018, "Member 'AbilityTask_VisualizeTargeting_BeginSpawningActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_VisualizeTargeting.FinishSpawningActor
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_VisualizeTargeting_FinishSpawningActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameplayAbilityTargetActor*            SpawnedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_VisualizeTargeting_FinishSpawningActor) == 0x000008, "Wrong alignment on AbilityTask_VisualizeTargeting_FinishSpawningActor");
static_assert(sizeof(AbilityTask_VisualizeTargeting_FinishSpawningActor) == 0x000010, "Wrong size on AbilityTask_VisualizeTargeting_FinishSpawningActor");
static_assert(offsetof(AbilityTask_VisualizeTargeting_FinishSpawningActor, OwningAbility) == 0x000000, "Member 'AbilityTask_VisualizeTargeting_FinishSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_VisualizeTargeting_FinishSpawningActor, SpawnedActor) == 0x000008, "Member 'AbilityTask_VisualizeTargeting_FinishSpawningActor::SpawnedActor' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitAbilityActivate.WaitForAbilityActivate
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_WaitAbilityActivate_WaitForAbilityActivate final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithTag;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutTag;                                        // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeTriggeredAbilities;                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitAbilityActivate*       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate) == 0x000008, "Wrong alignment on AbilityTask_WaitAbilityActivate_WaitForAbilityActivate");
static_assert(sizeof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate) == 0x000028, "Wrong size on AbilityTask_WaitAbilityActivate_WaitForAbilityActivate");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivate::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate, WithTag) == 0x000008, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivate::WithTag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate, WithoutTag) == 0x000010, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivate::WithoutTag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate, IncludeTriggeredAbilities) == 0x000018, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivate::IncludeTriggeredAbilities' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate, TriggerOnce) == 0x000019, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivate::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate, ReturnValue) == 0x000020, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivate::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitAbilityActivate.WaitForAbilityActivate_Query
// 0x0060 (0x0060 - 0x0000)
struct AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      Query;                                             // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          IncludeTriggeredAbilities;                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitAbilityActivate*       ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query) == 0x000008, "Wrong alignment on AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query");
static_assert(sizeof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query) == 0x000060, "Wrong size on AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query, Query) == 0x000008, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query::Query' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query, IncludeTriggeredAbilities) == 0x000050, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query::IncludeTriggeredAbilities' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query, TriggerOnce) == 0x000051, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query, ReturnValue) == 0x000058, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivate_Query::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitAbilityActivate.WaitForAbilityActivateWithTagRequirements
// 0x0058 (0x0058 - 0x0000)
struct AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TagRequirements;                                   // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	bool                                          IncludeTriggeredAbilities;                         // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitAbilityActivate*       ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements) == 0x000008, "Wrong alignment on AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements");
static_assert(sizeof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements) == 0x000058, "Wrong size on AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements, TagRequirements) == 0x000008, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements::TagRequirements' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements, IncludeTriggeredAbilities) == 0x000048, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements::IncludeTriggeredAbilities' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements, TriggerOnce) == 0x000049, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements, ReturnValue) == 0x000050, "Member 'AbilityTask_WaitAbilityActivate_WaitForAbilityActivateWithTagRequirements::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitAbilityActivate.OnAbilityActivate
// 0x0008 (0x0008 - 0x0000)
struct AbilityTask_WaitAbilityActivate_OnAbilityActivate final
{
public:
	class UGameplayAbility*                       ActivatedAbility;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitAbilityActivate_OnAbilityActivate) == 0x000008, "Wrong alignment on AbilityTask_WaitAbilityActivate_OnAbilityActivate");
static_assert(sizeof(AbilityTask_WaitAbilityActivate_OnAbilityActivate) == 0x000008, "Wrong size on AbilityTask_WaitAbilityActivate_OnAbilityActivate");
static_assert(offsetof(AbilityTask_WaitAbilityActivate_OnAbilityActivate, ActivatedAbility) == 0x000000, "Member 'AbilityTask_WaitAbilityActivate_OnAbilityActivate::ActivatedAbility' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitAbilityCommit.WaitForAbilityCommit
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_WaitAbilityCommit_WaitForAbilityCommit final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithTag;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutTage;                                       // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitAbilityCommit*         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit) == 0x000008, "Wrong alignment on AbilityTask_WaitAbilityCommit_WaitForAbilityCommit");
static_assert(sizeof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit) == 0x000028, "Wrong size on AbilityTask_WaitAbilityCommit_WaitForAbilityCommit");
static_assert(offsetof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitAbilityCommit_WaitForAbilityCommit::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit, WithTag) == 0x000008, "Member 'AbilityTask_WaitAbilityCommit_WaitForAbilityCommit::WithTag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit, WithoutTage) == 0x000010, "Member 'AbilityTask_WaitAbilityCommit_WaitForAbilityCommit::WithoutTage' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit, TriggerOnce) == 0x000018, "Member 'AbilityTask_WaitAbilityCommit_WaitForAbilityCommit::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit, ReturnValue) == 0x000020, "Member 'AbilityTask_WaitAbilityCommit_WaitForAbilityCommit::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitAbilityCommit.WaitForAbilityCommit_Query
// 0x0060 (0x0060 - 0x0000)
struct AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      Query;                                             // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitAbilityCommit*         ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query) == 0x000008, "Wrong alignment on AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query");
static_assert(sizeof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query) == 0x000060, "Wrong size on AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query");
static_assert(offsetof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query, Query) == 0x000008, "Member 'AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query::Query' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query, TriggerOnce) == 0x000050, "Member 'AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query, ReturnValue) == 0x000058, "Member 'AbilityTask_WaitAbilityCommit_WaitForAbilityCommit_Query::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitAbilityCommit.OnAbilityCommit
// 0x0008 (0x0008 - 0x0000)
struct AbilityTask_WaitAbilityCommit_OnAbilityCommit final
{
public:
	class UGameplayAbility*                       ActivatedAbility;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitAbilityCommit_OnAbilityCommit) == 0x000008, "Wrong alignment on AbilityTask_WaitAbilityCommit_OnAbilityCommit");
static_assert(sizeof(AbilityTask_WaitAbilityCommit_OnAbilityCommit) == 0x000008, "Wrong size on AbilityTask_WaitAbilityCommit_OnAbilityCommit");
static_assert(offsetof(AbilityTask_WaitAbilityCommit_OnAbilityCommit, ActivatedAbility) == 0x000000, "Member 'AbilityTask_WaitAbilityCommit_OnAbilityCommit::ActivatedAbility' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitAttributeChange.WaitForAttributeChange
// 0x0068 (0x0068 - 0x0000)
struct AbilityTask_WaitAttributeChange_WaitForAttributeChange final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithSrcTag;                                        // 0x0040(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutSrcTag;                                     // 0x0048(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OptionalExternalOwner;                             // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitAttributeChange*       ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitAttributeChange_WaitForAttributeChange) == 0x000008, "Wrong alignment on AbilityTask_WaitAttributeChange_WaitForAttributeChange");
static_assert(sizeof(AbilityTask_WaitAttributeChange_WaitForAttributeChange) == 0x000068, "Wrong size on AbilityTask_WaitAttributeChange_WaitForAttributeChange");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChange, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChange::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChange, Attribute) == 0x000008, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChange::Attribute' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChange, WithSrcTag) == 0x000040, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChange::WithSrcTag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChange, WithoutSrcTag) == 0x000048, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChange::WithoutSrcTag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChange, TriggerOnce) == 0x000050, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChange::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChange, OptionalExternalOwner) == 0x000058, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChange::OptionalExternalOwner' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChange, ReturnValue) == 0x000060, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChange::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitAttributeChange.WaitForAttributeChangeWithComparison
// 0x0070 (0x0070 - 0x0000)
struct AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     InAttribute;                                       // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InWithTag;                                         // 0x0040(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InWithoutTag;                                      // 0x0048(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaitAttributeChangeComparison                InComparisonType;                                  // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InComparisonValue;                                 // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OptionalExternalOwner;                             // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitAttributeChange*       ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison) == 0x000008, "Wrong alignment on AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison");
static_assert(sizeof(AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison) == 0x000070, "Wrong size on AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison, InAttribute) == 0x000008, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison::InAttribute' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison, InWithTag) == 0x000040, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison::InWithTag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison, InWithoutTag) == 0x000048, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison::InWithoutTag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison, InComparisonType) == 0x000050, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison::InComparisonType' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison, InComparisonValue) == 0x000054, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison::InComparisonValue' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison, TriggerOnce) == 0x000058, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison, OptionalExternalOwner) == 0x000060, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison::OptionalExternalOwner' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison, ReturnValue) == 0x000068, "Member 'AbilityTask_WaitAttributeChange_WaitForAttributeChangeWithComparison::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitAttributeChangeRatioThreshold.WaitForAttributeChangeRatioThreshold
// 0x0098 (0x0098 - 0x0000)
struct AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     AttributeNumerator;                                // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     AttributeDenominator;                              // 0x0040(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaitAttributeChangeComparison                ComparisonType;                                    // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ComparisonValue;                                   // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerOnce;                                      // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OptionalExternalOwner;                             // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitAttributeChangeRatioThreshold* ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold) == 0x000008, "Wrong alignment on AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold");
static_assert(sizeof(AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold) == 0x000098, "Wrong size on AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold");
static_assert(offsetof(AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold, AttributeNumerator) == 0x000008, "Member 'AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold::AttributeNumerator' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold, AttributeDenominator) == 0x000040, "Member 'AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold::AttributeDenominator' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold, ComparisonType) == 0x000078, "Member 'AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold::ComparisonType' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold, ComparisonValue) == 0x00007C, "Member 'AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold::ComparisonValue' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold, bTriggerOnce) == 0x000080, "Member 'AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold::bTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold, OptionalExternalOwner) == 0x000088, "Member 'AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold::OptionalExternalOwner' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold, ReturnValue) == 0x000090, "Member 'AbilityTask_WaitAttributeChangeRatioThreshold_WaitForAttributeChangeRatioThreshold::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitAttributeChangeThreshold.WaitForAttributeChangeThreshold
// 0x0060 (0x0060 - 0x0000)
struct AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaitAttributeChangeComparison                ComparisonType;                                    // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ComparisonValue;                                   // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerOnce;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OptionalExternalOwner;                             // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitAttributeChangeThreshold* ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold) == 0x000008, "Wrong alignment on AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold");
static_assert(sizeof(AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold) == 0x000060, "Wrong size on AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold");
static_assert(offsetof(AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold, Attribute) == 0x000008, "Member 'AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold::Attribute' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold, ComparisonType) == 0x000040, "Member 'AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold::ComparisonType' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold, ComparisonValue) == 0x000044, "Member 'AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold::ComparisonValue' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold, bTriggerOnce) == 0x000048, "Member 'AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold::bTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold, OptionalExternalOwner) == 0x000050, "Member 'AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold::OptionalExternalOwner' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold, ReturnValue) == 0x000058, "Member 'AbilityTask_WaitAttributeChangeThreshold_WaitForAttributeChangeThreshold::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitCancel.WaitCancel
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_WaitCancel_WaitCancel final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitCancel*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitCancel_WaitCancel) == 0x000008, "Wrong alignment on AbilityTask_WaitCancel_WaitCancel");
static_assert(sizeof(AbilityTask_WaitCancel_WaitCancel) == 0x000010, "Wrong size on AbilityTask_WaitCancel_WaitCancel");
static_assert(offsetof(AbilityTask_WaitCancel_WaitCancel, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitCancel_WaitCancel::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitCancel_WaitCancel, ReturnValue) == 0x000008, "Member 'AbilityTask_WaitCancel_WaitCancel::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitConfirm.WaitConfirm
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_WaitConfirm_WaitConfirm final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitConfirm*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitConfirm_WaitConfirm) == 0x000008, "Wrong alignment on AbilityTask_WaitConfirm_WaitConfirm");
static_assert(sizeof(AbilityTask_WaitConfirm_WaitConfirm) == 0x000010, "Wrong size on AbilityTask_WaitConfirm_WaitConfirm");
static_assert(offsetof(AbilityTask_WaitConfirm_WaitConfirm, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitConfirm_WaitConfirm::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitConfirm_WaitConfirm, ReturnValue) == 0x000008, "Member 'AbilityTask_WaitConfirm_WaitConfirm::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitConfirm.OnConfirmCallback
// 0x0008 (0x0008 - 0x0000)
struct AbilityTask_WaitConfirm_OnConfirmCallback final
{
public:
	class UGameplayAbility*                       InAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitConfirm_OnConfirmCallback) == 0x000008, "Wrong alignment on AbilityTask_WaitConfirm_OnConfirmCallback");
static_assert(sizeof(AbilityTask_WaitConfirm_OnConfirmCallback) == 0x000008, "Wrong size on AbilityTask_WaitConfirm_OnConfirmCallback");
static_assert(offsetof(AbilityTask_WaitConfirm_OnConfirmCallback, InAbility) == 0x000000, "Member 'AbilityTask_WaitConfirm_OnConfirmCallback::InAbility' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitConfirmCancel.WaitConfirmCancel
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_WaitConfirmCancel_WaitConfirmCancel final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitConfirmCancel*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitConfirmCancel_WaitConfirmCancel) == 0x000008, "Wrong alignment on AbilityTask_WaitConfirmCancel_WaitConfirmCancel");
static_assert(sizeof(AbilityTask_WaitConfirmCancel_WaitConfirmCancel) == 0x000010, "Wrong size on AbilityTask_WaitConfirmCancel_WaitConfirmCancel");
static_assert(offsetof(AbilityTask_WaitConfirmCancel_WaitConfirmCancel, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitConfirmCancel_WaitConfirmCancel::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitConfirmCancel_WaitConfirmCancel, ReturnValue) == 0x000008, "Member 'AbilityTask_WaitConfirmCancel_WaitConfirmCancel::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitDelay.WaitDelay
// 0x0018 (0x0018 - 0x0000)
struct AbilityTask_WaitDelay_WaitDelay final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitDelay*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitDelay_WaitDelay) == 0x000008, "Wrong alignment on AbilityTask_WaitDelay_WaitDelay");
static_assert(sizeof(AbilityTask_WaitDelay_WaitDelay) == 0x000018, "Wrong size on AbilityTask_WaitDelay_WaitDelay");
static_assert(offsetof(AbilityTask_WaitDelay_WaitDelay, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitDelay_WaitDelay::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitDelay_WaitDelay, Time) == 0x000008, "Member 'AbilityTask_WaitDelay_WaitDelay::Time' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitDelay_WaitDelay, ReturnValue) == 0x000010, "Member 'AbilityTask_WaitDelay_WaitDelay::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayEffectApplied.OnApplyGameplayEffectCallback
// 0x02A8 (0x02A8 - 0x0000)
struct AbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpec                    SpecApplied;                                       // 0x0008(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x02A0(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback");
static_assert(sizeof(AbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback) == 0x0002A8, "Wrong size on AbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback, Target) == 0x000000, "Member 'AbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback::Target' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback, SpecApplied) == 0x000008, "Member 'AbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback::SpecApplied' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback, ActiveHandle) == 0x0002A0, "Member 'AbilityTask_WaitGameplayEffectApplied_OnApplyGameplayEffectCallback::ActiveHandle' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayEffectApplied_Self.WaitGameplayEffectAppliedToSelf
// 0x00B8 (0x00B8 - 0x0000)
struct AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTargetDataFilterHandle        SourceFilter;                                      // 0x0008(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               SourceTagRequirements;                             // 0x0018(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTagRequirements;                             // 0x0058(0x0040)(Parm, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OptionalExternalOwner;                             // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ListenForPeriodicEffect;                           // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayEffectApplied_Self* ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf");
static_assert(sizeof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf) == 0x0000B8, "Wrong size on AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf, SourceFilter) == 0x000008, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf::SourceFilter' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf, SourceTagRequirements) == 0x000018, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf::SourceTagRequirements' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf, TargetTagRequirements) == 0x000058, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf::TargetTagRequirements' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf, TriggerOnce) == 0x000098, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf, OptionalExternalOwner) == 0x0000A0, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf::OptionalExternalOwner' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf, ListenForPeriodicEffect) == 0x0000A8, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf::ListenForPeriodicEffect' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf, ReturnValue) == 0x0000B0, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayEffectApplied_Self.WaitGameplayEffectAppliedToSelf_Query
// 0x00C8 (0x00C8 - 0x0000)
struct AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTargetDataFilterHandle        SourceFilter;                                      // 0x0008(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SourceTagQuery;                                    // 0x0018(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TargetTagQuery;                                    // 0x0060(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OptionalExternalOwner;                             // 0x00B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ListenForPeriodicEffect;                           // 0x00B8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayEffectApplied_Self* ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query");
static_assert(sizeof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query) == 0x0000C8, "Wrong size on AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query, SourceFilter) == 0x000008, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query::SourceFilter' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query, SourceTagQuery) == 0x000018, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query::SourceTagQuery' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query, TargetTagQuery) == 0x000060, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query::TargetTagQuery' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query, TriggerOnce) == 0x0000A8, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query, OptionalExternalOwner) == 0x0000B0, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query::OptionalExternalOwner' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query, ListenForPeriodicEffect) == 0x0000B8, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query::ListenForPeriodicEffect' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query, ReturnValue) == 0x0000C0, "Member 'AbilityTask_WaitGameplayEffectApplied_Self_WaitGameplayEffectAppliedToSelf_Query::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayEffectApplied_Target.WaitGameplayEffectAppliedToTarget
// 0x00B8 (0x00B8 - 0x0000)
struct AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTargetDataFilterHandle        TargetFilter;                                      // 0x0008(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               SourceTagRequirements;                             // 0x0018(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTagRequirements;                             // 0x0058(0x0040)(Parm, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OptionalExternalOwner;                             // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ListenForPeriodicEffects;                          // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayEffectApplied_Target* ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget");
static_assert(sizeof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget) == 0x0000B8, "Wrong size on AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget, TargetFilter) == 0x000008, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget::TargetFilter' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget, SourceTagRequirements) == 0x000018, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget::SourceTagRequirements' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget, TargetTagRequirements) == 0x000058, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget::TargetTagRequirements' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget, TriggerOnce) == 0x000098, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget, OptionalExternalOwner) == 0x0000A0, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget::OptionalExternalOwner' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget, ListenForPeriodicEffects) == 0x0000A8, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget::ListenForPeriodicEffects' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget, ReturnValue) == 0x0000B0, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayEffectApplied_Target.WaitGameplayEffectAppliedToTarget_Query
// 0x00C8 (0x00C8 - 0x0000)
struct AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTargetDataFilterHandle        SourceFilter;                                      // 0x0008(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SourceTagQuery;                                    // 0x0018(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TargetTagQuery;                                    // 0x0060(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OptionalExternalOwner;                             // 0x00B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ListenForPeriodicEffect;                           // 0x00B8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayEffectApplied_Target* ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query");
static_assert(sizeof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query) == 0x0000C8, "Wrong size on AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query, SourceFilter) == 0x000008, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query::SourceFilter' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query, SourceTagQuery) == 0x000018, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query::SourceTagQuery' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query, TargetTagQuery) == 0x000060, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query::TargetTagQuery' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query, TriggerOnce) == 0x0000A8, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query::TriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query, OptionalExternalOwner) == 0x0000B0, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query::OptionalExternalOwner' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query, ListenForPeriodicEffect) == 0x0000B8, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query::ListenForPeriodicEffect' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query, ReturnValue) == 0x0000C0, "Member 'AbilityTask_WaitGameplayEffectApplied_Target_WaitGameplayEffectAppliedToTarget_Query::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayEffectBlockedImmunity.WaitGameplayEffectBlockedByImmunity
// 0x00A0 (0x00A0 - 0x0000)
struct AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               SourceTagRequirements;                             // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTagRequirements;                             // 0x0048(0x0040)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 OptionalExternalTarget;                            // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayEffectBlockedImmunity* ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity");
static_assert(sizeof(AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity) == 0x0000A0, "Wrong size on AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity");
static_assert(offsetof(AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity, SourceTagRequirements) == 0x000008, "Member 'AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity::SourceTagRequirements' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity, TargetTagRequirements) == 0x000048, "Member 'AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity::TargetTagRequirements' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity, OptionalExternalTarget) == 0x000088, "Member 'AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity::OptionalExternalTarget' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity, OnlyTriggerOnce) == 0x000090, "Member 'AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity::OnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity, ReturnValue) == 0x000098, "Member 'AbilityTask_WaitGameplayEffectBlockedImmunity_WaitGameplayEffectBlockedByImmunity::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayEffectRemoved.WaitForGameplayEffectRemoved
// 0x0018 (0x0018 - 0x0000)
struct AbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitGameplayEffectRemoved* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved");
static_assert(sizeof(AbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved) == 0x000018, "Wrong size on AbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved");
static_assert(offsetof(AbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved, Handle) == 0x000008, "Member 'AbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved::Handle' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved, ReturnValue) == 0x000010, "Member 'AbilityTask_WaitGameplayEffectRemoved_WaitForGameplayEffectRemoved::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayEffectRemoved.OnGameplayEffectRemoved
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_WaitGameplayEffectRemoved_OnGameplayEffectRemoved final
{
public:
	struct FGameplayEffectRemovalInfo             InGameplayEffectRemovalInfo;                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayEffectRemoved_OnGameplayEffectRemoved) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayEffectRemoved_OnGameplayEffectRemoved");
static_assert(sizeof(AbilityTask_WaitGameplayEffectRemoved_OnGameplayEffectRemoved) == 0x000020, "Wrong size on AbilityTask_WaitGameplayEffectRemoved_OnGameplayEffectRemoved");
static_assert(offsetof(AbilityTask_WaitGameplayEffectRemoved_OnGameplayEffectRemoved, InGameplayEffectRemovalInfo) == 0x000000, "Member 'AbilityTask_WaitGameplayEffectRemoved_OnGameplayEffectRemoved::InGameplayEffectRemovalInfo' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayEffectStackChange.WaitForGameplayEffectStackChange
// 0x0018 (0x0018 - 0x0000)
struct AbilityTask_WaitGameplayEffectStackChange_WaitForGameplayEffectStackChange final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitGameplayEffectStackChange* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayEffectStackChange_WaitForGameplayEffectStackChange) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayEffectStackChange_WaitForGameplayEffectStackChange");
static_assert(sizeof(AbilityTask_WaitGameplayEffectStackChange_WaitForGameplayEffectStackChange) == 0x000018, "Wrong size on AbilityTask_WaitGameplayEffectStackChange_WaitForGameplayEffectStackChange");
static_assert(offsetof(AbilityTask_WaitGameplayEffectStackChange_WaitForGameplayEffectStackChange, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayEffectStackChange_WaitForGameplayEffectStackChange::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectStackChange_WaitForGameplayEffectStackChange, Handle) == 0x000008, "Member 'AbilityTask_WaitGameplayEffectStackChange_WaitForGameplayEffectStackChange::Handle' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectStackChange_WaitForGameplayEffectStackChange, ReturnValue) == 0x000010, "Member 'AbilityTask_WaitGameplayEffectStackChange_WaitForGameplayEffectStackChange::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayEffectStackChange.OnGameplayEffectStackChange
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_WaitGameplayEffectStackChange_OnGameplayEffectStackChange final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldCount;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayEffectStackChange_OnGameplayEffectStackChange) == 0x000004, "Wrong alignment on AbilityTask_WaitGameplayEffectStackChange_OnGameplayEffectStackChange");
static_assert(sizeof(AbilityTask_WaitGameplayEffectStackChange_OnGameplayEffectStackChange) == 0x000010, "Wrong size on AbilityTask_WaitGameplayEffectStackChange_OnGameplayEffectStackChange");
static_assert(offsetof(AbilityTask_WaitGameplayEffectStackChange_OnGameplayEffectStackChange, Handle) == 0x000000, "Member 'AbilityTask_WaitGameplayEffectStackChange_OnGameplayEffectStackChange::Handle' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectStackChange_OnGameplayEffectStackChange, NewCount) == 0x000008, "Member 'AbilityTask_WaitGameplayEffectStackChange_OnGameplayEffectStackChange::NewCount' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEffectStackChange_OnGameplayEffectStackChange, OldCount) == 0x00000C, "Member 'AbilityTask_WaitGameplayEffectStackChange_OnGameplayEffectStackChange::OldCount' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayEvent.WaitGameplayEvent
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_WaitGameplayEvent_WaitGameplayEvent final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Param_OptionalExternalTarget;                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyMatchExact;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayEvent*         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayEvent_WaitGameplayEvent) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayEvent_WaitGameplayEvent");
static_assert(sizeof(AbilityTask_WaitGameplayEvent_WaitGameplayEvent) == 0x000028, "Wrong size on AbilityTask_WaitGameplayEvent_WaitGameplayEvent");
static_assert(offsetof(AbilityTask_WaitGameplayEvent_WaitGameplayEvent, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayEvent_WaitGameplayEvent::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEvent_WaitGameplayEvent, EventTag) == 0x000008, "Member 'AbilityTask_WaitGameplayEvent_WaitGameplayEvent::EventTag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEvent_WaitGameplayEvent, Param_OptionalExternalTarget) == 0x000010, "Member 'AbilityTask_WaitGameplayEvent_WaitGameplayEvent::Param_OptionalExternalTarget' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEvent_WaitGameplayEvent, OnlyTriggerOnce) == 0x000018, "Member 'AbilityTask_WaitGameplayEvent_WaitGameplayEvent::OnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEvent_WaitGameplayEvent, OnlyMatchExact) == 0x000019, "Member 'AbilityTask_WaitGameplayEvent_WaitGameplayEvent::OnlyMatchExact' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayEvent_WaitGameplayEvent, ReturnValue) == 0x000020, "Member 'AbilityTask_WaitGameplayEvent_WaitGameplayEvent::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayTag.GameplayTagCallback
// 0x000C (0x000C - 0x0000)
struct AbilityTask_WaitGameplayTag_GameplayTagCallback final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayTag_GameplayTagCallback) == 0x000004, "Wrong alignment on AbilityTask_WaitGameplayTag_GameplayTagCallback");
static_assert(sizeof(AbilityTask_WaitGameplayTag_GameplayTagCallback) == 0x00000C, "Wrong size on AbilityTask_WaitGameplayTag_GameplayTagCallback");
static_assert(offsetof(AbilityTask_WaitGameplayTag_GameplayTagCallback, Tag) == 0x000000, "Member 'AbilityTask_WaitGameplayTag_GameplayTagCallback::Tag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTag_GameplayTagCallback, NewCount) == 0x000008, "Member 'AbilityTask_WaitGameplayTag_GameplayTagCallback::NewCount' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayTagAdded.WaitGameplayTagAdd
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOptionalExternalTarget;                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayTagAdded*      ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd");
static_assert(sizeof(AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd) == 0x000028, "Wrong size on AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd");
static_assert(offsetof(AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd, Tag) == 0x000008, "Member 'AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd::Tag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd, InOptionalExternalTarget) == 0x000010, "Member 'AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd::InOptionalExternalTarget' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd, OnlyTriggerOnce) == 0x000018, "Member 'AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd::OnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd, ReturnValue) == 0x000020, "Member 'AbilityTask_WaitGameplayTagAdded_WaitGameplayTagAdd::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayTagRemoved.WaitGameplayTagRemove
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOptionalExternalTarget;                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayTagRemoved*    ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove");
static_assert(sizeof(AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove) == 0x000028, "Wrong size on AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove");
static_assert(offsetof(AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove, Tag) == 0x000008, "Member 'AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove::Tag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove, InOptionalExternalTarget) == 0x000010, "Member 'AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove::InOptionalExternalTarget' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove, OnlyTriggerOnce) == 0x000018, "Member 'AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove::OnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove, ReturnValue) == 0x000020, "Member 'AbilityTask_WaitGameplayTagRemoved_WaitGameplayTagRemove::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayTagQuery.WaitGameplayTagQuery
// 0x0068 (0x0068 - 0x0000)
struct AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(ConstParm, Parm, NativeAccessSpecifierPublic)
	const class AActor*                           InOptionalExternalTarget;                          // 0x0050(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaitGameplayTagQueryTriggerCondition         TriggerCondition;                                  // 0x0058(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyTriggerOnce;                                  // 0x0059(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayTagQuery*      ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery");
static_assert(sizeof(AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery) == 0x000068, "Wrong size on AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery");
static_assert(offsetof(AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery, TagQuery) == 0x000008, "Member 'AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery::TagQuery' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery, InOptionalExternalTarget) == 0x000050, "Member 'AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery::InOptionalExternalTarget' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery, TriggerCondition) == 0x000058, "Member 'AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery::TriggerCondition' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery, bOnlyTriggerOnce) == 0x000059, "Member 'AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery::bOnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery, ReturnValue) == 0x000060, "Member 'AbilityTask_WaitGameplayTagQuery_WaitGameplayTagQuery::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitGameplayTagQuery.UpdateTargetTags
// 0x000C (0x000C - 0x0000)
struct AbilityTask_WaitGameplayTagQuery_UpdateTargetTags final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayTagQuery_UpdateTargetTags) == 0x000004, "Wrong alignment on AbilityTask_WaitGameplayTagQuery_UpdateTargetTags");
static_assert(sizeof(AbilityTask_WaitGameplayTagQuery_UpdateTargetTags) == 0x00000C, "Wrong size on AbilityTask_WaitGameplayTagQuery_UpdateTargetTags");
static_assert(offsetof(AbilityTask_WaitGameplayTagQuery_UpdateTargetTags, Tag) == 0x000000, "Member 'AbilityTask_WaitGameplayTagQuery_UpdateTargetTags::Tag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagQuery_UpdateTargetTags, NewCount) == 0x000008, "Member 'AbilityTask_WaitGameplayTagQuery_UpdateTargetTags::NewCount' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitInputRelease.WaitInputRelease
// 0x0018 (0x0018 - 0x0000)
struct AbilityTask_WaitInputRelease_WaitInputRelease final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTestAlreadyReleased;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputRelease*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputRelease_WaitInputRelease) == 0x000008, "Wrong alignment on AbilityTask_WaitInputRelease_WaitInputRelease");
static_assert(sizeof(AbilityTask_WaitInputRelease_WaitInputRelease) == 0x000018, "Wrong size on AbilityTask_WaitInputRelease_WaitInputRelease");
static_assert(offsetof(AbilityTask_WaitInputRelease_WaitInputRelease, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitInputRelease_WaitInputRelease::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputRelease_WaitInputRelease, bTestAlreadyReleased) == 0x000008, "Member 'AbilityTask_WaitInputRelease_WaitInputRelease::bTestAlreadyReleased' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputRelease_WaitInputRelease, ReturnValue) == 0x000010, "Member 'AbilityTask_WaitInputRelease_WaitInputRelease::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilityTask_WaitVelocityChange.CreateWaitVelocityChange
// 0x0030 (0x0030 - 0x0000)
struct AbilityTask_WaitVelocityChange_CreateWaitVelocityChange final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumMagnitude;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitVelocityChange*        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitVelocityChange_CreateWaitVelocityChange) == 0x000008, "Wrong alignment on AbilityTask_WaitVelocityChange_CreateWaitVelocityChange");
static_assert(sizeof(AbilityTask_WaitVelocityChange_CreateWaitVelocityChange) == 0x000030, "Wrong size on AbilityTask_WaitVelocityChange_CreateWaitVelocityChange");
static_assert(offsetof(AbilityTask_WaitVelocityChange_CreateWaitVelocityChange, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitVelocityChange_CreateWaitVelocityChange::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitVelocityChange_CreateWaitVelocityChange, Direction) == 0x000008, "Member 'AbilityTask_WaitVelocityChange_CreateWaitVelocityChange::Direction' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitVelocityChange_CreateWaitVelocityChange, MinimumMagnitude) == 0x000020, "Member 'AbilityTask_WaitVelocityChange_CreateWaitVelocityChange::MinimumMagnitude' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitVelocityChange_CreateWaitVelocityChange, ReturnValue) == 0x000028, "Member 'AbilityTask_WaitVelocityChange_CreateWaitVelocityChange::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AbilityTargetDataFromActor
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_AbilityTargetDataFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromActor) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AbilityTargetDataFromActor");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromActor) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_AbilityTargetDataFromActor");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromActor, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AbilityTargetDataFromActor::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromActor, ReturnValue) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_AbilityTargetDataFromActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AbilityTargetDataFromActorArray
// 0x0040 (0x0040 - 0x0000)
struct AbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray final
{
public:
	TArray<class AActor*>                         ActorArray;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          OneTargetPerHandle;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetDataHandle       ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray) == 0x000040, "Wrong size on AbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray, ActorArray) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray::ActorArray' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray, OneTargetPerHandle) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray::OneTargetPerHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_AbilityTargetDataFromActorArray::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AbilityTargetDataFromHitResult
// 0x0110 (0x0110 - 0x0000)
struct AbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       ReturnValue;                                       // 0x00E8(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult) == 0x000110, "Wrong size on AbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult, HitResult) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult, ReturnValue) == 0x0000E8, "Member 'AbilitySystemBlueprintLibrary_AbilityTargetDataFromHitResult::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AbilityTargetDataFromLocations
// 0x0170 (0x0170 - 0x0000)
struct AbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations final
{
public:
	struct FGameplayAbilityTargetingLocationInfo  SourceLocation;                                    // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetingLocationInfo  TargetLocation;                                    // 0x00A0(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       ReturnValue;                                       // 0x0140(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations) == 0x000010, "Wrong alignment on AbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations) == 0x000170, "Wrong size on AbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations, SourceLocation) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations::SourceLocation' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations, TargetLocation) == 0x0000A0, "Member 'AbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations::TargetLocation' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations, ReturnValue) == 0x000140, "Member 'AbilitySystemBlueprintLibrary_AbilityTargetDataFromLocations::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AddAssetTag
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemBlueprintLibrary_AddAssetTag final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewGameplayTag;                                    // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AddAssetTag) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AddAssetTag");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AddAssetTag) == 0x000028, "Wrong size on AbilitySystemBlueprintLibrary_AddAssetTag");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddAssetTag, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AddAssetTag::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddAssetTag, NewGameplayTag) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_AddAssetTag::NewGameplayTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddAssetTag, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_AddAssetTag::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AddAssetTags
// 0x0040 (0x0040 - 0x0000)
struct AbilitySystemBlueprintLibrary_AddAssetTags final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  NewGameplayTags;                                   // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AddAssetTags) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AddAssetTags");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AddAssetTags) == 0x000040, "Wrong size on AbilitySystemBlueprintLibrary_AddAssetTags");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddAssetTags, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AddAssetTags::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddAssetTags, NewGameplayTags) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_AddAssetTags::NewGameplayTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddAssetTags, ReturnValue) == 0x000030, "Member 'AbilitySystemBlueprintLibrary_AddAssetTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AddGrantedTag
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemBlueprintLibrary_AddGrantedTag final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewGameplayTag;                                    // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AddGrantedTag) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AddGrantedTag");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AddGrantedTag) == 0x000028, "Wrong size on AbilitySystemBlueprintLibrary_AddGrantedTag");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddGrantedTag, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AddGrantedTag::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddGrantedTag, NewGameplayTag) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_AddGrantedTag::NewGameplayTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddGrantedTag, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_AddGrantedTag::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AddGrantedTags
// 0x0040 (0x0040 - 0x0000)
struct AbilitySystemBlueprintLibrary_AddGrantedTags final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  NewGameplayTags;                                   // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AddGrantedTags) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AddGrantedTags");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AddGrantedTags) == 0x000040, "Wrong size on AbilitySystemBlueprintLibrary_AddGrantedTags");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddGrantedTags, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AddGrantedTags::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddGrantedTags, NewGameplayTags) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_AddGrantedTags::NewGameplayTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddGrantedTags, ReturnValue) == 0x000030, "Member 'AbilitySystemBlueprintLibrary_AddGrantedTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AddLinkedGameplayEffect
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemBlueprintLibrary_AddLinkedGameplayEffect final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            LinkedGameplayEffect;                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AddLinkedGameplayEffect) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AddLinkedGameplayEffect");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AddLinkedGameplayEffect) == 0x000028, "Wrong size on AbilitySystemBlueprintLibrary_AddLinkedGameplayEffect");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddLinkedGameplayEffect, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AddLinkedGameplayEffect::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddLinkedGameplayEffect, LinkedGameplayEffect) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_AddLinkedGameplayEffect::LinkedGameplayEffect' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddLinkedGameplayEffect, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_AddLinkedGameplayEffect::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AddLinkedGameplayEffectSpec
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              LinkedGameplayEffectSpec;                          // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec, LinkedGameplayEffectSpec) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec::LinkedGameplayEffectSpec' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec, ReturnValue) == 0x000020, "Member 'AbilitySystemBlueprintLibrary_AddLinkedGameplayEffectSpec::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AddLooseGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_AddLooseGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShouldReplicate;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AddLooseGameplayTags) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AddLooseGameplayTags");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AddLooseGameplayTags) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_AddLooseGameplayTags");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddLooseGameplayTags, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AddLooseGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddLooseGameplayTags, GameplayTags) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_AddLooseGameplayTags::GameplayTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddLooseGameplayTags, bShouldReplicate) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_AddLooseGameplayTags::bShouldReplicate' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AddLooseGameplayTags, ReturnValue) == 0x000029, "Member 'AbilitySystemBlueprintLibrary_AddLooseGameplayTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AppendTargetDataHandle
// 0x0078 (0x0078 - 0x0000)
struct AbilitySystemBlueprintLibrary_AppendTargetDataHandle final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetHandle;                                      // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       HandleToAdd;                                       // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       ReturnValue;                                       // 0x0050(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AppendTargetDataHandle) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AppendTargetDataHandle");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AppendTargetDataHandle) == 0x000078, "Wrong size on AbilitySystemBlueprintLibrary_AppendTargetDataHandle");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AppendTargetDataHandle, TargetHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AppendTargetDataHandle::TargetHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AppendTargetDataHandle, HandleToAdd) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_AppendTargetDataHandle::HandleToAdd' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AppendTargetDataHandle, ReturnValue) == 0x000050, "Member 'AbilitySystemBlueprintLibrary_AppendTargetDataHandle::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AssignSetByCallerMagnitude
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FName                                   DataName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude, DataName) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude::DataName' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude, Magnitude) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude::Magnitude' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude, ReturnValue) == 0x000020, "Member 'AbilitySystemBlueprintLibrary_AssignSetByCallerMagnitude::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.AssignTagSetByCallerMagnitude
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DataTag;                                           // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude");
static_assert(sizeof(AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude, DataTag) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude::DataTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude, Magnitude) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude::Magnitude' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude, ReturnValue) == 0x000020, "Member 'AbilitySystemBlueprintLibrary_AssignTagSetByCallerMagnitude::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.BreakGameplayCueParameters
// 0x01C0 (0x01C0 - 0x0000)
struct AbilitySystemBlueprintLibrary_BreakGameplayCueParameters final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         NormalizedMagnitude;                               // 0x00E0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RawMagnitude;                                      // 0x00E4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00E8(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MatchedTagName;                                    // 0x0100(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OriginalTag;                                       // 0x0108(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AggregatedSourceTags;                              // 0x0110(0x0020)(Parm, OutParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AggregatedTargetTags;                              // 0x0130(0x0020)(Parm, OutParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0150(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0168(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0180(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EffectCauser;                                      // 0x0188(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SourceObject;                                      // 0x0190(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x0198(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayEffect*                        GameplayEffect;                                    // 0x01A0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x01A8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityLevel;                                      // 0x01AC(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TargetAttachComponent;                             // 0x01B0(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicateLocationWhenUsingMinimalRepProxy;        // 0x01B8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_BreakGameplayCueParameters");
static_assert(sizeof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters) == 0x0001C0, "Wrong size on AbilitySystemBlueprintLibrary_BreakGameplayCueParameters");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, Parameters) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, NormalizedMagnitude) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::NormalizedMagnitude' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, RawMagnitude) == 0x0000E4, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::RawMagnitude' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, EffectContext) == 0x0000E8, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, MatchedTagName) == 0x000100, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::MatchedTagName' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, OriginalTag) == 0x000108, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::OriginalTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, AggregatedSourceTags) == 0x000110, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::AggregatedSourceTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, AggregatedTargetTags) == 0x000130, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::AggregatedTargetTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, Location) == 0x000150, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::Location' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, Normal) == 0x000168, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::Normal' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, Instigator) == 0x000180, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::Instigator' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, EffectCauser) == 0x000188, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::EffectCauser' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, SourceObject) == 0x000190, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::SourceObject' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, PhysicalMaterial) == 0x000198, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, GameplayEffect) == 0x0001A0, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::GameplayEffect' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, GameplayEffectLevel) == 0x0001A8, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, AbilityLevel) == 0x0001AC, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::AbilityLevel' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, TargetAttachComponent) == 0x0001B0, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::TargetAttachComponent' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_BreakGameplayCueParameters, bReplicateLocationWhenUsingMinimalRepProxy) == 0x0001B8, "Member 'AbilitySystemBlueprintLibrary_BreakGameplayCueParameters::bReplicateLocationWhenUsingMinimalRepProxy' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.CloneSpecHandle
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_CloneSpecHandle final
{
public:
	class AActor*                                 InNewInstigator;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InEffectCauser;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              GameplayEffectSpecHandle_Clone;                    // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_CloneSpecHandle) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_CloneSpecHandle");
static_assert(sizeof(AbilitySystemBlueprintLibrary_CloneSpecHandle) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_CloneSpecHandle");
static_assert(offsetof(AbilitySystemBlueprintLibrary_CloneSpecHandle, InNewInstigator) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_CloneSpecHandle::InNewInstigator' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_CloneSpecHandle, InEffectCauser) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_CloneSpecHandle::InEffectCauser' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_CloneSpecHandle, GameplayEffectSpecHandle_Clone) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_CloneSpecHandle::GameplayEffectSpecHandle_Clone' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_CloneSpecHandle, ReturnValue) == 0x000020, "Member 'AbilitySystemBlueprintLibrary_CloneSpecHandle::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.DoesGameplayCueMeetTagRequirements
// 0x0168 (0x0168 - 0x0000)
struct AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               SourceTagReqs;                                     // 0x00E0(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTagReqs;                                     // 0x0120(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0160(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements");
static_assert(sizeof(AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements) == 0x000168, "Wrong size on AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements");
static_assert(offsetof(AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements, Parameters) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements, SourceTagReqs) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements::SourceTagReqs' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements, TargetTagReqs) == 0x000120, "Member 'AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements::TargetTagReqs' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements, ReturnValue) == 0x000160, "Member 'AbilitySystemBlueprintLibrary_DoesGameplayCueMeetTagRequirements::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.DoesTargetDataContainActor
// 0x0040 (0x0040 - 0x0000)
struct AbilitySystemBlueprintLibrary_DoesTargetDataContainActor final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_DoesTargetDataContainActor) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_DoesTargetDataContainActor");
static_assert(sizeof(AbilitySystemBlueprintLibrary_DoesTargetDataContainActor) == 0x000040, "Wrong size on AbilitySystemBlueprintLibrary_DoesTargetDataContainActor");
static_assert(offsetof(AbilitySystemBlueprintLibrary_DoesTargetDataContainActor, TargetData) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_DoesTargetDataContainActor::TargetData' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_DoesTargetDataContainActor, Param_Index) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_DoesTargetDataContainActor::Param_Index' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_DoesTargetDataContainActor, Actor) == 0x000030, "Member 'AbilitySystemBlueprintLibrary_DoesTargetDataContainActor::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_DoesTargetDataContainActor, ReturnValue) == 0x000038, "Member 'AbilitySystemBlueprintLibrary_DoesTargetDataContainActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextAddHitResult
// 0x0108 (0x0108 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextAddHitResult final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0018(0x00E8)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0100(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextAddHitResult) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextAddHitResult");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextAddHitResult) == 0x000108, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextAddHitResult");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextAddHitResult, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextAddHitResult::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextAddHitResult, HitResult) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextAddHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextAddHitResult, bReset) == 0x000100, "Member 'AbilitySystemBlueprintLibrary_EffectContextAddHitResult::bReset' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextAddSourceObject
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextAddSourceObject final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                SourceObject;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextAddSourceObject) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextAddSourceObject");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextAddSourceObject) == 0x000020, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextAddSourceObject");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextAddSourceObject, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextAddSourceObject::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextAddSourceObject, SourceObject) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextAddSourceObject::SourceObject' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetEffectCauser
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextGetEffectCauser final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextGetEffectCauser) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextGetEffectCauser");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextGetEffectCauser) == 0x000020, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextGetEffectCauser");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetEffectCauser, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetEffectCauser::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetEffectCauser, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetEffectCauser::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetHitResult
// 0x0100 (0x0100 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextGetHitResult final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FHitResult                             ReturnValue;                                       // 0x0018(0x00E8)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextGetHitResult) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextGetHitResult");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextGetHitResult) == 0x000100, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextGetHitResult");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetHitResult, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetHitResult::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetHitResult, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetHitResult::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetInstigatorActor
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor) == 0x000020, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetInstigatorActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetOrigin
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextGetOrigin final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextGetOrigin) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextGetOrigin");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextGetOrigin) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextGetOrigin");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetOrigin, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetOrigin::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetOrigin, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetOrigin::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetOriginalInstigatorActor
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor) == 0x000020, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetOriginalInstigatorActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetSourceObject
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextGetSourceObject final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextGetSourceObject) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextGetSourceObject");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextGetSourceObject) == 0x000020, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextGetSourceObject");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetSourceObject, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetSourceObject::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextGetSourceObject, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextGetSourceObject::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextHasHitResult
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextHasHitResult final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextHasHitResult) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextHasHitResult");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextHasHitResult) == 0x000020, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextHasHitResult");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextHasHitResult, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextHasHitResult::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextHasHitResult, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextHasHitResult::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextIsInstigatorLocallyControlled
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled) == 0x000020, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextIsInstigatorLocallyControlled::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextIsValid
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextIsValid final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextIsValid) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextIsValid");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextIsValid) == 0x000020, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextIsValid");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextIsValid, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextIsValid::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextIsValid, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextIsValid::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextSetOrigin
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_EffectContextSetOrigin final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EffectContextSetOrigin) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EffectContextSetOrigin");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EffectContextSetOrigin) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_EffectContextSetOrigin");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextSetOrigin, EffectContext) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EffectContextSetOrigin::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EffectContextSetOrigin, Origin) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_EffectContextSetOrigin::Origin' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EqualEqual_ActiveGameplayEffectHandle
// 0x0014 (0x0014 - 0x0000)
struct AbilitySystemBlueprintLibrary_EqualEqual_ActiveGameplayEffectHandle final
{
public:
	struct FActiveGameplayEffectHandle            A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EqualEqual_ActiveGameplayEffectHandle) == 0x000004, "Wrong alignment on AbilitySystemBlueprintLibrary_EqualEqual_ActiveGameplayEffectHandle");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EqualEqual_ActiveGameplayEffectHandle) == 0x000014, "Wrong size on AbilitySystemBlueprintLibrary_EqualEqual_ActiveGameplayEffectHandle");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EqualEqual_ActiveGameplayEffectHandle, A) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EqualEqual_ActiveGameplayEffectHandle::A' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EqualEqual_ActiveGameplayEffectHandle, B) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_EqualEqual_ActiveGameplayEffectHandle::B' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EqualEqual_ActiveGameplayEffectHandle, ReturnValue) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_EqualEqual_ActiveGameplayEffectHandle::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EqualEqual_GameplayAbilitySpecHandle
// 0x000C (0x000C - 0x0000)
struct AbilitySystemBlueprintLibrary_EqualEqual_GameplayAbilitySpecHandle final
{
public:
	struct FGameplayAbilitySpecHandle             A;                                                 // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             B;                                                 // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EqualEqual_GameplayAbilitySpecHandle) == 0x000004, "Wrong alignment on AbilitySystemBlueprintLibrary_EqualEqual_GameplayAbilitySpecHandle");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EqualEqual_GameplayAbilitySpecHandle) == 0x00000C, "Wrong size on AbilitySystemBlueprintLibrary_EqualEqual_GameplayAbilitySpecHandle");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EqualEqual_GameplayAbilitySpecHandle, A) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EqualEqual_GameplayAbilitySpecHandle::A' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EqualEqual_GameplayAbilitySpecHandle, B) == 0x000004, "Member 'AbilitySystemBlueprintLibrary_EqualEqual_GameplayAbilitySpecHandle::B' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EqualEqual_GameplayAbilitySpecHandle, ReturnValue) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_EqualEqual_GameplayAbilitySpecHandle::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EqualEqual_GameplayAttributeGameplayAttribute
// 0x0078 (0x0078 - 0x0000)
struct AbilitySystemBlueprintLibrary_EqualEqual_GameplayAttributeGameplayAttribute final
{
public:
	struct FGameplayAttribute                     AttributeA;                                        // 0x0000(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     AttributeB;                                        // 0x0038(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EqualEqual_GameplayAttributeGameplayAttribute) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EqualEqual_GameplayAttributeGameplayAttribute");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EqualEqual_GameplayAttributeGameplayAttribute) == 0x000078, "Wrong size on AbilitySystemBlueprintLibrary_EqualEqual_GameplayAttributeGameplayAttribute");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EqualEqual_GameplayAttributeGameplayAttribute, AttributeA) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EqualEqual_GameplayAttributeGameplayAttribute::AttributeA' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EqualEqual_GameplayAttributeGameplayAttribute, AttributeB) == 0x000038, "Member 'AbilitySystemBlueprintLibrary_EqualEqual_GameplayAttributeGameplayAttribute::AttributeB' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EqualEqual_GameplayAttributeGameplayAttribute, ReturnValue) == 0x000070, "Member 'AbilitySystemBlueprintLibrary_EqualEqual_GameplayAttributeGameplayAttribute::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EvaluateAttributeValueWithTags
// 0x0088 (0x0088 - 0x0000)
struct AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags final
{
public:
	class UAbilitySystemComponent*                AbilitySystem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SourceTags;                                        // 0x0040(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTags;                                        // 0x0060(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0084(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags) == 0x000088, "Wrong size on AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags, AbilitySystem) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags::AbilitySystem' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags, Attribute) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags::Attribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags, SourceTags) == 0x000040, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags::SourceTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags, TargetTags) == 0x000060, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags::TargetTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags, bSuccess) == 0x000080, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags::bSuccess' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags, ReturnValue) == 0x000084, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.EvaluateAttributeValueWithTagsAndBase
// 0x0090 (0x0090 - 0x0000)
struct AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase final
{
public:
	class UAbilitySystemComponent*                AbilitySystem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SourceTags;                                        // 0x0040(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTags;                                        // 0x0060(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         BaseValue;                                         // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase");
static_assert(sizeof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase) == 0x000090, "Wrong size on AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase, AbilitySystem) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase::AbilitySystem' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase, Attribute) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase::Attribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase, SourceTags) == 0x000040, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase::SourceTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase, TargetTags) == 0x000060, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase::TargetTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase, BaseValue) == 0x000080, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase::BaseValue' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase, bSuccess) == 0x000084, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase::bSuccess' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase, ReturnValue) == 0x000088, "Member 'AbilitySystemBlueprintLibrary_EvaluateAttributeValueWithTagsAndBase::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.ExtendsGameplayEffectDuration
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceSet;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration");
static_assert(sizeof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration) == 0x000018, "Wrong size on AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration, Handle) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration::Handle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration, Duration) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration::Duration' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration, ForceSet) == 0x000014, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDuration::ForceSet' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.ExtendsGameplayEffectDurationByDef
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            Def;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceSet;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef");
static_assert(sizeof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef) == 0x000018, "Wrong size on AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef, Def) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef::Def' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef, Duration) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef::Duration' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef, ForceSet) == 0x000014, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByDef::ForceSet' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.ExtendsGameplayEffectDurationByTag
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssetTag;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceSet;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag");
static_assert(sizeof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag) == 0x000018, "Wrong size on AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag, AssetTag) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag::AssetTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag, Duration) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag::Duration' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag, ForceSet) == 0x000014, "Member 'AbilitySystemBlueprintLibrary_ExtendsGameplayEffectDurationByTag::ForceSet' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.FilterTargetData
// 0x0060 (0x0060 - 0x0000)
struct AbilitySystemBlueprintLibrary_FilterTargetData final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetDataHandle;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTargetDataFilterHandle        ActorFilterClass;                                  // 0x0028(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       ReturnValue;                                       // 0x0038(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_FilterTargetData) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_FilterTargetData");
static_assert(sizeof(AbilitySystemBlueprintLibrary_FilterTargetData) == 0x000060, "Wrong size on AbilitySystemBlueprintLibrary_FilterTargetData");
static_assert(offsetof(AbilitySystemBlueprintLibrary_FilterTargetData, TargetDataHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_FilterTargetData::TargetDataHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_FilterTargetData, ActorFilterClass) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_FilterTargetData::ActorFilterClass' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_FilterTargetData, ReturnValue) == 0x000038, "Member 'AbilitySystemBlueprintLibrary_FilterTargetData::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.ForwardGameplayCueToTarget
// 0x00F8 (0x00F8 - 0x0000)
struct AbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget final
{
public:
	TScriptInterface<class IGameplayCueInterface> TargetCueInterface;                                // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayCueEvent                             EventType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0018(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget");
static_assert(sizeof(AbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget) == 0x0000F8, "Wrong size on AbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget, TargetCueInterface) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget::TargetCueInterface' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget, EventType) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget::EventType' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget, Parameters) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_ForwardGameplayCueToTarget::Parameters' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetAbilitySystemComponent
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetAbilitySystemComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetAbilitySystemComponent) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetAbilitySystemComponent");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetAbilitySystemComponent) == 0x000010, "Wrong size on AbilitySystemBlueprintLibrary_GetAbilitySystemComponent");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetAbilitySystemComponent, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetAbilitySystemComponent::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetAbilitySystemComponent, ReturnValue) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectDebugString
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetActiveGameplayEffectDebugString final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectDebugString) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectDebugString");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectDebugString) == 0x000018, "Wrong size on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectDebugString");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectDebugString, ActiveHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectDebugString::ActiveHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectDebugString, ReturnValue) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectDebugString::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectExpectedEndTime
// 0x000C (0x000C - 0x0000)
struct AbilitySystemBlueprintLibrary_GetActiveGameplayEffectExpectedEndTime final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectExpectedEndTime) == 0x000004, "Wrong alignment on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectExpectedEndTime");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectExpectedEndTime) == 0x00000C, "Wrong size on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectExpectedEndTime");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectExpectedEndTime, ActiveHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectExpectedEndTime::ActiveHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectExpectedEndTime, ReturnValue) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectExpectedEndTime::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectRemainingDuration
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetActiveGameplayEffectRemainingDuration final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectRemainingDuration) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectRemainingDuration");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectRemainingDuration) == 0x000018, "Wrong size on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectRemainingDuration");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectRemainingDuration, WorldContextObject) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectRemainingDuration::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectRemainingDuration, ActiveHandle) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectRemainingDuration::ActiveHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectRemainingDuration, ReturnValue) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectRemainingDuration::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectStackCount
// 0x000C (0x000C - 0x0000)
struct AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount) == 0x000004, "Wrong alignment on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount) == 0x00000C, "Wrong size on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount, ActiveHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount::ActiveHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount, ReturnValue) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackCount::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectStackLimitCount
// 0x000C (0x000C - 0x0000)
struct AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackLimitCount final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackLimitCount) == 0x000004, "Wrong alignment on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackLimitCount");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackLimitCount) == 0x00000C, "Wrong size on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackLimitCount");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackLimitCount, ActiveHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackLimitCount::ActiveHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackLimitCount, ReturnValue) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStackLimitCount::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectStartTime
// 0x000C (0x000C - 0x0000)
struct AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStartTime final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStartTime) == 0x000004, "Wrong alignment on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStartTime");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStartTime) == 0x00000C, "Wrong size on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStartTime");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStartTime, ActiveHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStartTime::ActiveHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStartTime, ReturnValue) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectStartTime::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectTotalDuration
// 0x000C (0x000C - 0x0000)
struct AbilitySystemBlueprintLibrary_GetActiveGameplayEffectTotalDuration final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectTotalDuration) == 0x000004, "Wrong alignment on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectTotalDuration");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectTotalDuration) == 0x00000C, "Wrong size on AbilitySystemBlueprintLibrary_GetActiveGameplayEffectTotalDuration");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectTotalDuration, ActiveHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectTotalDuration::ActiveHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActiveGameplayEffectTotalDuration, ReturnValue) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetActiveGameplayEffectTotalDuration::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetActorByIndex
// 0x00F0 (0x00F0 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetActorByIndex final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x00E0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetActorByIndex) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetActorByIndex");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetActorByIndex) == 0x0000F0, "Wrong size on AbilitySystemBlueprintLibrary_GetActorByIndex");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActorByIndex, Parameters) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetActorByIndex::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActorByIndex, Param_Index) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_GetActorByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActorByIndex, ReturnValue) == 0x0000E8, "Member 'AbilitySystemBlueprintLibrary_GetActorByIndex::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetActorCount
// 0x00E8 (0x00E8 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetActorCount final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00E0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetActorCount) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetActorCount");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetActorCount) == 0x0000E8, "Wrong size on AbilitySystemBlueprintLibrary_GetActorCount");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActorCount, Parameters) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetActorCount::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActorCount, ReturnValue) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_GetActorCount::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetActorsFromTargetData
// 0x0040 (0x0040 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetActorsFromTargetData final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetActorsFromTargetData) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetActorsFromTargetData");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetActorsFromTargetData) == 0x000040, "Wrong size on AbilitySystemBlueprintLibrary_GetActorsFromTargetData");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActorsFromTargetData, TargetData) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetActorsFromTargetData::TargetData' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActorsFromTargetData, Param_Index) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_GetActorsFromTargetData::Param_Index' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetActorsFromTargetData, ReturnValue) == 0x000030, "Member 'AbilitySystemBlueprintLibrary_GetActorsFromTargetData::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetAllActorsFromTargetData
// 0x0038 (0x0038 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetAllActorsFromTargetData final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetAllActorsFromTargetData) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetAllActorsFromTargetData");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetAllActorsFromTargetData) == 0x000038, "Wrong size on AbilitySystemBlueprintLibrary_GetAllActorsFromTargetData");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetAllActorsFromTargetData, TargetData) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetAllActorsFromTargetData::TargetData' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetAllActorsFromTargetData, ReturnValue) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_GetAllActorsFromTargetData::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetAllLinkedGameplayEffectSpecHandles
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetAllLinkedGameplayEffectSpecHandles final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpecHandle>      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetAllLinkedGameplayEffectSpecHandles) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetAllLinkedGameplayEffectSpecHandles");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetAllLinkedGameplayEffectSpecHandles) == 0x000020, "Wrong size on AbilitySystemBlueprintLibrary_GetAllLinkedGameplayEffectSpecHandles");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetAllLinkedGameplayEffectSpecHandles, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetAllLinkedGameplayEffectSpecHandles::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetAllLinkedGameplayEffectSpecHandles, ReturnValue) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_GetAllLinkedGameplayEffectSpecHandles::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetDataCountFromTargetData
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetDataCountFromTargetData final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetDataCountFromTargetData) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetDataCountFromTargetData");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetDataCountFromTargetData) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_GetDataCountFromTargetData");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetDataCountFromTargetData, TargetData) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetDataCountFromTargetData::TargetData' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetDataCountFromTargetData, ReturnValue) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_GetDataCountFromTargetData::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetDebugStringFromGameplayAttribute
// 0x0048 (0x0048 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetDebugStringFromGameplayAttribute final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetDebugStringFromGameplayAttribute) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetDebugStringFromGameplayAttribute");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetDebugStringFromGameplayAttribute) == 0x000048, "Wrong size on AbilitySystemBlueprintLibrary_GetDebugStringFromGameplayAttribute");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetDebugStringFromGameplayAttribute, Attribute) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetDebugStringFromGameplayAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetDebugStringFromGameplayAttribute, ReturnValue) == 0x000038, "Member 'AbilitySystemBlueprintLibrary_GetDebugStringFromGameplayAttribute::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetEffectContext
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetEffectContext final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetEffectContext) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetEffectContext");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetEffectContext) == 0x000028, "Wrong size on AbilitySystemBlueprintLibrary_GetEffectContext");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetEffectContext, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetEffectContext::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetEffectContext, ReturnValue) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_GetEffectContext::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetFloatAttribute
// 0x0048 (0x0048 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetFloatAttribute final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessfullyFoundAttribute;                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetFloatAttribute) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetFloatAttribute");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetFloatAttribute) == 0x000048, "Wrong size on AbilitySystemBlueprintLibrary_GetFloatAttribute");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttribute, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttribute::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttribute, Attribute) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttribute, bSuccessfullyFoundAttribute) == 0x000040, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttribute::bSuccessfullyFoundAttribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttribute, ReturnValue) == 0x000044, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttribute::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetFloatAttributeBase
// 0x0048 (0x0048 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetFloatAttributeBase final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessfullyFoundAttribute;                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetFloatAttributeBase) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetFloatAttributeBase");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetFloatAttributeBase) == 0x000048, "Wrong size on AbilitySystemBlueprintLibrary_GetFloatAttributeBase");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeBase, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeBase::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeBase, Attribute) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeBase::Attribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeBase, bSuccessfullyFoundAttribute) == 0x000040, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeBase::bSuccessfullyFoundAttribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeBase, ReturnValue) == 0x000044, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeBase::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetFloatAttributeBaseFromAbilitySystemComponent
// 0x0048 (0x0048 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent final
{
public:
	const class UAbilitySystemComponent*          AbilitySystemComponent;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessfullyFoundAttribute;                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent) == 0x000048, "Wrong size on AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent, AbilitySystemComponent) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent, Attribute) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent::Attribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent, bSuccessfullyFoundAttribute) == 0x000040, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent::bSuccessfullyFoundAttribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent, ReturnValue) == 0x000044, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeBaseFromAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetFloatAttributeFromAbilitySystemComponent
// 0x0048 (0x0048 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent final
{
public:
	const class UAbilitySystemComponent*          AbilitySystem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessfullyFoundAttribute;                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent) == 0x000048, "Wrong size on AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent, AbilitySystem) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent::AbilitySystem' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent, Attribute) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent::Attribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent, bSuccessfullyFoundAttribute) == 0x000040, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent::bSuccessfullyFoundAttribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent, ReturnValue) == 0x000044, "Member 'AbilitySystemBlueprintLibrary_GetFloatAttributeFromAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetGameplayAbilityFromSpecHandle
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle final
{
public:
	class UAbilitySystemComponent*                AbilitySystem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             AbilitySpecHandle;                                 // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInstance;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	const class UGameplayAbility*                 ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle) == 0x000018, "Wrong size on AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle, AbilitySystem) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle::AbilitySystem' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle, AbilitySpecHandle) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle::AbilitySpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle, bIsInstance) == 0x00000C, "Member 'AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle::bIsInstance' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle, ReturnValue) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_GetGameplayAbilityFromSpecHandle::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetGameplayCueDirection
// 0x0108 (0x0108 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetGameplayCueDirection final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x00E8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetGameplayCueDirection) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetGameplayCueDirection");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetGameplayCueDirection) == 0x000108, "Wrong size on AbilitySystemBlueprintLibrary_GetGameplayCueDirection");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayCueDirection, TargetActor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetGameplayCueDirection::TargetActor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayCueDirection, Parameters) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetGameplayCueDirection::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayCueDirection, Direction) == 0x0000E8, "Member 'AbilitySystemBlueprintLibrary_GetGameplayCueDirection::Direction' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayCueDirection, ReturnValue) == 0x000100, "Member 'AbilitySystemBlueprintLibrary_GetGameplayCueDirection::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetGameplayCueEndLocationAndNormal
// 0x0120 (0x0120 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x00E8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0100(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal) == 0x000120, "Wrong size on AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal, TargetActor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal::TargetActor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal, Parameters) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal, Location) == 0x0000E8, "Member 'AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal::Location' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal, Normal) == 0x000100, "Member 'AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal::Normal' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal, ReturnValue) == 0x000118, "Member 'AbilitySystemBlueprintLibrary_GetGameplayCueEndLocationAndNormal::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetGameplayEffectFromActiveEffectHandle
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetGameplayEffectFromActiveEffectHandle final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGameplayEffect*                  ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetGameplayEffectFromActiveEffectHandle) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetGameplayEffectFromActiveEffectHandle");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetGameplayEffectFromActiveEffectHandle) == 0x000010, "Wrong size on AbilitySystemBlueprintLibrary_GetGameplayEffectFromActiveEffectHandle");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayEffectFromActiveEffectHandle, ActiveHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetGameplayEffectFromActiveEffectHandle::ActiveHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayEffectFromActiveEffectHandle, ReturnValue) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetGameplayEffectFromActiveEffectHandle::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetGameplayEffectUIData
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetGameplayEffectUIData final
{
public:
	TSubclassOf<class UGameplayEffect>            EffectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffectUIData>      DataType;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGameplayEffectUIData*            ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetGameplayEffectUIData) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetGameplayEffectUIData");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetGameplayEffectUIData) == 0x000018, "Wrong size on AbilitySystemBlueprintLibrary_GetGameplayEffectUIData");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayEffectUIData, EffectClass) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetGameplayEffectUIData::EffectClass' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayEffectUIData, DataType) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_GetGameplayEffectUIData::DataType' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetGameplayEffectUIData, ReturnValue) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_GetGameplayEffectUIData::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetHitResult
// 0x01C8 (0x01C8 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetHitResult final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             ReturnValue;                                       // 0x00E0(0x00E8)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetHitResult) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetHitResult");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetHitResult) == 0x0001C8, "Wrong size on AbilitySystemBlueprintLibrary_GetHitResult");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetHitResult, Parameters) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetHitResult::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetHitResult, ReturnValue) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_GetHitResult::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetHitResultFromTargetData
// 0x0118 (0x0118 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetHitResultFromTargetData final
{
public:
	struct FGameplayAbilityTargetDataHandle       HitResult;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             ReturnValue;                                       // 0x0030(0x00E8)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetHitResultFromTargetData) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetHitResultFromTargetData");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetHitResultFromTargetData) == 0x000118, "Wrong size on AbilitySystemBlueprintLibrary_GetHitResultFromTargetData");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetHitResultFromTargetData, HitResult) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetHitResultFromTargetData::HitResult' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetHitResultFromTargetData, Param_Index) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_GetHitResultFromTargetData::Param_Index' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetHitResultFromTargetData, ReturnValue) == 0x000030, "Member 'AbilitySystemBlueprintLibrary_GetHitResultFromTargetData::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetInstigatorActor
// 0x00E8 (0x00E8 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetInstigatorActor final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetInstigatorActor) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetInstigatorActor");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetInstigatorActor) == 0x0000E8, "Wrong size on AbilitySystemBlueprintLibrary_GetInstigatorActor");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetInstigatorActor, Parameters) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetInstigatorActor::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetInstigatorActor, ReturnValue) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_GetInstigatorActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetInstigatorTransform
// 0x0140 (0x0140 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetInstigatorTransform final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x00E0(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetInstigatorTransform) == 0x000010, "Wrong alignment on AbilitySystemBlueprintLibrary_GetInstigatorTransform");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetInstigatorTransform) == 0x000140, "Wrong size on AbilitySystemBlueprintLibrary_GetInstigatorTransform");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetInstigatorTransform, Parameters) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetInstigatorTransform::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetInstigatorTransform, ReturnValue) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_GetInstigatorTransform::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetModifiedAttributeMagnitude
// 0x0050 (0x0050 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetModifiedAttributeMagnitude final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0010(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetModifiedAttributeMagnitude) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetModifiedAttributeMagnitude");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetModifiedAttributeMagnitude) == 0x000050, "Wrong size on AbilitySystemBlueprintLibrary_GetModifiedAttributeMagnitude");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetModifiedAttributeMagnitude, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetModifiedAttributeMagnitude::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetModifiedAttributeMagnitude, Attribute) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_GetModifiedAttributeMagnitude::Attribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetModifiedAttributeMagnitude, ReturnValue) == 0x000048, "Member 'AbilitySystemBlueprintLibrary_GetModifiedAttributeMagnitude::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetOrigin
// 0x00F8 (0x00F8 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetOrigin final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x00E0(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetOrigin) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetOrigin");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetOrigin) == 0x0000F8, "Wrong size on AbilitySystemBlueprintLibrary_GetOrigin");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetOrigin, Parameters) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetOrigin::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetOrigin, ReturnValue) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_GetOrigin::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetTargetDataEndPoint
// 0x0048 (0x0048 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetTargetDataEndPoint final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetTargetDataEndPoint) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_GetTargetDataEndPoint");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetTargetDataEndPoint) == 0x000048, "Wrong size on AbilitySystemBlueprintLibrary_GetTargetDataEndPoint");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetTargetDataEndPoint, TargetData) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetTargetDataEndPoint::TargetData' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetTargetDataEndPoint, Param_Index) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_GetTargetDataEndPoint::Param_Index' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetTargetDataEndPoint, ReturnValue) == 0x000030, "Member 'AbilitySystemBlueprintLibrary_GetTargetDataEndPoint::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetTargetDataEndPointTransform
// 0x0090 (0x0090 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0030(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform) == 0x000010, "Wrong alignment on AbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform) == 0x000090, "Wrong size on AbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform, TargetData) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform::TargetData' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform, Param_Index) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform::Param_Index' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform, ReturnValue) == 0x000030, "Member 'AbilitySystemBlueprintLibrary_GetTargetDataEndPointTransform::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.GetTargetDataOrigin
// 0x0090 (0x0090 - 0x0000)
struct AbilitySystemBlueprintLibrary_GetTargetDataOrigin final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0030(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_GetTargetDataOrigin) == 0x000010, "Wrong alignment on AbilitySystemBlueprintLibrary_GetTargetDataOrigin");
static_assert(sizeof(AbilitySystemBlueprintLibrary_GetTargetDataOrigin) == 0x000090, "Wrong size on AbilitySystemBlueprintLibrary_GetTargetDataOrigin");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetTargetDataOrigin, TargetData) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_GetTargetDataOrigin::TargetData' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetTargetDataOrigin, Param_Index) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_GetTargetDataOrigin::Param_Index' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_GetTargetDataOrigin, ReturnValue) == 0x000030, "Member 'AbilitySystemBlueprintLibrary_GetTargetDataOrigin::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.HasAllMatchingGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags");
static_assert(sizeof(AbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags");
static_assert(offsetof(AbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags, TagContainer) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags::TagContainer' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags, ReturnValue) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.HasAnyMatchingGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags");
static_assert(sizeof(AbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags");
static_assert(offsetof(AbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags, TagContainer) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags::TagContainer' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags, ReturnValue) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.HasHitResult
// 0x00E8 (0x00E8 - 0x0000)
struct AbilitySystemBlueprintLibrary_HasHitResult final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_HasHitResult) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_HasHitResult");
static_assert(sizeof(AbilitySystemBlueprintLibrary_HasHitResult) == 0x0000E8, "Wrong size on AbilitySystemBlueprintLibrary_HasHitResult");
static_assert(offsetof(AbilitySystemBlueprintLibrary_HasHitResult, Parameters) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_HasHitResult::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_HasHitResult, ReturnValue) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_HasHitResult::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.HasMatchingGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemBlueprintLibrary_HasMatchingGameplayTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagToCheck;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_HasMatchingGameplayTag) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_HasMatchingGameplayTag");
static_assert(sizeof(AbilitySystemBlueprintLibrary_HasMatchingGameplayTag) == 0x000018, "Wrong size on AbilitySystemBlueprintLibrary_HasMatchingGameplayTag");
static_assert(offsetof(AbilitySystemBlueprintLibrary_HasMatchingGameplayTag, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_HasMatchingGameplayTag::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_HasMatchingGameplayTag, TagToCheck) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_HasMatchingGameplayTag::TagToCheck' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_HasMatchingGameplayTag, ReturnValue) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_HasMatchingGameplayTag::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.IsInstigatorLocallyControlled
// 0x00E8 (0x00E8 - 0x0000)
struct AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled");
static_assert(sizeof(AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled) == 0x0000E8, "Wrong size on AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled");
static_assert(offsetof(AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled, Parameters) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled, ReturnValue) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlled::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.IsInstigatorLocallyControlledPlayer
// 0x00E8 (0x00E8 - 0x0000)
struct AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer");
static_assert(sizeof(AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer) == 0x0000E8, "Wrong size on AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer");
static_assert(offsetof(AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer, Parameters) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer::Parameters' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer, ReturnValue) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_IsInstigatorLocallyControlledPlayer::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.IsValid
// 0x0040 (0x0040 - 0x0000)
struct AbilitySystemBlueprintLibrary_IsValid final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_IsValid) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_IsValid");
static_assert(sizeof(AbilitySystemBlueprintLibrary_IsValid) == 0x000040, "Wrong size on AbilitySystemBlueprintLibrary_IsValid");
static_assert(offsetof(AbilitySystemBlueprintLibrary_IsValid, Attribute) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_IsValid::Attribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_IsValid, ReturnValue) == 0x000038, "Member 'AbilitySystemBlueprintLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.MakeFilterHandle
// 0x0038 (0x0038 - 0x0000)
struct AbilitySystemBlueprintLibrary_MakeFilterHandle final
{
public:
	struct FGameplayTargetDataFilter              Filter;                                            // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 FilterActor;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTargetDataFilterHandle        ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_MakeFilterHandle) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_MakeFilterHandle");
static_assert(sizeof(AbilitySystemBlueprintLibrary_MakeFilterHandle) == 0x000038, "Wrong size on AbilitySystemBlueprintLibrary_MakeFilterHandle");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeFilterHandle, Filter) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_MakeFilterHandle::Filter' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeFilterHandle, FilterActor) == 0x000020, "Member 'AbilitySystemBlueprintLibrary_MakeFilterHandle::FilterActor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeFilterHandle, ReturnValue) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_MakeFilterHandle::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.MakeGameplayCueParameters
// 0x01C0 (0x01C0 - 0x0000)
struct AbilitySystemBlueprintLibrary_MakeGameplayCueParameters final
{
public:
	float                                         NormalizedMagnitude;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RawMagnitude;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MatchedTagName;                                    // 0x0020(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OriginalTag;                                       // 0x0028(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AggregatedSourceTags;                              // 0x0030(0x0020)(Parm, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AggregatedTargetTags;                              // 0x0050(0x0020)(Parm, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0070(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0088(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EffectCauser;                                      // 0x00A8(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SourceObject;                                      // 0x00B0(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x00B8(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayEffect*                        GameplayEffect;                                    // 0x00C0(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityLevel;                                      // 0x00CC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TargetAttachComponent;                             // 0x00D0(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicateLocationWhenUsingMinimalRepProxy;        // 0x00D8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 ReturnValue;                                       // 0x00E0(0x00E0)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_MakeGameplayCueParameters");
static_assert(sizeof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters) == 0x0001C0, "Wrong size on AbilitySystemBlueprintLibrary_MakeGameplayCueParameters");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, NormalizedMagnitude) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::NormalizedMagnitude' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, RawMagnitude) == 0x000004, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::RawMagnitude' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, EffectContext) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, MatchedTagName) == 0x000020, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::MatchedTagName' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, OriginalTag) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::OriginalTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, AggregatedSourceTags) == 0x000030, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::AggregatedSourceTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, AggregatedTargetTags) == 0x000050, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::AggregatedTargetTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, Location) == 0x000070, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::Location' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, Normal) == 0x000088, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::Normal' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, Instigator) == 0x0000A0, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::Instigator' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, EffectCauser) == 0x0000A8, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::EffectCauser' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, SourceObject) == 0x0000B0, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::SourceObject' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, PhysicalMaterial) == 0x0000B8, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, GameplayEffect) == 0x0000C0, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::GameplayEffect' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, GameplayEffectLevel) == 0x0000C8, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, AbilityLevel) == 0x0000CC, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::AbilityLevel' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, TargetAttachComponent) == 0x0000D0, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::TargetAttachComponent' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, bReplicateLocationWhenUsingMinimalRepProxy) == 0x0000D8, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::bReplicateLocationWhenUsingMinimalRepProxy' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeGameplayCueParameters, ReturnValue) == 0x0000E0, "Member 'AbilitySystemBlueprintLibrary_MakeGameplayCueParameters::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.MakeSpecHandle
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_MakeSpecHandle final
{
public:
	class UGameplayEffect*                        InGameplayEffect;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InInstigator;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InEffectCauser;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLevel;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_MakeSpecHandle) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_MakeSpecHandle");
static_assert(sizeof(AbilitySystemBlueprintLibrary_MakeSpecHandle) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_MakeSpecHandle");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeSpecHandle, InGameplayEffect) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_MakeSpecHandle::InGameplayEffect' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeSpecHandle, InInstigator) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_MakeSpecHandle::InInstigator' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeSpecHandle, InEffectCauser) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_MakeSpecHandle::InEffectCauser' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeSpecHandle, InLevel) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_MakeSpecHandle::InLevel' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_MakeSpecHandle, ReturnValue) == 0x000020, "Member 'AbilitySystemBlueprintLibrary_MakeSpecHandle::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.NotEqual_ActiveGameplayEffectHandle
// 0x0014 (0x0014 - 0x0000)
struct AbilitySystemBlueprintLibrary_NotEqual_ActiveGameplayEffectHandle final
{
public:
	struct FActiveGameplayEffectHandle            A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_NotEqual_ActiveGameplayEffectHandle) == 0x000004, "Wrong alignment on AbilitySystemBlueprintLibrary_NotEqual_ActiveGameplayEffectHandle");
static_assert(sizeof(AbilitySystemBlueprintLibrary_NotEqual_ActiveGameplayEffectHandle) == 0x000014, "Wrong size on AbilitySystemBlueprintLibrary_NotEqual_ActiveGameplayEffectHandle");
static_assert(offsetof(AbilitySystemBlueprintLibrary_NotEqual_ActiveGameplayEffectHandle, A) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_NotEqual_ActiveGameplayEffectHandle::A' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_NotEqual_ActiveGameplayEffectHandle, B) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_NotEqual_ActiveGameplayEffectHandle::B' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_NotEqual_ActiveGameplayEffectHandle, ReturnValue) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_NotEqual_ActiveGameplayEffectHandle::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.NotEqual_GameplayAbilitySpecHandle
// 0x000C (0x000C - 0x0000)
struct AbilitySystemBlueprintLibrary_NotEqual_GameplayAbilitySpecHandle final
{
public:
	struct FGameplayAbilitySpecHandle             A;                                                 // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             B;                                                 // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_NotEqual_GameplayAbilitySpecHandle) == 0x000004, "Wrong alignment on AbilitySystemBlueprintLibrary_NotEqual_GameplayAbilitySpecHandle");
static_assert(sizeof(AbilitySystemBlueprintLibrary_NotEqual_GameplayAbilitySpecHandle) == 0x00000C, "Wrong size on AbilitySystemBlueprintLibrary_NotEqual_GameplayAbilitySpecHandle");
static_assert(offsetof(AbilitySystemBlueprintLibrary_NotEqual_GameplayAbilitySpecHandle, A) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_NotEqual_GameplayAbilitySpecHandle::A' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_NotEqual_GameplayAbilitySpecHandle, B) == 0x000004, "Member 'AbilitySystemBlueprintLibrary_NotEqual_GameplayAbilitySpecHandle::B' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_NotEqual_GameplayAbilitySpecHandle, ReturnValue) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_NotEqual_GameplayAbilitySpecHandle::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.NotEqual_GameplayAttributeGameplayAttribute
// 0x0078 (0x0078 - 0x0000)
struct AbilitySystemBlueprintLibrary_NotEqual_GameplayAttributeGameplayAttribute final
{
public:
	struct FGameplayAttribute                     AttributeA;                                        // 0x0000(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     AttributeB;                                        // 0x0038(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_NotEqual_GameplayAttributeGameplayAttribute) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_NotEqual_GameplayAttributeGameplayAttribute");
static_assert(sizeof(AbilitySystemBlueprintLibrary_NotEqual_GameplayAttributeGameplayAttribute) == 0x000078, "Wrong size on AbilitySystemBlueprintLibrary_NotEqual_GameplayAttributeGameplayAttribute");
static_assert(offsetof(AbilitySystemBlueprintLibrary_NotEqual_GameplayAttributeGameplayAttribute, AttributeA) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_NotEqual_GameplayAttributeGameplayAttribute::AttributeA' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_NotEqual_GameplayAttributeGameplayAttribute, AttributeB) == 0x000038, "Member 'AbilitySystemBlueprintLibrary_NotEqual_GameplayAttributeGameplayAttribute::AttributeB' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_NotEqual_GameplayAttributeGameplayAttribute, ReturnValue) == 0x000070, "Member 'AbilitySystemBlueprintLibrary_NotEqual_GameplayAttributeGameplayAttribute::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.RemoveLooseGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShouldReplicate;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags");
static_assert(sizeof(AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags");
static_assert(offsetof(AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags, GameplayTags) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags::GameplayTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags, bShouldReplicate) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags::bShouldReplicate' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags, ReturnValue) == 0x000029, "Member 'AbilitySystemBlueprintLibrary_RemoveLooseGameplayTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.SendGameplayEventToActor
// 0x00C0 (0x00C0 - 0x0000)
struct AbilitySystemBlueprintLibrary_SendGameplayEventToActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     Payload;                                           // 0x0010(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_SendGameplayEventToActor) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_SendGameplayEventToActor");
static_assert(sizeof(AbilitySystemBlueprintLibrary_SendGameplayEventToActor) == 0x0000C0, "Wrong size on AbilitySystemBlueprintLibrary_SendGameplayEventToActor");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SendGameplayEventToActor, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_SendGameplayEventToActor::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SendGameplayEventToActor, EventTag) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_SendGameplayEventToActor::EventTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SendGameplayEventToActor, Payload) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_SendGameplayEventToActor::Payload' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.SetDuration
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemBlueprintLibrary_SetDuration final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_SetDuration) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_SetDuration");
static_assert(sizeof(AbilitySystemBlueprintLibrary_SetDuration) == 0x000028, "Wrong size on AbilitySystemBlueprintLibrary_SetDuration");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetDuration, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_SetDuration::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetDuration, Duration) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_SetDuration::Duration' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetDuration, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_SetDuration::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.SetLooseGameplayTagCount
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReplicate;                                  // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount");
static_assert(sizeof(AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount, Actor) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount::Actor' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount, GameplayTags) == 0x000008, "Member 'AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount::GameplayTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount, NewCount) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount::NewCount' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount, bShouldReplicate) == 0x00002C, "Member 'AbilitySystemBlueprintLibrary_SetLooseGameplayTagCount::bShouldReplicate' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.SetStackCount
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemBlueprintLibrary_SetStackCount final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_SetStackCount) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_SetStackCount");
static_assert(sizeof(AbilitySystemBlueprintLibrary_SetStackCount) == 0x000028, "Wrong size on AbilitySystemBlueprintLibrary_SetStackCount");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetStackCount, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_SetStackCount::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetStackCount, StackCount) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_SetStackCount::StackCount' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetStackCount, ReturnValue) == 0x000018, "Member 'AbilitySystemBlueprintLibrary_SetStackCount::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.SetStackCountToMax
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemBlueprintLibrary_SetStackCountToMax final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemBlueprintLibrary_SetStackCountToMax) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_SetStackCountToMax");
static_assert(sizeof(AbilitySystemBlueprintLibrary_SetStackCountToMax) == 0x000020, "Wrong size on AbilitySystemBlueprintLibrary_SetStackCountToMax");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetStackCountToMax, SpecHandle) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_SetStackCountToMax::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_SetStackCountToMax, ReturnValue) == 0x000010, "Member 'AbilitySystemBlueprintLibrary_SetStackCountToMax::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.TargetDataHasActor
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_TargetDataHasActor final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_TargetDataHasActor) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_TargetDataHasActor");
static_assert(sizeof(AbilitySystemBlueprintLibrary_TargetDataHasActor) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_TargetDataHasActor");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasActor, TargetData) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasActor::TargetData' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasActor, Param_Index) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasActor::Param_Index' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasActor, ReturnValue) == 0x00002C, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasActor::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.TargetDataHasEndPoint
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_TargetDataHasEndPoint final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_TargetDataHasEndPoint) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_TargetDataHasEndPoint");
static_assert(sizeof(AbilitySystemBlueprintLibrary_TargetDataHasEndPoint) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_TargetDataHasEndPoint");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasEndPoint, TargetData) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasEndPoint::TargetData' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasEndPoint, Param_Index) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasEndPoint::Param_Index' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasEndPoint, ReturnValue) == 0x00002C, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasEndPoint::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.TargetDataHasHitResult
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_TargetDataHasHitResult final
{
public:
	struct FGameplayAbilityTargetDataHandle       HitResult;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_TargetDataHasHitResult) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_TargetDataHasHitResult");
static_assert(sizeof(AbilitySystemBlueprintLibrary_TargetDataHasHitResult) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_TargetDataHasHitResult");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasHitResult, HitResult) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasHitResult, Param_Index) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasHitResult::Param_Index' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasHitResult, ReturnValue) == 0x00002C, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasHitResult::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemBlueprintLibrary.TargetDataHasOrigin
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemBlueprintLibrary_TargetDataHasOrigin final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemBlueprintLibrary_TargetDataHasOrigin) == 0x000008, "Wrong alignment on AbilitySystemBlueprintLibrary_TargetDataHasOrigin");
static_assert(sizeof(AbilitySystemBlueprintLibrary_TargetDataHasOrigin) == 0x000030, "Wrong size on AbilitySystemBlueprintLibrary_TargetDataHasOrigin");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasOrigin, TargetData) == 0x000000, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasOrigin::TargetData' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasOrigin, Param_Index) == 0x000028, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasOrigin::Param_Index' has a wrong offset!");
static_assert(offsetof(AbilitySystemBlueprintLibrary_TargetDataHasOrigin, ReturnValue) == 0x00002C, "Member 'AbilitySystemBlueprintLibrary_TargetDataHasOrigin::ReturnValue' has a wrong offset!");

// DelegateFunction GameplayAbilities.AbilitySystemComponent.AbilityAbilityKey__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct AbilitySystemComponent_AbilityAbilityKey__DelegateSignature final
{
public:
	int32                                         InputID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_AbilityAbilityKey__DelegateSignature) == 0x000004, "Wrong alignment on AbilitySystemComponent_AbilityAbilityKey__DelegateSignature");
static_assert(sizeof(AbilitySystemComponent_AbilityAbilityKey__DelegateSignature) == 0x000004, "Wrong size on AbilitySystemComponent_AbilityAbilityKey__DelegateSignature");
static_assert(offsetof(AbilitySystemComponent_AbilityAbilityKey__DelegateSignature, InputID) == 0x000000, "Member 'AbilitySystemComponent_AbilityAbilityKey__DelegateSignature::InputID' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.BP_ApplyGameplayEffectSpecToSelf
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf) == 0x000008, "Wrong alignment on AbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf");
static_assert(sizeof(AbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf) == 0x000018, "Wrong size on AbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf, SpecHandle) == 0x000000, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf, ReturnValue) == 0x000010, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectSpecToSelf::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.BP_ApplyGameplayEffectSpecToTarget
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget) == 0x000008, "Wrong alignment on AbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget");
static_assert(sizeof(AbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget) == 0x000020, "Wrong size on AbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget, SpecHandle) == 0x000000, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget, Target) == 0x000010, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget::Target' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget, ReturnValue) == 0x000018, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectSpecToTarget::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.BP_ApplyGameplayEffectToSelf
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemComponent_BP_ApplyGameplayEffectToSelf final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_BP_ApplyGameplayEffectToSelf) == 0x000008, "Wrong alignment on AbilitySystemComponent_BP_ApplyGameplayEffectToSelf");
static_assert(sizeof(AbilitySystemComponent_BP_ApplyGameplayEffectToSelf) == 0x000030, "Wrong size on AbilitySystemComponent_BP_ApplyGameplayEffectToSelf");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectToSelf, GameplayEffectClass) == 0x000000, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectToSelf::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectToSelf, Level) == 0x000008, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectToSelf::Level' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectToSelf, EffectContext) == 0x000010, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectToSelf::EffectContext' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectToSelf, ReturnValue) == 0x000028, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectToSelf::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.BP_ApplyGameplayEffectToTarget
// 0x0038 (0x0038 - 0x0000)
struct AbilitySystemComponent_BP_ApplyGameplayEffectToTarget final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           Context;                                           // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_BP_ApplyGameplayEffectToTarget) == 0x000008, "Wrong alignment on AbilitySystemComponent_BP_ApplyGameplayEffectToTarget");
static_assert(sizeof(AbilitySystemComponent_BP_ApplyGameplayEffectToTarget) == 0x000038, "Wrong size on AbilitySystemComponent_BP_ApplyGameplayEffectToTarget");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectToTarget, GameplayEffectClass) == 0x000000, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectToTarget::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectToTarget, Target) == 0x000008, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectToTarget::Target' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectToTarget, Level) == 0x000010, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectToTarget::Level' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectToTarget, Context) == 0x000018, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectToTarget::Context' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_BP_ApplyGameplayEffectToTarget, ReturnValue) == 0x000030, "Member 'AbilitySystemComponent_BP_ApplyGameplayEffectToTarget::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.CancelAbilities
// 0x0040 (0x0040 - 0x0000)
struct AbilitySystemComponent_CancelAbilities final
{
public:
	struct FGameplayTagContainer                  WithTags;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WithoutTags;                                       // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_CancelAbilities) == 0x000008, "Wrong alignment on AbilitySystemComponent_CancelAbilities");
static_assert(sizeof(AbilitySystemComponent_CancelAbilities) == 0x000040, "Wrong size on AbilitySystemComponent_CancelAbilities");
static_assert(offsetof(AbilitySystemComponent_CancelAbilities, WithTags) == 0x000000, "Member 'AbilitySystemComponent_CancelAbilities::WithTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_CancelAbilities, WithoutTags) == 0x000020, "Member 'AbilitySystemComponent_CancelAbilities::WithoutTags' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.CancelAllAbilities
// 0x0008 (0x0008 - 0x0000)
struct AbilitySystemComponent_CancelAllAbilities final
{
public:
	class UGameplayAbility*                       Ignore;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_CancelAllAbilities) == 0x000008, "Wrong alignment on AbilitySystemComponent_CancelAllAbilities");
static_assert(sizeof(AbilitySystemComponent_CancelAllAbilities) == 0x000008, "Wrong size on AbilitySystemComponent_CancelAllAbilities");
static_assert(offsetof(AbilitySystemComponent_CancelAllAbilities, Ignore) == 0x000000, "Member 'AbilitySystemComponent_CancelAllAbilities::Ignore' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ClearAbility
// 0x0004 (0x0004 - 0x0000)
struct AbilitySystemComponent_ClearAbility final
{
public:
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ClearAbility) == 0x000004, "Wrong alignment on AbilitySystemComponent_ClearAbility");
static_assert(sizeof(AbilitySystemComponent_ClearAbility) == 0x000004, "Wrong size on AbilitySystemComponent_ClearAbility");
static_assert(offsetof(AbilitySystemComponent_ClearAbility, Handle) == 0x000000, "Member 'AbilitySystemComponent_ClearAbility::Handle' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ClearAllAbilitiesWithInputID
// 0x0004 (0x0004 - 0x0000)
struct AbilitySystemComponent_ClearAllAbilitiesWithInputID final
{
public:
	int32                                         InputID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ClearAllAbilitiesWithInputID) == 0x000004, "Wrong alignment on AbilitySystemComponent_ClearAllAbilitiesWithInputID");
static_assert(sizeof(AbilitySystemComponent_ClearAllAbilitiesWithInputID) == 0x000004, "Wrong size on AbilitySystemComponent_ClearAllAbilitiesWithInputID");
static_assert(offsetof(AbilitySystemComponent_ClearAllAbilitiesWithInputID, InputID) == 0x000000, "Member 'AbilitySystemComponent_ClearAllAbilitiesWithInputID::InputID' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ClientActivateAbilityFailed
// 0x0008 (0x0008 - 0x0000)
struct AbilitySystemComponent_ClientActivateAbilityFailed final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityToActivate;                                 // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         PredictionKey;                                     // 0x0004(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_ClientActivateAbilityFailed) == 0x000004, "Wrong alignment on AbilitySystemComponent_ClientActivateAbilityFailed");
static_assert(sizeof(AbilitySystemComponent_ClientActivateAbilityFailed) == 0x000008, "Wrong size on AbilitySystemComponent_ClientActivateAbilityFailed");
static_assert(offsetof(AbilitySystemComponent_ClientActivateAbilityFailed, AbilityToActivate) == 0x000000, "Member 'AbilitySystemComponent_ClientActivateAbilityFailed::AbilityToActivate' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ClientActivateAbilityFailed, PredictionKey) == 0x000004, "Member 'AbilitySystemComponent_ClientActivateAbilityFailed::PredictionKey' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ClientActivateAbilitySucceed
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemComponent_ClientActivateAbilitySucceed final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityToActivate;                                 // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ClientActivateAbilitySucceed) == 0x000008, "Wrong alignment on AbilitySystemComponent_ClientActivateAbilitySucceed");
static_assert(sizeof(AbilitySystemComponent_ClientActivateAbilitySucceed) == 0x000020, "Wrong size on AbilitySystemComponent_ClientActivateAbilitySucceed");
static_assert(offsetof(AbilitySystemComponent_ClientActivateAbilitySucceed, AbilityToActivate) == 0x000000, "Member 'AbilitySystemComponent_ClientActivateAbilitySucceed::AbilityToActivate' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ClientActivateAbilitySucceed, PredictionKey) == 0x000008, "Member 'AbilitySystemComponent_ClientActivateAbilitySucceed::PredictionKey' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ClientActivateAbilitySucceedWithEventData
// 0x00D0 (0x00D0 - 0x0000)
struct AbilitySystemComponent_ClientActivateAbilitySucceedWithEventData final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityToActivate;                                 // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     TriggerEventData;                                  // 0x0020(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ClientActivateAbilitySucceedWithEventData) == 0x000008, "Wrong alignment on AbilitySystemComponent_ClientActivateAbilitySucceedWithEventData");
static_assert(sizeof(AbilitySystemComponent_ClientActivateAbilitySucceedWithEventData) == 0x0000D0, "Wrong size on AbilitySystemComponent_ClientActivateAbilitySucceedWithEventData");
static_assert(offsetof(AbilitySystemComponent_ClientActivateAbilitySucceedWithEventData, AbilityToActivate) == 0x000000, "Member 'AbilitySystemComponent_ClientActivateAbilitySucceedWithEventData::AbilityToActivate' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ClientActivateAbilitySucceedWithEventData, PredictionKey) == 0x000008, "Member 'AbilitySystemComponent_ClientActivateAbilitySucceedWithEventData::PredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ClientActivateAbilitySucceedWithEventData, TriggerEventData) == 0x000020, "Member 'AbilitySystemComponent_ClientActivateAbilitySucceedWithEventData::TriggerEventData' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ClientCancelAbility
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponent_ClientCancelAbility final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityToCancel;                                   // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActivationInfo         ActivationInfo;                                    // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ClientCancelAbility) == 0x000008, "Wrong alignment on AbilitySystemComponent_ClientCancelAbility");
static_assert(sizeof(AbilitySystemComponent_ClientCancelAbility) == 0x000028, "Wrong size on AbilitySystemComponent_ClientCancelAbility");
static_assert(offsetof(AbilitySystemComponent_ClientCancelAbility, AbilityToCancel) == 0x000000, "Member 'AbilitySystemComponent_ClientCancelAbility::AbilityToCancel' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ClientCancelAbility, ActivationInfo) == 0x000008, "Member 'AbilitySystemComponent_ClientCancelAbility::ActivationInfo' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ClientEndAbility
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponent_ClientEndAbility final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityToEnd;                                      // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActivationInfo         ActivationInfo;                                    // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ClientEndAbility) == 0x000008, "Wrong alignment on AbilitySystemComponent_ClientEndAbility");
static_assert(sizeof(AbilitySystemComponent_ClientEndAbility) == 0x000028, "Wrong size on AbilitySystemComponent_ClientEndAbility");
static_assert(offsetof(AbilitySystemComponent_ClientEndAbility, AbilityToEnd) == 0x000000, "Member 'AbilitySystemComponent_ClientEndAbility::AbilityToEnd' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ClientEndAbility, ActivationInfo) == 0x000008, "Member 'AbilitySystemComponent_ClientEndAbility::ActivationInfo' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ClientPrintDebug_Response
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemComponent_ClientPrintDebug_Response final
{
public:
	TArray<class FString>                         Strings;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         GameFlags;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_ClientPrintDebug_Response) == 0x000008, "Wrong alignment on AbilitySystemComponent_ClientPrintDebug_Response");
static_assert(sizeof(AbilitySystemComponent_ClientPrintDebug_Response) == 0x000018, "Wrong size on AbilitySystemComponent_ClientPrintDebug_Response");
static_assert(offsetof(AbilitySystemComponent_ClientPrintDebug_Response, Strings) == 0x000000, "Member 'AbilitySystemComponent_ClientPrintDebug_Response::Strings' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ClientPrintDebug_Response, GameFlags) == 0x000010, "Member 'AbilitySystemComponent_ClientPrintDebug_Response::GameFlags' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ClientSetReplicatedEvent
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemComponent_ClientSetReplicatedEvent final
{
public:
	EAbilityGenericReplicatedEvent                EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilitySpecHandle             AbilityHandle;                                     // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         AbilityOriginalPredictionKey;                      // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ClientSetReplicatedEvent) == 0x000008, "Wrong alignment on AbilitySystemComponent_ClientSetReplicatedEvent");
static_assert(sizeof(AbilitySystemComponent_ClientSetReplicatedEvent) == 0x000020, "Wrong size on AbilitySystemComponent_ClientSetReplicatedEvent");
static_assert(offsetof(AbilitySystemComponent_ClientSetReplicatedEvent, EventType) == 0x000000, "Member 'AbilitySystemComponent_ClientSetReplicatedEvent::EventType' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ClientSetReplicatedEvent, AbilityHandle) == 0x000004, "Member 'AbilitySystemComponent_ClientSetReplicatedEvent::AbilityHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ClientSetReplicatedEvent, AbilityOriginalPredictionKey) == 0x000008, "Member 'AbilitySystemComponent_ClientSetReplicatedEvent::AbilityOriginalPredictionKey' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ClientTryActivateAbility
// 0x0004 (0x0004 - 0x0000)
struct AbilitySystemComponent_ClientTryActivateAbility final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityToActivate;                                 // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ClientTryActivateAbility) == 0x000004, "Wrong alignment on AbilitySystemComponent_ClientTryActivateAbility");
static_assert(sizeof(AbilitySystemComponent_ClientTryActivateAbility) == 0x000004, "Wrong size on AbilitySystemComponent_ClientTryActivateAbility");
static_assert(offsetof(AbilitySystemComponent_ClientTryActivateAbility, AbilityToActivate) == 0x000000, "Member 'AbilitySystemComponent_ClientTryActivateAbility::AbilityToActivate' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.GetAllAttributes
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_GetAllAttributes final
{
public:
	TArray<struct FGameplayAttribute>             OutAttributes;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_GetAllAttributes) == 0x000008, "Wrong alignment on AbilitySystemComponent_GetAllAttributes");
static_assert(sizeof(AbilitySystemComponent_GetAllAttributes) == 0x000010, "Wrong size on AbilitySystemComponent_GetAllAttributes");
static_assert(offsetof(AbilitySystemComponent_GetAllAttributes, OutAttributes) == 0x000000, "Member 'AbilitySystemComponent_GetAllAttributes::OutAttributes' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.K2_GiveAbility
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemComponent_K2_GiveAbility final
{
public:
	TSubclassOf<class UGameplayAbility>           AbilityClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputID;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_K2_GiveAbility) == 0x000008, "Wrong alignment on AbilitySystemComponent_K2_GiveAbility");
static_assert(sizeof(AbilitySystemComponent_K2_GiveAbility) == 0x000018, "Wrong size on AbilitySystemComponent_K2_GiveAbility");
static_assert(offsetof(AbilitySystemComponent_K2_GiveAbility, AbilityClass) == 0x000000, "Member 'AbilitySystemComponent_K2_GiveAbility::AbilityClass' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_K2_GiveAbility, Level) == 0x000008, "Member 'AbilitySystemComponent_K2_GiveAbility::Level' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_K2_GiveAbility, InputID) == 0x00000C, "Member 'AbilitySystemComponent_K2_GiveAbility::InputID' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_K2_GiveAbility, ReturnValue) == 0x000010, "Member 'AbilitySystemComponent_K2_GiveAbility::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.K2_GiveAbilityAndActivateOnce
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemComponent_K2_GiveAbilityAndActivateOnce final
{
public:
	TSubclassOf<class UGameplayAbility>           AbilityClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputID;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_K2_GiveAbilityAndActivateOnce) == 0x000008, "Wrong alignment on AbilitySystemComponent_K2_GiveAbilityAndActivateOnce");
static_assert(sizeof(AbilitySystemComponent_K2_GiveAbilityAndActivateOnce) == 0x000018, "Wrong size on AbilitySystemComponent_K2_GiveAbilityAndActivateOnce");
static_assert(offsetof(AbilitySystemComponent_K2_GiveAbilityAndActivateOnce, AbilityClass) == 0x000000, "Member 'AbilitySystemComponent_K2_GiveAbilityAndActivateOnce::AbilityClass' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_K2_GiveAbilityAndActivateOnce, Level) == 0x000008, "Member 'AbilitySystemComponent_K2_GiveAbilityAndActivateOnce::Level' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_K2_GiveAbilityAndActivateOnce, InputID) == 0x00000C, "Member 'AbilitySystemComponent_K2_GiveAbilityAndActivateOnce::InputID' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_K2_GiveAbilityAndActivateOnce, ReturnValue) == 0x000010, "Member 'AbilitySystemComponent_K2_GiveAbilityAndActivateOnce::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.K2_InitStats
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_K2_InitStats final
{
public:
	TSubclassOf<class UAttributeSet>              Attributes;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDataTable*                       DataTable;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_K2_InitStats) == 0x000008, "Wrong alignment on AbilitySystemComponent_K2_InitStats");
static_assert(sizeof(AbilitySystemComponent_K2_InitStats) == 0x000010, "Wrong size on AbilitySystemComponent_K2_InitStats");
static_assert(offsetof(AbilitySystemComponent_K2_InitStats, Attributes) == 0x000000, "Member 'AbilitySystemComponent_K2_InitStats::Attributes' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_K2_InitStats, DataTable) == 0x000008, "Member 'AbilitySystemComponent_K2_InitStats::DataTable' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueAdded
// 0x0038 (0x0038 - 0x0000)
struct AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded) == 0x000008, "Wrong alignment on AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded");
static_assert(sizeof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded) == 0x000038, "Wrong size on AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded, GameplayCueTag) == 0x000000, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded, PredictionKey) == 0x000008, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded::PredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded, EffectContext) == 0x000020, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded::EffectContext' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueAdded_WithParams
// 0x0100 (0x0100 - 0x0000)
struct AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded_WithParams final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0020(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded_WithParams) == 0x000008, "Wrong alignment on AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded_WithParams");
static_assert(sizeof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded_WithParams) == 0x000100, "Wrong size on AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded_WithParams");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded_WithParams, GameplayCueTag) == 0x000000, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded_WithParams::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded_WithParams, PredictionKey) == 0x000008, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded_WithParams::PredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded_WithParams, Parameters) == 0x000020, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueAdded_WithParams::Parameters' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec
// 0x0090 (0x0090 - 0x0000)
struct AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec final
{
public:
	struct FGameplayEffectSpecForRPC              Spec;                                              // 0x0000(0x0078)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0078(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec) == 0x000008, "Wrong alignment on AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec");
static_assert(sizeof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec) == 0x000090, "Wrong size on AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec, Spec) == 0x000000, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec::Spec' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec, PredictionKey) == 0x000078, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec::PredictionKey' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams
// 0x0100 (0x0100 - 0x0000)
struct AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0020(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams) == 0x000008, "Wrong alignment on AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams");
static_assert(sizeof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams) == 0x000100, "Wrong size on AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams, GameplayCueTag) == 0x000000, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams, PredictionKey) == 0x000008, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams::PredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams, GameplayCueParameters) == 0x000020, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams::GameplayCueParameters' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueExecuted
// 0x0038 (0x0038 - 0x0000)
struct AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted) == 0x000008, "Wrong alignment on AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted");
static_assert(sizeof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted) == 0x000038, "Wrong size on AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted, GameplayCueTag) == 0x000000, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted, PredictionKey) == 0x000008, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted::PredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted, EffectContext) == 0x000020, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted::EffectContext' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueExecuted_FromSpec
// 0x0090 (0x0090 - 0x0000)
struct AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec final
{
public:
	struct FGameplayEffectSpecForRPC              Spec;                                              // 0x0000(0x0078)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0078(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec) == 0x000008, "Wrong alignment on AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec");
static_assert(sizeof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec) == 0x000090, "Wrong size on AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec, Spec) == 0x000000, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec::Spec' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec, PredictionKey) == 0x000078, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_FromSpec::PredictionKey' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueExecuted_WithParams
// 0x0100 (0x0100 - 0x0000)
struct AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0020(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams) == 0x000008, "Wrong alignment on AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams");
static_assert(sizeof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams) == 0x000100, "Wrong size on AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams, GameplayCueTag) == 0x000000, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams, PredictionKey) == 0x000008, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams::PredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams, GameplayCueParameters) == 0x000020, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCueExecuted_WithParams::GameplayCueParameters' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams
// 0x0118 (0x0118 - 0x0000)
struct AbilitySystemComponent_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams final
{
public:
	struct FGameplayTagContainer                  GameplayCueTags;                                   // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0038(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams) == 0x000008, "Wrong alignment on AbilitySystemComponent_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams");
static_assert(sizeof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams) == 0x000118, "Wrong size on AbilitySystemComponent_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams, GameplayCueTags) == 0x000000, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams::GameplayCueTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams, PredictionKey) == 0x000020, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams::PredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams, GameplayCueParameters) == 0x000038, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams::GameplayCueParameters' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCuesExecuted
// 0x0050 (0x0050 - 0x0000)
struct AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted final
{
public:
	struct FGameplayTagContainer                  GameplayCueTags;                                   // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0038(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted) == 0x000008, "Wrong alignment on AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted");
static_assert(sizeof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted) == 0x000050, "Wrong size on AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted, GameplayCueTags) == 0x000000, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted::GameplayCueTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted, PredictionKey) == 0x000020, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted::PredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted, EffectContext) == 0x000038, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted::EffectContext' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCuesExecuted_WithParams
// 0x0118 (0x0118 - 0x0000)
struct AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted_WithParams final
{
public:
	struct FGameplayTagContainer                  GameplayCueTags;                                   // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0038(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted_WithParams) == 0x000008, "Wrong alignment on AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted_WithParams");
static_assert(sizeof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted_WithParams) == 0x000118, "Wrong size on AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted_WithParams");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted_WithParams, GameplayCueTags) == 0x000000, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted_WithParams::GameplayCueTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted_WithParams, PredictionKey) == 0x000020, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted_WithParams::PredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted_WithParams, GameplayCueParameters) == 0x000038, "Member 'AbilitySystemComponent_NetMulticast_InvokeGameplayCuesExecuted_WithParams::GameplayCueParameters' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.OnAvatarActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct AbilitySystemComponent_OnAvatarActorDestroyed final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_OnAvatarActorDestroyed) == 0x000008, "Wrong alignment on AbilitySystemComponent_OnAvatarActorDestroyed");
static_assert(sizeof(AbilitySystemComponent_OnAvatarActorDestroyed) == 0x000008, "Wrong size on AbilitySystemComponent_OnAvatarActorDestroyed");
static_assert(offsetof(AbilitySystemComponent_OnAvatarActorDestroyed, InActor) == 0x000000, "Member 'AbilitySystemComponent_OnAvatarActorDestroyed::InActor' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.OnOwnerActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct AbilitySystemComponent_OnOwnerActorDestroyed final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_OnOwnerActorDestroyed) == 0x000008, "Wrong alignment on AbilitySystemComponent_OnOwnerActorDestroyed");
static_assert(sizeof(AbilitySystemComponent_OnOwnerActorDestroyed) == 0x000008, "Wrong size on AbilitySystemComponent_OnOwnerActorDestroyed");
static_assert(offsetof(AbilitySystemComponent_OnOwnerActorDestroyed, InActor) == 0x000000, "Member 'AbilitySystemComponent_OnOwnerActorDestroyed::InActor' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.OnRep_SpawnedAttributes
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_OnRep_SpawnedAttributes final
{
public:
	TArray<class UAttributeSet*>                  PreviousSpawnedAttributes;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_OnRep_SpawnedAttributes) == 0x000008, "Wrong alignment on AbilitySystemComponent_OnRep_SpawnedAttributes");
static_assert(sizeof(AbilitySystemComponent_OnRep_SpawnedAttributes) == 0x000010, "Wrong size on AbilitySystemComponent_OnRep_SpawnedAttributes");
static_assert(offsetof(AbilitySystemComponent_OnRep_SpawnedAttributes, PreviousSpawnedAttributes) == 0x000000, "Member 'AbilitySystemComponent_OnRep_SpawnedAttributes::PreviousSpawnedAttributes' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.OnSpawnedAttributesEndPlayed
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_OnSpawnedAttributesEndPlayed final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_OnSpawnedAttributesEndPlayed) == 0x000008, "Wrong alignment on AbilitySystemComponent_OnSpawnedAttributesEndPlayed");
static_assert(sizeof(AbilitySystemComponent_OnSpawnedAttributesEndPlayed) == 0x000010, "Wrong size on AbilitySystemComponent_OnSpawnedAttributesEndPlayed");
static_assert(offsetof(AbilitySystemComponent_OnSpawnedAttributesEndPlayed, InActor) == 0x000000, "Member 'AbilitySystemComponent_OnSpawnedAttributesEndPlayed::InActor' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_OnSpawnedAttributesEndPlayed, EndPlayReason) == 0x000008, "Member 'AbilitySystemComponent_OnSpawnedAttributesEndPlayed::EndPlayReason' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.PressInputID
// 0x0004 (0x0004 - 0x0000)
struct AbilitySystemComponent_PressInputID final
{
public:
	int32                                         InputID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_PressInputID) == 0x000004, "Wrong alignment on AbilitySystemComponent_PressInputID");
static_assert(sizeof(AbilitySystemComponent_PressInputID) == 0x000004, "Wrong size on AbilitySystemComponent_PressInputID");
static_assert(offsetof(AbilitySystemComponent_PressInputID, InputID) == 0x000000, "Member 'AbilitySystemComponent_PressInputID::InputID' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ReleaseInputID
// 0x0004 (0x0004 - 0x0000)
struct AbilitySystemComponent_ReleaseInputID final
{
public:
	int32                                         InputID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ReleaseInputID) == 0x000004, "Wrong alignment on AbilitySystemComponent_ReleaseInputID");
static_assert(sizeof(AbilitySystemComponent_ReleaseInputID) == 0x000004, "Wrong size on AbilitySystemComponent_ReleaseInputID");
static_assert(offsetof(AbilitySystemComponent_ReleaseInputID, InputID) == 0x000000, "Member 'AbilitySystemComponent_ReleaseInputID::InputID' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.RemoveActiveEffectsByClass
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_RemoveActiveEffectsByClass final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_RemoveActiveEffectsByClass) == 0x000008, "Wrong alignment on AbilitySystemComponent_RemoveActiveEffectsByClass");
static_assert(sizeof(AbilitySystemComponent_RemoveActiveEffectsByClass) == 0x000010, "Wrong size on AbilitySystemComponent_RemoveActiveEffectsByClass");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveEffectsByClass, GameplayEffect) == 0x000000, "Member 'AbilitySystemComponent_RemoveActiveEffectsByClass::GameplayEffect' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveEffectsByClass, ReturnValue) == 0x000008, "Member 'AbilitySystemComponent_RemoveActiveEffectsByClass::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.RemoveActiveEffectsWithAppliedTags
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponent_RemoveActiveEffectsWithAppliedTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_RemoveActiveEffectsWithAppliedTags) == 0x000008, "Wrong alignment on AbilitySystemComponent_RemoveActiveEffectsWithAppliedTags");
static_assert(sizeof(AbilitySystemComponent_RemoveActiveEffectsWithAppliedTags) == 0x000028, "Wrong size on AbilitySystemComponent_RemoveActiveEffectsWithAppliedTags");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveEffectsWithAppliedTags, Tags) == 0x000000, "Member 'AbilitySystemComponent_RemoveActiveEffectsWithAppliedTags::Tags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveEffectsWithAppliedTags, ReturnValue) == 0x000020, "Member 'AbilitySystemComponent_RemoveActiveEffectsWithAppliedTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.RemoveActiveEffectsWithGrantedTags
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponent_RemoveActiveEffectsWithGrantedTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_RemoveActiveEffectsWithGrantedTags) == 0x000008, "Wrong alignment on AbilitySystemComponent_RemoveActiveEffectsWithGrantedTags");
static_assert(sizeof(AbilitySystemComponent_RemoveActiveEffectsWithGrantedTags) == 0x000028, "Wrong size on AbilitySystemComponent_RemoveActiveEffectsWithGrantedTags");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveEffectsWithGrantedTags, Tags) == 0x000000, "Member 'AbilitySystemComponent_RemoveActiveEffectsWithGrantedTags::Tags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveEffectsWithGrantedTags, ReturnValue) == 0x000020, "Member 'AbilitySystemComponent_RemoveActiveEffectsWithGrantedTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.RemoveActiveEffectsWithSourceTags
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponent_RemoveActiveEffectsWithSourceTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_RemoveActiveEffectsWithSourceTags) == 0x000008, "Wrong alignment on AbilitySystemComponent_RemoveActiveEffectsWithSourceTags");
static_assert(sizeof(AbilitySystemComponent_RemoveActiveEffectsWithSourceTags) == 0x000028, "Wrong size on AbilitySystemComponent_RemoveActiveEffectsWithSourceTags");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveEffectsWithSourceTags, Tags) == 0x000000, "Member 'AbilitySystemComponent_RemoveActiveEffectsWithSourceTags::Tags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveEffectsWithSourceTags, ReturnValue) == 0x000020, "Member 'AbilitySystemComponent_RemoveActiveEffectsWithSourceTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.RemoveActiveEffectsWithTags
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponent_RemoveActiveEffectsWithTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_RemoveActiveEffectsWithTags) == 0x000008, "Wrong alignment on AbilitySystemComponent_RemoveActiveEffectsWithTags");
static_assert(sizeof(AbilitySystemComponent_RemoveActiveEffectsWithTags) == 0x000028, "Wrong size on AbilitySystemComponent_RemoveActiveEffectsWithTags");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveEffectsWithTags, Tags) == 0x000000, "Member 'AbilitySystemComponent_RemoveActiveEffectsWithTags::Tags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveEffectsWithTags, ReturnValue) == 0x000020, "Member 'AbilitySystemComponent_RemoveActiveEffectsWithTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.RemoveActiveGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_RemoveActiveGameplayEffect final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_RemoveActiveGameplayEffect) == 0x000004, "Wrong alignment on AbilitySystemComponent_RemoveActiveGameplayEffect");
static_assert(sizeof(AbilitySystemComponent_RemoveActiveGameplayEffect) == 0x000010, "Wrong size on AbilitySystemComponent_RemoveActiveGameplayEffect");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveGameplayEffect, Handle) == 0x000000, "Member 'AbilitySystemComponent_RemoveActiveGameplayEffect::Handle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveGameplayEffect, StacksToRemove) == 0x000008, "Member 'AbilitySystemComponent_RemoveActiveGameplayEffect::StacksToRemove' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveGameplayEffect, ReturnValue) == 0x00000C, "Member 'AbilitySystemComponent_RemoveActiveGameplayEffect::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.RemoveActiveGameplayEffectBySourceEffect
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                InstigatorAbilitySystemComponent;                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect) == 0x000008, "Wrong alignment on AbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect");
static_assert(sizeof(AbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect) == 0x000018, "Wrong size on AbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect, GameplayEffect) == 0x000000, "Member 'AbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect::GameplayEffect' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect, InstigatorAbilitySystemComponent) == 0x000008, "Member 'AbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect::InstigatorAbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect, StacksToRemove) == 0x000010, "Member 'AbilitySystemComponent_RemoveActiveGameplayEffectBySourceEffect::StacksToRemove' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerAbilityRPCBatch
// 0x0050 (0x0050 - 0x0000)
struct AbilitySystemComponent_ServerAbilityRPCBatch final
{
public:
	struct GameplayAbilities::FServerAbilityRPCBatch BatchInfo;                                         // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerAbilityRPCBatch) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerAbilityRPCBatch");
static_assert(sizeof(AbilitySystemComponent_ServerAbilityRPCBatch) == 0x000050, "Wrong size on AbilitySystemComponent_ServerAbilityRPCBatch");
static_assert(offsetof(AbilitySystemComponent_ServerAbilityRPCBatch, BatchInfo) == 0x000000, "Member 'AbilitySystemComponent_ServerAbilityRPCBatch::BatchInfo' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerCancelAbility
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponent_ServerCancelAbility final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityToCancel;                                   // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActivationInfo         ActivationInfo;                                    // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerCancelAbility) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerCancelAbility");
static_assert(sizeof(AbilitySystemComponent_ServerCancelAbility) == 0x000028, "Wrong size on AbilitySystemComponent_ServerCancelAbility");
static_assert(offsetof(AbilitySystemComponent_ServerCancelAbility, AbilityToCancel) == 0x000000, "Member 'AbilitySystemComponent_ServerCancelAbility::AbilityToCancel' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerCancelAbility, ActivationInfo) == 0x000008, "Member 'AbilitySystemComponent_ServerCancelAbility::ActivationInfo' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerCurrentMontageJumpToSectionName
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_ServerCurrentMontageJumpToSectionName final
{
public:
	class UAnimMontage*                           ClientAnimMontage;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerCurrentMontageJumpToSectionName) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerCurrentMontageJumpToSectionName");
static_assert(sizeof(AbilitySystemComponent_ServerCurrentMontageJumpToSectionName) == 0x000010, "Wrong size on AbilitySystemComponent_ServerCurrentMontageJumpToSectionName");
static_assert(offsetof(AbilitySystemComponent_ServerCurrentMontageJumpToSectionName, ClientAnimMontage) == 0x000000, "Member 'AbilitySystemComponent_ServerCurrentMontageJumpToSectionName::ClientAnimMontage' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerCurrentMontageJumpToSectionName, SectionName) == 0x000008, "Member 'AbilitySystemComponent_ServerCurrentMontageJumpToSectionName::SectionName' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerCurrentMontageSetNextSectionName
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemComponent_ServerCurrentMontageSetNextSectionName final
{
public:
	class UAnimMontage*                           ClientAnimMontage;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientPosition;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextSectionName;                                   // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_ServerCurrentMontageSetNextSectionName) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerCurrentMontageSetNextSectionName");
static_assert(sizeof(AbilitySystemComponent_ServerCurrentMontageSetNextSectionName) == 0x000020, "Wrong size on AbilitySystemComponent_ServerCurrentMontageSetNextSectionName");
static_assert(offsetof(AbilitySystemComponent_ServerCurrentMontageSetNextSectionName, ClientAnimMontage) == 0x000000, "Member 'AbilitySystemComponent_ServerCurrentMontageSetNextSectionName::ClientAnimMontage' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerCurrentMontageSetNextSectionName, ClientPosition) == 0x000008, "Member 'AbilitySystemComponent_ServerCurrentMontageSetNextSectionName::ClientPosition' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerCurrentMontageSetNextSectionName, SectionName) == 0x00000C, "Member 'AbilitySystemComponent_ServerCurrentMontageSetNextSectionName::SectionName' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerCurrentMontageSetNextSectionName, NextSectionName) == 0x000014, "Member 'AbilitySystemComponent_ServerCurrentMontageSetNextSectionName::NextSectionName' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerCurrentMontageSetPlayRate
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_ServerCurrentMontageSetPlayRate final
{
public:
	class UAnimMontage*                           ClientAnimMontage;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_ServerCurrentMontageSetPlayRate) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerCurrentMontageSetPlayRate");
static_assert(sizeof(AbilitySystemComponent_ServerCurrentMontageSetPlayRate) == 0x000010, "Wrong size on AbilitySystemComponent_ServerCurrentMontageSetPlayRate");
static_assert(offsetof(AbilitySystemComponent_ServerCurrentMontageSetPlayRate, ClientAnimMontage) == 0x000000, "Member 'AbilitySystemComponent_ServerCurrentMontageSetPlayRate::ClientAnimMontage' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerCurrentMontageSetPlayRate, InPlayRate) == 0x000008, "Member 'AbilitySystemComponent_ServerCurrentMontageSetPlayRate::InPlayRate' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerEndAbility
// 0x0040 (0x0040 - 0x0000)
struct AbilitySystemComponent_ServerEndAbility final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityToEnd;                                      // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActivationInfo         ActivationInfo;                                    // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerEndAbility) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerEndAbility");
static_assert(sizeof(AbilitySystemComponent_ServerEndAbility) == 0x000040, "Wrong size on AbilitySystemComponent_ServerEndAbility");
static_assert(offsetof(AbilitySystemComponent_ServerEndAbility, AbilityToEnd) == 0x000000, "Member 'AbilitySystemComponent_ServerEndAbility::AbilityToEnd' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerEndAbility, ActivationInfo) == 0x000008, "Member 'AbilitySystemComponent_ServerEndAbility::ActivationInfo' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerEndAbility, PredictionKey) == 0x000028, "Member 'AbilitySystemComponent_ServerEndAbility::PredictionKey' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerPrintDebug_RequestWithStrings
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_ServerPrintDebug_RequestWithStrings final
{
public:
	TArray<class FString>                         Strings;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerPrintDebug_RequestWithStrings) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerPrintDebug_RequestWithStrings");
static_assert(sizeof(AbilitySystemComponent_ServerPrintDebug_RequestWithStrings) == 0x000010, "Wrong size on AbilitySystemComponent_ServerPrintDebug_RequestWithStrings");
static_assert(offsetof(AbilitySystemComponent_ServerPrintDebug_RequestWithStrings, Strings) == 0x000000, "Member 'AbilitySystemComponent_ServerPrintDebug_RequestWithStrings::Strings' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerSetInputPressed
// 0x0004 (0x0004 - 0x0000)
struct AbilitySystemComponent_ServerSetInputPressed final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityHandle;                                     // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerSetInputPressed) == 0x000004, "Wrong alignment on AbilitySystemComponent_ServerSetInputPressed");
static_assert(sizeof(AbilitySystemComponent_ServerSetInputPressed) == 0x000004, "Wrong size on AbilitySystemComponent_ServerSetInputPressed");
static_assert(offsetof(AbilitySystemComponent_ServerSetInputPressed, AbilityHandle) == 0x000000, "Member 'AbilitySystemComponent_ServerSetInputPressed::AbilityHandle' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerSetInputReleased
// 0x0004 (0x0004 - 0x0000)
struct AbilitySystemComponent_ServerSetInputReleased final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityHandle;                                     // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerSetInputReleased) == 0x000004, "Wrong alignment on AbilitySystemComponent_ServerSetInputReleased");
static_assert(sizeof(AbilitySystemComponent_ServerSetInputReleased) == 0x000004, "Wrong size on AbilitySystemComponent_ServerSetInputReleased");
static_assert(offsetof(AbilitySystemComponent_ServerSetInputReleased, AbilityHandle) == 0x000000, "Member 'AbilitySystemComponent_ServerSetInputReleased::AbilityHandle' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerSetReplicatedEvent
// 0x0038 (0x0038 - 0x0000)
struct AbilitySystemComponent_ServerSetReplicatedEvent final
{
public:
	EAbilityGenericReplicatedEvent                EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilitySpecHandle             AbilityHandle;                                     // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         AbilityOriginalPredictionKey;                      // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         CurrentPredictionKey;                              // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerSetReplicatedEvent) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerSetReplicatedEvent");
static_assert(sizeof(AbilitySystemComponent_ServerSetReplicatedEvent) == 0x000038, "Wrong size on AbilitySystemComponent_ServerSetReplicatedEvent");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedEvent, EventType) == 0x000000, "Member 'AbilitySystemComponent_ServerSetReplicatedEvent::EventType' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedEvent, AbilityHandle) == 0x000004, "Member 'AbilitySystemComponent_ServerSetReplicatedEvent::AbilityHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedEvent, AbilityOriginalPredictionKey) == 0x000008, "Member 'AbilitySystemComponent_ServerSetReplicatedEvent::AbilityOriginalPredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedEvent, CurrentPredictionKey) == 0x000020, "Member 'AbilitySystemComponent_ServerSetReplicatedEvent::CurrentPredictionKey' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerSetReplicatedEventWithPayload
// 0x0050 (0x0050 - 0x0000)
struct AbilitySystemComponent_ServerSetReplicatedEventWithPayload final
{
public:
	EAbilityGenericReplicatedEvent                EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilitySpecHandle             AbilityHandle;                                     // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         AbilityOriginalPredictionKey;                      // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         CurrentPredictionKey;                              // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 VectorPayload;                                     // 0x0038(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerSetReplicatedEventWithPayload) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerSetReplicatedEventWithPayload");
static_assert(sizeof(AbilitySystemComponent_ServerSetReplicatedEventWithPayload) == 0x000050, "Wrong size on AbilitySystemComponent_ServerSetReplicatedEventWithPayload");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedEventWithPayload, EventType) == 0x000000, "Member 'AbilitySystemComponent_ServerSetReplicatedEventWithPayload::EventType' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedEventWithPayload, AbilityHandle) == 0x000004, "Member 'AbilitySystemComponent_ServerSetReplicatedEventWithPayload::AbilityHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedEventWithPayload, AbilityOriginalPredictionKey) == 0x000008, "Member 'AbilitySystemComponent_ServerSetReplicatedEventWithPayload::AbilityOriginalPredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedEventWithPayload, CurrentPredictionKey) == 0x000020, "Member 'AbilitySystemComponent_ServerSetReplicatedEventWithPayload::CurrentPredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedEventWithPayload, VectorPayload) == 0x000038, "Member 'AbilitySystemComponent_ServerSetReplicatedEventWithPayload::VectorPayload' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerSetReplicatedTargetData
// 0x0068 (0x0068 - 0x0000)
struct AbilitySystemComponent_ServerSetReplicatedTargetData final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityHandle;                                     // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         AbilityOriginalPredictionKey;                      // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       ReplicatedTargetDataHandle;                        // 0x0020(0x0028)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0048(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         CurrentPredictionKey;                              // 0x0050(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerSetReplicatedTargetData) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerSetReplicatedTargetData");
static_assert(sizeof(AbilitySystemComponent_ServerSetReplicatedTargetData) == 0x000068, "Wrong size on AbilitySystemComponent_ServerSetReplicatedTargetData");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedTargetData, AbilityHandle) == 0x000000, "Member 'AbilitySystemComponent_ServerSetReplicatedTargetData::AbilityHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedTargetData, AbilityOriginalPredictionKey) == 0x000008, "Member 'AbilitySystemComponent_ServerSetReplicatedTargetData::AbilityOriginalPredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedTargetData, ReplicatedTargetDataHandle) == 0x000020, "Member 'AbilitySystemComponent_ServerSetReplicatedTargetData::ReplicatedTargetDataHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedTargetData, ApplicationTag) == 0x000048, "Member 'AbilitySystemComponent_ServerSetReplicatedTargetData::ApplicationTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedTargetData, CurrentPredictionKey) == 0x000050, "Member 'AbilitySystemComponent_ServerSetReplicatedTargetData::CurrentPredictionKey' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerSetReplicatedTargetDataCancelled
// 0x0038 (0x0038 - 0x0000)
struct AbilitySystemComponent_ServerSetReplicatedTargetDataCancelled final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityHandle;                                     // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         AbilityOriginalPredictionKey;                      // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         CurrentPredictionKey;                              // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerSetReplicatedTargetDataCancelled) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerSetReplicatedTargetDataCancelled");
static_assert(sizeof(AbilitySystemComponent_ServerSetReplicatedTargetDataCancelled) == 0x000038, "Wrong size on AbilitySystemComponent_ServerSetReplicatedTargetDataCancelled");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedTargetDataCancelled, AbilityHandle) == 0x000000, "Member 'AbilitySystemComponent_ServerSetReplicatedTargetDataCancelled::AbilityHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedTargetDataCancelled, AbilityOriginalPredictionKey) == 0x000008, "Member 'AbilitySystemComponent_ServerSetReplicatedTargetDataCancelled::AbilityOriginalPredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerSetReplicatedTargetDataCancelled, CurrentPredictionKey) == 0x000020, "Member 'AbilitySystemComponent_ServerSetReplicatedTargetDataCancelled::CurrentPredictionKey' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerTryActivateAbility
// 0x0020 (0x0020 - 0x0000)
struct AbilitySystemComponent_ServerTryActivateAbility final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityToActivate;                                 // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InputPressed;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerTryActivateAbility) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerTryActivateAbility");
static_assert(sizeof(AbilitySystemComponent_ServerTryActivateAbility) == 0x000020, "Wrong size on AbilitySystemComponent_ServerTryActivateAbility");
static_assert(offsetof(AbilitySystemComponent_ServerTryActivateAbility, AbilityToActivate) == 0x000000, "Member 'AbilitySystemComponent_ServerTryActivateAbility::AbilityToActivate' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerTryActivateAbility, InputPressed) == 0x000004, "Member 'AbilitySystemComponent_ServerTryActivateAbility::InputPressed' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerTryActivateAbility, PredictionKey) == 0x000008, "Member 'AbilitySystemComponent_ServerTryActivateAbility::PredictionKey' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.ServerTryActivateAbilityWithEventData
// 0x00D0 (0x00D0 - 0x0000)
struct AbilitySystemComponent_ServerTryActivateAbilityWithEventData final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityToActivate;                                 // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InputPressed;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     TriggerEventData;                                  // 0x0020(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_ServerTryActivateAbilityWithEventData) == 0x000008, "Wrong alignment on AbilitySystemComponent_ServerTryActivateAbilityWithEventData");
static_assert(sizeof(AbilitySystemComponent_ServerTryActivateAbilityWithEventData) == 0x0000D0, "Wrong size on AbilitySystemComponent_ServerTryActivateAbilityWithEventData");
static_assert(offsetof(AbilitySystemComponent_ServerTryActivateAbilityWithEventData, AbilityToActivate) == 0x000000, "Member 'AbilitySystemComponent_ServerTryActivateAbilityWithEventData::AbilityToActivate' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerTryActivateAbilityWithEventData, InputPressed) == 0x000004, "Member 'AbilitySystemComponent_ServerTryActivateAbilityWithEventData::InputPressed' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerTryActivateAbilityWithEventData, PredictionKey) == 0x000008, "Member 'AbilitySystemComponent_ServerTryActivateAbilityWithEventData::PredictionKey' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_ServerTryActivateAbilityWithEventData, TriggerEventData) == 0x000020, "Member 'AbilitySystemComponent_ServerTryActivateAbilityWithEventData::TriggerEventData' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.SetActiveGameplayEffectLevel
// 0x000C (0x000C - 0x0000)
struct AbilitySystemComponent_SetActiveGameplayEffectLevel final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewLevel;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_SetActiveGameplayEffectLevel) == 0x000004, "Wrong alignment on AbilitySystemComponent_SetActiveGameplayEffectLevel");
static_assert(sizeof(AbilitySystemComponent_SetActiveGameplayEffectLevel) == 0x00000C, "Wrong size on AbilitySystemComponent_SetActiveGameplayEffectLevel");
static_assert(offsetof(AbilitySystemComponent_SetActiveGameplayEffectLevel, ActiveHandle) == 0x000000, "Member 'AbilitySystemComponent_SetActiveGameplayEffectLevel::ActiveHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_SetActiveGameplayEffectLevel, NewLevel) == 0x000008, "Member 'AbilitySystemComponent_SetActiveGameplayEffectLevel::NewLevel' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.SetActiveGameplayEffectLevelUsingQuery
// 0x0158 (0x0158 - 0x0000)
struct AbilitySystemComponent_SetActiveGameplayEffectLevelUsingQuery final
{
public:
	struct FGameplayEffectQuery                   Query;                                             // 0x0000(0x0150)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         NewLevel;                                          // 0x0150(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_SetActiveGameplayEffectLevelUsingQuery) == 0x000008, "Wrong alignment on AbilitySystemComponent_SetActiveGameplayEffectLevelUsingQuery");
static_assert(sizeof(AbilitySystemComponent_SetActiveGameplayEffectLevelUsingQuery) == 0x000158, "Wrong size on AbilitySystemComponent_SetActiveGameplayEffectLevelUsingQuery");
static_assert(offsetof(AbilitySystemComponent_SetActiveGameplayEffectLevelUsingQuery, Query) == 0x000000, "Member 'AbilitySystemComponent_SetActiveGameplayEffectLevelUsingQuery::Query' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_SetActiveGameplayEffectLevelUsingQuery, NewLevel) == 0x000150, "Member 'AbilitySystemComponent_SetActiveGameplayEffectLevelUsingQuery::NewLevel' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.SetUserAbilityActivationInhibited
// 0x0001 (0x0001 - 0x0000)
struct AbilitySystemComponent_SetUserAbilityActivationInhibited final
{
public:
	bool                                          NewInhibit;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_SetUserAbilityActivationInhibited) == 0x000001, "Wrong alignment on AbilitySystemComponent_SetUserAbilityActivationInhibited");
static_assert(sizeof(AbilitySystemComponent_SetUserAbilityActivationInhibited) == 0x000001, "Wrong size on AbilitySystemComponent_SetUserAbilityActivationInhibited");
static_assert(offsetof(AbilitySystemComponent_SetUserAbilityActivationInhibited, NewInhibit) == 0x000000, "Member 'AbilitySystemComponent_SetUserAbilityActivationInhibited::NewInhibit' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.TryActivateAbilitiesByTag
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponent_TryActivateAbilitiesByTag final
{
public:
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAllowRemoteActivation;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_TryActivateAbilitiesByTag) == 0x000008, "Wrong alignment on AbilitySystemComponent_TryActivateAbilitiesByTag");
static_assert(sizeof(AbilitySystemComponent_TryActivateAbilitiesByTag) == 0x000028, "Wrong size on AbilitySystemComponent_TryActivateAbilitiesByTag");
static_assert(offsetof(AbilitySystemComponent_TryActivateAbilitiesByTag, GameplayTagContainer) == 0x000000, "Member 'AbilitySystemComponent_TryActivateAbilitiesByTag::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_TryActivateAbilitiesByTag, bAllowRemoteActivation) == 0x000020, "Member 'AbilitySystemComponent_TryActivateAbilitiesByTag::bAllowRemoteActivation' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_TryActivateAbilitiesByTag, ReturnValue) == 0x000021, "Member 'AbilitySystemComponent_TryActivateAbilitiesByTag::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.TryActivateAbility
// 0x0008 (0x0008 - 0x0000)
struct AbilitySystemComponent_TryActivateAbility final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityToActivate;                                 // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRemoteActivation;                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_TryActivateAbility) == 0x000004, "Wrong alignment on AbilitySystemComponent_TryActivateAbility");
static_assert(sizeof(AbilitySystemComponent_TryActivateAbility) == 0x000008, "Wrong size on AbilitySystemComponent_TryActivateAbility");
static_assert(offsetof(AbilitySystemComponent_TryActivateAbility, AbilityToActivate) == 0x000000, "Member 'AbilitySystemComponent_TryActivateAbility::AbilityToActivate' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_TryActivateAbility, bAllowRemoteActivation) == 0x000004, "Member 'AbilitySystemComponent_TryActivateAbility::bAllowRemoteActivation' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_TryActivateAbility, ReturnValue) == 0x000005, "Member 'AbilitySystemComponent_TryActivateAbility::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.TryActivateAbilityByClass
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_TryActivateAbilityByClass final
{
public:
	TSubclassOf<class UGameplayAbility>           InAbilityToActivate;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRemoteActivation;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_TryActivateAbilityByClass) == 0x000008, "Wrong alignment on AbilitySystemComponent_TryActivateAbilityByClass");
static_assert(sizeof(AbilitySystemComponent_TryActivateAbilityByClass) == 0x000010, "Wrong size on AbilitySystemComponent_TryActivateAbilityByClass");
static_assert(offsetof(AbilitySystemComponent_TryActivateAbilityByClass, InAbilityToActivate) == 0x000000, "Member 'AbilitySystemComponent_TryActivateAbilityByClass::InAbilityToActivate' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_TryActivateAbilityByClass, bAllowRemoteActivation) == 0x000008, "Member 'AbilitySystemComponent_TryActivateAbilityByClass::bAllowRemoteActivation' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_TryActivateAbilityByClass, ReturnValue) == 0x000009, "Member 'AbilitySystemComponent_TryActivateAbilityByClass::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.UpdateActiveGameplayEffectSetByCallerMagnitude
// 0x0014 (0x0014 - 0x0000)
struct AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitude final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SetByCallerTag;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitude) == 0x000004, "Wrong alignment on AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitude");
static_assert(sizeof(AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitude) == 0x000014, "Wrong size on AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitude");
static_assert(offsetof(AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitude, ActiveHandle) == 0x000000, "Member 'AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitude::ActiveHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitude, SetByCallerTag) == 0x000008, "Member 'AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitude::SetByCallerTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitude, NewValue) == 0x000010, "Member 'AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitude::NewValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.UpdateActiveGameplayEffectSetByCallerMagnitudes
// 0x0058 (0x0058 - 0x0000)
struct AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitudes final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, float>              NewSetByCallerValues;                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitudes) == 0x000008, "Wrong alignment on AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitudes");
static_assert(sizeof(AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitudes) == 0x000058, "Wrong size on AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitudes");
static_assert(offsetof(AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitudes, ActiveHandle) == 0x000000, "Member 'AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitudes::ActiveHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitudes, NewSetByCallerValues) == 0x000008, "Member 'AbilitySystemComponent_UpdateActiveGameplayEffectSetByCallerMagnitudes::NewSetByCallerValues' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.FindAllAbilitiesMatchingQuery
// 0x0058 (0x0058 - 0x0000)
struct AbilitySystemComponent_FindAllAbilitiesMatchingQuery final
{
public:
	TArray<struct FGameplayAbilitySpecHandle>     OutAbilityHandles;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      Query;                                             // 0x0010(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_FindAllAbilitiesMatchingQuery) == 0x000008, "Wrong alignment on AbilitySystemComponent_FindAllAbilitiesMatchingQuery");
static_assert(sizeof(AbilitySystemComponent_FindAllAbilitiesMatchingQuery) == 0x000058, "Wrong size on AbilitySystemComponent_FindAllAbilitiesMatchingQuery");
static_assert(offsetof(AbilitySystemComponent_FindAllAbilitiesMatchingQuery, OutAbilityHandles) == 0x000000, "Member 'AbilitySystemComponent_FindAllAbilitiesMatchingQuery::OutAbilityHandles' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_FindAllAbilitiesMatchingQuery, Query) == 0x000010, "Member 'AbilitySystemComponent_FindAllAbilitiesMatchingQuery::Query' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.FindAllAbilitiesWithInputID
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemComponent_FindAllAbilitiesWithInputID final
{
public:
	TArray<struct FGameplayAbilitySpecHandle>     OutAbilityHandles;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InputID;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_FindAllAbilitiesWithInputID) == 0x000008, "Wrong alignment on AbilitySystemComponent_FindAllAbilitiesWithInputID");
static_assert(sizeof(AbilitySystemComponent_FindAllAbilitiesWithInputID) == 0x000018, "Wrong size on AbilitySystemComponent_FindAllAbilitiesWithInputID");
static_assert(offsetof(AbilitySystemComponent_FindAllAbilitiesWithInputID, OutAbilityHandles) == 0x000000, "Member 'AbilitySystemComponent_FindAllAbilitiesWithInputID::OutAbilityHandles' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_FindAllAbilitiesWithInputID, InputID) == 0x000010, "Member 'AbilitySystemComponent_FindAllAbilitiesWithInputID::InputID' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.FindAllAbilitiesWithTags
// 0x0038 (0x0038 - 0x0000)
struct AbilitySystemComponent_FindAllAbilitiesWithTags final
{
public:
	TArray<struct FGameplayAbilitySpecHandle>     OutAbilityHandles;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_FindAllAbilitiesWithTags) == 0x000008, "Wrong alignment on AbilitySystemComponent_FindAllAbilitiesWithTags");
static_assert(sizeof(AbilitySystemComponent_FindAllAbilitiesWithTags) == 0x000038, "Wrong size on AbilitySystemComponent_FindAllAbilitiesWithTags");
static_assert(offsetof(AbilitySystemComponent_FindAllAbilitiesWithTags, OutAbilityHandles) == 0x000000, "Member 'AbilitySystemComponent_FindAllAbilitiesWithTags::OutAbilityHandles' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_FindAllAbilitiesWithTags, Tags) == 0x000010, "Member 'AbilitySystemComponent_FindAllAbilitiesWithTags::Tags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_FindAllAbilitiesWithTags, bExactMatch) == 0x000030, "Member 'AbilitySystemComponent_FindAllAbilitiesWithTags::bExactMatch' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.GetActiveEffects
// 0x0160 (0x0160 - 0x0000)
struct AbilitySystemComponent_GetActiveEffects final
{
public:
	struct FGameplayEffectQuery                   Query;                                             // 0x0000(0x0150)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    ReturnValue;                                       // 0x0150(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_GetActiveEffects) == 0x000008, "Wrong alignment on AbilitySystemComponent_GetActiveEffects");
static_assert(sizeof(AbilitySystemComponent_GetActiveEffects) == 0x000160, "Wrong size on AbilitySystemComponent_GetActiveEffects");
static_assert(offsetof(AbilitySystemComponent_GetActiveEffects, Query) == 0x000000, "Member 'AbilitySystemComponent_GetActiveEffects::Query' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetActiveEffects, ReturnValue) == 0x000150, "Member 'AbilitySystemComponent_GetActiveEffects::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.GetActiveEffectsWithAllTags
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemComponent_GetActiveEffectsWithAllTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_GetActiveEffectsWithAllTags) == 0x000008, "Wrong alignment on AbilitySystemComponent_GetActiveEffectsWithAllTags");
static_assert(sizeof(AbilitySystemComponent_GetActiveEffectsWithAllTags) == 0x000030, "Wrong size on AbilitySystemComponent_GetActiveEffectsWithAllTags");
static_assert(offsetof(AbilitySystemComponent_GetActiveEffectsWithAllTags, Tags) == 0x000000, "Member 'AbilitySystemComponent_GetActiveEffectsWithAllTags::Tags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetActiveEffectsWithAllTags, ReturnValue) == 0x000020, "Member 'AbilitySystemComponent_GetActiveEffectsWithAllTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.GetAllAbilities
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_GetAllAbilities final
{
public:
	TArray<struct FGameplayAbilitySpecHandle>     OutAbilityHandles;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_GetAllAbilities) == 0x000008, "Wrong alignment on AbilitySystemComponent_GetAllAbilities");
static_assert(sizeof(AbilitySystemComponent_GetAllAbilities) == 0x000010, "Wrong size on AbilitySystemComponent_GetAllAbilities");
static_assert(offsetof(AbilitySystemComponent_GetAllAbilities, OutAbilityHandles) == 0x000000, "Member 'AbilitySystemComponent_GetAllAbilities::OutAbilityHandles' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.GetAttributeSet
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponent_GetAttributeSet final
{
public:
	TSubclassOf<class UAttributeSet>              AttributeSetClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAttributeSet*                    ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_GetAttributeSet) == 0x000008, "Wrong alignment on AbilitySystemComponent_GetAttributeSet");
static_assert(sizeof(AbilitySystemComponent_GetAttributeSet) == 0x000010, "Wrong size on AbilitySystemComponent_GetAttributeSet");
static_assert(offsetof(AbilitySystemComponent_GetAttributeSet, AttributeSetClass) == 0x000000, "Member 'AbilitySystemComponent_GetAttributeSet::AttributeSetClass' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetAttributeSet, ReturnValue) == 0x000008, "Member 'AbilitySystemComponent_GetAttributeSet::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.GetGameplayAttributeValue
// 0x0040 (0x0040 - 0x0000)
struct AbilitySystemComponent_GetGameplayAttributeValue final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFound;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_GetGameplayAttributeValue) == 0x000008, "Wrong alignment on AbilitySystemComponent_GetGameplayAttributeValue");
static_assert(sizeof(AbilitySystemComponent_GetGameplayAttributeValue) == 0x000040, "Wrong size on AbilitySystemComponent_GetGameplayAttributeValue");
static_assert(offsetof(AbilitySystemComponent_GetGameplayAttributeValue, Attribute) == 0x000000, "Member 'AbilitySystemComponent_GetGameplayAttributeValue::Attribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetGameplayAttributeValue, bFound) == 0x000038, "Member 'AbilitySystemComponent_GetGameplayAttributeValue::bFound' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetGameplayAttributeValue, ReturnValue) == 0x00003C, "Member 'AbilitySystemComponent_GetGameplayAttributeValue::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.GetGameplayEffectCount
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemComponent_GetGameplayEffectCount final
{
public:
	TSubclassOf<class UGameplayEffect>            SourceGameplayEffect;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                OptionalInstigatorFilterComponent;                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceOnGoingCheck;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_GetGameplayEffectCount) == 0x000008, "Wrong alignment on AbilitySystemComponent_GetGameplayEffectCount");
static_assert(sizeof(AbilitySystemComponent_GetGameplayEffectCount) == 0x000018, "Wrong size on AbilitySystemComponent_GetGameplayEffectCount");
static_assert(offsetof(AbilitySystemComponent_GetGameplayEffectCount, SourceGameplayEffect) == 0x000000, "Member 'AbilitySystemComponent_GetGameplayEffectCount::SourceGameplayEffect' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetGameplayEffectCount, OptionalInstigatorFilterComponent) == 0x000008, "Member 'AbilitySystemComponent_GetGameplayEffectCount::OptionalInstigatorFilterComponent' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetGameplayEffectCount, bEnforceOnGoingCheck) == 0x000010, "Member 'AbilitySystemComponent_GetGameplayEffectCount::bEnforceOnGoingCheck' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetGameplayEffectCount, ReturnValue) == 0x000014, "Member 'AbilitySystemComponent_GetGameplayEffectCount::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.GetGameplayEffectCount_IfLoaded
// 0x0040 (0x0040 - 0x0000)
struct AbilitySystemComponent_GetGameplayEffectCount_IfLoaded final
{
public:
	TSoftClassPtr<class UClass>                   SoftSourceGameplayEffect;                          // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                OptionalInstigatorFilterComponent;                 // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceOnGoingCheck;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_GetGameplayEffectCount_IfLoaded) == 0x000008, "Wrong alignment on AbilitySystemComponent_GetGameplayEffectCount_IfLoaded");
static_assert(sizeof(AbilitySystemComponent_GetGameplayEffectCount_IfLoaded) == 0x000040, "Wrong size on AbilitySystemComponent_GetGameplayEffectCount_IfLoaded");
static_assert(offsetof(AbilitySystemComponent_GetGameplayEffectCount_IfLoaded, SoftSourceGameplayEffect) == 0x000000, "Member 'AbilitySystemComponent_GetGameplayEffectCount_IfLoaded::SoftSourceGameplayEffect' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetGameplayEffectCount_IfLoaded, OptionalInstigatorFilterComponent) == 0x000030, "Member 'AbilitySystemComponent_GetGameplayEffectCount_IfLoaded::OptionalInstigatorFilterComponent' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetGameplayEffectCount_IfLoaded, bEnforceOnGoingCheck) == 0x000038, "Member 'AbilitySystemComponent_GetGameplayEffectCount_IfLoaded::bEnforceOnGoingCheck' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetGameplayEffectCount_IfLoaded, ReturnValue) == 0x00003C, "Member 'AbilitySystemComponent_GetGameplayEffectCount_IfLoaded::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.GetGameplayEffectMagnitude
// 0x0048 (0x0048 - 0x0000)
struct AbilitySystemComponent_GetGameplayEffectMagnitude final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_GetGameplayEffectMagnitude) == 0x000008, "Wrong alignment on AbilitySystemComponent_GetGameplayEffectMagnitude");
static_assert(sizeof(AbilitySystemComponent_GetGameplayEffectMagnitude) == 0x000048, "Wrong size on AbilitySystemComponent_GetGameplayEffectMagnitude");
static_assert(offsetof(AbilitySystemComponent_GetGameplayEffectMagnitude, Handle) == 0x000000, "Member 'AbilitySystemComponent_GetGameplayEffectMagnitude::Handle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetGameplayEffectMagnitude, Attribute) == 0x000008, "Member 'AbilitySystemComponent_GetGameplayEffectMagnitude::Attribute' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetGameplayEffectMagnitude, ReturnValue) == 0x000040, "Member 'AbilitySystemComponent_GetGameplayEffectMagnitude::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.GetGameplayTagCount
// 0x000C (0x000C - 0x0000)
struct AbilitySystemComponent_GetGameplayTagCount final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_GetGameplayTagCount) == 0x000004, "Wrong alignment on AbilitySystemComponent_GetGameplayTagCount");
static_assert(sizeof(AbilitySystemComponent_GetGameplayTagCount) == 0x00000C, "Wrong size on AbilitySystemComponent_GetGameplayTagCount");
static_assert(offsetof(AbilitySystemComponent_GetGameplayTagCount, GameplayTag) == 0x000000, "Member 'AbilitySystemComponent_GetGameplayTagCount::GameplayTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_GetGameplayTagCount, ReturnValue) == 0x000008, "Member 'AbilitySystemComponent_GetGameplayTagCount::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.GetUserAbilityActivationInhibited
// 0x0001 (0x0001 - 0x0000)
struct AbilitySystemComponent_GetUserAbilityActivationInhibited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_GetUserAbilityActivationInhibited) == 0x000001, "Wrong alignment on AbilitySystemComponent_GetUserAbilityActivationInhibited");
static_assert(sizeof(AbilitySystemComponent_GetUserAbilityActivationInhibited) == 0x000001, "Wrong size on AbilitySystemComponent_GetUserAbilityActivationInhibited");
static_assert(offsetof(AbilitySystemComponent_GetUserAbilityActivationInhibited, ReturnValue) == 0x000000, "Member 'AbilitySystemComponent_GetUserAbilityActivationInhibited::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.IsGameplayCueActive
// 0x000C (0x000C - 0x0000)
struct AbilitySystemComponent_IsGameplayCueActive final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponent_IsGameplayCueActive) == 0x000004, "Wrong alignment on AbilitySystemComponent_IsGameplayCueActive");
static_assert(sizeof(AbilitySystemComponent_IsGameplayCueActive) == 0x00000C, "Wrong size on AbilitySystemComponent_IsGameplayCueActive");
static_assert(offsetof(AbilitySystemComponent_IsGameplayCueActive, GameplayCueTag) == 0x000000, "Member 'AbilitySystemComponent_IsGameplayCueActive::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_IsGameplayCueActive, ReturnValue) == 0x000008, "Member 'AbilitySystemComponent_IsGameplayCueActive::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.MakeEffectContext
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemComponent_MakeEffectContext final
{
public:
	struct FGameplayEffectContextHandle           ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_MakeEffectContext) == 0x000008, "Wrong alignment on AbilitySystemComponent_MakeEffectContext");
static_assert(sizeof(AbilitySystemComponent_MakeEffectContext) == 0x000018, "Wrong size on AbilitySystemComponent_MakeEffectContext");
static_assert(offsetof(AbilitySystemComponent_MakeEffectContext, ReturnValue) == 0x000000, "Member 'AbilitySystemComponent_MakeEffectContext::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemComponent.MakeOutgoingSpec
// 0x0038 (0x0038 - 0x0000)
struct AbilitySystemComponent_MakeOutgoingSpec final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           Context;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponent_MakeOutgoingSpec) == 0x000008, "Wrong alignment on AbilitySystemComponent_MakeOutgoingSpec");
static_assert(sizeof(AbilitySystemComponent_MakeOutgoingSpec) == 0x000038, "Wrong size on AbilitySystemComponent_MakeOutgoingSpec");
static_assert(offsetof(AbilitySystemComponent_MakeOutgoingSpec, GameplayEffectClass) == 0x000000, "Member 'AbilitySystemComponent_MakeOutgoingSpec::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_MakeOutgoingSpec, Level) == 0x000008, "Member 'AbilitySystemComponent_MakeOutgoingSpec::Level' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_MakeOutgoingSpec, Context) == 0x000010, "Member 'AbilitySystemComponent_MakeOutgoingSpec::Context' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponent_MakeOutgoingSpec, ReturnValue) == 0x000028, "Member 'AbilitySystemComponent_MakeOutgoingSpec::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemGlobals.ServerActivatePlayerAbility
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemGlobals_ServerActivatePlayerAbility final
{
public:
	class FString                                 AbilityNameMatch;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemGlobals_ServerActivatePlayerAbility) == 0x000008, "Wrong alignment on AbilitySystemGlobals_ServerActivatePlayerAbility");
static_assert(sizeof(AbilitySystemGlobals_ServerActivatePlayerAbility) == 0x000010, "Wrong size on AbilitySystemGlobals_ServerActivatePlayerAbility");
static_assert(offsetof(AbilitySystemGlobals_ServerActivatePlayerAbility, AbilityNameMatch) == 0x000000, "Member 'AbilitySystemGlobals_ServerActivatePlayerAbility::AbilityNameMatch' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemGlobals.ServerCancelPlayerAbility
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemGlobals_ServerCancelPlayerAbility final
{
public:
	class FString                                 AbilityNameMatch;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemGlobals_ServerCancelPlayerAbility) == 0x000008, "Wrong alignment on AbilitySystemGlobals_ServerCancelPlayerAbility");
static_assert(sizeof(AbilitySystemGlobals_ServerCancelPlayerAbility) == 0x000010, "Wrong size on AbilitySystemGlobals_ServerCancelPlayerAbility");
static_assert(offsetof(AbilitySystemGlobals_ServerCancelPlayerAbility, AbilityNameMatch) == 0x000000, "Member 'AbilitySystemGlobals_ServerCancelPlayerAbility::AbilityNameMatch' has a wrong offset!");

// Function GameplayAbilities.AbilitySystemGlobals.ServerEndPlayerAbility
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemGlobals_ServerEndPlayerAbility final
{
public:
	class FString                                 AbilityNameMatch;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemGlobals_ServerEndPlayerAbility) == 0x000008, "Wrong alignment on AbilitySystemGlobals_ServerEndPlayerAbility");
static_assert(sizeof(AbilitySystemGlobals_ServerEndPlayerAbility) == 0x000010, "Wrong size on AbilitySystemGlobals_ServerEndPlayerAbility");
static_assert(offsetof(AbilitySystemGlobals_ServerEndPlayerAbility, AbilityNameMatch) == 0x000000, "Member 'AbilitySystemGlobals_ServerEndPlayerAbility::AbilityNameMatch' has a wrong offset!");

// Function GameplayAbilities.GameplayCueFunctionLibrary.AddGameplayCueOnActor
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueFunctionLibrary_AddGameplayCueOnActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCueFunctionLibrary_AddGameplayCueOnActor) == 0x000008, "Wrong alignment on GameplayCueFunctionLibrary_AddGameplayCueOnActor");
static_assert(sizeof(GameplayCueFunctionLibrary_AddGameplayCueOnActor) == 0x0000F0, "Wrong size on GameplayCueFunctionLibrary_AddGameplayCueOnActor");
static_assert(offsetof(GameplayCueFunctionLibrary_AddGameplayCueOnActor, Target) == 0x000000, "Member 'GameplayCueFunctionLibrary_AddGameplayCueOnActor::Target' has a wrong offset!");
static_assert(offsetof(GameplayCueFunctionLibrary_AddGameplayCueOnActor, GameplayCueTag) == 0x000008, "Member 'GameplayCueFunctionLibrary_AddGameplayCueOnActor::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(GameplayCueFunctionLibrary_AddGameplayCueOnActor, Parameters) == 0x000010, "Member 'GameplayCueFunctionLibrary_AddGameplayCueOnActor::Parameters' has a wrong offset!");

// Function GameplayAbilities.GameplayCueFunctionLibrary.ExecuteGameplayCueOnActor
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueFunctionLibrary_ExecuteGameplayCueOnActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCueFunctionLibrary_ExecuteGameplayCueOnActor) == 0x000008, "Wrong alignment on GameplayCueFunctionLibrary_ExecuteGameplayCueOnActor");
static_assert(sizeof(GameplayCueFunctionLibrary_ExecuteGameplayCueOnActor) == 0x0000F0, "Wrong size on GameplayCueFunctionLibrary_ExecuteGameplayCueOnActor");
static_assert(offsetof(GameplayCueFunctionLibrary_ExecuteGameplayCueOnActor, Target) == 0x000000, "Member 'GameplayCueFunctionLibrary_ExecuteGameplayCueOnActor::Target' has a wrong offset!");
static_assert(offsetof(GameplayCueFunctionLibrary_ExecuteGameplayCueOnActor, GameplayCueTag) == 0x000008, "Member 'GameplayCueFunctionLibrary_ExecuteGameplayCueOnActor::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(GameplayCueFunctionLibrary_ExecuteGameplayCueOnActor, Parameters) == 0x000010, "Member 'GameplayCueFunctionLibrary_ExecuteGameplayCueOnActor::Parameters' has a wrong offset!");

// Function GameplayAbilities.GameplayCueFunctionLibrary.ExecuteNonReplicatedGameplayCueOnActor
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueFunctionLibrary_ExecuteNonReplicatedGameplayCueOnActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCueFunctionLibrary_ExecuteNonReplicatedGameplayCueOnActor) == 0x000008, "Wrong alignment on GameplayCueFunctionLibrary_ExecuteNonReplicatedGameplayCueOnActor");
static_assert(sizeof(GameplayCueFunctionLibrary_ExecuteNonReplicatedGameplayCueOnActor) == 0x0000F0, "Wrong size on GameplayCueFunctionLibrary_ExecuteNonReplicatedGameplayCueOnActor");
static_assert(offsetof(GameplayCueFunctionLibrary_ExecuteNonReplicatedGameplayCueOnActor, Target) == 0x000000, "Member 'GameplayCueFunctionLibrary_ExecuteNonReplicatedGameplayCueOnActor::Target' has a wrong offset!");
static_assert(offsetof(GameplayCueFunctionLibrary_ExecuteNonReplicatedGameplayCueOnActor, GameplayCueTag) == 0x000008, "Member 'GameplayCueFunctionLibrary_ExecuteNonReplicatedGameplayCueOnActor::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(GameplayCueFunctionLibrary_ExecuteNonReplicatedGameplayCueOnActor, Parameters) == 0x000010, "Member 'GameplayCueFunctionLibrary_ExecuteNonReplicatedGameplayCueOnActor::Parameters' has a wrong offset!");

// Function GameplayAbilities.GameplayCueFunctionLibrary.MakeGameplayCueParametersFromHitResult
// 0x01C8 (0x01C8 - 0x0000)
struct GameplayCueFunctionLibrary_MakeGameplayCueParametersFromHitResult final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 ReturnValue;                                       // 0x00E8(0x00E0)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCueFunctionLibrary_MakeGameplayCueParametersFromHitResult) == 0x000008, "Wrong alignment on GameplayCueFunctionLibrary_MakeGameplayCueParametersFromHitResult");
static_assert(sizeof(GameplayCueFunctionLibrary_MakeGameplayCueParametersFromHitResult) == 0x0001C8, "Wrong size on GameplayCueFunctionLibrary_MakeGameplayCueParametersFromHitResult");
static_assert(offsetof(GameplayCueFunctionLibrary_MakeGameplayCueParametersFromHitResult, HitResult) == 0x000000, "Member 'GameplayCueFunctionLibrary_MakeGameplayCueParametersFromHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(GameplayCueFunctionLibrary_MakeGameplayCueParametersFromHitResult, ReturnValue) == 0x0000E8, "Member 'GameplayCueFunctionLibrary_MakeGameplayCueParametersFromHitResult::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayCueFunctionLibrary.RemoveGameplayCueOnActor
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueFunctionLibrary_RemoveGameplayCueOnActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCueFunctionLibrary_RemoveGameplayCueOnActor) == 0x000008, "Wrong alignment on GameplayCueFunctionLibrary_RemoveGameplayCueOnActor");
static_assert(sizeof(GameplayCueFunctionLibrary_RemoveGameplayCueOnActor) == 0x0000F0, "Wrong size on GameplayCueFunctionLibrary_RemoveGameplayCueOnActor");
static_assert(offsetof(GameplayCueFunctionLibrary_RemoveGameplayCueOnActor, Target) == 0x000000, "Member 'GameplayCueFunctionLibrary_RemoveGameplayCueOnActor::Target' has a wrong offset!");
static_assert(offsetof(GameplayCueFunctionLibrary_RemoveGameplayCueOnActor, GameplayCueTag) == 0x000008, "Member 'GameplayCueFunctionLibrary_RemoveGameplayCueOnActor::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(GameplayCueFunctionLibrary_RemoveGameplayCueOnActor, Parameters) == 0x000010, "Member 'GameplayCueFunctionLibrary_RemoveGameplayCueOnActor::Parameters' has a wrong offset!");

// Function GameplayAbilities.GameplayCueInterface.BlueprintCustomHandler
// 0x00E8 (0x00E8 - 0x0000)
struct GameplayCueInterface_BlueprintCustomHandler final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCueInterface_BlueprintCustomHandler) == 0x000008, "Wrong alignment on GameplayCueInterface_BlueprintCustomHandler");
static_assert(sizeof(GameplayCueInterface_BlueprintCustomHandler) == 0x0000E8, "Wrong size on GameplayCueInterface_BlueprintCustomHandler");
static_assert(offsetof(GameplayCueInterface_BlueprintCustomHandler, EventType) == 0x000000, "Member 'GameplayCueInterface_BlueprintCustomHandler::EventType' has a wrong offset!");
static_assert(offsetof(GameplayCueInterface_BlueprintCustomHandler, Parameters) == 0x000008, "Member 'GameplayCueInterface_BlueprintCustomHandler::Parameters' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Actor.K2_HandleGameplayCue
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueNotify_Actor_K2_HandleGameplayCue final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayCueEvent                             EventType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCueNotify_Actor_K2_HandleGameplayCue) == 0x000008, "Wrong alignment on GameplayCueNotify_Actor_K2_HandleGameplayCue");
static_assert(sizeof(GameplayCueNotify_Actor_K2_HandleGameplayCue) == 0x0000F0, "Wrong size on GameplayCueNotify_Actor_K2_HandleGameplayCue");
static_assert(offsetof(GameplayCueNotify_Actor_K2_HandleGameplayCue, MyTarget) == 0x000000, "Member 'GameplayCueNotify_Actor_K2_HandleGameplayCue::MyTarget' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Actor_K2_HandleGameplayCue, EventType) == 0x000008, "Member 'GameplayCueNotify_Actor_K2_HandleGameplayCue::EventType' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Actor_K2_HandleGameplayCue, Parameters) == 0x000010, "Member 'GameplayCueNotify_Actor_K2_HandleGameplayCue::Parameters' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Actor.OnActive
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueNotify_Actor_OnActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Actor_OnActive) == 0x000008, "Wrong alignment on GameplayCueNotify_Actor_OnActive");
static_assert(sizeof(GameplayCueNotify_Actor_OnActive) == 0x0000F0, "Wrong size on GameplayCueNotify_Actor_OnActive");
static_assert(offsetof(GameplayCueNotify_Actor_OnActive, MyTarget) == 0x000000, "Member 'GameplayCueNotify_Actor_OnActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Actor_OnActive, Parameters) == 0x000008, "Member 'GameplayCueNotify_Actor_OnActive::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Actor_OnActive, ReturnValue) == 0x0000E8, "Member 'GameplayCueNotify_Actor_OnActive::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Actor.OnExecute
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueNotify_Actor_OnExecute final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Actor_OnExecute) == 0x000008, "Wrong alignment on GameplayCueNotify_Actor_OnExecute");
static_assert(sizeof(GameplayCueNotify_Actor_OnExecute) == 0x0000F0, "Wrong size on GameplayCueNotify_Actor_OnExecute");
static_assert(offsetof(GameplayCueNotify_Actor_OnExecute, MyTarget) == 0x000000, "Member 'GameplayCueNotify_Actor_OnExecute::MyTarget' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Actor_OnExecute, Parameters) == 0x000008, "Member 'GameplayCueNotify_Actor_OnExecute::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Actor_OnExecute, ReturnValue) == 0x0000E8, "Member 'GameplayCueNotify_Actor_OnExecute::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Actor.OnOwnerDestroyed
// 0x0008 (0x0008 - 0x0000)
struct GameplayCueNotify_Actor_OnOwnerDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCueNotify_Actor_OnOwnerDestroyed) == 0x000008, "Wrong alignment on GameplayCueNotify_Actor_OnOwnerDestroyed");
static_assert(sizeof(GameplayCueNotify_Actor_OnOwnerDestroyed) == 0x000008, "Wrong size on GameplayCueNotify_Actor_OnOwnerDestroyed");
static_assert(offsetof(GameplayCueNotify_Actor_OnOwnerDestroyed, DestroyedActor) == 0x000000, "Member 'GameplayCueNotify_Actor_OnOwnerDestroyed::DestroyedActor' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Actor.OnRemove
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueNotify_Actor_OnRemove final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Actor_OnRemove) == 0x000008, "Wrong alignment on GameplayCueNotify_Actor_OnRemove");
static_assert(sizeof(GameplayCueNotify_Actor_OnRemove) == 0x0000F0, "Wrong size on GameplayCueNotify_Actor_OnRemove");
static_assert(offsetof(GameplayCueNotify_Actor_OnRemove, MyTarget) == 0x000000, "Member 'GameplayCueNotify_Actor_OnRemove::MyTarget' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Actor_OnRemove, Parameters) == 0x000008, "Member 'GameplayCueNotify_Actor_OnRemove::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Actor_OnRemove, ReturnValue) == 0x0000E8, "Member 'GameplayCueNotify_Actor_OnRemove::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Actor.WhileActive
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueNotify_Actor_WhileActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Actor_WhileActive) == 0x000008, "Wrong alignment on GameplayCueNotify_Actor_WhileActive");
static_assert(sizeof(GameplayCueNotify_Actor_WhileActive) == 0x0000F0, "Wrong size on GameplayCueNotify_Actor_WhileActive");
static_assert(offsetof(GameplayCueNotify_Actor_WhileActive, MyTarget) == 0x000000, "Member 'GameplayCueNotify_Actor_WhileActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Actor_WhileActive, Parameters) == 0x000008, "Member 'GameplayCueNotify_Actor_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Actor_WhileActive, ReturnValue) == 0x0000E8, "Member 'GameplayCueNotify_Actor_WhileActive::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Static.K2_HandleGameplayCue
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueNotify_Static_K2_HandleGameplayCue final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayCueEvent                             EventType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCueNotify_Static_K2_HandleGameplayCue) == 0x000008, "Wrong alignment on GameplayCueNotify_Static_K2_HandleGameplayCue");
static_assert(sizeof(GameplayCueNotify_Static_K2_HandleGameplayCue) == 0x0000F0, "Wrong size on GameplayCueNotify_Static_K2_HandleGameplayCue");
static_assert(offsetof(GameplayCueNotify_Static_K2_HandleGameplayCue, MyTarget) == 0x000000, "Member 'GameplayCueNotify_Static_K2_HandleGameplayCue::MyTarget' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Static_K2_HandleGameplayCue, EventType) == 0x000008, "Member 'GameplayCueNotify_Static_K2_HandleGameplayCue::EventType' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Static_K2_HandleGameplayCue, Parameters) == 0x000010, "Member 'GameplayCueNotify_Static_K2_HandleGameplayCue::Parameters' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Static.OnActive
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueNotify_Static_OnActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Static_OnActive) == 0x000008, "Wrong alignment on GameplayCueNotify_Static_OnActive");
static_assert(sizeof(GameplayCueNotify_Static_OnActive) == 0x0000F0, "Wrong size on GameplayCueNotify_Static_OnActive");
static_assert(offsetof(GameplayCueNotify_Static_OnActive, MyTarget) == 0x000000, "Member 'GameplayCueNotify_Static_OnActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Static_OnActive, Parameters) == 0x000008, "Member 'GameplayCueNotify_Static_OnActive::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Static_OnActive, ReturnValue) == 0x0000E8, "Member 'GameplayCueNotify_Static_OnActive::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Static.OnExecute
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueNotify_Static_OnExecute final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Static_OnExecute) == 0x000008, "Wrong alignment on GameplayCueNotify_Static_OnExecute");
static_assert(sizeof(GameplayCueNotify_Static_OnExecute) == 0x0000F0, "Wrong size on GameplayCueNotify_Static_OnExecute");
static_assert(offsetof(GameplayCueNotify_Static_OnExecute, MyTarget) == 0x000000, "Member 'GameplayCueNotify_Static_OnExecute::MyTarget' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Static_OnExecute, Parameters) == 0x000008, "Member 'GameplayCueNotify_Static_OnExecute::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Static_OnExecute, ReturnValue) == 0x0000E8, "Member 'GameplayCueNotify_Static_OnExecute::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Static.OnRemove
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueNotify_Static_OnRemove final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Static_OnRemove) == 0x000008, "Wrong alignment on GameplayCueNotify_Static_OnRemove");
static_assert(sizeof(GameplayCueNotify_Static_OnRemove) == 0x0000F0, "Wrong size on GameplayCueNotify_Static_OnRemove");
static_assert(offsetof(GameplayCueNotify_Static_OnRemove, MyTarget) == 0x000000, "Member 'GameplayCueNotify_Static_OnRemove::MyTarget' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Static_OnRemove, Parameters) == 0x000008, "Member 'GameplayCueNotify_Static_OnRemove::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Static_OnRemove, ReturnValue) == 0x0000E8, "Member 'GameplayCueNotify_Static_OnRemove::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Static.WhileActive
// 0x00F0 (0x00F0 - 0x0000)
struct GameplayCueNotify_Static_WhileActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Static_WhileActive) == 0x000008, "Wrong alignment on GameplayCueNotify_Static_WhileActive");
static_assert(sizeof(GameplayCueNotify_Static_WhileActive) == 0x0000F0, "Wrong size on GameplayCueNotify_Static_WhileActive");
static_assert(offsetof(GameplayCueNotify_Static_WhileActive, MyTarget) == 0x000000, "Member 'GameplayCueNotify_Static_WhileActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Static_WhileActive, Parameters) == 0x000008, "Member 'GameplayCueNotify_Static_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Static_WhileActive, ReturnValue) == 0x0000E8, "Member 'GameplayCueNotify_Static_WhileActive::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Burst.OnBurst
// 0x0148 (0x0148 - 0x0000)
struct GameplayCueNotify_Burst_OnBurst final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayCueNotify_SpawnResult         SpawnResults;                                      // 0x00E8(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedCulling;                                       // 0x0140(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Burst_OnBurst) == 0x000008, "Wrong alignment on GameplayCueNotify_Burst_OnBurst");
static_assert(sizeof(GameplayCueNotify_Burst_OnBurst) == 0x000148, "Wrong size on GameplayCueNotify_Burst_OnBurst");
static_assert(offsetof(GameplayCueNotify_Burst_OnBurst, Target) == 0x000000, "Member 'GameplayCueNotify_Burst_OnBurst::Target' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Burst_OnBurst, Parameters) == 0x000008, "Member 'GameplayCueNotify_Burst_OnBurst::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Burst_OnBurst, SpawnResults) == 0x0000E8, "Member 'GameplayCueNotify_Burst_OnBurst::SpawnResults' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Burst_OnBurst, NeedCulling) == 0x000140, "Member 'GameplayCueNotify_Burst_OnBurst::NeedCulling' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_BurstLatent.OnBurst
// 0x0148 (0x0148 - 0x0000)
struct GameplayCueNotify_BurstLatent_OnBurst final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayCueNotify_SpawnResult         SpawnResults;                                      // 0x00E8(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedCulling;                                       // 0x0140(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_BurstLatent_OnBurst) == 0x000008, "Wrong alignment on GameplayCueNotify_BurstLatent_OnBurst");
static_assert(sizeof(GameplayCueNotify_BurstLatent_OnBurst) == 0x000148, "Wrong size on GameplayCueNotify_BurstLatent_OnBurst");
static_assert(offsetof(GameplayCueNotify_BurstLatent_OnBurst, Target) == 0x000000, "Member 'GameplayCueNotify_BurstLatent_OnBurst::Target' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_BurstLatent_OnBurst, Parameters) == 0x000008, "Member 'GameplayCueNotify_BurstLatent_OnBurst::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_BurstLatent_OnBurst, SpawnResults) == 0x0000E8, "Member 'GameplayCueNotify_BurstLatent_OnBurst::SpawnResults' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_BurstLatent_OnBurst, NeedCulling) == 0x000140, "Member 'GameplayCueNotify_BurstLatent_OnBurst::NeedCulling' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Looping.OnApplication
// 0x0148 (0x0148 - 0x0000)
struct GameplayCueNotify_Looping_OnApplication final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayCueNotify_SpawnResult         SpawnResults;                                      // 0x00E8(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedCulling;                                       // 0x0140(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Looping_OnApplication) == 0x000008, "Wrong alignment on GameplayCueNotify_Looping_OnApplication");
static_assert(sizeof(GameplayCueNotify_Looping_OnApplication) == 0x000148, "Wrong size on GameplayCueNotify_Looping_OnApplication");
static_assert(offsetof(GameplayCueNotify_Looping_OnApplication, Target) == 0x000000, "Member 'GameplayCueNotify_Looping_OnApplication::Target' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnApplication, Parameters) == 0x000008, "Member 'GameplayCueNotify_Looping_OnApplication::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnApplication, SpawnResults) == 0x0000E8, "Member 'GameplayCueNotify_Looping_OnApplication::SpawnResults' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnApplication, NeedCulling) == 0x000140, "Member 'GameplayCueNotify_Looping_OnApplication::NeedCulling' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Looping.OnLoopingStart
// 0x0148 (0x0148 - 0x0000)
struct GameplayCueNotify_Looping_OnLoopingStart final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayCueNotify_SpawnResult         SpawnResults;                                      // 0x00E8(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedCulling;                                       // 0x0140(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Looping_OnLoopingStart) == 0x000008, "Wrong alignment on GameplayCueNotify_Looping_OnLoopingStart");
static_assert(sizeof(GameplayCueNotify_Looping_OnLoopingStart) == 0x000148, "Wrong size on GameplayCueNotify_Looping_OnLoopingStart");
static_assert(offsetof(GameplayCueNotify_Looping_OnLoopingStart, Target) == 0x000000, "Member 'GameplayCueNotify_Looping_OnLoopingStart::Target' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnLoopingStart, Parameters) == 0x000008, "Member 'GameplayCueNotify_Looping_OnLoopingStart::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnLoopingStart, SpawnResults) == 0x0000E8, "Member 'GameplayCueNotify_Looping_OnLoopingStart::SpawnResults' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnLoopingStart, NeedCulling) == 0x000140, "Member 'GameplayCueNotify_Looping_OnLoopingStart::NeedCulling' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Looping.OnRecurring
// 0x0148 (0x0148 - 0x0000)
struct GameplayCueNotify_Looping_OnRecurring final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayCueNotify_SpawnResult         SpawnResults;                                      // 0x00E8(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedCulling;                                       // 0x0140(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Looping_OnRecurring) == 0x000008, "Wrong alignment on GameplayCueNotify_Looping_OnRecurring");
static_assert(sizeof(GameplayCueNotify_Looping_OnRecurring) == 0x000148, "Wrong size on GameplayCueNotify_Looping_OnRecurring");
static_assert(offsetof(GameplayCueNotify_Looping_OnRecurring, Target) == 0x000000, "Member 'GameplayCueNotify_Looping_OnRecurring::Target' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnRecurring, Parameters) == 0x000008, "Member 'GameplayCueNotify_Looping_OnRecurring::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnRecurring, SpawnResults) == 0x0000E8, "Member 'GameplayCueNotify_Looping_OnRecurring::SpawnResults' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnRecurring, NeedCulling) == 0x000140, "Member 'GameplayCueNotify_Looping_OnRecurring::NeedCulling' has a wrong offset!");

// Function GameplayAbilities.GameplayCueNotify_Looping.OnRemoval
// 0x0148 (0x0148 - 0x0000)
struct GameplayCueNotify_Looping_OnRemoval final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayCueNotify_SpawnResult         SpawnResults;                                      // 0x00E8(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedCulling;                                       // 0x0140(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCueNotify_Looping_OnRemoval) == 0x000008, "Wrong alignment on GameplayCueNotify_Looping_OnRemoval");
static_assert(sizeof(GameplayCueNotify_Looping_OnRemoval) == 0x000148, "Wrong size on GameplayCueNotify_Looping_OnRemoval");
static_assert(offsetof(GameplayCueNotify_Looping_OnRemoval, Target) == 0x000000, "Member 'GameplayCueNotify_Looping_OnRemoval::Target' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnRemoval, Parameters) == 0x000008, "Member 'GameplayCueNotify_Looping_OnRemoval::Parameters' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnRemoval, SpawnResults) == 0x0000E8, "Member 'GameplayCueNotify_Looping_OnRemoval::SpawnResults' has a wrong offset!");
static_assert(offsetof(GameplayCueNotify_Looping_OnRemoval, NeedCulling) == 0x000140, "Member 'GameplayCueNotify_Looping_OnRemoval::NeedCulling' has a wrong offset!");

// Function GameplayAbilities.GameplayEffect.OnEffectAdded
// 0x0010 (0x0010 - 0x0000)
struct GameplayEffect_OnEffectAdded final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Source;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayEffect_OnEffectAdded) == 0x000008, "Wrong alignment on GameplayEffect_OnEffectAdded");
static_assert(sizeof(GameplayEffect_OnEffectAdded) == 0x000010, "Wrong size on GameplayEffect_OnEffectAdded");
static_assert(offsetof(GameplayEffect_OnEffectAdded, Target) == 0x000000, "Member 'GameplayEffect_OnEffectAdded::Target' has a wrong offset!");
static_assert(offsetof(GameplayEffect_OnEffectAdded, Source) == 0x000008, "Member 'GameplayEffect_OnEffectAdded::Source' has a wrong offset!");

// Function GameplayAbilities.GameplayEffect.OnEffectRemoved
// 0x0030 (0x0030 - 0x0000)
struct GameplayEffect_OnEffectRemoved final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Source;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectRemovalInfo             RemovalInfo;                                       // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayEffect_OnEffectRemoved) == 0x000008, "Wrong alignment on GameplayEffect_OnEffectRemoved");
static_assert(sizeof(GameplayEffect_OnEffectRemoved) == 0x000030, "Wrong size on GameplayEffect_OnEffectRemoved");
static_assert(offsetof(GameplayEffect_OnEffectRemoved, Target) == 0x000000, "Member 'GameplayEffect_OnEffectRemoved::Target' has a wrong offset!");
static_assert(offsetof(GameplayEffect_OnEffectRemoved, Source) == 0x000008, "Member 'GameplayEffect_OnEffectRemoved::Source' has a wrong offset!");
static_assert(offsetof(GameplayEffect_OnEffectRemoved, RemovalInfo) == 0x000010, "Member 'GameplayEffect_OnEffectRemoved::RemovalInfo' has a wrong offset!");

// Function GameplayAbilities.GameplayEffect.OnStackChanged
// 0x0018 (0x0018 - 0x0000)
struct GameplayEffect_OnStackChanged final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Source;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewStackCount;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousStackCount;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayEffect_OnStackChanged) == 0x000008, "Wrong alignment on GameplayEffect_OnStackChanged");
static_assert(sizeof(GameplayEffect_OnStackChanged) == 0x000018, "Wrong size on GameplayEffect_OnStackChanged");
static_assert(offsetof(GameplayEffect_OnStackChanged, Target) == 0x000000, "Member 'GameplayEffect_OnStackChanged::Target' has a wrong offset!");
static_assert(offsetof(GameplayEffect_OnStackChanged, Source) == 0x000008, "Member 'GameplayEffect_OnStackChanged::Source' has a wrong offset!");
static_assert(offsetof(GameplayEffect_OnStackChanged, NewStackCount) == 0x000010, "Member 'GameplayEffect_OnStackChanged::NewStackCount' has a wrong offset!");
static_assert(offsetof(GameplayEffect_OnStackChanged, PreviousStackCount) == 0x000014, "Member 'GameplayEffect_OnStackChanged::PreviousStackCount' has a wrong offset!");

// Function GameplayAbilities.GameplayEffect.OnTimeChanged
// 0x0018 (0x0018 - 0x0000)
struct GameplayEffect_OnTimeChanged final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Source;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewStartTime;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewDuration;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayEffect_OnTimeChanged) == 0x000008, "Wrong alignment on GameplayEffect_OnTimeChanged");
static_assert(sizeof(GameplayEffect_OnTimeChanged) == 0x000018, "Wrong size on GameplayEffect_OnTimeChanged");
static_assert(offsetof(GameplayEffect_OnTimeChanged, Target) == 0x000000, "Member 'GameplayEffect_OnTimeChanged::Target' has a wrong offset!");
static_assert(offsetof(GameplayEffect_OnTimeChanged, Source) == 0x000008, "Member 'GameplayEffect_OnTimeChanged::Source' has a wrong offset!");
static_assert(offsetof(GameplayEffect_OnTimeChanged, NewStartTime) == 0x000010, "Member 'GameplayEffect_OnTimeChanged::NewStartTime' has a wrong offset!");
static_assert(offsetof(GameplayEffect_OnTimeChanged, NewDuration) == 0x000014, "Member 'GameplayEffect_OnTimeChanged::NewDuration' has a wrong offset!");

// Function GameplayAbilities.GameplayEffectCustomApplicationRequirement.CanApplyGameplayEffect
// 0x02B0 (0x02B0 - 0x0000)
struct GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect final
{
public:
	const class UGameplayEffect*                  GameplayEffect;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpec                    Spec;                                              // 0x0008(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                ASC;                                               // 0x02A0(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x02A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect) == 0x000008, "Wrong alignment on GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect");
static_assert(sizeof(GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect) == 0x0002B0, "Wrong size on GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect");
static_assert(offsetof(GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect, GameplayEffect) == 0x000000, "Member 'GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect::GameplayEffect' has a wrong offset!");
static_assert(offsetof(GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect, Spec) == 0x000008, "Member 'GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect::Spec' has a wrong offset!");
static_assert(offsetof(GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect, ASC) == 0x0002A0, "Member 'GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect::ASC' has a wrong offset!");
static_assert(offsetof(GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect, ReturnValue) == 0x0002A8, "Member 'GameplayEffectCustomApplicationRequirement_CanApplyGameplayEffect::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayEffectExecutionCalculation.Execute
// 0x0110 (0x0110 - 0x0000)
struct GameplayEffectExecutionCalculation_Execute final
{
public:
	struct FGameplayEffectCustomExecutionParameters ExecutionParams;                                   // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayEffectCustomExecutionOutput   OutExecutionOutput;                                // 0x00F8(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayEffectExecutionCalculation_Execute) == 0x000008, "Wrong alignment on GameplayEffectExecutionCalculation_Execute");
static_assert(sizeof(GameplayEffectExecutionCalculation_Execute) == 0x000110, "Wrong size on GameplayEffectExecutionCalculation_Execute");
static_assert(offsetof(GameplayEffectExecutionCalculation_Execute, ExecutionParams) == 0x000000, "Member 'GameplayEffectExecutionCalculation_Execute::ExecutionParams' has a wrong offset!");
static_assert(offsetof(GameplayEffectExecutionCalculation_Execute, OutExecutionOutput) == 0x0000F8, "Member 'GameplayEffectExecutionCalculation_Execute::OutExecutionOutput' has a wrong offset!");

// Function GameplayAbilities.GameplayModMagnitudeCalculation.GetSetByCallerMagnitudeByName
// 0x02A8 (0x02A8 - 0x0000)
struct GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByName final
{
public:
	struct FGameplayEffectSpec                    EffectSpec;                                        // 0x0000(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   MagnitudeName;                                     // 0x0298(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x02A0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByName) == 0x000008, "Wrong alignment on GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByName");
static_assert(sizeof(GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByName) == 0x0002A8, "Wrong size on GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByName");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByName, EffectSpec) == 0x000000, "Member 'GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByName::EffectSpec' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByName, MagnitudeName) == 0x000298, "Member 'GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByName::MagnitudeName' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByName, ReturnValue) == 0x0002A0, "Member 'GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByName::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayModMagnitudeCalculation.GetSetByCallerMagnitudeByTag
// 0x02A8 (0x02A8 - 0x0000)
struct GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByTag final
{
public:
	struct FGameplayEffectSpec                    EffectSpec;                                        // 0x0000(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0298(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x02A0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByTag) == 0x000008, "Wrong alignment on GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByTag");
static_assert(sizeof(GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByTag) == 0x0002A8, "Wrong size on GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByTag");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByTag, EffectSpec) == 0x000000, "Member 'GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByTag::EffectSpec' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByTag, Tag) == 0x000298, "Member 'GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByTag::Tag' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByTag, ReturnValue) == 0x0002A0, "Member 'GameplayModMagnitudeCalculation_GetSetByCallerMagnitudeByTag::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayModMagnitudeCalculation.GetSourceActorTags
// 0x02B8 (0x02B8 - 0x0000)
struct GameplayModMagnitudeCalculation_GetSourceActorTags final
{
public:
	struct FGameplayEffectSpec                    EffectSpec;                                        // 0x0000(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0298(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModMagnitudeCalculation_GetSourceActorTags) == 0x000008, "Wrong alignment on GameplayModMagnitudeCalculation_GetSourceActorTags");
static_assert(sizeof(GameplayModMagnitudeCalculation_GetSourceActorTags) == 0x0002B8, "Wrong size on GameplayModMagnitudeCalculation_GetSourceActorTags");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSourceActorTags, EffectSpec) == 0x000000, "Member 'GameplayModMagnitudeCalculation_GetSourceActorTags::EffectSpec' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSourceActorTags, ReturnValue) == 0x000298, "Member 'GameplayModMagnitudeCalculation_GetSourceActorTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayModMagnitudeCalculation.GetSourceAggregatedTags
// 0x02B8 (0x02B8 - 0x0000)
struct GameplayModMagnitudeCalculation_GetSourceAggregatedTags final
{
public:
	struct FGameplayEffectSpec                    EffectSpec;                                        // 0x0000(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0298(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModMagnitudeCalculation_GetSourceAggregatedTags) == 0x000008, "Wrong alignment on GameplayModMagnitudeCalculation_GetSourceAggregatedTags");
static_assert(sizeof(GameplayModMagnitudeCalculation_GetSourceAggregatedTags) == 0x0002B8, "Wrong size on GameplayModMagnitudeCalculation_GetSourceAggregatedTags");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSourceAggregatedTags, EffectSpec) == 0x000000, "Member 'GameplayModMagnitudeCalculation_GetSourceAggregatedTags::EffectSpec' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSourceAggregatedTags, ReturnValue) == 0x000298, "Member 'GameplayModMagnitudeCalculation_GetSourceAggregatedTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayModMagnitudeCalculation.GetSourceSpecTags
// 0x02B8 (0x02B8 - 0x0000)
struct GameplayModMagnitudeCalculation_GetSourceSpecTags final
{
public:
	struct FGameplayEffectSpec                    EffectSpec;                                        // 0x0000(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0298(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModMagnitudeCalculation_GetSourceSpecTags) == 0x000008, "Wrong alignment on GameplayModMagnitudeCalculation_GetSourceSpecTags");
static_assert(sizeof(GameplayModMagnitudeCalculation_GetSourceSpecTags) == 0x0002B8, "Wrong size on GameplayModMagnitudeCalculation_GetSourceSpecTags");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSourceSpecTags, EffectSpec) == 0x000000, "Member 'GameplayModMagnitudeCalculation_GetSourceSpecTags::EffectSpec' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetSourceSpecTags, ReturnValue) == 0x000298, "Member 'GameplayModMagnitudeCalculation_GetSourceSpecTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayModMagnitudeCalculation.GetTargetActorTags
// 0x02B8 (0x02B8 - 0x0000)
struct GameplayModMagnitudeCalculation_GetTargetActorTags final
{
public:
	struct FGameplayEffectSpec                    EffectSpec;                                        // 0x0000(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0298(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModMagnitudeCalculation_GetTargetActorTags) == 0x000008, "Wrong alignment on GameplayModMagnitudeCalculation_GetTargetActorTags");
static_assert(sizeof(GameplayModMagnitudeCalculation_GetTargetActorTags) == 0x0002B8, "Wrong size on GameplayModMagnitudeCalculation_GetTargetActorTags");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetTargetActorTags, EffectSpec) == 0x000000, "Member 'GameplayModMagnitudeCalculation_GetTargetActorTags::EffectSpec' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetTargetActorTags, ReturnValue) == 0x000298, "Member 'GameplayModMagnitudeCalculation_GetTargetActorTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayModMagnitudeCalculation.GetTargetAggregatedTags
// 0x02B8 (0x02B8 - 0x0000)
struct GameplayModMagnitudeCalculation_GetTargetAggregatedTags final
{
public:
	struct FGameplayEffectSpec                    EffectSpec;                                        // 0x0000(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0298(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModMagnitudeCalculation_GetTargetAggregatedTags) == 0x000008, "Wrong alignment on GameplayModMagnitudeCalculation_GetTargetAggregatedTags");
static_assert(sizeof(GameplayModMagnitudeCalculation_GetTargetAggregatedTags) == 0x0002B8, "Wrong size on GameplayModMagnitudeCalculation_GetTargetAggregatedTags");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetTargetAggregatedTags, EffectSpec) == 0x000000, "Member 'GameplayModMagnitudeCalculation_GetTargetAggregatedTags::EffectSpec' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetTargetAggregatedTags, ReturnValue) == 0x000298, "Member 'GameplayModMagnitudeCalculation_GetTargetAggregatedTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayModMagnitudeCalculation.GetTargetSpecTags
// 0x02B8 (0x02B8 - 0x0000)
struct GameplayModMagnitudeCalculation_GetTargetSpecTags final
{
public:
	struct FGameplayEffectSpec                    EffectSpec;                                        // 0x0000(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0298(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModMagnitudeCalculation_GetTargetSpecTags) == 0x000008, "Wrong alignment on GameplayModMagnitudeCalculation_GetTargetSpecTags");
static_assert(sizeof(GameplayModMagnitudeCalculation_GetTargetSpecTags) == 0x0002B8, "Wrong size on GameplayModMagnitudeCalculation_GetTargetSpecTags");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetTargetSpecTags, EffectSpec) == 0x000000, "Member 'GameplayModMagnitudeCalculation_GetTargetSpecTags::EffectSpec' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_GetTargetSpecTags, ReturnValue) == 0x000298, "Member 'GameplayModMagnitudeCalculation_GetTargetSpecTags::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayModMagnitudeCalculation.K2_GetCapturedAttributeMagnitude
// 0x0318 (0x0318 - 0x0000)
struct GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude final
{
public:
	struct FGameplayEffectSpec                    EffectSpec;                                        // 0x0000(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0298(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SourceTags;                                        // 0x02D0(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTags;                                        // 0x02F0(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0310(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude) == 0x000008, "Wrong alignment on GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude");
static_assert(sizeof(GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude) == 0x000318, "Wrong size on GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude");
static_assert(offsetof(GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude, EffectSpec) == 0x000000, "Member 'GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude::EffectSpec' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude, Attribute) == 0x000298, "Member 'GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude::Attribute' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude, SourceTags) == 0x0002D0, "Member 'GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude::SourceTags' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude, TargetTags) == 0x0002F0, "Member 'GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude::TargetTags' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude, ReturnValue) == 0x000310, "Member 'GameplayModMagnitudeCalculation_K2_GetCapturedAttributeMagnitude::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayModMagnitudeCalculation.CalculateBaseMagnitude
// 0x02A0 (0x02A0 - 0x0000)
struct GameplayModMagnitudeCalculation_CalculateBaseMagnitude final
{
public:
	struct FGameplayEffectSpec                    Spec;                                              // 0x0000(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0298(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModMagnitudeCalculation_CalculateBaseMagnitude) == 0x000008, "Wrong alignment on GameplayModMagnitudeCalculation_CalculateBaseMagnitude");
static_assert(sizeof(GameplayModMagnitudeCalculation_CalculateBaseMagnitude) == 0x0002A0, "Wrong size on GameplayModMagnitudeCalculation_CalculateBaseMagnitude");
static_assert(offsetof(GameplayModMagnitudeCalculation_CalculateBaseMagnitude, Spec) == 0x000000, "Member 'GameplayModMagnitudeCalculation_CalculateBaseMagnitude::Spec' has a wrong offset!");
static_assert(offsetof(GameplayModMagnitudeCalculation_CalculateBaseMagnitude, ReturnValue) == 0x000298, "Member 'GameplayModMagnitudeCalculation_CalculateBaseMagnitude::ReturnValue' has a wrong offset!");

// Function GameplayAbilities.GameplayTagReponseTable.TagResponseEvent
// 0x0020 (0x0020 - 0x0000)
struct GameplayTagReponseTable_TagResponseEvent final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                ASC;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayTagReponseTable_TagResponseEvent) == 0x000008, "Wrong alignment on GameplayTagReponseTable_TagResponseEvent");
static_assert(sizeof(GameplayTagReponseTable_TagResponseEvent) == 0x000020, "Wrong size on GameplayTagReponseTable_TagResponseEvent");
static_assert(offsetof(GameplayTagReponseTable_TagResponseEvent, Tag) == 0x000000, "Member 'GameplayTagReponseTable_TagResponseEvent::Tag' has a wrong offset!");
static_assert(offsetof(GameplayTagReponseTable_TagResponseEvent, NewCount) == 0x000008, "Member 'GameplayTagReponseTable_TagResponseEvent::NewCount' has a wrong offset!");
static_assert(offsetof(GameplayTagReponseTable_TagResponseEvent, ASC) == 0x000010, "Member 'GameplayTagReponseTable_TagResponseEvent::ASC' has a wrong offset!");
static_assert(offsetof(GameplayTagReponseTable_TagResponseEvent, Idx) == 0x000018, "Member 'GameplayTagReponseTable_TagResponseEvent::Idx' has a wrong offset!");

// Function GameplayAbilities.MovieSceneGameplayCueTrack.SetSequencerTrackHandler
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneGameplayCueTrack_SetSequencerTrackHandler final
{
public:
	TDelegate<void(class AActor* Target, const struct FGameplayTag& GameplayTag, struct FGameplayCueParameters& Parameters, EGameplayCueEvent Event)> InGameplayCueTrackHandler;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneGameplayCueTrack_SetSequencerTrackHandler) == 0x000004, "Wrong alignment on MovieSceneGameplayCueTrack_SetSequencerTrackHandler");
static_assert(sizeof(MovieSceneGameplayCueTrack_SetSequencerTrackHandler) == 0x000010, "Wrong size on MovieSceneGameplayCueTrack_SetSequencerTrackHandler");
static_assert(offsetof(MovieSceneGameplayCueTrack_SetSequencerTrackHandler, InGameplayCueTrackHandler) == 0x000000, "Member 'MovieSceneGameplayCueTrack_SetSequencerTrackHandler::InGameplayCueTrackHandler' has a wrong offset!");

}


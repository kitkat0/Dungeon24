#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIExtension

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "Engine_classes.hpp"
#include "UIExtension_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class UIExtension.UIExtensionSubsystem
// 0x00A0 (0x00D0 - 0x0030)
class UUIExtensionSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0xA0];                                      // 0x0030(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FUIExtensionHandle K2_RegisterExtensionAsData(const struct FGameplayTag& ExtensionPointTag, class UObject* Data, int32 Priority);
	struct FUIExtensionHandle K2_RegisterExtensionAsDataForContext(const struct FGameplayTag& ExtensionPointTag, class UObject* ContextObject, class UObject* Data, int32 Priority);
	struct FUIExtensionHandle K2_RegisterExtensionAsWidget(const struct FGameplayTag& ExtensionPointTag, TSubclassOf<class UUserWidget> WidgetClass, int32 Priority);
	struct FUIExtensionHandle K2_RegisterExtensionAsWidgetForContext(const struct FGameplayTag& ExtensionPointTag, TSubclassOf<class UUserWidget> WidgetClass, class UObject* ContextObject, int32 Priority);
	struct FUIExtensionPointHandle K2_RegisterExtensionPoint(const struct FGameplayTag& ExtensionPointTag, EUIExtensionPointMatch ExtensionPointTagMatchType, const TArray<class UClass*>& AllowedDataClasses, TDelegate<void(EUIExtensionAction Action, struct FUIExtensionRequest& ExtensionRequest)> ExtensionCallback);
	void UnregisterExtension(const struct FUIExtensionHandle& ExtensionHandle);
	void UnregisterExtensionAsWidget(const struct FGameplayTag& ExtensionPointTag, TSubclassOf<class UUserWidget> InWidgetClass);
	void UnregisterExtensionPoint(const struct FUIExtensionPointHandle& ExtensionPointHandle);
	void UnregisterExtensionsWithExceptions(const struct FGameplayTag& ExtensionPointTag, const TArray<TSubclassOf<class UUserWidget>>& Exceptions);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIExtensionSubsystem">();
	}
	static class UUIExtensionSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIExtensionSubsystem>();
	}
};
static_assert(alignof(UUIExtensionSubsystem) == 0x000008, "Wrong alignment on UUIExtensionSubsystem");
static_assert(sizeof(UUIExtensionSubsystem) == 0x0000D0, "Wrong size on UUIExtensionSubsystem");

// Class UIExtension.UIExtensionHandleFunctions
// 0x0000 (0x0028 - 0x0028)
class UUIExtensionHandleFunctions final : public UBlueprintFunctionLibrary
{
public:
	static bool IsValid(struct FUIExtensionHandle& Handle);
	static void Unregister(struct FUIExtensionHandle& Handle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIExtensionHandleFunctions">();
	}
	static class UUIExtensionHandleFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIExtensionHandleFunctions>();
	}
};
static_assert(alignof(UUIExtensionHandleFunctions) == 0x000008, "Wrong alignment on UUIExtensionHandleFunctions");
static_assert(sizeof(UUIExtensionHandleFunctions) == 0x000028, "Wrong size on UUIExtensionHandleFunctions");

// Class UIExtension.UIExtensionPointHandleFunctions
// 0x0000 (0x0028 - 0x0028)
class UUIExtensionPointHandleFunctions final : public UBlueprintFunctionLibrary
{
public:
	static bool IsValid(struct FUIExtensionPointHandle& Handle);
	static void Unregister(struct FUIExtensionPointHandle& Handle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIExtensionPointHandleFunctions">();
	}
	static class UUIExtensionPointHandleFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIExtensionPointHandleFunctions>();
	}
};
static_assert(alignof(UUIExtensionPointHandleFunctions) == 0x000008, "Wrong alignment on UUIExtensionPointHandleFunctions");
static_assert(sizeof(UUIExtensionPointHandleFunctions) == 0x000028, "Wrong size on UUIExtensionPointHandleFunctions");

// Class UIExtension.UIExtensionPointWidget
// 0x00A0 (0x02D0 - 0x0230)
class UUIExtensionPointWidget final : public UDynamicEntryBoxBase
{
public:
	struct FGameplayTag                           ExtensionPointTag;                                 // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUIExtensionPointMatch                        ExtensionPointTagMatch;                            // 0x0238(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UObject>>            DataClasses;                                       // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TDelegate<void(class UObject* DataItem)>      GetWidgetClassForData;                             // 0x0250(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(class UUserWidget* Widget, class UObject* DataItem)> ConfigureWidgetForData;                            // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_270[0x10];                                     // 0x0270(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FUIExtensionHandle, class UUserWidget*> ExtensionMapping;                                  // 0x0280(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIExtensionPointWidget">();
	}
	static class UUIExtensionPointWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIExtensionPointWidget>();
	}
};
static_assert(alignof(UUIExtensionPointWidget) == 0x000008, "Wrong alignment on UUIExtensionPointWidget");
static_assert(sizeof(UUIExtensionPointWidget) == 0x0002D0, "Wrong size on UUIExtensionPointWidget");
static_assert(offsetof(UUIExtensionPointWidget, ExtensionPointTag) == 0x000230, "Member 'UUIExtensionPointWidget::ExtensionPointTag' has a wrong offset!");
static_assert(offsetof(UUIExtensionPointWidget, ExtensionPointTagMatch) == 0x000238, "Member 'UUIExtensionPointWidget::ExtensionPointTagMatch' has a wrong offset!");
static_assert(offsetof(UUIExtensionPointWidget, DataClasses) == 0x000240, "Member 'UUIExtensionPointWidget::DataClasses' has a wrong offset!");
static_assert(offsetof(UUIExtensionPointWidget, GetWidgetClassForData) == 0x000250, "Member 'UUIExtensionPointWidget::GetWidgetClassForData' has a wrong offset!");
static_assert(offsetof(UUIExtensionPointWidget, ConfigureWidgetForData) == 0x000260, "Member 'UUIExtensionPointWidget::ConfigureWidgetForData' has a wrong offset!");
static_assert(offsetof(UUIExtensionPointWidget, ExtensionMapping) == 0x000280, "Member 'UUIExtensionPointWidget::ExtensionMapping' has a wrong offset!");

}


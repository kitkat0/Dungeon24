#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TGFBattleProtocol

#include "Basic.hpp"


namespace SDK
{

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAttributeValueOffsetValue
// NumValues: 0x0005
enum class EExcelLoaderTgfDBattleAttributeValueOffsetValue : uint8
{
	EELTDBAVOV_NOT_SET                       = 0,
	EELTDBAVOV_Weight                        = 1,
	EELTDBAVOV_Offset                        = 2,
	EELTDBAVOV_FixedValue                    = 3,
	EELTDBAVOV_MAX                           = 4,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAbillitySetOffsetValue
// NumValues: 0x0003
enum class EExcelLoaderTgfDBattleAbillitySetOffsetValue : uint8
{
	EELTDBASOV_NOT_SET                       = 0,
	EELTDBASOV_Weight                        = 1,
	EELTDBASOV_MAX                           = 2,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleGemSlotOffsetValue
// NumValues: 0x0004
enum class EExcelLoaderTgfDBattleGemSlotOffsetValue : uint8
{
	EELTDBGSOV_NOT_SET                       = 0,
	EELTDBGSOV_Weight                        = 1,
	EELTDBGSOV_FixedCount                    = 2,
	EELTDBGSOV_MAX                           = 3,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleGearSetOffsetValue
// NumValues: 0x0004
enum class EExcelLoaderTgfDBattleGearSetOffsetValue : uint8
{
	EELTDBGSOV_NOT_SET                       = 0,
	EELTDBGSOV_Weight                        = 1,
	EELTDBGSOV_FixedValue                    = 2,
	EELTDBGSOV_MAX                           = 3,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAffixAbilityRandomDataAffixTypeId
// NumValues: 0x0004
enum class EExcelLoaderTgfDBattleAffixAbilityRandomDataAffixTypeId : uint8
{
	EELTDBAARDATI_NOT_SET                    = 0,
	EELTDBAARDATI_NormalAffixId              = 11,
	EELTDBAARDATI_LegendaryAffixId           = 12,
	EELTDBAARDATI_MAX                        = 13,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAffixAbilityDataAffixTypeId
// NumValues: 0x0004
enum class EExcelLoaderTgfDBattleAffixAbilityDataAffixTypeId : uint8
{
	EELTDBAADATI_NOT_SET                     = 0,
	EELTDBAADATI_NormalAffixId               = 11,
	EELTDBAADATI_LegendaryAffixId            = 12,
	EELTDBAADATI_MAX                         = 13,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAffixAttributeRandomValueDataEffectType
// NumValues: 0x0003
enum class EExcelLoaderTgfDBattleAffixAttributeRandomValueDataEffectType : uint8
{
	EELTDBAARVDET_NOT_SET                    = 0,
	EELTDBAARVDET_Corruption                 = 1,
	EELTDBAARVDET_MAX                        = 2,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAffixDisplayDataAbilitySetValue
// NumValues: 0x0004
enum class EExcelLoaderTgfDBattleAffixDisplayDataAbilitySetValue : uint8
{
	EELTDBADDASV_NOT_SET                     = 0,
	EELTDBADDASV_Random                      = 11,
	EELTDBADDASV_Fixed                       = 12,
	EELTDBADDASV_MAX                         = 13,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAffixDisplayDataAttributeValue
// NumValues: 0x0004
enum class EExcelLoaderTgfDBattleAffixDisplayDataAttributeValue : uint8
{
	EELTDBADDAV_NOT_SET                      = 0,
	EELTDBADDAV_Random                       = 11,
	EELTDBADDAV_Fixed                        = 12,
	EELTDBADDAV_MAX                          = 13,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAffixDisplayDataAttrGearSetAffix
// NumValues: 0x0004
enum class EExcelLoaderTgfDBattleAffixDisplayDataAttrGearSetAffix : uint8
{
	EELTDBADDAGSA_NOT_SET                    = 0,
	EELTDBADDAGSA_Attribute                  = 101,
	EELTDBADDAGSA_GearSet                    = 102,
	EELTDBADDAGSA_MAX                        = 103,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAffixDisplayDataGearSetValue
// NumValues: 0x0004
enum class EExcelLoaderTgfDBattleAffixDisplayDataGearSetValue : uint8
{
	EELTDBADDGSV_NOT_SET                     = 0,
	EELTDBADDGSV_Random                      = 11,
	EELTDBADDGSV_Fixed                       = 12,
	EELTDBADDGSV_MAX                         = 13,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAffixDisplayDataData
// NumValues: 0x0007
enum class EExcelLoaderTgfDBattleAffixDisplayDataData : uint8
{
	EELTDBADDD_NOT_SET                       = 0,
	EELTDBADDD_AbilitySet                    = 101,
	EELTDBADDD_Attribute                     = 102,
	EELTDBADDD_MinorAffixDefaultRule         = 103,
	EELTDBADDD_GemSlot                       = 104,
	EELTDBADDD_GearSet                       = 105,
	EELTDBADDD_MAX                           = 106,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAffixWeightIndexType
// NumValues: 0x0006
enum class EExcelLoaderTgfDBattleAffixWeightIndexType : uint8
{
	EELTDBAWIT_NOT_SET                       = 0,
	EELTDBAWIT_AttributeType                 = 1,
	EELTDBAWIT_AffixAliasIndex               = 2,
	EELTDBAWIT_GemSlotType                   = 3,
	EELTDBAWIT_GearSetType                   = 4,
	EELTDBAWIT_MAX                           = 5,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAffixRandomRulePoolConditionType
// NumValues: 0x0005
enum class EExcelLoaderTgfDBattleAffixRandomRulePoolConditionType : uint8
{
	EELTDBARRPCT_NOT_SET                     = 0,
	EELTDBARRPCT_CorruptionType              = 1,
	EELTDBARRPCT_LevelRuleId                 = 2,
	EELTDBARRPCT_MonsterRuleId               = 3,
	EELTDBARRPCT_MAX                         = 4,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleAffixRandomRulePoolConditionCollectType
// NumValues: 0x0003
enum class EExcelLoaderTgfDBattleAffixRandomRulePoolConditionCollectType : uint8
{
	EELTDBARRPCCT_NOT_SET                    = 0,
	EELTDBARRPCCT_Corruption                 = 1,
	EELTDBARRPCCT_MAX                        = 2,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDBattleMapArgsTypeDataValue
// NumValues: 0x0005
enum class EExcelLoaderTgfDBattleMapArgsTypeDataValue : uint8
{
	EELTDBMATDV_NOT_SET                      = 0,
	EELTDBMATDV_LootLevelUp                  = 1,
	EELTDBMATDV_LootBaseUp                   = 2,
	EELTDBMATDV_LevelArgs                    = 3,
	EELTDBMATDV_MAX                          = 4,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDItemCreateInfoCreateData
// NumValues: 0x0006
enum class EExcelLoaderTgfDItemCreateInfoCreateData : uint8
{
	EELTDICICD_NOT_SET                       = 0,
	EELTDICICD_Loot                          = 11,
	EELTDICICD_Market                        = 12,
	EELTDICICD_Gm                            = 13,
	EELTDICICD_Heirloom                      = 14,
	EELTDICICD_MAX                           = 15,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDItemUseActionActionType
// NumValues: 0x0007
enum class EExcelLoaderTgfDItemUseActionActionType : uint8
{
	EELTDIUAAT_NOT_SET                       = 0,
	EELTDIUAAT_AddEnergy                     = 1,
	EELTDIUAAT_RandomPool                    = 2,
	EELTDIUAAT_RecipeId                      = 3,
	EELTDIUAAT_AddInventoryPage              = 4,
	EELTDIUAAT_SoulBound                     = 5,
	EELTDIUAAT_MAX                           = 6,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDQuestUnlockConditionItemUnlockType
// NumValues: 0x000A
enum class EExcelLoaderTgfDQuestUnlockConditionItemUnlockType : uint8
{
	EELTDQUCIUT_NOT_SET                      = 0,
	EELTDQUCIUT_PlayerLevel                  = 1,
	EELTDQUCIUT_RoleTotal                    = 2,
	EELTDQUCIUT_RankArrive                   = 3,
	EELTDQUCIUT_VipLevel                     = 4,
	EELTDQUCIUT_PreviousQuest                = 5,
	EELTDQUCIUT_StartTimepoint               = 6,
	EELTDQUCIUT_HasSpecifyRole               = 7,
	EELTDQUCIUT_AddByOutBusinessSystem       = 8,
	EELTDQUCIUT_MAX                          = 9,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfConfigDQuestAvailablePeriodTypeValue
// NumValues: 0x0007
enum class EExcelLoaderTgfConfigDQuestAvailablePeriodTypeValue : uint8
{
	EELTCDQAPTV_NOT_SET                      = 0,
	EELTCDQAPTV_SpecificPeriod               = 1,
	EELTCDQAPTV_Timedesc                     = 2,
	EELTCDQAPTV_SpecificSeasonBefore         = 3,
	EELTCDQAPTV_PackageVersion               = 4,
	EELTCDQAPTV_ResourceVersion              = 5,
	EELTCDQAPTV_MAX                          = 6,
};

// Enum TGFBattleProtocol.EExcelLoaderTgfDFunctionUnlockConditionConditionType
// NumValues: 0x0005
enum class EExcelLoaderTgfDFunctionUnlockConditionConditionType : uint8
{
	EELTDFUCCT_NOT_SET                       = 0,
	EELTDFUCCT_RoleLevel                     = 1,
	EELTDFUCCT_UnlockByOtherSystem           = 2,
	EELTDFUCCT_SeasonRoleLevel               = 3,
	EELTDFUCCT_MAX                           = 4,
};

// Enum TGFBattleProtocol.ETGFProtoAtframeworkRpcTraceSpanSpanKind
// NumValues: 0x0007
enum class ETGFProtoAtframeworkRpcTraceSpanSpanKind : uint8
{
	ETGFPARTSSK_SPAN_KIND_UNSPECIFIED        = 0,
	ETGFPARTSSK_SPAN_KIND_INTERNAL           = 1,
	ETGFPARTSSK_SPAN_KIND_SERVER             = 2,
	ETGFPARTSSK_SPAN_KIND_CLIENT             = 3,
	ETGFPARTSSK_SPAN_KIND_PRODUCER           = 4,
	ETGFPARTSSK_SPAN_KIND_CONSUMER           = 5,
	ETGFPARTSSK_SPAN_KIND_MAX                = 6,
};

// Enum TGFBattleProtocol.ETGFProtoAtframeworkAnyValueValue
// NumValues: 0x0009
enum class ETGFProtoAtframeworkAnyValueValue : uint8
{
	ETGFPAAVV_NOT_SET                        = 0,
	ETGFPAAVV_StringValue                    = 1,
	ETGFPAAVV_BoolValue                      = 2,
	ETGFPAAVV_IntValue                       = 3,
	ETGFPAAVV_DoubleValue                    = 4,
	ETGFPAAVV_ArrayValue                     = 5,
	ETGFPAAVV_KvlistValue                    = 6,
	ETGFPAAVV_BytesValue                     = 7,
	ETGFPAAVV_MAX                            = 8,
};

// Enum TGFBattleProtocol.ETGFProtoAtframeworkAttributeValueValue
// NumValues: 0x000A
enum class ETGFProtoAtframeworkAttributeValueValue : uint8
{
	ETGFPAAVV_NOT_SET                        = 0,
	ETGFPAAVV_StringValue                    = 1,
	ETGFPAAVV_BoolValue                      = 2,
	ETGFPAAVV_IntValue                       = 3,
	ETGFPAAVV_DoubleValue                    = 4,
	ETGFPAAVV_BytesValue                     = 5,
	ETGFPAAVV_BoolList                       = 7,
	ETGFPAAVV_IntList                        = 8,
	ETGFPAAVV_DoubleList                     = 9,
	ETGFPAAVV_MAX                            = 10,
};

// Enum TGFBattleProtocol.ETGFProtoAtframeworkSSMsgHeadRpcType
// NumValues: 0x0005
enum class ETGFProtoAtframeworkSSMsgHeadRpcType : uint8
{
	ETGFPASSMHRT_NOT_SET                     = 0,
	ETGFPASSMHRT_RpcRequest                  = 31,
	ETGFPASSMHRT_RpcResponse                 = 32,
	ETGFPASSMHRT_RpcStream                   = 33,
	ETGFPASSMHRT_MAX                         = 34,
};

// Enum TGFBattleProtocol.ETGFProtoAtframeworkCSMsgHeadRpcType
// NumValues: 0x0005
enum class ETGFProtoAtframeworkCSMsgHeadRpcType : uint8
{
	ETGFPACSMHRT_NOT_SET                     = 0,
	ETGFPACSMHRT_RpcRequest                  = 31,
	ETGFPACSMHRT_RpcResponse                 = 32,
	ETGFPACSMHRT_RpcStream                   = 33,
	ETGFPACSMHRT_MAX                         = 34,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDsConfigOpentelemetrySamplerCfgSamplerType
// NumValues: 0x0005
enum class ETGFProtoTgfDsConfigOpentelemetrySamplerCfgSamplerType : uint8
{
	ETGFPTDCOSCST_NOT_SET                    = 0,
	ETGFPTDCOSCST_AlwaysOn                   = 1,
	ETGFPTDCOSCST_AlwaysOff                  = 2,
	ETGFPTDCOSCST_TraceIdRatio               = 3,
	ETGFPTDCOSCST_MAX                        = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMsgOpType
// NumValues: 0x0005
enum class ETGFProtoTgfEnMsgOpType : uint8
{
	ETGFPTEMOT_EN_MSG_OP_TYPE_MIXUP          = 0,
	ETGFPTEMOT_EN_MSG_OP_TYPE_STREAM         = 1,
	ETGFPTEMOT_EN_MSG_OP_TYPE_UNARY_REQUEST  = 2,
	ETGFPTEMOT_EN_MSG_OP_TYPE_UNARY_RESPONSE = 3,
	ETGFPTEMOT_EN_MSG_OP_TYPE_MAX            = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnAccountITopLoginChannelType
// NumValues: 0x000E
enum class ETGFProtoTgfEnAccountITopLoginChannelType : uint8
{
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_INVALID = 0,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_WECHAT = 1,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_QQ = 2,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_GUEST = 3,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_FACEBOOK = 4,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_GAMECENTER = 5,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_GOOGLE = 6,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_TWITER = 9,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_GARENA = 10,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_LINE = 14,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_APPLE = 15,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_KWAI = 17,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_HMS = 23,
	ETGFPTEAITLCT_EN_AITOP_LOGIN_CHANNEL_TYPE_MAX = 24,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnAccountITopFreindChannelType
// NumValues: 0x0006
enum class ETGFProtoTgfEnAccountITopFreindChannelType : uint8
{
	ETGFPTEAITFCT_EN_AITOP_FRIEND_CHANNEL_TYPE_INVALID = 0,
	ETGFPTEAITFCT_EN_AITOP_FRIEND_CHANNEL_TYPE_WECHAT = 1,
	ETGFPTEAITFCT_EN_AITOP_FRIEND_CHANNEL_TYPE_QQ = 2,
	ETGFPTEAITFCT_EN_AITOP_FRIEND_CHANNEL_TYPE_FACEBOOK = 4,
	ETGFPTEAITFCT_EN_AITOP_FRIEND_CHANNEL_TYPE_TWITER = 9,
	ETGFPTEAITFCT_EN_AITOP_FRIEND_CHANNEL_TYPE_MAX = 10,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnAccountITopGroupChannelType
// NumValues: 0x0004
enum class ETGFProtoTgfEnAccountITopGroupChannelType : uint8
{
	ETGFPTEAITGCT_EN_AITOP_GROUP_CHANNEL_TYPE_INVALID = 0,
	ETGFPTEAITGCT_EN_AITOP_GROUP_CHANNEL_TYPE_WECHAT = 1,
	ETGFPTEAITGCT_EN_AITOP_GROUP_CHANNEL_TYPE_QQ = 2,
	ETGFPTEAITGCT_EN_AITOP_GROUP_CHANNEL_TYPE_MAX = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnAccountIntlLoginChannelType
// NumValues: 0x0013
enum class ETGFProtoTgfEnAccountIntlLoginChannelType : uint8
{
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_INVALID = 0,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_GUEST = 3,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_FACEBOOK = 4,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_GAMECENTER = 5,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_GOOGLE = 6,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_TWITER = 9,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_GARENA = 10,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_LINE = 14,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_APPLE = 15,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_VK = 19,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_XBOXONE = 20,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_STEAM = 21,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_EPIC = 24,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_DISCORD = 26,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_PS5 = 27,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_DMM = 30,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_SQUARE_ENIX = 32,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_SUPER_CELL = 33,
	ETGFPTEAILCT_EN_AINTL_LOGIN_CHANNEL_TYPE_MAX = 34,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnAccountIntlFreindChannelType
// NumValues: 0x0008
enum class ETGFProtoTgfEnAccountIntlFreindChannelType : uint8
{
	ETGFPTEAIFCT_EN_AINTL_FRIEND_CHANNEL_TYPE_INVALID = 0,
	ETGFPTEAIFCT_EN_AINTL_FRIEND_CHANNEL_TYPE_FACEBOOK = 4,
	ETGFPTEAIFCT_EN_AINTL_FRIEND_CHANNEL_TYPE_GARENA = 10,
	ETGFPTEAIFCT_EN_AINTL_FRIEND_CHANNEL_TYPE_LINE = 14,
	ETGFPTEAIFCT_EN_AINTL_FRIEND_CHANNEL_TYPE_VK = 19,
	ETGFPTEAIFCT_EN_AINTL_FRIEND_CHANNEL_TYPE_EPIC = 24,
	ETGFPTEAIFCT_EN_AINTL_FRIEND_CHANNEL_TYPE_DISCORD = 26,
	ETGFPTEAIFCT_EN_AINTL_FRIEND_CHANNEL_TYPE_MAX = 27,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnPlatformChannelID
// NumValues: 0x0003
enum class ETGFProtoTgfEnPlatformChannelID : uint8
{
	ETGFPTEPCID_EN_PCI_NONE                  = 0,
	ETGFPTEPCID_EN_PCI_APPLE_GAMECENTER      = 1,
	ETGFPTEPCID_EN_PCI_MAX                   = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnPlatformID
// NumValues: 0x000E
enum class ETGFProtoTgfEnPlatformID : uint8
{
	ETGFPTEPID_EN_OS_UNKNOWN                 = 0,
	ETGFPTEPID_EN_OS_WINDOWS                 = 1,
	ETGFPTEPID_EN_OS_LINUX                   = 2,
	ETGFPTEPID_EN_OS_MAC                     = 3,
	ETGFPTEPID_EN_OS_ANDROID                 = 4,
	ETGFPTEPID_EN_OS_IPHONE                  = 5,
	ETGFPTEPID_EN_OS_IPAD                    = 6,
	ETGFPTEPID_EN_OS_BLACKBERRY              = 7,
	ETGFPTEPID_EN_OS_NACL                    = 8,
	ETGFPTEPID_EN_OS_EMSCRIPTEN              = 9,
	ETGFPTEPID_EN_OS_TIZEN                   = 10,
	ETGFPTEPID_EN_OS_WINRT                   = 11,
	ETGFPTEPID_EN_OS_WP8                     = 12,
	ETGFPTEPID_EN_OS_MAX                     = 13,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnWellKnownSimulatorID
// NumValues: 0x0003
enum class ETGFProtoTgfEnWellKnownSimulatorID : uint8
{
	ETGFPTEWKSID_EN_WKS_ID_NONE              = 0,
	ETGFPTEWKSID_EN_WKS_ID_TX_GAME_ASSISTANT = 1,
	ETGFPTEWKSID_EN_WKS_ID_MAX               = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnClientTelemetryLogSeverity
// NumValues: 0x0008
enum class ETGFProtoTgfEnClientTelemetryLogSeverity : uint8
{
	ETGFPTECTLS_EN_CLIENT_TELEMETRY_LOG_SERVITY_UNSPECIFIED = 0,
	ETGFPTECTLS_EN_CLIENT_TELEMETRY_LOG_SERVITY_TRACE = 1,
	ETGFPTECTLS_EN_CLIENT_TELEMETRY_LOG_SERVITY_DEBUG = 5,
	ETGFPTECTLS_EN_CLIENT_TELEMETRY_LOG_SERVITY_INFO = 9,
	ETGFPTECTLS_EN_CLIENT_TELEMETRY_LOG_SERVITY_WARN = 13,
	ETGFPTECTLS_EN_CLIENT_TELEMETRY_LOG_SERVITY_ERROR = 17,
	ETGFPTECTLS_EN_CLIENT_TELEMETRY_LOG_SERVITY_FATAL = 21,
	ETGFPTECTLS_EN_CLIENT_TELEMETRY_LOG_SERVITY_MAX = 22,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnUserTableDataVersion
// NumValues: 0x0004
enum class ETGFProtoTgfEnUserTableDataVersion : uint8
{
	ETGFPTEUTDV_EN_USER_TABLE_DATA_VERSION_NONE = 0,
	ETGFPTEUTDV_EN_USER_TABLE_DATA_VERSION_START = 1,
	ETGFPTEUTDV_EN_USER_TABLE_DATA_VERSION_EA_CLOSE = 2,
	ETGFPTEUTDV_EN_USER_TABLE_DATA_VERSION_MAX = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnGenderType
// NumValues: 0x0004
enum class ETGFProtoTgfEnGenderType : uint8
{
	ETGFPTEGT_EN_GENDER_UNKNOWN              = 0,
	ETGFPTEGT_EN_GENDER_MALE                 = 1,
	ETGFPTEGT_EN_GENDER_FEMALE               = 2,
	ETGFPTEGT_EN_GENDER_MAX                  = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnPlayerGetInfoNeedCase
// NumValues: 0x0004
enum class ETGFProtoTgfEnPlayerGetInfoNeedCase : uint8
{
	ETGFPTEPGINC_EN_PGINC_NONE               = 0,
	ETGFPTEPGINC_EN_PGINC_RANDOM_POOL        = 17,
	ETGFPTEPGINC_EN_PGINC_GEAR_INVENTORY     = 18,
	ETGFPTEPGINC_EN_PGINC_MAX                = 19,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMessageCacheStatus
// NumValues: 0x0004
enum class ETGFProtoTgfEnMessageCacheStatus : uint8
{
	ETGFPTEMCS_EN_MESSAGE_CACHE_STATUS_UNINIT = 0,
	ETGFPTEMCS_EN_MESSAGE_CACHE_STATUS_INITTING = 1,
	ETGFPTEMCS_EN_MESSAGE_CACHE_STATUS_INITED = 2,
	ETGFPTEMCS_EN_MESSAGE_CACHE_STATUS_MAX   = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRouterObjectType
// NumValues: 0x0009
enum class ETGFProtoTgfEnRouterObjectType : uint8
{
	ETGFPTEROT_EN_ROT_INVALID                = 0,
	ETGFPTEROT_EN_ROT_PLAYER                 = 1,
	ETGFPTEROT_EN_ROT_FRIEND                 = 2,
	ETGFPTEROT_EN_ROT_GUILD                  = 3,
	ETGFPTEROT_EN_ROT_ROLE_BASIC             = 4,
	ETGFPTEROT_EN_ROT_ROLE_DETAIL            = 5,
	ETGFPTEROT_EN_ROT_USER_GLOBAL            = 6,
	ETGFPTEROT_EN_ROT_USER_MATCH             = 7,
	ETGFPTEROT_EN_ROT_MAX                    = 8,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEAccountUnregisterType
// NumValues: 0x0004
enum class ETGFProtoTgfEAccountUnregisterType : uint8
{
	ETGFPTEAUT_EN_ACCOUNT_UNREGISTER_NONE    = 0,
	ETGFPTEAUT_EN_ACCOUNT_UNREGISTER_CLEARING = 1,
	ETGFPTEAUT_EN_ACCOUNT_UNREGISTER_FINISH  = 2,
	ETGFPTEAUT_EN_ACCOUNT_UNREGISTER_MAX     = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnTeenChatStatus
// NumValues: 0x0005
enum class ETGFProtoTgfEnTeenChatStatus : uint8
{
	ETGFPTETCS_EN_TEEN_CHAT_STATUS_SHOTDOWN  = 0,
	ETGFPTETCS_EN_TEEN_CHAT_STATUS_ONLY_CHAT = 1,
	ETGFPTETCS_EN_TEEN_CHAT_STATUS_ONLY_VOICE = 2,
	ETGFPTETCS_EN_TEEN_CHAT_STATUS_OPEN      = 3,
	ETGFPTETCS_EN_TEEN_CHAT_STATUS_MAX       = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnAduitChatType
// NumValues: 0x0004
enum class ETGFProtoTgfEnAduitChatType : uint8
{
	ETGFPTEACT_EN_ADUIT_CHAT_ALL             = 0,
	ETGFPTEACT_EN_ADUIT_CHAT                 = 1,
	ETGFPTEACT_EN_ADUIT_CHAT_VOICE           = 2,
	ETGFPTEACT_EN_ADUIT_MAX                  = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfENIdipModifyItemType
// NumValues: 0x0004
enum class ETGFProtoTgfENIdipModifyItemType : uint8
{
	ETGFPTENIMIT_EN_IDIP_MODIFY_ITEM_INVALID = 0,
	ETGFPTENIMIT_EN_IDIP_MODIFY_ITEM_ADD     = 1,
	ETGFPTENIMIT_EN_IDIP_MODIFY_ITEM_SUB     = 2,
	ETGFPTENIMIT_EN_IDIP_MODIFY_ITEM_MAX     = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnFactType
// NumValues: 0x0005
enum class ETGFProtoTgfEnFactType : uint8
{
	ETGFPTEFT_EN_FACT_TYPE_NONE              = 0,
	ETGFPTEFT_EN_FACT_TYPE_LOGIN             = 11,
	ETGFPTEFT_EN_FACT_TYPE_HEARTBEAT         = 12,
	ETGFPTEFT_EN_FACT_TYPE_LOGOUT            = 13,
	ETGFPTEFT_EN_FACT_TYPE_MAX               = 14,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnInstructionType
// NumValues: 0x0009
enum class ETGFProtoTgfEnInstructionType : uint8
{
	ETGFPTEIT_EN_INSTRUCTION_TYPE_NONE       = 0,
	ETGFPTEIT_EN_INSTRUCTION_TYPE_TIPS       = 1,
	ETGFPTEIT_EN_INSTRUCTION_TYPE_LOGOUT     = 2,
	ETGFPTEIT_EN_INSTRUCTION_TYPE_OPENURL    = 3,
	ETGFPTEIT_EN_INSTRUCTION_TYPE_USERDEFINED = 4,
	ETGFPTEIT_EN_INSTRUCTION_TYPE_INCOME     = 5,
	ETGFPTEIT_EN_INSTRUCTION_TYPE_INCOME_TIPS = 6,
	ETGFPTEIT_EN_INSTRUCTION_TYPE_STOP       = 7,
	ETGFPTEIT_EN_INSTRUCTION_TYPE_MAX        = 8,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnAuthType
// NumValues: 0x0004
enum class ETGFProtoTgfEnAuthType : uint8
{
	ETGFPTEAT_EN_AUTH_TYPE_UNDEFINED         = 0,
	ETGFPTEAT_EN_AUTH_TYPE_WXOPEN            = 1,
	ETGFPTEAT_EN_AUTH_TYPE_QQOPEN            = 2,
	ETGFPTEAT_EN_AUTH_TYPE_MAX               = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMarketComingType
// NumValues: 0x0005
enum class ETGFProtoTgfEnMarketComingType : uint8
{
	ETGFPTEMCT_EN_MARKET_COMING_TYPE_INVALID = 0,
	ETGFPTEMCT_EN_MARKET_COMING_TYPE_MERCHANT = 101,
	ETGFPTEMCT_EN_MARKET_COMING_TYPE_SHOPPINGMALL = 102,
	ETGFPTEMCT_EN_MARKET_COMING_TYPE_BUY_DIRECTLY = 255,
	ETGFPTEMCT_EN_MARKET_COMING_TYPE_MAX     = 256,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnHallSwitchType
// NumValues: 0x0004
enum class ETGFProtoTgfEnHallSwitchType : uint8
{
	ETGFPTEHST_EN_HALL_SWITCH_TYPE_INVALID   = 0,
	ETGFPTEHST_EN_HALL_FORCE_SWITCH_TYPE_TO_ADVENTURER_HALL = 1,
	ETGFPTEHST_EN_HALL_FORCE_SWITCH_TYPE_TO_MITHRIL_FORCE_HALL = 2,
	ETGFPTEHST_EN_HALL_MAX                   = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMarketType
// NumValues: 0x0007
enum class ETGFProtoTgfEnMarketType : uint8
{
	ETGFPTEMT_EN_MARKET_TYPE_INVALID         = 0,
	ETGFPTEMT_EN_MARKET_TYPE_MERCHANT        = 1,
	ETGFPTEMT_EN_MARKET_TYPE_SHOPPINGMALL    = 2,
	ETGFPTEMT_EN_MARKET_TYPE_BUY_DIRECTLY    = 3,
	ETGFPTEMT_EN_MARKET_TYPE_SPECIAL         = 4,
	ETGFPTEMT_EN_MARKET_TYPE_DLC             = 5,
	ETGFPTEMT_EN_MARKET_TYPE_MAX             = 6,
};

// Enum TGFBattleProtocol.ETGFProtoTgfSCPlayerGetInfoByPageRspPageData
// NumValues: 0x0003
enum class ETGFProtoTgfSCPlayerGetInfoByPageRspPageData : uint8
{
	ETGFPTSCPGIBPRPD_NOT_SET                 = 0,
	ETGFPTSCPGIBPRPD_Tmp                     = 1,
	ETGFPTSCPGIBPRPD_MAX                     = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfSCPlayerKickoffReasonSyncKickoffType
// NumValues: 0x0003
enum class ETGFProtoTgfSCPlayerKickoffReasonSyncKickoffType : uint8
{
	ETGFPTSCPKRSKT_NOT_SET                   = 0,
	ETGFPTSCPKRSKT_BanReason                 = 11,
	ETGFPTSCPKRSKT_MAX                       = 12,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDClientSettingValValue
// NumValues: 0x0004
enum class ETGFProtoTgfDClientSettingValValue : uint8
{
	ETGFPTDCSVV_NOT_SET                      = 0,
	ETGFPTDCSVV_SingleValue                  = 1,
	ETGFPTDCSVV_MutableValue                 = 2,
	ETGFPTDCSVV_MAX                          = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDSubModuleBanCustomData
// NumValues: 0x0003
enum class ETGFProtoTgfDSubModuleBanCustomData : uint8
{
	ETGFPTDSMBCD_NOT_SET                     = 0,
	ETGFPTDSMBCD_LoginData                   = 101,
	ETGFPTDSMBCD_MAX                         = 102,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnActivityExpiredType
// NumValues: 0x0003
enum class ETGFProtoTgfEnActivityExpiredType : uint8
{
	ETGFPTEAET_EN_ACTIVITY_CENTER_EXPIRED_DEF = 0,
	ETGFPTEAET_EN_ACTIVITY_CENTER_EXPIRED_GET_ALL_REWARDS = 1,
	ETGFPTEAET_EN_ACTIVITY_CENTER_EXPIRED_MAX = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnActivityTrialChallengeStatus
// NumValues: 0x0004
enum class ETGFProtoTgfEnActivityTrialChallengeStatus : uint8
{
	ETGFPTEATCS_EN_ACTIVITY_TRIAL_CHALLENGE_NONW = 0,
	ETGFPTEATCS_EN_ACTIVITY_TRIAL_CHALLENGE_OPEN = 1,
	ETGFPTEATCS_EN_ACTIVITY_TRIAL_CHALLENGE_REWARD = 2,
	ETGFPTEATCS_EN_ACTIVITY_TRIAL_CHALLENGE_MAX = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnActivityTrialSettleTriggerType
// NumValues: 0x0005
enum class ETGFProtoTgfEnActivityTrialSettleTriggerType : uint8
{
	ETGFPTEATSTT_EN_ACTIVITY_TRIAL_SETTLE_TRIGGER_NONE = 0,
	ETGFPTEATSTT_EN_ACTIVITY_TRIAL_SETTLE_TRIGGER_NORMAL = 1,
	ETGFPTEATSTT_EN_ACTIVITY_TRIAL_SETTLE_TRIGGER_SELT_QUIT = 2,
	ETGFPTEATSTT_EN_ACTIVITY_TRIAL_SETTLE_TRIGGER_ACTIVITY_END = 3,
	ETGFPTEATSTT_EN_ACTIVITY_TRIAL_SETTLE_TRIGGER_MAX = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDUserActivityDataCustomData
// NumValues: 0x0006
enum class ETGFProtoTgfDUserActivityDataCustomData : uint8
{
	ETGFPTDUADCD_NOT_SET                     = 0,
	ETGFPTDUADCD_RandomData                  = 101,
	ETGFPTDUADCD_SteamData                   = 102,
	ETGFPTDUADCD_PassportData                = 103,
	ETGFPTDUADCD_TrialData                   = 104,
	ETGFPTDUADCD_MAX                         = 105,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnActivityType
// NumValues: 0x000C
enum class ETGFProtoTgfEnActivityType : uint8
{
	ETGFPTEAT_EN_ACTIVITY_CENTER_DEFAULT     = 0,
	ETGFPTEAT_EN_ACTIVITY_CENTER_CUMULATIVE_LOGIN = 1,
	ETGFPTEAT_EN_ACTIVITY_CENTER_COMMON_DAILY = 2,
	ETGFPTEAT_EN_ACTIVITY_CENTER_RANDOM_ITEM = 3,
	ETGFPTEAT_EN_ACTIVITY_CENTER_ADD_UP_X    = 4,
	ETGFPTEAT_EN_ACTIVITY_CENTER_PIC_TEMPLATE = 5,
	ETGFPTEAT_EN_ACTIVITY_CENTER_LEVEL_REFRESH_CONFIG = 6,
	ETGFPTEAT_EN_ACTIVITY_CENTER_ONLY_SHOW   = 7,
	ETGFPTEAT_EN_ACTIVITY_CENTER_STEAM_ACHIEVEMENT = 8,
	ETGFPTEAT_EN_ACTIVITY_CENTER_PASSPORT    = 9,
	ETGFPTEAT_EN_ACTIVITY_CENTER_IMMACULATE_TRIAL = 10,
	ETGFPTEAT_EN_ACTIVITY_CENTER_MAX         = 11,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnActivityPassportType
// NumValues: 0x0004
enum class ETGFProtoTgfEnActivityPassportType : uint8
{
	ETGFPTEAPT_EN_ACTIVITY_PASSPORT_INVALID  = 0,
	ETGFPTEAPT_EN_ACTIVITY_PASSPORT_BASIC    = 1,
	ETGFPTEAPT_EN_ACTIVITY_PASSPORT_HIGH     = 2,
	ETGFPTEAPT_EN_ACTIVITY_PASSPORT_MAX      = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleCancelForbidStatus
// NumValues: 0x0004
enum class ETGFProtoTgfEnBattleCancelForbidStatus : uint8
{
	ETGFPTEBCFS_EN_BATTLE_FORBID_STATUS_NONE = 0,
	ETGFPTEBCFS_EN_BATTLE_FORBID_STATUS_FORBID = 1,
	ETGFPTEBCFS_EN_BATTLE_FORBID_STATUS_HAS_TEAM_MEMBER_FORBID = 2,
	ETGFPTEBCFS_EN_BATTLE_FORBID_STATUS_MAX  = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleRoomStatus
// NumValues: 0x000D
enum class ETGFProtoTgfEnBattleRoomStatus : uint8
{
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_INVALID = 0,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_DS_INIT = 1,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_BAN_ROLE = 2,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_BAN_MAP = 3,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_SELECTING_MAP = 4,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_SELECTING_ROLE = 5,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_SELECTING_SKIN_WIDGET = 6,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_LOADING = 7,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_BATTLING = 8,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_FINISHED = 9,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_TIMEOUT = 10,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_CANCEL  = 11,
	ETGFPTEBRS_EN_BATTLE_ROOM_STATUS_MAX     = 12,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleReadyActionAction
// NumValues: 0x0008
enum class ETGFProtoTgfDBattleReadyActionAction : uint8
{
	ETGFPTDBRAA_NOT_SET                      = 0,
	ETGFPTDBRAA_BanRole                      = 101,
	ETGFPTDBRAA_BanMap                       = 102,
	ETGFPTDBRAA_PickMap                      = 103,
	ETGFPTDBRAA_PickRole                     = 104,
	ETGFPTDBRAA_PickSkinWidget               = 105,
	ETGFPTDBRAA_LoadingProgress              = 106,
	ETGFPTDBRAA_MAX                          = 107,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleRoomEventLogEvent
// NumValues: 0x0014
enum class ETGFProtoTgfDBattleRoomEventLogEvent : uint8
{
	ETGFPTDBRELE_NOT_SET                     = 0,
	ETGFPTDBRELE_StartDsInit                 = 107,
	ETGFPTDBRELE_DsInitFinish                = 108,
	ETGFPTDBRELE_StartBanRole                = 11,
	ETGFPTDBRELE_StartBanMap                 = 12,
	ETGFPTDBRELE_StartPickMap                = 13,
	ETGFPTDBRELE_StartPickRole               = 14,
	ETGFPTDBRELE_StartPickSkinWidget         = 15,
	ETGFPTDBRELE_StartLoading                = 16,
	ETGFPTDBRELE_StartBattling               = 17,
	ETGFPTDBRELE_Cancel                      = 18,
	ETGFPTDBRELE_GameOverSettle              = 201,
	ETGFPTDBRELE_Finish                      = 19,
	ETGFPTDBRELE_UserBanRole                 = 101,
	ETGFPTDBRELE_UserBanMap                  = 102,
	ETGFPTDBRELE_UserPickMap                 = 103,
	ETGFPTDBRELE_UserPickRole                = 104,
	ETGFPTDBRELE_UserPickSkinWidget          = 105,
	ETGFPTDBRELE_UserLoadingProgress         = 106,
	ETGFPTDBRELE_MAX                         = 202,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDGsSettleActivityDataActivityData
// NumValues: 0x0003
enum class ETGFProtoTgfDGsSettleActivityDataActivityData : uint8
{
	ETGFPTDGSADAD_NOT_SET                    = 0,
	ETGFPTDGSADAD_TrialData                  = 1,
	ETGFPTDGSADAD_MAX                        = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleAffixEffectiveLocation
// NumValues: 0x0005
enum class ETGFProtoTgfEnBattleAffixEffectiveLocation : uint8
{
	ETGFPTEBAEL_EN_BATTLE_AFFIX_EFFECTIVE_LOCATION_NONE = 0,
	ETGFPTEBAEL_EN_BATTLE_AFFIX_EFFECTIVE_LOCATION_ROLE_EQUIP = 1,
	ETGFPTEBAEL_EN_BATTLE_AFFIX_EFFECTIVE_LOCATION_ROLE_INVENTORY = 2,
	ETGFPTEBAEL_EN_BATTLE_AFFIX_EFFECTIVE_LOCATION_ROLE_HOLD = 3,
	ETGFPTEBAEL_EN_BATTLE_AFFIX_EFFECTIVE_LOCATION_MAX = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnChallengerModelType
// NumValues: 0x0003
enum class ETGFProtoTgfEnChallengerModelType : uint8
{
	ETGFPTECMT_EN_CHALLENGER_MODEL_TYPE_NOT_OPEN = 0,
	ETGFPTECMT_EN_CHALLENGER_MODEL_TYPE_OPEN = 1,
	ETGFPTECMT_EN_CHALLENGER_MODEL_TYPE_MAX  = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleAffixType
// NumValues: 0x0006
enum class ETGFProtoTgfEnBattleAffixType : uint8
{
	ETGFPTEBAT_EN_BATTLE_AFFIX_TYPE_DEFAULT  = 0,
	ETGFPTEBAT_EN_BATTLE_AFFIX_TYPE_BASIC    = 5,
	ETGFPTEBAT_EN_BATTLE_AFFIX_TYPE_MAJOR    = 10,
	ETGFPTEBAT_EN_BATTLE_AFFIX_TYPE_MINOR    = 20,
	ETGFPTEBAT_EN_BATTLE_AFFIX_TYPE_LEGENDARY = 30,
	ETGFPTEBAT_EN_BATTLE_AFFIX_TYPE_MAX      = 31,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleSettleRankStatisticsType
// NumValues: 0x0009
enum class ETGFProtoTgfEnBattleSettleRankStatisticsType : uint8
{
	ETGFPTEBSRST_EN_BATTLE_SETTLE_RANK_STATISTICS_TYPE_NONE = 0,
	ETGFPTEBSRST_EN_BATTLE_SETTLE_RANK_STATISTICS_TYPE_SECAPE_LEVEL = 1,
	ETGFPTEBSRST_EN_BATTLE_SETTLE_RANK_STATISTICS_ENTER_LEVEL = 2,
	ETGFPTEBSRST_EN_BATTLE_SETTLE_RANK_STATISTICS_TYPE_KILL_MONSTER_COUNT = 3,
	ETGFPTEBSRST_EN_BATTLE_SETTLE_RANK_STATISTICS_TYPE_KILL_ELITE_COUNT = 4,
	ETGFPTEBSRST_EN_BATTLE_SETTLE_RANK_STATISTICS_TYPE_KILL_BOSS_COUNT = 5,
	ETGFPTEBSRST_EN_BATTLE_SETTLE_RANK_STATISTICS_TYPE_KILL_PLAYER_COUNT = 6,
	ETGFPTEBSRST_EN_BATTLE_SETTLE_RANK_STATISTICS_TYPE_ALIVE_TIME = 7,
	ETGFPTEBSRST_EN_BATTLE_SETTLE_RANK_STATISTICS_MAX = 8,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnAffixCorruptionType
// NumValues: 0x0005
enum class ETGFProtoTgfEnAffixCorruptionType : uint8
{
	ETGFPTEACT_EN_AFFIX_CORRUPTION_TYPE_INVALID = 0,
	ETGFPTEACT_EN_AFFIX_CORRUPTION_TYPE_1    = 1,
	ETGFPTEACT_EN_AFFIX_CORRUPTION_TYPE_2    = 2,
	ETGFPTEACT_EN_AFFIX_CORRUPTION_TYPE_3    = 3,
	ETGFPTEACT_EN_AFFIX_CORRUPTION_TYPE_MAX  = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnAffixCorruptionGroup
// NumValues: 0x0006
enum class ETGFProtoTgfEnAffixCorruptionGroup : uint8
{
	ETGFPTEACG_EN_AFFIX_CORRUPTION_GROUP_INVALID = 0,
	ETGFPTEACG_EN_AFFIX_CORRUPTION_GROUP_ENHANCED_SINGLE = 1,
	ETGFPTEACG_EN_AFFIX_CORRUPTION_GROUP_ENHANCED_BOTH = 2,
	ETGFPTEACG_EN_AFFIX_CORRUPTION_GROUP_EPIC_SINGLE = 3,
	ETGFPTEACG_EN_AFFIX_CORRUPTION_GROUP_EPIC_BOTH = 4,
	ETGFPTEACG_EN_AFFIX_CORRUPTION_GROUP_MAX = 5,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleIntStatisticType
// NumValues: 0x000C
enum class ETGFProtoTgfEnBattleIntStatisticType : uint8
{
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_NONE = 0,
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_KILLING_TYPE = 1,
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_KILLING_ACTOR_STAT_ID = 2,
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_INTERACTING_STAT_ID = 3,
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_MOVING_AREA = 4,
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_LOOTING = 5,
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_GAMEPLAY_ABILITY = 6,
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_ACTION_TYPE = 11,
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_KILLED_NUM = 51,
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_RESURRECT_OTHER_NUM = 52,
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_DESTROYING_OBJECT = 53,
	ETGFPTEBIST_EN_BATTLE_INT_STATISTIC_TYPE_MAX = 54,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleFloatStatisticType
// NumValues: 0x0009
enum class ETGFProtoTgfEnBattleFloatStatisticType : uint8
{
	ETGFPTEBFST_EN_BATTLE_FLOAT_STATISTIC_TYPE_NONE = 0,
	ETGFPTEBFST_EN_BATTLE_FLOAT_STATISTIC_TYPE_ALIVING_START_TIME = 1,
	ETGFPTEBFST_EN_BATTLE_FLOAT_STATISTIC_TYPE_ALIVING_TOTAL_TIME = 2,
	ETGFPTEBFST_EN_BATTLE_FLOAT_STATISTIC_TYPE_CAUSED_TOTAL_DAMAGE = 3,
	ETGFPTEBFST_EN_BATTLE_FLOAT_STATISTIC_TYPE_CAUSED_TOTAL_HEAL = 4,
	ETGFPTEBFST_EN_BATTLE_FLOAT_STATISTIC_TYPE_GOT_TOTAL_DAMAGE = 5,
	ETGFPTEBFST_EN_BATTLE_FLOAT_STATISTIC_TYPE_ADDITIONAL_EXP = 6,
	ETGFPTEBFST_EN_BATTLE_FLOAT_STATISTIC_TYPE_CAUSED_PLAYER_TOTAL_DAMAGE = 7,
	ETGFPTEBFST_EN_BATTLE_FLOAT_STATISTIC_TYPE_MAX = 8,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleRelationStatisticType
// NumValues: 0x0004
enum class ETGFProtoTgfEnBattleRelationStatisticType : uint8
{
	ETGFPTEBRST_EN_BATTLE_RELATION_STATISTIC_TYPE_NONE = 0,
	ETGFPTEBRST_EN_BATTLE_RELATION_STATISTIC_TYPE_RESURRECT = 1,
	ETGFPTEBRST_EN_BATTLE_RELATION_STATISTIC_TYPE_BE_RESURRECTED = 2,
	ETGFPTEBRST_EN_BATTLE_RELATION_STATISTIC_TYPE_MAX = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleActorType
// NumValues: 0x000A
enum class ETGFProtoTgfEnBattleActorType : uint8
{
	ETGFPTEBAT_EN_BATTLE_ACTOR_TYPE_NONE     = 0,
	ETGFPTEBAT_EN_BATTLE_ACTOR_TYPE_PLAYER   = 1,
	ETGFPTEBAT_EN_BATTLE_ACTOR_TYPE_BOTPLAYER = 2,
	ETGFPTEBAT_EN_BATTLE_ACTOR_TYPE_OBSTACLE = 3,
	ETGFPTEBAT_EN_BATTLE_ACTOR_TYPE_MONSTER  = 11,
	ETGFPTEBAT_EN_BATTLE_ACTOR_TYPE_ELITE    = 12,
	ETGFPTEBAT_EN_BATTLE_ACTOR_TYPE_BOSS     = 13,
	ETGFPTEBAT_EN_BATTLE_ACTOR_TYPE_SUMMON   = 14,
	ETGFPTEBAT_EN_BATTLE_ACTOR_TYPE_CHEST    = 41,
	ETGFPTEBAT_EN_BATTLE_ACTOR_TYPE_MAX      = 42,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleMapArgsType
// NumValues: 0x0003
enum class ETGFProtoTgfEnBattleMapArgsType : uint8
{
	ETGFPTEBMAT_EN_BATTLE_MAP_ARGS_TYPE_NONE = 0,
	ETGFPTEBMAT_EN_BATTLE_MAP_ARGS_TYPE_LOOT_RATE_DOUBLE = 1,
	ETGFPTEBMAT_EN_BATTLE_MAP_ARGS_TYPE_MAX  = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnDSPlayerGameStatusType
// NumValues: 0x0005
enum class ETGFProtoTgfEnDSPlayerGameStatusType : uint8
{
	ETGFPTEDSPGST_EN_DS_PLAYER_GAME_STATUS_TYPE_UNKNOW = 0,
	ETGFPTEDSPGST_EN_DS_PLAYER_GAME_STATUS_TYPE_NO_JOIN = 1,
	ETGFPTEDSPGST_EN_DS_PLAYER_GAME_STATUS_TYPE_JOIN = 2,
	ETGFPTEDSPGST_EN_DS_PLAYER_GAME_STATUS_TYPE_GAMEOVER = 3,
	ETGFPTEDSPGST_EN_DS_PLAYER_GAME_STATUS_TYPE_MAX = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnDSPlayerActorStatusType
// NumValues: 0x000F
enum class ETGFProtoTgfEnDSPlayerActorStatusType : uint8
{
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_UNKNOW = 0,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_SELF_QUIT = 1,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_DEAD = 2,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_ESCAPE = 3,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_ALIVE = 4,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_DS_END_BUT_NOT_RECEIVE_GAME_OVER = 11,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_DS_STATUS_ERROR = 12,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_DS_STATUS_BUSINESS_ERROR = 13,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_LOBBY_SELF_QUIT = 14,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_THIS_PLAYER_NOT_FOUND_IN_DS = 15,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_KICK_OFF_AND_GAME_OVER_AT_ONCE = 16,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_LOBBY_SELF_QUIT_WHEN_BATTLE_SVR_RECOVER_ERROR = 17,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_LOBBY_SELF_QUIT_DS_GAMEOVER_FOR_IGNORE = 18,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_LOBBY_SELF_QUIT_BY_CLIENT_VERSION_CHANGE = 19,
	ETGFPTEDSPAST_EN_DS_PLAYER_ACTOR_STATUS_TYPE_MAX = 20,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnDsBattleScenesType
// NumValues: 0x0006
enum class ETGFProtoTgfEnDsBattleScenesType : uint8
{
	ETGFPTEDBST_EN_DS_BATTLE_SCENES_TYPE_INVALID = 0,
	ETGFPTEDBST_EN_DS_BATTLE_SCENES_TYPE_WAITING_ROOM = 1,
	ETGFPTEDBST_EN_DS_BATTLE_SCENES_TYPE_BATTLE_ROOM_LEVEL_ONE = 2,
	ETGFPTEDBST_EN_DS_BATTLE_SCENES_TYPE_BATTLE_ROOM_LEVEL_TWO = 3,
	ETGFPTEDBST_EN_DS_BATTLE_SCENES_TYPE_BATTLE_ROOM_LEVEL_TWO_PURPLE_DOOR = 4,
	ETGFPTEDBST_EN_DS_BATTLE_SCENES_TYPE_MAX = 5,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleGameplayEffectActiveType
// NumValues: 0x0003
enum class ETGFProtoTgfEnBattleGameplayEffectActiveType : uint8
{
	ETGFPTEBGEAT_EN_BATTLE_GAMEPLAY_EFFECT_ACTIVE_TYPE_ACTIVE = 0,
	ETGFPTEBGEAT_EN_BATTLE_GAMEPLAY_EFFECT_ACTIVE_TYPE_IN_ACTIVE = 1,
	ETGFPTEBGEAT_EN_BATTLE_GAMEPLAY_EFFECT_ACTIVE_TYPE_MAX = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleGameplayEffectSkillType
// NumValues: 0x0009
enum class ETGFProtoTgfEnBattleGameplayEffectSkillType : uint8
{
	ETGFPTEBGEST_EN_BATTLE_GAMEPLAY_EFFECT_SKILL_TYPE_NONE = 0,
	ETGFPTEBGEST_EN_BATTLE_GAMEPLAY_EFFECT_SKILL_TYPE_WEAPON = 1,
	ETGFPTEBGEST_EN_BATTLE_GAMEPLAY_EFFECT_SKILL_TYPE_SKILL = 2,
	ETGFPTEBGEST_EN_BATTLE_GAMEPLAY_EFFECT_SKILL_TYPE_ITEM = 3,
	ETGFPTEBGEST_EN_BATTLE_GAMEPLAY_EFFECT_SKILL_TYPE_LEVEL = 10,
	ETGFPTEBGEST_EN_BATTLE_GAMEPLAY_EFFECT_SKILL_TYPE_MONSTER = 11,
	ETGFPTEBGEST_EN_BATTLE_GAMEPLAY_EFFECT_SKILL_TYPE_PASSIVE = 40,
	ETGFPTEBGEST_EN_BATTLE_GAMEPLAY_EFFECT_SKILL_TYPE_COOLDOWN = 101,
	ETGFPTEBGEST_EN_BATTLE_GAMEPLAY_EFFECT_SKILL_TYPE_MAX = 102,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleGameplayPlayerSceneTag
// NumValues: 0x0003
enum class ETGFProtoTgfEnBattleGameplayPlayerSceneTag : uint8
{
	ETGFPTEBGPST_EN_BATTLE_GAMEPLAY_PLAYER_SCENE_TAG_DEFAULT = 0,
	ETGFPTEBGPST_EN_BATTLE_GAMEPLAY_PLAYER_SCENE_TAG_SHADOW = 1,
	ETGFPTEBGPST_EN_BATTLE_GAMEPLAY_PLAYER_SCENE_TAG_MAX = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAttributeValueOffsetValue
// NumValues: 0x0005
enum class ETGFProtoTgfDBattleAttributeValueOffsetValue : uint8
{
	ETGFPTDBAVOV_NOT_SET                     = 0,
	ETGFPTDBAVOV_Weight                      = 1,
	ETGFPTDBAVOV_Offset                      = 2,
	ETGFPTDBAVOV_FixedValue                  = 3,
	ETGFPTDBAVOV_MAX                         = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAbillitySetOffsetValue
// NumValues: 0x0003
enum class ETGFProtoTgfDBattleAbillitySetOffsetValue : uint8
{
	ETGFPTDBASOV_NOT_SET                     = 0,
	ETGFPTDBASOV_Weight                      = 1,
	ETGFPTDBASOV_MAX                         = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleGemSlotOffsetValue
// NumValues: 0x0004
enum class ETGFProtoTgfDBattleGemSlotOffsetValue : uint8
{
	ETGFPTDBGSOV_NOT_SET                     = 0,
	ETGFPTDBGSOV_Weight                      = 1,
	ETGFPTDBGSOV_FixedCount                  = 2,
	ETGFPTDBGSOV_MAX                         = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleGearSetOffsetValue
// NumValues: 0x0004
enum class ETGFProtoTgfDBattleGearSetOffsetValue : uint8
{
	ETGFPTDBGSOV_NOT_SET                     = 0,
	ETGFPTDBGSOV_Weight                      = 1,
	ETGFPTDBGSOV_FixedValue                  = 2,
	ETGFPTDBGSOV_MAX                         = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAffixAbilityRandomDataAffixTypeId
// NumValues: 0x0004
enum class ETGFProtoTgfDBattleAffixAbilityRandomDataAffixTypeId : uint8
{
	ETGFPTDBAARDATI_NOT_SET                  = 0,
	ETGFPTDBAARDATI_NormalAffixId            = 11,
	ETGFPTDBAARDATI_LegendaryAffixId         = 12,
	ETGFPTDBAARDATI_MAX                      = 13,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAffixAbilityDataAffixTypeId
// NumValues: 0x0004
enum class ETGFProtoTgfDBattleAffixAbilityDataAffixTypeId : uint8
{
	ETGFPTDBAADATI_NOT_SET                   = 0,
	ETGFPTDBAADATI_NormalAffixId             = 11,
	ETGFPTDBAADATI_LegendaryAffixId          = 12,
	ETGFPTDBAADATI_MAX                       = 13,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAffixAttributeRandomValueDataEffectType
// NumValues: 0x0003
enum class ETGFProtoTgfDBattleAffixAttributeRandomValueDataEffectType : uint8
{
	ETGFPTDBAARVDET_NOT_SET                  = 0,
	ETGFPTDBAARVDET_Corruption               = 1,
	ETGFPTDBAARVDET_MAX                      = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAffixDisplayDataAbilitySetValue
// NumValues: 0x0004
enum class ETGFProtoTgfDBattleAffixDisplayDataAbilitySetValue : uint8
{
	ETGFPTDBADDASV_NOT_SET                   = 0,
	ETGFPTDBADDASV_Random                    = 11,
	ETGFPTDBADDASV_Fixed                     = 12,
	ETGFPTDBADDASV_MAX                       = 13,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAffixDisplayDataAttributeValue
// NumValues: 0x0004
enum class ETGFProtoTgfDBattleAffixDisplayDataAttributeValue : uint8
{
	ETGFPTDBADDAV_NOT_SET                    = 0,
	ETGFPTDBADDAV_Random                     = 11,
	ETGFPTDBADDAV_Fixed                      = 12,
	ETGFPTDBADDAV_MAX                        = 13,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAffixDisplayDataAttrGearSetAffix
// NumValues: 0x0004
enum class ETGFProtoTgfDBattleAffixDisplayDataAttrGearSetAffix : uint8
{
	ETGFPTDBADDAGSA_NOT_SET                  = 0,
	ETGFPTDBADDAGSA_Attribute                = 101,
	ETGFPTDBADDAGSA_GearSet                  = 102,
	ETGFPTDBADDAGSA_MAX                      = 103,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAffixDisplayDataGearSetValue
// NumValues: 0x0004
enum class ETGFProtoTgfDBattleAffixDisplayDataGearSetValue : uint8
{
	ETGFPTDBADDGSV_NOT_SET                   = 0,
	ETGFPTDBADDGSV_Random                    = 11,
	ETGFPTDBADDGSV_Fixed                     = 12,
	ETGFPTDBADDGSV_MAX                       = 13,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAffixDisplayDataData
// NumValues: 0x0007
enum class ETGFProtoTgfDBattleAffixDisplayDataData : uint8
{
	ETGFPTDBADDD_NOT_SET                     = 0,
	ETGFPTDBADDD_AbilitySet                  = 101,
	ETGFPTDBADDD_Attribute                   = 102,
	ETGFPTDBADDD_MinorAffixDefaultRule       = 103,
	ETGFPTDBADDD_GemSlot                     = 104,
	ETGFPTDBADDD_GearSet                     = 105,
	ETGFPTDBADDD_MAX                         = 106,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAffixWeightIndexType
// NumValues: 0x0006
enum class ETGFProtoTgfDBattleAffixWeightIndexType : uint8
{
	ETGFPTDBAWIT_NOT_SET                     = 0,
	ETGFPTDBAWIT_AttributeType               = 1,
	ETGFPTDBAWIT_AffixAliasIndex             = 2,
	ETGFPTDBAWIT_GemSlotType                 = 3,
	ETGFPTDBAWIT_GearSetType                 = 4,
	ETGFPTDBAWIT_MAX                         = 5,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAffixRandomRulePoolConditionType
// NumValues: 0x0005
enum class ETGFProtoTgfDBattleAffixRandomRulePoolConditionType : uint8
{
	ETGFPTDBARRPCT_NOT_SET                   = 0,
	ETGFPTDBARRPCT_CorruptionType            = 1,
	ETGFPTDBARRPCT_LevelRuleId               = 2,
	ETGFPTDBARRPCT_MonsterRuleId             = 3,
	ETGFPTDBARRPCT_MAX                       = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleAffixRandomRulePoolConditionCollectType
// NumValues: 0x0003
enum class ETGFProtoTgfDBattleAffixRandomRulePoolConditionCollectType : uint8
{
	ETGFPTDBARRPCCT_NOT_SET                  = 0,
	ETGFPTDBARRPCCT_Corruption               = 1,
	ETGFPTDBARRPCCT_MAX                      = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDBattleMapArgsTypeDataValue
// NumValues: 0x0005
enum class ETGFProtoTgfDBattleMapArgsTypeDataValue : uint8
{
	ETGFPTDBMATDV_NOT_SET                    = 0,
	ETGFPTDBMATDV_LootLevelUp                = 1,
	ETGFPTDBMATDV_LootBaseUp                 = 2,
	ETGFPTDBMATDV_LevelArgs                  = 3,
	ETGFPTDBMATDV_MAX                        = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleExitReason
// NumValues: 0x0009
enum class ETGFProtoTgfEnBattleExitReason : uint8
{
	ETGFPTEBER_EN_BATTLE_EXIT_UNKNOWN        = 0,
	ETGFPTEBER_EN_BATTLE_EXIT_BATTLE_END     = 1,
	ETGFPTEBER_EN_BATTLE_EXIT_BATTLE_AUTO_FINISH = 2,
	ETGFPTEBER_EN_BATTLE_EXIT_USER_SURRENDER = 11,
	ETGFPTEBER_EN_BATTLE_EXIT_FORCE_SELF_QUIT = 12,
	ETGFPTEBER_EN_BATTLE_EXIT_FORCE_SELF_QUIT_BY_CLIENT_VERSION_CHANGE = 13,
	ETGFPTEBER_EN_BATTLE_EXIT_ROOM_DESTROYED = 101,
	ETGFPTEBER_EN_BATTLE_EXIT_USER_NOT_FOUND = 102,
	ETGFPTEBER_EN_BATTLE_EXIT_MAX            = 103,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBattleUserResultType
// NumValues: 0x0005
enum class ETGFProtoTgfEnBattleUserResultType : uint8
{
	ETGFPTEBURT_EN_BATTLE_USER_RESULT_UNKNOWN = 0,
	ETGFPTEBURT_EN_BATTLE_USER_RESULT_WIN    = 1,
	ETGFPTEBURT_EN_BATTLE_USER_RESULT_LOSE   = 2,
	ETGFPTEBURT_EN_BATTLE_USER_RESULT_TIE    = 3,
	ETGFPTEBURT_EN_BATTLE_USER_RESULT_MAX    = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnGetCacheType
// NumValues: 0x0004
enum class ETGFProtoTgfEnGetCacheType : uint8
{
	ETGFPTEGCT_EN_GET_CACHE_TYPE_NORMAL      = 0,
	ETGFPTEGCT_EN_GET_CACHE_TYPE_SUBSCRIBE   = 1,
	ETGFPTEGCT_EN_GET_CACHE_TYPE_HOT_DATA    = 2,
	ETGFPTEGCT_EN_GET_CACHE_TYPE_MAX         = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDCacheMetaMetaData
// NumValues: 0x0007
enum class ETGFProtoTgfDCacheMetaMetaData : uint8
{
	ETGFPTDCMMD_NOT_SET                      = 0,
	ETGFPTDCMMD_UserMeta                     = 11,
	ETGFPTDCMMD_RoleBasicMeta                = 12,
	ETGFPTDCMMD_RoleDetailMeta               = 13,
	ETGFPTDCMMD_UserGlobalMeta               = 14,
	ETGFPTDCMMD_UserMatchMeta                = 15,
	ETGFPTDCMMD_MAX                          = 16,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDCacheObjectDataObjectData
// NumValues: 0x0007
enum class ETGFProtoTgfDCacheObjectDataObjectData : uint8
{
	ETGFPTDCODOD_NOT_SET                     = 0,
	ETGFPTDCODOD_UserCache                   = 11,
	ETGFPTDCODOD_RoleBasic                   = 12,
	ETGFPTDCODOD_RoleDetail                  = 13,
	ETGFPTDCODOD_UserGlobalCache             = 24,
	ETGFPTDCODOD_UserMatch                   = 25,
	ETGFPTDCODOD_MAX                         = 26,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnChatChannelType
// NumValues: 0x0009
enum class ETGFProtoTgfEnChatChannelType : uint8
{
	ETGFPTECCT_EN_CHAT_CHANNEL_TYPE_INVALID  = 0,
	ETGFPTECCT_EN_CHAT_CHANNEL_TYPE_PUBLIC   = 1,
	ETGFPTECCT_EN_CHAT_CHANNEL_TYPE_WORLD    = 2,
	ETGFPTECCT_EN_CHAT_CHANNEL_TYPE_TEAM     = 3,
	ETGFPTECCT_EN_CHAT_CHANNEL_TYPE_PRIVATE  = 4,
	ETGFPTECCT_EN_CHAT_CHANNEL_TYPE_SYS_NOTIFY = 5,
	ETGFPTECCT_EN_CHAT_CHANNEL_TYPE_TOP_BOARD = 6,
	ETGFPTECCT_EN_CHAT_CHANNEL_TYPE_PRIVATE_ROOM = 7,
	ETGFPTECCT_EN_CHAT_CHANNEL_TYPE_MAX      = 8,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnChatMsgSendType
// NumValues: 0x0003
enum class ETGFProtoTgfEnChatMsgSendType : uint8
{
	ETGFPTECMST_EN_CHAT_MSG_NORMAL           = 0,
	ETGFPTECMST_EN_CHAT_MSG_REVOCATION       = 1,
	ETGFPTECMST_EN_CHAT_MSG_MAX              = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDChatChannelIdKeyCastType
// NumValues: 0x0006
enum class ETGFProtoTgfDChatChannelIdKeyCastType : uint8
{
	ETGFPTDCCIKCT_NOT_SET                    = 0,
	ETGFPTDCCIKCT_BroadcastWorld             = 4,
	ETGFPTDCCIKCT_BroadcastZone              = 5,
	ETGFPTDCCIKCT_UnicastInstanceId          = 6,
	ETGFPTDCCIKCT_BroadcastWorldPartition    = 7,
	ETGFPTDCCIKCT_MAX                        = 8,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDChatMessageDetailCommand
// NumValues: 0x000A
enum class ETGFProtoTgfDChatMessageDetailCommand : uint8
{
	ETGFPTDCMDC_NOT_SET                      = 0,
	ETGFPTDCMDC_UpdateCustomData             = 1,
	ETGFPTDCMDC_Text                         = 2,
	ETGFPTDCMDC_ResetLock                    = 3,
	ETGFPTDCMDC_TeamMember                   = 101,
	ETGFPTDCMDC_TeamAction                   = 102,
	ETGFPTDCMDC_SysNotify                    = 103,
	ETGFPTDCMDC_TopBoard                     = 104,
	ETGFPTDCMDC_PrivateRoomAction            = 105,
	ETGFPTDCMDC_MAX                          = 106,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDChatMessageSenderType
// NumValues: 0x0004
enum class ETGFProtoTgfDChatMessageSenderType : uint8
{
	ETGFPTDCMST_NOT_SET                      = 0,
	ETGFPTDCMST_SenderUserKey                = 3,
	ETGFPTDCMST_SenderTeamKey                = 31,
	ETGFPTDCMST_MAX                          = 32,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnBusinessPingType
// NumValues: 0x0004
enum class ETGFProtoTgfEnBusinessPingType : uint8
{
	ETGFPTEBPT_EN_BUSINESS_PING_INVALID      = 0,
	ETGFPTEBPT_EN_BUSINESS_PING_MERCHANT     = 1,
	ETGFPTEBPT_EN_BUSINESS_PING_ACTIVITY_CENTER = 2,
	ETGFPTEBPT_EN_BUSINESS_PING_MAX          = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnNetworkLatencyType
// NumValues: 0x0005
enum class ETGFProtoTgfEnNetworkLatencyType : uint8
{
	ETGFPTENLT_EN_NETWORK_LATENCY_INVALID    = 0,
	ETGFPTENLT_EN_NETWORK_LATENCY_IN_HALL    = 1,
	ETGFPTENLT_EN_NETWORK_LATENCY_ENTER      = 2,
	ETGFPTENLT_EN_NETWORK_LATENCY_IN_BATTLE  = 3,
	ETGFPTENLT_EN_NETWORK_LATENCY_MAX        = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnModuleType
// NumValues: 0x0004
enum class ETGFProtoTgfEnModuleType : uint8
{
	ETGFPTEMT_EN_MODULE_INVALID              = 0,
	ETGFPTEMT_EN_MODULE_TRADE                = 1,
	ETGFPTEMT_EN_MODULE_CRAFT                = 2,
	ETGFPTEMT_EN_MODULE_MAX                  = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDSettleInterFaceType
// NumValues: 0x0006
enum class ETGFProtoTgfDSettleInterFaceType : uint8
{
	ETGFPTDSIFT_EN_SETTLE_INTERFACE_TYPE_NONE = 0,
	ETGFPTDSIFT_EN_SETTLE_INTERFACE_TYPE_PVE = 1,
	ETGFPTDSIFT_EN_SETTLE_INTERFACE_TYPE_PVP = 2,
	ETGFPTDSIFT_EN_SETTLE_INTERFACE_TYPE_BO5 = 3,
	ETGFPTDSIFT_EN_SETTLE_INTERFACE_TYPE_BO5_TRIAL = 4,
	ETGFPTDSIFT_EN_SETTLE_INTERFACE_TYPE_MAX = 5,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnFacadeType
// NumValues: 0x0006
enum class ETGFProtoTgfEnFacadeType : uint8
{
	ETGFPTEFT_EN_FACADE_TYPE_UNDEFINE        = 0,
	ETGFPTEFT_EN_FACADE_TYPE_AVATAR          = 1,
	ETGFPTEFT_EN_FACADE_TYPE_AVATAR_BORDER   = 2,
	ETGFPTEFT_EN_FACADE_TYPE_TITLE           = 3,
	ETGFPTEFT_EN_FACADE_TYPE_SKIN            = 4,
	ETGFPTEFT_EN_FACADE_TYPE_MAX             = 5,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnFacadeAccessType
// NumValues: 0x0005
enum class ETGFProtoTgfEnFacadeAccessType : uint8
{
	ETGFPTEFAT_EN_FACADE_SALES_TYPE_MARKET   = 0,
	ETGFPTEFAT_EN_FACADE_SALES_TYPE_STEAM_DLC = 1,
	ETGFPTEFAT_EN_FACADE_SALES_TYPE_ACTIVITY = 2,
	ETGFPTEFAT_EN_FACADE_SALES_TYPE_QUEST    = 3,
	ETGFPTEFAT_EN_FACADE_SALES_TYPE_MAX      = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnFacadeSuitType
// NumValues: 0x0004
enum class ETGFProtoTgfEnFacadeSuitType : uint8
{
	ETGFPTEFST_EN_FACADE_SUIT_TYPE_INVALID   = 0,
	ETGFPTEFST_EN_FACADE_SUIT_TYPE_ITEM      = 1,
	ETGFPTEFST_EN_FACADE_SUIT_TYPE_TEMPLATE  = 2,
	ETGFPTEFST_EN_FACADE_SUIT_TYPE_MAX       = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnFacadeSkinFirstSortType
// NumValues: 0x0004
enum class ETGFProtoTgfEnFacadeSkinFirstSortType : uint8
{
	ETGFPTEFSFST_EN_FACADE_SKIN_FIRST_SORT_INVALID = 0,
	ETGFPTEFSFST_EN_FACADE_SKIN_FIRST_SORT_SKIN = 1,
	ETGFPTEFSFST_EN_FACADE_SKIN_FIRST_SORT_KILL_EFFECT = 2,
	ETGFPTEFSFST_EN_FACADE_SKIN_FIRST_SORT_MAX = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnFacadeSkinSecondSortType
// NumValues: 0x0007
enum class ETGFProtoTgfEnFacadeSkinSecondSortType : uint8
{
	ETGFPTEFSSST_EN_FACADE_SKIN_SECOND_SORT_INVALID = 0,
	ETGFPTEFSSST_EN_FACADE_SKIN_SECOND_SORT_ITEM = 10,
	ETGFPTEFSSST_EN_FACADE_SKIN_SECOND_SORT_ARMOE = 20,
	ETGFPTEFSSST_EN_FACADE_SKIN_SECOND_SORT_HEIRLOOM = 30,
	ETGFPTEFSSST_EN_FACADE_SKIN_SECOND_SORT_KILL_EFFECT = 40,
	ETGFPTEFSSST_EN_FACADE_SKIN_SECOND_SORT_WEAPON = 50,
	ETGFPTEFSSST_EN_FACADE_SKIN_SECOND_SORT_MAX = 51,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnSkinSlotType
// NumValues: 0x0021
enum class ETGFProtoTgfEnSkinSlotType : uint8
{
	ETGFPTESST_EN_SKIN_SLOT_TYPE_NONE        = 0,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_CLOTH_CHEST = 1,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_CLOTH_TROUSERS = 2,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_CLOTH_HELMET = 3,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_CLOTH_SHOE  = 4,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_CLOTH_GLOVE = 5,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_LEATHER_CHEST = 11,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_LEATHER_TROUSERS = 12,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_LEATHER_HELMET = 13,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_LEATHER_SHOE = 14,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_LEATHER_GLOVE = 15,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_PLATE_CHEST = 21,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_PLATE_TROUSERS = 22,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_PLATE_HELMET = 23,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_PLATE_SHOE  = 24,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_PLATE_GLOVE = 25,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_CLOAK       = 31,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_HEADDRESS   = 32,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_TORCH       = 41,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_POTION      = 51,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_SWORD       = 62,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_SHIELD      = 63,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_LONG_SWORD  = 64,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_DAGGER      = 65,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_MACE        = 66,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_HEAVY_CROSS_BOW = 81,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_STAFF       = 101,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_RELIC       = 102,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_ATTACHING_WAIST = 71,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_ATTACHING_BACK = 72,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_KILLING_EFFECT = 151,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_HEADFRAME   = 201,
	ETGFPTESST_EN_SKIN_SLOT_TYPE_MAX         = 202,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnSkinCategoryType
// NumValues: 0x0003
enum class ETGFProtoTgfEnSkinCategoryType : uint8
{
	ETGFPTESCT_EN_SKIN_CATEGORY_TYPE_NORMAL  = 0,
	ETGFPTESCT_EN_SKIN_CATEGORY_TYPE_HEIRLOOM = 1,
	ETGFPTESCT_EN_SKIN_CATEGORY_TYPE_MAX     = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDFriendEventEvent
// NumValues: 0x000D
enum class ETGFProtoTgfDFriendEventEvent : uint8
{
	ETGFPTDFEE_NOT_SET                       = 0,
	ETGFPTDFEE_AddInviter                    = 11,
	ETGFPTDFEE_RemoveInviter                 = 12,
	ETGFPTDFEE_AddInvitee                    = 13,
	ETGFPTDFEE_RemoveInvitee                 = 14,
	ETGFPTDFEE_AddFriendData                 = 17,
	ETGFPTDFEE_RemoveFriendData              = 18,
	ETGFPTDFEE_AddSteamFriendData            = 19,
	ETGFPTDFEE_RemoveSteamFriendData         = 20,
	ETGFPTDFEE_AddTogetherPlayData           = 21,
	ETGFPTDFEE_RemoveTogetherPlayData        = 22,
	ETGFPTDFEE_ClearAllData                  = 101,
	ETGFPTDFEE_MAX                           = 102,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnGearEquipSubType
// NumValues: 0x0025
enum class ETGFProtoTgfEnGearEquipSubType : uint8
{
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_NONE   = 0,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_CLOTH_CHEST = 1,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_CLOTH_TROUSERS = 2,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_CLOTH_HELMET = 3,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_CLOTH_SHOE = 4,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_CLOTH_GLOVE = 5,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_LEATHER_CHEST = 11,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_LEATHER_TROUSERS = 12,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_LEATHER_HELMET = 13,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_LEATHER_SHOE = 14,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_LEATHER_GLOVE = 15,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_PLATE_CHEST = 21,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_PLATE_TROUSERS = 22,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_PLATE_HELMET = 23,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_PLATE_SHOE = 24,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_PLATE_GLOVE = 25,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_RING   = 31,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_NECKLACE = 32,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_CONSUMABLE_ITEM = 41,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_HOLDABLE_ITEM = 42,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_THROWABLE_ITEM = 51,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_BARE_HANDS = 61,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_SWORD  = 62,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_SHIELD = 63,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_LONG_SWORD = 64,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_DAGGER = 65,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_MACE   = 66,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_HEAVY_CROSSBOW = 81,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_STAFF  = 101,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_RELIC  = 102,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_CROSSBOWBOW_AMMO = 151,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_COMMON_CHEST = 201,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_COMMON_TROUSERS = 202,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_COMMON_HELMET = 203,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_COMMON_SHOE = 204,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_COMMON_GLOVE = 205,
	ETGFPTEGEST_EN_GEAR_EQUIP_SUBTYPE_MAX    = 206,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnGearEquipmentType
// NumValues: 0x0006
enum class ETGFProtoTgfEnGearEquipmentType : uint8
{
	ETGFPTEGET_EN_GEAR_EQUIPMENT_TYPE_BASE   = 0,
	ETGFPTEGET_EN_GEAR_EQUIPMENT_TYPE_WEAPON = 1,
	ETGFPTEGET_EN_GEAR_EQUIPMENT_TYPE_ARMOR  = 2,
	ETGFPTEGET_EN_GEAR_EQUIPMENT_TYPE_WEAPON_ANIM = 3,
	ETGFPTEGET_EN_GEAR_EQUIPMENT_TYPE_GEARSET = 4,
	ETGFPTEGET_EN_GEAR_EQUIPMENT_TYPE_MAX    = 5,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnGearElement
// NumValues: 0x0007
enum class ETGFProtoTgfEnGearElement : uint8
{
	ETGFPTEGE_EN_GEAR_ELEMENT_NONE           = 0,
	ETGFPTEGE_EN_GEAR_ELEMENT_FIRE           = 1,
	ETGFPTEGE_EN_GEAR_ELEMENT_ICE            = 2,
	ETGFPTEGE_EN_GEAR_ELEMENT_THUNDER        = 3,
	ETGFPTEGE_EN_GEAR_ELEMENT_LIGHT          = 4,
	ETGFPTEGE_EN_GEAR_ELEMENT_DARK           = 5,
	ETGFPTEGE_EN_GEAR_ELEMENT_MAX            = 6,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnWeaponEquipType
// NumValues: 0x0007
enum class ETGFProtoTgfEnWeaponEquipType : uint8
{
	ETGFPTEWET_EN_WEAPON_EQUIP_TYPE_NONE     = 0,
	ETGFPTEWET_EN_WEAPON_EQUIP_TYPE_ONLYRIGHT = 1,
	ETGFPTEWET_EN_WEAPON_EQUIP_TYPE_ONLYLEFT = 2,
	ETGFPTEWET_EN_WEAPON_EQUIP_TYPE_BOTHHAND = 3,
	ETGFPTEWET_EN_WEAPON_EQUIP_TYPE_CONSUMABLE = 11,
	ETGFPTEWET_EN_WEAPON_EQUIP_TYPE_THROWABLE = 12,
	ETGFPTEWET_EN_WEAPON_EQUIP_TYPE_MAX      = 13,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnGearInlaidShapeType
// NumValues: 0x000C
enum class ETGFProtoTgfEnGearInlaidShapeType : uint8
{
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_INVALID = 0,
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_ATTACK = 1,
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_DEFEND = 2,
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_FUNCTION = 3,
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_FIRST_LEVEL = 4,
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_GEAR_SET = 5,
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_2_ATTACK = 51,
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_2_DEFEND = 52,
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_2_FUNCTION = 53,
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_2_FIRST_LEVEL = 54,
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_2_GEAR_SET = 55,
	ETGFPTEGIST_EN_GEAR_INLAID_SHAPE_TYPE_MAX = 56,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnGuildRoleType
// NumValues: 0x0005
enum class ETGFProtoTgfEnGuildRoleType : uint8
{
	ETGFPTEGRT_EN_GUILD_ROLE_TYPE_ANONYMOUS  = 0,
	ETGFPTEGRT_EN_GUILD_ROLE_TYPE_MEMBER     = 1,
	ETGFPTEGRT_EN_GUILD_ROLE_TYPE_OWNER      = 2,
	ETGFPTEGRT_EN_GUILD_ROLE_TYPE_ADMIN      = 3,
	ETGFPTEGRT_EN_GUILD_ROLE_TYPE_MAX        = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnGuildSubscribeResultType
// NumValues: 0x0006
enum class ETGFProtoTgfEnGuildSubscribeResultType : uint8
{
	ETGFPTEGSRT_EN_GUILD_SRT_NONE            = 0,
	ETGFPTEGSRT_EN_GUILD_SRT_MEMBER          = 1,
	ETGFPTEGSRT_EN_GUILD_SRT_APPLY           = 2,
	ETGFPTEGSRT_EN_GUILD_SRT_INVITATION      = 4,
	ETGFPTEGSRT_EN_GUILD_SRT_APPLY_AND_INVITATION = 6,
	ETGFPTEGSRT_EN_GUILD_SRT_MAX             = 7,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDGuildEventLogEvent
// NumValues: 0x0016
enum class ETGFProtoTgfDGuildEventLogEvent : uint8
{
	ETGFPTDGELE_NOT_SET                      = 0,
	ETGFPTDGELE_SetName                      = 11,
	ETGFPTDGELE_SetLogo                      = 12,
	ETGFPTDGELE_SetAnnouncement              = 13,
	ETGFPTDGELE_DestroyGuild                 = 14,
	ETGFPTDGELE_CreateGuild                  = 15,
	ETGFPTDGELE_SetConfigureAutoApproveApply = 21,
	ETGFPTDGELE_SetConfigurePlayerLevelLimit = 22,
	ETGFPTDGELE_AddMember                    = 31,
	ETGFPTDGELE_RemoveMember                 = 32,
	ETGFPTDGELE_SetRole                      = 33,
	ETGFPTDGELE_AddApply                     = 34,
	ETGFPTDGELE_ApproveApply                 = 35,
	ETGFPTDGELE_RejectApply                  = 36,
	ETGFPTDGELE_UpdateMember                 = 37,
	ETGFPTDGELE_AddInvitation                = 38,
	ETGFPTDGELE_ApproveInvitation            = 39,
	ETGFPTDGELE_RejectInvitation             = 40,
	ETGFPTDGELE_StartImpeachment             = 41,
	ETGFPTDGELE_FinishImpeachment            = 42,
	ETGFPTDGELE_VoteImpeachment              = 43,
	ETGFPTDGELE_MAX                          = 44,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnItemRarity
// NumValues: 0x0009
enum class ETGFProtoTgfEnItemRarity : uint8
{
	ETGFPTEIR_EN_ITEM_RARITY_NONE            = 0,
	ETGFPTEIR_EN_ITEM_RARITY_ROTTED          = 1,
	ETGFPTEIR_EN_ITEM_RARITY_NORMAL          = 2,
	ETGFPTEIR_EN_ITEM_RARITY_UNCOMMON        = 3,
	ETGFPTEIR_EN_ITEM_RARITY_ENHANCED        = 4,
	ETGFPTEIR_EN_ITEM_RARITY_EPIC            = 5,
	ETGFPTEIR_EN_ITEM_RARITY_LEGENDARY       = 6,
	ETGFPTEIR_EN_ITEM_RARITY_UNIQUE          = 7,
	ETGFPTEIR_EN_ITEM_RARITY_MAX             = 8,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnItemUeType
// NumValues: 0x000C
enum class ETGFProtoTgfEnItemUeType : uint8
{
	ETGFPTEIUT_EN_ITEM_UE_TYPE_NONE          = 0,
	ETGFPTEIUT_EN_ITEM_UE_TYPE_EQUIP_WEAPON  = 1,
	ETGFPTEIUT_EN_ITEM_UE_TYPE_EQUIP_ARMOR   = 2,
	ETGFPTEIUT_EN_ITEM_UE_TYPE_EQUIP_ACCESSORY = 3,
	ETGFPTEIUT_EN_ITEM_UE_TYPE_ITEM_CONSUMABLE = 21,
	ETGFPTEIUT_EN_ITEM_UE_TYPE_ITEM_THROWABLE = 22,
	ETGFPTEIUT_EN_ITEM_UE_TYPE_ITEM_AMMO     = 23,
	ETGFPTEIUT_EN_ITEM_UE_TYPE_ITEM_TREASURE = 41,
	ETGFPTEIUT_EN_ITEM_UE_TYPE_ITEM_LEVEL    = 42,
	ETGFPTEIUT_EN_ITEM_UE_TYPE_ITEM_GEM      = 43,
	ETGFPTEIUT_EN_ITEM_UE_TYPE_ITEM_OTHER    = 51,
	ETGFPTEIUT_EN_ITEM_UE_TYPE_MAX           = 52,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnItemMajorType
// NumValues: 0x0007
enum class ETGFProtoTgfEnItemMajorType : uint8
{
	ETGFPTEIMT_EN_ITEM_MAJOR_TYPE_NONE       = 0,
	ETGFPTEIMT_EN_ITEM_MAJOR_TYPE_CURRENCY   = 1,
	ETGFPTEIMT_EN_ITEM_MAJOR_TYPE_CRAFTS     = 2,
	ETGFPTEIMT_EN_ITEM_MAJOR_TYPE_CONSUMABLES = 3,
	ETGFPTEIMT_EN_ITEM_MAJOR_TYPE_EQUIPMENT  = 4,
	ETGFPTEIMT_EN_ITEM_MAJOR_TYPE_GEM        = 5,
	ETGFPTEIMT_EN_ITEM_MAJOR_TYPE_MAX        = 6,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnItemMinorType
// NumValues: 0x0013
enum class ETGFProtoTgfEnItemMinorType : uint8
{
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_NONE       = 0,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_CURRENCY   = 1,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_CRAFTS     = 10,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_CONSUMABLES_THROWABLE = 20,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_CONSUMABLES_POTION = 21,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_EQUIPMENT_WEAPON = 41,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_EQUIPMENT_ARMOR = 42,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_EQUIPMENT_ACCESSORIES = 43,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_GEM_ATTACK = 61,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_GEM_DEFEND = 62,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_GEM_FUNCTION = 63,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_GEM_FIRST_LEVEL = 64,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_GEM_GEAR_SET = 65,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_GEM_2_ATTACK = 71,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_GEM_2_DEFEND = 72,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_GEM_2_FUNCTION = 73,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_GEM_2_FIRST_LEVEL = 74,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_GEM_2_GEAR_SET = 75,
	ETGFPTEIMT_EN_ITEM_MINOR_TYPE_MAX        = 76,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnItemPatchType
// NumValues: 0x0005
enum class ETGFProtoTgfEnItemPatchType : uint8
{
	ETGFPTEIPT_EN_ITEM_PATCH_TYPE_NONE       = 0,
	ETGFPTEIPT_EN_ITEM_PATCH_TYPE_CLOTH      = 1,
	ETGFPTEIPT_EN_ITEM_PATCH_TYPE_LEATHER    = 2,
	ETGFPTEIPT_EN_ITEM_PATCH_TYPE_PLATE      = 3,
	ETGFPTEIPT_EN_ITEM_PATCH_TYPE_MAX        = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnItemStorageMetaChangeType
// NumValues: 0x0005
enum class ETGFProtoTgfEnItemStorageMetaChangeType : uint8
{
	ETGFPTEISMCT_EN_ITEM_STORAGE_META_CHANGE_TYPE_INVALID = 0,
	ETGFPTEISMCT_EN_ITEM_STORAGE_META_CHANGE_TYPE_INVENTORY_ON_CREATE = 1,
	ETGFPTEISMCT_EN_ITEM_STORAGE_META_CHANGE_TYPE_INVENTORY_ADD_PAGE = 2,
	ETGFPTEISMCT_EN_ITEM_STORAGE_META_CHANGE_TYPE_ROLE_CREATE = 3,
	ETGFPTEISMCT_EN_ITEM_STORAGE_META_CHANGE_TYPE_MAX = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnItemRewardGiveOutType
// NumValues: 0x0004
enum class ETGFProtoTgfEnItemRewardGiveOutType : uint8
{
	ETGFPTEIRGOT_EN_ITEM_REWARD_GIVE_OUT_TYPE_MANUAL = 0,
	ETGFPTEIRGOT_EN_ITEM_REWARD_GIVE_OUT_TYPE_AUTO_INVENTORY = 1,
	ETGFPTEIRGOT_EN_ITEM_REWARD_GIVE_OUT_TYPE_AUTO_MAIL = 2,
	ETGFPTEIRGOT_EN_ITEM_REWARD_GIVE_OUT_TYPE_MAX = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnItemDynamicType
// NumValues: 0x0003
enum class ETGFProtoTgfEnItemDynamicType : uint8
{
	ETGFPTEIDT_EN_ITEM_DYNAMIC_TYPE_PLAYER   = 0,
	ETGFPTEIDT_EN_ITEM_DYNAMIC_TYPE_ROLE_CAREER = 1,
	ETGFPTEIDT_EN_ITEM_DYNAMIC_TYPE_MAX      = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDItemCreateInfoCreateData
// NumValues: 0x0006
enum class ETGFProtoTgfDItemCreateInfoCreateData : uint8
{
	ETGFPTDICICD_NOT_SET                     = 0,
	ETGFPTDICICD_Loot                        = 11,
	ETGFPTDICICD_Market                      = 12,
	ETGFPTDICICD_Gm                          = 13,
	ETGFPTDICICD_Heirloom                    = 14,
	ETGFPTDICICD_MAX                         = 15,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDItemUseActionActionType
// NumValues: 0x0007
enum class ETGFProtoTgfDItemUseActionActionType : uint8
{
	ETGFPTDIUAAT_NOT_SET                     = 0,
	ETGFPTDIUAAT_AddEnergy                   = 1,
	ETGFPTDIUAAT_RandomPool                  = 2,
	ETGFPTDIUAAT_RecipeId                    = 3,
	ETGFPTDIUAAT_AddInventoryPage            = 4,
	ETGFPTDIUAAT_SoulBound                   = 5,
	ETGFPTDIUAAT_MAX                         = 6,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnItemWearingPart
// NumValues: 0x001B
enum class ETGFProtoTgfEnItemWearingPart : uint8
{
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_INVALID = 0,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_PAIR1RIGHTWEAPON = 1,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_PAIR1LEFTWEAPON = 2,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_PAIR2RIGHTWEAPON = 3,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_PAIR2LEFTWEAPON = 4,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_UPPERARMOR = 11,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_LOWERARMOR = 12,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_HELMET = 13,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_SHOE = 14,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_GLOVE = 15,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_NECKLACE = 16,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_LEFTRING = 17,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_RIGHTRING = 18,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_CONSUMABLE1 = 41,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_CONSUMABLE2 = 42,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_CONSUMABLE3 = 43,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_THROWABLE = 51,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_ADDITIONAL_WEAPON1 = 101,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_ADDITIONAL_WEAPON2 = 102,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_ADDITIONAL_WEAPON3 = 103,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_ADDITIONAL_WEAPON4 = 104,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_ADDITIONAL_WEAPON5 = 105,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_ADDITIONAL_WEAPON6 = 106,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_ADDITIONAL_WEAPON7 = 107,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_ADDITIONAL_WEAPON8 = 108,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_ADDITIONAL_WEAPON9 = 109,
	ETGFPTEIWP_EN_ITEM_WEARING_PART_TYPE_MAX = 110,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnItemStorageType
// NumValues: 0x0009
enum class ETGFProtoTgfEnItemStorageType : uint8
{
	ETGFPTEIST_EN_ITEM_STORAGE_TYPE_INVALID  = 0,
	ETGFPTEIST_EN_ITEM_STORAGE_TYPE_INVENTORY = 1,
	ETGFPTEIST_EN_ITEM_STORAGE_TYPE_BACKPACK = 2,
	ETGFPTEIST_EN_ITEM_STORAGE_TYPE_ROLE_WEARING = 3,
	ETGFPTEIST_EN_ITEM_STORAGE_TYPE_SMALL_BACKPACK = 4,
	ETGFPTEIST_EN_ITEM_STORAGE_TYPE_INVENTORY_WITHOUT_XY = 101,
	ETGFPTEIST_EN_ITEM_STORAGE_TYPE_BACKPACK_WITHOUT_XY = 102,
	ETGFPTEIST_EN_ITEM_STORAGE_TYPE_MAIL     = 201,
	ETGFPTEIST_EN_ITEM_STORAGE_TYPE_MAX      = 202,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnItemBringoutInGameLimitType
// NumValues: 0x0004
enum class ETGFProtoTgfEnItemBringoutInGameLimitType : uint8
{
	ETGFPTEIBIGLT_EN_ITEM_BRING_OUT_IN_GAME_LIMIT_TYPE_NO_LIMIT = 0,
	ETGFPTEIBIGLT_EN_ITEM_BRING_OUT_IN_GAME_LIMIT_TYPE_CAN_NOT_BUT_ALLOW_CROSS_LAYER = 1,
	ETGFPTEIBIGLT_EN_ITEM_BRING_OUT_IN_GAME_LIMIT_TYPE_CAN_NOT_ALL = 3,
	ETGFPTEIBIGLT_EN_ITEM_BRING_OUT_IN_GAME_LIMIT_TYPE_MAX = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDUserLabelLabelType
// NumValues: 0x0007
enum class ETGFProtoTgfDUserLabelLabelType : uint8
{
	ETGFPTDULLT_NOT_SET                      = 0,
	ETGFPTDULLT_Os                           = 1,
	ETGFPTDULLT_AccountType                  = 2,
	ETGFPTDULLT_PkgRegChannel                = 3,
	ETGFPTDULLT_PkgLogChannel                = 4,
	ETGFPTDULLT_LogChannel                   = 5,
	ETGFPTDULLT_MAX                          = 6,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnLevelStatus
// NumValues: 0x0005
enum class ETGFProtoTgfEnLevelStatus : uint8
{
	ETGFPTELS_EN_LEVEL_STATUS_IDEL           = 0,
	ETGFPTELS_EN_LEVEL_STATUS_PRESTART       = 1,
	ETGFPTELS_EN_LEVEL_STATUS_START          = 2,
	ETGFPTELS_EN_LEVEL_STATUS_FINISHED       = 3,
	ETGFPTELS_EN_LEVEL_STATUS_MAX            = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDLotteryListLottery
// NumValues: 0x0003
enum class ETGFProtoTgfDLotteryListLottery : uint8
{
	ETGFPTDLLL_NOT_SET                       = 0,
	ETGFPTDLLL_Tmp                           = 1,
	ETGFPTDLLL_MAX                           = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnLotteryAccessToKeysType
// NumValues: 0x0003
enum class ETGFProtoTgfEnLotteryAccessToKeysType : uint8
{
	ETGFPTELATKT_EN_LOTTERY_ACCESS_TO_KEYS_TYPE_INVALID = 0,
	ETGFPTELATKT_EN_LOTTERY_ACCESS_TO_KEYS_TYPE_GENERIC_BATTLE = 1,
	ETGFPTELATKT_EN_LOTTERY_ACCESS_TO_KEYS_TYPE_MAX = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnLotteryItemType
// NumValues: 0x0003
enum class ETGFProtoTgfEnLotteryItemType : uint8
{
	ETGFPTELIT_EN_LOTTERY_ITEM_TYPE_INVALID  = 0,
	ETGFPTELIT_EN_LOTTERY_ITEM_TYPE_GEAR     = 1,
	ETGFPTELIT_EN_LOTTERY_ITEM_TYPE_MAX      = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMutlLanguageType
// NumValues: 0x000C
enum class ETGFProtoTgfEnMutlLanguageType : uint8
{
	ETGFPTEMLT_EN_MUTL_LANGUAGE_NONE         = 0,
	ETGFPTEMLT_EN_MUTL_LANGUAGE_EN           = 1,
	ETGFPTEMLT_EN_MUTL_LANGUAGE_JA           = 2,
	ETGFPTEMLT_EN_MUTL_LANGUAGE_ZH_HANS      = 3,
	ETGFPTEMLT_EN_MUTL_LANGUAGE_ZH_HANT      = 4,
	ETGFPTEMLT_EN_MUTL_LANGUAGE_KO           = 5,
	ETGFPTEMLT_EN_MUTL_LANGUAGE_ES           = 6,
	ETGFPTEMLT_EN_MUTL_LANGUAGE_DE           = 7,
	ETGFPTEMLT_EN_MUTL_LANGUAGE_RU           = 8,
	ETGFPTEMLT_EN_MUTL_LANGUAGE_FR           = 9,
	ETGFPTEMLT_EN_MUTL_LANGUAGE_PL           = 10,
	ETGFPTEMLT_EN_MUTL_LANGUAGE_MAX          = 11,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMailMajorType
// NumValues: 0x0010
enum class ETGFProtoTgfEnMailMajorType : uint8
{
	ETGFPTEMMT_EN_MAIL_MT_INVALID            = 0,
	ETGFPTEMMT_EN_MAIL_MT_SYSTEM_PAY         = 1,
	ETGFPTEMMT_EN_MAIL_MT_SYSTEM_ANNOUNCEMENT = 2,
	ETGFPTEMMT_EN_MAIL_MT_SYSTEM_LOGIC       = 3,
	ETGFPTEMMT_EN_MAIL_MT_SYSTEM_SECURITY    = 4,
	ETGFPTEMMT_EN_MAIL_MT_SYSTEM_ACTIVITY    = 5,
	ETGFPTEMMT_EN_MAIL_MT_SYSTEM_COMPENSATION = 6,
	ETGFPTEMMT_EN_MAIL_MT_BUSINESS_BOUND     = 20,
	ETGFPTEMMT_EN_MAIL_MT_FRIEND_GIFT        = 21,
	ETGFPTEMMT_EN_MAIL_MT_FRIEND_INVITE      = 22,
	ETGFPTEMMT_EN_MAIL_MT_GUILD_NOTIFY       = 31,
	ETGFPTEMMT_EN_MAIL_MT_RANK_SETTLEMENT    = 41,
	ETGFPTEMMT_EN_MAIL_MT_SYSTEM_SEASON_LOGIC_1 = 101,
	ETGFPTEMMT_EN_MAIL_MT_SYSTEM_SEASON_LOGIC_2 = 102,
	ETGFPTEMMT_EN_MAIL_MT_SYSTEM_SEASON_LOGIC_3 = 103,
	ETGFPTEMMT_EN_MAIL_MT_MAX                = 104,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMailStatusType
// NumValues: 0x0005
enum class ETGFProtoTgfEnMailStatusType : uint8
{
	ETGFPTEMST_EN_MAIL_ST_NONE               = 0,
	ETGFPTEMST_EN_MAIL_ST_READ               = 1,
	ETGFPTEMST_EN_MAIL_ST_TOKEN_ATTACHMENT   = 2,
	ETGFPTEMST_EN_MAIL_ST_REMOVED            = 4,
	ETGFPTEMST_EN_MAIL_ST_MAX                = 5,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMailFlagType
// NumValues: 0x0003
enum class ETGFProtoTgfEnMailFlagType : uint8
{
	ETGFPTEMFT_EN_MAIL_FLAG_NONE             = 0,
	ETGFPTEMFT_EN_MAIL_FLAG_KEEP_AFTER_TAKE_ATTACHMENTS = 1,
	ETGFPTEMFT_EN_MAIL_FLAG_MAX              = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMarketBillType
// NumValues: 0x0009
enum class ETGFProtoTgfEnMarketBillType : uint8
{
	ETGFPTEMBT_EN_MBT_MARKET_BUY_RECORD      = 0,
	ETGFPTEMBT_EN_MBT_MARKET_APPLY_DIRECT_BUY = 1,
	ETGFPTEMBT_EN_MBT_GUILD_CREATE           = 101,
	ETGFPTEMBT_EN_MBT_GUILD_RENAME           = 102,
	ETGFPTEMBT_EN_MBT_PAY_DIAMOND            = 103,
	ETGFPTEMBT_EN_MBT_EXCHANGE_DIAMOND       = 104,
	ETGFPTEMBT_EN_MBT_PAY_TSS                = 105,
	ETGFPTEMBT_EN_MBT_MARKET_ASK_RECORD      = 106,
	ETGFPTEMBT_EN_MBT_MAX                    = 107,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMarketProductGetType
// NumValues: 0x0005
enum class ETGFProtoTgfEnMarketProductGetType : uint8
{
	ETGFPTEMPGT_EN_MPGT_NONE                 = 0,
	ETGFPTEMPGT_EN_MPGT_IDIP                 = 1,
	ETGFPTEMPGT_EN_MPGT_ASK                  = 2,
	ETGFPTEMPGT_EN_MPGT_REWARD               = 3,
	ETGFPTEMPGT_EN_MPGT_MAX                  = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnSellOrRepurchaseType
// NumValues: 0x0004
enum class ETGFProtoTgfEnSellOrRepurchaseType : uint8
{
	ETGFPTESORT_EN_SELL_OR_REPURCHASE_TYPE_INVALID = 0,
	ETGFPTESORT_EN_SELL_OR_REPURCHASE_TYPE_SELL = 1,
	ETGFPTESORT_EN_SELL_OR_REPURCHASE_TYPE_REPURCHASE = 2,
	ETGFPTESORT_EN_SELL_OR_REPURCHASE_TYPE_MAX = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRefreshPoolType
// NumValues: 0x0003
enum class ETGFProtoTgfEnRefreshPoolType : uint8
{
	ETGFPTERPT_EN_REFRESH_POOL_TYPE_RANDOM   = 0,
	ETGFPTERPT_EN_REFRESH_POOL_TYPE_REMOVE_DUPLICATE = 1,
	ETGFPTERPT_EN_REFRESH_POOL_TYPE_MAX      = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMatchSelectSvrType
// NumValues: 0x0004
enum class ETGFProtoTgfEnMatchSelectSvrType : uint8
{
	ETGFPTEMSST_EN_MATCH_SELECT_SVR_TYPE_INVALID = 0,
	ETGFPTEMSST_EN_MATCH_SELECT_SVR_TYPE_CLIENT = 1,
	ETGFPTEMSST_EN_MATCH_SELECT_SVR_TYPE_PLAYER = 2,
	ETGFPTEMSST_EN_MATCH_SELECT_SVR_TYPE_MAX = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnMatchStatus
// NumValues: 0x000A
enum class ETGFProtoTgfEnMatchStatus : uint8
{
	ETGFPTEMS_EN_MATCH_STATUS_INVALID        = 0,
	ETGFPTEMS_EN_MATCH_STATUS_MATCHING       = 1,
	ETGFPTEMS_EN_MATCH_STATUS_CONFIRM        = 2,
	ETGFPTEMS_EN_MATCH_STATUS_CREATING_ROOM  = 3,
	ETGFPTEMS_EN_MATCH_STATUS_TIMEOUT        = 5,
	ETGFPTEMS_EN_MATCH_STATUS_CANCEL         = 6,
	ETGFPTEMS_EN_MATCH_STATUS_WAIT_BATTLESVR_NOTIFY = 7,
	ETGFPTEMS_EN_MATCH_STATUS_CAN_JOIN_IN    = 8,
	ETGFPTEMS_EN_MATCH_STATUS_FINISHED       = 20,
	ETGFPTEMS_EN_MATCH_STATUS_MAX            = 21,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDMatchEventLogEvent
// NumValues: 0x000C
enum class ETGFProtoTgfDMatchEventLogEvent : uint8
{
	ETGFPTDMELE_NOT_SET                      = 0,
	ETGFPTDMELE_Timeout                      = 11,
	ETGFPTDMELE_Cancel                       = 12,
	ETGFPTDMELE_Matched                      = 13,
	ETGFPTDMELE_AddUser                      = 21,
	ETGFPTDMELE_RemoveUser                   = 22,
	ETGFPTDMELE_ConfirmUser                  = 23,
	ETGFPTDMELE_NotifyConfirm                = 24,
	ETGFPTDMELE_RefuseConfirm                = 25,
	ETGFPTDMELE_StartMatching                = 26,
	ETGFPTDMELE_Finished                     = 27,
	ETGFPTDMELE_MAX                          = 28,
};

// Enum TGFBattleProtocol.ETGFProtoTgfENMithrilForceRewardSendMailReason
// NumValues: 0x0007
enum class ETGFProtoTgfENMithrilForceRewardSendMailReason : uint8
{
	ETGFPTENMFRSMR_EN_MITHRIL_FORCE_REWARD_SEND_MAIL_REASON_NONE = 0,
	ETGFPTENMFRSMR_EN_MITHRIL_FORCE_REWARD_SEND_MAIL_REASON_RECEIVE_FAILED = 1,
	ETGFPTENMFRSMR_EN_MITHRIL_FORCE_REWARD_SEND_MAIL_REASON_BACKPACK_FULL = 2,
	ETGFPTENMFRSMR_EN_MITHRIL_FORCE_REWARD_SEND_MAIL_REASON_BACKPACK_FULL_PART = 3,
	ETGFPTENMFRSMR_EN_MITHRIL_FORCE_REWARD_SEND_MAIL_REASON_LOGIN_REISSUE = 4,
	ETGFPTENMFRSMR_EN_MITHRIL_FORCE_REWARD_SEND_MAIL_REASON_REWARD_REISSUE = 5,
	ETGFPTENMFRSMR_EN_MITHRIL_FORCE_REWARD_SEND_MAIL_REASON_MAX = 6,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDUserQuestEventEvent
// NumValues: 0x0009
enum class ETGFProtoTgfDUserQuestEventEvent : uint8
{
	ETGFPTDUQEE_NOT_SET                      = 0,
	ETGFPTDUQEE_Unlock                       = 11,
	ETGFPTDUQEE_ProgressUpdate               = 12,
	ETGFPTDUQEE_Complete                     = 13,
	ETGFPTDUQEE_Received                     = 14,
	ETGFPTDUQEE_Reset                        = 15,
	ETGFPTDUQEE_Expired                      = 16,
	ETGFPTDUQEE_ForceDelete                  = 17,
	ETGFPTDUQEE_MAX                          = 18,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnQuestStatus
// NumValues: 0x0007
enum class ETGFProtoTgfEnQuestStatus : uint8
{
	ETGFPTEQS_EN_QUEST_STATUS_LOCK           = 0,
	ETGFPTEQS_EN_QUEST_STATUS_PROCESSING     = 1,
	ETGFPTEQS_EN_QUEST_STATUS_COMPLETE       = 2,
	ETGFPTEQS_EN_QUEST_STATUS_RECEIVE        = 3,
	ETGFPTEQS_EN_QUEST_STATUS_EXPIRED        = 4,
	ETGFPTEQS_EN_QUEST_STATUS_FORCE_DELETE   = 5,
	ETGFPTEQS_EN_QUEST_STATUS_MAX            = 6,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnQuestBizSystem
// NumValues: 0x0003
enum class ETGFProtoTgfEnQuestBizSystem : uint8
{
	ETGFPTEQBS_EN_QUEST_BIZSYS_INVALID       = 0,
	ETGFPTEQBS_EN_QUEST_BIZSYS_AC_PASSPORT   = 1,
	ETGFPTEQBS_EN_QUEST_BIZSYS_MAX           = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnQuestType
// NumValues: 0x000A
enum class ETGFProtoTgfEnQuestType : uint8
{
	ETGFPTEQT_EN_QUEST_TYPE_UNDEFINE         = 0,
	ETGFPTEQT_EN_QUEST_TYPE_DAILY            = 1,
	ETGFPTEQT_EN_QUEST_TYPE_DEADLY           = 2,
	ETGFPTEQT_EN_QUEST_TYPE_NEWBIE           = 3,
	ETGFPTEQT_EN_QUEST_TYPE_ADVENTURE        = 4,
	ETGFPTEQT_EN_QUEST_TYPE_CHALLENGE        = 5,
	ETGFPTEQT_EN_QUEST_TYPE_OPERATIONAL_ACTIVITIES = 6,
	ETGFPTEQT_EN_QUEST_TYPE_OPERATIONAL_ACTIVITIES_STEAM = 7,
	ETGFPTEQT_EN_QUEST_TYPE_OPERATIONAL_ACTIVITIES_PASSPORT = 8,
	ETGFPTEQT_EN_QUEST_TYPE_MAX              = 9,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnQuestDisplayType
// NumValues: 0x0006
enum class ETGFProtoTgfEnQuestDisplayType : uint8
{
	ETGFPTEQDT_EN_QUEST_DISPLAY_TYPE_DEFAULT = 0,
	ETGFPTEQDT_EN_QUEST_DISPLAY_TYPE_OFF_ALL = 1,
	ETGFPTEQDT_EN_QUEST_DISPLAY_TYPE_ON_UNLOCK = 2,
	ETGFPTEQDT_EN_QUEST_DISPLAY_TYPE_ON_RECEIVED = 4,
	ETGFPTEQDT_EN_QUEST_DISPLAY_TYPE_ON_UNLOCK_AND_RECEIVE = 6,
	ETGFPTEQDT_EN_QUEST_DISPLAY_TYPE_MAX     = 7,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnCausedDamageType
// NumValues: 0x0003
enum class ETGFProtoTgfEnCausedDamageType : uint8
{
	ETGFPTECDT_EN_CAUSED_DAMAGED_TYPE_ALL    = 0,
	ETGFPTECDT_EN_CAUSED_DAMAGED_TYPE_PLAYER = 1,
	ETGFPTECDT_EN_CAUSED_DAMAGED_TYPE_MAX    = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnQuestProgressType
// NumValues: 0x0031
enum class ETGFProtoTgfEnQuestProgressType : uint8
{
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_BATTLE_AUTO_COMPLETE = 0,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_BATTLE_VICTORY = 1,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_KILL_TYPE = 2,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_COUNT_OF_COINS_SPENT = 3,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ONLINE_TIME = 4,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_CUMULATIVE_LOGIN_DAYS = 5,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_CONSECUTIVE_LOGIN_DAYS = 6,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_BATTLE_PARTICIPATE = 7,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_PLAYER_LEVEL_ARRIVE = 8,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ROLE_TOTAL_ARRIVE = 9,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ITEM_ACQUIRE = 10,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ITEM_CONSUME = 11,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_NEWBIE_SPECIAL_PROGRESS_FROM_CLIENT = 12,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_COMPLETE_QUEST = 13,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_KILL_ACTOR_STAT_ID = 14,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_INTERACTING_STAT_ID = 15,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_MOVING_AREA = 16,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_OPENING_CHEST = 17,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_DESTROYING_OBJECT = 18,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ALIVE_TIME = 19,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ITEM_SUBMIT = 20,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_CONSECUTIVE_DEAD = 21,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_WORTH_LOSS_IN_BATTLE = 22,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_RESURRECT_TEAM = 23,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_PLAYER_ROLE_LEVEL_ARRIVE_BY_GUID = 24,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_LOOT   = 25,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_PLAYER_CAUSED_TOTAL_DAMAGE = 26,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_PLAYER_CAUSED_TOTAL_HEAL = 27,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_PLAYER_GOT_TOTAL_DAMAGE = 28,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_PLAYER_TAKE_ITEM_WORTH = 29,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_CUMULATIVE_LOGIN_DAYS_AFTER_ACTIVITY = 30,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_PLAYER_ROLE_LEVEL_ARRIVE_BY_CAREER = 31,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_PLAYER_ABILITY = 32,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ITEM_ADD_SUB = 33,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_HEIRLOOM_UPGRADE = 34,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ITEM_USE = 35,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_PLAYER_ACTION = 36,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ITEM_ACQUIRE_WORTH = 37,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ITEM_SELL_COUNT = 38,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ITEM_SELL_PRICE = 39,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_TRADE_OP_ITEM = 40,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_TRADE_BUY_ITEM = 41,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_TRADE_SALES_ITEM = 42,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_GEM_UPGRADE = 43,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_ITEM_BUY = 44,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_TRADE_BUY_ITEM_COST = 45,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_TRADE_SALES_ITEM_COST = 46,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_BATTLE_RELATION_STAT = 47,
	ETGFPTEQPT_EN_QUEST_PROGRESS_TYPE_MAX    = 48,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnQuestRelationStatType
// NumValues: 0x0003
enum class ETGFProtoTgfEnQuestRelationStatType : uint8
{
	ETGFPTEQRST_EN_QUEST_RELATION_STAT_TYPE_UNDEFINE = 0,
	ETGFPTEQRST_EN_QUEST_RELATION_STAT_TYPE_MUTUAL_RESURRECT = 1,
	ETGFPTEQRST_EN_QUEST_RELATION_STAT_TYPE_MAX = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnQuestProgressCountType
// NumValues: 0x0004
enum class ETGFProtoTgfEnQuestProgressCountType : uint8
{
	ETGFPTEQPCT_EN_QUEST_PROGRESS_COUNT_TYPE_UNDEFINE = 0,
	ETGFPTEQPCT_EN_QUEST_PROGRESS_COUNT_TYPE_SINGLE = 1,
	ETGFPTEQPCT_EN_QUEST_PROGRESS_COUNT_TYPE_ADD_UP = 2,
	ETGFPTEQPCT_EN_QUEST_PROGRESS_COUNT_TYPE_MAX = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnQuestTirggerType
// NumValues: 0x0019
enum class ETGFProtoTgfEnQuestTirggerType : uint8
{
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_INVALID = 0,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_PLAYER_LEVEL_PROMOTE = 1,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_ROLE_ACQUIRE = 2,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_RANK_ARRIVE = 3,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_PLAYER_VIP_LEVEL_PROMOTE = 4,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_QUEST_COMPLETE = 5,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_QUEST_RECEIVE = 6,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_BATTLE_FINISH = 7,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_COST_COINS = 8,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_LOGIN   = 9,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_ONLINE  = 10,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_ITEM_ACQUIRE = 11,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_ITEM_CONSUME = 12,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_TASK_TIME_TICK = 13,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_ITEM_SUBMIT = 14,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_PLAYER_HIS_MAX_LEVEL_PROMOTE = 15,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_HEIRLOOM_UPGRADE = 16,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_ITEM_USE = 17,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_SELL_ITEM = 18,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_TRADE_BUY_ITEM = 19,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_TRADE_SALES_ITEM = 20,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_GEM_UPGRADE = 21,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_ITEM_BUY = 22,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_LOGIN_FOR_AC = 23,
	ETGFPTEQTT_EN_QUEST_TRIGGER_TYPE_MAX     = 24,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnQuestProgressResetPeriod
// NumValues: 0x0005
enum class ETGFProtoTgfEnQuestProgressResetPeriod : uint8
{
	ETGFPTEQPRP_EN_QUEST_PROGRESS_RESET_PERIOD_PERSISTENCE = 0,
	ETGFPTEQPRP_EN_QUEST_PROGRESS_RESET_PERIOD_DAY = 1,
	ETGFPTEQPRP_EN_QUEST_PROGRESS_RESET_PERIOD_WEEK = 2,
	ETGFPTEQPRP_EN_QUEST_PROGRESS_RESET_PERIOD_MONTH = 3,
	ETGFPTEQPRP_EN_QUEST_PROGRESS_RESET_PERIOD_MAX = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnQuestProgressValueCompareType
// NumValues: 0x0005
enum class ETGFProtoTgfEnQuestProgressValueCompareType : uint8
{
	ETGFPTEQPVCT_EN_QUEST_PROGRESS_VALUE_COMPARE_TYPE_AUTO_COMPLETE = 0,
	ETGFPTEQPVCT_EN_QUEST_PROGRESS_VALUE_COMPARE_TYPE_GREATER_OR_EQUAL = 1,
	ETGFPTEQPVCT_EN_QUEST_PROGRESS_VALUE_COMPARE_TYPE_LESS_OR_EQUAL = 2,
	ETGFPTEQPVCT_EN_QUEST_PROGRESS_VALUE_COMPARE_TYPE_STRICTLY_EQUAL = 3,
	ETGFPTEQPVCT_EN_QUEST_PROGRESS_VALUE_COMPARE_TYPE_MAX = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDQuestUnlockConditionItemUnlockType
// NumValues: 0x000A
enum class ETGFProtoTgfDQuestUnlockConditionItemUnlockType : uint8
{
	ETGFPTDQUCIUT_NOT_SET                    = 0,
	ETGFPTDQUCIUT_PlayerLevel                = 1,
	ETGFPTDQUCIUT_RoleTotal                  = 2,
	ETGFPTDQUCIUT_RankArrive                 = 3,
	ETGFPTDQUCIUT_VipLevel                   = 4,
	ETGFPTDQUCIUT_PreviousQuest              = 5,
	ETGFPTDQUCIUT_StartTimepoint             = 6,
	ETGFPTDQUCIUT_HasSpecifyRole             = 7,
	ETGFPTDQUCIUT_AddByOutBusinessSystem     = 8,
	ETGFPTDQUCIUT_MAX                        = 9,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRandomPoolType
// NumValues: 0x0006
enum class ETGFProtoTgfEnRandomPoolType : uint8
{
	ETGFPTERPT_EN_RANDOM_POOL_UNKNOWN_TYPE   = 0,
	ETGFPTERPT_EN_RANDOM_POOL_INDENPENDENT   = 1,
	ETGFPTERPT_EN_RANDOM_POOL_EXCLUSIVE      = 2,
	ETGFPTERPT_EN_RANDOM_POOL_ALL            = 3,
	ETGFPTERPT_EN_RANDOM_POOL_CUSTOM         = 4,
	ETGFPTERPT_EN_RANDOM_POOL_MAX            = 5,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRankCustomSeasontype
// NumValues: 0x0004
enum class ETGFProtoTgfEnRankCustomSeasontype : uint8
{
	ETGFPTERCS_EN_RANK_CUSTOM_SEASON_INVALID = 0,
	ETGFPTERCS_EN_RANK_CUSTOM_SEASON_LEVEL   = 1,
	ETGFPTERCS_EN_RANK_CUSTOM_SEASON_ACTIVITY = 2,
	ETGFPTERCS_EN_RANK_CUSTOM_SEASON_MAX     = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRankReportDataType
// NumValues: 0x0006
enum class ETGFProtoTgfEnRankReportDataType : uint8
{
	ETGFPTERRDT_EN_RANK_REPORT_DATA_INVALID  = 0,
	ETGFPTERRDT_EN_RANK_REPORT_DATA_WIN_COUNT = 1,
	ETGFPTERRDT_EN_RANK_REPORT_DATA_KILL_PLAYER_COUNT = 2,
	ETGFPTERRDT_EN_RANK_REPORT_DATA_PVE_KILL_PLAYER_SINGAL_PLAYER = 3,
	ETGFPTERRDT_EN_RANK_REPORT_DATA_PVE_KILL_PLAYER_MULTI_PLAYER = 4,
	ETGFPTERRDT_EN_RANK_REPORT_DATA_MAX      = 5,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRankDataType
// NumValues: 0x0004
enum class ETGFProtoTgfEnRankDataType : uint8
{
	ETGFPTERDT_EN_RANK_SHOW_INVALID          = 0,
	ETGFPTERDT_EN_RANK_SHOW_ROLE_BATTLE      = 1,
	ETGFPTERDT_EN_RANK_SHOW_ACTIVITY_TRIAL   = 2,
	ETGFPTERDT_EN_RANK_SHOW_MAX              = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfRankCacheMode
// NumValues: 0x0004
enum class ETGFProtoTgfRankCacheMode : uint8
{
	ETGFPTRCM_EN_RANK_CACHE_MODE_OFFLINE     = 0,
	ETGFPTRCM_EN_RANK_CACHE_MODE_KONLINE     = 1,
	ETGFPTRCM_EN_RANK_CACHE_MODE_KLOCAL      = 2,
	ETGFPTRCM_EN_RANK_CACHE_MODE_MAX         = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRankInstanceID
// NumValues: 0x0003
enum class ETGFProtoTgfEnRankInstanceID : uint8
{
	ETGFPTERIID_EN_RANK_INSTANCE_ID_NONE     = 0,
	ETGFPTERIID_EN_RANK_INSTANCE_ID_DEFAULT  = 1,
	ETGFPTERIID_EN_RANK_INSTANCE_ID_MAX      = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRankSortType
// NumValues: 0x0003
enum class ETGFProtoTgfEnRankSortType : uint8
{
	ETGFPTERST_EN_RANK_SORT_TYPE_DEFULT      = 0,
	ETGFPTERST_EN_RANK_SORT_TYPE_EQUAL_SCORE = 1,
	ETGFPTERST_EN_RANK_SORT_TYPE_MAX         = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRankSettlementType
// NumValues: 0x0006
enum class ETGFProtoTgfEnRankSettlementType : uint8
{
	ETGFPTERST_EN_RANK_SETTLEMENT_TYPE_NONE  = 0,
	ETGFPTERST_EN_RANK_SETTLEMENT_TYPE_IMAGE = 1,
	ETGFPTERST_EN_RANK_SETTLEMENT_TYPE_ABC_BOARD_KEEP = 2,
	ETGFPTERST_EN_RANK_SETTLEMENT_TYPE_ABC_BOARD_CLEAR = 3,
	ETGFPTERST_EN_RANK_SETTLEMENT_TYPE_ORIGINAL_AND_CLEAR = 4,
	ETGFPTERST_EN_RANK_SETTLEMENT_TYPE_MAX   = 5,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRankLockType
// NumValues: 0x0004
enum class ETGFProtoTgfEnRankLockType : uint8
{
	ETGFPTERLT_EN_RANK_LOCK_TYPE_NONE        = 0,
	ETGFPTERLT_EN_RANK_LOCK_TYPE_DAILY       = 1,
	ETGFPTERLT_EN_RANK_LOCK_TYPE_CUSTOM      = 2,
	ETGFPTERLT_EN_RANK_LOCK_TYPE_MAX         = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRankPeriodRewardType
// NumValues: 0x0004
enum class ETGFProtoTgfEnRankPeriodRewardType : uint8
{
	ETGFPTERPRT_EN_RANK_PREWARD_TYPE_NONE    = 0,
	ETGFPTERPRT_EN_RANK_PREWARD_TYPE_BY_RANK = 1,
	ETGFPTERPRT_EN_RANK_PREWARD_TYPE_BY_SCORE = 2,
	ETGFPTERPRT_EN_RANK_PREWARD_TYPE_MAX     = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfENRankScoreSettleType
// NumValues: 0x0005
enum class ETGFProtoTgfENRankScoreSettleType : uint8
{
	ETGFPTENRSST_EN_RANK_SCORE_SETTLE_NONE   = 0,
	ETGFPTENRSST_EN_RANK_SCORE_SETTLE_SUB_SCORE = 1,
	ETGFPTENRSST_EN_RANK_SCORE_SETTLE_RESET_SCORE = 2,
	ETGFPTENRSST_EN_RANK_SCORE_SETTLE_RECENT_BATTLE_COUNT = 3,
	ETGFPTENRSST_EN_RANK_SCORE_SETTLE_MAX    = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfRedirectType
// NumValues: 0x0004
enum class ETGFProtoTgfRedirectType : uint8
{
	ETGFPTRT_EN_INVALID                      = 0,
	ETGFPTRT_EN_REDIRECT_APOLLO_ITOP_FRIEND_LIST = 1,
	ETGFPTRT_EN_REDIRECT_APOLLO_ITOP_ACVM_REPORT = 2,
	ETGFPTRT_EN_MAX                          = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfRedirectReqDataData
// NumValues: 0x0003
enum class ETGFProtoTgfRedirectReqDataData : uint8
{
	ETGFPTRRDD_NOT_SET                       = 0,
	ETGFPTRRDD_SteamArchievements            = 1,
	ETGFPTRRDD_MAX                           = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfRedirectResDataData
// NumValues: 0x0003
enum class ETGFProtoTgfRedirectResDataData : uint8
{
	ETGFPTRRDD_NOT_SET                       = 0,
	ETGFPTRRDD_FriendList                    = 10,
	ETGFPTRRDD_MAX                           = 11,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnArenaStatisitcsType
// NumValues: 0x0007
enum class ETGFProtoTgfEnArenaStatisitcsType : uint8
{
	ETGFPTEAST_EN_ARENA_STATIS_TYPE_NULL     = 0,
	ETGFPTEAST_EN_ARENA_STATIS_TYPE_CAUSED_DAMAGED = 1,
	ETGFPTEAST_EN_ARENA_STATIS_TYPE_CAUSED_HEAL = 2,
	ETGFPTEAST_EN_ARENA_STATIS_TYPE_GOT_DAMAGED = 3,
	ETGFPTEAST_EN_ARENA_STATIS_TYPE_KILL_PALYER_COUNT = 11,
	ETGFPTEAST_EN_ARENA_STATIS_TYPE_DEATH_COUNT = 12,
	ETGFPTEAST_EN_ARENA_STATIS_TYPE_MAX      = 13,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnEnvironmentType
// NumValues: 0x0004
enum class ETGFProtoTgfEnEnvironmentType : uint8
{
	ETGFPTEET_EN_ENVIRONMENT_TYPE_UNAVAILABLE = 0,
	ETGFPTEET_EN_ENVIRONMENT_TYPE_ALL_AVAILABLE = 1,
	ETGFPTEET_EN_ENVIRONMENT_TYPE_ONLY_EDIT  = 2,
	ETGFPTEET_EN_ENVIRONMENT_TYPE_MAX        = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnForceType
// NumValues: 0x0004
enum class ETGFProtoTgfEnForceType : uint8
{
	ETGFPTEFT_EN_FORCE_TYPE_UNDEFINE         = 0,
	ETGFPTEFT_EN_FORCE_TYPE_ADVENTURER       = 1,
	ETGFPTEFT_EN_FORCE_TYPE_MITHRIL_FORCE    = 2,
	ETGFPTEFT_EN_FORCE_TYPE_MAX              = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRoleGenderType
// NumValues: 0x0006
enum class ETGFProtoTgfEnRoleGenderType : uint8
{
	ETGFPTERGT_EN_ROLE_GENDER_NONE           = 0,
	ETGFPTERGT_EN_ROLE_GENDER_MALE           = 1,
	ETGFPTERGT_EN_ROLE_GENDER_FEMALE         = 2,
	ETGFPTERGT_EN_ROLE_GENDER_UNDEAD         = 3,
	ETGFPTERGT_EN_ROLE_GENDER_INVALID        = 127,
	ETGFPTERGT_EN_ROLE_GENDER_MAX            = 128,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRoleRaceType
// NumValues: 0x0005
enum class ETGFProtoTgfEnRoleRaceType : uint8
{
	ETGFPTERRT_EN_ROLE_RACE_INVALID          = 0,
	ETGFPTERRT_EN_ROLE_RACE_HUMAN            = 1,
	ETGFPTERRT_EN_ROLE_RACE_NIGHT_ELF        = 2,
	ETGFPTERRT_EN_ROLE_RACE_UNDEAD           = 3,
	ETGFPTERRT_EN_ROLE_RACE_MAX              = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRoleCareerType
// NumValues: 0x000D
enum class ETGFProtoTgfEnRoleCareerType : uint8
{
	ETGFPTERCT_EN_ROLE_CAREER_INVALID        = 0,
	ETGFPTERCT_EN_ROLE_CAREER_SWORDMASTER    = 1,
	ETGFPTERCT_EN_ROLE_CAREER_FIGHTER        = 2,
	ETGFPTERCT_EN_ROLE_CAREER_ROGUE          = 3,
	ETGFPTERCT_EN_ROLE_CAREER_PRIEST         = 4,
	ETGFPTERCT_EN_ROLE_CAREER_WIZARD         = 5,
	ETGFPTERCT_EN_ROLE_CAREER_DEATHKNIGHT    = 6,
	ETGFPTERCT_EN_ROLE_CAREER_LICH           = 7,
	ETGFPTERCT_EN_ROLE_CAREER_DRUID_PANTHER  = 8,
	ETGFPTERCT_EN_ROLE_CAREER_MITHRIL_FORCE_FIGHTER = 101,
	ETGFPTERCT_EN_ROLE_CAREER_MITHRIL_FORCE_ROGUE = 102,
	ETGFPTERCT_EN_ROLE_CAREER_MITHRIL_FORCE_PRIEST = 103,
	ETGFPTERCT_EN_ROLE_CAREER_MAX            = 104,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRoleSkillPositionType
// NumValues: 0x0004
enum class ETGFProtoTgfEnRoleSkillPositionType : uint8
{
	ETGFPTERSPT_EN_ROLE_SKILL_POSITION_INVALID = 0,
	ETGFPTERSPT_EN_ROLE_SKILL_POSITION_Q     = 1,
	ETGFPTERSPT_EN_ROLE_SKILL_POSITION_E     = 2,
	ETGFPTERSPT_EN_ROLE_SKILL_POSITION_MAX   = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRoleSkinWidgetPositionType
// NumValues: 0x0002
enum class ETGFProtoTgfEnRoleSkinWidgetPositionType : uint8
{
	ETGFPTERSWPT_EN_ROLE_SKIN_WIDGET_POSITION_SKIN = 0,
	ETGFPTERSWPT_EN_ROLE_SKIN_WIDGET_POSITION_MAX = 1,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRoomStatus
// NumValues: 0x0004
enum class ETGFProtoTgfEnRoomStatus : uint8
{
	ETGFPTERS_EN_ROOM_STATUS_INVALID         = 0,
	ETGFPTERS_EN_ROOM_STATUS_PREPARE         = 1,
	ETGFPTERS_EN_ROOM_STATUS_BATTLE          = 2,
	ETGFPTERS_EN_ROOM_STATUS_MAX             = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRoomTransferStatus
// NumValues: 0x0004
enum class ETGFProtoTgfEnRoomTransferStatus : uint8
{
	ETGFPTERTS_EN_ROOM_TRANSFER_STATUS_NONE  = 0,
	ETGFPTERTS_EN_ROOM_TRANSFER_STATUS_RUNNING = 1,
	ETGFPTERTS_EN_ROOM_TRANSFER_STATUS_FINISH = 2,
	ETGFPTERTS_EN_ROOM_TRANSFER_STATUS_MAX   = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRoomPosType
// NumValues: 0x0004
enum class ETGFProtoTgfEnRoomPosType : uint8
{
	ETGFPTERPT_EN_ROOM_POS_TYPE_INVALID      = 0,
	ETGFPTERPT_EN_ROOM_POS_TYPE_TEAM         = 1,
	ETGFPTERPT_EN_ROOM_POS_TYPE_WATCH        = 2,
	ETGFPTERPT_EN_ROOM_POS_TYPE_MAX          = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRoomInviteRemoveReason
// NumValues: 0x0007
enum class ETGFProtoTgfEnRoomInviteRemoveReason : uint8
{
	ETGFPTERIRR_EN_ROOM_INVITE_REMOVE_REASON_INVALID = 0,
	ETGFPTERIRR_EN_ROOM_INVITE_REMOVE_REASON_ACCEPT = 1,
	ETGFPTERIRR_EN_ROOM_INVITE_REMOVE_REASON_REJECT = 2,
	ETGFPTERIRR_EN_ROOM_INVITE_REMOVE_REASON_EXPIRE = 3,
	ETGFPTERIRR_EN_ROOM_INVITE_REMOVE_REASON_IGNORE_ROOM = 4,
	ETGFPTERIRR_EN_ROOM_INVITE_REMOVE_REASON_BAN = 5,
	ETGFPTERIRR_EN_ROOM_INVITE_REMOVE_REASON_MAX = 6,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRoomCancelMemberReadyReason
// NumValues: 0x0007
enum class ETGFProtoTgfEnRoomCancelMemberReadyReason : uint8
{
	ETGFPTERCMRR_EN_ROOM_CANCEL_MEMBER_READY_REASON_INVALID = 0,
	ETGFPTERCMRR_EN_ROOM_CANCEL_MEMBER_READY_REASON_ACTIVE = 1,
	ETGFPTERCMRR_EN_ROOM_CANCEL_MEMBER_READY_REASON_POS_CHANGE = 2,
	ETGFPTERCMRR_EN_ROOM_CANCEL_MEMBER_READY_REASON_GAMEOVER = 3,
	ETGFPTERCMRR_EN_ROOM_CANCEL_MEMBER_READY_REASON_BATTLE_TIMEOUT = 4,
	ETGFPTERCMRR_EN_ROOM_CANCEL_MEMBER_READY_REASON_BATTLE_START = 5,
	ETGFPTERCMRR_EN_ROOM_CANCEL_MEMBER_READY_REASON_MAX = 6,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnRoomRemoveMemberReason
// NumValues: 0x0005
enum class ETGFProtoTgfEnRoomRemoveMemberReason : uint8
{
	ETGFPTERRMR_EN_ROOM_REMOVE_MEMBER_REASON_INVALID = 0,
	ETGFPTERRMR_EN_ROOM_REMOVE_MEMBER_REASON_ACTIVE = 1,
	ETGFPTERRMR_EN_ROOM_REMOVE_MEMBER_REASON_KICKOUT = 2,
	ETGFPTERRMR_EN_ROOM_REMOVE_MEMBER_REASON_AUTO_ADJUST = 3,
	ETGFPTERRMR_EN_ROOM_REMOVE_MEMBER_REASON_MAX = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDRoomMessageActionAction
// NumValues: 0x0019
enum class ETGFProtoTgfDRoomMessageActionAction : uint8
{
	ETGFPTDRMAA_NOT_SET                      = 0,
	ETGFPTDRMAA_MapAction                    = 51,
	ETGFPTDRMAA_BattleTypeAction             = 52,
	ETGFPTDRMAA_KeywordAction                = 53,
	ETGFPTDRMAA_NameAction                   = 54,
	ETGFPTDRMAA_MemberPosAction              = 55,
	ETGFPTDRMAA_MemberReadyAction            = 56,
	ETGFPTDRMAA_OwnerChangeAction            = 57,
	ETGFPTDRMAA_AddMemberAction              = 58,
	ETGFPTDRMAA_RemoveMemberAction           = 59,
	ETGFPTDRMAA_DisbandAction                = 60,
	ETGFPTDRMAA_TeamMemberNotifyAction       = 61,
	ETGFPTDRMAA_MemberBattleVersionNotMatchAction = 62,
	ETGFPTDRMAA_SnapshotAction               = 63,
	ETGFPTDRMAA_StatusAction                 = 64,
	ETGFPTDRMAA_InviteNotifyAction           = 65,
	ETGFPTDRMAA_EnterAction                  = 98,
	ETGFPTDRMAA_CraeteAction                 = 99,
	ETGFPTDRMAA_TransferAction               = 100,
	ETGFPTDRMAA_StartBattleAction            = 110,
	ETGFPTDRMAA_BattleVersionDismatchAction  = 111,
	ETGFPTDRMAA_CreateBattleAction           = 112,
	ETGFPTDRMAA_FinishBattleAction           = 113,
	ETGFPTDRMAA_NotifySubscribeAction        = 114,
	ETGFPTDRMAA_MAX                          = 115,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDStatisticsPVPMode
// NumValues: 0x0005
enum class ETGFProtoTgfDStatisticsPVPMode : uint8
{
	ETGFPTDSPVPM_EN_STATISTICS_PVP_MODE_NONE = 0,
	ETGFPTDSPVPM_EN_STATISTICS_PVP_MODE_DEATH = 1,
	ETGFPTDSPVPM_EN_STATISTICS_PVP_MODE_BO5  = 2,
	ETGFPTDSPVPM_EN_STATISTICS_PVP_MODE_BO7  = 3,
	ETGFPTDSPVPM_EN_STATISTICS_PVP_MODE_MAX  = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDStatisticsSaveType
// NumValues: 0x0004
enum class ETGFProtoTgfDStatisticsSaveType : uint8
{
	ETGFPTDSST_EN_STATISTICS_save_type_NONE  = 0,
	ETGFPTDSST_EN_STATISTICS_SAVE_TYPE_PLAYER = 1,
	ETGFPTDSST_EN_STATISTICS_SAVE_TYPE_ROLE  = 2,
	ETGFPTDSST_EN_STATISTICS_MAX             = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnTeamMethodType
// NumValues: 0x000A
enum class ETGFProtoTgfEnTeamMethodType : uint8
{
	ETGFPTETMT_EN_TEAM_SEND_METHOD_TYPE_NONE = 0,
	ETGFPTETMT_EN_TEAM_SEND_METHOD_TYPE_STEAM = 1,
	ETGFPTETMT_EN_TEAM_SEND_METHOD_TYPE_FRIEND = 2,
	ETGFPTETMT_EN_TEAM_SEND_METHOD_TYPE_RECENTLY_PLAYER = 3,
	ETGFPTETMT_EN_TEAM_SEND_METHOD_TYPE_RECRUIT = 4,
	ETGFPTETMT_EN_TEAM_SEND_METHOD_TYPE_MATCH = 5,
	ETGFPTETMT_EN_TEAM_SEND_METHOD_TYPE_CAPTAIN_CREATE = 6,
	ETGFPTETMT_EN_TEAM_SEND_METHOD_TYPE_ERROR = 7,
	ETGFPTETMT_EN_TEAM_SEND_METHOD_TYPE_BATTLE_END = 8,
	ETGFPTETMT_EN_TEAM_SEND_METHOD_TYPE_MAX  = 9,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDTeamExitReason
// NumValues: 0x0015
enum class ETGFProtoTgfDTeamExitReason : uint8
{
	ETGFPTDTER_EN_TEAM_EXIT_REASON_DEFAULT   = 0,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_LOGOUT    = 1,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_EXPIRED   = 2,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_DESTROY_TEAM = 3,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_REMOVE_MEMBER = 4,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_CANCEL    = 5,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_UNSUBSCRIBE_TEAM_CHANNEL = 6,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_OFFLINE_EXPIRED = 7,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_CREATE_TEAM_WHEN_HAS_TEAM = 8,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_DO_REMOVE_MEMBER = 9,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_PULL_TEAM_STORAGE_INVALID = 10,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_PULL_TEAM_STORAGE_NOT_IN_MEMBER = 11,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_UPDATE_CUSTOM_LOCK_ERROR = 12,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_DO_EXIT_TEAM = 13,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_BE_REMOVED_BY_CAPTAIN = 14,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_MODULE_BAN = 15,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_ENTER_OR_CREATE_PRIVATE_ROOM = 16,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_JOIN_NEW_TEAM = 17,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_SWITCH_SEASON = 18,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_NOT_HAS_REASON_ROLE = 19,
	ETGFPTDTER_EN_TEAM_EXIT_REASON_MAX       = 20,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnTeamInvitationCancelReason
// NumValues: 0x000B
enum class ETGFProtoTgfEnTeamInvitationCancelReason : uint8
{
	ETGFPTETICR_EN_TEAM_INVITATION_CANCEL_REASON_UNKNOWN = 0,
	ETGFPTETICR_EN_TEAM_INVITATION_CANCEL_REASON_TEAM_ID_NOT_MATCHED = 1,
	ETGFPTETICR_EN_TEAM_INVITATION_CANCEL_REASON_IS_MATCHING = 2,
	ETGFPTETICR_EN_TEAM_INVITATION_CANCEL_REASON_IS_IN_BATTLE = 3,
	ETGFPTETICR_EN_TEAM_INVITATION_CANCEL_REASON_TEAM_FULL = 4,
	ETGFPTETICR_EN_TEAM_INVITATION_CANCEL_REASON_IS_IN_TEAM = 5,
	ETGFPTETICR_EN_TEAM_INVITATION_CANCEL_REASON_TIMEOUT = 6,
	ETGFPTETICR_EN_TEAM_INVITATION_CANCEL_REASON_IS_PRE_SEARCH = 7,
	ETGFPTETICR_EN_TEAM_INVITATION_CANCEL_REASON_SEASON_ROLE_NOT_FOUND = 8,
	ETGFPTETICR_EN_TEAM_INVITATION_CANCEL_REASON_IS_IN_PRIVATE_ROOM = 9,
	ETGFPTETICR_EN_TEAM_INVITATION_CANCEL_REASON_MAX = 10,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnTeamInvitationRejectReason
// NumValues: 0x0008
enum class ETGFProtoTgfEnTeamInvitationRejectReason : uint8
{
	ETGFPTETIRR_EN_TEAM_INVITATION_REJECT_REASON_UNKNOWN = 0,
	ETGFPTETIRR_EN_TEAM_INVITATION_REJECT_REASON_INVITEE_REJECT = 1,
	ETGFPTETIRR_EN_TEAM_INVITATION_REJECT_REASON_IS_IN_TEAM = 2,
	ETGFPTETIRR_EN_TEAM_INVITATION_REJECT_REASON_MODULE_BAN = 3,
	ETGFPTETIRR_EN_TEAM_INVITATION_REJECT_REASON_IS_IN_MATCHING = 4,
	ETGFPTETIRR_EN_TEAM_INVITATION_REJECT_REASON_IS_IN_BATTLE = 5,
	ETGFPTETIRR_EN_TEAM_INVITATION_REJECT_REASON_IS_PRE_SEARCH = 6,
	ETGFPTETIRR_EN_TEAM_INVITATION_REJECT_REASON_MAX = 7,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnTeamMatchCancelReason
// NumValues: 0x0008
enum class ETGFProtoTgfEnTeamMatchCancelReason : uint8
{
	ETGFPTETMCR_EN_TEAM_MATCH_CANCEL_REASON_UNKNOWN = 0,
	ETGFPTETMCR_EN_TEAM_MATCH_CANCEL_REASON_TIMEOUT = 1,
	ETGFPTETMCR_EN_TEAM_MATCH_CANCEL_REASON_CAPTAIN_OFFLINE = 2,
	ETGFPTETMCR_EN_TEAM_MATCH_CANCEL_REASON_CAPTAIN_STOP = 3,
	ETGFPTETMCR_EN_TEAM_MATCH_CANCEL_REASON_EXIT = 4,
	ETGFPTETMCR_EN_TEAM_MATCH_CANCEL_RPC_TIMEOUT = 5,
	ETGFPTETMCR_EN_TEAM_MATCH_CANCEL_MATCHED = 6,
	ETGFPTETMCR_EN_TEAM_MATCH_CANCEL_MAX     = 7,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDChatMessageTeamMemberAction
// NumValues: 0x000A
enum class ETGFProtoTgfDChatMessageTeamMemberAction : uint8
{
	ETGFPTDCMTMA_NOT_SET                     = 0,
	ETGFPTDCMTMA_Invite                      = 1,
	ETGFPTDCMTMA_JoinInTeam                  = 2,
	ETGFPTDCMTMA_Reject                      = 3,
	ETGFPTDCMTMA_Cancel                      = 4,
	ETGFPTDCMTMA_RejectApply                 = 5,
	ETGFPTDCMTMA_RemoveMember                = 6,
	ETGFPTDCMTMA_ApplyJoinTeamCancel         = 7,
	ETGFPTDCMTMA_TeamMerge                   = 8,
	ETGFPTDCMTMA_MAX                         = 9,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDChatMessageTeamActionAction
// NumValues: 0x0019
enum class ETGFProtoTgfDChatMessageTeamActionAction : uint8
{
	ETGFPTDCMTAA_NOT_SET                     = 0,
	ETGFPTDCMTAA_DestroyTeam                 = 1,
	ETGFPTDCMTAA_AddMember                   = 3,
	ETGFPTDCMTAA_RemoveMember                = 4,
	ETGFPTDCMTAA_MemberConfirm               = 5,
	ETGFPTDCMTAA_ElectionCaptain             = 7,
	ETGFPTDCMTAA_StartMatching               = 11,
	ETGFPTDCMTAA_CancelMatching              = 12,
	ETGFPTDCMTAA_CheckMatching               = 13,
	ETGFPTDCMTAA_LevelSelectSwitch           = 14,
	ETGFPTDCMTAA_Approve                     = 15,
	ETGFPTDCMTAA_CreateTeam                  = 19,
	ETGFPTDCMTAA_ExitTeam                    = 20,
	ETGFPTDCMTAA_ApplyJoinTeam               = 21,
	ETGFPTDCMTAA_AcceptApply                 = 22,
	ETGFPTDCMTAA_AddGroup                    = 23,
	ETGFPTDCMTAA_MatchNotify                 = 24,
	ETGFPTDCMTAA_TeamSwitch                  = 25,
	ETGFPTDCMTAA_MatchCancel                 = 26,
	ETGFPTDCMTAA_PrivateRoomNotify           = 27,
	ETGFPTDCMTAA_PreStartMatching            = 28,
	ETGFPTDCMTAA_CancelPreStartMatching      = 29,
	ETGFPTDCMTAA_HallSwitch                  = 30,
	ETGFPTDCMTAA_ChallengerModelSwitch       = 31,
	ETGFPTDCMTAA_MAX                         = 32,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDTeamMatchEventLogEvent
// NumValues: 0x0004
enum class ETGFProtoTgfDTeamMatchEventLogEvent : uint8
{
	ETGFPTDTMELE_NOT_SET                     = 0,
	ETGFPTDTMELE_Cancel                      = 11,
	ETGFPTDTMELE_Matched                     = 12,
	ETGFPTDTMELE_MAX                         = 13,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnTradeConfirmationType
// NumValues: 0x0007
enum class ETGFProtoTgfEnTradeConfirmationType : uint8
{
	ETGFPTETCT_EN_TRADE_CONFIRMATION_TYPE_UNKNOWN = 0,
	ETGFPTETCT_EN_TRADE_CONFIRMATION_TYPE_MATCHMAKING = 1,
	ETGFPTETCT_EN_TRADE_CONFIRMATION_TYPE_USER_ELIMINATION = 2,
	ETGFPTETCT_EN_TRADE_CONFIRMATION_TYPE_SYSTEM_CONFIRM = 3,
	ETGFPTETCT_EN_TRADE_CONFIRMATION_TYPE_FAILED_RETURN = 4,
	ETGFPTETCT_EN_TRADE_CONFIRMATION_TYPE_ACE_CLONE = 5,
	ETGFPTETCT_EN_TRADE_CONFIRMATION_TYPE_MAX = 6,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnTradeOrderTicketState
// NumValues: 0x000B
enum class ETGFProtoTgfEnTradeOrderTicketState : uint8
{
	ETGFPTETOTS_EN_TRADE_ORDER_TICKET_STATE_UNKNOWN = 0,
	ETGFPTETOTS_EN_TRADE_ORDER_TICKET_STATE_UNPROCESSED = 1,
	ETGFPTETOTS_EN_TRADE_ORDER_TICKET_STATE_INEFFECTIVE = 11,
	ETGFPTETOTS_EN_TRADE_ORDER_TICKET_STATE_TRADING = 12,
	ETGFPTETOTS_EN_TRADE_ORDER_TICKET_STATE_CONFIRMING = 20,
	ETGFPTETOTS_EN_TRADE_ORDER_TICKET_STATE_CONFIRMATION = 21,
	ETGFPTETOTS_EN_TRADE_ORDER_TICKET_STATE_EXPIRATION = 22,
	ETGFPTETOTS_EN_TRADE_ORDER_TICKET_STATE_CANCEL = 23,
	ETGFPTETOTS_EN_TRADE_ORDER_TICKET_STATE_NOT_FOUND = 24,
	ETGFPTETOTS_EN_TRADE_ORDER_TICKET_STATE_CONFIRMATION_ERROR = 25,
	ETGFPTETOTS_EN_TRADE_ORDER_TICKET_STATE_MAX = 26,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnTradeOrderTicketLabelAttributeType
// NumValues: 0x0005
enum class ETGFProtoTgfEnTradeOrderTicketLabelAttributeType : uint8
{
	ETGFPTETOTLAT_EN_TRADE_ORDER_TICKET_LABEL_ATTRIBUTE_UNKNOWN = 0,
	ETGFPTETOTLAT_EN_TRADE_ORDER_TICKET_LABEL_ATTRIBUTE_RARITY = 1,
	ETGFPTETOTLAT_EN_TRADE_ORDER_TICKET_LABEL_ATTRIBUTE_LEVEL = 2,
	ETGFPTETOTLAT_EN_TRADE_ORDER_TICKET_LABEL_ATTRIBUTE_EQUIPMENT_RATING = 3,
	ETGFPTETOTLAT_EN_TRADE_ORDER_TICKET_LABEL_ATTRIBUTE_MAX = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnTradePriceMode
// NumValues: 0x0003
enum class ETGFProtoTgfEnTradePriceMode : uint8
{
	ETGFPTETPM_EN_TRADE_PRICE_MODE_CURRENT   = 0,
	ETGFPTETPM_EN_TRADE_PRICE_MODE_FIXED     = 1,
	ETGFPTETPM_EN_TRADE_PRICE_MODE_MAX       = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnTradeSearchSortBy
// NumValues: 0x0003
enum class ETGFProtoTgfEnTradeSearchSortBy : uint8
{
	ETGFPTETSSB_EN_TRADE_SEARCH_SORT_BY_RECOMMEND_SP = 0,
	ETGFPTETSSB_EN_TRADE_SEARCH_SORT_BY_PRICE = 1,
	ETGFPTETSSB_EN_TRADE_SEARCH_SORT_BY_MAX  = 2,
};

// Enum TGFBattleProtocol.ETGFProtoTgfEnTradeIndexUpdateReasonType
// NumValues: 0x0007
enum class ETGFProtoTgfEnTradeIndexUpdateReasonType : uint8
{
	ETGFPTETIURT_EN_TRADE_INDEX_UPDATE_REASON_NONE = 0,
	ETGFPTETIURT_EN_TRADE_INDEX_UPDATE_REASON_LOAD_ORDERSVR = 1,
	ETGFPTETIURT_EN_TRADE_INDEX_UPDATE_REASON_LOAD_MAIN = 2,
	ETGFPTETIURT_EN_TRADE_INDEX_UPDATE_REASON_LOAD_DATABASE = 3,
	ETGFPTETIURT_EN_TRADE_INDEX_UPDATE_REASON_ORDER_SYNC = 4,
	ETGFPTETIURT_EN_TRADE_INDEX_UPDATE_REASON_INDEX_SYNC = 5,
	ETGFPTETIURT_EN_TRADE_INDEX_UPDATE_REASON_MAX = 6,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDTradeOrderTicketMetaType
// NumValues: 0x0005
enum class ETGFProtoTgfDTradeOrderTicketMetaType : uint8
{
	ETGFPTDTOTMT_NOT_SET                     = 0,
	ETGFPTDTOTMT_SalesOrder                  = 11,
	ETGFPTDTOTMT_PurchaseOrder               = 12,
	ETGFPTDTOTMT_AuctionOrder                = 13,
	ETGFPTDTOTMT_MAX                         = 14,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDTradeOrderTicketEventLogEvent
// NumValues: 0x0005
enum class ETGFProtoTgfDTradeOrderTicketEventLogEvent : uint8
{
	ETGFPTDTOTELE_NOT_SET                    = 0,
	ETGFPTDTOTELE_State                      = 21,
	ETGFPTDTOTELE_Confirmation               = 22,
	ETGFPTDTOTELE_Auction                    = 23,
	ETGFPTDTOTELE_MAX                        = 24,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDTradePendingConfirmationData
// NumValues: 0x0004
enum class ETGFProtoTgfDTradePendingConfirmationData : uint8
{
	ETGFPTDTPCD_NOT_SET                      = 0,
	ETGFPTDTPCD_RefundData                   = 2,
	ETGFPTDTPCD_ConfirmationData             = 3,
	ETGFPTDTPCD_MAX                          = 4,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDTradeIndexProductOrderInfoOrder
// NumValues: 0x0004
enum class ETGFProtoTgfDTradeIndexProductOrderInfoOrder : uint8
{
	ETGFPTDTIPOIO_NOT_SET                    = 0,
	ETGFPTDTIPOIO_SaleOrder                  = 1,
	ETGFPTDTIPOIO_PurchaseOrder              = 2,
	ETGFPTDTIPOIO_MAX                        = 3,
};

// Enum TGFBattleProtocol.ETGFProtoTgfDFunctionUnlockConditionConditionType
// NumValues: 0x0005
enum class ETGFProtoTgfDFunctionUnlockConditionConditionType : uint8
{
	ETGFPTDFUCCT_NOT_SET                     = 0,
	ETGFPTDFUCCT_RoleLevel                   = 1,
	ETGFPTDFUCCT_UnlockByOtherSystem         = 2,
	ETGFPTDFUCCT_SeasonRoleLevel             = 3,
	ETGFPTDFUCCT_MAX                         = 4,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufExtensionRangeOptionsVerificationState
// NumValues: 0x0003
enum class ETGFProtoGoogleProtobufExtensionRangeOptionsVerificationState : uint8
{
	ETGFPGPEROVS_DECLARATION                 = 0,
	ETGFPGPEROVS_UNVERIFIED                  = 1,
	ETGFPGPEROVS_MAX                         = 2,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFieldDescriptorProtoType
// NumValues: 0x0014
enum class ETGFProtoGoogleProtobufFieldDescriptorProtoType : uint8
{
	ETGFPGPFDPT__UNKNOWN                     = 0,
	ETGFPGPFDPT_TYPE_DOUBLE                  = 1,
	ETGFPGPFDPT_TYPE_FLOAT                   = 2,
	ETGFPGPFDPT_TYPE_INT64                   = 3,
	ETGFPGPFDPT_TYPE_UINT64                  = 4,
	ETGFPGPFDPT_TYPE_INT32                   = 5,
	ETGFPGPFDPT_TYPE_FIXED64                 = 6,
	ETGFPGPFDPT_TYPE_FIXED32                 = 7,
	ETGFPGPFDPT_TYPE_BOOL                    = 8,
	ETGFPGPFDPT_TYPE_STRING                  = 9,
	ETGFPGPFDPT_TYPE_GROUP                   = 10,
	ETGFPGPFDPT_TYPE_MESSAGE                 = 11,
	ETGFPGPFDPT_TYPE_BYTES                   = 12,
	ETGFPGPFDPT_TYPE_UINT32                  = 13,
	ETGFPGPFDPT_TYPE_ENUM                    = 14,
	ETGFPGPFDPT_TYPE_SFIXED32                = 15,
	ETGFPGPFDPT_TYPE_SFIXED64                = 16,
	ETGFPGPFDPT_TYPE_SINT32                  = 17,
	ETGFPGPFDPT_TYPE_SINT64                  = 18,
	ETGFPGPFDPT_MAX                          = 19,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFieldDescriptorProtoLabel
// NumValues: 0x0005
enum class ETGFProtoGoogleProtobufFieldDescriptorProtoLabel : uint8
{
	ETGFPGPFDPL__UNKNOWN                     = 0,
	ETGFPGPFDPL_LABEL_OPTIONAL               = 1,
	ETGFPGPFDPL_LABEL_REPEATED               = 3,
	ETGFPGPFDPL_LABEL_REQUIRED               = 2,
	ETGFPGPFDPL_MAX                          = 4,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFileOptionsOptimizeMode
// NumValues: 0x0005
enum class ETGFProtoGoogleProtobufFileOptionsOptimizeMode : uint8
{
	ETGFPGPFOOM__UNKNOWN                     = 0,
	ETGFPGPFOOM_SPEED                        = 1,
	ETGFPGPFOOM_CODE_SIZE                    = 2,
	ETGFPGPFOOM_LITE_RUNTIME                 = 3,
	ETGFPGPFOOM_MAX                          = 4,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFieldOptionsCType
// NumValues: 0x0004
enum class ETGFProtoGoogleProtobufFieldOptionsCType : uint8
{
	ETGFPGPFOCT_STRING                       = 0,
	ETGFPGPFOCT_CORD                         = 1,
	ETGFPGPFOCT_STRING_PIECE                 = 2,
	ETGFPGPFOCT_MAX                          = 3,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFieldOptionsJSType
// NumValues: 0x0004
enum class ETGFProtoGoogleProtobufFieldOptionsJSType : uint8
{
	ETGFPGPFOJST_JS_NORMAL                   = 0,
	ETGFPGPFOJST_JS_STRING                   = 1,
	ETGFPGPFOJST_JS_NUMBER                   = 2,
	ETGFPGPFOJST_JS_MAX                      = 3,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFieldOptionsOptionRetention
// NumValues: 0x0004
enum class ETGFProtoGoogleProtobufFieldOptionsOptionRetention : uint8
{
	ETGFPGPFOOR_RETENTION_UNKNOWN            = 0,
	ETGFPGPFOOR_RETENTION_RUNTIME            = 1,
	ETGFPGPFOOR_RETENTION_SOURCE             = 2,
	ETGFPGPFOOR_RETENTION_MAX                = 3,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFieldOptionsOptionTargetType
// NumValues: 0x000B
enum class ETGFProtoGoogleProtobufFieldOptionsOptionTargetType : uint8
{
	ETGFPGPFOOTT_TARGET_TYPE_UNKNOWN         = 0,
	ETGFPGPFOOTT_TARGET_TYPE_FILE            = 1,
	ETGFPGPFOOTT_TARGET_TYPE_EXTENSION_RANGE = 2,
	ETGFPGPFOOTT_TARGET_TYPE_MESSAGE         = 3,
	ETGFPGPFOOTT_TARGET_TYPE_FIELD           = 4,
	ETGFPGPFOOTT_TARGET_TYPE_ONEOF           = 5,
	ETGFPGPFOOTT_TARGET_TYPE_ENUM            = 6,
	ETGFPGPFOOTT_TARGET_TYPE_ENUM_ENTRY      = 7,
	ETGFPGPFOOTT_TARGET_TYPE_SERVICE         = 8,
	ETGFPGPFOOTT_TARGET_TYPE_METHOD          = 9,
	ETGFPGPFOOTT_TARGET_TYPE_MAX             = 10,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufMethodOptionsIdempotencyLevel
// NumValues: 0x0004
enum class ETGFProtoGoogleProtobufMethodOptionsIdempotencyLevel : uint8
{
	ETGFPGPMOIL_IDEMPOTENCY_UNKNOWN          = 0,
	ETGFPGPMOIL_NO_SIDE_EFFECTS              = 1,
	ETGFPGPMOIL_IDEMPOTENT                   = 2,
	ETGFPGPMOIL_MAX                          = 3,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFeatureSetFieldPresence
// NumValues: 0x0005
enum class ETGFProtoGoogleProtobufFeatureSetFieldPresence : uint8
{
	ETGFPGPFSFP_FIELD_PRESENCE_UNKNOWN       = 0,
	ETGFPGPFSFP_EXPLICIT                     = 1,
	ETGFPGPFSFP_IMPLICIT                     = 2,
	ETGFPGPFSFP_LEGACY_REQUIRED              = 3,
	ETGFPGPFSFP_MAX                          = 4,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFeatureSetEnumType
// NumValues: 0x0004
enum class ETGFProtoGoogleProtobufFeatureSetEnumType : uint8
{
	ETGFPGPFSET_ENUM_TYPE_UNKNOWN            = 0,
	ETGFPGPFSET_OPEN                         = 1,
	ETGFPGPFSET_CLOSED                       = 2,
	ETGFPGPFSET_MAX                          = 3,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFeatureSetRepeatedFieldEncoding
// NumValues: 0x0004
enum class ETGFProtoGoogleProtobufFeatureSetRepeatedFieldEncoding : uint8
{
	ETGFPGPFSRFE_REPEATED_FIELD_ENCODING_UNKNOWN = 0,
	ETGFPGPFSRFE_PACKED                      = 1,
	ETGFPGPFSRFE_EXPANDED                    = 2,
	ETGFPGPFSRFE_MAX                         = 3,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFeatureSetUtf8Validation
// NumValues: 0x0004
enum class ETGFProtoGoogleProtobufFeatureSetUtf8Validation : uint8
{
	ETGFPGPFSU8V_UTF8_VALIDATION_UNKNOWN     = 0,
	ETGFPGPFSU8V_VERIFY                      = 2,
	ETGFPGPFSU8V_NONE                        = 3,
	ETGFPGPFSU8V_MAX                         = 4,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFeatureSetMessageEncoding
// NumValues: 0x0004
enum class ETGFProtoGoogleProtobufFeatureSetMessageEncoding : uint8
{
	ETGFPGPFSME_MESSAGE_ENCODING_UNKNOWN     = 0,
	ETGFPGPFSME_LENGTH_PREFIXED              = 1,
	ETGFPGPFSME_DELIMITED                    = 2,
	ETGFPGPFSME_MAX                          = 3,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufFeatureSetJsonFormat
// NumValues: 0x0004
enum class ETGFProtoGoogleProtobufFeatureSetJsonFormat : uint8
{
	ETGFPGPFSJF_JSON_FORMAT_UNKNOWN          = 0,
	ETGFPGPFSJF_ALLOW                        = 1,
	ETGFPGPFSJF_LEGACY_BEST_EFFORT           = 2,
	ETGFPGPFSJF_MAX                          = 3,
};

// Enum TGFBattleProtocol.ETGFProtoGoogleProtobufGeneratedCodeInfoAnnotationSemantic
// NumValues: 0x0004
enum class ETGFProtoGoogleProtobufGeneratedCodeInfoAnnotationSemantic : uint8
{
	ETGFPGPGCIAS_NONE                        = 0,
	ETGFPGPGCIAS_SET                         = 1,
	ETGFPGPGCIAS_ALIAS                       = 2,
	ETGFPGPGCIAS_MAX                         = 3,
};

// Enum TGFBattleProtocol.ETGFProtoXrescodeXrescodeIndexType
// NumValues: 0x0005
enum class ETGFProtoXrescodeXrescodeIndexType : uint8
{
	ETGFPXXIT_EN_INDEX_KV                    = 0,
	ETGFPXXIT_EN_INDEX_KL                    = 1,
	ETGFPXXIT_EN_INDEX_IV                    = 2,
	ETGFPXXIT_EN_INDEX_IL                    = 3,
	ETGFPXXIT_EN_INDEX_MAX                   = 4,
};

// Enum TGFBattleProtocol.ETGFProtoOrgXresloaderUeLoaderMode
// NumValues: 0x0004
enum class ETGFProtoOrgXresloaderUeLoaderMode : uint8
{
	ETGFPOXULM_EN_LOADER_MODE_DEFAULT        = 0,
	ETGFPOXULM_EN_LOADER_MODE_ENABLE         = 1,
	ETGFPOXULM_EN_LOADER_MODE_DISABLE        = 2,
	ETGFPOXULM_EN_LOADER_MODE_MAX            = 3,
};

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufAny
// 0x0010 (0x0010 - 0x0000)
struct FTGFPbDataGoogleProtobufAny final
{
public:
	class FString                                 TypeUrl;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufAny) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufAny");
static_assert(sizeof(FTGFPbDataGoogleProtobufAny) == 0x000010, "Wrong size on FTGFPbDataGoogleProtobufAny");
static_assert(offsetof(FTGFPbDataGoogleProtobufAny, TypeUrl) == 0x000000, "Member 'FTGFPbDataGoogleProtobufAny::TypeUrl' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule
// 0x0018 (0x0018 - 0x0000)
struct FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupOrder;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Init;                                              // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule) == 0x000008, "Wrong alignment on FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule");
static_assert(sizeof(FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule) == 0x000018, "Wrong size on FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule, Text) == 0x000000, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule::Text' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule, GroupOrder) == 0x000010, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule::GroupOrder' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule, Init) == 0x000014, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule::Init' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataRandomFloat
// 0x000C (0x000C - 0x0000)
struct FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomValueMin;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomValueMax;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat) == 0x000004, "Wrong alignment on FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat");
static_assert(sizeof(FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat) == 0x00000C, "Wrong size on FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat, CurrentValue) == 0x000000, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat::CurrentValue' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat, RandomValueMin) == 0x000004, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat::RandomValueMin' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat, RandomValueMax) == 0x000008, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat::RandomValueMax' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataAttribute
// 0x0040 (0x0040 - 0x0000)
struct FTGFPbDataTgfDBattleAffixDisplayDataAttribute final
{
public:
	ETGFProtoTgfDBattleAffixDisplayDataAttributeValue Value;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleDisplayOrder;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayPercentage;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroupOrder;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat Random;                                            // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Fixed;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCorruption;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Init;                                              // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute) == 0x000008, "Wrong alignment on FTGFPbDataTgfDBattleAffixDisplayDataAttribute");
static_assert(sizeof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute) == 0x000040, "Wrong size on FTGFPbDataTgfDBattleAffixDisplayDataAttribute");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute, Value) == 0x000000, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttribute::Value' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute, ID) == 0x000004, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttribute::ID' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute, DisplayOrder) == 0x000008, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttribute::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute, RoleDisplayOrder) == 0x00000C, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttribute::RoleDisplayOrder' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute, Name) == 0x000010, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttribute::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute, DisplayPercentage) == 0x000020, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttribute::DisplayPercentage' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute, GroupOrder) == 0x000024, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttribute::GroupOrder' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute, Random) == 0x000028, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttribute::Random' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute, Fixed) == 0x000034, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttribute::Fixed' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute, IsCorruption) == 0x000038, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttribute::IsCorruption' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttribute, Init) == 0x000039, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttribute::Init' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataRandomInt
// 0x000C (0x000C - 0x0000)
struct FTGFPbDataTgfDBattleAffixDisplayDataRandomInt final
{
public:
	int32                                         CurrentValue;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomValueMin;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomValueMax;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataTgfDBattleAffixDisplayDataRandomInt) == 0x000004, "Wrong alignment on FTGFPbDataTgfDBattleAffixDisplayDataRandomInt");
static_assert(sizeof(FTGFPbDataTgfDBattleAffixDisplayDataRandomInt) == 0x00000C, "Wrong size on FTGFPbDataTgfDBattleAffixDisplayDataRandomInt");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataRandomInt, CurrentValue) == 0x000000, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataRandomInt::CurrentValue' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataRandomInt, RandomValueMin) == 0x000004, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataRandomInt::RandomValueMin' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataRandomInt, RandomValueMax) == 0x000008, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataRandomInt::RandomValueMax' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataAbilitySet
// 0x0038 (0x0038 - 0x0000)
struct FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet final
{
public:
	ETGFProtoTgfDBattleAffixDisplayDataAbilitySetValue Value;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleDisplayOrder;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupOrder;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFPbDataTgfDBattleAffixDisplayDataRandomInt Random;                                            // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Fixed;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Init;                                              // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet) == 0x000008, "Wrong alignment on FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet");
static_assert(sizeof(FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet) == 0x000038, "Wrong size on FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet, Value) == 0x000000, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet::Value' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet, ID) == 0x000004, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet::ID' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet, DisplayOrder) == 0x000008, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet, RoleDisplayOrder) == 0x00000C, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet::RoleDisplayOrder' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet, Name) == 0x000010, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet, GroupOrder) == 0x000020, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet::GroupOrder' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet, Random) == 0x000024, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet::Random' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet, Fixed) == 0x000030, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet::Fixed' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet, Init) == 0x000034, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet::Init' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataGearSet
// 0x0038 (0x0038 - 0x0000)
struct FTGFPbDataTgfDBattleAffixDisplayDataGearSet final
{
public:
	ETGFProtoTgfDBattleAffixDisplayDataGearSetValue Value;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleDisplayOrder;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupOrder;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFPbDataTgfDBattleAffixDisplayDataRandomInt Random;                                            // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Fixed;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Init;                                              // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataTgfDBattleAffixDisplayDataGearSet) == 0x000008, "Wrong alignment on FTGFPbDataTgfDBattleAffixDisplayDataGearSet");
static_assert(sizeof(FTGFPbDataTgfDBattleAffixDisplayDataGearSet) == 0x000038, "Wrong size on FTGFPbDataTgfDBattleAffixDisplayDataGearSet");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGearSet, Value) == 0x000000, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGearSet::Value' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGearSet, ID) == 0x000004, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGearSet::ID' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGearSet, DisplayOrder) == 0x000008, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGearSet::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGearSet, RoleDisplayOrder) == 0x00000C, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGearSet::RoleDisplayOrder' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGearSet, Name) == 0x000010, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGearSet::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGearSet, GroupOrder) == 0x000020, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGearSet::GroupOrder' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGearSet, Random) == 0x000024, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGearSet::Random' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGearSet, Fixed) == 0x000030, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGearSet::Fixed' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGearSet, Init) == 0x000034, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGearSet::Init' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataAttrGearSet
// 0x0080 (0x0080 - 0x0000)
struct FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet final
{
public:
	ETGFProtoTgfDBattleAffixDisplayDataAttrGearSetAffix Affix;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFPbDataTgfDBattleAffixDisplayDataAttribute Attribute;                                         // 0x0008(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTGFPbDataTgfDBattleAffixDisplayDataGearSet GearSet;                                           // 0x0048(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet) == 0x000008, "Wrong alignment on FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet");
static_assert(sizeof(FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet) == 0x000080, "Wrong size on FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet, Affix) == 0x000000, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet::Affix' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet, Attribute) == 0x000008, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet::Attribute' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet, GearSet) == 0x000048, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet::GearSet' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataGemSlot
// 0x0028 (0x0028 - 0x0000)
struct FTGFPbDataTgfDBattleAffixDisplayDataGemSlot final
{
public:
	int32                                         GemShapeType;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GemId;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GemDisable;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet> GemAttributeDisplay;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Init;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataTgfDBattleAffixDisplayDataGemSlot) == 0x000008, "Wrong alignment on FTGFPbDataTgfDBattleAffixDisplayDataGemSlot");
static_assert(sizeof(FTGFPbDataTgfDBattleAffixDisplayDataGemSlot) == 0x000028, "Wrong size on FTGFPbDataTgfDBattleAffixDisplayDataGemSlot");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGemSlot, GemShapeType) == 0x000000, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGemSlot::GemShapeType' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGemSlot, GemId) == 0x000004, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGemSlot::GemId' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGemSlot, SlotId) == 0x000008, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGemSlot::SlotId' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGemSlot, GemDisable) == 0x00000C, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGemSlot::GemDisable' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGemSlot, GemAttributeDisplay) == 0x000010, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGemSlot::GemAttributeDisplay' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayDataGemSlot, Init) == 0x000020, "Member 'FTGFPbDataTgfDBattleAffixDisplayDataGemSlot::Init' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayData
// 0x0100 (0x0100 - 0x0000)
struct FTGFPbDataTgfDBattleAffixDisplayData final
{
public:
	ETGFProtoTgfDBattleAffixDisplayDataData       Data;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Location;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AffixType;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet AbilitySet;                                        // 0x0010(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTGFPbDataTgfDBattleAffixDisplayDataAttribute Attribute;                                         // 0x0048(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule MinorAffixDefaultRule;                             // 0x0088(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTGFPbDataTgfDBattleAffixDisplayDataGemSlot GemSlot;                                           // 0x00A0(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTGFPbDataTgfDBattleAffixDisplayDataGearSet GearSet;                                           // 0x00C8(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataTgfDBattleAffixDisplayData) == 0x000008, "Wrong alignment on FTGFPbDataTgfDBattleAffixDisplayData");
static_assert(sizeof(FTGFPbDataTgfDBattleAffixDisplayData) == 0x000100, "Wrong size on FTGFPbDataTgfDBattleAffixDisplayData");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayData, Data) == 0x000000, "Member 'FTGFPbDataTgfDBattleAffixDisplayData::Data' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayData, Location) == 0x000004, "Member 'FTGFPbDataTgfDBattleAffixDisplayData::Location' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayData, AffixType) == 0x000008, "Member 'FTGFPbDataTgfDBattleAffixDisplayData::AffixType' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayData, AbilitySet) == 0x000010, "Member 'FTGFPbDataTgfDBattleAffixDisplayData::AbilitySet' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayData, Attribute) == 0x000048, "Member 'FTGFPbDataTgfDBattleAffixDisplayData::Attribute' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayData, MinorAffixDefaultRule) == 0x000088, "Member 'FTGFPbDataTgfDBattleAffixDisplayData::MinorAffixDefaultRule' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayData, GemSlot) == 0x0000A0, "Member 'FTGFPbDataTgfDBattleAffixDisplayData::GemSlot' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDBattleAffixDisplayData, GearSet) == 0x0000C8, "Member 'FTGFPbDataTgfDBattleAffixDisplayData::GearSet' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataTgfDItemGemSlot
// 0x000C (0x000C - 0x0000)
struct FTGFPbDataTgfDItemGemSlot final
{
public:
	int32                                         SlotId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GemId;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AffixLocation;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataTgfDItemGemSlot) == 0x000004, "Wrong alignment on FTGFPbDataTgfDItemGemSlot");
static_assert(sizeof(FTGFPbDataTgfDItemGemSlot) == 0x00000C, "Wrong size on FTGFPbDataTgfDItemGemSlot");
static_assert(offsetof(FTGFPbDataTgfDItemGemSlot, SlotId) == 0x000000, "Member 'FTGFPbDataTgfDItemGemSlot::SlotId' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDItemGemSlot, GemId) == 0x000004, "Member 'FTGFPbDataTgfDItemGemSlot::GemId' has a wrong offset!");
static_assert(offsetof(FTGFPbDataTgfDItemGemSlot, AffixLocation) == 0x000008, "Member 'FTGFPbDataTgfDItemGemSlot::AffixLocation' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataTgfDItemGem
// 0x0010 (0x0010 - 0x0000)
struct FTGFPbDataTgfDItemGem final
{
public:
	TArray<struct FTGFPbDataTgfDItemGemSlot>      SlotData;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataTgfDItemGem) == 0x000008, "Wrong alignment on FTGFPbDataTgfDItemGem");
static_assert(sizeof(FTGFPbDataTgfDItemGem) == 0x000010, "Wrong size on FTGFPbDataTgfDItemGem");
static_assert(offsetof(FTGFPbDataTgfDItemGem, SlotData) == 0x000000, "Member 'FTGFPbDataTgfDItemGem::SlotData' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation
// 0x0030 (0x0030 - 0x0000)
struct FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation final
{
public:
	TArray<int32>                                 Path;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 SourceFile;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Begin;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         End;                                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Semantic;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation");
static_assert(sizeof(FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation) == 0x000030, "Wrong size on FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation");
static_assert(offsetof(FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation, Path) == 0x000000, "Member 'FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation::Path' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation, SourceFile) == 0x000010, "Member 'FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation::SourceFile' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation, Begin) == 0x000020, "Member 'FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation::Begin' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation, End) == 0x000024, "Member 'FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation::End' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation, Semantic) == 0x000028, "Member 'FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation::Semantic' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufGeneratedCodeInfo
// 0x0010 (0x0010 - 0x0000)
struct FTGFPbDataGoogleProtobufGeneratedCodeInfo final
{
public:
	TArray<struct FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation> Annotation;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufGeneratedCodeInfo) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufGeneratedCodeInfo");
static_assert(sizeof(FTGFPbDataGoogleProtobufGeneratedCodeInfo) == 0x000010, "Wrong size on FTGFPbDataGoogleProtobufGeneratedCodeInfo");
static_assert(offsetof(FTGFPbDataGoogleProtobufGeneratedCodeInfo, Annotation) == 0x000000, "Member 'FTGFPbDataGoogleProtobufGeneratedCodeInfo::Annotation' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufSourceCodeInfoLocation
// 0x0050 (0x0050 - 0x0000)
struct FTGFPbDataGoogleProtobufSourceCodeInfoLocation final
{
public:
	TArray<int32>                                 Path;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Span;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 LeadingComments;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TrailingComments;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         LeadingDetachedComments;                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufSourceCodeInfoLocation) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufSourceCodeInfoLocation");
static_assert(sizeof(FTGFPbDataGoogleProtobufSourceCodeInfoLocation) == 0x000050, "Wrong size on FTGFPbDataGoogleProtobufSourceCodeInfoLocation");
static_assert(offsetof(FTGFPbDataGoogleProtobufSourceCodeInfoLocation, Path) == 0x000000, "Member 'FTGFPbDataGoogleProtobufSourceCodeInfoLocation::Path' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufSourceCodeInfoLocation, Span) == 0x000010, "Member 'FTGFPbDataGoogleProtobufSourceCodeInfoLocation::Span' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufSourceCodeInfoLocation, LeadingComments) == 0x000020, "Member 'FTGFPbDataGoogleProtobufSourceCodeInfoLocation::LeadingComments' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufSourceCodeInfoLocation, TrailingComments) == 0x000030, "Member 'FTGFPbDataGoogleProtobufSourceCodeInfoLocation::TrailingComments' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufSourceCodeInfoLocation, LeadingDetachedComments) == 0x000040, "Member 'FTGFPbDataGoogleProtobufSourceCodeInfoLocation::LeadingDetachedComments' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufSourceCodeInfo
// 0x0010 (0x0010 - 0x0000)
struct FTGFPbDataGoogleProtobufSourceCodeInfo final
{
public:
	TArray<struct FTGFPbDataGoogleProtobufSourceCodeInfoLocation> Location;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufSourceCodeInfo) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufSourceCodeInfo");
static_assert(sizeof(FTGFPbDataGoogleProtobufSourceCodeInfo) == 0x000010, "Wrong size on FTGFPbDataGoogleProtobufSourceCodeInfo");
static_assert(offsetof(FTGFPbDataGoogleProtobufSourceCodeInfo, Location) == 0x000000, "Member 'FTGFPbDataGoogleProtobufSourceCodeInfo::Location' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufFeatureSet
// 0x0018 (0x0018 - 0x0000)
struct FTGFPbDataGoogleProtobufFeatureSet final
{
public:
	int32                                         FieldPresence;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnumType;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepeatedFieldEncoding;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Utf8Validation;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageEncoding;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JsonFormat;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufFeatureSet) == 0x000004, "Wrong alignment on FTGFPbDataGoogleProtobufFeatureSet");
static_assert(sizeof(FTGFPbDataGoogleProtobufFeatureSet) == 0x000018, "Wrong size on FTGFPbDataGoogleProtobufFeatureSet");
static_assert(offsetof(FTGFPbDataGoogleProtobufFeatureSet, FieldPresence) == 0x000000, "Member 'FTGFPbDataGoogleProtobufFeatureSet::FieldPresence' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFeatureSet, EnumType) == 0x000004, "Member 'FTGFPbDataGoogleProtobufFeatureSet::EnumType' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFeatureSet, RepeatedFieldEncoding) == 0x000008, "Member 'FTGFPbDataGoogleProtobufFeatureSet::RepeatedFieldEncoding' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFeatureSet, Utf8Validation) == 0x00000C, "Member 'FTGFPbDataGoogleProtobufFeatureSet::Utf8Validation' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFeatureSet, MessageEncoding) == 0x000010, "Member 'FTGFPbDataGoogleProtobufFeatureSet::MessageEncoding' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFeatureSet, JsonFormat) == 0x000014, "Member 'FTGFPbDataGoogleProtobufFeatureSet::JsonFormat' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault
// 0x001C (0x001C - 0x0000)
struct FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault final
{
public:
	int32                                         Edition;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufFeatureSet     Features;                                          // 0x0004(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault) == 0x000004, "Wrong alignment on FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault");
static_assert(sizeof(FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault) == 0x00001C, "Wrong size on FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault");
static_assert(offsetof(FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault, Edition) == 0x000000, "Member 'FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault::Edition' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault, Features) == 0x000004, "Member 'FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault::Features' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufFeatureSetDefaults
// 0x0018 (0x0018 - 0x0000)
struct FTGFPbDataGoogleProtobufFeatureSetDefaults final
{
public:
	TArray<struct FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault> Defaults;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MinimumEdition;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumEdition;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufFeatureSetDefaults) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufFeatureSetDefaults");
static_assert(sizeof(FTGFPbDataGoogleProtobufFeatureSetDefaults) == 0x000018, "Wrong size on FTGFPbDataGoogleProtobufFeatureSetDefaults");
static_assert(offsetof(FTGFPbDataGoogleProtobufFeatureSetDefaults, Defaults) == 0x000000, "Member 'FTGFPbDataGoogleProtobufFeatureSetDefaults::Defaults' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFeatureSetDefaults, MinimumEdition) == 0x000010, "Member 'FTGFPbDataGoogleProtobufFeatureSetDefaults::MinimumEdition' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFeatureSetDefaults, MaximumEdition) == 0x000014, "Member 'FTGFPbDataGoogleProtobufFeatureSetDefaults::MaximumEdition' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufUninterpretedOptionNamePart
// 0x0018 (0x0018 - 0x0000)
struct FTGFPbDataGoogleProtobufUninterpretedOptionNamePart final
{
public:
	class FString                                 NamePart;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExtension;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataGoogleProtobufUninterpretedOptionNamePart) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufUninterpretedOptionNamePart");
static_assert(sizeof(FTGFPbDataGoogleProtobufUninterpretedOptionNamePart) == 0x000018, "Wrong size on FTGFPbDataGoogleProtobufUninterpretedOptionNamePart");
static_assert(offsetof(FTGFPbDataGoogleProtobufUninterpretedOptionNamePart, NamePart) == 0x000000, "Member 'FTGFPbDataGoogleProtobufUninterpretedOptionNamePart::NamePart' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufUninterpretedOptionNamePart, IsExtension) == 0x000010, "Member 'FTGFPbDataGoogleProtobufUninterpretedOptionNamePart::IsExtension' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufUninterpretedOption
// 0x0048 (0x0048 - 0x0000)
struct FTGFPbDataGoogleProtobufUninterpretedOption final
{
public:
	TArray<struct FTGFPbDataGoogleProtobufUninterpretedOptionNamePart> Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 IdentifierValue;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PositiveIntValue;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         NegativeIntValue;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DoubleValue;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AggregateValue;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufUninterpretedOption) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufUninterpretedOption");
static_assert(sizeof(FTGFPbDataGoogleProtobufUninterpretedOption) == 0x000048, "Wrong size on FTGFPbDataGoogleProtobufUninterpretedOption");
static_assert(offsetof(FTGFPbDataGoogleProtobufUninterpretedOption, Name) == 0x000000, "Member 'FTGFPbDataGoogleProtobufUninterpretedOption::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufUninterpretedOption, IdentifierValue) == 0x000010, "Member 'FTGFPbDataGoogleProtobufUninterpretedOption::IdentifierValue' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufUninterpretedOption, PositiveIntValue) == 0x000020, "Member 'FTGFPbDataGoogleProtobufUninterpretedOption::PositiveIntValue' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufUninterpretedOption, NegativeIntValue) == 0x000028, "Member 'FTGFPbDataGoogleProtobufUninterpretedOption::NegativeIntValue' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufUninterpretedOption, DoubleValue) == 0x000030, "Member 'FTGFPbDataGoogleProtobufUninterpretedOption::DoubleValue' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufUninterpretedOption, AggregateValue) == 0x000038, "Member 'FTGFPbDataGoogleProtobufUninterpretedOption::AggregateValue' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufEnumOptions
// 0x0030 (0x0030 - 0x0000)
struct FTGFPbDataGoogleProtobufEnumOptions final
{
public:
	bool                                          AllowAlias;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Deprecated;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeprecatedLegacyJsonFieldConflicts;                // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFPbDataGoogleProtobufFeatureSet     Features;                                          // 0x0004(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTGFPbDataGoogleProtobufUninterpretedOption> UninterpretedOption;                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufEnumOptions) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufEnumOptions");
static_assert(sizeof(FTGFPbDataGoogleProtobufEnumOptions) == 0x000030, "Wrong size on FTGFPbDataGoogleProtobufEnumOptions");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumOptions, AllowAlias) == 0x000000, "Member 'FTGFPbDataGoogleProtobufEnumOptions::AllowAlias' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumOptions, Deprecated) == 0x000001, "Member 'FTGFPbDataGoogleProtobufEnumOptions::Deprecated' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumOptions, DeprecatedLegacyJsonFieldConflicts) == 0x000002, "Member 'FTGFPbDataGoogleProtobufEnumOptions::DeprecatedLegacyJsonFieldConflicts' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumOptions, Features) == 0x000004, "Member 'FTGFPbDataGoogleProtobufEnumOptions::Features' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumOptions, UninterpretedOption) == 0x000020, "Member 'FTGFPbDataGoogleProtobufEnumOptions::UninterpretedOption' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufServiceOptions
// 0x0030 (0x0030 - 0x0000)
struct FTGFPbDataGoogleProtobufServiceOptions final
{
public:
	struct FTGFPbDataGoogleProtobufFeatureSet     Features;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Deprecated;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTGFPbDataGoogleProtobufUninterpretedOption> UninterpretedOption;                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufServiceOptions) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufServiceOptions");
static_assert(sizeof(FTGFPbDataGoogleProtobufServiceOptions) == 0x000030, "Wrong size on FTGFPbDataGoogleProtobufServiceOptions");
static_assert(offsetof(FTGFPbDataGoogleProtobufServiceOptions, Features) == 0x000000, "Member 'FTGFPbDataGoogleProtobufServiceOptions::Features' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufServiceOptions, Deprecated) == 0x000018, "Member 'FTGFPbDataGoogleProtobufServiceOptions::Deprecated' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufServiceOptions, UninterpretedOption) == 0x000020, "Member 'FTGFPbDataGoogleProtobufServiceOptions::UninterpretedOption' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufFileOptions
// 0x00D8 (0x00D8 - 0x0000)
struct FTGFPbDataGoogleProtobufFileOptions final
{
public:
	class FString                                 JavaPackage;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JavaOuterClassname;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JavaMultipleFiles;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JavaGenerateEqualsAndHash;                         // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JavaStringCheckUtf8;                               // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OptimizeFor;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GoPackage;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CcGenericServices;                                 // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JavaGenericServices;                               // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PyGenericServices;                                 // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Deprecated;                                        // 0x003B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CcEnableArenas;                                    // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ObjcClassPrefix;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CsharpNamespace;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwiftPrefix;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PhpClassPrefix;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PhpNamespace;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PhpMetadataNamespace;                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RubyPackage;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufFeatureSet     Features;                                          // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufUninterpretedOption> UninterpretedOption;                               // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufFileOptions) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufFileOptions");
static_assert(sizeof(FTGFPbDataGoogleProtobufFileOptions) == 0x0000D8, "Wrong size on FTGFPbDataGoogleProtobufFileOptions");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, JavaPackage) == 0x000000, "Member 'FTGFPbDataGoogleProtobufFileOptions::JavaPackage' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, JavaOuterClassname) == 0x000010, "Member 'FTGFPbDataGoogleProtobufFileOptions::JavaOuterClassname' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, JavaMultipleFiles) == 0x000020, "Member 'FTGFPbDataGoogleProtobufFileOptions::JavaMultipleFiles' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, JavaGenerateEqualsAndHash) == 0x000021, "Member 'FTGFPbDataGoogleProtobufFileOptions::JavaGenerateEqualsAndHash' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, JavaStringCheckUtf8) == 0x000022, "Member 'FTGFPbDataGoogleProtobufFileOptions::JavaStringCheckUtf8' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, OptimizeFor) == 0x000024, "Member 'FTGFPbDataGoogleProtobufFileOptions::OptimizeFor' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, GoPackage) == 0x000028, "Member 'FTGFPbDataGoogleProtobufFileOptions::GoPackage' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, CcGenericServices) == 0x000038, "Member 'FTGFPbDataGoogleProtobufFileOptions::CcGenericServices' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, JavaGenericServices) == 0x000039, "Member 'FTGFPbDataGoogleProtobufFileOptions::JavaGenericServices' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, PyGenericServices) == 0x00003A, "Member 'FTGFPbDataGoogleProtobufFileOptions::PyGenericServices' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, Deprecated) == 0x00003B, "Member 'FTGFPbDataGoogleProtobufFileOptions::Deprecated' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, CcEnableArenas) == 0x00003C, "Member 'FTGFPbDataGoogleProtobufFileOptions::CcEnableArenas' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, ObjcClassPrefix) == 0x000040, "Member 'FTGFPbDataGoogleProtobufFileOptions::ObjcClassPrefix' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, CsharpNamespace) == 0x000050, "Member 'FTGFPbDataGoogleProtobufFileOptions::CsharpNamespace' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, SwiftPrefix) == 0x000060, "Member 'FTGFPbDataGoogleProtobufFileOptions::SwiftPrefix' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, PhpClassPrefix) == 0x000070, "Member 'FTGFPbDataGoogleProtobufFileOptions::PhpClassPrefix' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, PhpNamespace) == 0x000080, "Member 'FTGFPbDataGoogleProtobufFileOptions::PhpNamespace' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, PhpMetadataNamespace) == 0x000090, "Member 'FTGFPbDataGoogleProtobufFileOptions::PhpMetadataNamespace' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, RubyPackage) == 0x0000A0, "Member 'FTGFPbDataGoogleProtobufFileOptions::RubyPackage' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, Features) == 0x0000B0, "Member 'FTGFPbDataGoogleProtobufFileOptions::Features' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileOptions, UninterpretedOption) == 0x0000C8, "Member 'FTGFPbDataGoogleProtobufFileOptions::UninterpretedOption' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufOneofOptions
// 0x0028 (0x0028 - 0x0000)
struct FTGFPbDataGoogleProtobufOneofOptions final
{
public:
	struct FTGFPbDataGoogleProtobufFeatureSet     Features;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufUninterpretedOption> UninterpretedOption;                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufOneofOptions) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufOneofOptions");
static_assert(sizeof(FTGFPbDataGoogleProtobufOneofOptions) == 0x000028, "Wrong size on FTGFPbDataGoogleProtobufOneofOptions");
static_assert(offsetof(FTGFPbDataGoogleProtobufOneofOptions, Features) == 0x000000, "Member 'FTGFPbDataGoogleProtobufOneofOptions::Features' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufOneofOptions, UninterpretedOption) == 0x000018, "Member 'FTGFPbDataGoogleProtobufOneofOptions::UninterpretedOption' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufOneofDescriptorProto
// 0x0038 (0x0038 - 0x0000)
struct FTGFPbDataGoogleProtobufOneofDescriptorProto final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufOneofOptions   Options;                                           // 0x0010(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufOneofDescriptorProto) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufOneofDescriptorProto");
static_assert(sizeof(FTGFPbDataGoogleProtobufOneofDescriptorProto) == 0x000038, "Wrong size on FTGFPbDataGoogleProtobufOneofDescriptorProto");
static_assert(offsetof(FTGFPbDataGoogleProtobufOneofDescriptorProto, Name) == 0x000000, "Member 'FTGFPbDataGoogleProtobufOneofDescriptorProto::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufOneofDescriptorProto, Options) == 0x000010, "Member 'FTGFPbDataGoogleProtobufOneofDescriptorProto::Options' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufMethodOptions
// 0x0030 (0x0030 - 0x0000)
struct FTGFPbDataGoogleProtobufMethodOptions final
{
public:
	bool                                          Deprecated;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IdempotencyLevel;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufFeatureSet     Features;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufUninterpretedOption> UninterpretedOption;                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufMethodOptions) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufMethodOptions");
static_assert(sizeof(FTGFPbDataGoogleProtobufMethodOptions) == 0x000030, "Wrong size on FTGFPbDataGoogleProtobufMethodOptions");
static_assert(offsetof(FTGFPbDataGoogleProtobufMethodOptions, Deprecated) == 0x000000, "Member 'FTGFPbDataGoogleProtobufMethodOptions::Deprecated' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMethodOptions, IdempotencyLevel) == 0x000004, "Member 'FTGFPbDataGoogleProtobufMethodOptions::IdempotencyLevel' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMethodOptions, Features) == 0x000008, "Member 'FTGFPbDataGoogleProtobufMethodOptions::Features' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMethodOptions, UninterpretedOption) == 0x000020, "Member 'FTGFPbDataGoogleProtobufMethodOptions::UninterpretedOption' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufMethodDescriptorProto
// 0x0068 (0x0068 - 0x0000)
struct FTGFPbDataGoogleProtobufMethodDescriptorProto final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InputType;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputType;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufMethodOptions  Options;                                           // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ClientStreaming;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerStreaming;                                   // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataGoogleProtobufMethodDescriptorProto) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufMethodDescriptorProto");
static_assert(sizeof(FTGFPbDataGoogleProtobufMethodDescriptorProto) == 0x000068, "Wrong size on FTGFPbDataGoogleProtobufMethodDescriptorProto");
static_assert(offsetof(FTGFPbDataGoogleProtobufMethodDescriptorProto, Name) == 0x000000, "Member 'FTGFPbDataGoogleProtobufMethodDescriptorProto::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMethodDescriptorProto, InputType) == 0x000010, "Member 'FTGFPbDataGoogleProtobufMethodDescriptorProto::InputType' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMethodDescriptorProto, OutputType) == 0x000020, "Member 'FTGFPbDataGoogleProtobufMethodDescriptorProto::OutputType' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMethodDescriptorProto, Options) == 0x000030, "Member 'FTGFPbDataGoogleProtobufMethodDescriptorProto::Options' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMethodDescriptorProto, ClientStreaming) == 0x000060, "Member 'FTGFPbDataGoogleProtobufMethodDescriptorProto::ClientStreaming' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMethodDescriptorProto, ServerStreaming) == 0x000061, "Member 'FTGFPbDataGoogleProtobufMethodDescriptorProto::ServerStreaming' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufServiceDescriptorProto
// 0x0050 (0x0050 - 0x0000)
struct FTGFPbDataGoogleProtobufServiceDescriptorProto final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufMethodDescriptorProto> Method;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufServiceOptions Options;                                           // 0x0020(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufServiceDescriptorProto) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufServiceDescriptorProto");
static_assert(sizeof(FTGFPbDataGoogleProtobufServiceDescriptorProto) == 0x000050, "Wrong size on FTGFPbDataGoogleProtobufServiceDescriptorProto");
static_assert(offsetof(FTGFPbDataGoogleProtobufServiceDescriptorProto, Name) == 0x000000, "Member 'FTGFPbDataGoogleProtobufServiceDescriptorProto::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufServiceDescriptorProto, Method) == 0x000010, "Member 'FTGFPbDataGoogleProtobufServiceDescriptorProto::Method' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufServiceDescriptorProto, Options) == 0x000020, "Member 'FTGFPbDataGoogleProtobufServiceDescriptorProto::Options' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufMessageOptions
// 0x0030 (0x0030 - 0x0000)
struct FTGFPbDataGoogleProtobufMessageOptions final
{
public:
	bool                                          MessageSetWireFormat;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoStandardDescriptorAccessor;                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Deprecated;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapEntry;                                          // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeprecatedLegacyJsonFieldConflicts;                // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFPbDataGoogleProtobufFeatureSet     Features;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufUninterpretedOption> UninterpretedOption;                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufMessageOptions) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufMessageOptions");
static_assert(sizeof(FTGFPbDataGoogleProtobufMessageOptions) == 0x000030, "Wrong size on FTGFPbDataGoogleProtobufMessageOptions");
static_assert(offsetof(FTGFPbDataGoogleProtobufMessageOptions, MessageSetWireFormat) == 0x000000, "Member 'FTGFPbDataGoogleProtobufMessageOptions::MessageSetWireFormat' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMessageOptions, NoStandardDescriptorAccessor) == 0x000001, "Member 'FTGFPbDataGoogleProtobufMessageOptions::NoStandardDescriptorAccessor' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMessageOptions, Deprecated) == 0x000002, "Member 'FTGFPbDataGoogleProtobufMessageOptions::Deprecated' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMessageOptions, MapEntry) == 0x000003, "Member 'FTGFPbDataGoogleProtobufMessageOptions::MapEntry' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMessageOptions, DeprecatedLegacyJsonFieldConflicts) == 0x000004, "Member 'FTGFPbDataGoogleProtobufMessageOptions::DeprecatedLegacyJsonFieldConflicts' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMessageOptions, Features) == 0x000008, "Member 'FTGFPbDataGoogleProtobufMessageOptions::Features' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufMessageOptions, UninterpretedOption) == 0x000020, "Member 'FTGFPbDataGoogleProtobufMessageOptions::UninterpretedOption' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufEnumValueOptions
// 0x0030 (0x0030 - 0x0000)
struct FTGFPbDataGoogleProtobufEnumValueOptions final
{
public:
	bool                                          Deprecated;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFPbDataGoogleProtobufFeatureSet     Features;                                          // 0x0004(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          DebugRedact;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTGFPbDataGoogleProtobufUninterpretedOption> UninterpretedOption;                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufEnumValueOptions) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufEnumValueOptions");
static_assert(sizeof(FTGFPbDataGoogleProtobufEnumValueOptions) == 0x000030, "Wrong size on FTGFPbDataGoogleProtobufEnumValueOptions");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumValueOptions, Deprecated) == 0x000000, "Member 'FTGFPbDataGoogleProtobufEnumValueOptions::Deprecated' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumValueOptions, Features) == 0x000004, "Member 'FTGFPbDataGoogleProtobufEnumValueOptions::Features' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumValueOptions, DebugRedact) == 0x00001C, "Member 'FTGFPbDataGoogleProtobufEnumValueOptions::DebugRedact' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumValueOptions, UninterpretedOption) == 0x000020, "Member 'FTGFPbDataGoogleProtobufEnumValueOptions::UninterpretedOption' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufEnumValueDescriptorProto
// 0x0048 (0x0048 - 0x0000)
struct FTGFPbDataGoogleProtobufEnumValueDescriptorProto final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTGFPbDataGoogleProtobufEnumValueOptions Options;                                           // 0x0018(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufEnumValueDescriptorProto) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufEnumValueDescriptorProto");
static_assert(sizeof(FTGFPbDataGoogleProtobufEnumValueDescriptorProto) == 0x000048, "Wrong size on FTGFPbDataGoogleProtobufEnumValueDescriptorProto");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumValueDescriptorProto, Name) == 0x000000, "Member 'FTGFPbDataGoogleProtobufEnumValueDescriptorProto::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumValueDescriptorProto, Number) == 0x000010, "Member 'FTGFPbDataGoogleProtobufEnumValueDescriptorProto::Number' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumValueDescriptorProto, Options) == 0x000018, "Member 'FTGFPbDataGoogleProtobufEnumValueDescriptorProto::Options' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufFieldOptionsEditionDefault
// 0x0018 (0x0018 - 0x0000)
struct FTGFPbDataGoogleProtobufFieldOptionsEditionDefault final
{
public:
	int32                                         Edition;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufFieldOptionsEditionDefault) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufFieldOptionsEditionDefault");
static_assert(sizeof(FTGFPbDataGoogleProtobufFieldOptionsEditionDefault) == 0x000018, "Wrong size on FTGFPbDataGoogleProtobufFieldOptionsEditionDefault");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptionsEditionDefault, Edition) == 0x000000, "Member 'FTGFPbDataGoogleProtobufFieldOptionsEditionDefault::Edition' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptionsEditionDefault, Value) == 0x000008, "Member 'FTGFPbDataGoogleProtobufFieldOptionsEditionDefault::Value' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufFieldOptions
// 0x0060 (0x0060 - 0x0000)
struct FTGFPbDataGoogleProtobufFieldOptions final
{
public:
	int32                                         Ctype;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Packed;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Jstype;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lazy;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UnverifiedLazy;                                    // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Deprecated;                                        // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Weak;                                              // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugRedact;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Retention;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Targets;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufFieldOptionsEditionDefault> EditionDefaults;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufFeatureSet     Features;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufUninterpretedOption> UninterpretedOption;                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufFieldOptions) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufFieldOptions");
static_assert(sizeof(FTGFPbDataGoogleProtobufFieldOptions) == 0x000060, "Wrong size on FTGFPbDataGoogleProtobufFieldOptions");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, Ctype) == 0x000000, "Member 'FTGFPbDataGoogleProtobufFieldOptions::Ctype' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, Packed) == 0x000004, "Member 'FTGFPbDataGoogleProtobufFieldOptions::Packed' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, Jstype) == 0x000008, "Member 'FTGFPbDataGoogleProtobufFieldOptions::Jstype' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, Lazy) == 0x00000C, "Member 'FTGFPbDataGoogleProtobufFieldOptions::Lazy' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, UnverifiedLazy) == 0x00000D, "Member 'FTGFPbDataGoogleProtobufFieldOptions::UnverifiedLazy' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, Deprecated) == 0x00000E, "Member 'FTGFPbDataGoogleProtobufFieldOptions::Deprecated' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, Weak) == 0x00000F, "Member 'FTGFPbDataGoogleProtobufFieldOptions::Weak' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, DebugRedact) == 0x000010, "Member 'FTGFPbDataGoogleProtobufFieldOptions::DebugRedact' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, Retention) == 0x000014, "Member 'FTGFPbDataGoogleProtobufFieldOptions::Retention' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, Targets) == 0x000018, "Member 'FTGFPbDataGoogleProtobufFieldOptions::Targets' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, EditionDefaults) == 0x000028, "Member 'FTGFPbDataGoogleProtobufFieldOptions::EditionDefaults' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, Features) == 0x000038, "Member 'FTGFPbDataGoogleProtobufFieldOptions::Features' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldOptions, UninterpretedOption) == 0x000050, "Member 'FTGFPbDataGoogleProtobufFieldOptions::UninterpretedOption' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufFieldDescriptorProto
// 0x00D0 (0x00D0 - 0x0000)
struct FTGFPbDataGoogleProtobufFieldDescriptorProto final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Label;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TypeName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extendee;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OneofIndex;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JsonName;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufFieldOptions   Options;                                           // 0x0068(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Proto3Optional;                                    // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataGoogleProtobufFieldDescriptorProto) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufFieldDescriptorProto");
static_assert(sizeof(FTGFPbDataGoogleProtobufFieldDescriptorProto) == 0x0000D0, "Wrong size on FTGFPbDataGoogleProtobufFieldDescriptorProto");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldDescriptorProto, Name) == 0x000000, "Member 'FTGFPbDataGoogleProtobufFieldDescriptorProto::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldDescriptorProto, Number) == 0x000010, "Member 'FTGFPbDataGoogleProtobufFieldDescriptorProto::Number' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldDescriptorProto, Label) == 0x000014, "Member 'FTGFPbDataGoogleProtobufFieldDescriptorProto::Label' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldDescriptorProto, Type) == 0x000018, "Member 'FTGFPbDataGoogleProtobufFieldDescriptorProto::Type' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldDescriptorProto, TypeName) == 0x000020, "Member 'FTGFPbDataGoogleProtobufFieldDescriptorProto::TypeName' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldDescriptorProto, Extendee) == 0x000030, "Member 'FTGFPbDataGoogleProtobufFieldDescriptorProto::Extendee' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldDescriptorProto, DefaultValue) == 0x000040, "Member 'FTGFPbDataGoogleProtobufFieldDescriptorProto::DefaultValue' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldDescriptorProto, OneofIndex) == 0x000050, "Member 'FTGFPbDataGoogleProtobufFieldDescriptorProto::OneofIndex' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldDescriptorProto, JsonName) == 0x000058, "Member 'FTGFPbDataGoogleProtobufFieldDescriptorProto::JsonName' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldDescriptorProto, Options) == 0x000068, "Member 'FTGFPbDataGoogleProtobufFieldDescriptorProto::Options' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFieldDescriptorProto, Proto3Optional) == 0x0000C8, "Member 'FTGFPbDataGoogleProtobufFieldDescriptorProto::Proto3Optional' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange
// 0x0008 (0x0008 - 0x0000)
struct FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange final
{
public:
	int32                                         Start;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         End;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange) == 0x000004, "Wrong alignment on FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange");
static_assert(sizeof(FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange) == 0x000008, "Wrong size on FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange, Start) == 0x000000, "Member 'FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange::Start' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange, End) == 0x000004, "Member 'FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange::End' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufEnumDescriptorProto
// 0x0070 (0x0070 - 0x0000)
struct FTGFPbDataGoogleProtobufEnumDescriptorProto final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufEnumValueDescriptorProto> Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufEnumOptions    Options;                                           // 0x0020(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange> ReservedRange;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReservedName;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufEnumDescriptorProto) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufEnumDescriptorProto");
static_assert(sizeof(FTGFPbDataGoogleProtobufEnumDescriptorProto) == 0x000070, "Wrong size on FTGFPbDataGoogleProtobufEnumDescriptorProto");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumDescriptorProto, Name) == 0x000000, "Member 'FTGFPbDataGoogleProtobufEnumDescriptorProto::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumDescriptorProto, Value) == 0x000010, "Member 'FTGFPbDataGoogleProtobufEnumDescriptorProto::Value' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumDescriptorProto, Options) == 0x000020, "Member 'FTGFPbDataGoogleProtobufEnumDescriptorProto::Options' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumDescriptorProto, ReservedRange) == 0x000050, "Member 'FTGFPbDataGoogleProtobufEnumDescriptorProto::ReservedRange' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufEnumDescriptorProto, ReservedName) == 0x000060, "Member 'FTGFPbDataGoogleProtobufEnumDescriptorProto::ReservedName' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration
// 0x0030 (0x0030 - 0x0000)
struct FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FullName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reserved;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Repeated;                                          // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration");
static_assert(sizeof(FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration) == 0x000030, "Wrong size on FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration");
static_assert(offsetof(FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration, Number) == 0x000000, "Member 'FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration::Number' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration, FullName) == 0x000008, "Member 'FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration::FullName' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration, Type) == 0x000018, "Member 'FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration::Type' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration, Reserved) == 0x000028, "Member 'FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration::Reserved' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration, Repeated) == 0x000029, "Member 'FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration::Repeated' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufExtensionRangeOptions
// 0x0040 (0x0040 - 0x0000)
struct FTGFPbDataGoogleProtobufExtensionRangeOptions final
{
public:
	TArray<struct FTGFPbDataGoogleProtobufUninterpretedOption> UninterpretedOption;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration> Declaration;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufFeatureSet     Features;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Verification;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataGoogleProtobufExtensionRangeOptions) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufExtensionRangeOptions");
static_assert(sizeof(FTGFPbDataGoogleProtobufExtensionRangeOptions) == 0x000040, "Wrong size on FTGFPbDataGoogleProtobufExtensionRangeOptions");
static_assert(offsetof(FTGFPbDataGoogleProtobufExtensionRangeOptions, UninterpretedOption) == 0x000000, "Member 'FTGFPbDataGoogleProtobufExtensionRangeOptions::UninterpretedOption' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufExtensionRangeOptions, Declaration) == 0x000010, "Member 'FTGFPbDataGoogleProtobufExtensionRangeOptions::Declaration' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufExtensionRangeOptions, Features) == 0x000020, "Member 'FTGFPbDataGoogleProtobufExtensionRangeOptions::Features' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufExtensionRangeOptions, Verification) == 0x000038, "Member 'FTGFPbDataGoogleProtobufExtensionRangeOptions::Verification' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufDescriptorProtoExtensionRange
// 0x0048 (0x0048 - 0x0000)
struct FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange final
{
public:
	int32                                         Start;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         End;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufExtensionRangeOptions Options;                                           // 0x0008(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange");
static_assert(sizeof(FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange) == 0x000048, "Wrong size on FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange, Start) == 0x000000, "Member 'FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange::Start' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange, End) == 0x000004, "Member 'FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange::End' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange, Options) == 0x000008, "Member 'FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange::Options' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufDescriptorProtoReservedRange
// 0x0008 (0x0008 - 0x0000)
struct FTGFPbDataGoogleProtobufDescriptorProtoReservedRange final
{
public:
	int32                                         Start;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         End;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufDescriptorProtoReservedRange) == 0x000004, "Wrong alignment on FTGFPbDataGoogleProtobufDescriptorProtoReservedRange");
static_assert(sizeof(FTGFPbDataGoogleProtobufDescriptorProtoReservedRange) == 0x000008, "Wrong size on FTGFPbDataGoogleProtobufDescriptorProtoReservedRange");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProtoReservedRange, Start) == 0x000000, "Member 'FTGFPbDataGoogleProtobufDescriptorProtoReservedRange::Start' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProtoReservedRange, End) == 0x000004, "Member 'FTGFPbDataGoogleProtobufDescriptorProtoReservedRange::End' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufDescriptorProto
// 0x00B0 (0x00B0 - 0x0000)
struct FTGFPbDataGoogleProtobufDescriptorProto final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufFieldDescriptorProto> Field;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufFieldDescriptorProto> Extension;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufEnumDescriptorProto> EnumType;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange> ExtensionRange;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufOneofDescriptorProto> OneofDecl;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufMessageOptions Options;                                           // 0x0060(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufDescriptorProtoReservedRange> ReservedRange;                                     // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReservedName;                                      // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufDescriptorProto) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufDescriptorProto");
static_assert(sizeof(FTGFPbDataGoogleProtobufDescriptorProto) == 0x0000B0, "Wrong size on FTGFPbDataGoogleProtobufDescriptorProto");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProto, Name) == 0x000000, "Member 'FTGFPbDataGoogleProtobufDescriptorProto::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProto, Field) == 0x000010, "Member 'FTGFPbDataGoogleProtobufDescriptorProto::Field' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProto, Extension) == 0x000020, "Member 'FTGFPbDataGoogleProtobufDescriptorProto::Extension' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProto, EnumType) == 0x000030, "Member 'FTGFPbDataGoogleProtobufDescriptorProto::EnumType' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProto, ExtensionRange) == 0x000040, "Member 'FTGFPbDataGoogleProtobufDescriptorProto::ExtensionRange' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProto, OneofDecl) == 0x000050, "Member 'FTGFPbDataGoogleProtobufDescriptorProto::OneofDecl' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProto, Options) == 0x000060, "Member 'FTGFPbDataGoogleProtobufDescriptorProto::Options' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProto, ReservedRange) == 0x000090, "Member 'FTGFPbDataGoogleProtobufDescriptorProto::ReservedRange' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDescriptorProto, ReservedName) == 0x0000A0, "Member 'FTGFPbDataGoogleProtobufDescriptorProto::ReservedName' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufFileDescriptorProto
// 0x0190 (0x0190 - 0x0000)
struct FTGFPbDataGoogleProtobufFileDescriptorProto final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Package;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Dependency;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PublicDependency;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 WeakDependency;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufDescriptorProto> MessageType;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufEnumDescriptorProto> EnumType;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufServiceDescriptorProto> Service;                                           // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTGFPbDataGoogleProtobufFieldDescriptorProto> Extension;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufFileOptions    Options;                                           // 0x0090(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTGFPbDataGoogleProtobufSourceCodeInfo SourceCodeInfo;                                    // 0x0168(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Syntax;                                            // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Edition;                                           // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataGoogleProtobufFileDescriptorProto) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufFileDescriptorProto");
static_assert(sizeof(FTGFPbDataGoogleProtobufFileDescriptorProto) == 0x000190, "Wrong size on FTGFPbDataGoogleProtobufFileDescriptorProto");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, Name) == 0x000000, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::Name' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, Package) == 0x000010, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::Package' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, Dependency) == 0x000020, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::Dependency' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, PublicDependency) == 0x000030, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::PublicDependency' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, WeakDependency) == 0x000040, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::WeakDependency' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, MessageType) == 0x000050, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::MessageType' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, EnumType) == 0x000060, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::EnumType' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, Service) == 0x000070, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::Service' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, Extension) == 0x000080, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::Extension' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, Options) == 0x000090, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::Options' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, SourceCodeInfo) == 0x000168, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::SourceCodeInfo' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, Syntax) == 0x000178, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::Syntax' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorProto, Edition) == 0x000188, "Member 'FTGFPbDataGoogleProtobufFileDescriptorProto::Edition' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufFileDescriptorSet
// 0x0010 (0x0010 - 0x0000)
struct FTGFPbDataGoogleProtobufFileDescriptorSet final
{
public:
	TArray<struct FTGFPbDataGoogleProtobufFileDescriptorProto> File;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFPbDataGoogleProtobufFileDescriptorSet) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufFileDescriptorSet");
static_assert(sizeof(FTGFPbDataGoogleProtobufFileDescriptorSet) == 0x000010, "Wrong size on FTGFPbDataGoogleProtobufFileDescriptorSet");
static_assert(offsetof(FTGFPbDataGoogleProtobufFileDescriptorSet, File) == 0x000000, "Member 'FTGFPbDataGoogleProtobufFileDescriptorSet::File' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufDuration
// 0x0010 (0x0010 - 0x0000)
struct FTGFPbDataGoogleProtobufDuration final
{
public:
	int64                                         Seconds;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nanos;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataGoogleProtobufDuration) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufDuration");
static_assert(sizeof(FTGFPbDataGoogleProtobufDuration) == 0x000010, "Wrong size on FTGFPbDataGoogleProtobufDuration");
static_assert(offsetof(FTGFPbDataGoogleProtobufDuration, Seconds) == 0x000000, "Member 'FTGFPbDataGoogleProtobufDuration::Seconds' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufDuration, Nanos) == 0x000008, "Member 'FTGFPbDataGoogleProtobufDuration::Nanos' has a wrong offset!");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufEmpty
// 0x0001 (0x0001 - 0x0000)
struct FTGFPbDataGoogleProtobufEmpty final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataGoogleProtobufEmpty) == 0x000001, "Wrong alignment on FTGFPbDataGoogleProtobufEmpty");
static_assert(sizeof(FTGFPbDataGoogleProtobufEmpty) == 0x000001, "Wrong size on FTGFPbDataGoogleProtobufEmpty");

// ScriptStruct TGFBattleProtocol.TGFPbDataGoogleProtobufTimestamp
// 0x0010 (0x0010 - 0x0000)
struct FTGFPbDataGoogleProtobufTimestamp final
{
public:
	int64                                         Seconds;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nanos;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFPbDataGoogleProtobufTimestamp) == 0x000008, "Wrong alignment on FTGFPbDataGoogleProtobufTimestamp");
static_assert(sizeof(FTGFPbDataGoogleProtobufTimestamp) == 0x000010, "Wrong size on FTGFPbDataGoogleProtobufTimestamp");
static_assert(offsetof(FTGFPbDataGoogleProtobufTimestamp, Seconds) == 0x000000, "Member 'FTGFPbDataGoogleProtobufTimestamp::Seconds' has a wrong offset!");
static_assert(offsetof(FTGFPbDataGoogleProtobufTimestamp, Nanos) == 0x000008, "Member 'FTGFPbDataGoogleProtobufTimestamp::Nanos' has a wrong offset!");

}


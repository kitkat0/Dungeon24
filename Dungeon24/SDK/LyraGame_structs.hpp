#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LyraGame

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "TGFBattleProtocol_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "NetCore_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CommonInput_structs.hpp"


namespace SDK
{

// Enum LyraGame.ETgfPVPTeamColor
// NumValues: 0x0004
enum class ETgfPVPTeamColor : uint8
{
	None                                     = 0,
	Blue                                     = 1,
	Red                                      = 2,
	ETgfPVPTeamColor_MAX                     = 3,
};

// Enum LyraGame.ETgfCharaMatStateType
// NumValues: 0x000B
enum class ETgfCharaMatStateType : uint8
{
	TgfCharaMatState_Original                = 0,
	TgfCharaMatState_BuffStealthFirstPerson  = 1,
	TgfCharaMatState_BuffStealthFullCloak    = 2,
	TgfCharaMatState_BuffStealthHalfCloak    = 3,
	TgfCharaMatState_PVPDeath                = 4,
	TgfCharaMatState_PortalFade              = 5,
	TgfCharaMatState_CommonFade              = 6,
	TgfCharaMatState_Teleport                = 7,
	TgfCharaMatState_PVPNoDamage             = 41,
	TgfCharaMatState_BuffStone               = 42,
	TgfCharaMatState_MAX                     = 43,
};

// Enum LyraGame.ETgfWeaponChangeSlot
// NumValues: 0x0009
enum class ETgfWeaponChangeSlot : uint8
{
	TgfWeaponChangeSlotNone                  = 0,
	TgfWeaponChangeSlotWeaponPair1           = 1,
	TgfWeaponChangeSlotWeaponPair2           = 2,
	TgfWeaponChangeSlotConsumable1           = 3,
	TgfWeaponChangeSlotConsumable2           = 4,
	TgfWeaponChangeSlotConsumable3           = 5,
	TgfWeaponChangeSlotThrowable             = 6,
	TgfWeaponChangeSlotMAX                   = 7,
	ETgfWeaponChangeSlot_MAX                 = 8,
};

// Enum LyraGame.ETgfPauseActorTickReason
// NumValues: 0x0005
enum class ETgfPauseActorTickReason : uint8
{
	TgfPauseActorTickReasonNone              = 0,
	TgfPauseActorTickReasonDeath             = 1,
	TgfPauseActorTickReasonActorMap          = 2,
	TgfPauseActorTickReasonMonsterHold       = 3,
	ETgfPauseActorTickReason_MAX             = 4,
};

// Enum LyraGame.ETgfPauseDSMeshTickReason
// NumValues: 0x000A
enum class ETgfPauseDSMeshTickReason : uint8
{
	TgfPauseDSMeshTickReasonNone             = 0,
	TgfPauseDSMeshTickReasonDeath            = 1,
	TgfPauseDSMeshTickReasonCrouch           = 2,
	TgfPauseDSMeshTickReasonGuard            = 3,
	TgfPauseDSMeshTickReasonMonsterHold      = 4,
	TgfPauseDSMeshTickReasonMonsterAbility   = 5,
	TgfPauseDSMeshTickReasonMonsterDormant   = 6,
	TgfPauseDSMeshTickReasonMithrilResurrecting = 7,
	TgfPauseDSMeshTIckReasonMonsterWeak      = 8,
	ETgfPauseDSMeshTickReason_MAX            = 9,
};

// Enum LyraGame.ETgfPauseClientTickReason
// NumValues: 0x0003
enum class ETgfPauseClientTickReason : uint8
{
	TgfPauseClientTickReasonNone             = 0,
	TgfPauseClientTickReasonDeath            = 1,
	ETgfPauseClientTickReason_MAX            = 2,
};

// Enum LyraGame.EDeathZoneRuntimeState
// NumValues: 0x0006
enum class EDeathZoneRuntimeState : uint8
{
	Undefined                                = 0,
	Paused                                   = 1,
	AtInterval                               = 2,
	Shrinking                                = 3,
	Completed                                = 4,
	EDeathZoneRuntimeState_MAX               = 5,
};

// Enum LyraGame.EPortalType
// NumValues: 0x0006
enum class EPortalType : uint8
{
	None                                     = 0,
	Blue                                     = 1,
	Red                                      = 2,
	Shadow                                   = 3,
	Scroll                                   = 4,
	EPortalType_MAX                          = 5,
};

// Enum LyraGame.ETGFInGameRookieTaskType
// NumValues: 0x0026
enum class ETGFInGameRookieTaskType : uint8
{
	TgfInGameRookieTaskNone                  = 0,
	TgfInGameRookieFirstBlockBack            = 1,
	TgfInGameRookieFirstChargedBash          = 2,
	TgfInGameRookieFirstBreakItem            = 3,
	TgfIngameRookieTaskFirstUseFire          = 4,
	TgfInGameRookieTaskFirstTakeMedicine     = 5,
	TgfInGameRookieFirstEnvironmentDead      = 6,
	TgfInGameRookieFirstKillEliteMonster     = 7,
	TgfInGameRookieFirstKillBossMonster      = 8,
	TgfInGameRookieFirstReviveTeammate       = 9,
	TgfInGameRookieFirstEscapeWithScroll     = 10,
	TgfInGameRookieFirstEscapeWithoutScroll  = 11,
	TgfInGameRookieFirstEnterLevelTwo        = 12,
	TgfInGameRookieFirstEnterGame            = 13,
	TgfInGameRookieFirstAddFriend            = 14,
	TgfInGameRookieFirstFixEquip             = 15,
	TgfInGameRookieFirstInlayDiamond         = 16,
	TgfInGameRookieFirstProduceMedicine      = 17,
	TgfInGameRookieFirstTrade                = 18,
	TgfInGameRookieFirstPurchase             = 19,
	TgfInGameRookieFirstOpenPagePackage      = 20,
	TgfInGameRookieFirstOpenPageAlchemy      = 21,
	TgfInGameRookieFirstOpenPageTutorial     = 22,
	TgfInGameRookieKillAtLowHealth           = 23,
	TgfInGameRookieResurrectionRepay         = 24,
	TgfInGameRookieRevengeOneTeammate        = 25,
	TgfInGameRookieRevengeTwoTeammates       = 26,
	TgfInGameRookieSwordMasterWithAtLeastXTalents = 27,
	TgfInGameRookieFighterWithAtLeastXTalents = 28,
	TgfInGameRookiePriestWithAtLeastXTalents = 29,
	TgfInGameRookieRogueWithAtLeastXTalents  = 30,
	TgfInGameRookieWizardWithAtLeastXTalents = 31,
	TgfInGameRookieDeathKnightWithAtLeastXTalents = 32,
	TgfInGameRookieLichWithAtLeastXTalents   = 33,
	TgfInGameRookieDruidPantherWithAtLeastXTalents = 34,
	TgfInGameRookieBattleWithXWeapoons       = 35,
	TgfInGameRookieBattleWithXYWeapoons      = 36,
	ETGFInGameRookieTaskType_MAX             = 37,
};

// Enum LyraGame.ETgfInventoryOperationItemSourceType
// NumValues: 0x0004
enum class ETgfInventoryOperationItemSourceType : uint32
{
	None                                     = 0,
	Ordinary                                 = 1,
	Partial                                  = 2,
	ETgfInventoryOperationItemSourceType_MAX = 3,
};

// Enum LyraGame.ECreateRoleChooseSubType
// NumValues: 0x000E
enum class ECreateRoleChooseSubType : uint8
{
	None                                     = 0,
	FaceType                                 = 1,
	HairType                                 = 2,
	HairColor                                = 3,
	SkinColor                                = 4,
	EyeColor                                 = 5,
	TatooColor                               = 6,
	TatooType                                = 7,
	BeardType                                = 8,
	BeardColor                               = 9,
	ScarType                                 = 10,
	MakeupType                               = 11,
	MakeupColor                              = 12,
	ECreateRoleChooseSubType_MAX             = 13,
};

// Enum LyraGame.ECharacterCustomizationCollisionMode
// NumValues: 0x0003
enum class ECharacterCustomizationCollisionMode : uint8
{
	NoCollision                              = 0,
	UseCollisionFromCharacterPart            = 1,
	ECharacterCustomizationCollisionMode_MAX = 2,
};

// Enum LyraGame.EEffectsContextMatchType
// NumValues: 0x0003
enum class EEffectsContextMatchType : uint8
{
	ExactMatch                               = 0,
	BestMatch                                = 1,
	EEffectsContextMatchType_MAX             = 2,
};

// Enum LyraGame.ELyraStatDisplayMode
// NumValues: 0x0005
enum class ELyraStatDisplayMode : uint8
{
	Hidden                                   = 0,
	TextOnly                                 = 1,
	GraphOnly                                = 2,
	TextAndGraph                             = 3,
	ELyraStatDisplayMode_MAX                 = 4,
};

// Enum LyraGame.ELyraDisplayablePerformanceStat
// NumValues: 0x0011
enum class ELyraDisplayablePerformanceStat : uint8
{
	ClientFPS                                = 0,
	ServerFPS                                = 1,
	IdleTime                                 = 2,
	FrameTime                                = 3,
	FrameTime_GameThread                     = 4,
	FrameTime_RenderThread                   = 5,
	FrameTime_RHIThread                      = 6,
	FrameTime_GPU                            = 7,
	Ping                                     = 8,
	PacketLoss_Incoming                      = 9,
	PacketLoss_Outgoing                      = 10,
	PacketRate_Incoming                      = 11,
	PacketRate_Outgoing                      = 12,
	PacketSize_Incoming                      = 13,
	PacketSize_Outgoing                      = 14,
	Count                                    = 15,
	ELyraDisplayablePerformanceStat_MAX      = 16,
};

// Enum LyraGame.EnRoleDisplayAttribueID
// NumValues: 0x007A
enum class EnRoleDisplayAttribueID : uint8
{
	EN_ROLEDISPLAYATTRIBUTE_ID_NONE          = 0,
	EN_ROLEDISPLAYATTRIBUTE_ID_Level         = 1,
	EN_ROLEDISPLAYATTRIBUTE_ID_Health        = 2,
	EN_ROLEDISPLAYATTRIBUTE_ID_Strength      = 3,
	EN_ROLEDISPLAYATTRIBUTE_ID_Dexterity     = 4,
	EN_ROLEDISPLAYATTRIBUTE_ID_Stamina       = 5,
	EN_ROLEDISPLAYATTRIBUTE_ID_Intelligence  = 6,
	EN_ROLEDISPLAYATTRIBUTE_ID_Will          = 7,
	EN_ROLEDISPLAYATTRIBUTE_ID_Faith         = 8,
	EN_ROLEDISPLAYATTRIBUTE_ID_EquipLevel    = 127,
	EN_ROLEDISPLAYATTRIBUTE_ID_DPH           = 56,
	EN_ROLEDISPLAYATTRIBUTE_ID_AttackSpeedRate = 9,
	EN_ROLEDISPLAYATTRIBUTE_ID_AttackLevel   = 10,
	EN_ROLEDISPLAYATTRIBUTE_ID_AttackBonus   = 11,
	EN_ROLEDISPLAYATTRIBUTE_ID_CriticalStrikeChance = 12,
	EN_ROLEDISPLAYATTRIBUTE_ID_CriticalStrikeDamage = 13,
	EN_ROLEDISPLAYATTRIBUTE_ID_MovementSpeed = 14,
	EN_ROLEDISPLAYATTRIBUTE_ID_SkillDamageRate = 15,
	EN_ROLEDISPLAYATTRIBUTE_ID_PhysicalDamage = 16,
	EN_ROLEDISPLAYATTRIBUTE_ID_FireDamage    = 17,
	EN_ROLEDISPLAYATTRIBUTE_ID_LightningDamage = 18,
	EN_ROLEDISPLAYATTRIBUTE_ID_ColdDamage    = 19,
	EN_ROLEDISPLAYATTRIBUTE_ID_DivineDamage  = 20,
	EN_ROLEDISPLAYATTRIBUTE_ID_ShadowDamage  = 21,
	EN_ROLEDISPLAYATTRIBUTE_ID_PhysicalPenetration = 22,
	EN_ROLEDISPLAYATTRIBUTE_ID_FirePenetration = 23,
	EN_ROLEDISPLAYATTRIBUTE_ID_ColdPenetration = 24,
	EN_ROLEDISPLAYATTRIBUTE_ID_LightningPenetration = 25,
	EN_ROLEDISPLAYATTRIBUTE_ID_DivinePenetration = 26,
	EN_ROLEDISPLAYATTRIBUTE_ID_ShadowPenetration = 27,
	EN_ROLEDISPLAYATTRIBUTE_ID_DamagetoElites = 28,
	EN_ROLEDISPLAYATTRIBUTE_ID_DamagetoControlledEnemies = 29,
	EN_ROLEDISPLAYATTRIBUTE_ID_IgnoreDefense = 30,
	EN_ROLEDISPLAYATTRIBUTE_ID_DefenseLevel  = 31,
	EN_ROLEDISPLAYATTRIBUTE_ID_GuardedDamageNegation = 32,
	EN_ROLEDISPLAYATTRIBUTE_ID_PhysicalResistance = 33,
	EN_ROLEDISPLAYATTRIBUTE_ID_FireResistance = 34,
	EN_ROLEDISPLAYATTRIBUTE_ID_ColdResistance = 35,
	EN_ROLEDISPLAYATTRIBUTE_ID_LightningResistance = 36,
	EN_ROLEDISPLAYATTRIBUTE_ID_DivineResistance = 37,
	EN_ROLEDISPLAYATTRIBUTE_ID_ShadowResistance = 38,
	EN_ROLEDISPLAYATTRIBUTE_ID_DamageReductionfromElites = 39,
	EN_ROLEDISPLAYATTRIBUTE_ID_DamageReductionfromControlledEnemies = 40,
	EN_ROLEDISPLAYATTRIBUTE_ID_ShieldBonus   = 41,
	EN_ROLEDISPLAYATTRIBUTE_ID_ShieldReceiveRate = 42,
	EN_ROLEDISPLAYATTRIBUTE_ID_HealthRegenerationpersecond = 43,
	EN_ROLEDISPLAYATTRIBUTE_ID_HealthRegenerationonKill = 44,
	EN_ROLEDISPLAYATTRIBUTE_ID_HealthRegenerationonHit = 45,
	EN_ROLEDISPLAYATTRIBUTE_ID_LifeLeechonHit = 46,
	EN_ROLEDISPLAYATTRIBUTE_ID_HealBonus     = 47,
	EN_ROLEDISPLAYATTRIBUTE_ID_HealReceiveRate = 49,
	EN_ROLEDISPLAYATTRIBUTE_ID_ScenarioInteractionSpeed = 51,
	EN_ROLEDISPLAYATTRIBUTE_ID_WeaponChangeSpeed = 52,
	EN_ROLEDISPLAYATTRIBUTE_ID_ThrowableItemConsumeSpeed = 53,
	EN_ROLEDISPLAYATTRIBUTE_ID_RecoverableItemConsumeRate = 54,
	EN_ROLEDISPLAYATTRIBUTE_ID_ExplorePackageSpeedRate = 55,
	EN_ROLEDISPLAYATTRIBUTE_ID_ResCostReduceRate = 64,
	EN_ROLEDISPLAYATTRIBUTE_ID_ResGenerateRate = 57,
	EN_ROLEDISPLAYATTRIBUTE_ID_MaxMagic      = 58,
	EN_ROLEDISPLAYATTRIBUTE_ID_MagicOverTime = 60,
	EN_ROLEDISPLAYATTRIBUTE_ID_MagicOnHit    = 61,
	EN_ROLEDISPLAYATTRIBUTE_ID_MagicOnKill   = 62,
	EN_ROLEDISPLAYATTRIBUTE_ID_MagicOnHurt   = 63,
	EN_ROLEDISPLAYATTRIBUTE_ID_ShieldBoostRate = 65,
	EN_ROLEDISPLAYATTRIBUTE_ID_HealBoostRate = 66,
	EN_ROLEDISPLAYATTRIBUTE_ID_PortalInteractSpeedRate = 67,
	EN_ROLEDISPLAYATTRIBUTE_ID_AllElementDamage = 68,
	EN_ROLEDISPLAYATTRIBUTE_ID_AllElementResistance = 69,
	EN_ROLEDISPLAYATTRIBUTE_ID_AttackBoostRate = 70,
	EN_ROLEDISPLAYATTRIBUTE_ID_MaxHealthPercent = 72,
	EN_ROLEDISPLAYATTRIBUTE_ID_DamageReduceRate = 74,
	EN_ROLEDISPLAYATTRIBUTE_ID_DamageVulnerRate = 75,
	EN_ROLEDISPLAYATTRIBUTE_ID_InteractSpeedAdditional = 76,
	EN_ROLEDISPLAYATTRIBUTE_ID_HealWoundRate = 79,
	EN_ROLEDISPLAYATTRIBUTE_ID_EliteBoostRate = 80,
	EN_ROLEDISPLAYATTRIBUTE_ID_UncontrolledBoostRate = 81,
	EN_ROLEDISPLAYATTRIBUTE_ID_Magic         = 82,
	EN_ROLEDISPLAYATTRIBUTE_ID_MagicGenerateRate = 83,
	EN_ROLEDISPLAYATTRIBUTE_ID_MaxSoulEnergy = 84,
	EN_ROLEDISPLAYATTRIBUTE_ID_SoulEnergy    = 85,
	EN_ROLEDISPLAYATTRIBUTE_ID_SoulEnergyOverTime = 86,
	EN_ROLEDISPLAYATTRIBUTE_ID_SoulEnergyOnHit = 87,
	EN_ROLEDISPLAYATTRIBUTE_ID_SoulEnergyOnKill = 88,
	EN_ROLEDISPLAYATTRIBUTE_ID_SoulEnergyOnHurt = 89,
	EN_ROLEDISPLAYATTRIBUTE_ID_SoulEnergyGenerateRate = 90,
	EN_ROLEDISPLAYATTRIBUTE_ID_MaxNaturalEnergy = 91,
	EN_ROLEDISPLAYATTRIBUTE_ID_NaturalEnergy = 92,
	EN_ROLEDISPLAYATTRIBUTE_ID_NaturalEnergyOverTime = 93,
	EN_ROLEDISPLAYATTRIBUTE_ID_NaturalEnergyOnHit = 94,
	EN_ROLEDISPLAYATTRIBUTE_ID_NaturalEnergyOnKill = 95,
	EN_ROLEDISPLAYATTRIBUTE_ID_NaturalEnergyOnHurt = 96,
	EN_ROLEDISPLAYATTRIBUTE_ID_NaturalEnergyGenerateRate = 97,
	EN_ROLEDISPLAYATTRIBUTE_ID_SkillCooldownScaleRate = 98,
	EN_ROLEDISPLAYATTRIBUTE_ID_GainGoldOutOfPortal = 99,
	EN_ROLEDISPLAYATTRIBUTE_ID_ExpBoostRateOutOfPortal = 100,
	EN_ROLEDISPLAYATTRIBUTE_ID_KillingMaxLayerMaxHealthPercent = 101,
	EN_ROLEDISPLAYATTRIBUTE_ID_KillingMaxLayerAttackBoostRate = 102,
	EN_ROLEDISPLAYATTRIBUTE_ID_KillingMaxLayerCriticalRate = 103,
	EN_ROLEDISPLAYATTRIBUTE_ID_MoveSpeedWithHitRunning = 104,
	EN_ROLEDISPLAYATTRIBUTE_ID_HealOverTimeWithHitRunning = 105,
	EN_ROLEDISPLAYATTRIBUTE_ID_CriticalRateWithHitRunning = 106,
	EN_ROLEDISPLAYATTRIBUTE_ID_LifeLeachRateWithHitRunning = 107,
	EN_ROLEDISPLAYATTRIBUTE_ID_AttackBoostRateWithFullHealth = 108,
	EN_ROLEDISPLAYATTRIBUTE_ID_CriticalRateWithFullHealth = 109,
	EN_ROLEDISPLAYATTRIBUTE_ID_HealOnOpenChest = 110,
	EN_ROLEDISPLAYATTRIBUTE_ID_MagicOnOpenChest = 111,
	EN_ROLEDISPLAYATTRIBUTE_ID_GainGoldOnOpenChest = 112,
	EN_ROLEDISPLAYATTRIBUTE_ID_GainGoldOnKill = 113,
	EN_ROLEDISPLAYATTRIBUTE_ID_HealOnDefendSuccess = 114,
	EN_ROLEDISPLAYATTRIBUTE_ID_DamageOnDefendSuccess = 115,
	EN_ROLEDISPLAYATTRIBUTE_ID_AdditionalFixedDamageOnCausingHit = 116,
	EN_ROLEDISPLAYATTRIBUTE_ID_AddShieldOnCastSkill = 117,
	EN_ROLEDISPLAYATTRIBUTE_ID_AdditionalElementNoneDamageOnCausingHit = 118,
	EN_ROLEDISPLAYATTRIBUTE_ID_AdditionalElementFireDamageOnCausingHit = 119,
	EN_ROLEDISPLAYATTRIBUTE_ID_AdditionalElementIceDamageOnCausingHit = 120,
	EN_ROLEDISPLAYATTRIBUTE_ID_AdditionalElementThunderDamageOnCausingHit = 121,
	EN_ROLEDISPLAYATTRIBUTE_ID_AdditionalElementLightDamageOnCausingHit = 122,
	EN_ROLEDISPLAYATTRIBUTE_ID_AdditionalElementDarkDamageOnCausingHit = 123,
	EN_ROLEDISPLAYATTRIBUTE_ID_MaxHealthExtra = 124,
	EN_ROLEDISPLAYATTRIBUTE_ID_ExtraDefGearLevel = 125,
	EN_ROLEDISPLAYATTRIBUTE_ID_ExtraAttGearLevel = 126,
	EN_ROLEDISPLAYATTRIBUTE_ID_Max           = 200,
};

// Enum LyraGame.EnRoleDisplayAttributeIntConvert
// NumValues: 0x0004
enum class EnRoleDisplayAttributeIntConvert : uint8
{
	EnRoleDisplayAttributeIntConvert_Floor   = 0,
	EnRoleDisplayAttributeIntConvert_Ceil    = 1,
	EnRoleDisplayAttributeIntConvert_Round   = 2,
	EnRoleDisplayAttributeIntConvert_MAX     = 3,
};

// Enum LyraGame.EnRoleDisplayAttribueGroup
// NumValues: 0x0007
enum class EnRoleDisplayAttribueGroup : uint8
{
	EnRoleDisplayAttribueGroup_Core          = 0,
	EnRoleDisplayAttribueGroup_Offensive     = 1,
	EnRoleDisplayAttribueGroup_Defensive     = 2,
	EnRoleDisplayAttribueGroup_Special       = 3,
	EnRoleDisplayAttribueGroup_Interactive   = 4,
	EnRoleDisplayAttribueGroup_Additional    = 10,
	EnRoleDisplayAttribueGroup_MAX           = 11,
};

// Enum LyraGame.ESwordMasterSkillType
// NumValues: 0x0004
enum class ESwordMasterSkillType : uint8
{
	None                                     = 0,
	Skill_Q                                  = 1,
	Skill_E                                  = 2,
	ESwordMasterSkillType_MAX                = 3,
};

// Enum LyraGame.ETgfMovementMonitorType
// NumValues: 0x0003
enum class ETgfMovementMonitorType : uint8
{
	MonitorMove                              = 0,
	MonitorNoMove                            = 1,
	ETgfMovementMonitorType_MAX              = 2,
};

// Enum LyraGame.ETgfMovementMonitorCrouchSetting
// NumValues: 0x0004
enum class ETgfMovementMonitorCrouchSetting : uint8
{
	None                                     = 0,
	KeepCrouch                               = 1,
	KeepUnCrouch                             = 2,
	ETgfMovementMonitorCrouchSetting_MAX     = 3,
};

// Enum LyraGame.ETgfMonitorNetExecutionPolicy
// NumValues: 0x0004
enum class ETgfMonitorNetExecutionPolicy : uint8
{
	ServerOnly                               = 0,
	ClientOnly                               = 1,
	Both                                     = 2,
	ETgfMonitorNetExecutionPolicy_MAX        = 3,
};

// Enum LyraGame.ETgfMontageRateType
// NumValues: 0x0006
enum class ETgfMontageRateType : uint8
{
	DefaultRate                              = 0,
	AttackRate                               = 1,
	RecoverableItemConsumeRate               = 2,
	WeaponChangeSpeedRate                    = 3,
	ThrowableItemConsumeSpeedRate            = 4,
	ETgfMontageRateType_MAX                  = 5,
};

// Enum LyraGame.ETgfAIAbilityFilterOp
// NumValues: 0x0003
enum class ETgfAIAbilityFilterOp : uint8
{
	TgfAIAbilityFilterOpAnd                  = 0,
	TgfAIAbilityFilterOpOr                   = 1,
	ETgfAIAbilityFilterOp_MAX                = 2,
};

// Enum LyraGame.ETgfAIAbilityFilterType
// NumValues: 0x000A
enum class ETgfAIAbilityFilterType : uint8
{
	TgfAIAbilityFilterTypeNone               = 0,
	TgfAIAbilityFilterTypeHealthLow          = 1,
	TgfAIAbilityFilterTypeHealthHigh         = 2,
	TgfAIAbilityFilterTypeFriendlyCount      = 3,
	TgfAIAbilityFilterTypeHostileCount       = 4,
	TgfAIAbilityFilterTypeBoss               = 5,
	TgfAIAbilityFilterTypeEnemyBehind        = 6,
	TgfAIAbilityFilterTypeSummonsCount       = 7,
	TgfAIAbilityFilterTypeTags               = 8,
	ETgfAIAbilityFilterType_MAX              = 9,
};

// Enum LyraGame.ETgfAIAbilityTargetFilterType
// NumValues: 0x0012
enum class ETgfAIAbilityTargetFilterType : uint8
{
	TgfAIAbilityTargetFilterTypeNone         = 0,
	TgfAIAbilityTargetFilterTypeRange        = 1,
	TgfAIAbilityTargetFilterTypeThreats      = 2,
	TgfAIAbilityTargetFilterTypeFriendly     = 3,
	TgfAIAbilityTargetFilterTypeHostile      = 4,
	TgfAIAbilityTargetFilterTypeRace         = 5,
	TgfAIAbilityTargetFilterTypeCareer       = 6,
	TgfAIAbilityTargetFilterTypeHealthLowest = 7,
	TgfAIAbilityTargetFilterTypeHealthHighest = 8,
	TgfAIAbilityTargetFilterTypeThreatLowest = 9,
	TgfAIAbilityTargetFilterTypeThreatHighest = 10,
	TgfAIAbilityTargetFilterTypeNearest      = 11,
	TgfAIAbilityTargetFilterTypeFurthest     = 12,
	TgfAIAbilityTargetFilterTypeCareerPriority = 13,
	TgfAIAbilityTargetFilterTypeItemEquip    = 14,
	TgfAIAbilityTargetFilterTypeTags         = 15,
	TgfAIAbilityTargetFilterTypeAlternately  = 16,
	ETgfAIAbilityTargetFilterType_MAX        = 17,
};

// Enum LyraGame.ETgfAIAbilityTargetType
// NumValues: 0x0004
enum class ETgfAIAbilityTargetType : uint8
{
	TgfAIAbilityTargetTypeNone               = 0,
	TgfAIAbilityTargetTypeActor              = 1,
	TgfAIAbilityTargetTypeLocation           = 2,
	ETgfAIAbilityTargetType_MAX              = 3,
};

// Enum LyraGame.ETgfEffectPlacementTargetType
// NumValues: 0x0006
enum class ETgfEffectPlacementTargetType : uint8
{
	None                                     = 0,
	Self                                     = 1,
	RightHand                                = 2,
	LeftHand                                 = 3,
	WorldTransform                           = 4,
	ETgfEffectPlacementTargetType_MAX        = 5,
};

// Enum LyraGame.EWeaponAmmoType
// NumValues: 0x0007
enum class EWeaponAmmoType : uint8
{
	None                                     = 0,
	Arrow                                    = 1,
	Fire                                     = 2,
	Ice                                      = 3,
	Thunder                                  = 4,
	Additional                               = 10,
	EWeaponAmmoType_MAX                      = 11,
};

// Enum LyraGame.ETgfBattleElement
// NumValues: 0x0007
enum class ETgfBattleElement : uint8
{
	TgfElementNone                           = 0,
	TgfElementFire                           = 1,
	TgfElementIce                            = 2,
	TgfElementThunder                        = 3,
	TgfElementLight                          = 4,
	TgfElementDark                           = 5,
	ETgfBattleElement_MAX                    = 6,
};

// Enum LyraGame.ETgfActorCareer
// NumValues: 0x000E
enum class ETgfActorCareer : uint8
{
	TgfActorCareerNone                       = 0,
	TgfActorCareerSwordMaster                = 1,
	TgfActorCareerFighter                    = 2,
	TgfActorCareerRogue                      = 3,
	TgfActorCareerPriest                     = 4,
	TgfActorCareerWizard                     = 5,
	TgfActorCareerDeathKnight                = 6,
	TgfActorCareerLich                       = 7,
	TgfActorCareerDruidPanther               = 8,
	TgfActorCareerPaladin                    = 9,
	TgfActorCareerMithrilFighter             = 101,
	TgfActorCareerMithrilRogue               = 102,
	TgfActorCareerMithrilPriest              = 103,
	ETgfActorCareer_MAX                      = 104,
};

// Enum LyraGame.ETgfActorType
// NumValues: 0x000A
enum class ETgfActorType : uint8
{
	TgfActorTypeNone                         = 0,
	TgfActorTypePlayer                       = 1,
	TgfActorTypeBotPlayer                    = 2,
	TgfActorTypeObstacle                     = 3,
	TgfActorTypeMonster                      = 11,
	TgfActorTypeElite                        = 12,
	TgfActorTypeBoss                         = 13,
	TgfActorTypeSummon                       = 14,
	TgfActorTypeChest                        = 41,
	ETgfActorType_MAX                        = 42,
};

// Enum LyraGame.ETgfActorRace
// NumValues: 0x0005
enum class ETgfActorRace : uint8
{
	TgfActorRaceNone                         = 0,
	TgfActorRaceHuman                        = 1,
	TgfActorRaceElf                          = 2,
	TgfActorRaceUndead                       = 3,
	ETgfActorRace_MAX                        = 4,
};

// Enum LyraGame.ETgfActorGender
// NumValues: 0x0005
enum class ETgfActorGender : uint8
{
	TgfActorGenderNone                       = 0,
	TgfActorGenderMale                       = 1,
	TgfActorGenderFemale                     = 2,
	TgfActorGenderUndead                     = 3,
	ETgfActorGender_MAX                      = 4,
};

// Enum LyraGame.ETgfForceType
// NumValues: 0x0004
enum class ETgfForceType : uint8
{
	TgfForceTypeNone                         = 0,
	TgfForceTypeAdventurer                   = 1,
	TgfForceTypeMithrilForce                 = 2,
	ETgfForceType_MAX                        = 3,
};

// Enum LyraGame.ETgfPlayerSceneTag
// NumValues: 0x0003
enum class ETgfPlayerSceneTag : uint8
{
	TgfPlayerSceneTagDefault                 = 0,
	TgfPlayerSceneTagShadow                  = 1,
	ETgfPlayerSceneTag_MAX                   = 2,
};

// Enum LyraGame.ETgfSkinSlot
// NumValues: 0x0021
enum class ETgfSkinSlot : uint8
{
	TgfSkinSlotNone                          = 0,
	TgfSkinSlotClothChest                    = 1,
	TgfSkinSlotClothTrousers                 = 2,
	TgfSkinSlotClothHelmet                   = 3,
	TgfSkinSlotClothShoe                     = 4,
	TgfSkinSlotClothGlove                    = 5,
	TgfSkinSlotLeatherChest                  = 11,
	TgfSkinSlotLeatherTrousers               = 12,
	TgfSkinSlotLeatherHelmet                 = 13,
	TgfSkinSlotLeatherShoe                   = 14,
	TgfSkinSlotLeatherGlove                  = 15,
	TgfSkinSlotPlateChest                    = 21,
	TgfSkinSlotPlateTrousers                 = 22,
	TgfSkinSlotPlateHelmet                   = 23,
	TgfSkinSlotPlateShoe                     = 24,
	TgfSkinSlotPlateGlove                    = 25,
	TgfSkinSlotCloak                         = 31,
	TgfSkinSlotHeaddress                     = 32,
	TgfSkinSlotTorch                         = 41,
	TgfSkinSlotPotion                        = 51,
	TgfSkinSlotSword                         = 62,
	TgfSkinSlotShield                        = 63,
	TgfSkinSlotLongSword                     = 64,
	TgfSkinSlotDagger                        = 65,
	TgfSkinSlotMace                          = 66,
	TgfSkinSlotHeavyCrossbow                 = 81,
	TgfSkinSlotStaff                         = 101,
	TgfSkinSlotRelic                         = 102,
	TgfSkinSlotAttachingWaist                = 121,
	TgfSkinSlotAttachingBack                 = 122,
	TgfSkinSlotKillingEffect                 = 151,
	TgfSkinSlotHeadFrame                     = 201,
	ETgfSkinSlot_MAX                         = 202,
};

// Enum LyraGame.ETgfSkinCategory
// NumValues: 0x0003
enum class ETgfSkinCategory : uint8
{
	TgfSkinCategoryNormal                    = 0,
	TgfSkinCategoryHeirloom                  = 1,
	ETgfSkinCategory_MAX                     = 2,
};

// Enum LyraGame.ELyraInventoryType
// NumValues: 0x0003
enum class ELyraInventoryType : uint8
{
	Normal                                   = 0,
	Mithril                                  = 1,
	ELyraInventoryType_MAX                   = 2,
};

// Enum LyraGame.ETgfEquipSlot
// NumValues: 0x001C
enum class ETgfEquipSlot : uint8
{
	TgfEquipSlotNone                         = 0,
	TgfEquipSlotPair1RightWeapon             = 1,
	TgfEquipSlotPair1LeftWeapon              = 2,
	TgfEquipSlotPair2RightWeapon             = 3,
	TgfEquipSlotPair2LeftWeapon              = 4,
	TgfEquipSlotUpperArmor                   = 11,
	TgfEquipSlotLowerArmor                   = 12,
	TgfEquipSlotHelmet                       = 13,
	TgfEquipSlotShoe                         = 14,
	TgfEquipSlotGlove                        = 15,
	TgfEquipSlotNecklace                     = 16,
	TgfEquipSlotLeftRing                     = 17,
	TgfEquipSlotRightRing                    = 18,
	TgfEquipSlotConsumable1                  = 41,
	TgfEquipSlotConsumable2                  = 42,
	TgfEquipSlotConsumable3                  = 43,
	TgfEquipSlotThrowable                    = 51,
	TgfEquipSlotAdditionalWeaponCasting      = 100,
	TgfEquipSlotAdditionalWeapon1            = 101,
	TgfEquipSlotAdditionalWeapon2            = 102,
	TgfEquipSlotAdditionalWeapon3            = 103,
	TgfEquipSlotAdditionalWeapon4            = 104,
	TgfEquipSlotAdditionalWeapon5            = 105,
	TgfEquipSlotAdditionalWeapon6            = 106,
	TgfEquipSlotAdditionalWeapon7            = 107,
	TgfEquipSlotAdditionalWeapon8            = 108,
	TgfEquipSlotAdditionalWeapon9            = 109,
	ETgfEquipSlot_MAX                        = 110,
};

// Enum LyraGame.TgfSwitchSlotType
// NumValues: 0x0004
enum class ETgfSwitchSlotType : uint8
{
	TgfSwitchSlotTypeDefined                 = 0,
	TgfSwitchSlotTypeCurrentWeaponRight      = 1,
	TgfSwitchSlotTypeCurrentWeaponLeft       = 2,
	TgfSwitchSlotType_MAX                    = 3,
};

// Enum LyraGame.ETgfItemType
// NumValues: 0x000C
enum class ETgfItemType : uint8
{
	TgfItemTypeNone                          = 0,
	TgfItemTypeEquipWeapon                   = 1,
	TgfItemTypeEquipArmor                    = 2,
	TgfItemTypeEquipAccessory                = 3,
	TgfItemTypeItemConsumable                = 21,
	TgfItemTypeItemThrowable                 = 22,
	TgfItemTypeItemAmmo                      = 23,
	TgfItemTypeItemTreasure                  = 41,
	TgfItemTypeItemLevel                     = 42,
	TgfItemTypeItemGem                       = 43,
	TgfItemTypeItemOther                     = 51,
	ETgfItemType_MAX                         = 52,
};

// Enum LyraGame.ETgfEquipSubType
// NumValues: 0x0026
enum class ETgfEquipSubType : uint8
{
	TgfEquipSubTypeNone                      = 0,
	TgfEquipSubTypeEquipClothChest           = 1,
	TgfEquipSubTypeEquipClothTrousers        = 2,
	TgfEquipSubTypeEquipClothHelmet          = 3,
	TgfEquipSubTypeEquipClothShoe            = 4,
	TgfEquipSubTypeEquipClothGlove           = 5,
	TgfEquipSubTypeEquipLeatherChest         = 11,
	TgfEquipSubTypeEquipLeatherTrousers      = 12,
	TgfEquipSubTypeEquipLeatherHelmet        = 13,
	TgfEquipSubTypeEquipLeatherShoe          = 14,
	TgfEquipSubTypeEquipLeatherGlove         = 15,
	TgfEquipSubTypeEquipPlateChest           = 21,
	TgfEquipSubTypeEquipPlateTrousers        = 22,
	TgfEquipSubTypeEquipPlateHelmet          = 23,
	TgfEquipSubTypeEquipPlateShoe            = 24,
	TgfEquipSubTypeEquipPlateGlove           = 25,
	TgfEquipSubTypeEquipRing                 = 31,
	TgfEquipSubTypeEquipNecklace             = 32,
	TgfEquipSubTypeEquipNecklaceCareer       = 39,
	TgfEquipSubTypeEquipConsumableItem       = 41,
	TgfEquipSubTypeEquipHoldableItem         = 42,
	TgfEquipSubTypeEquipThrowableItem        = 51,
	TgfEquipSubTypeEquipBareHands            = 61,
	TgfEquipSubTypeEquipSword                = 62,
	TgfEquipSubTypeEquipShield               = 63,
	TgfEquipSubTypeEquipLongSword            = 64,
	TgfEquipSubTypeEquipDagger               = 65,
	TgfEquipSubTypeEquipMace                 = 66,
	TgfEquipSubTypeEquipHeavyCrossbow        = 81,
	TgfEquipSubTypeEquipStaff                = 101,
	TgfEquipSubTypeEquipRelic                = 102,
	TgfEquipSubTypeEquipCrossbowAmmo         = 151,
	TgfEquipSubTypeEquipCommonChest          = 201,
	TgfEquipSubTypeEquipCommonTrousers       = 202,
	TgfEquipSubTypeEquipCommonHelmet         = 203,
	TgfEquipSubTypeEquipCommonShoe           = 204,
	TgfEquipSubTypeEquipCommonGlove          = 205,
	ETgfEquipSubType_MAX                     = 206,
};

// Enum LyraGame.ETgfWeaponEquipType
// NumValues: 0x0007
enum class ETgfWeaponEquipType : uint8
{
	TgfWeaponEquipTypeNone                   = 0,
	TgfWeaponEquipTypeOnlyRight              = 1,
	TgfWeaponEquipTypeOnlyLeft               = 2,
	TgfWeaponEquipTypeBothHand               = 3,
	TgfWeaponEquipTypeConsumable             = 11,
	TgfWeaponEquipTypeThrowable              = 12,
	ETgfWeaponEquipType_MAX                  = 13,
};

// Enum LyraGame.ETgfEquipQuality
// NumValues: 0x0009
enum class ETgfEquipQuality : uint8
{
	TgfEquipQualityNone                      = 0,
	TgfEquipQualityRotted                    = 1,
	TgfEquipQualityNormal                    = 2,
	TgfEquipQualityUncommon                  = 3,
	TgfEquipQualityEnhanced                  = 4,
	TgfEquipQualityEpic                      = 5,
	TgfEquipQualityLegendary                 = 6,
	TgfEquipQualityUnique                    = 7,
	ETgfEquipQuality_MAX                     = 8,
};

// Enum LyraGame.ETgfEquipAttrParseType
// NumValues: 0x0004
enum class ETgfEquipAttrParseType : uint8
{
	TgfEquipAttrParseTypeNone                = 0,
	TgfEquipAttrParseTypeLeftAttack          = 1,
	TgfEquipAttrParseTypeRightAttack         = 2,
	ETgfEquipAttrParseType_MAX               = 3,
};

// Enum LyraGame.ETgfItemAffixType
// NumValues: 0x0005
enum class ETgfItemAffixType : uint8
{
	TgfItemAffixTypeNone                     = 0,
	TgfItemAffixTypeMajor                    = 10,
	TgfItemAffixTypeMinor                    = 20,
	TgfItemAffixTypeLegendary                = 30,
	ETgfItemAffixType_MAX                    = 31,
};

// Enum LyraGame.ETgfWeaponHandType
// NumValues: 0x0005
enum class ETgfWeaponHandType : uint8
{
	TgfWeaponHandTypeNone                    = 0,
	TgfWeaponHandTypeRight                   = 1,
	TgfWeaponHandTypeLeft                    = 2,
	TgfWeaponHandTypeBoth                    = 3,
	ETgfWeaponHandType_MAX                   = 4,
};

// Enum LyraGame.ETgfUseAttackType
// NumValues: 0x0007
enum class ETgfUseAttackType : uint8
{
	TgfUseAttackTypeRight                    = 0,
	TgfUseAttackTypeLeft                     = 1,
	TgfUseAttackTypeBoth                     = 4,
	TgfUseAttackTypeAdditional               = 11,
	TgfUseAttackTypeBaseValue                = 41,
	TgfUseAttackTypeDPH                      = 42,
	ETgfUseAttackType_MAX                    = 43,
};

// Enum LyraGame.ETgfAnimAttrValueType
// NumValues: 0x0005
enum class ETgfAnimAttrValueType : uint8
{
	TgfAnimAttrValueTypeNone                 = 0,
	TgfAnimAttrValueTypeAttackWeight         = 1,
	TgfAnimAttrValueTypeDefendValue          = 2,
	TgfAnimAttrValueTypeGuardedDefendValue   = 3,
	ETgfAnimAttrValueType_MAX                = 4,
};

// Enum LyraGame.ETgfGameplayEffectActiveType
// NumValues: 0x0003
enum class ETgfGameplayEffectActiveType : uint8
{
	TgfGameplayEffectActiveTypeActive        = 0,
	TgfGameplayEffectActiveTypeInActive      = 1,
	ETgfGameplayEffectActiveType_MAX         = 2,
};

// Enum LyraGame.ETgfGameplayEffectSkillType
// NumValues: 0x0009
enum class ETgfGameplayEffectSkillType : uint8
{
	TgfGameplayEffectSkillTypeNone           = 0,
	TgfGameplayEffectSkillTypeWeapon         = 1,
	TgfGameplayEffectSkillTypeSkill          = 2,
	TgfGameplayEffectSkillTypeItem           = 3,
	TgfGameplayEffectSkillTypeLevel          = 10,
	TgfGameplayEffectSkillTypeMonster        = 11,
	TgfGameplayEffectSkillTypePassive        = 40,
	TgfGameplayEffectSkillTypeCooldown       = 101,
	ETgfGameplayEffectSkillType_MAX          = 102,
};

// Enum LyraGame.ETgfBattleAffixType
// NumValues: 0x0006
enum class ETgfBattleAffixType : uint8
{
	EN_BATTLE_AFFIX_TYPE_DEFAULT             = 0,
	EN_BATTLE_AFFIX_TYPE_BASIC               = 5,
	EN_BATTLE_AFFIX_TYPE_MAJOR               = 10,
	EN_BATTLE_AFFIX_TYPE_MINOR               = 20,
	EN_BATTLE_AFFIX_TYPE_LEGENDARY           = 30,
	EN_BATTLE_AFFIX_TYPE_MAX                 = 31,
};

// Enum LyraGame.ETgfEscapeMapHintType
// NumValues: 0x0009
enum class ETgfEscapeMapHintType : uint8
{
	TgfEscapeHintNone                        = 0,
	TgfEscapeHintPortalBlueHandling          = 1,
	TgfEscapeHintScrollsKeyShowing           = 2,
	TgfEscapeHintPortalRedHandling           = 3,
	TgfEscapeHintFixPortalBlueSpawn          = 4,
	TgfEscapeHintFixPortalRedSpawn           = 5,
	TgfEscapeHintPortalShadowHandling        = 6,
	TgfEscapeHintPortalShadowSpawn           = 7,
	ETgfEscapeMapHintType_MAX                = 8,
};

// Enum LyraGame.ETgfIntraGameDisplayInfoType
// NumValues: 0x0008
enum class ETgfIntraGameDisplayInfoType : uint8
{
	TgfIntraGameDisplayInfoType_None         = 0,
	TgfIntraGameDisplayInfoType_Kill         = 1,
	TgfIntraGameDisplayInfoType_Portal       = 2,
	TgfIntraGameDisplayInfoType_Drop         = 3,
	TgfIntraGameDisplayInfoType_Chara        = 4,
	TgfIntraGameDisplayInfoType_Ability      = 5,
	TgfIntraGameDisplayInfoType_StateTag     = 6,
	TgfIntraGameDisplayInfoType_MAX          = 7,
};

// Enum LyraGame.ETgfDisplayInfoKillSubType
// NumValues: 0x000B
enum class ETgfDisplayInfoKillSubType : uint8
{
	TgfDisplayKillSubType_None               = 0,
	TgfDisplayKillSubType_PlayerKillMonster  = 1,
	TgfDisplayKillSubType_PlayerKillPlayer   = 2,
	TgfDisplayKillSubType_MonsterKillPlayer  = 3,
	TgfDisplayKillSubType_PoisonKillPlayer   = 4,
	TgfDisplayKillSubType_BossMonsterKillPlayer = 5,
	TgfDisplayKillSubType_PlayerKillBossMonster = 6,
	TgfDisplayKillSubType_BanPlayer          = 7,
	TgfDisplayKillSubType_PlayerSummonKillPlayer = 8,
	TgfDisplayKillSubType_PlayerSummonKillBossMonster = 9,
	TgfDisplayKillSubType_MAX                = 10,
};

// Enum LyraGame.ETgfDisplayInfoPortalSubType
// NumValues: 0x0012
enum class ETgfDisplayInfoPortalSubType : uint8
{
	TgfDisplayPortalSubType_None             = 0,
	TgfDisplayPortalSubType_BlueSpawn_InstantMsg = 1,
	TgfDisplayPortalSubType_RedSpawn_InstantMsg = 2,
	TgfDisplayPortalSubType_BluePlayerEnter  = 3,
	TgfDisplayPortalSubType_RedPlayerEnter   = 4,
	TgfDisplayPortalSubType_BlueHandle       = 5,
	TgfDisplayPortalSubType_RedHandle        = 6,
	TgfDisplayPortalSubType_FixBlueSpawn     = 7,
	TgfDisplayPortalSubType_FixRedSpawn      = 8,
	TgfDisplayPortalSubType_ShadowSpawn      = 9,
	TgfDisplayPortalSubType_ShadowSpawn_InstantMsg = 10,
	TgfDisplayPortalSubType_ShadowPlayerEnter = 11,
	TgfDisplayPortalSubType_ShadowHandle     = 12,
	TgfDisplayPortalSubType_FixBluePlayerEnter = 13,
	TgfDisplayPortalSubType_FixRedPlayerEnter = 14,
	TgfDisplayPortalSubType_FixBlueClose     = 15,
	TgfDisplayPortalSubType_FixRedClose      = 16,
	TgfDisplayPortalSubType_MAX              = 17,
};

// Enum LyraGame.ETgfDisplayInfoDropSubType
// NumValues: 0x0003
enum class ETgfDisplayInfoDropSubType : uint8
{
	ETgfDisplayDropSubType_None              = 0,
	ETgfDisplayDropSubType_ScrollKeyShow     = 1,
	ETgfDisplayDropSubType_MAX               = 2,
};

// Enum LyraGame.ETgfDisplayInfoCharaSubType
// NumValues: 0x0004
enum class ETgfDisplayInfoCharaSubType : uint8
{
	ETgfDisplayCharaSubType_None             = 0,
	ETgfDisplayCharaSubType_MonsterElite     = 1,
	ETgfDisplayCharaSubType_MonsterBoss      = 2,
	ETgfDisplayCharaSubType_MAX              = 3,
};

// Enum LyraGame.ETgfDisplayInfoAbilitySubType
// NumValues: 0x0004
enum class ETgfDisplayInfoAbilitySubType : uint8
{
	ETgfDisplayInfoAbilitySubType_None       = 0,
	ETgfDisplayInfoAbilitySubType_PortalDetect = 1,
	ETgfDisplayInfoAbilitySubType_Mark3DPosition = 2,
	ETgfDisplayInfoAbilitySubType_MAX        = 3,
};

// Enum LyraGame.ETgfDisplayInfoStateTagSubType
// NumValues: 0x0003
enum class ETgfDisplayInfoStateTagSubType : uint8
{
	ETgfDisplayInfoStateTagSubType_None      = 0,
	ETgfDisplayInfoStateTagSubType_CastleClosing = 1,
	ETgfDisplayInfoStateTagSubType_MAX       = 2,
};

// Enum LyraGame.ETgfDisplayAgingType
// NumValues: 0x0004
enum class ETgfDisplayAgingType : uint8
{
	TgfBattleHintMessageType_None            = 0,
	TgfBattleHintMessageType_Instant         = 1,
	TgfBattleHintMessageType_Persistent      = 2,
	TgfBattleHintMessageType_MAX             = 3,
};

// Enum LyraGame.ETgfInterableType
// NumValues: 0x000E
enum class ETgfInterableType : uint8
{
	TgfInterableTypeNone                     = 0,
	TgfInterableTypeTorch                    = 1,
	TgfInterableTypeLamp                     = 2,
	TgfInterableTypeAltar                    = 11,
	TgfInterableTypeDoor                     = 21,
	TgfInterableTypeSwitch                   = 22,
	TgfInterableTypeControlled               = 23,
	TgfInterableTypeCollectable              = 31,
	TgfInterableTypeChest                    = 41,
	TgfInterableTypeExtractDevice_Blue       = 51,
	TgfInterableTypeExtractDevice_Red        = 52,
	TgfInterableTypeDestroyable              = 61,
	TgfInterableTypeLoot                     = 71,
	ETgfInterableType_MAX                    = 72,
};

// Enum LyraGame.ETgfAttributeCondition
// NumValues: 0x0006
enum class ETgfAttributeCondition : uint8
{
	TgfAttributeConditionNone                = 0,
	TgfAttributeConditionHPGE80              = 1,
	TgfAttributeConditionHPLE35              = 2,
	TgfAttributeConditionHasShield           = 3,
	TgfAttributeConditionElementAttack       = 4,
	ETgfAttributeCondition_MAX               = 5,
};

// Enum LyraGame.ETgfAttributeTarget
// NumValues: 0x0006
enum class ETgfAttributeTarget : uint8
{
	TgfAttributeTargetNone                   = 0,
	TgfAttributeTargetSourceSelf             = 1,
	TgfAttributeTargetSourceOpponent         = 2,
	TgfAttributeTargetTargetSelf             = 3,
	TgfAttributeTargetTargetOpponent         = 4,
	ETgfAttributeTarget_MAX                  = 5,
};

// Enum LyraGame.ETgfDeathState
// NumValues: 0x0007
enum class ETgfDeathState : uint8
{
	NotDead                                  = 0,
	DeathStarted                             = 1,
	DeathFinished                            = 2,
	Resurrecting                             = 3,
	Escaping                                 = 4,
	OnlySpectator                            = 5,
	ETgfDeathState_MAX                       = 6,
};

// Enum LyraGame.ETgfBriefMapType
// NumValues: 0x0004
enum class ETgfBriefMapType : uint8
{
	TgfBriefMapType_None                     = 0,
	TgfBriefMapType_MiniMap                  = 1,
	TgfBriefMapType_OverviewMap              = 2,
	TgfBriefMapType_MAX                      = 3,
};

// Enum LyraGame.EAnimConfigDirection
// NumValues: 0x0005
enum class EAnimConfigDirection : uint8
{
	Forward                                  = 0,
	Backward                                 = 1,
	Right                                    = 2,
	Left                                     = 3,
	EAnimConfigDirection_MAX                 = 4,
};

// Enum LyraGame.EAnimConfigDirection8
// NumValues: 0x0009
enum class EAnimConfigDirection8 : uint8
{
	Forward                                  = 0,
	ForwardRight                             = 1,
	Right                                    = 2,
	RightBackward                            = 3,
	Backward                                 = 4,
	BackwardLeft                             = 5,
	Left                                     = 6,
	LeftForward                              = 7,
	EAnimConfigDirection8_MAX                = 8,
};

// Enum LyraGame.ETgfAxisName
// NumValues: 0x0008
enum class ETgfAxisName : uint8
{
	None                                     = 0,
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 3,
	NX                                       = 4,
	NY                                       = 5,
	NZ                                       = 6,
	ETgfAxisName_MAX                         = 7,
};

// Enum LyraGame.ETgfCharacterMaterialCloakType
// NumValues: 0x0005
enum class ETgfCharacterMaterialCloakType : uint8
{
	TgfCharacterMaterialCloakTypeNone        = 0,
	TgfCharacterMaterialCloakTypeTeammateOrLocal = 1,
	TgfCharacterMaterialCloakTypeEnemy       = 2,
	TgfCharacterMaterialCloakTypeEnemyLight  = 3,
	ETgfCharacterMaterialCloakType_MAX       = 4,
};

// Enum LyraGame.ECharacterMaterialEnum
// NumValues: 0x0004
enum class ECharacterMaterialEnum : uint8
{
	TgfCharacterMaterialNone                 = 0,
	TgfCharacterMaterialDropOut              = 1,
	TgfCharacterMaterialCloak                = 2,
	ECharacterMaterialEnum_MAX               = 3,
};

// Enum LyraGame.ETgfChargeTimestampType
// NumValues: 0x0005
enum class ETgfChargeTimestampType : uint8
{
	StartTimestamp                           = 0,
	FirstLevelSucceedTimestamp               = 1,
	SecondLevelSucceedTimestamp              = 2,
	ThirdLevelSucceedTimestamp               = 3,
	ETgfChargeTimestampType_MAX              = 4,
};

// Enum LyraGame.ESnapMoveType
// NumValues: 0x0006
enum class ESnapMoveType : uint8
{
	None                                     = 0,
	LocationXY                               = 1,
	LocationZ                                = 2,
	RotationX                                = 4,
	RotationY                                = 8,
	ESnapMoveType_MAX                        = 9,
};

// Enum LyraGame.ETgfAuraDeathPolicy
// NumValues: 0x0003
enum class ETgfAuraDeathPolicy : uint8
{
	Remove                                   = 0,
	PauseEffect                              = 1,
	ETgfAuraDeathPolicy_MAX                  = 2,
};

// Enum LyraGame.ETgfAuraCoolDownPolicy
// NumValues: 0x0004
enum class ETgfAuraCoolDownPolicy : uint8
{
	None                                     = 0,
	IndividuallyForEachTarget                = 1,
	Shared                                   = 2,
	ETgfAuraCoolDownPolicy_MAX               = 3,
};

// Enum LyraGame.ETgfAuraNetExecutionPolicy
// NumValues: 0x0004
enum class ETgfAuraNetExecutionPolicy : uint8
{
	ServerOnly                               = 0,
	ClientOnly                               = 1,
	Both                                     = 2,
	ETgfAuraNetExecutionPolicy_MAX           = 3,
};

// Enum LyraGame.EWidgetDirection
// NumValues: 0x0004
enum class EWidgetDirection : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	EWidgetDirection_MAX                     = 3,
};

// Enum LyraGame.ETgfSkillType
// NumValues: 0x000E
enum class ETgfSkillType : uint8
{
	None                                     = 0,
	Damage                                   = 1,
	Heal                                     = 2,
	Movement                                 = 3,
	Defend                                   = 4,
	Investigate                              = 5,
	Dot                                      = 6,
	Buff                                     = 7,
	Debuff                                   = 8,
	Repel                                    = 9,
	Remote                                   = 10,
	AOE                                      = 11,
	Magic                                    = 12,
	ETgfSkillType_MAX                        = 13,
};

// Enum LyraGame.EHurtNotifyType
// NumValues: 0x000D
enum class EHurtNotifyType : uint8
{
	None                                     = 0,
	Heal                                     = 1,
	Damage                                   = 2,
	DamageFire                               = 3,
	DamageIce                                = 4,
	DamageThunder                            = 5,
	DamageShadow                             = 6,
	DamageHoly                               = 7,
	DamageFixed                              = 8,
	Magic                                    = 9,
	Shield                                   = 10,
	TeammateDamage                           = 11,
	EHurtNotifyType_MAX                      = 12,
};

// Enum LyraGame.EHurtNotifyAnimType
// NumValues: 0x0008
enum class EHurtNotifyAnimType : uint8
{
	Normal                                   = 0,
	HighFrequency                            = 1,
	Special1                                 = 2,
	Special2                                 = 3,
	Special3                                 = 4,
	Special4                                 = 5,
	Special5                                 = 6,
	EHurtNotifyAnimType_MAX                  = 7,
};

// Enum LyraGame.EHealthBarType
// NumValues: 0x0009
enum class EHealthBarType : uint8
{
	None                                     = 0,
	HealthOnly                               = 1,
	Magic                                    = 2,
	SoulEnergy                               = 3,
	Sword                                    = 4,
	NaturalEnergy                            = 5,
	Reserved1                                = 6,
	Reserved2                                = 7,
	EHealthBarType_MAX                       = 8,
};

// Enum LyraGame.ELocalBuffState
// NumValues: 0x0005
enum class ELocalBuffState : uint8
{
	None                                     = 0,
	Start                                    = 1,
	Pause                                    = 2,
	End                                      = 3,
	ELocalBuffState_MAX                      = 4,
};

// Enum LyraGame.EFollowMode
// NumValues: 0x0003
enum class EFollowMode : uint8
{
	ForceFollow                              = 0,
	Kinematics                               = 1,
	EFollowMode_MAX                          = 2,
};

// Enum LyraGame.ETgfInventoryType
// NumValues: 0x0015
enum class ETgfInventoryType : uint8
{
	None                                     = 0,
	InGameLocalPlayer                        = 1,
	InGameLoot                               = 2,
	InGameInspector                          = 3,
	Lobby                                    = 32,
	Market                                   = 33,
	Storage                                  = 34,
	Trade                                    = 35,
	Fusion                                   = 36,
	Blacksmith                               = 37,
	Activity                                 = 38,
	Mithril                                  = 39,
	Mail                                     = 40,
	SmallPack                                = 41,
	Virtual                                  = 42,
	TradeNoRight                             = 43,
	TradeAuction                             = 44,
	TradeBuyItNow                            = 45,
	MithrilResult                            = 46,
	CommonTips                               = 47,
	ETgfInventoryType_MAX                    = 48,
};

// Enum LyraGame.ETgfInventoryRequirementQueryResult
// NumValues: 0x0006
enum class ETgfInventoryRequirementQueryResult : uint8
{
	NotAnEquipment                           = 0,
	RequirementsMeet                         = 1,
	CareerMismatch                           = 2,
	EquipmentTypeIncompatible                = 3,
	LevelInsufficient                        = 4,
	ETgfInventoryRequirementQueryResult_MAX  = 5,
};

// Enum LyraGame.EnItemStorageType
// NumValues: 0x0006
enum class EnItemStorageType : uint8
{
	EN_ITEM_STORAGE_TYPE_INVALI              = 0,
	EN_ITEM_STORAGE_TYPE_INVENTORY           = 1,
	EN_ITEM_STORAGE_TYPE_BACKPACK            = 2,
	EN_ITEM_STORAGE_TYPE_ROLE_WEARING        = 3,
	EN_ITEM_STORAGE_TYPE_SMALL_BACKPACK      = 4,
	EN_ITEM_STORAGE_TYPE_MAX                 = 5,
};

// Enum LyraGame.ETGFBriefMapViewBorderType
// NumValues: 0x0005
enum class ETGFBriefMapViewBorderType : uint8
{
	BorderTop                                = 0,
	BorderRight                              = 1,
	BorderBottom                             = 2,
	BorderLeft                               = 3,
	ETGFBriefMapViewBorderType_MAX           = 4,
};

// Enum LyraGame.ETgfPawnOverlayMaterialType
// NumValues: 0x0003
enum class ETgfPawnOverlayMaterialType : uint8
{
	PawnOverlayMaterialPetrifaction          = 0,
	PawnOverlayMaterialInvincible            = 1,
	ETgfPawnOverlayMaterialType_MAX          = 2,
};

// Enum LyraGame.ERangedWeaponActionType
// NumValues: 0x0008
enum class ERangedWeaponActionType : uint8
{
	None                                     = 0,
	Draw                                     = 1,
	ToFire                                   = 2,
	ToReload                                 = 3,
	ToADS                                    = 4,
	CancelADS                                = 5,
	End                                      = 6,
	ERangedWeaponActionType_MAX              = 7,
};

// Enum LyraGame.ERangedWeaponStateType
// NumValues: 0x0003
enum class ERangedWeaponStateType : uint8
{
	NormalIdle                               = 0,
	ArrowIdle                                = 1,
	ERangedWeaponStateType_MAX               = 2,
};

// Enum LyraGame.EClassRepNodeMapping
// NumValues: 0x0007
enum class EClassRepNodeMapping : uint8
{
	NotRouted                                = 0,
	RelevantAllConnections                   = 1,
	Spatialize_Static                        = 2,
	Spatialize_Dynamic                       = 3,
	Spatialize_Dormancy                      = 4,
	NotSet                                   = 5,
	EClassRepNodeMapping_MAX                 = 6,
};

// Enum LyraGame.ESpectatorWidgetMode
// NumValues: 0x0004
enum class ESpectatorWidgetMode : uint8
{
	None                                     = 0,
	Confirm                                  = 1,
	CountDown                                = 2,
	ESpectatorWidgetMode_MAX                 = 3,
};

// Enum LyraGame.ESpectatingTargetType
// NumValues: 0x0006
enum class ESpectatingTargetType : uint8
{
	None                                     = 0,
	Teammate                                 = 1,
	Enemy                                    = 2,
	NoTarget                                 = 3,
	SpectatingActor                          = 4,
	ESpectatingTargetType_MAX                = 5,
};

// Enum LyraGame.ETgfStencilRef
// NumValues: 0x0007
enum class ETgfStencilRef : uint8
{
	Default                                  = 0,
	FirstPersonPlayer                        = 4,
	CollectableFlickerEffect                 = 8,
	InteractableOutlineEffect                = 64,
	DruidAbilityOutline                      = 160,
	TeammateSilhouette                       = 192,
	ETgfStencilRef_MAX                       = 193,
};

// Enum LyraGame.ETgfStencilTypeBaseValue
// NumValues: 0x0005
enum class ETgfStencilTypeBaseValue : uint8
{
	Default                                  = 0,
	FirstPersonPlayer                        = 3,
	CollectableFlickerEffect                 = 4,
	OutlineEffect                            = 6,
	ETgfStencilTypeBaseValue_MAX             = 7,
};

// Enum LyraGame.ETgfStencilOutlineSubtype
// NumValues: 0x0005
enum class ETgfStencilOutlineSubtype : uint8
{
	Default                                  = 0,
	Interactable                             = 2,
	DruidAbility                             = 16,
	TeammateSilhouette                       = 32,
	ETgfStencilOutlineSubtype_MAX            = 33,
};

// Enum LyraGame.ECallSource
// NumValues: 0x0003
enum class ECallSource : uint8
{
	Client                                   = 0,
	Server                                   = 1,
	ECallSource_MAX                          = 2,
};

// Enum LyraGame.ETgfMonsterSelectTargetType
// NumValues: 0x0004
enum class ETgfMonsterSelectTargetType : uint8
{
	Random                                   = 0,
	Threat                                   = 1,
	Distance                                 = 2,
	ETgfMonsterSelectTargetType_MAX          = 3,
};

// Enum LyraGame.ETgfMonsterTargetOverflowType
// NumValues: 0x0004
enum class ETgfMonsterTargetOverflowType : uint8
{
	RandomPos                                = 0,
	MultiTrigger                             = 1,
	Ignore                                   = 2,
	ETgfMonsterTargetOverflowType_MAX        = 3,
};

// Enum LyraGame.ELyraAbilityActivationPolicy
// NumValues: 0x0005
enum class ELyraAbilityActivationPolicy : uint8
{
	OnInputTriggered                         = 0,
	WhileInputActive                         = 1,
	TriggerOrWhileBySetting                  = 2,
	OnSpawn                                  = 3,
	ELyraAbilityActivationPolicy_MAX         = 4,
};

// Enum LyraGame.ELyraAbilityActivationGroup
// NumValues: 0x0004
enum class ELyraAbilityActivationGroup : uint8
{
	Independent                              = 0,
	Exclusive_Replaceable                    = 1,
	Exclusive_Blocking                       = 2,
	MAX                                      = 3,
};

// Enum LyraGame.ETgfGameplayCueNotify_EffectType
// NumValues: 0x0008
enum class ETgfGameplayCueNotify_EffectType : uint8
{
	Particle                                 = 0,
	RandomParticle                           = 1,
	Sound                                    = 2,
	CameraShake                              = 3,
	CameraLens                               = 4,
	Decal                                    = 5,
	ForceFeedback                            = 6,
	ETgfGameplayCueNotify_MAX                = 7,
};

// Enum LyraGame.ETgfFirstPersonRestrict
// NumValues: 0x0005
enum class ETgfFirstPersonRestrict : uint8
{
	None                                     = 0,
	RestrictInstigator                       = 1,
	RestrictTarget                           = 2,
	RestrictNotTarget                        = 3,
	ETgfFirstPersonRestrict_MAX              = 4,
};

// Enum LyraGame.ETgfThreeValueRestrict
// NumValues: 0x0004
enum class ETgfThreeValueRestrict : uint8
{
	None                                     = 0,
	RestrictTrue                             = 1,
	RestrictFalse                            = 2,
	ETgfThreeValueRestrict_MAX               = 3,
};

// Enum LyraGame.ETgfExecutionModifierTriggerType
// NumValues: 0x0002
enum class ETgfExecutionModifierTriggerType : uint8
{
	GameplatEffectExecution                  = 0,
	ETgfExecutionModifierTriggerType_MAX     = 1,
};

// Enum LyraGame.ETgfExecutionModifierAffectType
// NumValues: 0x0003
enum class ETgfExecutionModifierAffectType : uint8
{
	Source                                   = 0,
	Target                                   = 1,
	ETgfExecutionModifierAffectType_MAX      = 2,
};

// Enum LyraGame.EPhaseTagMatchType
// NumValues: 0x0003
enum class EPhaseTagMatchType : uint8
{
	ExactMatch                               = 0,
	PartialMatch                             = 1,
	EPhaseTagMatchType_MAX                   = 2,
};

// Enum LyraGame.ETgfTrackingDashType
// NumValues: 0x0003
enum class ETgfTrackingDashType : uint8
{
	StopDash                                 = 0,
	KeepDash                                 = 1,
	ETgfTrackingDashType_MAX                 = 2,
};

// Enum LyraGame.ELyraPlayRateModifyKey
// NumValues: 0x0003
enum class ELyraPlayRateModifyKey : uint8
{
	Basic                                    = 0,
	MontageChase                             = 1,
	ELyraPlayRateModifyKey_MAX               = 2,
};

// Enum LyraGame.ELyraCameraModeBlendFunction
// NumValues: 0x0006
enum class ELyraCameraModeBlendFunction : uint8
{
	Linear                                   = 0,
	EaseIn                                   = 1,
	EaseOut                                  = 2,
	EaseInOut                                = 3,
	COUNT                                    = 4,
	ELyraCameraModeBlendFunction_MAX         = 5,
};

// Enum LyraGame.EPortalTagType
// NumValues: 0x0004
enum class EPortalTagType : uint8
{
	None                                     = 0,
	Red                                      = 1,
	Blue                                     = 2,
	EPortalTagType_MAX                       = 3,
};

// Enum LyraGame.ELyraDeathState
// NumValues: 0x0004
enum class ELyraDeathState : uint8
{
	NotDead                                  = 0,
	DeathStarted                             = 1,
	DeathFinished                            = 2,
	ELyraDeathState_MAX                      = 3,
};

// Enum LyraGame.ETgfInputTagType
// NumValues: 0x0003
enum class ETgfInputTagType : uint8
{
	ETgfInputTagType_None                    = 0,
	ETgfInputTagType_AbilityPressed          = 1,
	ETgfInputTagType_MAX                     = 2,
};

// Enum LyraGame.ETgfCharaPart
// NumValues: 0x000B
enum class ETgfCharaPart : uint8
{
	FullBody                                 = 0,
	Chest                                    = 1,
	Glove                                    = 2,
	Helmet                                   = 3,
	Shoe                                     = 4,
	Thigh                                    = 5,
	BodyHead                                 = 6,
	Cloak                                    = 7,
	Beard                                    = 8,
	Count                                    = 9,
	ETgfCharaPart_MAX                        = 10,
};

// Enum LyraGame.ETgfMontageEntryType
// NumValues: 0x0012
enum class ETgfMontageEntryType : uint8
{
	NoFilter                                 = 0,
	Begin1                                   = 1,
	Begin2                                   = 2,
	Begin3                                   = 3,
	CastToSelf                               = 10,
	Cast1                                    = 11,
	Cast2                                    = 12,
	Cast3                                    = 13,
	Cancel1                                  = 21,
	Cancel2                                  = 22,
	Cancel3                                  = 23,
	End1                                     = 31,
	End2                                     = 32,
	End3                                     = 33,
	HitAnim1                                 = 41,
	HitAnim2                                 = 42,
	HitAnim3                                 = 43,
	ETgfMontageEntryType_MAX                 = 44,
};

// Enum LyraGame.ECosmeticCheatMode
// NumValues: 0x0003
enum class ECosmeticCheatMode : uint32
{
	ReplaceParts                             = 0,
	AddParts                                 = 1,
	ECosmeticCheatMode_MAX                   = 2,
};

// Enum LyraGame.ETGFCharacterPartSource
// NumValues: 0x0006
enum class ETGFCharacterPartSource : uint8
{
	SourceNone                               = 0,
	Natural                                  = 1,
	NaturalSuppressedViaCheat                = 2,
	AppliedViaDeveloperSettingsCheat         = 3,
	AppliedViaCheatManager                   = 4,
	ETGFCharacterPartSource_MAX              = 5,
};

// Enum LyraGame.ECheatExecutionTime
// NumValues: 0x0003
enum class ECheatExecutionTime : uint32
{
	OnCheatManagerCreated                    = 0,
	OnPlayerPawnPossession                   = 1,
	ECheatExecutionTime_MAX                  = 2,
};

// Enum LyraGame.ETgfEquipMapType
// NumValues: 0x0003
enum class ETgfEquipMapType : uint8
{
	Normal                                   = 0,
	Gearset                                  = 1,
	ETgfEquipMapType_MAX                     = 2,
};

// Enum LyraGame.EContextEffectsLibraryLoadState
// NumValues: 0x0004
enum class EContextEffectsLibraryLoadState : uint8
{
	Unloaded                                 = 0,
	Loading                                  = 1,
	Loaded                                   = 2,
	EContextEffectsLibraryLoadState_MAX      = 3,
};

// Enum LyraGame.ETgfMatchType
// NumValues: 0x0008
enum class ETgfMatchType : uint8
{
	None                                     = 0,
	PVPVE                                    = 1,
	PVP_SingleMatch                          = 11,
	PVP_MultipleMatches                      = 12,
	HOMELAND                                 = 31,
	PVP_Test                                 = 32,
	Onboarding                               = 33,
	ETgfMatchType_MAX                        = 34,
};

// Enum LyraGame.EDeadzoneStick
// NumValues: 0x0003
enum class EDeadzoneStick : uint8
{
	MoveStick                                = 0,
	LookStick                                = 1,
	EDeadzoneStick_MAX                       = 2,
};

// Enum LyraGame.ELyraTargetingType
// NumValues: 0x0003
enum class ELyraTargetingType : uint8
{
	Normal                                   = 0,
	ADS                                      = 1,
	ELyraTargetingType_MAX                   = 2,
};

// Enum LyraGame.ELyraFramePacingMode
// NumValues: 0x0004
enum class ELyraFramePacingMode : uint8
{
	DesktopStyle                             = 0,
	ConsoleStyle                             = 1,
	MobileStyle                              = 2,
	ELyraFramePacingMode_MAX                 = 3,
};

// Enum LyraGame.ELyraPlayerConnectionType
// NumValues: 0x0005
enum class ELyraPlayerConnectionType : uint8
{
	Player                                   = 0,
	LiveSpectator                            = 1,
	ReplaySpectator                          = 2,
	InactivePlayer                           = 3,
	ELyraPlayerConnectionType_MAX            = 4,
};

// Enum LyraGame.EStorageLimit
// NumValues: 0x0005
enum class EStorageLimit : uint8
{
	MB_100                                   = 0,
	MB_500                                   = 1,
	GB_1                                     = 2,
	Unlimited                                = 3,
	EStorageLimit_MAX                        = 4,
};

// Enum LyraGame.ETGFVideoSettingType
// NumValues: 0x0011
enum class ETGFVideoSettingType : uint8
{
	TGFVIDEOSETTINGTYPE_WINDOWMODE           = 0,
	TGFVIDEOSETTINGTYPE_RESOLUTION           = 1,
	TGFVIDEOSETTINGTYPE_GAMMA                = 2,
	TGFVIDEOSETTINGTYPE_OVERALLQUALITY       = 3,
	TGFVIDEOSETTINGTYPE_RESOLUTIONSCALE      = 4,
	TGFVIDEOSETTINGTYPE_GLOBALILLUMINATION   = 5,
	TGFVIDEOSETTINGTYPE_SHADOWQUALITY        = 6,
	TGFVIDEOSETTINGTYPE_ANTIALIASING         = 7,
	TGFVIDEOSETTINGTYPE_VIEWDISTANCE         = 8,
	TGFVIDEOSETTINGTYPE_TEXTUREQUALITY       = 9,
	TGFVIDEOSETTINGTYPE_VISUALEFFECT         = 10,
	TGFVIDEOSETTINGTYPE_REFLECTIONQUALITY    = 11,
	TGFVIDEOSETTINGTYPE_POSTPROCESS          = 12,
	TGFVIDEOSETTINGTYPE_SSMODE               = 13,
	TGFVIDEOSETTINGTYPE_VSYNC                = 14,
	TGFVIDEOSETTINGTYPE_FRAMERATE            = 15,
	TGFVIDEOSETTINGTYPE_MAX                  = 16,
};

// Enum LyraGame.EColorBlindMode
// NumValues: 0x0005
enum class EColorBlindMode : uint8
{
	Off                                      = 0,
	Deuteranope                              = 1,
	Protanope                                = 2,
	Tritanope                                = 3,
	EColorBlindMode_MAX                      = 4,
};

// Enum LyraGame.ELyraAllowBackgroundAudioSetting
// NumValues: 0x0004
enum class ELyraAllowBackgroundAudioSetting : uint8
{
	Off                                      = 0,
	AllSounds                                = 1,
	Num                                      = 2,
	ELyraAllowBackgroundAudioSetting_MAX     = 3,
};

// Enum LyraGame.ESocialPermission
// NumValues: 0x0004
enum class ESocialPermission : uint8
{
	Block                                    = 0,
	FriendOnly                               = 1,
	Allow                                    = 2,
	ESocialPermission_MAX                    = 3,
};

// Enum LyraGame.ELyraGamepadSensitivity
// NumValues: 0x000C
enum class ELyraGamepadSensitivity : uint8
{
	Invalid                                  = 0,
	Slow                                     = 1,
	SlowPlus                                 = 2,
	SlowPlusPlus                             = 3,
	Normal                                   = 4,
	NormalPlus                               = 5,
	NormalPlusPlus                           = 6,
	Fast                                     = 7,
	FastPlus                                 = 8,
	FastPlusPlus                             = 9,
	Insane                                   = 10,
	MAX                                      = 11,
};

// Enum LyraGame.TgfActorIntStatisticType
// NumValues: 0x000C
enum class ETgfActorIntStatisticType : uint8
{
	TgfActorIntStatisticTypeNone             = 0,
	TgfActorIntStatisticTypeKillingType      = 1,
	TgfActorIntStatisticTypeKillingActorStatId = 2,
	TgfActorIntStatisticTypeInteractingStatId = 3,
	TgfActorIntStatisticTypeMovingArea       = 4,
	TgfActorIntStatisticTypeLooting          = 5,
	TgfActorIntStatisticTypeGameplayAbility  = 6,
	TgfActorIntStatisticTypeActionType       = 11,
	TgfActorIntStatisticTypeActorDieNum      = 51,
	TgfActorIntStatisticTypeResurrectOtherNum = 52,
	TgfActorIntStatisticTypeDestroyingObject = 53,
	TgfActorIntStatisticType_MAX             = 54,
};

// Enum LyraGame.TgfActorFloatStatisticType
// NumValues: 0x0009
enum class ETgfActorFloatStatisticType : uint8
{
	TgfActorFloatStatisticTypeNone           = 0,
	TgfActorFloatStatisticTypeAlivingStartTime = 1,
	TgfActorFloatStatisticTypeAlivingTotalTime = 2,
	TgfActorFloatStatisticTypeCausedTotalDamage = 3,
	TgfActorFloatStatisticTypeCausedTotalHeal = 4,
	TgfActorFloatStatisticTypeGotTotalDamage = 5,
	TgfActorFloatStatisticTypeAdditionalExp  = 6,
	TgfActorFloatStatisticTypeCausedPlayerTotalDamage = 7,
	TgfActorFloatStatisticType_MAX           = 8,
};

// Enum LyraGame.TgfActorRelationStatisticType
// NumValues: 0x0004
enum class ETgfActorRelationStatisticType : uint8
{
	TgfActorRelationStatisticTypeNone        = 0,
	TgfActorRelationStatisticTypeResurrect   = 1,
	TgfActorRelationStatisticTypeBeResurrected = 2,
	TgfActorRelationStatisticType_MAX        = 3,
};

// Enum LyraGame.EBlueprintExposedNetMode
// NumValues: 0x0005
enum class EBlueprintExposedNetMode : uint8
{
	Standalone                               = 0,
	DedicatedServer                          = 1,
	ListenServer                             = 2,
	Client                                   = 3,
	EBlueprintExposedNetMode_MAX             = 4,
};

// Enum LyraGame.ELyraTeamComparison
// NumValues: 0x0004
enum class ELyraTeamComparison : uint8
{
	OnSameTeam                               = 0,
	DifferentTeams                           = 1,
	InvalidArgument                          = 2,
	ELyraTeamComparison_MAX                  = 3,
};

// Enum LyraGame.EActorCanvasProjectionMode
// NumValues: 0x0006
enum class EActorCanvasProjectionMode : uint8
{
	ComponentPoint                           = 0,
	ComponentBoundingBox                     = 1,
	ComponentScreenBoundingBox               = 2,
	ActorBoundingBox                         = 3,
	ActorScreenBoundingBox                   = 4,
	EActorCanvasProjectionMode_MAX           = 5,
};

// Enum LyraGame.ELyraWidgetInputMode
// NumValues: 0x0005
enum class ELyraWidgetInputMode : uint8
{
	Default                                  = 0,
	GameAndMenu                              = 1,
	Game                                     = 2,
	Menu                                     = 3,
	ELyraWidgetInputMode_MAX                 = 4,
};

// Enum LyraGame.ELyraAbilityTargetingSource
// NumValues: 0x0007
enum class ELyraAbilityTargetingSource : uint8
{
	CameraTowardsFocus                       = 0,
	PawnForward                              = 1,
	PawnTowardsFocus                         = 2,
	WeaponForward                            = 3,
	WeaponTowardsFocus                       = 4,
	Custom                                   = 5,
	ELyraAbilityTargetingSource_MAX          = 6,
};

// ScriptStruct LyraGame.PortalSpawnInfo
// 0x0080 (0x0080 - 0x0000)
struct FPortalSpawnInfo final
{
public:
	float                                         SpawnTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPortalType                                   PortalType;                                        // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnProbability;                                  // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     PortalClass;                                       // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPortalSpawnInfo) == 0x000010, "Wrong alignment on FPortalSpawnInfo");
static_assert(sizeof(FPortalSpawnInfo) == 0x000080, "Wrong size on FPortalSpawnInfo");
static_assert(offsetof(FPortalSpawnInfo, SpawnTime) == 0x000000, "Member 'FPortalSpawnInfo::SpawnTime' has a wrong offset!");
static_assert(offsetof(FPortalSpawnInfo, SpawnTransform) == 0x000010, "Member 'FPortalSpawnInfo::SpawnTransform' has a wrong offset!");
static_assert(offsetof(FPortalSpawnInfo, PortalType) == 0x000070, "Member 'FPortalSpawnInfo::PortalType' has a wrong offset!");
static_assert(offsetof(FPortalSpawnInfo, SpawnProbability) == 0x000074, "Member 'FPortalSpawnInfo::SpawnProbability' has a wrong offset!");
static_assert(offsetof(FPortalSpawnInfo, PortalClass) == 0x000078, "Member 'FPortalSpawnInfo::PortalClass' has a wrong offset!");

// ScriptStruct LyraGame.SpeedDampingParams
// 0x0008 (0x0008 - 0x0000)
struct FSpeedDampingParams final
{
public:
	float                                         RemainTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurSpeed;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpeedDampingParams) == 0x000004, "Wrong alignment on FSpeedDampingParams");
static_assert(sizeof(FSpeedDampingParams) == 0x000008, "Wrong size on FSpeedDampingParams");
static_assert(offsetof(FSpeedDampingParams, RemainTime) == 0x000000, "Member 'FSpeedDampingParams::RemainTime' has a wrong offset!");
static_assert(offsetof(FSpeedDampingParams, CurSpeed) == 0x000004, "Member 'FSpeedDampingParams::CurSpeed' has a wrong offset!");

// ScriptStruct LyraGame.GlobalAppliedEffectList
// 0x0050 (0x0050 - 0x0000)
struct FGlobalAppliedEffectList final
{
public:
	TMap<class ULyraAbilitySystemComponent*, struct FActiveGameplayEffectHandle> Handles;                                           // 0x0000(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalAppliedEffectList) == 0x000008, "Wrong alignment on FGlobalAppliedEffectList");
static_assert(sizeof(FGlobalAppliedEffectList) == 0x000050, "Wrong size on FGlobalAppliedEffectList");
static_assert(offsetof(FGlobalAppliedEffectList, Handles) == 0x000000, "Member 'FGlobalAppliedEffectList::Handles' has a wrong offset!");

// ScriptStruct LyraGame.InteractionOption
// 0x0088 (0x0088 - 0x0000)
struct FInteractionOption final
{
public:
	TScriptInterface<class IInteractableTarget>   InteractableTarget;                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SubText;                                           // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>           InteractionAbilityToGrant;                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                TargetAbilitySystem;                               // 0x0048(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             TargetInteractionAbilityHandle;                    // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   InteractionWidgetClass;                            // 0x0058(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionOption) == 0x000008, "Wrong alignment on FInteractionOption");
static_assert(sizeof(FInteractionOption) == 0x000088, "Wrong size on FInteractionOption");
static_assert(offsetof(FInteractionOption, InteractableTarget) == 0x000000, "Member 'FInteractionOption::InteractableTarget' has a wrong offset!");
static_assert(offsetof(FInteractionOption, Text) == 0x000010, "Member 'FInteractionOption::Text' has a wrong offset!");
static_assert(offsetof(FInteractionOption, SubText) == 0x000028, "Member 'FInteractionOption::SubText' has a wrong offset!");
static_assert(offsetof(FInteractionOption, InteractionAbilityToGrant) == 0x000040, "Member 'FInteractionOption::InteractionAbilityToGrant' has a wrong offset!");
static_assert(offsetof(FInteractionOption, TargetAbilitySystem) == 0x000048, "Member 'FInteractionOption::TargetAbilitySystem' has a wrong offset!");
static_assert(offsetof(FInteractionOption, TargetInteractionAbilityHandle) == 0x000050, "Member 'FInteractionOption::TargetInteractionAbilityHandle' has a wrong offset!");
static_assert(offsetof(FInteractionOption, InteractionWidgetClass) == 0x000058, "Member 'FInteractionOption::InteractionWidgetClass' has a wrong offset!");

// ScriptStruct LyraGame.LyraTabDescriptor
// 0x0110 (0x0110 - 0x0000)
struct FLyraTabDescriptor final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TabText;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            IconBrush;                                         // 0x0020(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLock;                                           // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonButtonBase>          TabButtonType;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonUserWidget>          TabContentType;                                    // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                CreatedTabContentWidget;                           // 0x0108(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraTabDescriptor) == 0x000010, "Wrong alignment on FLyraTabDescriptor");
static_assert(sizeof(FLyraTabDescriptor) == 0x000110, "Wrong size on FLyraTabDescriptor");
static_assert(offsetof(FLyraTabDescriptor, TabId) == 0x000000, "Member 'FLyraTabDescriptor::TabId' has a wrong offset!");
static_assert(offsetof(FLyraTabDescriptor, TabText) == 0x000008, "Member 'FLyraTabDescriptor::TabText' has a wrong offset!");
static_assert(offsetof(FLyraTabDescriptor, IconBrush) == 0x000020, "Member 'FLyraTabDescriptor::IconBrush' has a wrong offset!");
static_assert(offsetof(FLyraTabDescriptor, bHidden) == 0x0000F0, "Member 'FLyraTabDescriptor::bHidden' has a wrong offset!");
static_assert(offsetof(FLyraTabDescriptor, bIsLock) == 0x0000F1, "Member 'FLyraTabDescriptor::bIsLock' has a wrong offset!");
static_assert(offsetof(FLyraTabDescriptor, TabButtonType) == 0x0000F8, "Member 'FLyraTabDescriptor::TabButtonType' has a wrong offset!");
static_assert(offsetof(FLyraTabDescriptor, TabContentType) == 0x000100, "Member 'FLyraTabDescriptor::TabContentType' has a wrong offset!");
static_assert(offsetof(FLyraTabDescriptor, CreatedTabContentWidget) == 0x000108, "Member 'FLyraTabDescriptor::CreatedTabContentWidget' has a wrong offset!");

// ScriptStruct LyraGame.PlayerIntStatisticItemEntry
// 0x000C (0x0018 - 0x000C)
struct FPlayerIntStatisticItemEntry final : public FFastArraySerializerItem
{
public:
	ETgfActorIntStatisticType                     Type;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TypeId;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerIntStatisticItemEntry) == 0x000004, "Wrong alignment on FPlayerIntStatisticItemEntry");
static_assert(sizeof(FPlayerIntStatisticItemEntry) == 0x000018, "Wrong size on FPlayerIntStatisticItemEntry");
static_assert(offsetof(FPlayerIntStatisticItemEntry, Type) == 0x00000C, "Member 'FPlayerIntStatisticItemEntry::Type' has a wrong offset!");
static_assert(offsetof(FPlayerIntStatisticItemEntry, TypeId) == 0x000010, "Member 'FPlayerIntStatisticItemEntry::TypeId' has a wrong offset!");
static_assert(offsetof(FPlayerIntStatisticItemEntry, Value) == 0x000014, "Member 'FPlayerIntStatisticItemEntry::Value' has a wrong offset!");

// ScriptStruct LyraGame.PlayerIntStatistics
// 0x0018 (0x0120 - 0x0108)
struct FPlayerIntStatistics final : public FFastArraySerializer
{
public:
	TArray<struct FPlayerIntStatisticItemEntry>   IntStatistics;                                     // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AActor*                                 OwnerActor;                                        // 0x0118(0x0008)(ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayerIntStatistics) == 0x000008, "Wrong alignment on FPlayerIntStatistics");
static_assert(sizeof(FPlayerIntStatistics) == 0x000120, "Wrong size on FPlayerIntStatistics");
static_assert(offsetof(FPlayerIntStatistics, IntStatistics) == 0x000108, "Member 'FPlayerIntStatistics::IntStatistics' has a wrong offset!");
static_assert(offsetof(FPlayerIntStatistics, OwnerActor) == 0x000118, "Member 'FPlayerIntStatistics::OwnerActor' has a wrong offset!");

// ScriptStruct LyraGame.TgfDamagePartMonitorConfig
// 0x0108 (0x0108 - 0x0000)
struct FTgfDamagePartMonitorConfig final
{
public:
	struct FGameplayTag                           ConfigAssetTag;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SourceRequiredTags;                                // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetRequiredTags;                                // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SourceTagQuery;                                    // 0x0048(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TargetTagQuery;                                    // 0x0090(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ULyraGameplayAbility>> ActivateGameplayAbilityList;                       // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         NeedDamageTimes;                                   // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeedDamageValue;                                   // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedTriggerTimes;                                  // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreAutoTrigger;                                 // 0x00F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurDamageTimes;                                    // 0x00F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurDamageValue;                                    // 0x00FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurTriggerTimes;                                   // 0x0100(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfDamagePartMonitorConfig) == 0x000008, "Wrong alignment on FTgfDamagePartMonitorConfig");
static_assert(sizeof(FTgfDamagePartMonitorConfig) == 0x000108, "Wrong size on FTgfDamagePartMonitorConfig");
static_assert(offsetof(FTgfDamagePartMonitorConfig, ConfigAssetTag) == 0x000000, "Member 'FTgfDamagePartMonitorConfig::ConfigAssetTag' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, SourceRequiredTags) == 0x000008, "Member 'FTgfDamagePartMonitorConfig::SourceRequiredTags' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, TargetRequiredTags) == 0x000028, "Member 'FTgfDamagePartMonitorConfig::TargetRequiredTags' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, SourceTagQuery) == 0x000048, "Member 'FTgfDamagePartMonitorConfig::SourceTagQuery' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, TargetTagQuery) == 0x000090, "Member 'FTgfDamagePartMonitorConfig::TargetTagQuery' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, ActivateGameplayAbilityList) == 0x0000D8, "Member 'FTgfDamagePartMonitorConfig::ActivateGameplayAbilityList' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, NeedDamageTimes) == 0x0000E8, "Member 'FTgfDamagePartMonitorConfig::NeedDamageTimes' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, NeedDamageValue) == 0x0000EC, "Member 'FTgfDamagePartMonitorConfig::NeedDamageValue' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, NeedTriggerTimes) == 0x0000F0, "Member 'FTgfDamagePartMonitorConfig::NeedTriggerTimes' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, IgnoreAutoTrigger) == 0x0000F4, "Member 'FTgfDamagePartMonitorConfig::IgnoreAutoTrigger' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, CurDamageTimes) == 0x0000F8, "Member 'FTgfDamagePartMonitorConfig::CurDamageTimes' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, CurDamageValue) == 0x0000FC, "Member 'FTgfDamagePartMonitorConfig::CurDamageValue' has a wrong offset!");
static_assert(offsetof(FTgfDamagePartMonitorConfig, CurTriggerTimes) == 0x000100, "Member 'FTgfDamagePartMonitorConfig::CurTriggerTimes' has a wrong offset!");

// ScriptStruct LyraGame.AffixDisplayConfig
// 0x0100 (0x0100 - 0x0000)
struct FAffixDisplayConfig final
{
public:
	struct FTGFPbDataTgfDBattleAffixDisplayData   DisplayData;                                       // 0x0000(0x0100)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAffixDisplayConfig) == 0x000008, "Wrong alignment on FAffixDisplayConfig");
static_assert(sizeof(FAffixDisplayConfig) == 0x000100, "Wrong size on FAffixDisplayConfig");
static_assert(offsetof(FAffixDisplayConfig, DisplayData) == 0x000000, "Member 'FAffixDisplayConfig::DisplayData' has a wrong offset!");

// ScriptStruct LyraGame.ItemGemConfig
// 0x0018 (0x0018 - 0x0000)
struct FItemGemConfig final
{
public:
	struct FTGFPbDataTgfDItemGem                  ItemGem;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         PolishingCount;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CorruptionId;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemGemConfig) == 0x000008, "Wrong alignment on FItemGemConfig");
static_assert(sizeof(FItemGemConfig) == 0x000018, "Wrong size on FItemGemConfig");
static_assert(offsetof(FItemGemConfig, ItemGem) == 0x000000, "Member 'FItemGemConfig::ItemGem' has a wrong offset!");
static_assert(offsetof(FItemGemConfig, PolishingCount) == 0x000010, "Member 'FItemGemConfig::PolishingCount' has a wrong offset!");
static_assert(offsetof(FItemGemConfig, CorruptionId) == 0x000014, "Member 'FItemGemConfig::CorruptionId' has a wrong offset!");

// ScriptStruct LyraGame.TgfFlawlessTrialData
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FTgfFlawlessTrialData final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfFlawlessTrialData) == 0x000004, "Wrong alignment on FTgfFlawlessTrialData");
static_assert(sizeof(FTgfFlawlessTrialData) == 0x00000C, "Wrong size on FTgfFlawlessTrialData");

// ScriptStruct LyraGame.PortalSpawnConfig
// 0x0018 (0x0018 - 0x0000)
struct FPortalSpawnConfig final
{
public:
	float                                         SpawnTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnProbability;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPortalType                                   PortalType;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     PortalClass;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPortalSpawnConfig) == 0x000008, "Wrong alignment on FPortalSpawnConfig");
static_assert(sizeof(FPortalSpawnConfig) == 0x000018, "Wrong size on FPortalSpawnConfig");
static_assert(offsetof(FPortalSpawnConfig, SpawnTime) == 0x000000, "Member 'FPortalSpawnConfig::SpawnTime' has a wrong offset!");
static_assert(offsetof(FPortalSpawnConfig, SpawnProbability) == 0x000004, "Member 'FPortalSpawnConfig::SpawnProbability' has a wrong offset!");
static_assert(offsetof(FPortalSpawnConfig, PortalType) == 0x000008, "Member 'FPortalSpawnConfig::PortalType' has a wrong offset!");
static_assert(offsetof(FPortalSpawnConfig, PortalClass) == 0x000010, "Member 'FPortalSpawnConfig::PortalClass' has a wrong offset!");

// ScriptStruct LyraGame.DeathZoneImportanceBox
// 0x0038 (0x0038 - 0x0000)
struct FDeathZoneImportanceBox final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Importance;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeathZoneImportanceBox) == 0x000008, "Wrong alignment on FDeathZoneImportanceBox");
static_assert(sizeof(FDeathZoneImportanceBox) == 0x000038, "Wrong size on FDeathZoneImportanceBox");
static_assert(offsetof(FDeathZoneImportanceBox, Center) == 0x000000, "Member 'FDeathZoneImportanceBox::Center' has a wrong offset!");
static_assert(offsetof(FDeathZoneImportanceBox, Extent) == 0x000018, "Member 'FDeathZoneImportanceBox::Extent' has a wrong offset!");
static_assert(offsetof(FDeathZoneImportanceBox, Rotation) == 0x000030, "Member 'FDeathZoneImportanceBox::Rotation' has a wrong offset!");
static_assert(offsetof(FDeathZoneImportanceBox, Importance) == 0x000034, "Member 'FDeathZoneImportanceBox::Importance' has a wrong offset!");

// ScriptStruct LyraGame.DeathZoneMessage
// 0x0030 (0x0030 - 0x0000)
struct FDeathZoneMessage final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         MessageDuration;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfPlayerSceneTag                            PlayerSceneTag;                                    // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeathZoneMessage) == 0x000008, "Wrong alignment on FDeathZoneMessage");
static_assert(sizeof(FDeathZoneMessage) == 0x000030, "Wrong size on FDeathZoneMessage");
static_assert(offsetof(FDeathZoneMessage, Delay) == 0x000000, "Member 'FDeathZoneMessage::Delay' has a wrong offset!");
static_assert(offsetof(FDeathZoneMessage, Message) == 0x000008, "Member 'FDeathZoneMessage::Message' has a wrong offset!");
static_assert(offsetof(FDeathZoneMessage, MessageDuration) == 0x000020, "Member 'FDeathZoneMessage::MessageDuration' has a wrong offset!");
static_assert(offsetof(FDeathZoneMessage, EventTag) == 0x000024, "Member 'FDeathZoneMessage::EventTag' has a wrong offset!");
static_assert(offsetof(FDeathZoneMessage, PlayerSceneTag) == 0x00002C, "Member 'FDeathZoneMessage::PlayerSceneTag' has a wrong offset!");

// ScriptStruct LyraGame.DeathZoneDisc
// 0x0090 (0x0090 - 0x0000)
struct FDeathZoneDisc final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Padding;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pause;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            DamageGE;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDeathZoneImportanceBox>        ImportanceBoxes;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPortalSpawnConfig>             PortalSpawnConfigs;                                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ExtractPortalSpawnTimes;                           // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 RedExtractPortalSpawnTimes;                        // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPortalSpawnConfig>             ShadowExtractPortalSpawnConfigs;                   // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 TeleportScrollSpawnTimes;                          // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDeathZoneMessage>              Messages;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeathZoneDisc) == 0x000008, "Wrong alignment on FDeathZoneDisc");
static_assert(sizeof(FDeathZoneDisc) == 0x000090, "Wrong size on FDeathZoneDisc");
static_assert(offsetof(FDeathZoneDisc, Radius) == 0x000000, "Member 'FDeathZoneDisc::Radius' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, Padding) == 0x000004, "Member 'FDeathZoneDisc::Padding' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, Pause) == 0x000008, "Member 'FDeathZoneDisc::Pause' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, Interval) == 0x00000C, "Member 'FDeathZoneDisc::Interval' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, Duration) == 0x000010, "Member 'FDeathZoneDisc::Duration' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, DamageGE) == 0x000018, "Member 'FDeathZoneDisc::DamageGE' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, ImportanceBoxes) == 0x000020, "Member 'FDeathZoneDisc::ImportanceBoxes' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, PortalSpawnConfigs) == 0x000030, "Member 'FDeathZoneDisc::PortalSpawnConfigs' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, ExtractPortalSpawnTimes) == 0x000040, "Member 'FDeathZoneDisc::ExtractPortalSpawnTimes' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, RedExtractPortalSpawnTimes) == 0x000050, "Member 'FDeathZoneDisc::RedExtractPortalSpawnTimes' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, ShadowExtractPortalSpawnConfigs) == 0x000060, "Member 'FDeathZoneDisc::ShadowExtractPortalSpawnConfigs' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, TeleportScrollSpawnTimes) == 0x000070, "Member 'FDeathZoneDisc::TeleportScrollSpawnTimes' has a wrong offset!");
static_assert(offsetof(FDeathZoneDisc, Messages) == 0x000080, "Member 'FDeathZoneDisc::Messages' has a wrong offset!");

// ScriptStruct LyraGame.DeathZoneDiscRuntimeInstance
// 0x0030 (0x0030 - 0x0000)
struct FDeathZoneDiscRuntimeInstance final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPortalSpawnInfo>               PortalSpawnInfos;                                  // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeathZoneDiscRuntimeInstance) == 0x000008, "Wrong alignment on FDeathZoneDiscRuntimeInstance");
static_assert(sizeof(FDeathZoneDiscRuntimeInstance) == 0x000030, "Wrong size on FDeathZoneDiscRuntimeInstance");
static_assert(offsetof(FDeathZoneDiscRuntimeInstance, Center) == 0x000000, "Member 'FDeathZoneDiscRuntimeInstance::Center' has a wrong offset!");
static_assert(offsetof(FDeathZoneDiscRuntimeInstance, Radius) == 0x000018, "Member 'FDeathZoneDiscRuntimeInstance::Radius' has a wrong offset!");
static_assert(offsetof(FDeathZoneDiscRuntimeInstance, PortalSpawnInfos) == 0x000020, "Member 'FDeathZoneDiscRuntimeInstance::PortalSpawnInfos' has a wrong offset!");

// ScriptStruct LyraGame.SpawnedPortals
// 0x0030 (0x0030 - 0x0000)
struct FSpawnedPortals final
{
public:
	TArray<TWeakObjectPtr<class AActor>>          BluePortals;                                       // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AActor>>          RedPortals;                                        // 0x0010(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AActor>>          ShadowPortals;                                     // 0x0020(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnedPortals) == 0x000008, "Wrong alignment on FSpawnedPortals");
static_assert(sizeof(FSpawnedPortals) == 0x000030, "Wrong size on FSpawnedPortals");
static_assert(offsetof(FSpawnedPortals, BluePortals) == 0x000000, "Member 'FSpawnedPortals::BluePortals' has a wrong offset!");
static_assert(offsetof(FSpawnedPortals, RedPortals) == 0x000010, "Member 'FSpawnedPortals::RedPortals' has a wrong offset!");
static_assert(offsetof(FSpawnedPortals, ShadowPortals) == 0x000020, "Member 'FSpawnedPortals::ShadowPortals' has a wrong offset!");

// ScriptStruct LyraGame.SpawnedPortalsInfo
// 0x0030 (0x0030 - 0x0000)
struct FSpawnedPortalsInfo final
{
public:
	TArray<class AActor*>                         BluePortals;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         RedPortals;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ShadowPortals;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnedPortalsInfo) == 0x000008, "Wrong alignment on FSpawnedPortalsInfo");
static_assert(sizeof(FSpawnedPortalsInfo) == 0x000030, "Wrong size on FSpawnedPortalsInfo");
static_assert(offsetof(FSpawnedPortalsInfo, BluePortals) == 0x000000, "Member 'FSpawnedPortalsInfo::BluePortals' has a wrong offset!");
static_assert(offsetof(FSpawnedPortalsInfo, RedPortals) == 0x000010, "Member 'FSpawnedPortalsInfo::RedPortals' has a wrong offset!");
static_assert(offsetof(FSpawnedPortalsInfo, ShadowPortals) == 0x000020, "Member 'FSpawnedPortalsInfo::ShadowPortals' has a wrong offset!");

// ScriptStruct LyraGame.InGameRookieTaskMessage
// 0x0018 (0x0018 - 0x0000)
struct FInGameRookieTaskMessage final
{
public:
	struct FGameplayTag                           Verb;                                              // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETGFInGameRookieTaskType                      RookieTaskType;                                    // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Value;                                             // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInGameRookieTaskMessage) == 0x000008, "Wrong alignment on FInGameRookieTaskMessage");
static_assert(sizeof(FInGameRookieTaskMessage) == 0x000018, "Wrong size on FInGameRookieTaskMessage");
static_assert(offsetof(FInGameRookieTaskMessage, Verb) == 0x000000, "Member 'FInGameRookieTaskMessage::Verb' has a wrong offset!");
static_assert(offsetof(FInGameRookieTaskMessage, RookieTaskType) == 0x000008, "Member 'FInGameRookieTaskMessage::RookieTaskType' has a wrong offset!");
static_assert(offsetof(FInGameRookieTaskMessage, Value) == 0x000010, "Member 'FInGameRookieTaskMessage::Value' has a wrong offset!");

// ScriptStruct LyraGame.InteractionQuery
// 0x0038 (0x0038 - 0x0000)
struct FInteractionQuery final
{
public:
	TWeakObjectPtr<class AActor>                  RequestingAvatar;                                  // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AController>             RequestingController;                              // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 OptionalObjectData;                                // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InteractionTag;                                    // 0x0018(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionQuery) == 0x000008, "Wrong alignment on FInteractionQuery");
static_assert(sizeof(FInteractionQuery) == 0x000038, "Wrong size on FInteractionQuery");
static_assert(offsetof(FInteractionQuery, RequestingAvatar) == 0x000000, "Member 'FInteractionQuery::RequestingAvatar' has a wrong offset!");
static_assert(offsetof(FInteractionQuery, RequestingController) == 0x000008, "Member 'FInteractionQuery::RequestingController' has a wrong offset!");
static_assert(offsetof(FInteractionQuery, OptionalObjectData) == 0x000010, "Member 'FInteractionQuery::OptionalObjectData' has a wrong offset!");
static_assert(offsetof(FInteractionQuery, InteractionTag) == 0x000018, "Member 'FInteractionQuery::InteractionTag' has a wrong offset!");

// ScriptStruct LyraGame.ItemBigIconRaw
// 0x0010 (0x0018 - 0x0008)
struct FItemBigIconRaw final : public FTableRowBase
{
public:
	int32                                         TypeId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemBigIconRaw) == 0x000008, "Wrong alignment on FItemBigIconRaw");
static_assert(sizeof(FItemBigIconRaw) == 0x000018, "Wrong size on FItemBigIconRaw");
static_assert(offsetof(FItemBigIconRaw, TypeId) == 0x000008, "Member 'FItemBigIconRaw::TypeId' has a wrong offset!");
static_assert(offsetof(FItemBigIconRaw, Icon) == 0x000010, "Member 'FItemBigIconRaw::Icon' has a wrong offset!");

// ScriptStruct LyraGame.TgfInventoryOperationItemSource
// 0x0030 (0x0030 - 0x0000)
struct FTgfInventoryOperationItemSource final
{
public:
	ETgfInventoryOperationItemSourceType          Type;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartialStackCount;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplicitTarget;                                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              TargetPosition;                                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryManagerComponent*          TargetInventory;                                   // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            TargetInventoryType;                               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfInventoryOperationItemSource) == 0x000008, "Wrong alignment on FTgfInventoryOperationItemSource");
static_assert(sizeof(FTgfInventoryOperationItemSource) == 0x000030, "Wrong size on FTgfInventoryOperationItemSource");
static_assert(offsetof(FTgfInventoryOperationItemSource, Type) == 0x000000, "Member 'FTgfInventoryOperationItemSource::Type' has a wrong offset!");
static_assert(offsetof(FTgfInventoryOperationItemSource, ItemInstance) == 0x000008, "Member 'FTgfInventoryOperationItemSource::ItemInstance' has a wrong offset!");
static_assert(offsetof(FTgfInventoryOperationItemSource, PartialStackCount) == 0x000010, "Member 'FTgfInventoryOperationItemSource::PartialStackCount' has a wrong offset!");
static_assert(offsetof(FTgfInventoryOperationItemSource, bExplicitTarget) == 0x000014, "Member 'FTgfInventoryOperationItemSource::bExplicitTarget' has a wrong offset!");
static_assert(offsetof(FTgfInventoryOperationItemSource, TargetPosition) == 0x000018, "Member 'FTgfInventoryOperationItemSource::TargetPosition' has a wrong offset!");
static_assert(offsetof(FTgfInventoryOperationItemSource, TargetInventory) == 0x000020, "Member 'FTgfInventoryOperationItemSource::TargetInventory' has a wrong offset!");
static_assert(offsetof(FTgfInventoryOperationItemSource, TargetInventoryType) == 0x000028, "Member 'FTgfInventoryOperationItemSource::TargetInventoryType' has a wrong offset!");

// ScriptStruct LyraGame.TgfInventoryLootState
// 0x0010 (0x0010 - 0x0000)
struct FTgfInventoryLootState final
{
public:
	class ULyraEquipmentManagerComponent*         LootEquipmentManager;                              // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraInventoryManagerComponent*         LootInventoryManager;                              // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfInventoryLootState) == 0x000008, "Wrong alignment on FTgfInventoryLootState");
static_assert(sizeof(FTgfInventoryLootState) == 0x000010, "Wrong size on FTgfInventoryLootState");
static_assert(offsetof(FTgfInventoryLootState, LootEquipmentManager) == 0x000000, "Member 'FTgfInventoryLootState::LootEquipmentManager' has a wrong offset!");
static_assert(offsetof(FTgfInventoryLootState, LootInventoryManager) == 0x000008, "Member 'FTgfInventoryLootState::LootInventoryManager' has a wrong offset!");

// ScriptStruct LyraGame.TgfItemDefinitionQualitySelectionSet
// 0x0020 (0x0020 - 0x0000)
struct FTgfItemDefinitionQualitySelectionSet final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> BaseDefinitionClass;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ETgfEquipQuality>                      Qualities;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemDefinition> Definition;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfItemDefinitionQualitySelectionSet) == 0x000008, "Wrong alignment on FTgfItemDefinitionQualitySelectionSet");
static_assert(sizeof(FTgfItemDefinitionQualitySelectionSet) == 0x000020, "Wrong size on FTgfItemDefinitionQualitySelectionSet");
static_assert(offsetof(FTgfItemDefinitionQualitySelectionSet, BaseDefinitionClass) == 0x000000, "Member 'FTgfItemDefinitionQualitySelectionSet::BaseDefinitionClass' has a wrong offset!");
static_assert(offsetof(FTgfItemDefinitionQualitySelectionSet, Qualities) == 0x000008, "Member 'FTgfItemDefinitionQualitySelectionSet::Qualities' has a wrong offset!");
static_assert(offsetof(FTgfItemDefinitionQualitySelectionSet, Definition) == 0x000018, "Member 'FTgfItemDefinitionQualitySelectionSet::Definition' has a wrong offset!");

// ScriptStruct LyraGame.TgfItemDefinitionSelectionSet
// 0x0010 (0x0010 - 0x0000)
struct FTgfItemDefinitionSelectionSet final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> OldDefinition;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemDefinition> NewDefinition;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfItemDefinitionSelectionSet) == 0x000008, "Wrong alignment on FTgfItemDefinitionSelectionSet");
static_assert(sizeof(FTgfItemDefinitionSelectionSet) == 0x000010, "Wrong size on FTgfItemDefinitionSelectionSet");
static_assert(offsetof(FTgfItemDefinitionSelectionSet, OldDefinition) == 0x000000, "Member 'FTgfItemDefinitionSelectionSet::OldDefinition' has a wrong offset!");
static_assert(offsetof(FTgfItemDefinitionSelectionSet, NewDefinition) == 0x000008, "Member 'FTgfItemDefinitionSelectionSet::NewDefinition' has a wrong offset!");

// ScriptStruct LyraGame.TgfItemEffectDefinition
// 0x0080 (0x0080 - 0x0000)
struct FTgfItemEffectDefinition final
{
public:
	class UObject*                                Effect;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocket;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             AttachTransform;                                   // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          EffectSound;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfItemEffectDefinition) == 0x000010, "Wrong alignment on FTgfItemEffectDefinition");
static_assert(sizeof(FTgfItemEffectDefinition) == 0x000080, "Wrong size on FTgfItemEffectDefinition");
static_assert(offsetof(FTgfItemEffectDefinition, Effect) == 0x000000, "Member 'FTgfItemEffectDefinition::Effect' has a wrong offset!");
static_assert(offsetof(FTgfItemEffectDefinition, AttachSocket) == 0x000008, "Member 'FTgfItemEffectDefinition::AttachSocket' has a wrong offset!");
static_assert(offsetof(FTgfItemEffectDefinition, AttachTransform) == 0x000010, "Member 'FTgfItemEffectDefinition::AttachTransform' has a wrong offset!");
static_assert(offsetof(FTgfItemEffectDefinition, LocationType) == 0x000070, "Member 'FTgfItemEffectDefinition::LocationType' has a wrong offset!");
static_assert(offsetof(FTgfItemEffectDefinition, EffectSound) == 0x000078, "Member 'FTgfItemEffectDefinition::EffectSound' has a wrong offset!");

// ScriptStruct LyraGame.TgfItemHeadFrameDefinition
// 0x0008 (0x0008 - 0x0000)
struct FTgfItemHeadFrameDefinition final
{
public:
	class UTexture2D*                             TextureHeadFrame;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfItemHeadFrameDefinition) == 0x000008, "Wrong alignment on FTgfItemHeadFrameDefinition");
static_assert(sizeof(FTgfItemHeadFrameDefinition) == 0x000008, "Wrong size on FTgfItemHeadFrameDefinition");
static_assert(offsetof(FTgfItemHeadFrameDefinition, TextureHeadFrame) == 0x000000, "Member 'FTgfItemHeadFrameDefinition::TextureHeadFrame' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySimpleFailureMessage
// 0x0040 (0x0040 - 0x0000)
struct FLyraAbilitySimpleFailureMessage final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  FailureTags;                                       // 0x0008(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   UserFacingReason;                                  // 0x0028(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilitySimpleFailureMessage) == 0x000008, "Wrong alignment on FLyraAbilitySimpleFailureMessage");
static_assert(sizeof(FLyraAbilitySimpleFailureMessage) == 0x000040, "Wrong size on FLyraAbilitySimpleFailureMessage");
static_assert(offsetof(FLyraAbilitySimpleFailureMessage, PlayerController) == 0x000000, "Member 'FLyraAbilitySimpleFailureMessage::PlayerController' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySimpleFailureMessage, FailureTags) == 0x000008, "Member 'FLyraAbilitySimpleFailureMessage::FailureTags' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySimpleFailureMessage, UserFacingReason) == 0x000028, "Member 'FLyraAbilitySimpleFailureMessage::UserFacingReason' has a wrong offset!");

// ScriptStruct LyraGame.TGFDumpedGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct FTGFDumpedGameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFDumpedGameplayEffect) == 0x000008, "Wrong alignment on FTGFDumpedGameplayEffect");
static_assert(sizeof(FTGFDumpedGameplayEffect) == 0x000010, "Wrong size on FTGFDumpedGameplayEffect");
static_assert(offsetof(FTGFDumpedGameplayEffect, GameplayEffectClass) == 0x000000, "Member 'FTGFDumpedGameplayEffect::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(FTGFDumpedGameplayEffect, StackCount) == 0x000008, "Member 'FTGFDumpedGameplayEffect::StackCount' has a wrong offset!");
static_assert(offsetof(FTGFDumpedGameplayEffect, Level) == 0x00000C, "Member 'FTGFDumpedGameplayEffect::Level' has a wrong offset!");

// ScriptStruct LyraGame.LyraCharacterPartHandle
// 0x0004 (0x0004 - 0x0000)
struct FLyraCharacterPartHandle final
{
public:
	int32                                         PartHandle;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLyraCharacterPartHandle) == 0x000004, "Wrong alignment on FLyraCharacterPartHandle");
static_assert(sizeof(FLyraCharacterPartHandle) == 0x000004, "Wrong size on FLyraCharacterPartHandle");
static_assert(offsetof(FLyraCharacterPartHandle, PartHandle) == 0x000000, "Member 'FLyraCharacterPartHandle::PartHandle' has a wrong offset!");

// ScriptStruct LyraGame.LyraAnimBodyStyleSelectionEntry
// 0x0028 (0x0028 - 0x0000)
struct FLyraAnimBodyStyleSelectionEntry final
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAnimBodyStyleSelectionEntry) == 0x000008, "Wrong alignment on FLyraAnimBodyStyleSelectionEntry");
static_assert(sizeof(FLyraAnimBodyStyleSelectionEntry) == 0x000028, "Wrong size on FLyraAnimBodyStyleSelectionEntry");
static_assert(offsetof(FLyraAnimBodyStyleSelectionEntry, Mesh) == 0x000000, "Member 'FLyraAnimBodyStyleSelectionEntry::Mesh' has a wrong offset!");
static_assert(offsetof(FLyraAnimBodyStyleSelectionEntry, RequiredTags) == 0x000008, "Member 'FLyraAnimBodyStyleSelectionEntry::RequiredTags' has a wrong offset!");

// ScriptStruct LyraGame.LyraAnimBodyStyleSelectionSet
// 0x0020 (0x0020 - 0x0000)
struct FLyraAnimBodyStyleSelectionSet final
{
public:
	TArray<struct FLyraAnimBodyStyleSelectionEntry> MeshRules;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysicsMaterial;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          DefaultMesh;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAnimBodyStyleSelectionSet) == 0x000008, "Wrong alignment on FLyraAnimBodyStyleSelectionSet");
static_assert(sizeof(FLyraAnimBodyStyleSelectionSet) == 0x000020, "Wrong size on FLyraAnimBodyStyleSelectionSet");
static_assert(offsetof(FLyraAnimBodyStyleSelectionSet, MeshRules) == 0x000000, "Member 'FLyraAnimBodyStyleSelectionSet::MeshRules' has a wrong offset!");
static_assert(offsetof(FLyraAnimBodyStyleSelectionSet, PhysicsMaterial) == 0x000010, "Member 'FLyraAnimBodyStyleSelectionSet::PhysicsMaterial' has a wrong offset!");
static_assert(offsetof(FLyraAnimBodyStyleSelectionSet, DefaultMesh) == 0x000018, "Member 'FLyraAnimBodyStyleSelectionSet::DefaultMesh' has a wrong offset!");

// ScriptStruct LyraGame.TgfCharaPartChangeConfig
// 0x0030 (0x0030 - 0x0000)
struct FTgfCharaPartChangeConfig final
{
public:
	ETgfCharaPart                                 PartEnum;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLyraAnimBodyStyleSelectionSet         PartMeshes;                                        // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          ClearPartWhenPartMeshIsEmpty;                      // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfCharaPartChangeConfig) == 0x000008, "Wrong alignment on FTgfCharaPartChangeConfig");
static_assert(sizeof(FTgfCharaPartChangeConfig) == 0x000030, "Wrong size on FTgfCharaPartChangeConfig");
static_assert(offsetof(FTgfCharaPartChangeConfig, PartEnum) == 0x000000, "Member 'FTgfCharaPartChangeConfig::PartEnum' has a wrong offset!");
static_assert(offsetof(FTgfCharaPartChangeConfig, PartMeshes) == 0x000008, "Member 'FTgfCharaPartChangeConfig::PartMeshes' has a wrong offset!");
static_assert(offsetof(FTgfCharaPartChangeConfig, ClearPartWhenPartMeshIsEmpty) == 0x000028, "Member 'FTgfCharaPartChangeConfig::ClearPartWhenPartMeshIsEmpty' has a wrong offset!");

// ScriptStruct LyraGame.LyraEquipmentActorToSpawn
// 0x01B0 (0x01B0 - 0x0000)
struct FLyraEquipmentActorToSpawn final
{
public:
	TSubclassOf<class AActor>                     ActorToSpawn;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightAttachSocket;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftAttachSocket;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightUnequipSocket;                                // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftUnequipSocket;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RightAttachTransform;                              // 0x0030(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LeftAttachTransform;                               // 0x0090(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             RightUnequipTransform;                             // 0x00F0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LeftUnequipTransform;                              // 0x0150(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraEquipmentActorToSpawn) == 0x000010, "Wrong alignment on FLyraEquipmentActorToSpawn");
static_assert(sizeof(FLyraEquipmentActorToSpawn) == 0x0001B0, "Wrong size on FLyraEquipmentActorToSpawn");
static_assert(offsetof(FLyraEquipmentActorToSpawn, ActorToSpawn) == 0x000000, "Member 'FLyraEquipmentActorToSpawn::ActorToSpawn' has a wrong offset!");
static_assert(offsetof(FLyraEquipmentActorToSpawn, RightAttachSocket) == 0x000008, "Member 'FLyraEquipmentActorToSpawn::RightAttachSocket' has a wrong offset!");
static_assert(offsetof(FLyraEquipmentActorToSpawn, LeftAttachSocket) == 0x000010, "Member 'FLyraEquipmentActorToSpawn::LeftAttachSocket' has a wrong offset!");
static_assert(offsetof(FLyraEquipmentActorToSpawn, RightUnequipSocket) == 0x000018, "Member 'FLyraEquipmentActorToSpawn::RightUnequipSocket' has a wrong offset!");
static_assert(offsetof(FLyraEquipmentActorToSpawn, LeftUnequipSocket) == 0x000020, "Member 'FLyraEquipmentActorToSpawn::LeftUnequipSocket' has a wrong offset!");
static_assert(offsetof(FLyraEquipmentActorToSpawn, RightAttachTransform) == 0x000030, "Member 'FLyraEquipmentActorToSpawn::RightAttachTransform' has a wrong offset!");
static_assert(offsetof(FLyraEquipmentActorToSpawn, LeftAttachTransform) == 0x000090, "Member 'FLyraEquipmentActorToSpawn::LeftAttachTransform' has a wrong offset!");
static_assert(offsetof(FLyraEquipmentActorToSpawn, RightUnequipTransform) == 0x0000F0, "Member 'FLyraEquipmentActorToSpawn::RightUnequipTransform' has a wrong offset!");
static_assert(offsetof(FLyraEquipmentActorToSpawn, LeftUnequipTransform) == 0x000150, "Member 'FLyraEquipmentActorToSpawn::LeftUnequipTransform' has a wrong offset!");

// ScriptStruct LyraGame.TgfCharaPartSpawnActor
// 0x0018 (0x0018 - 0x0000)
struct FTgfCharaPartSpawnActor final
{
public:
	ETgfCharaPart                                 PartEnum;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLyraEquipmentActorToSpawn>     ActorsToSpawn;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfCharaPartSpawnActor) == 0x000008, "Wrong alignment on FTgfCharaPartSpawnActor");
static_assert(sizeof(FTgfCharaPartSpawnActor) == 0x000018, "Wrong size on FTgfCharaPartSpawnActor");
static_assert(offsetof(FTgfCharaPartSpawnActor, PartEnum) == 0x000000, "Member 'FTgfCharaPartSpawnActor::PartEnum' has a wrong offset!");
static_assert(offsetof(FTgfCharaPartSpawnActor, ActorsToSpawn) == 0x000008, "Member 'FTgfCharaPartSpawnActor::ActorsToSpawn' has a wrong offset!");

// ScriptStruct LyraGame.LyraCharacterPart
// 0x0040 (0x0040 - 0x0000)
struct FLyraCharacterPart final
{
public:
	TSubclassOf<class AActor>                     PartClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterCustomizationCollisionMode          CollisionMode;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTgfCharaPartChangeConfig>      OverrideMeshes;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTgfCharaPartSpawnActor>        EquipmentActorsToSpawnInfo;                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bForceThirdPerson;                                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraCharacterPart) == 0x000008, "Wrong alignment on FLyraCharacterPart");
static_assert(sizeof(FLyraCharacterPart) == 0x000040, "Wrong size on FLyraCharacterPart");
static_assert(offsetof(FLyraCharacterPart, PartClass) == 0x000000, "Member 'FLyraCharacterPart::PartClass' has a wrong offset!");
static_assert(offsetof(FLyraCharacterPart, SocketName) == 0x000008, "Member 'FLyraCharacterPart::SocketName' has a wrong offset!");
static_assert(offsetof(FLyraCharacterPart, CollisionMode) == 0x000010, "Member 'FLyraCharacterPart::CollisionMode' has a wrong offset!");
static_assert(offsetof(FLyraCharacterPart, OverrideMeshes) == 0x000018, "Member 'FLyraCharacterPart::OverrideMeshes' has a wrong offset!");
static_assert(offsetof(FLyraCharacterPart, EquipmentActorsToSpawnInfo) == 0x000028, "Member 'FLyraCharacterPart::EquipmentActorsToSpawnInfo' has a wrong offset!");
static_assert(offsetof(FLyraCharacterPart, bForceThirdPerson) == 0x000038, "Member 'FLyraCharacterPart::bForceThirdPerson' has a wrong offset!");
static_assert(offsetof(FLyraCharacterPart, Visible) == 0x000039, "Member 'FLyraCharacterPart::Visible' has a wrong offset!");

// ScriptStruct LyraGame.LyraInteractionDurationMessage
// 0x0010 (0x0010 - 0x0000)
struct FLyraInteractionDurationMessage final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraInteractionDurationMessage) == 0x000008, "Wrong alignment on FLyraInteractionDurationMessage");
static_assert(sizeof(FLyraInteractionDurationMessage) == 0x000010, "Wrong size on FLyraInteractionDurationMessage");
static_assert(offsetof(FLyraInteractionDurationMessage, Instigator) == 0x000000, "Member 'FLyraInteractionDurationMessage::Instigator' has a wrong offset!");
static_assert(offsetof(FLyraInteractionDurationMessage, Duration) == 0x000008, "Member 'FLyraInteractionDurationMessage::Duration' has a wrong offset!");

// ScriptStruct LyraGame.LyraPenetrationAvoidanceFeeler
// 0x0030 (0x0030 - 0x0000)
struct FLyraPenetrationAvoidanceFeeler final
{
public:
	struct FRotator                               AdjustmentRot;                                     // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WorldWeight;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnWeight;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TraceInterval;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FramesUntilNextTrace;                              // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraPenetrationAvoidanceFeeler) == 0x000008, "Wrong alignment on FLyraPenetrationAvoidanceFeeler");
static_assert(sizeof(FLyraPenetrationAvoidanceFeeler) == 0x000030, "Wrong size on FLyraPenetrationAvoidanceFeeler");
static_assert(offsetof(FLyraPenetrationAvoidanceFeeler, AdjustmentRot) == 0x000000, "Member 'FLyraPenetrationAvoidanceFeeler::AdjustmentRot' has a wrong offset!");
static_assert(offsetof(FLyraPenetrationAvoidanceFeeler, WorldWeight) == 0x000018, "Member 'FLyraPenetrationAvoidanceFeeler::WorldWeight' has a wrong offset!");
static_assert(offsetof(FLyraPenetrationAvoidanceFeeler, PawnWeight) == 0x00001C, "Member 'FLyraPenetrationAvoidanceFeeler::PawnWeight' has a wrong offset!");
static_assert(offsetof(FLyraPenetrationAvoidanceFeeler, Extent) == 0x000020, "Member 'FLyraPenetrationAvoidanceFeeler::Extent' has a wrong offset!");
static_assert(offsetof(FLyraPenetrationAvoidanceFeeler, TraceInterval) == 0x000024, "Member 'FLyraPenetrationAvoidanceFeeler::TraceInterval' has a wrong offset!");
static_assert(offsetof(FLyraPenetrationAvoidanceFeeler, FramesUntilNextTrace) == 0x000028, "Member 'FLyraPenetrationAvoidanceFeeler::FramesUntilNextTrace' has a wrong offset!");

// ScriptStruct LyraGame.LyraVerbMessage
// 0x0080 (0x0080 - 0x0000)
struct FLyraVerbMessage final
{
public:
	struct FGameplayTag                           Verb;                                              // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Instigator;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Target;                                            // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InstigatorTags;                                    // 0x0018(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTags;                                        // 0x0038(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ContextTags;                                       // 0x0058(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	double                                        Magnitude;                                         // 0x0078(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraVerbMessage) == 0x000008, "Wrong alignment on FLyraVerbMessage");
static_assert(sizeof(FLyraVerbMessage) == 0x000080, "Wrong size on FLyraVerbMessage");
static_assert(offsetof(FLyraVerbMessage, Verb) == 0x000000, "Member 'FLyraVerbMessage::Verb' has a wrong offset!");
static_assert(offsetof(FLyraVerbMessage, Instigator) == 0x000008, "Member 'FLyraVerbMessage::Instigator' has a wrong offset!");
static_assert(offsetof(FLyraVerbMessage, Target) == 0x000010, "Member 'FLyraVerbMessage::Target' has a wrong offset!");
static_assert(offsetof(FLyraVerbMessage, InstigatorTags) == 0x000018, "Member 'FLyraVerbMessage::InstigatorTags' has a wrong offset!");
static_assert(offsetof(FLyraVerbMessage, TargetTags) == 0x000038, "Member 'FLyraVerbMessage::TargetTags' has a wrong offset!");
static_assert(offsetof(FLyraVerbMessage, ContextTags) == 0x000058, "Member 'FLyraVerbMessage::ContextTags' has a wrong offset!");
static_assert(offsetof(FLyraVerbMessage, Magnitude) == 0x000078, "Member 'FLyraVerbMessage::Magnitude' has a wrong offset!");

// ScriptStruct LyraGame.WeaponAttachSocket
// 0x0070 (0x0070 - 0x0000)
struct FWeaponAttachSocket final
{
public:
	class FName                                   Socket;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponAttachSocket) == 0x000010, "Wrong alignment on FWeaponAttachSocket");
static_assert(sizeof(FWeaponAttachSocket) == 0x000070, "Wrong size on FWeaponAttachSocket");
static_assert(offsetof(FWeaponAttachSocket, Socket) == 0x000000, "Member 'FWeaponAttachSocket::Socket' has a wrong offset!");
static_assert(offsetof(FWeaponAttachSocket, Offset) == 0x000010, "Member 'FWeaponAttachSocket::Offset' has a wrong offset!");

// ScriptStruct LyraGame.TorchParam
// 0x0014 (0x0014 - 0x0000)
struct FTorchParam final
{
public:
	int32                                         OptionId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartIntensity;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndIntensity;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartRadius;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndRadius;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTorchParam) == 0x000004, "Wrong alignment on FTorchParam");
static_assert(sizeof(FTorchParam) == 0x000014, "Wrong size on FTorchParam");
static_assert(offsetof(FTorchParam, OptionId) == 0x000000, "Member 'FTorchParam::OptionId' has a wrong offset!");
static_assert(offsetof(FTorchParam, StartIntensity) == 0x000004, "Member 'FTorchParam::StartIntensity' has a wrong offset!");
static_assert(offsetof(FTorchParam, EndIntensity) == 0x000008, "Member 'FTorchParam::EndIntensity' has a wrong offset!");
static_assert(offsetof(FTorchParam, StartRadius) == 0x00000C, "Member 'FTorchParam::StartRadius' has a wrong offset!");
static_assert(offsetof(FTorchParam, EndRadius) == 0x000010, "Member 'FTorchParam::EndRadius' has a wrong offset!");

// ScriptStruct LyraGame.PlayerFloatStatisticItemEntry
// 0x000C (0x0018 - 0x000C)
struct FPlayerFloatStatisticItemEntry final : public FFastArraySerializerItem
{
public:
	ETgfActorFloatStatisticType                   Type;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerFloatStatisticItemEntry) == 0x000008, "Wrong alignment on FPlayerFloatStatisticItemEntry");
static_assert(sizeof(FPlayerFloatStatisticItemEntry) == 0x000018, "Wrong size on FPlayerFloatStatisticItemEntry");
static_assert(offsetof(FPlayerFloatStatisticItemEntry, Type) == 0x00000C, "Member 'FPlayerFloatStatisticItemEntry::Type' has a wrong offset!");
static_assert(offsetof(FPlayerFloatStatisticItemEntry, Value) == 0x000010, "Member 'FPlayerFloatStatisticItemEntry::Value' has a wrong offset!");

// ScriptStruct LyraGame.PlayerRelationIntStatisticItemEntry
// 0x001C (0x0028 - 0x000C)
struct FPlayerRelationIntStatisticItemEntry final : public FFastArraySerializerItem
{
public:
	ETgfActorRelationStatisticType                Type;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OpenID;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerRelationIntStatisticItemEntry) == 0x000008, "Wrong alignment on FPlayerRelationIntStatisticItemEntry");
static_assert(sizeof(FPlayerRelationIntStatisticItemEntry) == 0x000028, "Wrong size on FPlayerRelationIntStatisticItemEntry");
static_assert(offsetof(FPlayerRelationIntStatisticItemEntry, Type) == 0x00000C, "Member 'FPlayerRelationIntStatisticItemEntry::Type' has a wrong offset!");
static_assert(offsetof(FPlayerRelationIntStatisticItemEntry, OpenID) == 0x000010, "Member 'FPlayerRelationIntStatisticItemEntry::OpenID' has a wrong offset!");
static_assert(offsetof(FPlayerRelationIntStatisticItemEntry, Value) == 0x000020, "Member 'FPlayerRelationIntStatisticItemEntry::Value' has a wrong offset!");

// ScriptStruct LyraGame.PlayerFloatStatistics
// 0x0018 (0x0120 - 0x0108)
struct FPlayerFloatStatistics final : public FFastArraySerializer
{
public:
	TArray<struct FPlayerFloatStatisticItemEntry> FloatStatistics;                                   // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AActor*                                 OwnerActor;                                        // 0x0118(0x0008)(ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayerFloatStatistics) == 0x000008, "Wrong alignment on FPlayerFloatStatistics");
static_assert(sizeof(FPlayerFloatStatistics) == 0x000120, "Wrong size on FPlayerFloatStatistics");
static_assert(offsetof(FPlayerFloatStatistics, FloatStatistics) == 0x000108, "Member 'FPlayerFloatStatistics::FloatStatistics' has a wrong offset!");
static_assert(offsetof(FPlayerFloatStatistics, OwnerActor) == 0x000118, "Member 'FPlayerFloatStatistics::OwnerActor' has a wrong offset!");

// ScriptStruct LyraGame.PlayerRelationIntStatistics
// 0x0018 (0x0120 - 0x0108)
struct FPlayerRelationIntStatistics final : public FFastArraySerializer
{
public:
	TArray<struct FPlayerRelationIntStatisticItemEntry> RelationIntStatistics;                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AActor*                                 OwnerActor;                                        // 0x0118(0x0008)(ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayerRelationIntStatistics) == 0x000008, "Wrong alignment on FPlayerRelationIntStatistics");
static_assert(sizeof(FPlayerRelationIntStatistics) == 0x000120, "Wrong size on FPlayerRelationIntStatistics");
static_assert(offsetof(FPlayerRelationIntStatistics, RelationIntStatistics) == 0x000108, "Member 'FPlayerRelationIntStatistics::RelationIntStatistics' has a wrong offset!");
static_assert(offsetof(FPlayerRelationIntStatistics, OwnerActor) == 0x000118, "Member 'FPlayerRelationIntStatistics::OwnerActor' has a wrong offset!");

// ScriptStruct LyraGame.FloatStatisticMessage
// 0x0018 (0x0018 - 0x0000)
struct FFloatStatisticMessage final
{
public:
	ETgfActorFloatStatisticType                   Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OldValue;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        NewValue;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatStatisticMessage) == 0x000008, "Wrong alignment on FFloatStatisticMessage");
static_assert(sizeof(FFloatStatisticMessage) == 0x000018, "Wrong size on FFloatStatisticMessage");
static_assert(offsetof(FFloatStatisticMessage, Type) == 0x000000, "Member 'FFloatStatisticMessage::Type' has a wrong offset!");
static_assert(offsetof(FFloatStatisticMessage, OldValue) == 0x000008, "Member 'FFloatStatisticMessage::OldValue' has a wrong offset!");
static_assert(offsetof(FFloatStatisticMessage, NewValue) == 0x000010, "Member 'FFloatStatisticMessage::NewValue' has a wrong offset!");

// ScriptStruct LyraGame.IntStatisticMessage
// 0x0010 (0x0010 - 0x0000)
struct FIntStatisticMessage final
{
public:
	ETgfActorIntStatisticType                     Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TypeId;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldValue;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntStatisticMessage) == 0x000004, "Wrong alignment on FIntStatisticMessage");
static_assert(sizeof(FIntStatisticMessage) == 0x000010, "Wrong size on FIntStatisticMessage");
static_assert(offsetof(FIntStatisticMessage, Type) == 0x000000, "Member 'FIntStatisticMessage::Type' has a wrong offset!");
static_assert(offsetof(FIntStatisticMessage, TypeId) == 0x000004, "Member 'FIntStatisticMessage::TypeId' has a wrong offset!");
static_assert(offsetof(FIntStatisticMessage, OldValue) == 0x000008, "Member 'FIntStatisticMessage::OldValue' has a wrong offset!");
static_assert(offsetof(FIntStatisticMessage, NewValue) == 0x00000C, "Member 'FIntStatisticMessage::NewValue' has a wrong offset!");

// ScriptStruct LyraGame.RelationIntStatisticMessage
// 0x0020 (0x0020 - 0x0000)
struct FRelationIntStatisticMessage final
{
public:
	ETgfActorRelationStatisticType                Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OpenID;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldValue;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRelationIntStatisticMessage) == 0x000008, "Wrong alignment on FRelationIntStatisticMessage");
static_assert(sizeof(FRelationIntStatisticMessage) == 0x000020, "Wrong size on FRelationIntStatisticMessage");
static_assert(offsetof(FRelationIntStatisticMessage, Type) == 0x000000, "Member 'FRelationIntStatisticMessage::Type' has a wrong offset!");
static_assert(offsetof(FRelationIntStatisticMessage, OpenID) == 0x000008, "Member 'FRelationIntStatisticMessage::OpenID' has a wrong offset!");
static_assert(offsetof(FRelationIntStatisticMessage, OldValue) == 0x000018, "Member 'FRelationIntStatisticMessage::OldValue' has a wrong offset!");
static_assert(offsetof(FRelationIntStatisticMessage, NewValue) == 0x00001C, "Member 'FRelationIntStatisticMessage::NewValue' has a wrong offset!");

// ScriptStruct LyraGame.RoleDisplayAttribute
// 0x00A8 (0x00B0 - 0x0008)
struct FRoleDisplayAttribute final : public FTableRowBase
{
public:
	EnRoleDisplayAttribueID                       Type_id;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_key;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EnRoleDisplayAttribueGroup                    Group;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconPath;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Describes;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Display_percentage;                                // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          As_int;                                            // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETgfActorCareer>                       Careers;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Value_ratio;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0068(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LuaFunction;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoleDisplayAttribute) == 0x000008, "Wrong alignment on FRoleDisplayAttribute");
static_assert(sizeof(FRoleDisplayAttribute) == 0x0000B0, "Wrong size on FRoleDisplayAttribute");
static_assert(offsetof(FRoleDisplayAttribute, Type_id) == 0x000008, "Member 'FRoleDisplayAttribute::Type_id' has a wrong offset!");
static_assert(offsetof(FRoleDisplayAttribute, Name_key) == 0x00000C, "Member 'FRoleDisplayAttribute::Name_key' has a wrong offset!");
static_assert(offsetof(FRoleDisplayAttribute, Order) == 0x000014, "Member 'FRoleDisplayAttribute::Order' has a wrong offset!");
static_assert(offsetof(FRoleDisplayAttribute, Group) == 0x000018, "Member 'FRoleDisplayAttribute::Group' has a wrong offset!");
static_assert(offsetof(FRoleDisplayAttribute, IconPath) == 0x000020, "Member 'FRoleDisplayAttribute::IconPath' has a wrong offset!");
static_assert(offsetof(FRoleDisplayAttribute, Describes) == 0x000030, "Member 'FRoleDisplayAttribute::Describes' has a wrong offset!");
static_assert(offsetof(FRoleDisplayAttribute, Display_percentage) == 0x000040, "Member 'FRoleDisplayAttribute::Display_percentage' has a wrong offset!");
static_assert(offsetof(FRoleDisplayAttribute, As_int) == 0x000041, "Member 'FRoleDisplayAttribute::As_int' has a wrong offset!");
static_assert(offsetof(FRoleDisplayAttribute, Careers) == 0x000048, "Member 'FRoleDisplayAttribute::Careers' has a wrong offset!");
static_assert(offsetof(FRoleDisplayAttribute, Value_ratio) == 0x000058, "Member 'FRoleDisplayAttribute::Value_ratio' has a wrong offset!");
static_assert(offsetof(FRoleDisplayAttribute, Attribute) == 0x000068, "Member 'FRoleDisplayAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(FRoleDisplayAttribute, LuaFunction) == 0x0000A0, "Member 'FRoleDisplayAttribute::LuaFunction' has a wrong offset!");

// ScriptStruct LyraGame.SwordInsSet
// 0x0010 (0x0010 - 0x0000)
struct FSwordInsSet final
{
public:
	TArray<class AActor*>                         Swords;                                            // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSwordInsSet) == 0x000008, "Wrong alignment on FSwordInsSet");
static_assert(sizeof(FSwordInsSet) == 0x000010, "Wrong size on FSwordInsSet");
static_assert(offsetof(FSwordInsSet, Swords) == 0x000000, "Member 'FSwordInsSet::Swords' has a wrong offset!");

// ScriptStruct LyraGame.TgfMovementMonitorSetting
// 0x00C8 (0x00C8 - 0x0000)
struct FTgfMovementMonitorSetting final
{
public:
	ETgfMovementMonitorType                       MovementMonitorType;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfMonitorNetExecutionPolicy                 NetExecutionPolicy;                                // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SourceRequiredTags;                                // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SourceTagQuery;                                    // 0x0028(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ULyraGameplayAbility>> ActivateGameplayAbilityList;                       // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bNeedCheckContinue;                                // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetWhenTrigger;                                 // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfMovementMonitorCrouchSetting              MonitorCrouchSetting;                              // 0x0082(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedSendResetEvent;                               // 0x0083(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   ResetEventTags;                                    // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bNeedSendStartEvent;                               // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   StartEventTags;                                    // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bNeedSendTriggerEvent;                             // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   TriggerEventTags;                                  // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfMovementMonitorSetting) == 0x000008, "Wrong alignment on FTgfMovementMonitorSetting");
static_assert(sizeof(FTgfMovementMonitorSetting) == 0x0000C8, "Wrong size on FTgfMovementMonitorSetting");
static_assert(offsetof(FTgfMovementMonitorSetting, MovementMonitorType) == 0x000000, "Member 'FTgfMovementMonitorSetting::MovementMonitorType' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, NetExecutionPolicy) == 0x000001, "Member 'FTgfMovementMonitorSetting::NetExecutionPolicy' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, SourceRequiredTags) == 0x000008, "Member 'FTgfMovementMonitorSetting::SourceRequiredTags' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, SourceTagQuery) == 0x000028, "Member 'FTgfMovementMonitorSetting::SourceTagQuery' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, ActivateGameplayAbilityList) == 0x000070, "Member 'FTgfMovementMonitorSetting::ActivateGameplayAbilityList' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, bNeedCheckContinue) == 0x000080, "Member 'FTgfMovementMonitorSetting::bNeedCheckContinue' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, bResetWhenTrigger) == 0x000081, "Member 'FTgfMovementMonitorSetting::bResetWhenTrigger' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, MonitorCrouchSetting) == 0x000082, "Member 'FTgfMovementMonitorSetting::MonitorCrouchSetting' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, bNeedSendResetEvent) == 0x000083, "Member 'FTgfMovementMonitorSetting::bNeedSendResetEvent' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, ResetEventTags) == 0x000088, "Member 'FTgfMovementMonitorSetting::ResetEventTags' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, bNeedSendStartEvent) == 0x000098, "Member 'FTgfMovementMonitorSetting::bNeedSendStartEvent' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, StartEventTags) == 0x0000A0, "Member 'FTgfMovementMonitorSetting::StartEventTags' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, bNeedSendTriggerEvent) == 0x0000B0, "Member 'FTgfMovementMonitorSetting::bNeedSendTriggerEvent' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorSetting, TriggerEventTags) == 0x0000B8, "Member 'FTgfMovementMonitorSetting::TriggerEventTags' has a wrong offset!");

// ScriptStruct LyraGame.TgfMovementMonitorConfig
// 0x00E8 (0x00E8 - 0x0000)
struct FTgfMovementMonitorConfig final
{
public:
	struct FGameplayTag                           MonitorMovementTag;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfMovementMonitorSetting             MovementMonitorSetting;                            // 0x0008(0x00C8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         NeedMoveTime;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedTriggerTimes;                                  // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreAutoTrigger;                                 // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurMoveTime;                                       // 0x00DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurTriggerTimes;                                   // 0x00E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLastUpdateTime;                                 // 0x00E4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTriggered;                                      // 0x00E5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E6[0x2];                                       // 0x00E6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfMovementMonitorConfig) == 0x000008, "Wrong alignment on FTgfMovementMonitorConfig");
static_assert(sizeof(FTgfMovementMonitorConfig) == 0x0000E8, "Wrong size on FTgfMovementMonitorConfig");
static_assert(offsetof(FTgfMovementMonitorConfig, MonitorMovementTag) == 0x000000, "Member 'FTgfMovementMonitorConfig::MonitorMovementTag' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorConfig, MovementMonitorSetting) == 0x000008, "Member 'FTgfMovementMonitorConfig::MovementMonitorSetting' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorConfig, NeedMoveTime) == 0x0000D0, "Member 'FTgfMovementMonitorConfig::NeedMoveTime' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorConfig, NeedTriggerTimes) == 0x0000D4, "Member 'FTgfMovementMonitorConfig::NeedTriggerTimes' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorConfig, IgnoreAutoTrigger) == 0x0000D8, "Member 'FTgfMovementMonitorConfig::IgnoreAutoTrigger' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorConfig, CurMoveTime) == 0x0000DC, "Member 'FTgfMovementMonitorConfig::CurMoveTime' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorConfig, CurTriggerTimes) == 0x0000E0, "Member 'FTgfMovementMonitorConfig::CurTriggerTimes' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorConfig, bIsLastUpdateTime) == 0x0000E4, "Member 'FTgfMovementMonitorConfig::bIsLastUpdateTime' has a wrong offset!");
static_assert(offsetof(FTgfMovementMonitorConfig, bIsTriggered) == 0x0000E5, "Member 'FTgfMovementMonitorConfig::bIsTriggered' has a wrong offset!");

// ScriptStruct LyraGame.TgfApplyAOEExtraParam
// 0x0190 (0x0190 - 0x0000)
struct FTgfApplyAOEExtraParam final
{
public:
	struct FGameplayTagRequirements               TargetRequirements;                                // 0x0000(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ContextTags;                                       // 0x0040(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         AttackDPH;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRate;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSplitNum;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDPHRate;                                        // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDeathActor;                                 // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Level;                                             // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfUseAttackType                             AttackType;                                        // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCauseInterrupt;                                // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            InterruptGE;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideAttackWeight;                              // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedCritical;                                     // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTeamRestrict;                               // 0x008D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0090(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0178(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfApplyAOEExtraParam) == 0x000008, "Wrong alignment on FTgfApplyAOEExtraParam");
static_assert(sizeof(FTgfApplyAOEExtraParam) == 0x000190, "Wrong size on FTgfApplyAOEExtraParam");
static_assert(offsetof(FTgfApplyAOEExtraParam, TargetRequirements) == 0x000000, "Member 'FTgfApplyAOEExtraParam::TargetRequirements' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, ContextTags) == 0x000040, "Member 'FTgfApplyAOEExtraParam::ContextTags' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, AttackDPH) == 0x000060, "Member 'FTgfApplyAOEExtraParam::AttackDPH' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, DamageRate) == 0x000064, "Member 'FTgfApplyAOEExtraParam::DamageRate' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, MinSplitNum) == 0x000068, "Member 'FTgfApplyAOEExtraParam::MinSplitNum' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, MinDPHRate) == 0x00006C, "Member 'FTgfApplyAOEExtraParam::MinDPHRate' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, bIgnoreDeathActor) == 0x000070, "Member 'FTgfApplyAOEExtraParam::bIgnoreDeathActor' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, Level) == 0x000074, "Member 'FTgfApplyAOEExtraParam::Level' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, AttackType) == 0x000078, "Member 'FTgfApplyAOEExtraParam::AttackType' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, bCanCauseInterrupt) == 0x000079, "Member 'FTgfApplyAOEExtraParam::bCanCauseInterrupt' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, InterruptGE) == 0x000080, "Member 'FTgfApplyAOEExtraParam::InterruptGE' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, OverrideAttackWeight) == 0x000088, "Member 'FTgfApplyAOEExtraParam::OverrideAttackWeight' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, bNeedCritical) == 0x00008C, "Member 'FTgfApplyAOEExtraParam::bNeedCritical' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, bIgnoreTeamRestrict) == 0x00008D, "Member 'FTgfApplyAOEExtraParam::bIgnoreTeamRestrict' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, HitResult) == 0x000090, "Member 'FTgfApplyAOEExtraParam::HitResult' has a wrong offset!");
static_assert(offsetof(FTgfApplyAOEExtraParam, EffectContext) == 0x000178, "Member 'FTgfApplyAOEExtraParam::EffectContext' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayAbilityTargetingPassiveMoveInfo
// 0x0040 (0x0040 - 0x0000)
struct FTgfGameplayAbilityTargetingPassiveMoveInfo final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRotation;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TargetRotation;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfGameplayAbilityTargetingPassiveMoveInfo) == 0x000008, "Wrong alignment on FTgfGameplayAbilityTargetingPassiveMoveInfo");
static_assert(sizeof(FTgfGameplayAbilityTargetingPassiveMoveInfo) == 0x000040, "Wrong size on FTgfGameplayAbilityTargetingPassiveMoveInfo");
static_assert(offsetof(FTgfGameplayAbilityTargetingPassiveMoveInfo, TargetLocation) == 0x000000, "Member 'FTgfGameplayAbilityTargetingPassiveMoveInfo::TargetLocation' has a wrong offset!");
static_assert(offsetof(FTgfGameplayAbilityTargetingPassiveMoveInfo, bUpdateRotation) == 0x000018, "Member 'FTgfGameplayAbilityTargetingPassiveMoveInfo::bUpdateRotation' has a wrong offset!");
static_assert(offsetof(FTgfGameplayAbilityTargetingPassiveMoveInfo, TargetRotation) == 0x000020, "Member 'FTgfGameplayAbilityTargetingPassiveMoveInfo::TargetRotation' has a wrong offset!");
static_assert(offsetof(FTgfGameplayAbilityTargetingPassiveMoveInfo, Duration) == 0x000038, "Member 'FTgfGameplayAbilityTargetingPassiveMoveInfo::Duration' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayAbilityTargetData_PassiveMove
// 0x0040 (0x0048 - 0x0008)
struct FTgfGameplayAbilityTargetData_PassiveMove final : public FGameplayAbilityTargetData
{
public:
	struct FTgfGameplayAbilityTargetingPassiveMoveInfo PassiveMoveInfo;                                   // 0x0008(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfGameplayAbilityTargetData_PassiveMove) == 0x000008, "Wrong alignment on FTgfGameplayAbilityTargetData_PassiveMove");
static_assert(sizeof(FTgfGameplayAbilityTargetData_PassiveMove) == 0x000048, "Wrong size on FTgfGameplayAbilityTargetData_PassiveMove");
static_assert(offsetof(FTgfGameplayAbilityTargetData_PassiveMove, PassiveMoveInfo) == 0x000008, "Member 'FTgfGameplayAbilityTargetData_PassiveMove::PassiveMoveInfo' has a wrong offset!");

// ScriptStruct LyraGame.MovingCheckParams
// 0x0014 (0x0014 - 0x0000)
struct FMovingCheckParams final
{
public:
	uint8                                         bCheckVelocity : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCheckRotationYaw : 1;                             // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCheckRotationPitch : 1;                           // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCheckRepeat : 1;                                  // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCheckMaxDistance : 1;                             // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseMeshLocation : 1;                              // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreZ : 1;                                      // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDebugMode : 1;                                    // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAnglePerSecond;                                 // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistancePerSecond;                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckInterval;                                     // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovingCheckParams) == 0x000004, "Wrong alignment on FMovingCheckParams");
static_assert(sizeof(FMovingCheckParams) == 0x000014, "Wrong size on FMovingCheckParams");
static_assert(offsetof(FMovingCheckParams, MaxAnglePerSecond) == 0x000004, "Member 'FMovingCheckParams::MaxAnglePerSecond' has a wrong offset!");
static_assert(offsetof(FMovingCheckParams, MaxDistancePerSecond) == 0x000008, "Member 'FMovingCheckParams::MaxDistancePerSecond' has a wrong offset!");
static_assert(offsetof(FMovingCheckParams, CheckInterval) == 0x00000C, "Member 'FMovingCheckParams::CheckInterval' has a wrong offset!");
static_assert(offsetof(FMovingCheckParams, MaxDistance) == 0x000010, "Member 'FMovingCheckParams::MaxDistance' has a wrong offset!");

// ScriptStruct LyraGame.TgfAIAbilityFilter
// 0x0038 (0x0038 - 0x0000)
struct FTgfAIAbilityFilter final
{
public:
	ETgfAIAbilityFilterType                       Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Args;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfAIAbilityFilter) == 0x000008, "Wrong alignment on FTgfAIAbilityFilter");
static_assert(sizeof(FTgfAIAbilityFilter) == 0x000038, "Wrong size on FTgfAIAbilityFilter");
static_assert(offsetof(FTgfAIAbilityFilter, Type) == 0x000000, "Member 'FTgfAIAbilityFilter::Type' has a wrong offset!");
static_assert(offsetof(FTgfAIAbilityFilter, Args) == 0x000008, "Member 'FTgfAIAbilityFilter::Args' has a wrong offset!");
static_assert(offsetof(FTgfAIAbilityFilter, Tags) == 0x000018, "Member 'FTgfAIAbilityFilter::Tags' has a wrong offset!");

// ScriptStruct LyraGame.TgfAIAbilityTargetFilter
// 0x0038 (0x0038 - 0x0000)
struct FTgfAIAbilityTargetFilter final
{
public:
	ETgfAIAbilityTargetFilterType                 Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Args;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfAIAbilityTargetFilter) == 0x000008, "Wrong alignment on FTgfAIAbilityTargetFilter");
static_assert(sizeof(FTgfAIAbilityTargetFilter) == 0x000038, "Wrong size on FTgfAIAbilityTargetFilter");
static_assert(offsetof(FTgfAIAbilityTargetFilter, Type) == 0x000000, "Member 'FTgfAIAbilityTargetFilter::Type' has a wrong offset!");
static_assert(offsetof(FTgfAIAbilityTargetFilter, Args) == 0x000008, "Member 'FTgfAIAbilityTargetFilter::Args' has a wrong offset!");
static_assert(offsetof(FTgfAIAbilityTargetFilter, Tags) == 0x000018, "Member 'FTgfAIAbilityTargetFilter::Tags' has a wrong offset!");

// ScriptStruct LyraGame.TgfAIAbilityTarget
// 0x0030 (0x0030 - 0x0000)
struct FTgfAIAbilityTarget final
{
public:
	ETgfAIAbilityTargetType                       Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ThreatTarget;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfAIAbilityTarget) == 0x000008, "Wrong alignment on FTgfAIAbilityTarget");
static_assert(sizeof(FTgfAIAbilityTarget) == 0x000030, "Wrong size on FTgfAIAbilityTarget");
static_assert(offsetof(FTgfAIAbilityTarget, Type) == 0x000000, "Member 'FTgfAIAbilityTarget::Type' has a wrong offset!");
static_assert(offsetof(FTgfAIAbilityTarget, Actor) == 0x000008, "Member 'FTgfAIAbilityTarget::Actor' has a wrong offset!");
static_assert(offsetof(FTgfAIAbilityTarget, Vector) == 0x000010, "Member 'FTgfAIAbilityTarget::Vector' has a wrong offset!");
static_assert(offsetof(FTgfAIAbilityTarget, ThreatTarget) == 0x000028, "Member 'FTgfAIAbilityTarget::ThreatTarget' has a wrong offset!");

// ScriptStruct LyraGame.TgfMoveActorConfig
// 0x0030 (0x0030 - 0x0000)
struct FTgfMoveActorConfig final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           LocationCurve;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExtractRootMotionCurve;                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldIgnoreZAccumulate;                          // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenMoveBlocked;                              // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampVelocity;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseConstantForce;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceStrength;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StrengthCurve;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepForwardDirection;                             // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfMoveActorConfig) == 0x000008, "Wrong alignment on FTgfMoveActorConfig");
static_assert(sizeof(FTgfMoveActorConfig) == 0x000030, "Wrong size on FTgfMoveActorConfig");
static_assert(offsetof(FTgfMoveActorConfig, Priority) == 0x000000, "Member 'FTgfMoveActorConfig::Priority' has a wrong offset!");
static_assert(offsetof(FTgfMoveActorConfig, LocationCurve) == 0x000008, "Member 'FTgfMoveActorConfig::LocationCurve' has a wrong offset!");
static_assert(offsetof(FTgfMoveActorConfig, bIsExtractRootMotionCurve) == 0x000010, "Member 'FTgfMoveActorConfig::bIsExtractRootMotionCurve' has a wrong offset!");
static_assert(offsetof(FTgfMoveActorConfig, bShouldIgnoreZAccumulate) == 0x000011, "Member 'FTgfMoveActorConfig::bShouldIgnoreZAccumulate' has a wrong offset!");
static_assert(offsetof(FTgfMoveActorConfig, bStopWhenMoveBlocked) == 0x000012, "Member 'FTgfMoveActorConfig::bStopWhenMoveBlocked' has a wrong offset!");
static_assert(offsetof(FTgfMoveActorConfig, ClampVelocity) == 0x000014, "Member 'FTgfMoveActorConfig::ClampVelocity' has a wrong offset!");
static_assert(offsetof(FTgfMoveActorConfig, bUseConstantForce) == 0x000018, "Member 'FTgfMoveActorConfig::bUseConstantForce' has a wrong offset!");
static_assert(offsetof(FTgfMoveActorConfig, ForceStrength) == 0x00001C, "Member 'FTgfMoveActorConfig::ForceStrength' has a wrong offset!");
static_assert(offsetof(FTgfMoveActorConfig, StrengthCurve) == 0x000020, "Member 'FTgfMoveActorConfig::StrengthCurve' has a wrong offset!");
static_assert(offsetof(FTgfMoveActorConfig, bKeepForwardDirection) == 0x000028, "Member 'FTgfMoveActorConfig::bKeepForwardDirection' has a wrong offset!");

// ScriptStruct LyraGame.TgfLineEffectStartConfig
// 0x0058 (0x0058 - 0x0000)
struct FTgfLineEffectStartConfig final
{
public:
	ETgfEffectPlacementTargetType                 PlacementTargetType;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideRotation : 1;                             // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideScale : 1;                                // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotationOverride;                                  // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ScaleOverride;                                     // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachmentOffset;                                  // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfLineEffectStartConfig) == 0x000008, "Wrong alignment on FTgfLineEffectStartConfig");
static_assert(sizeof(FTgfLineEffectStartConfig) == 0x000058, "Wrong size on FTgfLineEffectStartConfig");
static_assert(offsetof(FTgfLineEffectStartConfig, PlacementTargetType) == 0x000000, "Member 'FTgfLineEffectStartConfig::PlacementTargetType' has a wrong offset!");
static_assert(offsetof(FTgfLineEffectStartConfig, SocketName) == 0x000004, "Member 'FTgfLineEffectStartConfig::SocketName' has a wrong offset!");
static_assert(offsetof(FTgfLineEffectStartConfig, RotationOverride) == 0x000010, "Member 'FTgfLineEffectStartConfig::RotationOverride' has a wrong offset!");
static_assert(offsetof(FTgfLineEffectStartConfig, ScaleOverride) == 0x000028, "Member 'FTgfLineEffectStartConfig::ScaleOverride' has a wrong offset!");
static_assert(offsetof(FTgfLineEffectStartConfig, AttachmentOffset) == 0x000040, "Member 'FTgfLineEffectStartConfig::AttachmentOffset' has a wrong offset!");

// ScriptStruct LyraGame.TgfLineEffectEndConfig
// 0x0014 (0x0014 - 0x0000)
struct FTgfLineEffectEndConfig final
{
public:
	ETgfEffectPlacementTargetType                 PlacementTargetType;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetMeshParamName;                               // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfLineEffectEndConfig) == 0x000004, "Wrong alignment on FTgfLineEffectEndConfig");
static_assert(sizeof(FTgfLineEffectEndConfig) == 0x000014, "Wrong size on FTgfLineEffectEndConfig");
static_assert(offsetof(FTgfLineEffectEndConfig, PlacementTargetType) == 0x000000, "Member 'FTgfLineEffectEndConfig::PlacementTargetType' has a wrong offset!");
static_assert(offsetof(FTgfLineEffectEndConfig, SocketName) == 0x000004, "Member 'FTgfLineEffectEndConfig::SocketName' has a wrong offset!");
static_assert(offsetof(FTgfLineEffectEndConfig, TargetMeshParamName) == 0x00000C, "Member 'FTgfLineEffectEndConfig::TargetMeshParamName' has a wrong offset!");

// ScriptStruct LyraGame.FXContainer
// 0x0010 (0x0010 - 0x0000)
struct FFXContainer final
{
public:
	TArray<class UFXSystemComponent*>             Effects;                                           // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFXContainer) == 0x000008, "Wrong alignment on FFXContainer");
static_assert(sizeof(FFXContainer) == 0x000010, "Wrong size on FFXContainer");
static_assert(offsetof(FFXContainer, Effects) == 0x000000, "Member 'FFXContainer::Effects' has a wrong offset!");

// ScriptStruct LyraGame.TgfBattleEleResistanceItem
// 0x0008 (0x0008 - 0x0000)
struct FTgfBattleEleResistanceItem final
{
public:
	ETgfBattleElement                             AttackElement;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfBattleElement                             DefendElement;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaRate;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfBattleEleResistanceItem) == 0x000004, "Wrong alignment on FTgfBattleEleResistanceItem");
static_assert(sizeof(FTgfBattleEleResistanceItem) == 0x000008, "Wrong size on FTgfBattleEleResistanceItem");
static_assert(offsetof(FTgfBattleEleResistanceItem, AttackElement) == 0x000000, "Member 'FTgfBattleEleResistanceItem::AttackElement' has a wrong offset!");
static_assert(offsetof(FTgfBattleEleResistanceItem, DefendElement) == 0x000001, "Member 'FTgfBattleEleResistanceItem::DefendElement' has a wrong offset!");
static_assert(offsetof(FTgfBattleEleResistanceItem, DeltaRate) == 0x000004, "Member 'FTgfBattleEleResistanceItem::DeltaRate' has a wrong offset!");

// ScriptStruct LyraGame.BlendingUtilParamsCache
// 0x000C (0x000C - 0x0000)
struct FBlendingUtilParamsCache final
{
public:
	float                                         StartValue;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInBlending : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlendingUtilParamsCache) == 0x000004, "Wrong alignment on FBlendingUtilParamsCache");
static_assert(sizeof(FBlendingUtilParamsCache) == 0x00000C, "Wrong size on FBlendingUtilParamsCache");
static_assert(offsetof(FBlendingUtilParamsCache, StartValue) == 0x000000, "Member 'FBlendingUtilParamsCache::StartValue' has a wrong offset!");
static_assert(offsetof(FBlendingUtilParamsCache, ElapsedTime) == 0x000004, "Member 'FBlendingUtilParamsCache::ElapsedTime' has a wrong offset!");

// ScriptStruct LyraGame.AnimTagPair
// 0x0028 (0x0028 - 0x0000)
struct FAnimTagPair final
{
public:
	struct FGameplayTagContainer                  Tag;                                               // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimTagPair) == 0x000008, "Wrong alignment on FAnimTagPair");
static_assert(sizeof(FAnimTagPair) == 0x000028, "Wrong size on FAnimTagPair");
static_assert(offsetof(FAnimTagPair, Tag) == 0x000000, "Member 'FAnimTagPair::Tag' has a wrong offset!");
static_assert(offsetof(FAnimTagPair, Animation) == 0x000020, "Member 'FAnimTagPair::Animation' has a wrong offset!");

// ScriptStruct LyraGame.AnimTagPairSet
// 0x0018 (0x0018 - 0x0000)
struct FAnimTagPairSet final
{
public:
	TArray<struct FAnimTagPair>                   Animations;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      DefaultAnimation;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimTagPairSet) == 0x000008, "Wrong alignment on FAnimTagPairSet");
static_assert(sizeof(FAnimTagPairSet) == 0x000018, "Wrong size on FAnimTagPairSet");
static_assert(offsetof(FAnimTagPairSet, Animations) == 0x000000, "Member 'FAnimTagPairSet::Animations' has a wrong offset!");
static_assert(offsetof(FAnimTagPairSet, DefaultAnimation) == 0x000010, "Member 'FAnimTagPairSet::DefaultAnimation' has a wrong offset!");

// ScriptStruct LyraGame.PhysicsBodyContainer
// 0x0030 (0x0030 - 0x0000)
struct FPhysicsBodyContainer final
{
public:
	TArray<class FName>                           Bodies;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsBodyContainer) == 0x000008, "Wrong alignment on FPhysicsBodyContainer");
static_assert(sizeof(FPhysicsBodyContainer) == 0x000030, "Wrong size on FPhysicsBodyContainer");
static_assert(offsetof(FPhysicsBodyContainer, Bodies) == 0x000000, "Member 'FPhysicsBodyContainer::Bodies' has a wrong offset!");
static_assert(offsetof(FPhysicsBodyContainer, Tags) == 0x000010, "Member 'FPhysicsBodyContainer::Tags' has a wrong offset!");

// ScriptStruct LyraGame.ProjectileActorSpawnParams
// 0x0070 (0x0070 - 0x0000)
struct FProjectileActorSpawnParams final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedChangeMesh;                                    // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProjectileActorSpawnParams) == 0x000010, "Wrong alignment on FProjectileActorSpawnParams");
static_assert(sizeof(FProjectileActorSpawnParams) == 0x000070, "Wrong size on FProjectileActorSpawnParams");
static_assert(offsetof(FProjectileActorSpawnParams, SpawnTransform) == 0x000000, "Member 'FProjectileActorSpawnParams::SpawnTransform' has a wrong offset!");
static_assert(offsetof(FProjectileActorSpawnParams, NeedChangeMesh) == 0x000060, "Member 'FProjectileActorSpawnParams::NeedChangeMesh' has a wrong offset!");

// ScriptStruct LyraGame.TimeDilationConfig
// 0x0008 (0x0008 - 0x0000)
struct FTimeDilationConfig final
{
public:
	float                                         TimeDilationDuration;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDilationRate;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeDilationConfig) == 0x000004, "Wrong alignment on FTimeDilationConfig");
static_assert(sizeof(FTimeDilationConfig) == 0x000008, "Wrong size on FTimeDilationConfig");
static_assert(offsetof(FTimeDilationConfig, TimeDilationDuration) == 0x000000, "Member 'FTimeDilationConfig::TimeDilationDuration' has a wrong offset!");
static_assert(offsetof(FTimeDilationConfig, TimeDilationRate) == 0x000004, "Member 'FTimeDilationConfig::TimeDilationRate' has a wrong offset!");

// ScriptStruct LyraGame.MimicArg
// 0x0038 (0x0038 - 0x0000)
struct FMimicArg final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     MimicTargetActorTemplate;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToChange;                                      // 0x0010(0x0020)(NativeAccessSpecifierPublic)
	bool                                          IgnoreCollision;                                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMimicArg) == 0x000008, "Wrong alignment on FMimicArg");
static_assert(sizeof(FMimicArg) == 0x000038, "Wrong size on FMimicArg");
static_assert(offsetof(FMimicArg, IsEnabled) == 0x000000, "Member 'FMimicArg::IsEnabled' has a wrong offset!");
static_assert(offsetof(FMimicArg, MimicTargetActorTemplate) == 0x000008, "Member 'FMimicArg::MimicTargetActorTemplate' has a wrong offset!");
static_assert(offsetof(FMimicArg, TagsToChange) == 0x000010, "Member 'FMimicArg::TagsToChange' has a wrong offset!");
static_assert(offsetof(FMimicArg, IgnoreCollision) == 0x000030, "Member 'FMimicArg::IgnoreCollision' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayTagABPConfig
// 0x0020 (0x0020 - 0x0000)
struct FTgfGameplayTagABPConfig final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              ABPClass;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfGameplayTagABPConfig) == 0x000008, "Wrong alignment on FTgfGameplayTagABPConfig");
static_assert(sizeof(FTgfGameplayTagABPConfig) == 0x000020, "Wrong size on FTgfGameplayTagABPConfig");
static_assert(offsetof(FTgfGameplayTagABPConfig, Tag) == 0x000000, "Member 'FTgfGameplayTagABPConfig::Tag' has a wrong offset!");
static_assert(offsetof(FTgfGameplayTagABPConfig, ABPClass) == 0x000008, "Member 'FTgfGameplayTagABPConfig::ABPClass' has a wrong offset!");

// ScriptStruct LyraGame.TgfVisibleCheck
// 0x0008 (0x0008 - 0x0000)
struct FTgfVisibleCheck final
{
public:
	bool                                          bVisibleCheck;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckDelayTime;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfVisibleCheck) == 0x000004, "Wrong alignment on FTgfVisibleCheck");
static_assert(sizeof(FTgfVisibleCheck) == 0x000008, "Wrong size on FTgfVisibleCheck");
static_assert(offsetof(FTgfVisibleCheck, bVisibleCheck) == 0x000000, "Member 'FTgfVisibleCheck::bVisibleCheck' has a wrong offset!");
static_assert(offsetof(FTgfVisibleCheck, CheckDelayTime) == 0x000004, "Member 'FTgfVisibleCheck::CheckDelayTime' has a wrong offset!");

// ScriptStruct LyraGame.TgfRaceAvatarBodyModifyData
// 0x0168 (0x0168 - 0x0000)
struct FTgfRaceAvatarBodyModifyData final
{
public:
	struct FVector                                Bip001_ctrl;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bip001_L_Thigh_ctrl;                               // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bip001_L_Calf_ctrl;                                // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bip001_R_Thigh_ctrl;                               // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bip001_R_Calf_ctrl;                                // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bip001_Neck_ctrl;                                  // 0x0078(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bip001_Head_ctrl;                                  // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bone_Skirt_01_ctrl;                                // 0x00A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bone_Skirt_02_ctrl;                                // 0x00C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bone_Skirt_03_ctrl;                                // 0x00D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bone_Skirt_04_ctrl;                                // 0x00F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bone_Skirt_05_ctrl;                                // 0x0108(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bip001_Pelvis_ctrl;                                // 0x0120(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bip001_Spine_ctrl;                                 // 0x0138(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bip001_Head_ctrl_2;                                // 0x0150(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfRaceAvatarBodyModifyData) == 0x000008, "Wrong alignment on FTgfRaceAvatarBodyModifyData");
static_assert(sizeof(FTgfRaceAvatarBodyModifyData) == 0x000168, "Wrong size on FTgfRaceAvatarBodyModifyData");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bip001_ctrl) == 0x000000, "Member 'FTgfRaceAvatarBodyModifyData::Bip001_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bip001_L_Thigh_ctrl) == 0x000018, "Member 'FTgfRaceAvatarBodyModifyData::Bip001_L_Thigh_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bip001_L_Calf_ctrl) == 0x000030, "Member 'FTgfRaceAvatarBodyModifyData::Bip001_L_Calf_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bip001_R_Thigh_ctrl) == 0x000048, "Member 'FTgfRaceAvatarBodyModifyData::Bip001_R_Thigh_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bip001_R_Calf_ctrl) == 0x000060, "Member 'FTgfRaceAvatarBodyModifyData::Bip001_R_Calf_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bip001_Neck_ctrl) == 0x000078, "Member 'FTgfRaceAvatarBodyModifyData::Bip001_Neck_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bip001_Head_ctrl) == 0x000090, "Member 'FTgfRaceAvatarBodyModifyData::Bip001_Head_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bone_Skirt_01_ctrl) == 0x0000A8, "Member 'FTgfRaceAvatarBodyModifyData::Bone_Skirt_01_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bone_Skirt_02_ctrl) == 0x0000C0, "Member 'FTgfRaceAvatarBodyModifyData::Bone_Skirt_02_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bone_Skirt_03_ctrl) == 0x0000D8, "Member 'FTgfRaceAvatarBodyModifyData::Bone_Skirt_03_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bone_Skirt_04_ctrl) == 0x0000F0, "Member 'FTgfRaceAvatarBodyModifyData::Bone_Skirt_04_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bone_Skirt_05_ctrl) == 0x000108, "Member 'FTgfRaceAvatarBodyModifyData::Bone_Skirt_05_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bip001_Pelvis_ctrl) == 0x000120, "Member 'FTgfRaceAvatarBodyModifyData::Bip001_Pelvis_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bip001_Spine_ctrl) == 0x000138, "Member 'FTgfRaceAvatarBodyModifyData::Bip001_Spine_ctrl' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarBodyModifyData, Bip001_Head_ctrl_2) == 0x000150, "Member 'FTgfRaceAvatarBodyModifyData::Bip001_Head_ctrl_2' has a wrong offset!");

// ScriptStruct LyraGame.TgfRaceAvatarDataPair
// 0x0170 (0x0170 - 0x0000)
struct FTgfRaceAvatarDataPair final
{
public:
	ETgfActorRace                                 Race;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTgfRaceAvatarBodyModifyData           ModifyData;                                        // 0x0008(0x0168)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfRaceAvatarDataPair) == 0x000008, "Wrong alignment on FTgfRaceAvatarDataPair");
static_assert(sizeof(FTgfRaceAvatarDataPair) == 0x000170, "Wrong size on FTgfRaceAvatarDataPair");
static_assert(offsetof(FTgfRaceAvatarDataPair, Race) == 0x000000, "Member 'FTgfRaceAvatarDataPair::Race' has a wrong offset!");
static_assert(offsetof(FTgfRaceAvatarDataPair, ModifyData) == 0x000008, "Member 'FTgfRaceAvatarDataPair::ModifyData' has a wrong offset!");

// ScriptStruct LyraGame.UTgfCharacterBodyMaterialCache
// 0x0028 (0x0028 - 0x0000)
struct FUTgfCharacterBodyMaterialCache final
{
public:
	TArray<class UMaterialInterface*>             BodyMaterialCache;                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           MaterialSlotNames;                                 // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BodyOverlayMaterial;                               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUTgfCharacterBodyMaterialCache) == 0x000008, "Wrong alignment on FUTgfCharacterBodyMaterialCache");
static_assert(sizeof(FUTgfCharacterBodyMaterialCache) == 0x000028, "Wrong size on FUTgfCharacterBodyMaterialCache");
static_assert(offsetof(FUTgfCharacterBodyMaterialCache, BodyMaterialCache) == 0x000000, "Member 'FUTgfCharacterBodyMaterialCache::BodyMaterialCache' has a wrong offset!");
static_assert(offsetof(FUTgfCharacterBodyMaterialCache, MaterialSlotNames) == 0x000010, "Member 'FUTgfCharacterBodyMaterialCache::MaterialSlotNames' has a wrong offset!");
static_assert(offsetof(FUTgfCharacterBodyMaterialCache, BodyOverlayMaterial) == 0x000020, "Member 'FUTgfCharacterBodyMaterialCache::BodyOverlayMaterial' has a wrong offset!");

// ScriptStruct LyraGame.UTgfCharacterEquipmentMaterialCache
// 0x0018 (0x0018 - 0x0000)
struct FUTgfCharacterEquipmentMaterialCache final
{
public:
	TArray<class UMaterialInterface*>             EquipmentMaterialCache;                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     EquipmentOverlayMaterial;                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUTgfCharacterEquipmentMaterialCache) == 0x000008, "Wrong alignment on FUTgfCharacterEquipmentMaterialCache");
static_assert(sizeof(FUTgfCharacterEquipmentMaterialCache) == 0x000018, "Wrong size on FUTgfCharacterEquipmentMaterialCache");
static_assert(offsetof(FUTgfCharacterEquipmentMaterialCache, EquipmentMaterialCache) == 0x000000, "Member 'FUTgfCharacterEquipmentMaterialCache::EquipmentMaterialCache' has a wrong offset!");
static_assert(offsetof(FUTgfCharacterEquipmentMaterialCache, EquipmentOverlayMaterial) == 0x000010, "Member 'FUTgfCharacterEquipmentMaterialCache::EquipmentOverlayMaterial' has a wrong offset!");

// ScriptStruct LyraGame.TgfNotificationMessageSpawnActor
// 0x0020 (0x0020 - 0x0000)
struct FTgfNotificationMessageSpawnActor final
{
public:
	TSubclassOf<class AActor>                     Class;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfNotificationMessageSpawnActor) == 0x000008, "Wrong alignment on FTgfNotificationMessageSpawnActor");
static_assert(sizeof(FTgfNotificationMessageSpawnActor) == 0x000020, "Wrong size on FTgfNotificationMessageSpawnActor");
static_assert(offsetof(FTgfNotificationMessageSpawnActor, Class) == 0x000000, "Member 'FTgfNotificationMessageSpawnActor::Class' has a wrong offset!");
static_assert(offsetof(FTgfNotificationMessageSpawnActor, Position) == 0x000008, "Member 'FTgfNotificationMessageSpawnActor::Position' has a wrong offset!");

// ScriptStruct LyraGame.TgfNotificationMessageSpawnMonster
// 0x0028 (0x0028 - 0x0000)
struct FTgfNotificationMessageSpawnMonster final
{
public:
	TSubclassOf<class ALyraCharacter>             Class;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootIndex;                                         // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Dormant;                                           // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfNotificationMessageSpawnMonster) == 0x000008, "Wrong alignment on FTgfNotificationMessageSpawnMonster");
static_assert(sizeof(FTgfNotificationMessageSpawnMonster) == 0x000028, "Wrong size on FTgfNotificationMessageSpawnMonster");
static_assert(offsetof(FTgfNotificationMessageSpawnMonster, Class) == 0x000000, "Member 'FTgfNotificationMessageSpawnMonster::Class' has a wrong offset!");
static_assert(offsetof(FTgfNotificationMessageSpawnMonster, Position) == 0x000008, "Member 'FTgfNotificationMessageSpawnMonster::Position' has a wrong offset!");
static_assert(offsetof(FTgfNotificationMessageSpawnMonster, LootIndex) == 0x000020, "Member 'FTgfNotificationMessageSpawnMonster::LootIndex' has a wrong offset!");
static_assert(offsetof(FTgfNotificationMessageSpawnMonster, Dormant) == 0x000024, "Member 'FTgfNotificationMessageSpawnMonster::Dormant' has a wrong offset!");

// ScriptStruct LyraGame.MapHintEscapeData
// 0x0030 (0x0030 - 0x0000)
struct FMapHintEscapeData final
{
public:
	ETgfEscapeMapHintType                         EscapeHintType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReportLocation;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         ReportCharacter;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                HandleObject;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapHintEscapeData) == 0x000008, "Wrong alignment on FMapHintEscapeData");
static_assert(sizeof(FMapHintEscapeData) == 0x000030, "Wrong size on FMapHintEscapeData");
static_assert(offsetof(FMapHintEscapeData, EscapeHintType) == 0x000000, "Member 'FMapHintEscapeData::EscapeHintType' has a wrong offset!");
static_assert(offsetof(FMapHintEscapeData, ReportLocation) == 0x000008, "Member 'FMapHintEscapeData::ReportLocation' has a wrong offset!");
static_assert(offsetof(FMapHintEscapeData, ReportCharacter) == 0x000020, "Member 'FMapHintEscapeData::ReportCharacter' has a wrong offset!");
static_assert(offsetof(FMapHintEscapeData, HandleObject) == 0x000028, "Member 'FMapHintEscapeData::HandleObject' has a wrong offset!");

// ScriptStruct LyraGame.PlayerNameData
// 0x0030 (0x0030 - 0x0000)
struct FPlayerNameData final
{
public:
	int32                                         RoleTypeId;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorCareer                               EPlayerCareerType;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CreateIndex;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsForceHiddenPlayerName;                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayer;                                         // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerNameData) == 0x000008, "Wrong alignment on FPlayerNameData");
static_assert(sizeof(FPlayerNameData) == 0x000030, "Wrong size on FPlayerNameData");
static_assert(offsetof(FPlayerNameData, RoleTypeId) == 0x000000, "Member 'FPlayerNameData::RoleTypeId' has a wrong offset!");
static_assert(offsetof(FPlayerNameData, PlayerName) == 0x000008, "Member 'FPlayerNameData::PlayerName' has a wrong offset!");
static_assert(offsetof(FPlayerNameData, EPlayerCareerType) == 0x000018, "Member 'FPlayerNameData::EPlayerCareerType' has a wrong offset!");
static_assert(offsetof(FPlayerNameData, CreateIndex) == 0x000020, "Member 'FPlayerNameData::CreateIndex' has a wrong offset!");
static_assert(offsetof(FPlayerNameData, bIsForceHiddenPlayerName) == 0x000028, "Member 'FPlayerNameData::bIsForceHiddenPlayerName' has a wrong offset!");
static_assert(offsetof(FPlayerNameData, bIsPlayer) == 0x000029, "Member 'FPlayerNameData::bIsPlayer' has a wrong offset!");

// ScriptStruct LyraGame.TgfAnotherWeaponConfig
// 0x0018 (0x0018 - 0x0000)
struct FTgfAnotherWeaponConfig final
{
public:
	ETgfEquipSubType                              AnotherWeaponType;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETgfActorCareer>                       CareerRestricts;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfAnotherWeaponConfig) == 0x000008, "Wrong alignment on FTgfAnotherWeaponConfig");
static_assert(sizeof(FTgfAnotherWeaponConfig) == 0x000018, "Wrong size on FTgfAnotherWeaponConfig");
static_assert(offsetof(FTgfAnotherWeaponConfig, AnotherWeaponType) == 0x000000, "Member 'FTgfAnotherWeaponConfig::AnotherWeaponType' has a wrong offset!");
static_assert(offsetof(FTgfAnotherWeaponConfig, CareerRestricts) == 0x000008, "Member 'FTgfAnotherWeaponConfig::CareerRestricts' has a wrong offset!");

// ScriptStruct LyraGame.TgfWeaponConfig
// 0x0070 (0x0070 - 0x0000)
struct FTgfWeaponConfig final
{
public:
	ETgfEquipSubType                              WeaponType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponEquipType                           EquipType;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanEquipDouble;                                    // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETgfActorCareer>                       CareerRestricts;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTgfAnotherWeaponConfig>        AnotherWeapons;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      RequiredTag;                                       // 0x0028(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfWeaponConfig) == 0x000008, "Wrong alignment on FTgfWeaponConfig");
static_assert(sizeof(FTgfWeaponConfig) == 0x000070, "Wrong size on FTgfWeaponConfig");
static_assert(offsetof(FTgfWeaponConfig, WeaponType) == 0x000000, "Member 'FTgfWeaponConfig::WeaponType' has a wrong offset!");
static_assert(offsetof(FTgfWeaponConfig, EquipType) == 0x000001, "Member 'FTgfWeaponConfig::EquipType' has a wrong offset!");
static_assert(offsetof(FTgfWeaponConfig, CanEquipDouble) == 0x000002, "Member 'FTgfWeaponConfig::CanEquipDouble' has a wrong offset!");
static_assert(offsetof(FTgfWeaponConfig, CareerRestricts) == 0x000008, "Member 'FTgfWeaponConfig::CareerRestricts' has a wrong offset!");
static_assert(offsetof(FTgfWeaponConfig, AnotherWeapons) == 0x000018, "Member 'FTgfWeaponConfig::AnotherWeapons' has a wrong offset!");
static_assert(offsetof(FTgfWeaponConfig, RequiredTag) == 0x000028, "Member 'FTgfWeaponConfig::RequiredTag' has a wrong offset!");

// ScriptStruct LyraGame.TgfEquipmentConfig
// 0x0070 (0x0070 - 0x0000)
struct FTgfEquipmentConfig final
{
public:
	ETgfEquipSubType                              EquipType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETgfEquipSlot>                         AvailableEquipSlotLists;                           // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ETgfActorCareer>                       CareerRestricts;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      RequiredTag;                                       // 0x0028(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfEquipmentConfig) == 0x000008, "Wrong alignment on FTgfEquipmentConfig");
static_assert(sizeof(FTgfEquipmentConfig) == 0x000070, "Wrong size on FTgfEquipmentConfig");
static_assert(offsetof(FTgfEquipmentConfig, EquipType) == 0x000000, "Member 'FTgfEquipmentConfig::EquipType' has a wrong offset!");
static_assert(offsetof(FTgfEquipmentConfig, AvailableEquipSlotLists) == 0x000008, "Member 'FTgfEquipmentConfig::AvailableEquipSlotLists' has a wrong offset!");
static_assert(offsetof(FTgfEquipmentConfig, CareerRestricts) == 0x000018, "Member 'FTgfEquipmentConfig::CareerRestricts' has a wrong offset!");
static_assert(offsetof(FTgfEquipmentConfig, RequiredTag) == 0x000028, "Member 'FTgfEquipmentConfig::RequiredTag' has a wrong offset!");

// ScriptStruct LyraGame.TgfWeaponSlot
// 0x0018 (0x0018 - 0x0000)
struct FTgfWeaponSlot final
{
public:
	ETgfWeaponChangeSlot                          WeaponSlot;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponEquipType                           EquipType;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LeftHandIndex;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightHandIndex;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfWeaponAnimInstance*                 AnimInstance;                                      // 0x0010(0x0008)(ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfWeaponSlot) == 0x000008, "Wrong alignment on FTgfWeaponSlot");
static_assert(sizeof(FTgfWeaponSlot) == 0x000018, "Wrong size on FTgfWeaponSlot");
static_assert(offsetof(FTgfWeaponSlot, WeaponSlot) == 0x000000, "Member 'FTgfWeaponSlot::WeaponSlot' has a wrong offset!");
static_assert(offsetof(FTgfWeaponSlot, EquipType) == 0x000001, "Member 'FTgfWeaponSlot::EquipType' has a wrong offset!");
static_assert(offsetof(FTgfWeaponSlot, LeftHandIndex) == 0x000004, "Member 'FTgfWeaponSlot::LeftHandIndex' has a wrong offset!");
static_assert(offsetof(FTgfWeaponSlot, RightHandIndex) == 0x000008, "Member 'FTgfWeaponSlot::RightHandIndex' has a wrong offset!");
static_assert(offsetof(FTgfWeaponSlot, AnimInstance) == 0x000010, "Member 'FTgfWeaponSlot::AnimInstance' has a wrong offset!");

// ScriptStruct LyraGame.TgfWeaponSwitchMessage
// 0x0010 (0x0010 - 0x0000)
struct FTgfWeaponSwitchMessage final
{
public:
	class UActorComponent*                        EquipmentManager;                                  // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          WeaponSlot;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponEquipType                           EquipType;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfWeaponSwitchMessage) == 0x000008, "Wrong alignment on FTgfWeaponSwitchMessage");
static_assert(sizeof(FTgfWeaponSwitchMessage) == 0x000010, "Wrong size on FTgfWeaponSwitchMessage");
static_assert(offsetof(FTgfWeaponSwitchMessage, EquipmentManager) == 0x000000, "Member 'FTgfWeaponSwitchMessage::EquipmentManager' has a wrong offset!");
static_assert(offsetof(FTgfWeaponSwitchMessage, WeaponSlot) == 0x000008, "Member 'FTgfWeaponSwitchMessage::WeaponSlot' has a wrong offset!");
static_assert(offsetof(FTgfWeaponSwitchMessage, EquipType) == 0x000009, "Member 'FTgfWeaponSwitchMessage::EquipType' has a wrong offset!");

// ScriptStruct LyraGame.TgfFaceConfig
// 0x0068 (0x0068 - 0x0000)
struct FTgfFaceConfig final
{
public:
	TMap<ETgfCharaPart, class USkeletalMesh*>     MeshConfigs;                                       // 0x0000(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         FaceId;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstance*>              SkinMaterials;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfFaceConfig) == 0x000008, "Wrong alignment on FTgfFaceConfig");
static_assert(sizeof(FTgfFaceConfig) == 0x000068, "Wrong size on FTgfFaceConfig");
static_assert(offsetof(FTgfFaceConfig, MeshConfigs) == 0x000000, "Member 'FTgfFaceConfig::MeshConfigs' has a wrong offset!");
static_assert(offsetof(FTgfFaceConfig, FaceId) == 0x000050, "Member 'FTgfFaceConfig::FaceId' has a wrong offset!");
static_assert(offsetof(FTgfFaceConfig, SkinMaterials) == 0x000058, "Member 'FTgfFaceConfig::SkinMaterials' has a wrong offset!");

// ScriptStruct LyraGame.TgfSkinConfig
// 0x0018 (0x0018 - 0x0000)
struct FTgfSkinConfig final
{
public:
	int32                                         SkinId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstance*>              SkinMaterials;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfSkinConfig) == 0x000008, "Wrong alignment on FTgfSkinConfig");
static_assert(sizeof(FTgfSkinConfig) == 0x000018, "Wrong size on FTgfSkinConfig");
static_assert(offsetof(FTgfSkinConfig, SkinId) == 0x000000, "Member 'FTgfSkinConfig::SkinId' has a wrong offset!");
static_assert(offsetof(FTgfSkinConfig, SkinMaterials) == 0x000008, "Member 'FTgfSkinConfig::SkinMaterials' has a wrong offset!");

// ScriptStruct LyraGame.TGFFrameLimitHelper
// 0x0001 (0x0001 - 0x0000)
struct FTGFFrameLimitHelper final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFFrameLimitHelper) == 0x000001, "Wrong alignment on FTGFFrameLimitHelper");
static_assert(sizeof(FTGFFrameLimitHelper) == 0x000001, "Wrong size on FTGFFrameLimitHelper");

// ScriptStruct LyraGame.TgfSubLevelChargeConfig
// 0x0028 (0x0028 - 0x0000)
struct FTgfSubLevelChargeConfig final
{
public:
	int32                                         ChargeLevel;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            SubCost;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeTime;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SubLevelName;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfSubLevelChargeConfig) == 0x000008, "Wrong alignment on FTgfSubLevelChargeConfig");
static_assert(sizeof(FTgfSubLevelChargeConfig) == 0x000028, "Wrong size on FTgfSubLevelChargeConfig");
static_assert(offsetof(FTgfSubLevelChargeConfig, ChargeLevel) == 0x000000, "Member 'FTgfSubLevelChargeConfig::ChargeLevel' has a wrong offset!");
static_assert(offsetof(FTgfSubLevelChargeConfig, SubCost) == 0x000008, "Member 'FTgfSubLevelChargeConfig::SubCost' has a wrong offset!");
static_assert(offsetof(FTgfSubLevelChargeConfig, ChargeTime) == 0x000010, "Member 'FTgfSubLevelChargeConfig::ChargeTime' has a wrong offset!");
static_assert(offsetof(FTgfSubLevelChargeConfig, SubLevelName) == 0x000018, "Member 'FTgfSubLevelChargeConfig::SubLevelName' has a wrong offset!");

// ScriptStruct LyraGame.TgfCollectableActorInfo
// 0x0020 (0x0020 - 0x0000)
struct FTgfCollectableActorInfo final
{
public:
	class AActor*                                 CollectActor;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CollectPos;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfCollectableActorInfo) == 0x000008, "Wrong alignment on FTgfCollectableActorInfo");
static_assert(sizeof(FTgfCollectableActorInfo) == 0x000020, "Wrong size on FTgfCollectableActorInfo");
static_assert(offsetof(FTgfCollectableActorInfo, CollectActor) == 0x000000, "Member 'FTgfCollectableActorInfo::CollectActor' has a wrong offset!");
static_assert(offsetof(FTgfCollectableActorInfo, CollectPos) == 0x000008, "Member 'FTgfCollectableActorInfo::CollectPos' has a wrong offset!");

// ScriptStruct LyraGame.TgfAbilityPostActiveCD
// 0x0010 (0x0010 - 0x0000)
struct FTgfAbilityPostActiveCD final
{
public:
	TSubclassOf<class ULyraGameplayAbility>       Ability;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostActiveCD;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfAbilityPostActiveCD) == 0x000008, "Wrong alignment on FTgfAbilityPostActiveCD");
static_assert(sizeof(FTgfAbilityPostActiveCD) == 0x000010, "Wrong size on FTgfAbilityPostActiveCD");
static_assert(offsetof(FTgfAbilityPostActiveCD, Ability) == 0x000000, "Member 'FTgfAbilityPostActiveCD::Ability' has a wrong offset!");
static_assert(offsetof(FTgfAbilityPostActiveCD, PostActiveCD) == 0x000008, "Member 'FTgfAbilityPostActiveCD::PostActiveCD' has a wrong offset!");

// ScriptStruct LyraGame.AuraMessageVerb
// 0x0010 (0x0010 - 0x0000)
struct FAuraMessageVerb final
{
public:
	class ALyraCharacter*                         Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         Target;                                            // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuraMessageVerb) == 0x000008, "Wrong alignment on FAuraMessageVerb");
static_assert(sizeof(FAuraMessageVerb) == 0x000010, "Wrong size on FAuraMessageVerb");
static_assert(offsetof(FAuraMessageVerb, Instigator) == 0x000000, "Member 'FAuraMessageVerb::Instigator' has a wrong offset!");
static_assert(offsetof(FAuraMessageVerb, Target) == 0x000008, "Member 'FAuraMessageVerb::Target' has a wrong offset!");

// ScriptStruct LyraGame.TgfActiveGameplayAuraHandle
// 0x0004 (0x0004 - 0x0000)
struct FTgfActiveGameplayAuraHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTgfActiveGameplayAuraHandle) == 0x000004, "Wrong alignment on FTgfActiveGameplayAuraHandle");
static_assert(sizeof(FTgfActiveGameplayAuraHandle) == 0x000004, "Wrong size on FTgfActiveGameplayAuraHandle");
static_assert(offsetof(FTgfActiveGameplayAuraHandle, Handle) == 0x000000, "Member 'FTgfActiveGameplayAuraHandle::Handle' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayAuraSpec
// 0x0010 (0x0010 - 0x0000)
struct FTgfGameplayAuraSpec final
{
public:
	struct FTgfActiveGameplayAuraHandle           Handle;                                            // 0x0000(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfGameplayAura*                       Aura;                                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfGameplayAuraSpec) == 0x000008, "Wrong alignment on FTgfGameplayAuraSpec");
static_assert(sizeof(FTgfGameplayAuraSpec) == 0x000010, "Wrong size on FTgfGameplayAuraSpec");
static_assert(offsetof(FTgfGameplayAuraSpec, Handle) == 0x000000, "Member 'FTgfGameplayAuraSpec::Handle' has a wrong offset!");
static_assert(offsetof(FTgfGameplayAuraSpec, Aura) == 0x000008, "Member 'FTgfGameplayAuraSpec::Aura' has a wrong offset!");

// ScriptStruct LyraGame.ActorCareerRacePair
// 0x0002 (0x0002 - 0x0000)
struct FActorCareerRacePair final
{
public:
	ETgfActorCareer                               Career;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 Race;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorCareerRacePair) == 0x000001, "Wrong alignment on FActorCareerRacePair");
static_assert(sizeof(FActorCareerRacePair) == 0x000002, "Wrong size on FActorCareerRacePair");
static_assert(offsetof(FActorCareerRacePair, Career) == 0x000000, "Member 'FActorCareerRacePair::Career' has a wrong offset!");
static_assert(offsetof(FActorCareerRacePair, Race) == 0x000001, "Member 'FActorCareerRacePair::Race' has a wrong offset!");

// ScriptStruct LyraGame.SkillWidgetMessage
// 0x0018 (0x0018 - 0x0000)
struct FSkillWidgetMessage final
{
public:
	EWidgetDirection                              WidgetDirection;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfSkillWidgetBase*                    SkillWidgetObj;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorCareer                               ActorCareer;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillWidgetMessage) == 0x000008, "Wrong alignment on FSkillWidgetMessage");
static_assert(sizeof(FSkillWidgetMessage) == 0x000018, "Wrong size on FSkillWidgetMessage");
static_assert(offsetof(FSkillWidgetMessage, WidgetDirection) == 0x000000, "Member 'FSkillWidgetMessage::WidgetDirection' has a wrong offset!");
static_assert(offsetof(FSkillWidgetMessage, SkillWidgetObj) == 0x000008, "Member 'FSkillWidgetMessage::SkillWidgetObj' has a wrong offset!");
static_assert(offsetof(FSkillWidgetMessage, ActorCareer) == 0x000010, "Member 'FSkillWidgetMessage::ActorCareer' has a wrong offset!");

// ScriptStruct LyraGame.DashBoardConstructMessage
// 0x0010 (0x0010 - 0x0000)
struct FDashBoardConstructMessage final
{
public:
	class FString                                 DashBoardConstructMsg;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDashBoardConstructMessage) == 0x000008, "Wrong alignment on FDashBoardConstructMessage");
static_assert(sizeof(FDashBoardConstructMessage) == 0x000010, "Wrong size on FDashBoardConstructMessage");
static_assert(offsetof(FDashBoardConstructMessage, DashBoardConstructMsg) == 0x000000, "Member 'FDashBoardConstructMessage::DashBoardConstructMsg' has a wrong offset!");

// ScriptStruct LyraGame.DashBoardChargeSkillMessage
// 0x0020 (0x0020 - 0x0000)
struct FDashBoardChargeSkillMessage final
{
public:
	class FString                                 SkillName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeMaxTime;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeCurrentTime;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseHoldChargeMethod;                               // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDashBoardChargeSkillMessage) == 0x000008, "Wrong alignment on FDashBoardChargeSkillMessage");
static_assert(sizeof(FDashBoardChargeSkillMessage) == 0x000020, "Wrong size on FDashBoardChargeSkillMessage");
static_assert(offsetof(FDashBoardChargeSkillMessage, SkillName) == 0x000000, "Member 'FDashBoardChargeSkillMessage::SkillName' has a wrong offset!");
static_assert(offsetof(FDashBoardChargeSkillMessage, ChargeMaxTime) == 0x000010, "Member 'FDashBoardChargeSkillMessage::ChargeMaxTime' has a wrong offset!");
static_assert(offsetof(FDashBoardChargeSkillMessage, ChargeCurrentTime) == 0x000014, "Member 'FDashBoardChargeSkillMessage::ChargeCurrentTime' has a wrong offset!");
static_assert(offsetof(FDashBoardChargeSkillMessage, UseHoldChargeMethod) == 0x000018, "Member 'FDashBoardChargeSkillMessage::UseHoldChargeMethod' has a wrong offset!");

// ScriptStruct LyraGame.DashBoardShowTextMessage
// 0x0018 (0x0018 - 0x0000)
struct FDashBoardShowTextMessage final
{
public:
	class FString                                 Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowText;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHoldChargeMethod;                              // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDashBoardShowTextMessage) == 0x000008, "Wrong alignment on FDashBoardShowTextMessage");
static_assert(sizeof(FDashBoardShowTextMessage) == 0x000018, "Wrong size on FDashBoardShowTextMessage");
static_assert(offsetof(FDashBoardShowTextMessage, Content) == 0x000000, "Member 'FDashBoardShowTextMessage::Content' has a wrong offset!");
static_assert(offsetof(FDashBoardShowTextMessage, bShowText) == 0x000010, "Member 'FDashBoardShowTextMessage::bShowText' has a wrong offset!");
static_assert(offsetof(FDashBoardShowTextMessage, bUseHoldChargeMethod) == 0x000011, "Member 'FDashBoardShowTextMessage::bUseHoldChargeMethod' has a wrong offset!");

// ScriptStruct LyraGame.HudBooleanMessage
// 0x0001 (0x0001 - 0x0000)
struct FHudBooleanMessage final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHudBooleanMessage) == 0x000001, "Wrong alignment on FHudBooleanMessage");
static_assert(sizeof(FHudBooleanMessage) == 0x000001, "Wrong size on FHudBooleanMessage");
static_assert(offsetof(FHudBooleanMessage, bValue) == 0x000000, "Member 'FHudBooleanMessage::bValue' has a wrong offset!");

// ScriptStruct LyraGame.HudStringMessage
// 0x0010 (0x0010 - 0x0000)
struct FHudStringMessage final
{
public:
	class FString                                 StringValue;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHudStringMessage) == 0x000008, "Wrong alignment on FHudStringMessage");
static_assert(sizeof(FHudStringMessage) == 0x000010, "Wrong size on FHudStringMessage");
static_assert(offsetof(FHudStringMessage, StringValue) == 0x000000, "Member 'FHudStringMessage::StringValue' has a wrong offset!");

// ScriptStruct LyraGame.KeyBindingChangeMessage
// 0x0018 (0x0018 - 0x0000)
struct FKeyBindingChangeMessage final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyBindingChangeMessage) == 0x000008, "Wrong alignment on FKeyBindingChangeMessage");
static_assert(sizeof(FKeyBindingChangeMessage) == 0x000018, "Wrong size on FKeyBindingChangeMessage");
static_assert(offsetof(FKeyBindingChangeMessage, Key) == 0x000000, "Member 'FKeyBindingChangeMessage::Key' has a wrong offset!");

// ScriptStruct LyraGame.HurtNotifyMessage
// 0x0020 (0x0020 - 0x0000)
struct FHurtNotifyMessage final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Num;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHurtNotifyType                               HurtNotifyType;                                    // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCrit;                                           // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHurtNotifyAnimType                           AnimType;                                          // 0x001E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHurtNotifyMessage) == 0x000008, "Wrong alignment on FHurtNotifyMessage");
static_assert(sizeof(FHurtNotifyMessage) == 0x000020, "Wrong size on FHurtNotifyMessage");
static_assert(offsetof(FHurtNotifyMessage, Location) == 0x000000, "Member 'FHurtNotifyMessage::Location' has a wrong offset!");
static_assert(offsetof(FHurtNotifyMessage, Num) == 0x000018, "Member 'FHurtNotifyMessage::Num' has a wrong offset!");
static_assert(offsetof(FHurtNotifyMessage, HurtNotifyType) == 0x00001C, "Member 'FHurtNotifyMessage::HurtNotifyType' has a wrong offset!");
static_assert(offsetof(FHurtNotifyMessage, bIsCrit) == 0x00001D, "Member 'FHurtNotifyMessage::bIsCrit' has a wrong offset!");
static_assert(offsetof(FHurtNotifyMessage, AnimType) == 0x00001E, "Member 'FHurtNotifyMessage::AnimType' has a wrong offset!");

// ScriptStruct LyraGame.HitDirectionMessage
// 0x0020 (0x0020 - 0x0000)
struct FHitDirectionMessage final
{
public:
	struct FGameplayTag                           Verb;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGuarded;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageInstigator;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageTarget;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitDirectionMessage) == 0x000008, "Wrong alignment on FHitDirectionMessage");
static_assert(sizeof(FHitDirectionMessage) == 0x000020, "Wrong size on FHitDirectionMessage");
static_assert(offsetof(FHitDirectionMessage, Verb) == 0x000000, "Member 'FHitDirectionMessage::Verb' has a wrong offset!");
static_assert(offsetof(FHitDirectionMessage, Direction) == 0x000008, "Member 'FHitDirectionMessage::Direction' has a wrong offset!");
static_assert(offsetof(FHitDirectionMessage, bIsGuarded) == 0x00000C, "Member 'FHitDirectionMessage::bIsGuarded' has a wrong offset!");
static_assert(offsetof(FHitDirectionMessage, DamageInstigator) == 0x000010, "Member 'FHitDirectionMessage::DamageInstigator' has a wrong offset!");
static_assert(offsetof(FHitDirectionMessage, DamageTarget) == 0x000018, "Member 'FHitDirectionMessage::DamageTarget' has a wrong offset!");

// ScriptStruct LyraGame.LocalBuffIconMessage
// 0x0020 (0x0020 - 0x0000)
struct FLocalBuffIconMessage final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BuffIcon;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCnt;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELocalBuffState                               BuffState;                                         // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocalBuffIconMessage) == 0x000008, "Wrong alignment on FLocalBuffIconMessage");
static_assert(sizeof(FLocalBuffIconMessage) == 0x000020, "Wrong size on FLocalBuffIconMessage");
static_assert(offsetof(FLocalBuffIconMessage, Source) == 0x000000, "Member 'FLocalBuffIconMessage::Source' has a wrong offset!");
static_assert(offsetof(FLocalBuffIconMessage, BuffIcon) == 0x000008, "Member 'FLocalBuffIconMessage::BuffIcon' has a wrong offset!");
static_assert(offsetof(FLocalBuffIconMessage, TotalTime) == 0x000010, "Member 'FLocalBuffIconMessage::TotalTime' has a wrong offset!");
static_assert(offsetof(FLocalBuffIconMessage, RemainTime) == 0x000014, "Member 'FLocalBuffIconMessage::RemainTime' has a wrong offset!");
static_assert(offsetof(FLocalBuffIconMessage, StackCnt) == 0x000018, "Member 'FLocalBuffIconMessage::StackCnt' has a wrong offset!");
static_assert(offsetof(FLocalBuffIconMessage, BuffState) == 0x00001C, "Member 'FLocalBuffIconMessage::BuffState' has a wrong offset!");

// ScriptStruct LyraGame.HudTimeMessage
// 0x0018 (0x0018 - 0x0000)
struct FHudTimeMessage final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurTime;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHudTimeMessage) == 0x000008, "Wrong alignment on FHudTimeMessage");
static_assert(sizeof(FHudTimeMessage) == 0x000018, "Wrong size on FHudTimeMessage");
static_assert(offsetof(FHudTimeMessage, Source) == 0x000000, "Member 'FHudTimeMessage::Source' has a wrong offset!");
static_assert(offsetof(FHudTimeMessage, CurTime) == 0x000008, "Member 'FHudTimeMessage::CurTime' has a wrong offset!");
static_assert(offsetof(FHudTimeMessage, TotalTime) == 0x00000C, "Member 'FHudTimeMessage::TotalTime' has a wrong offset!");
static_assert(offsetof(FHudTimeMessage, RemainTime) == 0x000010, "Member 'FHudTimeMessage::RemainTime' has a wrong offset!");

// ScriptStruct LyraGame.HudIntMessage
// 0x0010 (0x0010 - 0x0000)
struct FHudIntMessage final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHudIntMessage) == 0x000008, "Wrong alignment on FHudIntMessage");
static_assert(sizeof(FHudIntMessage) == 0x000010, "Wrong size on FHudIntMessage");
static_assert(offsetof(FHudIntMessage, Source) == 0x000000, "Member 'FHudIntMessage::Source' has a wrong offset!");
static_assert(offsetof(FHudIntMessage, Num) == 0x000008, "Member 'FHudIntMessage::Num' has a wrong offset!");

// ScriptStruct LyraGame.TgfGearsetLevelAbilityItem
// 0x0018 (0x0018 - 0x0000)
struct FTgfGearsetLevelAbilityItem final
{
public:
	int32                                         GearsetLevel;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULyraAbilitySet*>                AbilitySetsToGrant;                                // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfGearsetLevelAbilityItem) == 0x000008, "Wrong alignment on FTgfGearsetLevelAbilityItem");
static_assert(sizeof(FTgfGearsetLevelAbilityItem) == 0x000018, "Wrong size on FTgfGearsetLevelAbilityItem");
static_assert(offsetof(FTgfGearsetLevelAbilityItem, GearsetLevel) == 0x000000, "Member 'FTgfGearsetLevelAbilityItem::GearsetLevel' has a wrong offset!");
static_assert(offsetof(FTgfGearsetLevelAbilityItem, AbilitySetsToGrant) == 0x000008, "Member 'FTgfGearsetLevelAbilityItem::AbilitySetsToGrant' has a wrong offset!");

// ScriptStruct LyraGame.TgfPresetAppearanceTemplate
// 0x0070 (0x0070 - 0x0000)
struct FTgfPresetAppearanceTemplate final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             AppearanceTexture;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECreateRoleChooseSubType, int32>         MapAppearaneOptionalData;                          // 0x0020(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfPresetAppearanceTemplate) == 0x000008, "Wrong alignment on FTgfPresetAppearanceTemplate");
static_assert(sizeof(FTgfPresetAppearanceTemplate) == 0x000070, "Wrong size on FTgfPresetAppearanceTemplate");
static_assert(offsetof(FTgfPresetAppearanceTemplate, ID) == 0x000000, "Member 'FTgfPresetAppearanceTemplate::ID' has a wrong offset!");
static_assert(offsetof(FTgfPresetAppearanceTemplate, AppearanceTexture) == 0x000008, "Member 'FTgfPresetAppearanceTemplate::AppearanceTexture' has a wrong offset!");
static_assert(offsetof(FTgfPresetAppearanceTemplate, Description) == 0x000010, "Member 'FTgfPresetAppearanceTemplate::Description' has a wrong offset!");
static_assert(offsetof(FTgfPresetAppearanceTemplate, MapAppearaneOptionalData) == 0x000020, "Member 'FTgfPresetAppearanceTemplate::MapAppearaneOptionalData' has a wrong offset!");

// ScriptStruct LyraGame.TgfMeshConfig
// 0x0018 (0x0018 - 0x0000)
struct FTgfMeshConfig final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Thumbnail;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfMeshConfig) == 0x000008, "Wrong alignment on FTgfMeshConfig");
static_assert(sizeof(FTgfMeshConfig) == 0x000018, "Wrong size on FTgfMeshConfig");
static_assert(offsetof(FTgfMeshConfig, ID) == 0x000000, "Member 'FTgfMeshConfig::ID' has a wrong offset!");
static_assert(offsetof(FTgfMeshConfig, Mesh) == 0x000008, "Member 'FTgfMeshConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FTgfMeshConfig, Thumbnail) == 0x000010, "Member 'FTgfMeshConfig::Thumbnail' has a wrong offset!");

// ScriptStruct LyraGame.TgfConfigParam
// 0x0050 (0x0050 - 0x0000)
struct FTgfConfigParam final
{
public:
	class FName                                   HairColorParam;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeardColorParam;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyeColorParam;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TatooColorParam;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkinColorParam;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MakeupColorParam;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScarTextureParam;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScarNormalMapTextureParam;                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MakeUpTextureParam;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TatooTextureParam;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfConfigParam) == 0x000004, "Wrong alignment on FTgfConfigParam");
static_assert(sizeof(FTgfConfigParam) == 0x000050, "Wrong size on FTgfConfigParam");
static_assert(offsetof(FTgfConfigParam, HairColorParam) == 0x000000, "Member 'FTgfConfigParam::HairColorParam' has a wrong offset!");
static_assert(offsetof(FTgfConfigParam, BeardColorParam) == 0x000008, "Member 'FTgfConfigParam::BeardColorParam' has a wrong offset!");
static_assert(offsetof(FTgfConfigParam, EyeColorParam) == 0x000010, "Member 'FTgfConfigParam::EyeColorParam' has a wrong offset!");
static_assert(offsetof(FTgfConfigParam, TatooColorParam) == 0x000018, "Member 'FTgfConfigParam::TatooColorParam' has a wrong offset!");
static_assert(offsetof(FTgfConfigParam, SkinColorParam) == 0x000020, "Member 'FTgfConfigParam::SkinColorParam' has a wrong offset!");
static_assert(offsetof(FTgfConfigParam, MakeupColorParam) == 0x000028, "Member 'FTgfConfigParam::MakeupColorParam' has a wrong offset!");
static_assert(offsetof(FTgfConfigParam, ScarTextureParam) == 0x000030, "Member 'FTgfConfigParam::ScarTextureParam' has a wrong offset!");
static_assert(offsetof(FTgfConfigParam, ScarNormalMapTextureParam) == 0x000038, "Member 'FTgfConfigParam::ScarNormalMapTextureParam' has a wrong offset!");
static_assert(offsetof(FTgfConfigParam, MakeUpTextureParam) == 0x000040, "Member 'FTgfConfigParam::MakeUpTextureParam' has a wrong offset!");
static_assert(offsetof(FTgfConfigParam, TatooTextureParam) == 0x000048, "Member 'FTgfConfigParam::TatooTextureParam' has a wrong offset!");

// ScriptStruct LyraGame.TgfConfigParamConfig
// 0x0060 (0x0060 - 0x0000)
struct FTgfConfigParamConfig final
{
public:
	TArray<int32>                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTgfConfigParam                        Data;                                              // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfConfigParamConfig) == 0x000008, "Wrong alignment on FTgfConfigParamConfig");
static_assert(sizeof(FTgfConfigParamConfig) == 0x000060, "Wrong size on FTgfConfigParamConfig");
static_assert(offsetof(FTgfConfigParamConfig, ID) == 0x000000, "Member 'FTgfConfigParamConfig::ID' has a wrong offset!");
static_assert(offsetof(FTgfConfigParamConfig, Data) == 0x000010, "Member 'FTgfConfigParamConfig::Data' has a wrong offset!");

// ScriptStruct LyraGame.TgfColorConfig
// 0x0020 (0x0020 - 0x0000)
struct FTgfColorConfig final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HSVColor;                                          // 0x0004(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Thumbnail;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfColorConfig) == 0x000008, "Wrong alignment on FTgfColorConfig");
static_assert(sizeof(FTgfColorConfig) == 0x000020, "Wrong size on FTgfColorConfig");
static_assert(offsetof(FTgfColorConfig, ID) == 0x000000, "Member 'FTgfColorConfig::ID' has a wrong offset!");
static_assert(offsetof(FTgfColorConfig, HSVColor) == 0x000004, "Member 'FTgfColorConfig::HSVColor' has a wrong offset!");
static_assert(offsetof(FTgfColorConfig, Thumbnail) == 0x000018, "Member 'FTgfColorConfig::Thumbnail' has a wrong offset!");

// ScriptStruct LyraGame.TgfTextureConfig
// 0x0018 (0x0018 - 0x0000)
struct FTgfTextureConfig final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Thumbnail;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfTextureConfig) == 0x000008, "Wrong alignment on FTgfTextureConfig");
static_assert(sizeof(FTgfTextureConfig) == 0x000018, "Wrong size on FTgfTextureConfig");
static_assert(offsetof(FTgfTextureConfig, ID) == 0x000000, "Member 'FTgfTextureConfig::ID' has a wrong offset!");
static_assert(offsetof(FTgfTextureConfig, Texture) == 0x000008, "Member 'FTgfTextureConfig::Texture' has a wrong offset!");
static_assert(offsetof(FTgfTextureConfig, Thumbnail) == 0x000010, "Member 'FTgfTextureConfig::Thumbnail' has a wrong offset!");

// ScriptStruct LyraGame.TgfMaterialConfig
// 0x0020 (0x0020 - 0x0000)
struct FTgfMaterialConfig final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstance*>              Material;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UTexture2D*                             Thumbnail;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfMaterialConfig) == 0x000008, "Wrong alignment on FTgfMaterialConfig");
static_assert(sizeof(FTgfMaterialConfig) == 0x000020, "Wrong size on FTgfMaterialConfig");
static_assert(offsetof(FTgfMaterialConfig, ID) == 0x000000, "Member 'FTgfMaterialConfig::ID' has a wrong offset!");
static_assert(offsetof(FTgfMaterialConfig, Material) == 0x000008, "Member 'FTgfMaterialConfig::Material' has a wrong offset!");
static_assert(offsetof(FTgfMaterialConfig, Thumbnail) == 0x000018, "Member 'FTgfMaterialConfig::Thumbnail' has a wrong offset!");

// ScriptStruct LyraGame.TgfGenderConfig
// 0x0010 (0x0010 - 0x0000)
struct FTgfGenderConfig final
{
public:
	class UTexture2D*                             BaseTexture;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SelectTexture;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfGenderConfig) == 0x000008, "Wrong alignment on FTgfGenderConfig");
static_assert(sizeof(FTgfGenderConfig) == 0x000010, "Wrong size on FTgfGenderConfig");
static_assert(offsetof(FTgfGenderConfig, BaseTexture) == 0x000000, "Member 'FTgfGenderConfig::BaseTexture' has a wrong offset!");
static_assert(offsetof(FTgfGenderConfig, SelectTexture) == 0x000008, "Member 'FTgfGenderConfig::SelectTexture' has a wrong offset!");

// ScriptStruct LyraGame.TgfHeadResData
// 0x0100 (0x0100 - 0x0000)
struct alignas(0x08) FTgfHeadResData final
{
public:
	uint8                                         Pad_0[0x100];                                      // 0x0000(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfHeadResData) == 0x000008, "Wrong alignment on FTgfHeadResData");
static_assert(sizeof(FTgfHeadResData) == 0x000100, "Wrong size on FTgfHeadResData");

// ScriptStruct LyraGame.TgfHeadResConfig
// 0x0030 (0x0030 - 0x0000)
struct FTgfHeadResConfig final
{
public:
	int32                                         FaceId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HairId;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeardId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HairMId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinMId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeardMId;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TatooId;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TatooMId;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EyeMId;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScarId;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeupId;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeupMId;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfHeadResConfig) == 0x000004, "Wrong alignment on FTgfHeadResConfig");
static_assert(sizeof(FTgfHeadResConfig) == 0x000030, "Wrong size on FTgfHeadResConfig");
static_assert(offsetof(FTgfHeadResConfig, FaceId) == 0x000000, "Member 'FTgfHeadResConfig::FaceId' has a wrong offset!");
static_assert(offsetof(FTgfHeadResConfig, HairId) == 0x000004, "Member 'FTgfHeadResConfig::HairId' has a wrong offset!");
static_assert(offsetof(FTgfHeadResConfig, BeardId) == 0x000008, "Member 'FTgfHeadResConfig::BeardId' has a wrong offset!");
static_assert(offsetof(FTgfHeadResConfig, HairMId) == 0x00000C, "Member 'FTgfHeadResConfig::HairMId' has a wrong offset!");
static_assert(offsetof(FTgfHeadResConfig, SkinMId) == 0x000010, "Member 'FTgfHeadResConfig::SkinMId' has a wrong offset!");
static_assert(offsetof(FTgfHeadResConfig, BeardMId) == 0x000014, "Member 'FTgfHeadResConfig::BeardMId' has a wrong offset!");
static_assert(offsetof(FTgfHeadResConfig, TatooId) == 0x000018, "Member 'FTgfHeadResConfig::TatooId' has a wrong offset!");
static_assert(offsetof(FTgfHeadResConfig, TatooMId) == 0x00001C, "Member 'FTgfHeadResConfig::TatooMId' has a wrong offset!");
static_assert(offsetof(FTgfHeadResConfig, EyeMId) == 0x000020, "Member 'FTgfHeadResConfig::EyeMId' has a wrong offset!");
static_assert(offsetof(FTgfHeadResConfig, ScarId) == 0x000024, "Member 'FTgfHeadResConfig::ScarId' has a wrong offset!");
static_assert(offsetof(FTgfHeadResConfig, MakeupId) == 0x000028, "Member 'FTgfHeadResConfig::MakeupId' has a wrong offset!");
static_assert(offsetof(FTgfHeadResConfig, MakeupMId) == 0x00002C, "Member 'FTgfHeadResConfig::MakeupMId' has a wrong offset!");

// ScriptStruct LyraGame.TgfAvatarBuildConfig
// 0x0068 (0x0068 - 0x0000)
struct FTgfAvatarBuildConfig final
{
public:
	struct FTgfHeadResConfig                      CosmeticData;                                      // 0x0000(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ETgfActorGender                               Gender;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 Race;                                              // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Equipments;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Weapons;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Skins;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfAvatarBuildConfig) == 0x000008, "Wrong alignment on FTgfAvatarBuildConfig");
static_assert(sizeof(FTgfAvatarBuildConfig) == 0x000068, "Wrong size on FTgfAvatarBuildConfig");
static_assert(offsetof(FTgfAvatarBuildConfig, CosmeticData) == 0x000000, "Member 'FTgfAvatarBuildConfig::CosmeticData' has a wrong offset!");
static_assert(offsetof(FTgfAvatarBuildConfig, Gender) == 0x000030, "Member 'FTgfAvatarBuildConfig::Gender' has a wrong offset!");
static_assert(offsetof(FTgfAvatarBuildConfig, Race) == 0x000031, "Member 'FTgfAvatarBuildConfig::Race' has a wrong offset!");
static_assert(offsetof(FTgfAvatarBuildConfig, Equipments) == 0x000038, "Member 'FTgfAvatarBuildConfig::Equipments' has a wrong offset!");
static_assert(offsetof(FTgfAvatarBuildConfig, Weapons) == 0x000048, "Member 'FTgfAvatarBuildConfig::Weapons' has a wrong offset!");
static_assert(offsetof(FTgfAvatarBuildConfig, Skins) == 0x000058, "Member 'FTgfAvatarBuildConfig::Skins' has a wrong offset!");

// ScriptStruct LyraGame.TgfInventoryPackageSingleItem
// 0x0008 (0x0008 - 0x0000)
struct FTgfInventoryPackageSingleItem final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfInventoryPackageSingleItem) == 0x000004, "Wrong alignment on FTgfInventoryPackageSingleItem");
static_assert(sizeof(FTgfInventoryPackageSingleItem) == 0x000008, "Wrong size on FTgfInventoryPackageSingleItem");
static_assert(offsetof(FTgfInventoryPackageSingleItem, ItemId) == 0x000000, "Member 'FTgfInventoryPackageSingleItem::ItemId' has a wrong offset!");
static_assert(offsetof(FTgfInventoryPackageSingleItem, Count) == 0x000004, "Member 'FTgfInventoryPackageSingleItem::Count' has a wrong offset!");

// ScriptStruct LyraGame.TgfInventoryPackageItem
// 0x0018 (0x0018 - 0x0000)
struct FTgfInventoryPackageItem final
{
public:
	int32                                         PackageId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTgfInventoryPackageSingleItem> PackageItem;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfInventoryPackageItem) == 0x000008, "Wrong alignment on FTgfInventoryPackageItem");
static_assert(sizeof(FTgfInventoryPackageItem) == 0x000018, "Wrong size on FTgfInventoryPackageItem");
static_assert(offsetof(FTgfInventoryPackageItem, PackageId) == 0x000000, "Member 'FTgfInventoryPackageItem::PackageId' has a wrong offset!");
static_assert(offsetof(FTgfInventoryPackageItem, PackageItem) == 0x000008, "Member 'FTgfInventoryPackageItem::PackageItem' has a wrong offset!");

// ScriptStruct LyraGame.TgfInventoryRequirementQuery
// 0x0020 (0x0020 - 0x0000)
struct FTgfInventoryRequirementQuery final
{
public:
	ETgfInventoryRequirementQueryResult           Result;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSubType                              EquipSubType;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETgfActorCareer>                       RequiredCareer;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RequiredLevel;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfInventoryRequirementQuery) == 0x000008, "Wrong alignment on FTgfInventoryRequirementQuery");
static_assert(sizeof(FTgfInventoryRequirementQuery) == 0x000020, "Wrong size on FTgfInventoryRequirementQuery");
static_assert(offsetof(FTgfInventoryRequirementQuery, Result) == 0x000000, "Member 'FTgfInventoryRequirementQuery::Result' has a wrong offset!");
static_assert(offsetof(FTgfInventoryRequirementQuery, EquipSubType) == 0x000001, "Member 'FTgfInventoryRequirementQuery::EquipSubType' has a wrong offset!");
static_assert(offsetof(FTgfInventoryRequirementQuery, RequiredCareer) == 0x000008, "Member 'FTgfInventoryRequirementQuery::RequiredCareer' has a wrong offset!");
static_assert(offsetof(FTgfInventoryRequirementQuery, RequiredLevel) == 0x000018, "Member 'FTgfInventoryRequirementQuery::RequiredLevel' has a wrong offset!");

// ScriptStruct LyraGame.TgfInventoryLockedItem
// 0x0018 (0x0018 - 0x0000)
struct FTgfInventoryLockedItem final
{
public:
	struct FIntPoint                              Position;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Size;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfInventoryLockedItem) == 0x000008, "Wrong alignment on FTgfInventoryLockedItem");
static_assert(sizeof(FTgfInventoryLockedItem) == 0x000018, "Wrong size on FTgfInventoryLockedItem");
static_assert(offsetof(FTgfInventoryLockedItem, Position) == 0x000000, "Member 'FTgfInventoryLockedItem::Position' has a wrong offset!");
static_assert(offsetof(FTgfInventoryLockedItem, Size) == 0x000008, "Member 'FTgfInventoryLockedItem::Size' has a wrong offset!");
static_assert(offsetof(FTgfInventoryLockedItem, Item) == 0x000010, "Member 'FTgfInventoryLockedItem::Item' has a wrong offset!");

// ScriptStruct LyraGame.TgfPlayerIDKey
// 0x0010 (0x0010 - 0x0000)
struct FTgfPlayerIDKey final
{
public:
	int64                                         UserId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ZoneId;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfPlayerIDKey) == 0x000008, "Wrong alignment on FTgfPlayerIDKey");
static_assert(sizeof(FTgfPlayerIDKey) == 0x000010, "Wrong size on FTgfPlayerIDKey");
static_assert(offsetof(FTgfPlayerIDKey, UserId) == 0x000000, "Member 'FTgfPlayerIDKey::UserId' has a wrong offset!");
static_assert(offsetof(FTgfPlayerIDKey, ZoneId) == 0x000008, "Member 'FTgfPlayerIDKey::ZoneId' has a wrong offset!");

// ScriptStruct LyraGame.SkinDataItem
// 0x0008 (0x0008 - 0x0000)
struct FSkinDataItem final
{
public:
	ETgfSkinSlot                                  SkinType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfSkinCategory                              SkinCategory;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkinId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkinDataItem) == 0x000004, "Wrong alignment on FSkinDataItem");
static_assert(sizeof(FSkinDataItem) == 0x000008, "Wrong size on FSkinDataItem");
static_assert(offsetof(FSkinDataItem, SkinType) == 0x000000, "Member 'FSkinDataItem::SkinType' has a wrong offset!");
static_assert(offsetof(FSkinDataItem, SkinCategory) == 0x000001, "Member 'FSkinDataItem::SkinCategory' has a wrong offset!");
static_assert(offsetof(FSkinDataItem, SkinId) == 0x000004, "Member 'FSkinDataItem::SkinId' has a wrong offset!");

// ScriptStruct LyraGame.SkinDataPack
// 0x0018 (0x0018 - 0x0000)
struct FSkinDataPack final
{
public:
	TArray<struct FSkinDataItem>                  ArrayData;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          DataPushed;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkinDataPack) == 0x000008, "Wrong alignment on FSkinDataPack");
static_assert(sizeof(FSkinDataPack) == 0x000018, "Wrong size on FSkinDataPack");
static_assert(offsetof(FSkinDataPack, ArrayData) == 0x000000, "Member 'FSkinDataPack::ArrayData' has a wrong offset!");
static_assert(offsetof(FSkinDataPack, DataPushed) == 0x000010, "Member 'FSkinDataPack::DataPushed' has a wrong offset!");

// ScriptStruct LyraGame.TGFItemPosition
// 0x0018 (0x0018 - 0x0000)
struct FTGFItemPosition final
{
public:
	EnItemStorageType                             Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Guid;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTGFItemPosition) == 0x000008, "Wrong alignment on FTGFItemPosition");
static_assert(sizeof(FTGFItemPosition) == 0x000018, "Wrong size on FTGFItemPosition");
static_assert(offsetof(FTGFItemPosition, Type) == 0x000000, "Member 'FTGFItemPosition::Type' has a wrong offset!");
static_assert(offsetof(FTGFItemPosition, Guid) == 0x000008, "Member 'FTGFItemPosition::Guid' has a wrong offset!");
static_assert(offsetof(FTGFItemPosition, X) == 0x000010, "Member 'FTGFItemPosition::X' has a wrong offset!");
static_assert(offsetof(FTGFItemPosition, Y) == 0x000014, "Member 'FTGFItemPosition::Y' has a wrong offset!");

// ScriptStruct LyraGame.TgfNpcEventStruct
// 0x0030 (0x0030 - 0x0000)
struct FTgfNpcEventStruct final
{
public:
	struct FGameplayTagContainer                  TriggerTags;                                       // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UTgfNpcBehavior*>                NpcBehaviors;                                      // 0x0020(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfNpcEventStruct) == 0x000008, "Wrong alignment on FTgfNpcEventStruct");
static_assert(sizeof(FTgfNpcEventStruct) == 0x000030, "Wrong size on FTgfNpcEventStruct");
static_assert(offsetof(FTgfNpcEventStruct, TriggerTags) == 0x000000, "Member 'FTgfNpcEventStruct::TriggerTags' has a wrong offset!");
static_assert(offsetof(FTgfNpcEventStruct, NpcBehaviors) == 0x000020, "Member 'FTgfNpcEventStruct::NpcBehaviors' has a wrong offset!");

// ScriptStruct LyraGame.UTgfPawnMaterialCache
// 0x0010 (0x0010 - 0x0000)
struct FUTgfPawnMaterialCache final
{
public:
	TArray<class UMaterialInterface*>             MaterialCache;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUTgfPawnMaterialCache) == 0x000008, "Wrong alignment on FUTgfPawnMaterialCache");
static_assert(sizeof(FUTgfPawnMaterialCache) == 0x000010, "Wrong size on FUTgfPawnMaterialCache");
static_assert(offsetof(FUTgfPawnMaterialCache, MaterialCache) == 0x000000, "Member 'FUTgfPawnMaterialCache::MaterialCache' has a wrong offset!");

// ScriptStruct LyraGame.TgfEnterPortalParameter
// 0x000C (0x000C - 0x0000)
struct FTgfEnterPortalParameter final
{
public:
	struct FGameplayTag                           PortalTag;                                         // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfEnterPortalParameter) == 0x000004, "Wrong alignment on FTgfEnterPortalParameter");
static_assert(sizeof(FTgfEnterPortalParameter) == 0x00000C, "Wrong size on FTgfEnterPortalParameter");
static_assert(offsetof(FTgfEnterPortalParameter, PortalTag) == 0x000000, "Member 'FTgfEnterPortalParameter::PortalTag' has a wrong offset!");
static_assert(offsetof(FTgfEnterPortalParameter, Delay) == 0x000008, "Member 'FTgfEnterPortalParameter::Delay' has a wrong offset!");

// ScriptStruct LyraGame.LyraVerbMessageReplicationEntry
// 0x0084 (0x0090 - 0x000C)
struct FLyraVerbMessageReplicationEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLyraVerbMessage                       Message;                                           // 0x0010(0x0080)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLyraVerbMessageReplicationEntry) == 0x000008, "Wrong alignment on FLyraVerbMessageReplicationEntry");
static_assert(sizeof(FLyraVerbMessageReplicationEntry) == 0x000090, "Wrong size on FLyraVerbMessageReplicationEntry");
static_assert(offsetof(FLyraVerbMessageReplicationEntry, Message) == 0x000010, "Member 'FLyraVerbMessageReplicationEntry::Message' has a wrong offset!");

// ScriptStruct LyraGame.ProjectileInitParams
// 0x0080 (0x0080 - 0x0000)
struct FProjectileInitParams final
{
public:
	ETgfEquipSlot                                 EquipSlot;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfUseAttackType                             UseAttackType;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraEquipmentInstance*                 EquipInstance;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanCauseInterrupt;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConsumeItem;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AttrBoostTags;                                     // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GEAttributeTag;                                    // 0x0038(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DamageRateCurve;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           InputGECH;                                         // 0x0060(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       SrcGA;                                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectileInitParams) == 0x000008, "Wrong alignment on FProjectileInitParams");
static_assert(sizeof(FProjectileInitParams) == 0x000080, "Wrong size on FProjectileInitParams");
static_assert(offsetof(FProjectileInitParams, EquipSlot) == 0x000000, "Member 'FProjectileInitParams::EquipSlot' has a wrong offset!");
static_assert(offsetof(FProjectileInitParams, UseAttackType) == 0x000001, "Member 'FProjectileInitParams::UseAttackType' has a wrong offset!");
static_assert(offsetof(FProjectileInitParams, EquipInstance) == 0x000008, "Member 'FProjectileInitParams::EquipInstance' has a wrong offset!");
static_assert(offsetof(FProjectileInitParams, CanCauseInterrupt) == 0x000010, "Member 'FProjectileInitParams::CanCauseInterrupt' has a wrong offset!");
static_assert(offsetof(FProjectileInitParams, ConsumeItem) == 0x000011, "Member 'FProjectileInitParams::ConsumeItem' has a wrong offset!");
static_assert(offsetof(FProjectileInitParams, AttrBoostTags) == 0x000018, "Member 'FProjectileInitParams::AttrBoostTags' has a wrong offset!");
static_assert(offsetof(FProjectileInitParams, GEAttributeTag) == 0x000038, "Member 'FProjectileInitParams::GEAttributeTag' has a wrong offset!");
static_assert(offsetof(FProjectileInitParams, DamageRateCurve) == 0x000058, "Member 'FProjectileInitParams::DamageRateCurve' has a wrong offset!");
static_assert(offsetof(FProjectileInitParams, InputGECH) == 0x000060, "Member 'FProjectileInitParams::InputGECH' has a wrong offset!");
static_assert(offsetof(FProjectileInitParams, SrcGA) == 0x000078, "Member 'FProjectileInitParams::SrcGA' has a wrong offset!");

// ScriptStruct LyraGame.WeaponAnimStateInfo
// 0x0002 (0x0002 - 0x0000)
struct FWeaponAnimStateInfo final
{
public:
	ERangedWeaponStateType                        Status;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAiming;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponAnimStateInfo) == 0x000001, "Wrong alignment on FWeaponAnimStateInfo");
static_assert(sizeof(FWeaponAnimStateInfo) == 0x000002, "Wrong size on FWeaponAnimStateInfo");
static_assert(offsetof(FWeaponAnimStateInfo, Status) == 0x000000, "Member 'FWeaponAnimStateInfo::Status' has a wrong offset!");
static_assert(offsetof(FWeaponAnimStateInfo, bAiming) == 0x000001, "Member 'FWeaponAnimStateInfo::bAiming' has a wrong offset!");

// ScriptStruct LyraGame.ArrowAnimConfig
// 0x0010 (0x0010 - 0x0000)
struct FArrowAnimConfig final
{
public:
	class UAnimMontage*                           HasArrowAnim;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           EmptyAnim;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrowAnimConfig) == 0x000008, "Wrong alignment on FArrowAnimConfig");
static_assert(sizeof(FArrowAnimConfig) == 0x000010, "Wrong size on FArrowAnimConfig");
static_assert(offsetof(FArrowAnimConfig, HasArrowAnim) == 0x000000, "Member 'FArrowAnimConfig::HasArrowAnim' has a wrong offset!");
static_assert(offsetof(FArrowAnimConfig, EmptyAnim) == 0x000008, "Member 'FArrowAnimConfig::EmptyAnim' has a wrong offset!");

// ScriptStruct LyraGame.LyraPlayerStateSelfQuitMessage
// 0x0008 (0x0008 - 0x0000)
struct FLyraPlayerStateSelfQuitMessage final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraPlayerStateSelfQuitMessage) == 0x000008, "Wrong alignment on FLyraPlayerStateSelfQuitMessage");
static_assert(sizeof(FLyraPlayerStateSelfQuitMessage) == 0x000008, "Wrong size on FLyraPlayerStateSelfQuitMessage");
static_assert(offsetof(FLyraPlayerStateSelfQuitMessage, PlayerState) == 0x000000, "Member 'FLyraPlayerStateSelfQuitMessage::PlayerState' has a wrong offset!");

// ScriptStruct LyraGame.TgfRootMotionSource_MoveToLocation
// 0x0070 (0x0150 - 0x00E0)
struct FTgfRootMotionSource_MoveToLocation final : public FRootMotionSource
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x00E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExtractRootMotionCurve;                         // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestrictSpeedToExpected;                          // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           LocationCurve;                                     // 0x0148(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfRootMotionSource_MoveToLocation) == 0x000010, "Wrong alignment on FTgfRootMotionSource_MoveToLocation");
static_assert(sizeof(FTgfRootMotionSource_MoveToLocation) == 0x000150, "Wrong size on FTgfRootMotionSource_MoveToLocation");
static_assert(offsetof(FTgfRootMotionSource_MoveToLocation, StartTransform) == 0x0000E0, "Member 'FTgfRootMotionSource_MoveToLocation::StartTransform' has a wrong offset!");
static_assert(offsetof(FTgfRootMotionSource_MoveToLocation, bIsExtractRootMotionCurve) == 0x000140, "Member 'FTgfRootMotionSource_MoveToLocation::bIsExtractRootMotionCurve' has a wrong offset!");
static_assert(offsetof(FTgfRootMotionSource_MoveToLocation, bRestrictSpeedToExpected) == 0x000141, "Member 'FTgfRootMotionSource_MoveToLocation::bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(FTgfRootMotionSource_MoveToLocation, LocationCurve) == 0x000148, "Member 'FTgfRootMotionSource_MoveToLocation::LocationCurve' has a wrong offset!");

// ScriptStruct LyraGame.TgfNotificationMessage
// 0x0018 (0x0018 - 0x0000)
struct FTgfNotificationMessage final
{
public:
	struct FGameplayTag                           TargetChannel;                                     // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                PayloadObject;                                     // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfNotificationMessage) == 0x000008, "Wrong alignment on FTgfNotificationMessage");
static_assert(sizeof(FTgfNotificationMessage) == 0x000018, "Wrong size on FTgfNotificationMessage");
static_assert(offsetof(FTgfNotificationMessage, TargetChannel) == 0x000000, "Member 'FTgfNotificationMessage::TargetChannel' has a wrong offset!");
static_assert(offsetof(FTgfNotificationMessage, PayloadObject) == 0x000008, "Member 'FTgfNotificationMessage::PayloadObject' has a wrong offset!");
static_assert(offsetof(FTgfNotificationMessage, Magnitude) == 0x000010, "Member 'FTgfNotificationMessage::Magnitude' has a wrong offset!");

// ScriptStruct LyraGame.TgfRootMotionSource_MoveToForce
// 0x0000 (0x0120 - 0x0120)
struct FTgfRootMotionSource_MoveToForce final : public FRootMotionSource_MoveToForce
{
public:
	float                                         IgnoreZLimit;                                      // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfRootMotionSource_MoveToForce) == 0x000010, "Wrong alignment on FTgfRootMotionSource_MoveToForce");
static_assert(sizeof(FTgfRootMotionSource_MoveToForce) == 0x000120, "Wrong size on FTgfRootMotionSource_MoveToForce");
static_assert(offsetof(FTgfRootMotionSource_MoveToForce, IgnoreZLimit) == 0x000118, "Member 'FTgfRootMotionSource_MoveToForce::IgnoreZLimit' has a wrong offset!");

// ScriptStruct LyraGame.RootMotionSource_SnapToTarget
// 0x0090 (0x0170 - 0x00E0)
struct FRootMotionSource_SnapToTarget final : public FRootMotionSource
{
public:
	struct FVector                                StartLocation;                                     // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRotation;                                     // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InitialTargetLocation;                             // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MoveFlags;                                         // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestrictSpeedToExpected;                          // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LocationLerpCurve;                                 // 0x0158(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RotationLerpCurve;                                 // 0x0160(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TimeMappingCurve;                                  // 0x0168(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRootMotionSource_SnapToTarget) == 0x000010, "Wrong alignment on FRootMotionSource_SnapToTarget");
static_assert(sizeof(FRootMotionSource_SnapToTarget) == 0x000170, "Wrong size on FRootMotionSource_SnapToTarget");
static_assert(offsetof(FRootMotionSource_SnapToTarget, StartLocation) == 0x0000D8, "Member 'FRootMotionSource_SnapToTarget::StartLocation' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_SnapToTarget, StartRotation) == 0x0000F0, "Member 'FRootMotionSource_SnapToTarget::StartRotation' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_SnapToTarget, InitialTargetLocation) == 0x000108, "Member 'FRootMotionSource_SnapToTarget::InitialTargetLocation' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_SnapToTarget, TargetLocation) == 0x000120, "Member 'FRootMotionSource_SnapToTarget::TargetLocation' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_SnapToTarget, TargetRotation) == 0x000138, "Member 'FRootMotionSource_SnapToTarget::TargetRotation' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_SnapToTarget, MoveFlags) == 0x000150, "Member 'FRootMotionSource_SnapToTarget::MoveFlags' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_SnapToTarget, bRestrictSpeedToExpected) == 0x000154, "Member 'FRootMotionSource_SnapToTarget::bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_SnapToTarget, LocationLerpCurve) == 0x000158, "Member 'FRootMotionSource_SnapToTarget::LocationLerpCurve' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_SnapToTarget, RotationLerpCurve) == 0x000160, "Member 'FRootMotionSource_SnapToTarget::RotationLerpCurve' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_SnapToTarget, TimeMappingCurve) == 0x000168, "Member 'FRootMotionSource_SnapToTarget::TimeMappingCurve' has a wrong offset!");

// ScriptStruct LyraGame.RootMotionSource_ConstantDynamicForce
// 0x0000 (0x0100 - 0x0100)
struct FRootMotionSource_ConstantDynamicForce final : public FRootMotionSource_ConstantForce
{
};
static_assert(alignof(FRootMotionSource_ConstantDynamicForce) == 0x000010, "Wrong alignment on FRootMotionSource_ConstantDynamicForce");
static_assert(sizeof(FRootMotionSource_ConstantDynamicForce) == 0x000100, "Wrong size on FRootMotionSource_ConstantDynamicForce");

// ScriptStruct LyraGame.LyraCachedPlayerStarts
// 0x0030 (0x0030 - 0x0000)
struct FLyraCachedPlayerStarts final
{
public:
	TArray<TWeakObjectPtr<class ALyraPlayerStart>> PlayerStarts;                                      // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ALyraPlayerStartSet>> PlayerStartSets;                                   // 0x0010(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ALyraPlayerStartSetGroup>> PlayerStartSetGroups;                              // 0x0020(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraCachedPlayerStarts) == 0x000008, "Wrong alignment on FLyraCachedPlayerStarts");
static_assert(sizeof(FLyraCachedPlayerStarts) == 0x000030, "Wrong size on FLyraCachedPlayerStarts");
static_assert(offsetof(FLyraCachedPlayerStarts, PlayerStarts) == 0x000000, "Member 'FLyraCachedPlayerStarts::PlayerStarts' has a wrong offset!");
static_assert(offsetof(FLyraCachedPlayerStarts, PlayerStartSets) == 0x000010, "Member 'FLyraCachedPlayerStarts::PlayerStartSets' has a wrong offset!");
static_assert(offsetof(FLyraCachedPlayerStarts, PlayerStartSetGroups) == 0x000020, "Member 'FLyraCachedPlayerStarts::PlayerStartSetGroups' has a wrong offset!");

// ScriptStruct LyraGame.TgfSnapQueryConfig
// 0x0048 (0x0048 - 0x0000)
struct FTgfSnapQueryConfig final
{
public:
	float                                         TargetScanRange;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScanFieldOfView;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScanVerticalFieldOfViewUp;                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScanVerticalFieldOfViewDown;                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TargetChannel;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MoveFlags;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LocationSnapLerpCurve;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RotationSnapLerpCurve;                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedFollowTarget;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            TargetLocationLerpSpeedHorizontal;                 // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TargetLocationLerpSpeedVertical;                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetRotationLerpSpeed;                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfSnapQueryConfig) == 0x000008, "Wrong alignment on FTgfSnapQueryConfig");
static_assert(sizeof(FTgfSnapQueryConfig) == 0x000048, "Wrong size on FTgfSnapQueryConfig");
static_assert(offsetof(FTgfSnapQueryConfig, TargetScanRange) == 0x000000, "Member 'FTgfSnapQueryConfig::TargetScanRange' has a wrong offset!");
static_assert(offsetof(FTgfSnapQueryConfig, ScanFieldOfView) == 0x000004, "Member 'FTgfSnapQueryConfig::ScanFieldOfView' has a wrong offset!");
static_assert(offsetof(FTgfSnapQueryConfig, ScanVerticalFieldOfViewUp) == 0x000008, "Member 'FTgfSnapQueryConfig::ScanVerticalFieldOfViewUp' has a wrong offset!");
static_assert(offsetof(FTgfSnapQueryConfig, ScanVerticalFieldOfViewDown) == 0x00000C, "Member 'FTgfSnapQueryConfig::ScanVerticalFieldOfViewDown' has a wrong offset!");
static_assert(offsetof(FTgfSnapQueryConfig, TargetChannel) == 0x000010, "Member 'FTgfSnapQueryConfig::TargetChannel' has a wrong offset!");
static_assert(offsetof(FTgfSnapQueryConfig, MoveFlags) == 0x000014, "Member 'FTgfSnapQueryConfig::MoveFlags' has a wrong offset!");
static_assert(offsetof(FTgfSnapQueryConfig, LocationSnapLerpCurve) == 0x000018, "Member 'FTgfSnapQueryConfig::LocationSnapLerpCurve' has a wrong offset!");
static_assert(offsetof(FTgfSnapQueryConfig, RotationSnapLerpCurve) == 0x000020, "Member 'FTgfSnapQueryConfig::RotationSnapLerpCurve' has a wrong offset!");
static_assert(offsetof(FTgfSnapQueryConfig, bNeedFollowTarget) == 0x000028, "Member 'FTgfSnapQueryConfig::bNeedFollowTarget' has a wrong offset!");
static_assert(offsetof(FTgfSnapQueryConfig, TargetLocationLerpSpeedHorizontal) == 0x000030, "Member 'FTgfSnapQueryConfig::TargetLocationLerpSpeedHorizontal' has a wrong offset!");
static_assert(offsetof(FTgfSnapQueryConfig, TargetLocationLerpSpeedVertical) == 0x000038, "Member 'FTgfSnapQueryConfig::TargetLocationLerpSpeedVertical' has a wrong offset!");
static_assert(offsetof(FTgfSnapQueryConfig, TargetRotationLerpSpeed) == 0x000040, "Member 'FTgfSnapQueryConfig::TargetRotationLerpSpeed' has a wrong offset!");

// ScriptStruct LyraGame.TgfSpectatorList
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTgfSpectatorList final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfSpectatorList) == 0x000008, "Wrong alignment on FTgfSpectatorList");
static_assert(sizeof(FTgfSpectatorList) == 0x000018, "Wrong size on FTgfSpectatorList");

// ScriptStruct LyraGame.LyraTeamInfoBaseStruct
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FLyraTeamInfoBaseStruct final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraTeamInfoBaseStruct) == 0x000008, "Wrong alignment on FLyraTeamInfoBaseStruct");
static_assert(sizeof(FLyraTeamInfoBaseStruct) == 0x000028, "Wrong size on FLyraTeamInfoBaseStruct");

// ScriptStruct LyraGame.LyraTeamTrackingInfo
// 0x0060 (0x0060 - 0x0000)
struct FLyraTeamTrackingInfo final
{
public:
	class ALyraTeamPublicInfo*                    PublicInfo;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraTeamPrivateInfo*                   PrivateInfo;                                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraTeamDisplayAsset*                  DisplayAsset;                                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamDisplayAssetChanged;                         // 0x0018(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FLyraTeamInfoBaseStruct                TeamInfo;                                          // 0x0028(0x0028)(NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraTeamTrackingInfo) == 0x000008, "Wrong alignment on FLyraTeamTrackingInfo");
static_assert(sizeof(FLyraTeamTrackingInfo) == 0x000060, "Wrong size on FLyraTeamTrackingInfo");
static_assert(offsetof(FLyraTeamTrackingInfo, PublicInfo) == 0x000000, "Member 'FLyraTeamTrackingInfo::PublicInfo' has a wrong offset!");
static_assert(offsetof(FLyraTeamTrackingInfo, PrivateInfo) == 0x000008, "Member 'FLyraTeamTrackingInfo::PrivateInfo' has a wrong offset!");
static_assert(offsetof(FLyraTeamTrackingInfo, DisplayAsset) == 0x000010, "Member 'FLyraTeamTrackingInfo::DisplayAsset' has a wrong offset!");
static_assert(offsetof(FLyraTeamTrackingInfo, OnTeamDisplayAssetChanged) == 0x000018, "Member 'FLyraTeamTrackingInfo::OnTeamDisplayAssetChanged' has a wrong offset!");
static_assert(offsetof(FLyraTeamTrackingInfo, TeamInfo) == 0x000028, "Member 'FLyraTeamTrackingInfo::TeamInfo' has a wrong offset!");

// ScriptStruct LyraGame.ThreatInfo
// 0x0010 (0x0010 - 0x0000)
struct FThreatInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threat;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThreatInfo) == 0x000008, "Wrong alignment on FThreatInfo");
static_assert(sizeof(FThreatInfo) == 0x000010, "Wrong size on FThreatInfo");
static_assert(offsetof(FThreatInfo, Actor) == 0x000000, "Member 'FThreatInfo::Actor' has a wrong offset!");
static_assert(offsetof(FThreatInfo, Threat) == 0x000008, "Member 'FThreatInfo::Threat' has a wrong offset!");

// ScriptStruct LyraGame.ReportRecord
// 0x0090 (0x0090 - 0x0000)
struct FReportRecord final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventType;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str1;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str2;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str3;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str4;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str5;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Int1;                                              // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Int2;                                              // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Int3;                                              // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ActionTime;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReportRecord) == 0x000008, "Wrong alignment on FReportRecord");
static_assert(sizeof(FReportRecord) == 0x000090, "Wrong size on FReportRecord");
static_assert(offsetof(FReportRecord, EventName) == 0x000000, "Member 'FReportRecord::EventName' has a wrong offset!");
static_assert(offsetof(FReportRecord, EventType) == 0x000010, "Member 'FReportRecord::EventType' has a wrong offset!");
static_assert(offsetof(FReportRecord, Str1) == 0x000020, "Member 'FReportRecord::Str1' has a wrong offset!");
static_assert(offsetof(FReportRecord, Str2) == 0x000030, "Member 'FReportRecord::Str2' has a wrong offset!");
static_assert(offsetof(FReportRecord, Str3) == 0x000040, "Member 'FReportRecord::Str3' has a wrong offset!");
static_assert(offsetof(FReportRecord, Str4) == 0x000050, "Member 'FReportRecord::Str4' has a wrong offset!");
static_assert(offsetof(FReportRecord, Str5) == 0x000060, "Member 'FReportRecord::Str5' has a wrong offset!");
static_assert(offsetof(FReportRecord, Int1) == 0x000070, "Member 'FReportRecord::Int1' has a wrong offset!");
static_assert(offsetof(FReportRecord, Int2) == 0x000078, "Member 'FReportRecord::Int2' has a wrong offset!");
static_assert(offsetof(FReportRecord, Int3) == 0x000080, "Member 'FReportRecord::Int3' has a wrong offset!");
static_assert(offsetof(FReportRecord, ActionTime) == 0x000088, "Member 'FReportRecord::ActionTime' has a wrong offset!");

// ScriptStruct LyraGame.LyraScalabilitySnapshot
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FLyraScalabilitySnapshot final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraScalabilitySnapshot) == 0x000008, "Wrong alignment on FLyraScalabilitySnapshot");
static_assert(sizeof(FLyraScalabilitySnapshot) == 0x000060, "Wrong size on FLyraScalabilitySnapshot");

// ScriptStruct LyraGame.TgfWeaponAnimConfig
// 0x0010 (0x0010 - 0x0000)
struct FTgfWeaponAnimConfig final
{
public:
	ETgfEquipSubType                              AssistWeaponType;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTgfWeaponAnimDefinition>   AnimWeaponDefinition;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfWeaponAnimConfig) == 0x000008, "Wrong alignment on FTgfWeaponAnimConfig");
static_assert(sizeof(FTgfWeaponAnimConfig) == 0x000010, "Wrong size on FTgfWeaponAnimConfig");
static_assert(offsetof(FTgfWeaponAnimConfig, AssistWeaponType) == 0x000000, "Member 'FTgfWeaponAnimConfig::AssistWeaponType' has a wrong offset!");
static_assert(offsetof(FTgfWeaponAnimConfig, AnimWeaponDefinition) == 0x000008, "Member 'FTgfWeaponAnimConfig::AnimWeaponDefinition' has a wrong offset!");

// ScriptStruct LyraGame.WidgetList
// 0x0010 (0x0010 - 0x0000)
struct FWidgetList final
{
public:
	TArray<class UUserWidget*>                    WidgetList;                                        // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetList) == 0x000008, "Wrong alignment on FWidgetList");
static_assert(sizeof(FWidgetList) == 0x000010, "Wrong size on FWidgetList");
static_assert(offsetof(FWidgetList, WidgetList) == 0x000000, "Member 'FWidgetList::WidgetList' has a wrong offset!");

// ScriptStruct LyraGame.LyraPerformanceStatGroup
// 0x0098 (0x0098 - 0x0000)
struct FLyraPerformanceStatGroup final
{
public:
	struct FGameplayTagQuery                      VisibilityQuery;                                   // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	TSet<ELyraDisplayablePerformanceStat>         AllowedStats;                                      // 0x0048(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraPerformanceStatGroup) == 0x000008, "Wrong alignment on FLyraPerformanceStatGroup");
static_assert(sizeof(FLyraPerformanceStatGroup) == 0x000098, "Wrong size on FLyraPerformanceStatGroup");
static_assert(offsetof(FLyraPerformanceStatGroup, VisibilityQuery) == 0x000000, "Member 'FLyraPerformanceStatGroup::VisibilityQuery' has a wrong offset!");
static_assert(offsetof(FLyraPerformanceStatGroup, AllowedStats) == 0x000048, "Member 'FLyraPerformanceStatGroup::AllowedStats' has a wrong offset!");

// ScriptStruct LyraGame.VirtualItemRow
// 0x0040 (0x0048 - 0x0008)
struct FVirtualItemRow final : public FTableRowBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyID;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CurrencyIcon;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TipsIcon;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ETgfEquipQuality                              Quality;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVirtualItemRow) == 0x000008, "Wrong alignment on FVirtualItemRow");
static_assert(sizeof(FVirtualItemRow) == 0x000048, "Wrong size on FVirtualItemRow");
static_assert(offsetof(FVirtualItemRow, Name) == 0x000008, "Member 'FVirtualItemRow::Name' has a wrong offset!");
static_assert(offsetof(FVirtualItemRow, CurrencyID) == 0x000010, "Member 'FVirtualItemRow::CurrencyID' has a wrong offset!");
static_assert(offsetof(FVirtualItemRow, CurrencyIcon) == 0x000018, "Member 'FVirtualItemRow::CurrencyIcon' has a wrong offset!");
static_assert(offsetof(FVirtualItemRow, TipsIcon) == 0x000020, "Member 'FVirtualItemRow::TipsIcon' has a wrong offset!");
static_assert(offsetof(FVirtualItemRow, Description) == 0x000028, "Member 'FVirtualItemRow::Description' has a wrong offset!");
static_assert(offsetof(FVirtualItemRow, Quality) == 0x000040, "Member 'FVirtualItemRow::Quality' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilityMontageFailureMessage
// 0x0030 (0x0030 - 0x0000)
struct FLyraAbilityMontageFailureMessage final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  FailureTags;                                       // 0x0008(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FailureMontage;                                    // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilityMontageFailureMessage) == 0x000008, "Wrong alignment on FLyraAbilityMontageFailureMessage");
static_assert(sizeof(FLyraAbilityMontageFailureMessage) == 0x000030, "Wrong size on FLyraAbilityMontageFailureMessage");
static_assert(offsetof(FLyraAbilityMontageFailureMessage, PlayerController) == 0x000000, "Member 'FLyraAbilityMontageFailureMessage::PlayerController' has a wrong offset!");
static_assert(offsetof(FLyraAbilityMontageFailureMessage, FailureTags) == 0x000008, "Member 'FLyraAbilityMontageFailureMessage::FailureTags' has a wrong offset!");
static_assert(offsetof(FLyraAbilityMontageFailureMessage, FailureMontage) == 0x000028, "Member 'FLyraAbilityMontageFailureMessage::FailureMontage' has a wrong offset!");

// ScriptStruct LyraGame.GameplayTagStack
// 0x000C (0x0018 - 0x000C)
struct FGameplayTagStack final : public FFastArraySerializerItem
{
public:
	struct FGameplayTag                           Tag;                                               // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StackCount;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGameplayTagStack) == 0x000004, "Wrong alignment on FGameplayTagStack");
static_assert(sizeof(FGameplayTagStack) == 0x000018, "Wrong size on FGameplayTagStack");
static_assert(offsetof(FGameplayTagStack, Tag) == 0x00000C, "Member 'FGameplayTagStack::Tag' has a wrong offset!");
static_assert(offsetof(FGameplayTagStack, StackCount) == 0x000014, "Member 'FGameplayTagStack::StackCount' has a wrong offset!");

// ScriptStruct LyraGame.GameplayTagStackContainer
// 0x0060 (0x0168 - 0x0108)
struct FGameplayTagStackContainer final : public FFastArraySerializer
{
public:
	TArray<struct FGameplayTagStack>              Stacks;                                            // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x50];                                     // 0x0118(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayTagStackContainer) == 0x000008, "Wrong alignment on FGameplayTagStackContainer");
static_assert(sizeof(FGameplayTagStackContainer) == 0x000168, "Wrong size on FGameplayTagStackContainer");
static_assert(offsetof(FGameplayTagStackContainer, Stacks) == 0x000108, "Member 'FGameplayTagStackContainer::Stacks' has a wrong offset!");

// ScriptStruct LyraGame.LyraPlayerResetMessage
// 0x0008 (0x0008 - 0x0000)
struct FLyraPlayerResetMessage final
{
public:
	class AActor*                                 OwnerPlayerState;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraPlayerResetMessage) == 0x000008, "Wrong alignment on FLyraPlayerResetMessage");
static_assert(sizeof(FLyraPlayerResetMessage) == 0x000008, "Wrong size on FLyraPlayerResetMessage");
static_assert(offsetof(FLyraPlayerResetMessage, OwnerPlayerState) == 0x000000, "Member 'FLyraPlayerResetMessage::OwnerPlayerState' has a wrong offset!");

// ScriptStruct LyraGame.GameplayCueNotify_EffectCondition
// 0x0008 (0x0008 - 0x0000)
struct FGameplayCueNotify_EffectCondition final
{
public:
	int32                                         HitValueLevel;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfFirstPersonRestrict                       FirstPersonRestrict;                               // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfThreeValueRestrict                        IsGuarded;                                         // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCueNotify_EffectCondition) == 0x000004, "Wrong alignment on FGameplayCueNotify_EffectCondition");
static_assert(sizeof(FGameplayCueNotify_EffectCondition) == 0x000008, "Wrong size on FGameplayCueNotify_EffectCondition");
static_assert(offsetof(FGameplayCueNotify_EffectCondition, HitValueLevel) == 0x000000, "Member 'FGameplayCueNotify_EffectCondition::HitValueLevel' has a wrong offset!");
static_assert(offsetof(FGameplayCueNotify_EffectCondition, FirstPersonRestrict) == 0x000004, "Member 'FGameplayCueNotify_EffectCondition::FirstPersonRestrict' has a wrong offset!");
static_assert(offsetof(FGameplayCueNotify_EffectCondition, IsGuarded) == 0x000005, "Member 'FGameplayCueNotify_EffectCondition::IsGuarded' has a wrong offset!");

// ScriptStruct LyraGame.GameplayCueNotify_EffectConditionWrap
// 0x0018 (0x0018 - 0x0000)
struct FGameplayCueNotify_EffectConditionWrap final
{
public:
	bool                                          bDefaultSpawn;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayCueNotify_EffectCondition> EffectConditions;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCueNotify_EffectConditionWrap) == 0x000008, "Wrong alignment on FGameplayCueNotify_EffectConditionWrap");
static_assert(sizeof(FGameplayCueNotify_EffectConditionWrap) == 0x000018, "Wrong size on FGameplayCueNotify_EffectConditionWrap");
static_assert(offsetof(FGameplayCueNotify_EffectConditionWrap, bDefaultSpawn) == 0x000000, "Member 'FGameplayCueNotify_EffectConditionWrap::bDefaultSpawn' has a wrong offset!");
static_assert(offsetof(FGameplayCueNotify_EffectConditionWrap, EffectConditions) == 0x000008, "Member 'FGameplayCueNotify_EffectConditionWrap::EffectConditions' has a wrong offset!");

// ScriptStruct LyraGame.GameplayCueNotify_EffectHitValueConfig
// 0x0050 (0x0050 - 0x0000)
struct FGameplayCueNotify_EffectHitValueConfig final
{
public:
	TMap<ETgfGameplayCueNotify_EffectType, struct FGameplayCueNotify_EffectConditionWrap> EffectTypeConfig;                                  // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCueNotify_EffectHitValueConfig) == 0x000008, "Wrong alignment on FGameplayCueNotify_EffectHitValueConfig");
static_assert(sizeof(FGameplayCueNotify_EffectHitValueConfig) == 0x000050, "Wrong size on FGameplayCueNotify_EffectHitValueConfig");
static_assert(offsetof(FGameplayCueNotify_EffectHitValueConfig, EffectTypeConfig) == 0x000000, "Member 'FGameplayCueNotify_EffectHitValueConfig::EffectTypeConfig' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayCueNotify_SoundInfo
// 0x0178 (0x0178 - 0x0000)
struct FTgfGameplayCueNotify_SoundInfo final
{
public:
	struct FGameplayCueNotify_SpawnCondition      SpawnConditionOverride;                            // 0x0000(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayCueNotify_PlacementInfo       PlacementInfoOverride;                             // 0x00D0(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SwitchGroup;                                       // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchState;                                       // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkSwitchValue*                         SwitchValue;                                       // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          Sound;                                             // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideSpawnCondition : 1;                       // 0x0168(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverridePlacementInfo : 1;                        // 0x0168(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopingFadeOutDuration;                            // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AudioObstacleDetection;                            // 0x0170(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfGameplayCueNotify_SoundInfo) == 0x000008, "Wrong alignment on FTgfGameplayCueNotify_SoundInfo");
static_assert(sizeof(FTgfGameplayCueNotify_SoundInfo) == 0x000178, "Wrong size on FTgfGameplayCueNotify_SoundInfo");
static_assert(offsetof(FTgfGameplayCueNotify_SoundInfo, SpawnConditionOverride) == 0x000000, "Member 'FTgfGameplayCueNotify_SoundInfo::SpawnConditionOverride' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_SoundInfo, PlacementInfoOverride) == 0x0000D0, "Member 'FTgfGameplayCueNotify_SoundInfo::PlacementInfoOverride' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_SoundInfo, SwitchGroup) == 0x000148, "Member 'FTgfGameplayCueNotify_SoundInfo::SwitchGroup' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_SoundInfo, SwitchState) == 0x000150, "Member 'FTgfGameplayCueNotify_SoundInfo::SwitchState' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_SoundInfo, SwitchValue) == 0x000158, "Member 'FTgfGameplayCueNotify_SoundInfo::SwitchValue' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_SoundInfo, Sound) == 0x000160, "Member 'FTgfGameplayCueNotify_SoundInfo::Sound' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_SoundInfo, LoopingFadeOutDuration) == 0x00016C, "Member 'FTgfGameplayCueNotify_SoundInfo::LoopingFadeOutDuration' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_SoundInfo, AudioObstacleDetection) == 0x000170, "Member 'FTgfGameplayCueNotify_SoundInfo::AudioObstacleDetection' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayCueNotify_ParticleListConfig
// 0x0020 (0x0020 - 0x0000)
struct FTgfGameplayCueNotify_ParticleListConfig final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayCueNotify_ParticleInfo> Particles;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfGameplayCueNotify_ParticleListConfig) == 0x000008, "Wrong alignment on FTgfGameplayCueNotify_ParticleListConfig");
static_assert(sizeof(FTgfGameplayCueNotify_ParticleListConfig) == 0x000020, "Wrong size on FTgfGameplayCueNotify_ParticleListConfig");
static_assert(offsetof(FTgfGameplayCueNotify_ParticleListConfig, Description) == 0x000000, "Member 'FTgfGameplayCueNotify_ParticleListConfig::Description' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_ParticleListConfig, Particles) == 0x000010, "Member 'FTgfGameplayCueNotify_ParticleListConfig::Particles' has a wrong offset!");

// ScriptStruct LyraGame.InventoryTalentsTipsData
// 0x0010 (0x0010 - 0x0000)
struct FInventoryTalentsTipsData final
{
public:
	TArray<int64>                                 RoleGuids;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryTalentsTipsData) == 0x000008, "Wrong alignment on FInventoryTalentsTipsData");
static_assert(sizeof(FInventoryTalentsTipsData) == 0x000010, "Wrong size on FInventoryTalentsTipsData");
static_assert(offsetof(FInventoryTalentsTipsData, RoleGuids) == 0x000000, "Member 'FInventoryTalentsTipsData::RoleGuids' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayCueNotify_DecalInfo
// 0x0030 (0x0030 - 0x0000)
struct FTgfGameplayCueNotify_DecalInfo final
{
public:
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      AllowedSurfaceTypes;                               // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                DecalSize;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfGameplayCueNotify_DecalInfo) == 0x000008, "Wrong alignment on FTgfGameplayCueNotify_DecalInfo");
static_assert(sizeof(FTgfGameplayCueNotify_DecalInfo) == 0x000030, "Wrong size on FTgfGameplayCueNotify_DecalInfo");
static_assert(offsetof(FTgfGameplayCueNotify_DecalInfo, DecalMaterial) == 0x000000, "Member 'FTgfGameplayCueNotify_DecalInfo::DecalMaterial' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_DecalInfo, AllowedSurfaceTypes) == 0x000008, "Member 'FTgfGameplayCueNotify_DecalInfo::AllowedSurfaceTypes' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_DecalInfo, DecalSize) == 0x000018, "Member 'FTgfGameplayCueNotify_DecalInfo::DecalSize' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayCueNotify_CameraShakeInfo
// 0x0170 (0x0170 - 0x0000)
struct FTgfGameplayCueNotify_CameraShakeInfo final
{
public:
	struct FGameplayCueNotify_SpawnCondition      SpawnConditionOverride;                            // 0x0000(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayCueNotify_PlacementInfo       PlacementInfoOverride;                             // 0x00D0(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           CameraShake;                                       // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShakeScale;                                        // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayCueNotify_EffectPlaySpace            PlaySpace;                                         // 0x0154(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverrideSpawnCondition : 1;                       // 0x0158(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverridePlacementInfo : 1;                        // 0x0158(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayInWorld : 1;                                  // 0x0158(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WorldInnerRadius;                                  // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldOuterRadius;                                  // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldFalloffExponent;                              // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayCueNotify_LocallyControlledSource    TargetActor;                                       // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfGameplayCueNotify_CameraShakeInfo) == 0x000008, "Wrong alignment on FTgfGameplayCueNotify_CameraShakeInfo");
static_assert(sizeof(FTgfGameplayCueNotify_CameraShakeInfo) == 0x000170, "Wrong size on FTgfGameplayCueNotify_CameraShakeInfo");
static_assert(offsetof(FTgfGameplayCueNotify_CameraShakeInfo, SpawnConditionOverride) == 0x000000, "Member 'FTgfGameplayCueNotify_CameraShakeInfo::SpawnConditionOverride' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_CameraShakeInfo, PlacementInfoOverride) == 0x0000D0, "Member 'FTgfGameplayCueNotify_CameraShakeInfo::PlacementInfoOverride' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_CameraShakeInfo, CameraShake) == 0x000148, "Member 'FTgfGameplayCueNotify_CameraShakeInfo::CameraShake' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_CameraShakeInfo, ShakeScale) == 0x000150, "Member 'FTgfGameplayCueNotify_CameraShakeInfo::ShakeScale' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_CameraShakeInfo, PlaySpace) == 0x000154, "Member 'FTgfGameplayCueNotify_CameraShakeInfo::PlaySpace' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_CameraShakeInfo, WorldInnerRadius) == 0x00015C, "Member 'FTgfGameplayCueNotify_CameraShakeInfo::WorldInnerRadius' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_CameraShakeInfo, WorldOuterRadius) == 0x000160, "Member 'FTgfGameplayCueNotify_CameraShakeInfo::WorldOuterRadius' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_CameraShakeInfo, WorldFalloffExponent) == 0x000164, "Member 'FTgfGameplayCueNotify_CameraShakeInfo::WorldFalloffExponent' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_CameraShakeInfo, TargetActor) == 0x000168, "Member 'FTgfGameplayCueNotify_CameraShakeInfo::TargetActor' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayCueNotify_BurstEffects
// 0x00F0 (0x00F0 - 0x0000)
struct FTgfGameplayCueNotify_BurstEffects final
{
public:
	TArray<struct FTgfGameplayCueNotify_SoundInfo> BurstWwiseSounds;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTgfGameplayCueNotify_ParticleListConfig> BurstRandomParticleLists;                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTgfGameplayCueNotify_CameraShakeInfo> BurstSourceCameraShakes;                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstance*>              BurstScreenMaterials;                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTgfGameplayCueNotify_DecalInfo> BurstDamageDecals;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayCueNotify_ParticleInfo> BurstParticles;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayCueNotify_CameraLensEffectInfo> BurstCameraLensEffects;                            // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayCueNotify_ForceFeedbackInfo> BurstForceFeedbacks;                               // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayCueNotify_DecalInfo>   BurstDecals;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_EffectHitValueConfig HitValueRestrict;                                  // 0x0090(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTgfGameplayCueNotify_ParticleListConfig> BurstGroupedParticles;                             // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTgfGameplayCueNotify_BurstEffects) == 0x000008, "Wrong alignment on FTgfGameplayCueNotify_BurstEffects");
static_assert(sizeof(FTgfGameplayCueNotify_BurstEffects) == 0x0000F0, "Wrong size on FTgfGameplayCueNotify_BurstEffects");
static_assert(offsetof(FTgfGameplayCueNotify_BurstEffects, BurstWwiseSounds) == 0x000000, "Member 'FTgfGameplayCueNotify_BurstEffects::BurstWwiseSounds' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_BurstEffects, BurstRandomParticleLists) == 0x000010, "Member 'FTgfGameplayCueNotify_BurstEffects::BurstRandomParticleLists' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_BurstEffects, BurstSourceCameraShakes) == 0x000020, "Member 'FTgfGameplayCueNotify_BurstEffects::BurstSourceCameraShakes' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_BurstEffects, BurstScreenMaterials) == 0x000030, "Member 'FTgfGameplayCueNotify_BurstEffects::BurstScreenMaterials' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_BurstEffects, BurstDamageDecals) == 0x000040, "Member 'FTgfGameplayCueNotify_BurstEffects::BurstDamageDecals' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_BurstEffects, BurstParticles) == 0x000050, "Member 'FTgfGameplayCueNotify_BurstEffects::BurstParticles' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_BurstEffects, BurstCameraLensEffects) == 0x000060, "Member 'FTgfGameplayCueNotify_BurstEffects::BurstCameraLensEffects' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_BurstEffects, BurstForceFeedbacks) == 0x000070, "Member 'FTgfGameplayCueNotify_BurstEffects::BurstForceFeedbacks' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_BurstEffects, BurstDecals) == 0x000080, "Member 'FTgfGameplayCueNotify_BurstEffects::BurstDecals' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_BurstEffects, HitValueRestrict) == 0x000090, "Member 'FTgfGameplayCueNotify_BurstEffects::HitValueRestrict' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_BurstEffects, BurstGroupedParticles) == 0x0000E0, "Member 'FTgfGameplayCueNotify_BurstEffects::BurstGroupedParticles' has a wrong offset!");

// ScriptStruct LyraGame.TgfSpawnSound
// 0x0018 (0x0018 - 0x0000)
struct FTgfSpawnSound final
{
public:
	class UAkAudioEvent*                          SoundEvent;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AudioComponent;                                    // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundPlayingId;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfSpawnSound) == 0x000008, "Wrong alignment on FTgfSpawnSound");
static_assert(sizeof(FTgfSpawnSound) == 0x000018, "Wrong size on FTgfSpawnSound");
static_assert(offsetof(FTgfSpawnSound, SoundEvent) == 0x000000, "Member 'FTgfSpawnSound::SoundEvent' has a wrong offset!");
static_assert(offsetof(FTgfSpawnSound, AudioComponent) == 0x000008, "Member 'FTgfSpawnSound::AudioComponent' has a wrong offset!");
static_assert(offsetof(FTgfSpawnSound, SoundPlayingId) == 0x000010, "Member 'FTgfSpawnSound::SoundPlayingId' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayCueNotify_SpawnResult
// 0x0020 (0x0020 - 0x0000)
struct FTgfGameplayCueNotify_SpawnResult final
{
public:
	TArray<struct FTgfSpawnSound>                 SpawnSounds;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UNiagaraComponent*>              SpawnLineNiagaraComponents;                        // 0x0010(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfGameplayCueNotify_SpawnResult) == 0x000008, "Wrong alignment on FTgfGameplayCueNotify_SpawnResult");
static_assert(sizeof(FTgfGameplayCueNotify_SpawnResult) == 0x000020, "Wrong size on FTgfGameplayCueNotify_SpawnResult");
static_assert(offsetof(FTgfGameplayCueNotify_SpawnResult, SpawnSounds) == 0x000000, "Member 'FTgfGameplayCueNotify_SpawnResult::SpawnSounds' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_SpawnResult, SpawnLineNiagaraComponents) == 0x000010, "Member 'FTgfGameplayCueNotify_SpawnResult::SpawnLineNiagaraComponents' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayCueNotify_LoopingEffects
// 0x0080 (0x0080 - 0x0000)
struct FTgfGameplayCueNotify_LoopingEffects final
{
public:
	TArray<struct FTgfGameplayCueNotify_SoundInfo> LoopingSounds;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_EffectHitValueConfig HitValueRestrict;                                  // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstance*>              BurstScreenMaterials;                              // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTgfGameplayCueNotify_ParticleListConfig> LoopingGroupedParticles;                           // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTgfGameplayCueNotify_LoopingEffects) == 0x000008, "Wrong alignment on FTgfGameplayCueNotify_LoopingEffects");
static_assert(sizeof(FTgfGameplayCueNotify_LoopingEffects) == 0x000080, "Wrong size on FTgfGameplayCueNotify_LoopingEffects");
static_assert(offsetof(FTgfGameplayCueNotify_LoopingEffects, LoopingSounds) == 0x000000, "Member 'FTgfGameplayCueNotify_LoopingEffects::LoopingSounds' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_LoopingEffects, HitValueRestrict) == 0x000010, "Member 'FTgfGameplayCueNotify_LoopingEffects::HitValueRestrict' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_LoopingEffects, BurstScreenMaterials) == 0x000060, "Member 'FTgfGameplayCueNotify_LoopingEffects::BurstScreenMaterials' has a wrong offset!");
static_assert(offsetof(FTgfGameplayCueNotify_LoopingEffects, LoopingGroupedParticles) == 0x000070, "Member 'FTgfGameplayCueNotify_LoopingEffects::LoopingGroupedParticles' has a wrong offset!");

// ScriptStruct LyraGame.AddShieldItem
// 0x0020 (0x0020 - 0x0000)
struct FAddShieldItem final
{
public:
	struct FGameplayEffectContextHandle           EffectHandle;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsMinus;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaNum;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAddShieldItem) == 0x000008, "Wrong alignment on FAddShieldItem");
static_assert(sizeof(FAddShieldItem) == 0x000020, "Wrong size on FAddShieldItem");
static_assert(offsetof(FAddShieldItem, EffectHandle) == 0x000000, "Member 'FAddShieldItem::EffectHandle' has a wrong offset!");
static_assert(offsetof(FAddShieldItem, IsMinus) == 0x000018, "Member 'FAddShieldItem::IsMinus' has a wrong offset!");
static_assert(offsetof(FAddShieldItem, DeltaNum) == 0x00001C, "Member 'FAddShieldItem::DeltaNum' has a wrong offset!");

// ScriptStruct LyraGame.TgfFirstLevelSingleAffectItem
// 0x0040 (0x0040 - 0x0000)
struct FTgfFirstLevelSingleAffectItem final
{
public:
	struct FGameplayAttribute                     AffectAttr;                                        // 0x0000(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfFirstLevelSingleAffectItem) == 0x000008, "Wrong alignment on FTgfFirstLevelSingleAffectItem");
static_assert(sizeof(FTgfFirstLevelSingleAffectItem) == 0x000040, "Wrong size on FTgfFirstLevelSingleAffectItem");
static_assert(offsetof(FTgfFirstLevelSingleAffectItem, AffectAttr) == 0x000000, "Member 'FTgfFirstLevelSingleAffectItem::AffectAttr' has a wrong offset!");
static_assert(offsetof(FTgfFirstLevelSingleAffectItem, Multiplier) == 0x000038, "Member 'FTgfFirstLevelSingleAffectItem::Multiplier' has a wrong offset!");

// ScriptStruct LyraGame.TgfFirstLevelAttrCfgItem
// 0x0048 (0x0048 - 0x0000)
struct FTgfFirstLevelAttrCfgItem final
{
public:
	struct FGameplayAttribute                     BaseAttr;                                          // 0x0000(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTgfFirstLevelSingleAffectItem> AffectItems;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfFirstLevelAttrCfgItem) == 0x000008, "Wrong alignment on FTgfFirstLevelAttrCfgItem");
static_assert(sizeof(FTgfFirstLevelAttrCfgItem) == 0x000048, "Wrong size on FTgfFirstLevelAttrCfgItem");
static_assert(offsetof(FTgfFirstLevelAttrCfgItem, BaseAttr) == 0x000000, "Member 'FTgfFirstLevelAttrCfgItem::BaseAttr' has a wrong offset!");
static_assert(offsetof(FTgfFirstLevelAttrCfgItem, AffectItems) == 0x000038, "Member 'FTgfFirstLevelAttrCfgItem::AffectItems' has a wrong offset!");

// ScriptStruct LyraGame.TgfCareerTalentConditionCfgItem
// 0x0040 (0x0040 - 0x0000)
struct FTgfCareerTalentConditionCfgItem final
{
public:
	struct FGameplayAttribute                     ConditionalAttr;                                   // 0x0000(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequiredValue;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfCareerTalentConditionCfgItem) == 0x000008, "Wrong alignment on FTgfCareerTalentConditionCfgItem");
static_assert(sizeof(FTgfCareerTalentConditionCfgItem) == 0x000040, "Wrong size on FTgfCareerTalentConditionCfgItem");
static_assert(offsetof(FTgfCareerTalentConditionCfgItem, ConditionalAttr) == 0x000000, "Member 'FTgfCareerTalentConditionCfgItem::ConditionalAttr' has a wrong offset!");
static_assert(offsetof(FTgfCareerTalentConditionCfgItem, RequiredValue) == 0x000038, "Member 'FTgfCareerTalentConditionCfgItem::RequiredValue' has a wrong offset!");
static_assert(offsetof(FTgfCareerTalentConditionCfgItem, Order) == 0x00003C, "Member 'FTgfCareerTalentConditionCfgItem::Order' has a wrong offset!");

// ScriptStruct LyraGame.TgfCareerTalentCfgItem
// 0x0080 (0x0080 - 0x0000)
struct FTgfCareerTalentCfgItem final
{
public:
	TArray<struct FTgfCareerTalentConditionCfgItem> FirstLevelAttrConditions;                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class ULyraAbilitySet*>                AbilitySets;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         TalentId;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreateRoleDesc;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfCareerTalentCfgItem) == 0x000008, "Wrong alignment on FTgfCareerTalentCfgItem");
static_assert(sizeof(FTgfCareerTalentCfgItem) == 0x000080, "Wrong size on FTgfCareerTalentCfgItem");
static_assert(offsetof(FTgfCareerTalentCfgItem, FirstLevelAttrConditions) == 0x000000, "Member 'FTgfCareerTalentCfgItem::FirstLevelAttrConditions' has a wrong offset!");
static_assert(offsetof(FTgfCareerTalentCfgItem, RequiredTags) == 0x000010, "Member 'FTgfCareerTalentCfgItem::RequiredTags' has a wrong offset!");
static_assert(offsetof(FTgfCareerTalentCfgItem, AbilitySets) == 0x000030, "Member 'FTgfCareerTalentCfgItem::AbilitySets' has a wrong offset!");
static_assert(offsetof(FTgfCareerTalentCfgItem, TalentId) == 0x000040, "Member 'FTgfCareerTalentCfgItem::TalentId' has a wrong offset!");
static_assert(offsetof(FTgfCareerTalentCfgItem, Name) == 0x000048, "Member 'FTgfCareerTalentCfgItem::Name' has a wrong offset!");
static_assert(offsetof(FTgfCareerTalentCfgItem, Desc) == 0x000058, "Member 'FTgfCareerTalentCfgItem::Desc' has a wrong offset!");
static_assert(offsetof(FTgfCareerTalentCfgItem, CreateRoleDesc) == 0x000068, "Member 'FTgfCareerTalentCfgItem::CreateRoleDesc' has a wrong offset!");
static_assert(offsetof(FTgfCareerTalentCfgItem, Icon) == 0x000078, "Member 'FTgfCareerTalentCfgItem::Icon' has a wrong offset!");

// ScriptStruct LyraGame.TgfCareerRaceCfgItem
// 0x0048 (0x0048 - 0x0000)
struct FTgfCareerRaceCfgItem final
{
public:
	ETgfActorCareer                               Career;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 Race;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULyraAbilitySet*>                DefaultAbilitySets;                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FTgfCareerTalentCfgItem>        Talents;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FGameplayAttribute>             ResPoints;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ULyraEquipmentDefinition>> TestEquipDefList;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfCareerRaceCfgItem) == 0x000008, "Wrong alignment on FTgfCareerRaceCfgItem");
static_assert(sizeof(FTgfCareerRaceCfgItem) == 0x000048, "Wrong size on FTgfCareerRaceCfgItem");
static_assert(offsetof(FTgfCareerRaceCfgItem, Career) == 0x000000, "Member 'FTgfCareerRaceCfgItem::Career' has a wrong offset!");
static_assert(offsetof(FTgfCareerRaceCfgItem, Race) == 0x000001, "Member 'FTgfCareerRaceCfgItem::Race' has a wrong offset!");
static_assert(offsetof(FTgfCareerRaceCfgItem, DefaultAbilitySets) == 0x000008, "Member 'FTgfCareerRaceCfgItem::DefaultAbilitySets' has a wrong offset!");
static_assert(offsetof(FTgfCareerRaceCfgItem, Talents) == 0x000018, "Member 'FTgfCareerRaceCfgItem::Talents' has a wrong offset!");
static_assert(offsetof(FTgfCareerRaceCfgItem, ResPoints) == 0x000028, "Member 'FTgfCareerRaceCfgItem::ResPoints' has a wrong offset!");
static_assert(offsetof(FTgfCareerRaceCfgItem, TestEquipDefList) == 0x000038, "Member 'FTgfCareerRaceCfgItem::TestEquipDefList' has a wrong offset!");

// ScriptStruct LyraGame.TgfMatchAbilityItem
// 0x0018 (0x0018 - 0x0000)
struct FTgfMatchAbilityItem final
{
public:
	ETgfMatchType                                 MatchType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULyraAbilitySet*>                AbilitySets;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfMatchAbilityItem) == 0x000008, "Wrong alignment on FTgfMatchAbilityItem");
static_assert(sizeof(FTgfMatchAbilityItem) == 0x000018, "Wrong size on FTgfMatchAbilityItem");
static_assert(offsetof(FTgfMatchAbilityItem, MatchType) == 0x000000, "Member 'FTgfMatchAbilityItem::MatchType' has a wrong offset!");
static_assert(offsetof(FTgfMatchAbilityItem, AbilitySets) == 0x000008, "Member 'FTgfMatchAbilityItem::AbilitySets' has a wrong offset!");

// ScriptStruct LyraGame.TgfMithrilAbilityItem
// 0x0008 (0x0008 - 0x0000)
struct FTgfMithrilAbilityItem final
{
public:
	class ULyraAbilitySet*                        AbilitySet;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfMithrilAbilityItem) == 0x000008, "Wrong alignment on FTgfMithrilAbilityItem");
static_assert(sizeof(FTgfMithrilAbilityItem) == 0x000008, "Wrong size on FTgfMithrilAbilityItem");
static_assert(offsetof(FTgfMithrilAbilityItem, AbilitySet) == 0x000000, "Member 'FTgfMithrilAbilityItem::AbilitySet' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_AttributeValue
// 0x0040 (0x0040 - 0x0000)
struct FLyraAbilitySet_AttributeValue final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraAbilitySet_AttributeValue) == 0x000008, "Wrong alignment on FLyraAbilitySet_AttributeValue");
static_assert(sizeof(FLyraAbilitySet_AttributeValue) == 0x000040, "Wrong size on FLyraAbilitySet_AttributeValue");
static_assert(offsetof(FLyraAbilitySet_AttributeValue, Attribute) == 0x000000, "Member 'FLyraAbilitySet_AttributeValue::Attribute' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_AttributeValue, Value) == 0x000038, "Member 'FLyraAbilitySet_AttributeValue::Value' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_LooseGameTag
// 0x0028 (0x0028 - 0x0000)
struct FLyraAbilitySet_LooseGameTag final
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          NeedReplicated;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilitySet_LooseGameTag) == 0x000008, "Wrong alignment on FLyraAbilitySet_LooseGameTag");
static_assert(sizeof(FLyraAbilitySet_LooseGameTag) == 0x000028, "Wrong size on FLyraAbilitySet_LooseGameTag");
static_assert(offsetof(FLyraAbilitySet_LooseGameTag, GameplayTags) == 0x000000, "Member 'FLyraAbilitySet_LooseGameTag::GameplayTags' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_LooseGameTag, NeedReplicated) == 0x000020, "Member 'FLyraAbilitySet_LooseGameTag::NeedReplicated' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_LooseGameTag, Count) == 0x000024, "Member 'FLyraAbilitySet_LooseGameTag::Count' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_GrantedHandles
// 0x0080 (0x0080 - 0x0000)
struct FLyraAbilitySet_GrantedHandles final
{
public:
	TArray<struct FGameplayAbilitySpecHandle>     AbilitySpecHandles;                                // 0x0000(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FActiveGameplayEffectHandle>    GameplayEffectHandles;                             // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UAttributeSet*>                  GrantedAttributeSets;                              // 0x0020(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FLyraAbilitySet_AttributeValue> GrantedAttributeValues;                            // 0x0030(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLyraAbilitySet_LooseGameTag>   GrantedGameTags;                                   // 0x0040(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTgfActiveGameplayAuraHandle>   GrantedAuras;                                      // 0x0050(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   GrantedDamagePartMonitor;                          // 0x0060(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   GrantedMovementMonitor;                            // 0x0070(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FLyraAbilitySet_GrantedHandles) == 0x000008, "Wrong alignment on FLyraAbilitySet_GrantedHandles");
static_assert(sizeof(FLyraAbilitySet_GrantedHandles) == 0x000080, "Wrong size on FLyraAbilitySet_GrantedHandles");
static_assert(offsetof(FLyraAbilitySet_GrantedHandles, AbilitySpecHandles) == 0x000000, "Member 'FLyraAbilitySet_GrantedHandles::AbilitySpecHandles' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_GrantedHandles, GameplayEffectHandles) == 0x000010, "Member 'FLyraAbilitySet_GrantedHandles::GameplayEffectHandles' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_GrantedHandles, GrantedAttributeSets) == 0x000020, "Member 'FLyraAbilitySet_GrantedHandles::GrantedAttributeSets' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_GrantedHandles, GrantedAttributeValues) == 0x000030, "Member 'FLyraAbilitySet_GrantedHandles::GrantedAttributeValues' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_GrantedHandles, GrantedGameTags) == 0x000040, "Member 'FLyraAbilitySet_GrantedHandles::GrantedGameTags' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_GrantedHandles, GrantedAuras) == 0x000050, "Member 'FLyraAbilitySet_GrantedHandles::GrantedAuras' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_GrantedHandles, GrantedDamagePartMonitor) == 0x000060, "Member 'FLyraAbilitySet_GrantedHandles::GrantedDamagePartMonitor' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_GrantedHandles, GrantedMovementMonitor) == 0x000070, "Member 'FLyraAbilitySet_GrantedHandles::GrantedMovementMonitor' has a wrong offset!");

// ScriptStruct LyraGame.TgfActorRuntimeTalent
// 0x0108 (0x0108 - 0x0000)
struct FTgfActorRuntimeTalent final
{
public:
	struct FTgfCareerTalentCfgItem                Config;                                            // 0x0000(0x0080)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLyraAbilitySet_GrantedHandles         GrantedHandles;                                    // 0x0088(0x0080)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfActorRuntimeTalent) == 0x000008, "Wrong alignment on FTgfActorRuntimeTalent");
static_assert(sizeof(FTgfActorRuntimeTalent) == 0x000108, "Wrong size on FTgfActorRuntimeTalent");
static_assert(offsetof(FTgfActorRuntimeTalent, Config) == 0x000000, "Member 'FTgfActorRuntimeTalent::Config' has a wrong offset!");
static_assert(offsetof(FTgfActorRuntimeTalent, IsEnabled) == 0x000080, "Member 'FTgfActorRuntimeTalent::IsEnabled' has a wrong offset!");
static_assert(offsetof(FTgfActorRuntimeTalent, GrantedHandles) == 0x000088, "Member 'FTgfActorRuntimeTalent::GrantedHandles' has a wrong offset!");

// ScriptStruct LyraGame.TgfExecutionModifierAttrValue
// 0x0040 (0x0040 - 0x0000)
struct FTgfExecutionModifierAttrValue final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfExecutionModifierAttrValue) == 0x000008, "Wrong alignment on FTgfExecutionModifierAttrValue");
static_assert(sizeof(FTgfExecutionModifierAttrValue) == 0x000040, "Wrong size on FTgfExecutionModifierAttrValue");
static_assert(offsetof(FTgfExecutionModifierAttrValue, Attribute) == 0x000000, "Member 'FTgfExecutionModifierAttrValue::Attribute' has a wrong offset!");
static_assert(offsetof(FTgfExecutionModifierAttrValue, Value) == 0x000038, "Member 'FTgfExecutionModifierAttrValue::Value' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_GameplayAbility
// 0x0030 (0x0030 - 0x0000)
struct FLyraAbilitySet_GameplayAbility final
{
public:
	TSubclassOf<class ULyraGameplayAbility>       Ability;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityLevel;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InputTagContainer;                                 // 0x0010(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilitySet_GameplayAbility) == 0x000008, "Wrong alignment on FLyraAbilitySet_GameplayAbility");
static_assert(sizeof(FLyraAbilitySet_GameplayAbility) == 0x000030, "Wrong size on FLyraAbilitySet_GameplayAbility");
static_assert(offsetof(FLyraAbilitySet_GameplayAbility, Ability) == 0x000000, "Member 'FLyraAbilitySet_GameplayAbility::Ability' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_GameplayAbility, AbilityLevel) == 0x000008, "Member 'FLyraAbilitySet_GameplayAbility::AbilityLevel' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_GameplayAbility, InputTagContainer) == 0x000010, "Member 'FLyraAbilitySet_GameplayAbility::InputTagContainer' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_GameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct FLyraAbilitySet_GameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectLevel;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraAbilitySet_GameplayEffect) == 0x000008, "Wrong alignment on FLyraAbilitySet_GameplayEffect");
static_assert(sizeof(FLyraAbilitySet_GameplayEffect) == 0x000010, "Wrong size on FLyraAbilitySet_GameplayEffect");
static_assert(offsetof(FLyraAbilitySet_GameplayEffect, GameplayEffect) == 0x000000, "Member 'FLyraAbilitySet_GameplayEffect::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_GameplayEffect, EffectLevel) == 0x000008, "Member 'FLyraAbilitySet_GameplayEffect::EffectLevel' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_AttributeSet
// 0x0008 (0x0008 - 0x0000)
struct FLyraAbilitySet_AttributeSet final
{
public:
	TSubclassOf<class UAttributeSet>              AttributeSet;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilitySet_AttributeSet) == 0x000008, "Wrong alignment on FLyraAbilitySet_AttributeSet");
static_assert(sizeof(FLyraAbilitySet_AttributeSet) == 0x000008, "Wrong size on FLyraAbilitySet_AttributeSet");
static_assert(offsetof(FLyraAbilitySet_AttributeSet, AttributeSet) == 0x000000, "Member 'FLyraAbilitySet_AttributeSet::AttributeSet' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_Aura
// 0x0008 (0x0008 - 0x0000)
struct FLyraAbilitySet_Aura final
{
public:
	TSubclassOf<class UTgfGameplayAura>           Aura;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilitySet_Aura) == 0x000008, "Wrong alignment on FLyraAbilitySet_Aura");
static_assert(sizeof(FLyraAbilitySet_Aura) == 0x000008, "Wrong size on FLyraAbilitySet_Aura");
static_assert(offsetof(FLyraAbilitySet_Aura, Aura) == 0x000000, "Member 'FLyraAbilitySet_Aura::Aura' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_DamagePartMonitor
// 0x0108 (0x0108 - 0x0000)
struct FLyraAbilitySet_DamagePartMonitor final
{
public:
	struct FTgfDamagePartMonitorConfig            Config;                                            // 0x0000(0x0108)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilitySet_DamagePartMonitor) == 0x000008, "Wrong alignment on FLyraAbilitySet_DamagePartMonitor");
static_assert(sizeof(FLyraAbilitySet_DamagePartMonitor) == 0x000108, "Wrong size on FLyraAbilitySet_DamagePartMonitor");
static_assert(offsetof(FLyraAbilitySet_DamagePartMonitor, Config) == 0x000000, "Member 'FLyraAbilitySet_DamagePartMonitor::Config' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_MovementMonitor
// 0x00E8 (0x00E8 - 0x0000)
struct FLyraAbilitySet_MovementMonitor final
{
public:
	struct FTgfMovementMonitorConfig              Config;                                            // 0x0000(0x00E8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilitySet_MovementMonitor) == 0x000008, "Wrong alignment on FLyraAbilitySet_MovementMonitor");
static_assert(sizeof(FLyraAbilitySet_MovementMonitor) == 0x0000E8, "Wrong size on FLyraAbilitySet_MovementMonitor");
static_assert(offsetof(FLyraAbilitySet_MovementMonitor, Config) == 0x000000, "Member 'FLyraAbilitySet_MovementMonitor::Config' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_DynamicAttributeValue
// 0x0048 (0x0048 - 0x0000)
struct FLyraAbilitySet_DynamicAttributeValue final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraAbilitySet_DynamicAttributeValue) == 0x000008, "Wrong alignment on FLyraAbilitySet_DynamicAttributeValue");
static_assert(sizeof(FLyraAbilitySet_DynamicAttributeValue) == 0x000048, "Wrong size on FLyraAbilitySet_DynamicAttributeValue");
static_assert(offsetof(FLyraAbilitySet_DynamicAttributeValue, Attribute) == 0x000000, "Member 'FLyraAbilitySet_DynamicAttributeValue::Attribute' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_DynamicAttributeValue, Value) == 0x000038, "Member 'FLyraAbilitySet_DynamicAttributeValue::Value' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_DynamicAttributeValue, MaxValue) == 0x00003C, "Member 'FLyraAbilitySet_DynamicAttributeValue::MaxValue' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_DynamicAttributeValue, MinValue) == 0x000040, "Member 'FLyraAbilitySet_DynamicAttributeValue::MinValue' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_DynamicGameplayTag
// 0x0014 (0x0014 - 0x0000)
struct FLyraAbilitySet_DynamicGameplayTag final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilitySet_DynamicGameplayTag) == 0x000004, "Wrong alignment on FLyraAbilitySet_DynamicGameplayTag");
static_assert(sizeof(FLyraAbilitySet_DynamicGameplayTag) == 0x000014, "Wrong size on FLyraAbilitySet_DynamicGameplayTag");
static_assert(offsetof(FLyraAbilitySet_DynamicGameplayTag, GameplayTag) == 0x000000, "Member 'FLyraAbilitySet_DynamicGameplayTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_DynamicGameplayTag, Value) == 0x000008, "Member 'FLyraAbilitySet_DynamicGameplayTag::Value' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_DynamicGameplayTag, MaxValue) == 0x00000C, "Member 'FLyraAbilitySet_DynamicGameplayTag::MaxValue' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_DynamicGameplayTag, MinValue) == 0x000010, "Member 'FLyraAbilitySet_DynamicGameplayTag::MinValue' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilitySet_DynamicAbilityLevel
// 0x0010 (0x0010 - 0x0000)
struct FLyraAbilitySet_DynamicAbilityLevel final
{
public:
	bool                                          UseOverrideLevel;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinValue;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilitySet_DynamicAbilityLevel) == 0x000004, "Wrong alignment on FLyraAbilitySet_DynamicAbilityLevel");
static_assert(sizeof(FLyraAbilitySet_DynamicAbilityLevel) == 0x000010, "Wrong size on FLyraAbilitySet_DynamicAbilityLevel");
static_assert(offsetof(FLyraAbilitySet_DynamicAbilityLevel, UseOverrideLevel) == 0x000000, "Member 'FLyraAbilitySet_DynamicAbilityLevel::UseOverrideLevel' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_DynamicAbilityLevel, Value) == 0x000004, "Member 'FLyraAbilitySet_DynamicAbilityLevel::Value' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_DynamicAbilityLevel, MaxValue) == 0x000008, "Member 'FLyraAbilitySet_DynamicAbilityLevel::MaxValue' has a wrong offset!");
static_assert(offsetof(FLyraAbilitySet_DynamicAbilityLevel, MinValue) == 0x00000C, "Member 'FLyraAbilitySet_DynamicAbilityLevel::MinValue' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilityTagRelationship
// 0x0088 (0x0088 - 0x0000)
struct FLyraAbilityTagRelationship final
{
public:
	struct FGameplayTag                           AbilityTag;                                        // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityTagsToBlock;                                // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityTagsToCancel;                               // 0x0028(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivationRequiredTags;                            // 0x0048(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivationBlockedTags;                             // 0x0068(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilityTagRelationship) == 0x000008, "Wrong alignment on FLyraAbilityTagRelationship");
static_assert(sizeof(FLyraAbilityTagRelationship) == 0x000088, "Wrong size on FLyraAbilityTagRelationship");
static_assert(offsetof(FLyraAbilityTagRelationship, AbilityTag) == 0x000000, "Member 'FLyraAbilityTagRelationship::AbilityTag' has a wrong offset!");
static_assert(offsetof(FLyraAbilityTagRelationship, AbilityTagsToBlock) == 0x000008, "Member 'FLyraAbilityTagRelationship::AbilityTagsToBlock' has a wrong offset!");
static_assert(offsetof(FLyraAbilityTagRelationship, AbilityTagsToCancel) == 0x000028, "Member 'FLyraAbilityTagRelationship::AbilityTagsToCancel' has a wrong offset!");
static_assert(offsetof(FLyraAbilityTagRelationship, ActivationRequiredTags) == 0x000048, "Member 'FLyraAbilityTagRelationship::ActivationRequiredTags' has a wrong offset!");
static_assert(offsetof(FLyraAbilityTagRelationship, ActivationBlockedTags) == 0x000068, "Member 'FLyraAbilityTagRelationship::ActivationBlockedTags' has a wrong offset!");

// ScriptStruct LyraGame.LyraGameplayAbilityTargetData_SingleTargetHit
// 0x0008 (0x0100 - 0x00F8)
struct FLyraGameplayAbilityTargetData_SingleTargetHit final : public FGameplayAbilityTargetData_SingleTargetHit
{
public:
	int32                                         CartridgeID;                                       // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraGameplayAbilityTargetData_SingleTargetHit) == 0x000008, "Wrong alignment on FLyraGameplayAbilityTargetData_SingleTargetHit");
static_assert(sizeof(FLyraGameplayAbilityTargetData_SingleTargetHit) == 0x000100, "Wrong size on FLyraGameplayAbilityTargetData_SingleTargetHit");
static_assert(offsetof(FLyraGameplayAbilityTargetData_SingleTargetHit, CartridgeID) == 0x0000F8, "Member 'FLyraGameplayAbilityTargetData_SingleTargetHit::CartridgeID' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayEffectExtraParam
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTgfGameplayEffectExtraParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitValue;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalWeight;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TangentWeight;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalRandomValue;                               // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfGameplayEffectExtraParam) == 0x000008, "Wrong alignment on FTgfGameplayEffectExtraParam");
static_assert(sizeof(FTgfGameplayEffectExtraParam) == 0x000018, "Wrong size on FTgfGameplayEffectExtraParam");
static_assert(offsetof(FTgfGameplayEffectExtraParam, HitValue) == 0x000008, "Member 'FTgfGameplayEffectExtraParam::HitValue' has a wrong offset!");
static_assert(offsetof(FTgfGameplayEffectExtraParam, NormalWeight) == 0x00000C, "Member 'FTgfGameplayEffectExtraParam::NormalWeight' has a wrong offset!");
static_assert(offsetof(FTgfGameplayEffectExtraParam, TangentWeight) == 0x000010, "Member 'FTgfGameplayEffectExtraParam::TangentWeight' has a wrong offset!");
static_assert(offsetof(FTgfGameplayEffectExtraParam, CriticalRandomValue) == 0x000014, "Member 'FTgfGameplayEffectExtraParam::CriticalRandomValue' has a wrong offset!");

// ScriptStruct LyraGame.LyraGameplayEffectContext
// 0x0020 (0x00B0 - 0x0090)
struct FLyraGameplayEffectContext final : public FGameplayEffectContext
{
public:
	int32                                         CartridgeID;                                       // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x14];                                      // 0x0094(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UObject>                 AbilitySourceObject;                               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FLyraGameplayEffectContext) == 0x000008, "Wrong alignment on FLyraGameplayEffectContext");
static_assert(sizeof(FLyraGameplayEffectContext) == 0x0000B0, "Wrong size on FLyraGameplayEffectContext");
static_assert(offsetof(FLyraGameplayEffectContext, CartridgeID) == 0x000090, "Member 'FLyraGameplayEffectContext::CartridgeID' has a wrong offset!");
static_assert(offsetof(FLyraGameplayEffectContext, AbilitySourceObject) == 0x0000A8, "Member 'FLyraGameplayEffectContext::AbilitySourceObject' has a wrong offset!");

// ScriptStruct LyraGame.GlobalAppliedAbilityList
// 0x0050 (0x0050 - 0x0000)
struct FGlobalAppliedAbilityList final
{
public:
	TMap<class ULyraAbilitySystemComponent*, struct FGameplayAbilitySpecHandle> Handles;                                           // 0x0000(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalAppliedAbilityList) == 0x000008, "Wrong alignment on FGlobalAppliedAbilityList");
static_assert(sizeof(FGlobalAppliedAbilityList) == 0x000050, "Wrong size on FGlobalAppliedAbilityList");
static_assert(offsetof(FGlobalAppliedAbilityList, Handles) == 0x000000, "Member 'FGlobalAppliedAbilityList::Handles' has a wrong offset!");

// ScriptStruct LyraGame.TgfDashTrackingSettings
// 0x0014 (0x0014 - 0x0000)
struct FTgfDashTrackingSettings final
{
public:
	float                                         TrackingDuration;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTurningSpeed;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTurningAngle;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopDist;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfTrackingDashType                          TrackingDeathSetting;                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfDashTrackingSettings) == 0x000004, "Wrong alignment on FTgfDashTrackingSettings");
static_assert(sizeof(FTgfDashTrackingSettings) == 0x000014, "Wrong size on FTgfDashTrackingSettings");
static_assert(offsetof(FTgfDashTrackingSettings, TrackingDuration) == 0x000000, "Member 'FTgfDashTrackingSettings::TrackingDuration' has a wrong offset!");
static_assert(offsetof(FTgfDashTrackingSettings, MaxTurningSpeed) == 0x000004, "Member 'FTgfDashTrackingSettings::MaxTurningSpeed' has a wrong offset!");
static_assert(offsetof(FTgfDashTrackingSettings, MaxTurningAngle) == 0x000008, "Member 'FTgfDashTrackingSettings::MaxTurningAngle' has a wrong offset!");
static_assert(offsetof(FTgfDashTrackingSettings, StopDist) == 0x00000C, "Member 'FTgfDashTrackingSettings::StopDist' has a wrong offset!");
static_assert(offsetof(FTgfDashTrackingSettings, TrackingDeathSetting) == 0x000010, "Member 'FTgfDashTrackingSettings::TrackingDeathSetting' has a wrong offset!");

// ScriptStruct LyraGame.TgfDashTrackingHitSettings
// 0x0008 (0x0008 - 0x0000)
struct FTgfDashTrackingHitSettings final
{
public:
	ETgfTrackingDashType                          TrackingHitType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxHitCount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfDashTrackingHitSettings) == 0x000004, "Wrong alignment on FTgfDashTrackingHitSettings");
static_assert(sizeof(FTgfDashTrackingHitSettings) == 0x000008, "Wrong size on FTgfDashTrackingHitSettings");
static_assert(offsetof(FTgfDashTrackingHitSettings, TrackingHitType) == 0x000000, "Member 'FTgfDashTrackingHitSettings::TrackingHitType' has a wrong offset!");
static_assert(offsetof(FTgfDashTrackingHitSettings, MaxHitCount) == 0x000004, "Member 'FTgfDashTrackingHitSettings::MaxHitCount' has a wrong offset!");

// ScriptStruct LyraGame.FootLandHitInfo
// 0x0040 (0x0040 - 0x0000)
struct FFootLandHitInfo final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFootLandHitInfo) == 0x000008, "Wrong alignment on FFootLandHitInfo");
static_assert(sizeof(FFootLandHitInfo) == 0x000040, "Wrong size on FFootLandHitInfo");
static_assert(offsetof(FFootLandHitInfo, bHit) == 0x000000, "Member 'FFootLandHitInfo::bHit' has a wrong offset!");
static_assert(offsetof(FFootLandHitInfo, Location) == 0x000008, "Member 'FFootLandHitInfo::Location' has a wrong offset!");
static_assert(offsetof(FFootLandHitInfo, Normal) == 0x000020, "Member 'FFootLandHitInfo::Normal' has a wrong offset!");
static_assert(offsetof(FFootLandHitInfo, Distance) == 0x000038, "Member 'FFootLandHitInfo::Distance' has a wrong offset!");

// ScriptStruct LyraGame.LyraPlayRateModify
// 0x0058 (0x0058 - 0x0000)
struct FLyraPlayRateModify final
{
public:
	float                                         Basic;                                             // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ELyraPlayRateModifyKey, float>           Modifies;                                          // 0x0008(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraPlayRateModify) == 0x000008, "Wrong alignment on FLyraPlayRateModify");
static_assert(sizeof(FLyraPlayRateModify) == 0x000058, "Wrong size on FLyraPlayRateModify");
static_assert(offsetof(FLyraPlayRateModify, Basic) == 0x000000, "Member 'FLyraPlayRateModify::Basic' has a wrong offset!");
static_assert(offsetof(FLyraPlayRateModify, Modifies) == 0x000008, "Member 'FLyraPlayRateModify::Modifies' has a wrong offset!");

// ScriptStruct LyraGame.LyraAudioSubmixEffectsChain
// 0x0018 (0x0018 - 0x0000)
struct FLyraAudioSubmixEffectsChain final
{
public:
	class USoundSubmix*                           Submix;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundEffectSubmixPreset*>       SubmixEffectChain;                                 // 0x0008(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAudioSubmixEffectsChain) == 0x000008, "Wrong alignment on FLyraAudioSubmixEffectsChain");
static_assert(sizeof(FLyraAudioSubmixEffectsChain) == 0x000018, "Wrong size on FLyraAudioSubmixEffectsChain");
static_assert(offsetof(FLyraAudioSubmixEffectsChain, Submix) == 0x000000, "Member 'FLyraAudioSubmixEffectsChain::Submix' has a wrong offset!");
static_assert(offsetof(FLyraAudioSubmixEffectsChain, SubmixEffectChain) == 0x000008, "Member 'FLyraAudioSubmixEffectsChain::SubmixEffectChain' has a wrong offset!");

// ScriptStruct LyraGame.LyraSubmixEffectChainMap
// 0x0040 (0x0040 - 0x0000)
struct FLyraSubmixEffectChainMap final
{
public:
	TSoftObjectPtr<class USoundSubmix>            Submix;                                            // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USoundEffectSubmixPreset>> SubmixEffectChain;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraSubmixEffectChainMap) == 0x000008, "Wrong alignment on FLyraSubmixEffectChainMap");
static_assert(sizeof(FLyraSubmixEffectChainMap) == 0x000040, "Wrong size on FLyraSubmixEffectChainMap");
static_assert(offsetof(FLyraSubmixEffectChainMap, Submix) == 0x000000, "Member 'FLyraSubmixEffectChainMap::Submix' has a wrong offset!");
static_assert(offsetof(FLyraSubmixEffectChainMap, SubmixEffectChain) == 0x000030, "Member 'FLyraSubmixEffectChainMap::SubmixEffectChain' has a wrong offset!");

// ScriptStruct LyraGame.LyraReplicatedAcceleration
// 0x0003 (0x0003 - 0x0000)
struct FLyraReplicatedAcceleration final
{
public:
	uint8                                         AccelXYRadians;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AccelXYMagnitude;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          AccelZ;                                            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraReplicatedAcceleration) == 0x000001, "Wrong alignment on FLyraReplicatedAcceleration");
static_assert(sizeof(FLyraReplicatedAcceleration) == 0x000003, "Wrong size on FLyraReplicatedAcceleration");
static_assert(offsetof(FLyraReplicatedAcceleration, AccelXYRadians) == 0x000000, "Member 'FLyraReplicatedAcceleration::AccelXYRadians' has a wrong offset!");
static_assert(offsetof(FLyraReplicatedAcceleration, AccelXYMagnitude) == 0x000001, "Member 'FLyraReplicatedAcceleration::AccelXYMagnitude' has a wrong offset!");
static_assert(offsetof(FLyraReplicatedAcceleration, AccelZ) == 0x000002, "Member 'FLyraReplicatedAcceleration::AccelZ' has a wrong offset!");

// ScriptStruct LyraGame.SharedRepMovement
// 0x0078 (0x0078 - 0x0000)
struct FSharedRepMovement final
{
public:
	struct FRepMovement                           RepMovement;                                       // 0x0000(0x0070)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RepTimeStamp;                                      // 0x0070(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepMovementMode;                                   // 0x0074(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProxyIsJumpForceApplied;                          // 0x0075(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCrouched;                                       // 0x0076(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSharedRepMovement) == 0x000008, "Wrong alignment on FSharedRepMovement");
static_assert(sizeof(FSharedRepMovement) == 0x000078, "Wrong size on FSharedRepMovement");
static_assert(offsetof(FSharedRepMovement, RepMovement) == 0x000000, "Member 'FSharedRepMovement::RepMovement' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, RepTimeStamp) == 0x000070, "Member 'FSharedRepMovement::RepTimeStamp' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, RepMovementMode) == 0x000074, "Member 'FSharedRepMovement::RepMovementMode' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, bProxyIsJumpForceApplied) == 0x000075, "Member 'FSharedRepMovement::bProxyIsJumpForceApplied' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, bIsCrouched) == 0x000076, "Member 'FSharedRepMovement::bIsCrouched' has a wrong offset!");

// ScriptStruct LyraGame.LyraCharacterGroundInfo
// 0x00F8 (0x00F8 - 0x0000)
struct FLyraCharacterGroundInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             GroundHitResult;                                   // 0x0008(0x00E8)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         GroundDistance;                                    // 0x00F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraCharacterGroundInfo) == 0x000008, "Wrong alignment on FLyraCharacterGroundInfo");
static_assert(sizeof(FLyraCharacterGroundInfo) == 0x0000F8, "Wrong size on FLyraCharacterGroundInfo");
static_assert(offsetof(FLyraCharacterGroundInfo, GroundHitResult) == 0x000008, "Member 'FLyraCharacterGroundInfo::GroundHitResult' has a wrong offset!");
static_assert(offsetof(FLyraCharacterGroundInfo, GroundDistance) == 0x0000F0, "Member 'FLyraCharacterGroundInfo::GroundDistance' has a wrong offset!");

// ScriptStruct LyraGame.MovingScaleParams
// 0x0010 (0x0010 - 0x0000)
struct FMovingScaleParams final
{
public:
	float                                         MoveForwardScale;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRightLeftScale;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackwardScale;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceBackScale;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovingScaleParams) == 0x000004, "Wrong alignment on FMovingScaleParams");
static_assert(sizeof(FMovingScaleParams) == 0x000010, "Wrong size on FMovingScaleParams");
static_assert(offsetof(FMovingScaleParams, MoveForwardScale) == 0x000000, "Member 'FMovingScaleParams::MoveForwardScale' has a wrong offset!");
static_assert(offsetof(FMovingScaleParams, MoveRightLeftScale) == 0x000004, "Member 'FMovingScaleParams::MoveRightLeftScale' has a wrong offset!");
static_assert(offsetof(FMovingScaleParams, MoveBackwardScale) == 0x000008, "Member 'FMovingScaleParams::MoveBackwardScale' has a wrong offset!");
static_assert(offsetof(FMovingScaleParams, bForceBackScale) == 0x00000C, "Member 'FMovingScaleParams::bForceBackScale' has a wrong offset!");

// ScriptStruct LyraGame.MovingScaleContainer
// 0x0060 (0x0060 - 0x0000)
struct FMovingScaleContainer final
{
public:
	TMap<struct FGameplayTag, struct FMovingScaleParams> MovingScales;                                      // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMovingScaleParams                     DefaultParams;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovingScaleContainer) == 0x000008, "Wrong alignment on FMovingScaleContainer");
static_assert(sizeof(FMovingScaleContainer) == 0x000060, "Wrong size on FMovingScaleContainer");
static_assert(offsetof(FMovingScaleContainer, MovingScales) == 0x000000, "Member 'FMovingScaleContainer::MovingScales' has a wrong offset!");
static_assert(offsetof(FMovingScaleContainer, DefaultParams) == 0x000050, "Member 'FMovingScaleContainer::DefaultParams' has a wrong offset!");

// ScriptStruct LyraGame.LyraCameraSelection
// 0x0028 (0x0028 - 0x0000)
struct FLyraCameraSelection final
{
public:
	TSubclassOf<class ULyraCameraMode>            CameraMode;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraCameraSelection) == 0x000008, "Wrong alignment on FLyraCameraSelection");
static_assert(sizeof(FLyraCameraSelection) == 0x000028, "Wrong size on FLyraCameraSelection");
static_assert(offsetof(FLyraCameraSelection, CameraMode) == 0x000000, "Member 'FLyraCameraSelection::CameraMode' has a wrong offset!");
static_assert(offsetof(FLyraCameraSelection, RequiredTags) == 0x000008, "Member 'FLyraCameraSelection::RequiredTags' has a wrong offset!");

// ScriptStruct LyraGame.TgfAttributeChangeMessage
// 0x0050 (0x0050 - 0x0000)
struct FTgfAttributeChangeMessage final
{
public:
	class ULyraAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Character;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0010(0x0038)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfAttributeChangeMessage) == 0x000008, "Wrong alignment on FTgfAttributeChangeMessage");
static_assert(sizeof(FTgfAttributeChangeMessage) == 0x000050, "Wrong size on FTgfAttributeChangeMessage");
static_assert(offsetof(FTgfAttributeChangeMessage, AbilitySystemComponent) == 0x000000, "Member 'FTgfAttributeChangeMessage::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(FTgfAttributeChangeMessage, Character) == 0x000008, "Member 'FTgfAttributeChangeMessage::Character' has a wrong offset!");
static_assert(offsetof(FTgfAttributeChangeMessage, Attribute) == 0x000010, "Member 'FTgfAttributeChangeMessage::Attribute' has a wrong offset!");
static_assert(offsetof(FTgfAttributeChangeMessage, NewValue) == 0x000048, "Member 'FTgfAttributeChangeMessage::NewValue' has a wrong offset!");
static_assert(offsetof(FTgfAttributeChangeMessage, OldValue) == 0x00004C, "Member 'FTgfAttributeChangeMessage::OldValue' has a wrong offset!");

// ScriptStruct LyraGame.TgfGameplayTagChangeMessage
// 0x0020 (0x0020 - 0x0000)
struct FTgfGameplayTagChangeMessage final
{
public:
	class ULyraAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Character;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfGameplayTagChangeMessage) == 0x000008, "Wrong alignment on FTgfGameplayTagChangeMessage");
static_assert(sizeof(FTgfGameplayTagChangeMessage) == 0x000020, "Wrong size on FTgfGameplayTagChangeMessage");
static_assert(offsetof(FTgfGameplayTagChangeMessage, AbilitySystemComponent) == 0x000000, "Member 'FTgfGameplayTagChangeMessage::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(FTgfGameplayTagChangeMessage, Character) == 0x000008, "Member 'FTgfGameplayTagChangeMessage::Character' has a wrong offset!");
static_assert(offsetof(FTgfGameplayTagChangeMessage, GameplayTag) == 0x000010, "Member 'FTgfGameplayTagChangeMessage::GameplayTag' has a wrong offset!");
static_assert(offsetof(FTgfGameplayTagChangeMessage, Count) == 0x000018, "Member 'FTgfGameplayTagChangeMessage::Count' has a wrong offset!");

// ScriptStruct LyraGame.TgfDeathStateInfo
// 0x00F8 (0x00F8 - 0x0000)
struct FTgfDeathStateInfo final
{
public:
	ETgfDeathState                                DeathState;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimConfigDirection                          DeathDirection;                                    // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0008(0x00E8)(BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         Killer;                                            // 0x00F0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfDeathStateInfo) == 0x000008, "Wrong alignment on FTgfDeathStateInfo");
static_assert(sizeof(FTgfDeathStateInfo) == 0x0000F8, "Wrong size on FTgfDeathStateInfo");
static_assert(offsetof(FTgfDeathStateInfo, DeathState) == 0x000000, "Member 'FTgfDeathStateInfo::DeathState' has a wrong offset!");
static_assert(offsetof(FTgfDeathStateInfo, DeathDirection) == 0x000001, "Member 'FTgfDeathStateInfo::DeathDirection' has a wrong offset!");
static_assert(offsetof(FTgfDeathStateInfo, HitResult) == 0x000008, "Member 'FTgfDeathStateInfo::HitResult' has a wrong offset!");
static_assert(offsetof(FTgfDeathStateInfo, Killer) == 0x0000F0, "Member 'FTgfDeathStateInfo::Killer' has a wrong offset!");

// ScriptStruct LyraGame.TgfResetInitAttrArgs
// 0x0010 (0x0010 - 0x0000)
struct FTgfResetInitAttrArgs final
{
public:
	float                                         Health;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magic;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoulEnergy;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NaturalEnergy;                                     // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfResetInitAttrArgs) == 0x000004, "Wrong alignment on FTgfResetInitAttrArgs");
static_assert(sizeof(FTgfResetInitAttrArgs) == 0x000010, "Wrong size on FTgfResetInitAttrArgs");
static_assert(offsetof(FTgfResetInitAttrArgs, Health) == 0x000000, "Member 'FTgfResetInitAttrArgs::Health' has a wrong offset!");
static_assert(offsetof(FTgfResetInitAttrArgs, Magic) == 0x000004, "Member 'FTgfResetInitAttrArgs::Magic' has a wrong offset!");
static_assert(offsetof(FTgfResetInitAttrArgs, SoulEnergy) == 0x000008, "Member 'FTgfResetInitAttrArgs::SoulEnergy' has a wrong offset!");
static_assert(offsetof(FTgfResetInitAttrArgs, NaturalEnergy) == 0x00000C, "Member 'FTgfResetInitAttrArgs::NaturalEnergy' has a wrong offset!");

// ScriptStruct LyraGame.AttrCommonEventStackFrame
// 0x0020 (0x0020 - 0x0000)
struct FAttrCommonEventStackFrame final
{
public:
	class UGameplayEffect*                        Def;                                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttrCommonEventStackFrame) == 0x000008, "Wrong alignment on FAttrCommonEventStackFrame");
static_assert(sizeof(FAttrCommonEventStackFrame) == 0x000020, "Wrong size on FAttrCommonEventStackFrame");
static_assert(offsetof(FAttrCommonEventStackFrame, Def) == 0x000000, "Member 'FAttrCommonEventStackFrame::Def' has a wrong offset!");
static_assert(offsetof(FAttrCommonEventStackFrame, EventTag) == 0x000008, "Member 'FAttrCommonEventStackFrame::EventTag' has a wrong offset!");
static_assert(offsetof(FAttrCommonEventStackFrame, Instigator) == 0x000010, "Member 'FAttrCommonEventStackFrame::Instigator' has a wrong offset!");
static_assert(offsetof(FAttrCommonEventStackFrame, Target) == 0x000018, "Member 'FAttrCommonEventStackFrame::Target' has a wrong offset!");

// ScriptStruct LyraGame.LyraControllerCharacterPartEntry
// 0x0048 (0x0048 - 0x0000)
struct FLyraControllerCharacterPartEntry final
{
public:
	struct FLyraCharacterPart                     Part;                                              // 0x0000(0x0040)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraControllerCharacterPartEntry) == 0x000008, "Wrong alignment on FLyraControllerCharacterPartEntry");
static_assert(sizeof(FLyraControllerCharacterPartEntry) == 0x000048, "Wrong size on FLyraControllerCharacterPartEntry");
static_assert(offsetof(FLyraControllerCharacterPartEntry, Part) == 0x000000, "Member 'FLyraControllerCharacterPartEntry::Part' has a wrong offset!");

// ScriptStruct LyraGame.LyraAnimLayerSelectionEntry
// 0x0028 (0x0028 - 0x0000)
struct FLyraAnimLayerSelectionEntry final
{
public:
	TSubclassOf<class UAnimInstance>              Layer;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAnimLayerSelectionEntry) == 0x000008, "Wrong alignment on FLyraAnimLayerSelectionEntry");
static_assert(sizeof(FLyraAnimLayerSelectionEntry) == 0x000028, "Wrong size on FLyraAnimLayerSelectionEntry");
static_assert(offsetof(FLyraAnimLayerSelectionEntry, Layer) == 0x000000, "Member 'FLyraAnimLayerSelectionEntry::Layer' has a wrong offset!");
static_assert(offsetof(FLyraAnimLayerSelectionEntry, RequiredTags) == 0x000008, "Member 'FLyraAnimLayerSelectionEntry::RequiredTags' has a wrong offset!");

// ScriptStruct LyraGame.LyraAnimLayerSelectionSet
// 0x0018 (0x0018 - 0x0000)
struct FLyraAnimLayerSelectionSet final
{
public:
	TArray<struct FLyraAnimLayerSelectionEntry>   LayerRules;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              DefaultLayer;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAnimLayerSelectionSet) == 0x000008, "Wrong alignment on FLyraAnimLayerSelectionSet");
static_assert(sizeof(FLyraAnimLayerSelectionSet) == 0x000018, "Wrong size on FLyraAnimLayerSelectionSet");
static_assert(offsetof(FLyraAnimLayerSelectionSet, LayerRules) == 0x000000, "Member 'FLyraAnimLayerSelectionSet::LayerRules' has a wrong offset!");
static_assert(offsetof(FLyraAnimLayerSelectionSet, DefaultLayer) == 0x000010, "Member 'FLyraAnimLayerSelectionSet::DefaultLayer' has a wrong offset!");

// ScriptStruct LyraGame.TgfAvatarMeshPart
// 0x0010 (0x0010 - 0x0000)
struct FTgfAvatarMeshPart final
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysicsMaterial;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfAvatarMeshPart) == 0x000008, "Wrong alignment on FTgfAvatarMeshPart");
static_assert(sizeof(FTgfAvatarMeshPart) == 0x000010, "Wrong size on FTgfAvatarMeshPart");
static_assert(offsetof(FTgfAvatarMeshPart, Mesh) == 0x000000, "Member 'FTgfAvatarMeshPart::Mesh' has a wrong offset!");
static_assert(offsetof(FTgfAvatarMeshPart, PhysicsMaterial) == 0x000008, "Member 'FTgfAvatarMeshPart::PhysicsMaterial' has a wrong offset!");

// ScriptStruct LyraGame.TgfAvatarMeshSelectionEntry
// 0x0070 (0x0070 - 0x0000)
struct FTgfAvatarMeshSelectionEntry final
{
public:
	TMap<ETgfCharaPart, struct FTgfAvatarMeshPart> MeshParts;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfAvatarMeshSelectionEntry) == 0x000008, "Wrong alignment on FTgfAvatarMeshSelectionEntry");
static_assert(sizeof(FTgfAvatarMeshSelectionEntry) == 0x000070, "Wrong size on FTgfAvatarMeshSelectionEntry");
static_assert(offsetof(FTgfAvatarMeshSelectionEntry, MeshParts) == 0x000000, "Member 'FTgfAvatarMeshSelectionEntry::MeshParts' has a wrong offset!");
static_assert(offsetof(FTgfAvatarMeshSelectionEntry, RequiredTags) == 0x000050, "Member 'FTgfAvatarMeshSelectionEntry::RequiredTags' has a wrong offset!");

// ScriptStruct LyraGame.TgfAvatarMeshSelectionSet
// 0x0060 (0x0060 - 0x0000)
struct FTgfAvatarMeshSelectionSet final
{
public:
	TArray<struct FTgfAvatarMeshSelectionEntry>   MeshRules;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<ETgfCharaPart, struct FTgfAvatarMeshPart> DefaultMesh;                                       // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfAvatarMeshSelectionSet) == 0x000008, "Wrong alignment on FTgfAvatarMeshSelectionSet");
static_assert(sizeof(FTgfAvatarMeshSelectionSet) == 0x000060, "Wrong size on FTgfAvatarMeshSelectionSet");
static_assert(offsetof(FTgfAvatarMeshSelectionSet, MeshRules) == 0x000000, "Member 'FTgfAvatarMeshSelectionSet::MeshRules' has a wrong offset!");
static_assert(offsetof(FTgfAvatarMeshSelectionSet, DefaultMesh) == 0x000010, "Member 'FTgfAvatarMeshSelectionSet::DefaultMesh' has a wrong offset!");

// ScriptStruct LyraGame.TgfWeaponEquipMontagesEntry
// 0x0030 (0x0030 - 0x0000)
struct FTgfWeaponEquipMontagesEntry final
{
public:
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                           EquipMontage;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           UnEquipMontage;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfWeaponEquipMontagesEntry) == 0x000008, "Wrong alignment on FTgfWeaponEquipMontagesEntry");
static_assert(sizeof(FTgfWeaponEquipMontagesEntry) == 0x000030, "Wrong size on FTgfWeaponEquipMontagesEntry");
static_assert(offsetof(FTgfWeaponEquipMontagesEntry, RequiredTags) == 0x000000, "Member 'FTgfWeaponEquipMontagesEntry::RequiredTags' has a wrong offset!");
static_assert(offsetof(FTgfWeaponEquipMontagesEntry, EquipMontage) == 0x000020, "Member 'FTgfWeaponEquipMontagesEntry::EquipMontage' has a wrong offset!");
static_assert(offsetof(FTgfWeaponEquipMontagesEntry, UnEquipMontage) == 0x000028, "Member 'FTgfWeaponEquipMontagesEntry::UnEquipMontage' has a wrong offset!");

// ScriptStruct LyraGame.TgfWeaponEquipMontagesSet
// 0x0020 (0x0020 - 0x0000)
struct FTgfWeaponEquipMontagesSet final
{
public:
	TArray<struct FTgfWeaponEquipMontagesEntry>   Entries;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                           EquipMontageDefault;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           UnEquipMontageDefault;                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfWeaponEquipMontagesSet) == 0x000008, "Wrong alignment on FTgfWeaponEquipMontagesSet");
static_assert(sizeof(FTgfWeaponEquipMontagesSet) == 0x000020, "Wrong size on FTgfWeaponEquipMontagesSet");
static_assert(offsetof(FTgfWeaponEquipMontagesSet, Entries) == 0x000000, "Member 'FTgfWeaponEquipMontagesSet::Entries' has a wrong offset!");
static_assert(offsetof(FTgfWeaponEquipMontagesSet, EquipMontageDefault) == 0x000010, "Member 'FTgfWeaponEquipMontagesSet::EquipMontageDefault' has a wrong offset!");
static_assert(offsetof(FTgfWeaponEquipMontagesSet, UnEquipMontageDefault) == 0x000018, "Member 'FTgfWeaponEquipMontagesSet::UnEquipMontageDefault' has a wrong offset!");

// ScriptStruct LyraGame.TgfWeaponInspectionMontagesEntry
// 0x0028 (0x0028 - 0x0000)
struct FTgfWeaponInspectionMontagesEntry final
{
public:
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                           InspectionMontage;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfWeaponInspectionMontagesEntry) == 0x000008, "Wrong alignment on FTgfWeaponInspectionMontagesEntry");
static_assert(sizeof(FTgfWeaponInspectionMontagesEntry) == 0x000028, "Wrong size on FTgfWeaponInspectionMontagesEntry");
static_assert(offsetof(FTgfWeaponInspectionMontagesEntry, RequiredTags) == 0x000000, "Member 'FTgfWeaponInspectionMontagesEntry::RequiredTags' has a wrong offset!");
static_assert(offsetof(FTgfWeaponInspectionMontagesEntry, InspectionMontage) == 0x000020, "Member 'FTgfWeaponInspectionMontagesEntry::InspectionMontage' has a wrong offset!");

// ScriptStruct LyraGame.TgfWeaponInspectionMontagesSet
// 0x0018 (0x0018 - 0x0000)
struct FTgfWeaponInspectionMontagesSet final
{
public:
	TArray<struct FTgfWeaponInspectionMontagesEntry> Entries;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                           InspectionMontageDefault;                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfWeaponInspectionMontagesSet) == 0x000008, "Wrong alignment on FTgfWeaponInspectionMontagesSet");
static_assert(sizeof(FTgfWeaponInspectionMontagesSet) == 0x000018, "Wrong size on FTgfWeaponInspectionMontagesSet");
static_assert(offsetof(FTgfWeaponInspectionMontagesSet, Entries) == 0x000000, "Member 'FTgfWeaponInspectionMontagesSet::Entries' has a wrong offset!");
static_assert(offsetof(FTgfWeaponInspectionMontagesSet, InspectionMontageDefault) == 0x000010, "Member 'FTgfWeaponInspectionMontagesSet::InspectionMontageDefault' has a wrong offset!");

// ScriptStruct LyraGame.TgfSkillCastMontageEntry
// 0x0038 (0x0038 - 0x0000)
struct FTgfSkillCastMontageEntry final
{
public:
	ETgfMontageEntryType                          EntryType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfSkillCastMontageEntry) == 0x000008, "Wrong alignment on FTgfSkillCastMontageEntry");
static_assert(sizeof(FTgfSkillCastMontageEntry) == 0x000038, "Wrong size on FTgfSkillCastMontageEntry");
static_assert(offsetof(FTgfSkillCastMontageEntry, EntryType) == 0x000000, "Member 'FTgfSkillCastMontageEntry::EntryType' has a wrong offset!");
static_assert(offsetof(FTgfSkillCastMontageEntry, Tags) == 0x000008, "Member 'FTgfSkillCastMontageEntry::Tags' has a wrong offset!");
static_assert(offsetof(FTgfSkillCastMontageEntry, Montage) == 0x000028, "Member 'FTgfSkillCastMontageEntry::Montage' has a wrong offset!");
static_assert(offsetof(FTgfSkillCastMontageEntry, SectionName) == 0x000030, "Member 'FTgfSkillCastMontageEntry::SectionName' has a wrong offset!");

// ScriptStruct LyraGame.TgfSkillCastMontageSet
// 0x0020 (0x0020 - 0x0000)
struct FTgfSkillCastMontageSet final
{
public:
	TArray<struct FTgfSkillCastMontageEntry>      CastMontages;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DefaultMontage;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultSectionName;                                // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfSkillCastMontageSet) == 0x000008, "Wrong alignment on FTgfSkillCastMontageSet");
static_assert(sizeof(FTgfSkillCastMontageSet) == 0x000020, "Wrong size on FTgfSkillCastMontageSet");
static_assert(offsetof(FTgfSkillCastMontageSet, CastMontages) == 0x000000, "Member 'FTgfSkillCastMontageSet::CastMontages' has a wrong offset!");
static_assert(offsetof(FTgfSkillCastMontageSet, DefaultMontage) == 0x000010, "Member 'FTgfSkillCastMontageSet::DefaultMontage' has a wrong offset!");
static_assert(offsetof(FTgfSkillCastMontageSet, DefaultSectionName) == 0x000018, "Member 'FTgfSkillCastMontageSet::DefaultSectionName' has a wrong offset!");

// ScriptStruct LyraGame.TgfSkillCastPhaseMontageSet
// 0x0048 (0x0048 - 0x0000)
struct FTgfSkillCastPhaseMontageSet final
{
public:
	struct FGameplayTagContainer                  PhaseTags;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETgfMontageEntryType                          PhaseEntryType;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTgfSkillCastMontageEntry>      CastMontages;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfSkillCastPhaseMontageSet) == 0x000008, "Wrong alignment on FTgfSkillCastPhaseMontageSet");
static_assert(sizeof(FTgfSkillCastPhaseMontageSet) == 0x000048, "Wrong size on FTgfSkillCastPhaseMontageSet");
static_assert(offsetof(FTgfSkillCastPhaseMontageSet, PhaseTags) == 0x000000, "Member 'FTgfSkillCastPhaseMontageSet::PhaseTags' has a wrong offset!");
static_assert(offsetof(FTgfSkillCastPhaseMontageSet, PhaseEntryType) == 0x000020, "Member 'FTgfSkillCastPhaseMontageSet::PhaseEntryType' has a wrong offset!");
static_assert(offsetof(FTgfSkillCastPhaseMontageSet, CastMontages) == 0x000028, "Member 'FTgfSkillCastPhaseMontageSet::CastMontages' has a wrong offset!");
static_assert(offsetof(FTgfSkillCastPhaseMontageSet, Comment) == 0x000038, "Member 'FTgfSkillCastPhaseMontageSet::Comment' has a wrong offset!");

// ScriptStruct LyraGame.LyraAppliedCharacterPartEntry
// 0x0054 (0x0060 - 0x000C)
struct FLyraAppliedCharacterPartEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLyraCharacterPart                     Part;                                              // 0x0010(0x0040)(NativeAccessSpecifierPrivate)
	int32                                         PartHandle;                                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ETGFCharacterPartSource                       Source;                                            // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UChildActorComponent*                   SpawnedComponent;                                  // 0x0058(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLyraAppliedCharacterPartEntry) == 0x000008, "Wrong alignment on FLyraAppliedCharacterPartEntry");
static_assert(sizeof(FLyraAppliedCharacterPartEntry) == 0x000060, "Wrong size on FLyraAppliedCharacterPartEntry");
static_assert(offsetof(FLyraAppliedCharacterPartEntry, Part) == 0x000010, "Member 'FLyraAppliedCharacterPartEntry::Part' has a wrong offset!");
static_assert(offsetof(FLyraAppliedCharacterPartEntry, PartHandle) == 0x000050, "Member 'FLyraAppliedCharacterPartEntry::PartHandle' has a wrong offset!");
static_assert(offsetof(FLyraAppliedCharacterPartEntry, Source) == 0x000054, "Member 'FLyraAppliedCharacterPartEntry::Source' has a wrong offset!");
static_assert(offsetof(FLyraAppliedCharacterPartEntry, SpawnedComponent) == 0x000058, "Member 'FLyraAppliedCharacterPartEntry::SpawnedComponent' has a wrong offset!");

// ScriptStruct LyraGame.LyraCharacterPartList
// 0x0020 (0x0128 - 0x0108)
struct FLyraCharacterPartList final : public FFastArraySerializer
{
public:
	TArray<struct FLyraAppliedCharacterPartEntry> Entries;                                           // 0x0108(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class ULyraPawnComponent_CharacterParts*      OwnerComponent;                                    // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraCharacterPartList) == 0x000008, "Wrong alignment on FLyraCharacterPartList");
static_assert(sizeof(FLyraCharacterPartList) == 0x000128, "Wrong size on FLyraCharacterPartList");
static_assert(offsetof(FLyraCharacterPartList, Entries) == 0x000108, "Member 'FLyraCharacterPartList::Entries' has a wrong offset!");
static_assert(offsetof(FLyraCharacterPartList, OwnerComponent) == 0x000118, "Member 'FLyraCharacterPartList::OwnerComponent' has a wrong offset!");

// ScriptStruct LyraGame.LyraCheatToRun
// 0x0018 (0x0018 - 0x0000)
struct FLyraCheatToRun final
{
public:
	ECheatExecutionTime                           Phase;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cheat;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraCheatToRun) == 0x000008, "Wrong alignment on FLyraCheatToRun");
static_assert(sizeof(FLyraCheatToRun) == 0x000018, "Wrong size on FLyraCheatToRun");
static_assert(offsetof(FLyraCheatToRun, Phase) == 0x000000, "Member 'FLyraCheatToRun::Phase' has a wrong offset!");
static_assert(offsetof(FLyraCheatToRun, Cheat) == 0x000008, "Member 'FLyraCheatToRun::Cheat' has a wrong offset!");

// ScriptStruct LyraGame.LyraAppliedEquipmentEntry
// 0x0014 (0x0020 - 0x000C)
struct FLyraAppliedEquipmentEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraEquipmentInstance*                 Instance;                                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ETgfEquipSlot                                 Slot;                                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ETgfEquipMapType                              MapType;                                           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          InHeld;                                            // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          LastHeld;                                          // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraAppliedEquipmentEntry) == 0x000008, "Wrong alignment on FLyraAppliedEquipmentEntry");
static_assert(sizeof(FLyraAppliedEquipmentEntry) == 0x000020, "Wrong size on FLyraAppliedEquipmentEntry");
static_assert(offsetof(FLyraAppliedEquipmentEntry, Instance) == 0x000010, "Member 'FLyraAppliedEquipmentEntry::Instance' has a wrong offset!");
static_assert(offsetof(FLyraAppliedEquipmentEntry, Slot) == 0x000018, "Member 'FLyraAppliedEquipmentEntry::Slot' has a wrong offset!");
static_assert(offsetof(FLyraAppliedEquipmentEntry, MapType) == 0x000019, "Member 'FLyraAppliedEquipmentEntry::MapType' has a wrong offset!");
static_assert(offsetof(FLyraAppliedEquipmentEntry, InHeld) == 0x00001A, "Member 'FLyraAppliedEquipmentEntry::InHeld' has a wrong offset!");
static_assert(offsetof(FLyraAppliedEquipmentEntry, LastHeld) == 0x00001B, "Member 'FLyraAppliedEquipmentEntry::LastHeld' has a wrong offset!");

// ScriptStruct LyraGame.LyraEquipmentList
// 0x0028 (0x0130 - 0x0108)
struct FLyraEquipmentList final : public FFastArraySerializer
{
public:
	TArray<struct FLyraAppliedEquipmentEntry>     Entries;                                           // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UActorComponent*                        OwnerComponent;                                    // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class ULyraEquipmentInstance>     InstanceType;                                      // 0x0120(0x0008)(ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          InReplicating;                                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraEquipmentList) == 0x000008, "Wrong alignment on FLyraEquipmentList");
static_assert(sizeof(FLyraEquipmentList) == 0x000130, "Wrong size on FLyraEquipmentList");
static_assert(offsetof(FLyraEquipmentList, Entries) == 0x000108, "Member 'FLyraEquipmentList::Entries' has a wrong offset!");
static_assert(offsetof(FLyraEquipmentList, OwnerComponent) == 0x000118, "Member 'FLyraEquipmentList::OwnerComponent' has a wrong offset!");
static_assert(offsetof(FLyraEquipmentList, InstanceType) == 0x000120, "Member 'FLyraEquipmentList::InstanceType' has a wrong offset!");
static_assert(offsetof(FLyraEquipmentList, InReplicating) == 0x000128, "Member 'FLyraEquipmentList::InReplicating' has a wrong offset!");

// ScriptStruct LyraGame.LyraEquipmentChangeMessage
// 0x0008 (0x0008 - 0x0000)
struct FLyraEquipmentChangeMessage final
{
public:
	class UActorComponent*                        EquipmentManager;                                  // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraEquipmentChangeMessage) == 0x000008, "Wrong alignment on FLyraEquipmentChangeMessage");
static_assert(sizeof(FLyraEquipmentChangeMessage) == 0x000008, "Wrong size on FLyraEquipmentChangeMessage");
static_assert(offsetof(FLyraEquipmentChangeMessage, EquipmentManager) == 0x000000, "Member 'FLyraEquipmentChangeMessage::EquipmentManager' has a wrong offset!");

// ScriptStruct LyraGame.LyraQuickBarSlotsChangedMessage
// 0x0018 (0x0018 - 0x0000)
struct FLyraQuickBarSlotsChangedMessage final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULyraInventoryItemInstance*>     Slots;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraQuickBarSlotsChangedMessage) == 0x000008, "Wrong alignment on FLyraQuickBarSlotsChangedMessage");
static_assert(sizeof(FLyraQuickBarSlotsChangedMessage) == 0x000018, "Wrong size on FLyraQuickBarSlotsChangedMessage");
static_assert(offsetof(FLyraQuickBarSlotsChangedMessage, Owner) == 0x000000, "Member 'FLyraQuickBarSlotsChangedMessage::Owner' has a wrong offset!");
static_assert(offsetof(FLyraQuickBarSlotsChangedMessage, Slots) == 0x000008, "Member 'FLyraQuickBarSlotsChangedMessage::Slots' has a wrong offset!");

// ScriptStruct LyraGame.LyraQuickBarActiveIndexChangedMessage
// 0x0010 (0x0010 - 0x0000)
struct FLyraQuickBarActiveIndexChangedMessage final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveIndex;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraQuickBarActiveIndexChangedMessage) == 0x000008, "Wrong alignment on FLyraQuickBarActiveIndexChangedMessage");
static_assert(sizeof(FLyraQuickBarActiveIndexChangedMessage) == 0x000010, "Wrong size on FLyraQuickBarActiveIndexChangedMessage");
static_assert(offsetof(FLyraQuickBarActiveIndexChangedMessage, Owner) == 0x000000, "Member 'FLyraQuickBarActiveIndexChangedMessage::Owner' has a wrong offset!");
static_assert(offsetof(FLyraQuickBarActiveIndexChangedMessage, ActiveIndex) == 0x000008, "Member 'FLyraQuickBarActiveIndexChangedMessage::ActiveIndex' has a wrong offset!");

// ScriptStruct LyraGame.LyraContextEffectAnimNotifyVFXSettings
// 0x0018 (0x0018 - 0x0000)
struct FLyraContextEffectAnimNotifyVFXSettings final
{
public:
	struct FVector                                Scale;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraContextEffectAnimNotifyVFXSettings) == 0x000008, "Wrong alignment on FLyraContextEffectAnimNotifyVFXSettings");
static_assert(sizeof(FLyraContextEffectAnimNotifyVFXSettings) == 0x000018, "Wrong size on FLyraContextEffectAnimNotifyVFXSettings");
static_assert(offsetof(FLyraContextEffectAnimNotifyVFXSettings, Scale) == 0x000000, "Member 'FLyraContextEffectAnimNotifyVFXSettings::Scale' has a wrong offset!");

// ScriptStruct LyraGame.LyraContextEffectAnimNotifyAudioSettings
// 0x0008 (0x0008 - 0x0000)
struct FLyraContextEffectAnimNotifyAudioSettings final
{
public:
	float                                         VolumeMultiplier;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraContextEffectAnimNotifyAudioSettings) == 0x000004, "Wrong alignment on FLyraContextEffectAnimNotifyAudioSettings");
static_assert(sizeof(FLyraContextEffectAnimNotifyAudioSettings) == 0x000008, "Wrong size on FLyraContextEffectAnimNotifyAudioSettings");
static_assert(offsetof(FLyraContextEffectAnimNotifyAudioSettings, VolumeMultiplier) == 0x000000, "Member 'FLyraContextEffectAnimNotifyAudioSettings::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FLyraContextEffectAnimNotifyAudioSettings, PitchMultiplier) == 0x000004, "Member 'FLyraContextEffectAnimNotifyAudioSettings::PitchMultiplier' has a wrong offset!");

// ScriptStruct LyraGame.LyraContextEffectAnimNotifyTraceSettings
// 0x0028 (0x0028 - 0x0000)
struct FLyraContextEffectAnimNotifyTraceSettings final
{
public:
	ECollisionChannel                             TraceChannel;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndTraceLocationOffset;                            // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreActor;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraContextEffectAnimNotifyTraceSettings) == 0x000008, "Wrong alignment on FLyraContextEffectAnimNotifyTraceSettings");
static_assert(sizeof(FLyraContextEffectAnimNotifyTraceSettings) == 0x000028, "Wrong size on FLyraContextEffectAnimNotifyTraceSettings");
static_assert(offsetof(FLyraContextEffectAnimNotifyTraceSettings, TraceChannel) == 0x000000, "Member 'FLyraContextEffectAnimNotifyTraceSettings::TraceChannel' has a wrong offset!");
static_assert(offsetof(FLyraContextEffectAnimNotifyTraceSettings, EndTraceLocationOffset) == 0x000008, "Member 'FLyraContextEffectAnimNotifyTraceSettings::EndTraceLocationOffset' has a wrong offset!");
static_assert(offsetof(FLyraContextEffectAnimNotifyTraceSettings, bIgnoreActor) == 0x000020, "Member 'FLyraContextEffectAnimNotifyTraceSettings::bIgnoreActor' has a wrong offset!");

// ScriptStruct LyraGame.LyraContextEffectAnimNotifyPreviewSettings
// 0x0048 (0x0048 - 0x0000)
struct FLyraContextEffectAnimNotifyPreviewSettings final
{
public:
	bool                                          bPreviewPhysicalSurfaceAsContext;                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PreviewPhysicalSurface;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        PreviewContextEffectsLibrary;                      // 0x0008(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PreviewContexts;                                   // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraContextEffectAnimNotifyPreviewSettings) == 0x000008, "Wrong alignment on FLyraContextEffectAnimNotifyPreviewSettings");
static_assert(sizeof(FLyraContextEffectAnimNotifyPreviewSettings) == 0x000048, "Wrong size on FLyraContextEffectAnimNotifyPreviewSettings");
static_assert(offsetof(FLyraContextEffectAnimNotifyPreviewSettings, bPreviewPhysicalSurfaceAsContext) == 0x000000, "Member 'FLyraContextEffectAnimNotifyPreviewSettings::bPreviewPhysicalSurfaceAsContext' has a wrong offset!");
static_assert(offsetof(FLyraContextEffectAnimNotifyPreviewSettings, PreviewPhysicalSurface) == 0x000001, "Member 'FLyraContextEffectAnimNotifyPreviewSettings::PreviewPhysicalSurface' has a wrong offset!");
static_assert(offsetof(FLyraContextEffectAnimNotifyPreviewSettings, PreviewContextEffectsLibrary) == 0x000008, "Member 'FLyraContextEffectAnimNotifyPreviewSettings::PreviewContextEffectsLibrary' has a wrong offset!");
static_assert(offsetof(FLyraContextEffectAnimNotifyPreviewSettings, PreviewContexts) == 0x000028, "Member 'FLyraContextEffectAnimNotifyPreviewSettings::PreviewContexts' has a wrong offset!");

// ScriptStruct LyraGame.LyraContextEffects
// 0x0038 (0x0038 - 0x0000)
struct FLyraContextEffects final
{
public:
	struct FGameplayTag                           EffectTag;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Context;                                           // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                Effects;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraContextEffects) == 0x000008, "Wrong alignment on FLyraContextEffects");
static_assert(sizeof(FLyraContextEffects) == 0x000038, "Wrong size on FLyraContextEffects");
static_assert(offsetof(FLyraContextEffects, EffectTag) == 0x000000, "Member 'FLyraContextEffects::EffectTag' has a wrong offset!");
static_assert(offsetof(FLyraContextEffects, Context) == 0x000008, "Member 'FLyraContextEffects::Context' has a wrong offset!");
static_assert(offsetof(FLyraContextEffects, Effects) == 0x000028, "Member 'FLyraContextEffects::Effects' has a wrong offset!");

// ScriptStruct LyraGame.LyraNumberPopRequest
// 0x0060 (0x0060 - 0x0000)
struct FLyraNumberPopRequest final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SourceTags;                                        // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTags;                                        // 0x0038(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         NumberToDisplay;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCriticalDamage;                                 // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraNumberPopRequest) == 0x000008, "Wrong alignment on FLyraNumberPopRequest");
static_assert(sizeof(FLyraNumberPopRequest) == 0x000060, "Wrong size on FLyraNumberPopRequest");
static_assert(offsetof(FLyraNumberPopRequest, WorldLocation) == 0x000000, "Member 'FLyraNumberPopRequest::WorldLocation' has a wrong offset!");
static_assert(offsetof(FLyraNumberPopRequest, SourceTags) == 0x000018, "Member 'FLyraNumberPopRequest::SourceTags' has a wrong offset!");
static_assert(offsetof(FLyraNumberPopRequest, TargetTags) == 0x000038, "Member 'FLyraNumberPopRequest::TargetTags' has a wrong offset!");
static_assert(offsetof(FLyraNumberPopRequest, NumberToDisplay) == 0x000058, "Member 'FLyraNumberPopRequest::NumberToDisplay' has a wrong offset!");
static_assert(offsetof(FLyraNumberPopRequest, bIsCriticalDamage) == 0x00005C, "Member 'FLyraNumberPopRequest::bIsCriticalDamage' has a wrong offset!");

// ScriptStruct LyraGame.PooledNumberPopComponentList
// 0x0010 (0x0010 - 0x0000)
struct FPooledNumberPopComponentList final
{
public:
	TArray<class UStaticMeshComponent*>           Components;                                        // 0x0000(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPooledNumberPopComponentList) == 0x000008, "Wrong alignment on FPooledNumberPopComponentList");
static_assert(sizeof(FPooledNumberPopComponentList) == 0x000010, "Wrong size on FPooledNumberPopComponentList");
static_assert(offsetof(FPooledNumberPopComponentList, Components) == 0x000000, "Member 'FPooledNumberPopComponentList::Components' has a wrong offset!");

// ScriptStruct LyraGame.LiveNumberPopEntry
// 0x0018 (0x0018 - 0x0000)
struct FLiveNumberPopEntry final
{
public:
	class UStaticMeshComponent*                   Component;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveNumberPopEntry) == 0x000008, "Wrong alignment on FLiveNumberPopEntry");
static_assert(sizeof(FLiveNumberPopEntry) == 0x000018, "Wrong size on FLiveNumberPopEntry");
static_assert(offsetof(FLiveNumberPopEntry, Component) == 0x000000, "Member 'FLiveNumberPopEntry::Component' has a wrong offset!");

// ScriptStruct LyraGame.LyraAbilityGrant
// 0x0030 (0x0030 - 0x0000)
struct FLyraAbilityGrant final
{
public:
	TSoftClassPtr<class UClass>                   AbilityType;                                       // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAbilityGrant) == 0x000008, "Wrong alignment on FLyraAbilityGrant");
static_assert(sizeof(FLyraAbilityGrant) == 0x000030, "Wrong size on FLyraAbilityGrant");
static_assert(offsetof(FLyraAbilityGrant, AbilityType) == 0x000000, "Member 'FLyraAbilityGrant::AbilityType' has a wrong offset!");

// ScriptStruct LyraGame.LyraAttributeSetGrant
// 0x0060 (0x0060 - 0x0000)
struct FLyraAttributeSetGrant final
{
public:
	TSoftClassPtr<class UClass>                   AttributeSetType;                                  // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              InitializationData;                                // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraAttributeSetGrant) == 0x000008, "Wrong alignment on FLyraAttributeSetGrant");
static_assert(sizeof(FLyraAttributeSetGrant) == 0x000060, "Wrong size on FLyraAttributeSetGrant");
static_assert(offsetof(FLyraAttributeSetGrant, AttributeSetType) == 0x000000, "Member 'FLyraAttributeSetGrant::AttributeSetType' has a wrong offset!");
static_assert(offsetof(FLyraAttributeSetGrant, InitializationData) == 0x000030, "Member 'FLyraAttributeSetGrant::InitializationData' has a wrong offset!");

// ScriptStruct LyraGame.GameFeatureAbilitiesEntry
// 0x0060 (0x0060 - 0x0000)
struct FGameFeatureAbilitiesEntry final
{
public:
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLyraAbilityGrant>              GrantedAbilities;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLyraAttributeSetGrant>         GrantedAttributes;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ULyraAbilitySet>> GrantedAbilitySets;                                // 0x0050(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameFeatureAbilitiesEntry) == 0x000008, "Wrong alignment on FGameFeatureAbilitiesEntry");
static_assert(sizeof(FGameFeatureAbilitiesEntry) == 0x000060, "Wrong size on FGameFeatureAbilitiesEntry");
static_assert(offsetof(FGameFeatureAbilitiesEntry, ActorClass) == 0x000000, "Member 'FGameFeatureAbilitiesEntry::ActorClass' has a wrong offset!");
static_assert(offsetof(FGameFeatureAbilitiesEntry, GrantedAbilities) == 0x000030, "Member 'FGameFeatureAbilitiesEntry::GrantedAbilities' has a wrong offset!");
static_assert(offsetof(FGameFeatureAbilitiesEntry, GrantedAttributes) == 0x000040, "Member 'FGameFeatureAbilitiesEntry::GrantedAttributes' has a wrong offset!");
static_assert(offsetof(FGameFeatureAbilitiesEntry, GrantedAbilitySets) == 0x000050, "Member 'FGameFeatureAbilitiesEntry::GrantedAbilitySets' has a wrong offset!");

// ScriptStruct LyraGame.InputMappingContextAndPriority
// 0x0038 (0x0038 - 0x0000)
struct FInputMappingContextAndPriority final
{
public:
	TSoftObjectPtr<class UInputMappingContext>    InputMapping;                                      // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputMappingContextAndPriority) == 0x000008, "Wrong alignment on FInputMappingContextAndPriority");
static_assert(sizeof(FInputMappingContextAndPriority) == 0x000038, "Wrong size on FInputMappingContextAndPriority");
static_assert(offsetof(FInputMappingContextAndPriority, InputMapping) == 0x000000, "Member 'FInputMappingContextAndPriority::InputMapping' has a wrong offset!");
static_assert(offsetof(FInputMappingContextAndPriority, Priority) == 0x000030, "Member 'FInputMappingContextAndPriority::Priority' has a wrong offset!");

// ScriptStruct LyraGame.LyraHUDLayoutRequest
// 0x0038 (0x0038 - 0x0000)
struct FLyraHUDLayoutRequest final
{
public:
	TSoftClassPtr<class UClass>                   LayoutClass;                                       // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LayerID;                                           // 0x0030(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraHUDLayoutRequest) == 0x000008, "Wrong alignment on FLyraHUDLayoutRequest");
static_assert(sizeof(FLyraHUDLayoutRequest) == 0x000038, "Wrong size on FLyraHUDLayoutRequest");
static_assert(offsetof(FLyraHUDLayoutRequest, LayoutClass) == 0x000000, "Member 'FLyraHUDLayoutRequest::LayoutClass' has a wrong offset!");
static_assert(offsetof(FLyraHUDLayoutRequest, LayerID) == 0x000030, "Member 'FLyraHUDLayoutRequest::LayerID' has a wrong offset!");

// ScriptStruct LyraGame.LyraHUDElementEntry
// 0x0038 (0x0038 - 0x0000)
struct FLyraHUDElementEntry final
{
public:
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SlotId;                                            // 0x0030(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraHUDElementEntry) == 0x000008, "Wrong alignment on FLyraHUDElementEntry");
static_assert(sizeof(FLyraHUDElementEntry) == 0x000038, "Wrong size on FLyraHUDElementEntry");
static_assert(offsetof(FLyraHUDElementEntry, WidgetClass) == 0x000000, "Member 'FLyraHUDElementEntry::WidgetClass' has a wrong offset!");
static_assert(offsetof(FLyraHUDElementEntry, SlotId) == 0x000030, "Member 'FLyraHUDElementEntry::SlotId' has a wrong offset!");

// ScriptStruct LyraGame.LyraInputAction
// 0x0010 (0x0010 - 0x0000)
struct FLyraInputAction final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InputTag;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraInputAction) == 0x000008, "Wrong alignment on FLyraInputAction");
static_assert(sizeof(FLyraInputAction) == 0x000010, "Wrong size on FLyraInputAction");
static_assert(offsetof(FLyraInputAction, InputAction) == 0x000000, "Member 'FLyraInputAction::InputAction' has a wrong offset!");
static_assert(offsetof(FLyraInputAction, InputTag) == 0x000008, "Member 'FLyraInputAction::InputTag' has a wrong offset!");

// ScriptStruct LyraGame.LoadedMappableConfigPair
// 0x0010 (0x0010 - 0x0000)
struct FLoadedMappableConfigPair final
{
public:
	class UPlayerMappableInputConfig*             Config;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonInputType                              Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadedMappableConfigPair) == 0x000008, "Wrong alignment on FLoadedMappableConfigPair");
static_assert(sizeof(FLoadedMappableConfigPair) == 0x000010, "Wrong size on FLoadedMappableConfigPair");
static_assert(offsetof(FLoadedMappableConfigPair, Config) == 0x000000, "Member 'FLoadedMappableConfigPair::Config' has a wrong offset!");
static_assert(offsetof(FLoadedMappableConfigPair, Type) == 0x000008, "Member 'FLoadedMappableConfigPair::Type' has a wrong offset!");
static_assert(offsetof(FLoadedMappableConfigPair, bIsActive) == 0x000009, "Member 'FLoadedMappableConfigPair::bIsActive' has a wrong offset!");

// ScriptStruct LyraGame.MappableConfigPair
// 0x0080 (0x0080 - 0x0000)
struct FMappableConfigPair final
{
public:
	TSoftObjectPtr<class UPlayerMappableInputConfig> Config;                                            // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonInputType                              Type;                                              // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DependentPlatformTraits;                           // 0x0038(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExcludedPlatformTraits;                            // 0x0058(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          bShouldActivateAutomatically;                      // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMappableConfigPair) == 0x000008, "Wrong alignment on FMappableConfigPair");
static_assert(sizeof(FMappableConfigPair) == 0x000080, "Wrong size on FMappableConfigPair");
static_assert(offsetof(FMappableConfigPair, Config) == 0x000000, "Member 'FMappableConfigPair::Config' has a wrong offset!");
static_assert(offsetof(FMappableConfigPair, Type) == 0x000030, "Member 'FMappableConfigPair::Type' has a wrong offset!");
static_assert(offsetof(FMappableConfigPair, DependentPlatformTraits) == 0x000038, "Member 'FMappableConfigPair::DependentPlatformTraits' has a wrong offset!");
static_assert(offsetof(FMappableConfigPair, ExcludedPlatformTraits) == 0x000058, "Member 'FMappableConfigPair::ExcludedPlatformTraits' has a wrong offset!");
static_assert(offsetof(FMappableConfigPair, bShouldActivateAutomatically) == 0x000078, "Member 'FMappableConfigPair::bShouldActivateAutomatically' has a wrong offset!");

// ScriptStruct LyraGame.LootPoolItem
// 0x0020 (0x0020 - 0x0000)
struct FLootPoolItem final
{
public:
	TArray<int32>                                 Elements;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RequiredLevelArgs;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootPoolItem) == 0x000008, "Wrong alignment on FLootPoolItem");
static_assert(sizeof(FLootPoolItem) == 0x000020, "Wrong size on FLootPoolItem");
static_assert(offsetof(FLootPoolItem, Elements) == 0x000000, "Member 'FLootPoolItem::Elements' has a wrong offset!");
static_assert(offsetof(FLootPoolItem, RequiredLevelArgs) == 0x000010, "Member 'FLootPoolItem::RequiredLevelArgs' has a wrong offset!");

// ScriptStruct LyraGame.PickupTemplate
// 0x0010 (0x0010 - 0x0000)
struct FPickupTemplate final
{
public:
	int32                                         StackCount;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPickupTemplate) == 0x000008, "Wrong alignment on FPickupTemplate");
static_assert(sizeof(FPickupTemplate) == 0x000010, "Wrong size on FPickupTemplate");
static_assert(offsetof(FPickupTemplate, StackCount) == 0x000000, "Member 'FPickupTemplate::StackCount' has a wrong offset!");
static_assert(offsetof(FPickupTemplate, ItemDef) == 0x000008, "Member 'FPickupTemplate::ItemDef' has a wrong offset!");

// ScriptStruct LyraGame.PickupInstance
// 0x0008 (0x0008 - 0x0000)
struct FPickupInstance final
{
public:
	class ULyraInventoryItemInstance*             Item;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPickupInstance) == 0x000008, "Wrong alignment on FPickupInstance");
static_assert(sizeof(FPickupInstance) == 0x000008, "Wrong size on FPickupInstance");
static_assert(offsetof(FPickupInstance, Item) == 0x000000, "Member 'FPickupInstance::Item' has a wrong offset!");

// ScriptStruct LyraGame.InventoryPickup
// 0x0010 (0x0010 - 0x0000)
struct FInventoryPickup final
{
public:
	TArray<struct FPickupTemplate>                Templates;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryPickup) == 0x000008, "Wrong alignment on FInventoryPickup");
static_assert(sizeof(FInventoryPickup) == 0x000010, "Wrong size on FInventoryPickup");
static_assert(offsetof(FInventoryPickup, Templates) == 0x000000, "Member 'FInventoryPickup::Templates' has a wrong offset!");

// ScriptStruct LyraGame.LyraInventoryChangeMessage
// 0x0018 (0x0018 - 0x0000)
struct FLyraInventoryChangeMessage final
{
public:
	class UActorComponent*                        InventoryOwner;                                    // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraInventoryItemInstance*             Instance;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delta;                                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraInventoryChangeMessage) == 0x000008, "Wrong alignment on FLyraInventoryChangeMessage");
static_assert(sizeof(FLyraInventoryChangeMessage) == 0x000018, "Wrong size on FLyraInventoryChangeMessage");
static_assert(offsetof(FLyraInventoryChangeMessage, InventoryOwner) == 0x000000, "Member 'FLyraInventoryChangeMessage::InventoryOwner' has a wrong offset!");
static_assert(offsetof(FLyraInventoryChangeMessage, Instance) == 0x000008, "Member 'FLyraInventoryChangeMessage::Instance' has a wrong offset!");
static_assert(offsetof(FLyraInventoryChangeMessage, NewCount) == 0x000010, "Member 'FLyraInventoryChangeMessage::NewCount' has a wrong offset!");
static_assert(offsetof(FLyraInventoryChangeMessage, Delta) == 0x000014, "Member 'FLyraInventoryChangeMessage::Delta' has a wrong offset!");

// ScriptStruct LyraGame.LyraInventoryEntry
// 0x001C (0x0028 - 0x000C)
struct FLyraInventoryEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraInventoryItemInstance*             Instance;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              Position;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELyraInventoryType                            InventoryType;                                     // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMarkedForRemove;                                  // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraInventoryEntry) == 0x000008, "Wrong alignment on FLyraInventoryEntry");
static_assert(sizeof(FLyraInventoryEntry) == 0x000028, "Wrong size on FLyraInventoryEntry");
static_assert(offsetof(FLyraInventoryEntry, Instance) == 0x000010, "Member 'FLyraInventoryEntry::Instance' has a wrong offset!");
static_assert(offsetof(FLyraInventoryEntry, Position) == 0x000018, "Member 'FLyraInventoryEntry::Position' has a wrong offset!");
static_assert(offsetof(FLyraInventoryEntry, InventoryType) == 0x000020, "Member 'FLyraInventoryEntry::InventoryType' has a wrong offset!");
static_assert(offsetof(FLyraInventoryEntry, bMarkedForRemove) == 0x000021, "Member 'FLyraInventoryEntry::bMarkedForRemove' has a wrong offset!");

// ScriptStruct LyraGame.LyraInventoryList
// 0x0028 (0x0130 - 0x0108)
struct FLyraInventoryList final : public FFastArraySerializer
{
public:
	TArray<struct FLyraInventoryEntry>            Entries;                                           // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UActorComponent*                        OwnerComponent;                                    // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class ULyraInventoryItemInstance> InstanceType;                                      // 0x0120(0x0008)(ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          InReplicating;                                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraInventoryList) == 0x000008, "Wrong alignment on FLyraInventoryList");
static_assert(sizeof(FLyraInventoryList) == 0x000130, "Wrong size on FLyraInventoryList");
static_assert(offsetof(FLyraInventoryList, Entries) == 0x000108, "Member 'FLyraInventoryList::Entries' has a wrong offset!");
static_assert(offsetof(FLyraInventoryList, OwnerComponent) == 0x000118, "Member 'FLyraInventoryList::OwnerComponent' has a wrong offset!");
static_assert(offsetof(FLyraInventoryList, InstanceType) == 0x000120, "Member 'FLyraInventoryList::InstanceType' has a wrong offset!");
static_assert(offsetof(FLyraInventoryList, InReplicating) == 0x000128, "Member 'FLyraInventoryList::InReplicating' has a wrong offset!");

// ScriptStruct LyraGame.TgfEquipAttrItem
// 0x0048 (0x0048 - 0x0000)
struct FTgfEquipAttrItem final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfItemAffixType                             AffixType;                                         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfAttributeCondition                        Condition;                                         // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfAttributeTarget                           Target;                                            // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasAdded;                                          // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfEquipAttrItem) == 0x000008, "Wrong alignment on FTgfEquipAttrItem");
static_assert(sizeof(FTgfEquipAttrItem) == 0x000048, "Wrong size on FTgfEquipAttrItem");
static_assert(offsetof(FTgfEquipAttrItem, Attribute) == 0x000000, "Member 'FTgfEquipAttrItem::Attribute' has a wrong offset!");
static_assert(offsetof(FTgfEquipAttrItem, Value) == 0x000038, "Member 'FTgfEquipAttrItem::Value' has a wrong offset!");
static_assert(offsetof(FTgfEquipAttrItem, MaxValue) == 0x00003C, "Member 'FTgfEquipAttrItem::MaxValue' has a wrong offset!");
static_assert(offsetof(FTgfEquipAttrItem, MinValue) == 0x000040, "Member 'FTgfEquipAttrItem::MinValue' has a wrong offset!");
static_assert(offsetof(FTgfEquipAttrItem, AffixType) == 0x000044, "Member 'FTgfEquipAttrItem::AffixType' has a wrong offset!");
static_assert(offsetof(FTgfEquipAttrItem, Condition) == 0x000045, "Member 'FTgfEquipAttrItem::Condition' has a wrong offset!");
static_assert(offsetof(FTgfEquipAttrItem, Target) == 0x000046, "Member 'FTgfEquipAttrItem::Target' has a wrong offset!");
static_assert(offsetof(FTgfEquipAttrItem, HasAdded) == 0x000047, "Member 'FTgfEquipAttrItem::HasAdded' has a wrong offset!");

// ScriptStruct LyraGame.TgfEquipGearsetItem
// 0x0008 (0x0008 - 0x0000)
struct FTgfEquipGearsetItem final
{
public:
	int32                                         GearsetId;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GearsetLevel;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfEquipGearsetItem) == 0x000004, "Wrong alignment on FTgfEquipGearsetItem");
static_assert(sizeof(FTgfEquipGearsetItem) == 0x000008, "Wrong size on FTgfEquipGearsetItem");
static_assert(offsetof(FTgfEquipGearsetItem, GearsetId) == 0x000000, "Member 'FTgfEquipGearsetItem::GearsetId' has a wrong offset!");
static_assert(offsetof(FTgfEquipGearsetItem, GearsetLevel) == 0x000004, "Member 'FTgfEquipGearsetItem::GearsetLevel' has a wrong offset!");

// ScriptStruct LyraGame.TgfDItemBuffer
// 0x0010 (0x0010 - 0x0000)
struct FTgfDItemBuffer final
{
public:
	TArray<uint8>                                 Buffer;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfDItemBuffer) == 0x000008, "Wrong alignment on FTgfDItemBuffer");
static_assert(sizeof(FTgfDItemBuffer) == 0x000010, "Wrong size on FTgfDItemBuffer");
static_assert(offsetof(FTgfDItemBuffer, Buffer) == 0x000000, "Member 'FTgfDItemBuffer::Buffer' has a wrong offset!");

// ScriptStruct LyraGame.LyraNotificationMessage
// 0x0038 (0x0038 - 0x0000)
struct FLyraNotificationMessage final
{
public:
	struct FGameplayTag                           TargetChannel;                                     // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           TargetPlayer;                                      // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   PayloadMessage;                                    // 0x0010(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PayloadTag;                                        // 0x0028(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                PayloadObject;                                     // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLyraNotificationMessage) == 0x000008, "Wrong alignment on FLyraNotificationMessage");
static_assert(sizeof(FLyraNotificationMessage) == 0x000038, "Wrong size on FLyraNotificationMessage");
static_assert(offsetof(FLyraNotificationMessage, TargetChannel) == 0x000000, "Member 'FLyraNotificationMessage::TargetChannel' has a wrong offset!");
static_assert(offsetof(FLyraNotificationMessage, TargetPlayer) == 0x000008, "Member 'FLyraNotificationMessage::TargetPlayer' has a wrong offset!");
static_assert(offsetof(FLyraNotificationMessage, PayloadMessage) == 0x000010, "Member 'FLyraNotificationMessage::PayloadMessage' has a wrong offset!");
static_assert(offsetof(FLyraNotificationMessage, PayloadTag) == 0x000028, "Member 'FLyraNotificationMessage::PayloadTag' has a wrong offset!");
static_assert(offsetof(FLyraNotificationMessage, PayloadObject) == 0x000030, "Member 'FLyraNotificationMessage::PayloadObject' has a wrong offset!");

// ScriptStruct LyraGame.LyraVerbMessageReplication
// 0x0018 (0x0120 - 0x0108)
struct FLyraVerbMessageReplication final : public FFastArraySerializer
{
public:
	TArray<struct FLyraVerbMessageReplicationEntry> CurrentMessages;                                   // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UObject*                                Owner;                                             // 0x0118(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLyraVerbMessageReplication) == 0x000008, "Wrong alignment on FLyraVerbMessageReplication");
static_assert(sizeof(FLyraVerbMessageReplication) == 0x000120, "Wrong size on FLyraVerbMessageReplication");
static_assert(offsetof(FLyraVerbMessageReplication, CurrentMessages) == 0x000108, "Member 'FLyraVerbMessageReplication::CurrentMessages' has a wrong offset!");
static_assert(offsetof(FLyraVerbMessageReplication, Owner) == 0x000118, "Member 'FLyraVerbMessageReplication::Owner' has a wrong offset!");

// ScriptStruct LyraGame.LyraQualityDeviceProfileVariant
// 0x0030 (0x0030 - 0x0000)
struct FLyraQualityDeviceProfileVariant final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FString                                 DeviceProfileSuffix;                               // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinRefreshRate;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraQualityDeviceProfileVariant) == 0x000008, "Wrong alignment on FLyraQualityDeviceProfileVariant");
static_assert(sizeof(FLyraQualityDeviceProfileVariant) == 0x000030, "Wrong size on FLyraQualityDeviceProfileVariant");
static_assert(offsetof(FLyraQualityDeviceProfileVariant, DisplayName) == 0x000000, "Member 'FLyraQualityDeviceProfileVariant::DisplayName' has a wrong offset!");
static_assert(offsetof(FLyraQualityDeviceProfileVariant, DeviceProfileSuffix) == 0x000018, "Member 'FLyraQualityDeviceProfileVariant::DeviceProfileSuffix' has a wrong offset!");
static_assert(offsetof(FLyraQualityDeviceProfileVariant, MinRefreshRate) == 0x000028, "Member 'FLyraQualityDeviceProfileVariant::MinRefreshRate' has a wrong offset!");

// ScriptStruct LyraGame.LyraPlayerStartGroup
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLyraPlayerStartGroup final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLyraPlayerStartGroup) == 0x000008, "Wrong alignment on FLyraPlayerStartGroup");
static_assert(sizeof(FLyraPlayerStartGroup) == 0x000018, "Wrong size on FLyraPlayerStartGroup");

// ScriptStruct LyraGame.TgfPlayerStartsGroupInfo
// 0x0048 (0x0048 - 0x0000)
struct FTgfPlayerStartsGroupInfo final
{
public:
	TArray<TWeakObjectPtr<class ALyraPlayerStart>> PlayerStarts;                                      // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ALyraPlayerStartSet>> PlayerStartSets;                                   // 0x0010(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<int32>                                 PlayerStartGroupIds;                               // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLyraPlayerStartGroup>          PlayerStartGroups;                                 // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentTurn;                                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTgfPlayerStartsGroupInfo) == 0x000008, "Wrong alignment on FTgfPlayerStartsGroupInfo");
static_assert(sizeof(FTgfPlayerStartsGroupInfo) == 0x000048, "Wrong size on FTgfPlayerStartsGroupInfo");
static_assert(offsetof(FTgfPlayerStartsGroupInfo, PlayerStarts) == 0x000000, "Member 'FTgfPlayerStartsGroupInfo::PlayerStarts' has a wrong offset!");
static_assert(offsetof(FTgfPlayerStartsGroupInfo, PlayerStartSets) == 0x000010, "Member 'FTgfPlayerStartsGroupInfo::PlayerStartSets' has a wrong offset!");
static_assert(offsetof(FTgfPlayerStartsGroupInfo, PlayerStartGroupIds) == 0x000020, "Member 'FTgfPlayerStartsGroupInfo::PlayerStartGroupIds' has a wrong offset!");
static_assert(offsetof(FTgfPlayerStartsGroupInfo, PlayerStartGroups) == 0x000030, "Member 'FTgfPlayerStartsGroupInfo::PlayerStartGroups' has a wrong offset!");
static_assert(offsetof(FTgfPlayerStartsGroupInfo, CurrentTurn) == 0x000040, "Member 'FTgfPlayerStartsGroupInfo::CurrentTurn' has a wrong offset!");

// ScriptStruct LyraGame.TgfMithrilInfo
// 0x0008 (0x0008 - 0x0000)
struct FTgfMithrilInfo final
{
public:
	ETgfForceType                                 Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemainingRebirthChances;                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTgfMithrilInfo) == 0x000004, "Wrong alignment on FTgfMithrilInfo");
static_assert(sizeof(FTgfMithrilInfo) == 0x000008, "Wrong size on FTgfMithrilInfo");
static_assert(offsetof(FTgfMithrilInfo, Type) == 0x000000, "Member 'FTgfMithrilInfo::Type' has a wrong offset!");
static_assert(offsetof(FTgfMithrilInfo, RemainingRebirthChances) == 0x000004, "Member 'FTgfMithrilInfo::RemainingRebirthChances' has a wrong offset!");

// ScriptStruct LyraGame.TGFDPDefaultSettings
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FTGFDPDefaultSettings final
{
public:
	int32                                         WindowMode;                                        // 0x0000(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Brightness;                                        // 0x0010(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVerticalSync;                                     // 0x0014(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FPSLimitIndex;                                     // 0x0018(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SSModeIndex;                                       // 0x001C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverallSettingLevel;                               // 0x0020(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SharpnessNormalized;                               // 0x0024(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNaniteVSMEnable;                                  // 0x0028(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNaniteEnable;                                     // 0x0029(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVSMEnable;                                        // 0x002A(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFrameGenerationEnable;                            // 0x002B(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTGFDPDefaultSettings) == 0x000008, "Wrong alignment on FTGFDPDefaultSettings");
static_assert(sizeof(FTGFDPDefaultSettings) == 0x000030, "Wrong size on FTGFDPDefaultSettings");
static_assert(offsetof(FTGFDPDefaultSettings, WindowMode) == 0x000000, "Member 'FTGFDPDefaultSettings::WindowMode' has a wrong offset!");
static_assert(offsetof(FTGFDPDefaultSettings, Brightness) == 0x000010, "Member 'FTGFDPDefaultSettings::Brightness' has a wrong offset!");
static_assert(offsetof(FTGFDPDefaultSettings, bVerticalSync) == 0x000014, "Member 'FTGFDPDefaultSettings::bVerticalSync' has a wrong offset!");
static_assert(offsetof(FTGFDPDefaultSettings, FPSLimitIndex) == 0x000018, "Member 'FTGFDPDefaultSettings::FPSLimitIndex' has a wrong offset!");
static_assert(offsetof(FTGFDPDefaultSettings, SSModeIndex) == 0x00001C, "Member 'FTGFDPDefaultSettings::SSModeIndex' has a wrong offset!");
static_assert(offsetof(FTGFDPDefaultSettings, OverallSettingLevel) == 0x000020, "Member 'FTGFDPDefaultSettings::OverallSettingLevel' has a wrong offset!");
static_assert(offsetof(FTGFDPDefaultSettings, SharpnessNormalized) == 0x000024, "Member 'FTGFDPDefaultSettings::SharpnessNormalized' has a wrong offset!");
static_assert(offsetof(FTGFDPDefaultSettings, bNaniteVSMEnable) == 0x000028, "Member 'FTGFDPDefaultSettings::bNaniteVSMEnable' has a wrong offset!");
static_assert(offsetof(FTGFDPDefaultSettings, bNaniteEnable) == 0x000029, "Member 'FTGFDPDefaultSettings::bNaniteEnable' has a wrong offset!");
static_assert(offsetof(FTGFDPDefaultSettings, bVSMEnable) == 0x00002A, "Member 'FTGFDPDefaultSettings::bVSMEnable' has a wrong offset!");
static_assert(offsetof(FTGFDPDefaultSettings, bFrameGenerationEnable) == 0x00002B, "Member 'FTGFDPDefaultSettings::bFrameGenerationEnable' has a wrong offset!");

// ScriptStruct LyraGame.CircumferenceMarkerEntry
// 0x0008 (0x0008 - 0x0000)
struct FCircumferenceMarkerEntry final
{
public:
	float                                         PositionAngle;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImageRotationAngle;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCircumferenceMarkerEntry) == 0x000004, "Wrong alignment on FCircumferenceMarkerEntry");
static_assert(sizeof(FCircumferenceMarkerEntry) == 0x000008, "Wrong size on FCircumferenceMarkerEntry");
static_assert(offsetof(FCircumferenceMarkerEntry, PositionAngle) == 0x000000, "Member 'FCircumferenceMarkerEntry::PositionAngle' has a wrong offset!");
static_assert(offsetof(FCircumferenceMarkerEntry, ImageRotationAngle) == 0x000004, "Member 'FCircumferenceMarkerEntry::ImageRotationAngle' has a wrong offset!");

}


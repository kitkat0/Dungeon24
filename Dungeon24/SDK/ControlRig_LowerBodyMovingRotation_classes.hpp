#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControlRig_LowerBodyMovingRotation

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass ControlRig_LowerBodyMovingRotation.ControlRig_LowerBodyMovingRotation_C
// 0x0000 (0x0560 - 0x0560)
class UControlRig_LowerBodyMovingRotation_C final : public UControlRig
{
public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ControlRig_LowerBodyMovingRotation_C">();
	}
	static class UControlRig_LowerBodyMovingRotation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRig_LowerBodyMovingRotation_C>();
	}
};
static_assert(alignof(UControlRig_LowerBodyMovingRotation_C) == 0x000008, "Wrong alignment on UControlRig_LowerBodyMovingRotation_C");
static_assert(sizeof(UControlRig_LowerBodyMovingRotation_C) == 0x000560, "Wrong size on UControlRig_LowerBodyMovingRotation_C");

// RigVMMemoryStorageGeneratorClass ControlRig_LowerBodyMovingRotation.RigVMMemory_Literal
// 0x0050 (0x0078 - 0x0028)
class ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	TArray<struct FRigUnit_ModifyTransforms_PerItem> RigVMModel___RotateBone_ModifyTransforms_ItemToModify__Const; // 0x0028(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___RotateBone_Cast_Value__Const;         // 0x0038(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	class FName                                   RigVMModel___RigUnit_GetControlRotator_Control__Const; // 0x0050(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EBoneGetterSetterMode                         RigVMModel___RigUnit_GetControlRotator_Space__Const; // 0x0058(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RigVMModel___RotateBone_Multiply_B__Const;         // 0x0060(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RotateBone_ModifyTransforms_Weight__Const; // 0x0068(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RotateBone_ModifyTransforms_WeightMinimum__Const; // 0x006C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EControlRigModifyBoneMode                     RigVMModel___RotateBone_ModifyTransforms_Mode__Const; // 0x0070(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass ControlRig_LowerBodyMovingRotation.RigVMMemory_Literal", true>();
	}
	static class ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal>();
	}
};
static_assert(alignof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal) == 0x000008, "Wrong alignment on ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal");
static_assert(sizeof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal) == 0x000078, "Wrong size on ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal, RigVMModel___RotateBone_ModifyTransforms_ItemToModify__Const) == 0x000028, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal::RigVMModel___RotateBone_ModifyTransforms_ItemToModify__Const' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal, RigVMModel___RotateBone_Cast_Value__Const) == 0x000038, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal::RigVMModel___RotateBone_Cast_Value__Const' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal, RigVMModel___RigUnit_GetControlRotator_Control__Const) == 0x000050, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal::RigVMModel___RigUnit_GetControlRotator_Control__Const' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal, RigVMModel___RigUnit_GetControlRotator_Space__Const) == 0x000058, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal::RigVMModel___RigUnit_GetControlRotator_Space__Const' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal, RigVMModel___RotateBone_Multiply_B__Const) == 0x000060, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal::RigVMModel___RotateBone_Multiply_B__Const' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal, RigVMModel___RotateBone_ModifyTransforms_Weight__Const) == 0x000068, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal::RigVMModel___RotateBone_ModifyTransforms_Weight__Const' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal, RigVMModel___RotateBone_ModifyTransforms_WeightMinimum__Const) == 0x00006C, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal::RigVMModel___RotateBone_ModifyTransforms_WeightMinimum__Const' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal, RigVMModel___RotateBone_ModifyTransforms_Mode__Const) == 0x000070, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Literal::RigVMModel___RotateBone_ModifyTransforms_Mode__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass ControlRig_LowerBodyMovingRotation.RigVMMemory_Work
// 0x00F8 (0x0120 - 0x0028)
class ControlRig_LowerBodyMovingRotation::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	struct FControlRigExecuteContext              ExecuteContext_;                                   // 0x0028(0x0038)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___RotateBone_Cast_Result;               // 0x0060(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___RotateBone_Multiply_Result;           // 0x0080(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___RigUnit_GetControlRotator_Rotator;    // 0x0088(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FRotator                               RigVMModel___RigUnit_GetControlRotator_Minimum;    // 0x00A0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FRotator                               RigVMModel___RigUnit_GetControlRotator_Maximum;    // 0x00B8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetControlRotator_CachedControlIndex; // 0x00D0(0x0010)(Edit, EditConst, NonTransactional)
	double                                        RigVMModel___RotateBone_Multiply_A;                // 0x00E0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___RotateBone_Cast_Value__IO;            // 0x00E8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	TArray<struct FRigUnit_ModifyTransforms_PerItem> RigVMModel___RotateBone_ModifyTransforms_ItemToModify__IO; // 0x0100(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigUnit_ModifyTransforms_WorkData> RigVMModel___RotateBone_ModifyTransforms_WorkData; // 0x0110(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass ControlRig_LowerBodyMovingRotation.RigVMMemory_Work", true>();
	}
	static class ControlRig_LowerBodyMovingRotation::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<ControlRig_LowerBodyMovingRotation::URigVMMemory_Work>();
	}
};
static_assert(alignof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work) == 0x000010, "Wrong alignment on ControlRig_LowerBodyMovingRotation::URigVMMemory_Work");
static_assert(sizeof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work) == 0x000120, "Wrong size on ControlRig_LowerBodyMovingRotation::URigVMMemory_Work");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work, ExecuteContext_) == 0x000028, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Work::ExecuteContext_' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work, RigVMModel___RotateBone_Cast_Result) == 0x000060, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Work::RigVMModel___RotateBone_Cast_Result' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work, RigVMModel___RotateBone_Multiply_Result) == 0x000080, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Work::RigVMModel___RotateBone_Multiply_Result' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work, RigVMModel___RigUnit_GetControlRotator_Rotator) == 0x000088, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Work::RigVMModel___RigUnit_GetControlRotator_Rotator' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work, RigVMModel___RigUnit_GetControlRotator_Minimum) == 0x0000A0, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Work::RigVMModel___RigUnit_GetControlRotator_Minimum' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work, RigVMModel___RigUnit_GetControlRotator_Maximum) == 0x0000B8, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Work::RigVMModel___RigUnit_GetControlRotator_Maximum' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work, RigVMModel___RigUnit_GetControlRotator_CachedControlIndex) == 0x0000D0, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Work::RigVMModel___RigUnit_GetControlRotator_CachedControlIndex' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work, RigVMModel___RotateBone_Multiply_A) == 0x0000E0, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Work::RigVMModel___RotateBone_Multiply_A' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work, RigVMModel___RotateBone_Cast_Value__IO) == 0x0000E8, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Work::RigVMModel___RotateBone_Cast_Value__IO' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work, RigVMModel___RotateBone_ModifyTransforms_ItemToModify__IO) == 0x000100, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Work::RigVMModel___RotateBone_ModifyTransforms_ItemToModify__IO' has a wrong offset!");
static_assert(offsetof(ControlRig_LowerBodyMovingRotation::URigVMMemory_Work, RigVMModel___RotateBone_ModifyTransforms_WorkData) == 0x000110, "Member 'ControlRig_LowerBodyMovingRotation::URigVMMemory_Work::RigVMModel___RotateBone_ModifyTransforms_WorkData' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractableChest

#include "Basic.hpp"

#include "BP_InteractableChest_classes.hpp"
#include "BP_InteractableChest_parameters.hpp"


namespace SDK
{

// Function BP_InteractableChest.BP_InteractableChest_C.AddBeam
// (BlueprintCallable, BlueprintEvent)

void ABP_InteractableChest_C::AddBeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "AddBeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.ExecuteUbergraph_BP_InteractableChest
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableChest_C::ExecuteUbergraph_BP_InteractableChest(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "ExecuteUbergraph_BP_InteractableChest");

	Params::BP_InteractableChest_C_ExecuteUbergraph_BP_InteractableChest Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractableChest.BP_InteractableChest_C.GenerateLoot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  TimeRemainder                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableChest_C::GenerateLoot(class AActor* InteractingActor, double* TimeRemainder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "GenerateLoot");

	Params::BP_InteractableChest_C_GenerateLoot Parms{};

	Parms.InteractingActor = InteractingActor;

	UObject::ProcessEvent(Func, &Parms);

	if (TimeRemainder != nullptr)
		*TimeRemainder = Parms.TimeRemainder;
}


// Function BP_InteractableChest.BP_InteractableChest_C.GetInteractionPromptText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APlayerController*                Param_Instigator                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             Key                                                    (Parm, OutParm)
// class FText                             Out_Text_Line_1                                        (Parm, OutParm)
// class FText                             Out_Text_Line_2                                        (Parm, OutParm)

void ABP_InteractableChest_C::GetInteractionPromptText(class APlayerController* Param_Instigator, class FText* Key, class FText* Out_Text_Line_1, class FText* Out_Text_Line_2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "GetInteractionPromptText");

	Params::BP_InteractableChest_C_GetInteractionPromptText Parms{};

	Parms.Param_Instigator = Param_Instigator;

	UObject::ProcessEvent(Func, &Parms);

	if (Key != nullptr)
		*Key = std::move(Parms.Key);

	if (Out_Text_Line_1 != nullptr)
		*Out_Text_Line_1 = std::move(Parms.Out_Text_Line_1);

	if (Out_Text_Line_2 != nullptr)
		*Out_Text_Line_2 = std::move(Parms.Out_Text_Line_2);
}


// Function BP_InteractableChest.BP_InteractableChest_C.GiveBonusToPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableChest_C::GiveBonusToPlayer(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "GiveBonusToPlayer");

	Params::BP_InteractableChest_C_GiveBonusToPlayer Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractableChest.BP_InteractableChest_C.LockChest
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractableChest_C::LockChest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "LockChest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.On Death
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_InteractableChest_C::On_Death()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "On Death");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.OnOpenFailed
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            InteractingPawn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableChest_C::OnOpenFailed(class APawn* InteractingPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "OnOpenFailed");

	Params::BP_InteractableChest_C_OnOpenFailed Parms{};

	Parms.InteractingPawn = InteractingPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractableChest.BP_InteractableChest_C.OnReady_9598EB81436B5D1269AB1C99A64EF8BC
// (BlueprintCallable, BlueprintEvent)

void ABP_InteractableChest_C::OnReady_9598EB81436B5D1269AB1C99A64EF8BC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "OnReady_9598EB81436B5D1269AB1C99A64EF8BC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.OnRep_bOpened
// (BlueprintCallable, BlueprintEvent)

void ABP_InteractableChest_C::OnRep_bOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "OnRep_bOpened");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.OnRep_MaxQuality
// (BlueprintCallable, BlueprintEvent)

void ABP_InteractableChest_C::OnRep_MaxQuality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "OnRep_MaxQuality");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.OpenChest
// (BlueprintCallable, BlueprintEvent)

void ABP_InteractableChest_C::OpenChest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "OpenChest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.OpenChestTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_InteractableChest_C::OpenChestTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "OpenChestTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.OpenChestTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_InteractableChest_C::OpenChestTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "OpenChestTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.PerformInteraction on Server
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            InteractingPawn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableChest_C::PerformInteraction_on_Server(class APawn* InteractingPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "PerformInteraction on Server");

	Params::BP_InteractableChest_C_PerformInteraction_on_Server Parms{};

	Parms.InteractingPawn = InteractingPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractableChest.BP_InteractableChest_C.PerformInteractionBrokenOnServer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            InteractingPawn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableChest_C::PerformInteractionBrokenOnServer(class APawn* InteractingPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "PerformInteractionBrokenOnServer");

	Params::BP_InteractableChest_C_PerformInteractionBrokenOnServer Parms{};

	Parms.InteractingPawn = InteractingPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractableChest.BP_InteractableChest_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_InteractableChest_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.UnlockChest
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractableChest_C::UnlockChest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "UnlockChest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.UpdateMaxQuality
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_InteractableChest_C::UpdateMaxQuality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "UpdateMaxQuality");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableChest.BP_InteractableChest_C.SetDiffraction
// (Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AActor*                           OwnerActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAkComponent*                     SpeakerComponent                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableChest_C::SetDiffraction(class AActor* OwnerActor, const class UAkComponent* SpeakerComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableChest_C", "SetDiffraction");

	Params::BP_InteractableChest_C_SetDiffraction Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.SpeakerComponent = SpeakerComponent;

	UObject::ProcessEvent(Func, &Parms);
}

}


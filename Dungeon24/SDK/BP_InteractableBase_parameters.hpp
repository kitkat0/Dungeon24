#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractableBase

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function BP_InteractableBase.BP_InteractableBase_C.CanPlayerInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_InteractableBase_C_CanPlayerInteract final
{
public:
	class ALyraCharacter*                         Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanInteract;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_CanPlayerInteract) == 0x000008, "Wrong alignment on BP_InteractableBase_C_CanPlayerInteract");
static_assert(sizeof(BP_InteractableBase_C_CanPlayerInteract) == 0x000010, "Wrong size on BP_InteractableBase_C_CanPlayerInteract");
static_assert(offsetof(BP_InteractableBase_C_CanPlayerInteract, Player) == 0x000000, "Member 'BP_InteractableBase_C_CanPlayerInteract::Player' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_CanPlayerInteract, bCanInteract) == 0x000008, "Member 'BP_InteractableBase_C_CanPlayerInteract::bCanInteract' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.DealInteractStatList
// 0x0038 (0x0038 - 0x0000)
struct BP_InteractableBase_C_DealInteractStatList final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetInterableStatIdList_ReturnValue;       // 0x0018(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_DealInteractStatList) == 0x000008, "Wrong alignment on BP_InteractableBase_C_DealInteractStatList");
static_assert(sizeof(BP_InteractableBase_C_DealInteractStatList) == 0x000038, "Wrong size on BP_InteractableBase_C_DealInteractStatList");
static_assert(offsetof(BP_InteractableBase_C_DealInteractStatList, Actor) == 0x000000, "Member 'BP_InteractableBase_C_DealInteractStatList::Actor' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_DealInteractStatList, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_InteractableBase_C_DealInteractStatList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_DealInteractStatList, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_InteractableBase_C_DealInteractStatList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_DealInteractStatList, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_InteractableBase_C_DealInteractStatList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_DealInteractStatList, CallFunc_GetInterableStatIdList_ReturnValue) == 0x000018, "Member 'BP_InteractableBase_C_DealInteractStatList::CallFunc_GetInterableStatIdList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_DealInteractStatList, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_InteractableBase_C_DealInteractStatList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_DealInteractStatList, CallFunc_Array_Get_Item) == 0x00002C, "Member 'BP_InteractableBase_C_DealInteractStatList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_DealInteractStatList, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_InteractableBase_C_DealInteractStatList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.DisableDummyPlane
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractableBase_C_DisableDummyPlane final
{
public:
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_DisableDummyPlane) == 0x000001, "Wrong alignment on BP_InteractableBase_C_DisableDummyPlane");
static_assert(sizeof(BP_InteractableBase_C_DisableDummyPlane) == 0x000001, "Wrong size on BP_InteractableBase_C_DisableDummyPlane");
static_assert(offsetof(BP_InteractableBase_C_DisableDummyPlane, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000000, "Member 'BP_InteractableBase_C_DisableDummyPlane::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.ExecuteUbergraph_BP_InteractableBase
// 0x0100 (0x0100 - 0x0000)
struct BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_CustomEvent_InteractingPawn;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_Interacting_Pawn;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetTraceActor_Actor;                      // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Tgf_Character_Default_C*            K2Node_DynamicCast_AsBP_Tgf_Character_Default;     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_CustomEvent_InteractingPawn_1;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData;               // 0x0040(0x00B0)()
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase) == 0x000008, "Wrong alignment on BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase");
static_assert(sizeof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase) == 0x000100, "Wrong size on BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, EntryPoint) == 0x000000, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_CustomEvent_InteractingPawn) == 0x000008, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_CustomEvent_InteractingPawn' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_CustomEvent_Interacting_Pawn) == 0x000010, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_CustomEvent_Interacting_Pawn' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, CallFunc_GetTraceActor_Actor) == 0x000018, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::CallFunc_GetTraceActor_Actor' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_DynamicCast_AsBP_Tgf_Character_Default) == 0x000028, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_DynamicCast_AsBP_Tgf_Character_Default' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, CallFunc_ActorHasTag_ReturnValue) == 0x000031, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_CustomEvent_InteractingPawn_1) == 0x000038, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_CustomEvent_InteractingPawn_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_MakeStruct_GameplayEventData) == 0x000040, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_MakeStruct_GameplayEventData' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000F0, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000F1, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0000F8, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.Get Item Id
// 0x0004 (0x0004 - 0x0000)
struct BP_InteractableBase_C_Get_Item_Id final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_Get_Item_Id) == 0x000004, "Wrong alignment on BP_InteractableBase_C_Get_Item_Id");
static_assert(sizeof(BP_InteractableBase_C_Get_Item_Id) == 0x000004, "Wrong size on BP_InteractableBase_C_Get_Item_Id");
static_assert(offsetof(BP_InteractableBase_C_Get_Item_Id, ItemId) == 0x000000, "Member 'BP_InteractableBase_C_Get_Item_Id::ItemId' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.Get Server Check Distance
// 0x0010 (0x0010 - 0x0000)
struct BP_InteractableBase_C_Get_Server_Check_Distance final
{
public:
	double                                        Param_ServerCheckDistanceXY;                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_ServerCheckDistanceZ;                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_Get_Server_Check_Distance) == 0x000008, "Wrong alignment on BP_InteractableBase_C_Get_Server_Check_Distance");
static_assert(sizeof(BP_InteractableBase_C_Get_Server_Check_Distance) == 0x000010, "Wrong size on BP_InteractableBase_C_Get_Server_Check_Distance");
static_assert(offsetof(BP_InteractableBase_C_Get_Server_Check_Distance, Param_ServerCheckDistanceXY) == 0x000000, "Member 'BP_InteractableBase_C_Get_Server_Check_Distance::Param_ServerCheckDistanceXY' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_Get_Server_Check_Distance, Param_ServerCheckDistanceZ) == 0x000008, "Member 'BP_InteractableBase_C_Get_Server_Check_Distance::Param_ServerCheckDistanceZ' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.GetBaseInteractDistance
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractableBase_C_GetBaseInteractDistance final
{
public:
	double                                        Param_BaseInteractDistance;                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_GetBaseInteractDistance) == 0x000008, "Wrong alignment on BP_InteractableBase_C_GetBaseInteractDistance");
static_assert(sizeof(BP_InteractableBase_C_GetBaseInteractDistance) == 0x000008, "Wrong size on BP_InteractableBase_C_GetBaseInteractDistance");
static_assert(offsetof(BP_InteractableBase_C_GetBaseInteractDistance, Param_BaseInteractDistance) == 0x000000, "Member 'BP_InteractableBase_C_GetBaseInteractDistance::Param_BaseInteractDistance' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.GetEnabled
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractableBase_C_GetEnabled final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_GetEnabled) == 0x000001, "Wrong alignment on BP_InteractableBase_C_GetEnabled");
static_assert(sizeof(BP_InteractableBase_C_GetEnabled) == 0x000001, "Wrong size on BP_InteractableBase_C_GetEnabled");
static_assert(offsetof(BP_InteractableBase_C_GetEnabled, Result) == 0x000000, "Member 'BP_InteractableBase_C_GetEnabled::Result' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.GetInteractionPromptText
// 0x0050 (0x0050 - 0x0000)
struct BP_InteractableBase_C_GetInteractionPromptText final
{
public:
	class APlayerController*                      Param_Instigator;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   Key;                                               // 0x0008(0x0018)(Parm, OutParm)
	class FText                                   Out_Text_Line_1;                                   // 0x0020(0x0018)(Parm, OutParm)
	class FText                                   Out_Text_Line_2;                                   // 0x0038(0x0018)(Parm, OutParm)
};
static_assert(alignof(BP_InteractableBase_C_GetInteractionPromptText) == 0x000008, "Wrong alignment on BP_InteractableBase_C_GetInteractionPromptText");
static_assert(sizeof(BP_InteractableBase_C_GetInteractionPromptText) == 0x000050, "Wrong size on BP_InteractableBase_C_GetInteractionPromptText");
static_assert(offsetof(BP_InteractableBase_C_GetInteractionPromptText, Param_Instigator) == 0x000000, "Member 'BP_InteractableBase_C_GetInteractionPromptText::Param_Instigator' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_GetInteractionPromptText, Key) == 0x000008, "Member 'BP_InteractableBase_C_GetInteractionPromptText::Key' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_GetInteractionPromptText, Out_Text_Line_1) == 0x000020, "Member 'BP_InteractableBase_C_GetInteractionPromptText::Out_Text_Line_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_GetInteractionPromptText, Out_Text_Line_2) == 0x000038, "Member 'BP_InteractableBase_C_GetInteractionPromptText::Out_Text_Line_2' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.GetTraceActor
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractableBase_C_GetTraceActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_GetTraceActor) == 0x000008, "Wrong alignment on BP_InteractableBase_C_GetTraceActor");
static_assert(sizeof(BP_InteractableBase_C_GetTraceActor) == 0x000008, "Wrong size on BP_InteractableBase_C_GetTraceActor");
static_assert(offsetof(BP_InteractableBase_C_GetTraceActor, Actor) == 0x000000, "Member 'BP_InteractableBase_C_GetTraceActor::Actor' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.IsPerformingInteraction
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractableBase_C_IsPerformingInteraction final
{
public:
	bool                                          Param_bPerformingInteraction;                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_IsPerformingInteraction) == 0x000001, "Wrong alignment on BP_InteractableBase_C_IsPerformingInteraction");
static_assert(sizeof(BP_InteractableBase_C_IsPerformingInteraction) == 0x000001, "Wrong size on BP_InteractableBase_C_IsPerformingInteraction");
static_assert(offsetof(BP_InteractableBase_C_IsPerformingInteraction, Param_bPerformingInteraction) == 0x000000, "Member 'BP_InteractableBase_C_IsPerformingInteraction::Param_bPerformingInteraction' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.On Set Interactable
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractableBase_C_On_Set_Interactable final
{
public:
	class APawn*                                  Interacting_Pawn;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_On_Set_Interactable) == 0x000008, "Wrong alignment on BP_InteractableBase_C_On_Set_Interactable");
static_assert(sizeof(BP_InteractableBase_C_On_Set_Interactable) == 0x000008, "Wrong size on BP_InteractableBase_C_On_Set_Interactable");
static_assert(offsetof(BP_InteractableBase_C_On_Set_Interactable, Interacting_Pawn) == 0x000000, "Member 'BP_InteractableBase_C_On_Set_Interactable::Interacting_Pawn' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.PerformInteraction on Server
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractableBase_C_PerformInteraction_on_Server final
{
public:
	class APawn*                                  InteractingPawn;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_PerformInteraction_on_Server) == 0x000008, "Wrong alignment on BP_InteractableBase_C_PerformInteraction_on_Server");
static_assert(sizeof(BP_InteractableBase_C_PerformInteraction_on_Server) == 0x000008, "Wrong size on BP_InteractableBase_C_PerformInteraction_on_Server");
static_assert(offsetof(BP_InteractableBase_C_PerformInteraction_on_Server, InteractingPawn) == 0x000000, "Member 'BP_InteractableBase_C_PerformInteraction_on_Server::InteractingPawn' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.PerformInteractionBrokenOnServer
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractableBase_C_PerformInteractionBrokenOnServer final
{
public:
	class APawn*                                  InteractingPawn;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_PerformInteractionBrokenOnServer) == 0x000008, "Wrong alignment on BP_InteractableBase_C_PerformInteractionBrokenOnServer");
static_assert(sizeof(BP_InteractableBase_C_PerformInteractionBrokenOnServer) == 0x000008, "Wrong size on BP_InteractableBase_C_PerformInteractionBrokenOnServer");
static_assert(offsetof(BP_InteractableBase_C_PerformInteractionBrokenOnServer, InteractingPawn) == 0x000000, "Member 'BP_InteractableBase_C_PerformInteractionBrokenOnServer::InteractingPawn' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractableBase_C_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_SetEnabled) == 0x000001, "Wrong alignment on BP_InteractableBase_C_SetEnabled");
static_assert(sizeof(BP_InteractableBase_C_SetEnabled) == 0x000001, "Wrong size on BP_InteractableBase_C_SetEnabled");
static_assert(offsetof(BP_InteractableBase_C_SetEnabled, Enabled) == 0x000000, "Member 'BP_InteractableBase_C_SetEnabled::Enabled' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.SetHighlighting
// 0x0040 (0x0040 - 0x0000)
struct BP_InteractableBase_C_SetHighlighting final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Highlighting;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 CallFunc_FindComponentsByClass_ReturnValue;        // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentHasTag_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_SetHighlighting) == 0x000008, "Wrong alignment on BP_InteractableBase_C_SetHighlighting");
static_assert(sizeof(BP_InteractableBase_C_SetHighlighting) == 0x000040, "Wrong size on BP_InteractableBase_C_SetHighlighting");
static_assert(offsetof(BP_InteractableBase_C_SetHighlighting, Actor) == 0x000000, "Member 'BP_InteractableBase_C_SetHighlighting::Actor' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlighting, Highlighting) == 0x000008, "Member 'BP_InteractableBase_C_SetHighlighting::Highlighting' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlighting, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_InteractableBase_C_SetHighlighting::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlighting, CallFunc_FindComponentsByClass_ReturnValue) == 0x000010, "Member 'BP_InteractableBase_C_SetHighlighting::CallFunc_FindComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlighting, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_InteractableBase_C_SetHighlighting::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlighting, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_InteractableBase_C_SetHighlighting::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlighting, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_InteractableBase_C_SetHighlighting::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlighting, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_InteractableBase_C_SetHighlighting::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlighting, CallFunc_ComponentHasTag_ReturnValue) == 0x000038, "Member 'BP_InteractableBase_C_SetHighlighting::CallFunc_ComponentHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlighting, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'BP_InteractableBase_C_SetHighlighting::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlighting, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_InteractableBase_C_SetHighlighting::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.SetHighlightingRecursively
// 0x0040 (0x0040 - 0x0000)
struct BP_InteractableBase_C_SetHighlightingRecursively final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Highlighting;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAttachedActors_OutActors;              // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_SetHighlightingRecursively) == 0x000008, "Wrong alignment on BP_InteractableBase_C_SetHighlightingRecursively");
static_assert(sizeof(BP_InteractableBase_C_SetHighlightingRecursively) == 0x000040, "Wrong size on BP_InteractableBase_C_SetHighlightingRecursively");
static_assert(offsetof(BP_InteractableBase_C_SetHighlightingRecursively, Actor) == 0x000000, "Member 'BP_InteractableBase_C_SetHighlightingRecursively::Actor' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlightingRecursively, Highlighting) == 0x000008, "Member 'BP_InteractableBase_C_SetHighlightingRecursively::Highlighting' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlightingRecursively, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_InteractableBase_C_SetHighlightingRecursively::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlightingRecursively, CallFunc_GetAttachedActors_OutActors) == 0x000010, "Member 'BP_InteractableBase_C_SetHighlightingRecursively::CallFunc_GetAttachedActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlightingRecursively, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_InteractableBase_C_SetHighlightingRecursively::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlightingRecursively, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_InteractableBase_C_SetHighlightingRecursively::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlightingRecursively, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_InteractableBase_C_SetHighlightingRecursively::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlightingRecursively, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_InteractableBase_C_SetHighlightingRecursively::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlightingRecursively, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_InteractableBase_C_SetHighlightingRecursively::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetHighlightingRecursively, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_InteractableBase_C_SetHighlightingRecursively::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.SetMeshStared
// 0x0030 (0x0030 - 0x0000)
struct BP_InteractableBase_C_SetMeshStared final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Stared;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component_1;      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_SetMeshStared) == 0x000008, "Wrong alignment on BP_InteractableBase_C_SetMeshStared");
static_assert(sizeof(BP_InteractableBase_C_SetMeshStared) == 0x000030, "Wrong size on BP_InteractableBase_C_SetMeshStared");
static_assert(offsetof(BP_InteractableBase_C_SetMeshStared, Mesh) == 0x000000, "Member 'BP_InteractableBase_C_SetMeshStared::Mesh' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetMeshStared, Stared) == 0x000008, "Member 'BP_InteractableBase_C_SetMeshStared::Stared' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetMeshStared, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x000010, "Member 'BP_InteractableBase_C_SetMeshStared::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetMeshStared, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_InteractableBase_C_SetMeshStared::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetMeshStared, K2Node_DynamicCast_AsStatic_Mesh_Component_1) == 0x000020, "Member 'BP_InteractableBase_C_SetMeshStared::K2Node_DynamicCast_AsStatic_Mesh_Component_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_SetMeshStared, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_InteractableBase_C_SetMeshStared::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.WakeUpMonsters
// 0x0098 (0x0098 - 0x0000)
struct BP_InteractableBase_C_WakeUpMonsters final
{
public:
	class AActor*                                 Param_Instigator;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_ActorSpawnPoint_C>   CallFunc_Array_Get_Item;                           // 0x0020(0x0030)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ActorSpawnPoint_C*                  K2Node_DynamicCast_AsBP_Actor_Spawn_Point;         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Tgf_Monster_C*                      K2Node_DynamicCast_AsBP_Tgf_Monster;               // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_WakeUpMonsters) == 0x000008, "Wrong alignment on BP_InteractableBase_C_WakeUpMonsters");
static_assert(sizeof(BP_InteractableBase_C_WakeUpMonsters) == 0x000098, "Wrong size on BP_InteractableBase_C_WakeUpMonsters");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, Param_Instigator) == 0x000000, "Member 'BP_InteractableBase_C_WakeUpMonsters::Param_Instigator' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_InteractableBase_C_WakeUpMonsters::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_InteractableBase_C_WakeUpMonsters::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_InteractableBase_C_WakeUpMonsters::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'BP_InteractableBase_C_WakeUpMonsters::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, Temp_int_Loop_Counter_Variable_1) == 0x000018, "Member 'BP_InteractableBase_C_WakeUpMonsters::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_InteractableBase_C_WakeUpMonsters::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_InteractableBase_C_WakeUpMonsters::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000058, "Member 'BP_InteractableBase_C_WakeUpMonsters::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_InteractableBase_C_WakeUpMonsters::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, K2Node_DynamicCast_AsBP_Actor_Spawn_Point) == 0x000068, "Member 'BP_InteractableBase_C_WakeUpMonsters::K2Node_DynamicCast_AsBP_Actor_Spawn_Point' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_InteractableBase_C_WakeUpMonsters::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, CallFunc_IsValid_ReturnValue) == 0x000071, "Member 'BP_InteractableBase_C_WakeUpMonsters::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'BP_InteractableBase_C_WakeUpMonsters::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, CallFunc_Array_Length_ReturnValue_1) == 0x000080, "Member 'BP_InteractableBase_C_WakeUpMonsters::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, CallFunc_IsValid_ReturnValue_1) == 0x000084, "Member 'BP_InteractableBase_C_WakeUpMonsters::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, CallFunc_Less_IntInt_ReturnValue_1) == 0x000085, "Member 'BP_InteractableBase_C_WakeUpMonsters::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, K2Node_DynamicCast_AsBP_Tgf_Monster) == 0x000088, "Member 'BP_InteractableBase_C_WakeUpMonsters::K2Node_DynamicCast_AsBP_Tgf_Monster' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'BP_InteractableBase_C_WakeUpMonsters::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_WakeUpMonsters, CallFunc_Add_IntInt_ReturnValue_1) == 0x000094, "Member 'BP_InteractableBase_C_WakeUpMonsters::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameSubtitles

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "GameSubtitles_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UMG_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class GameSubtitles.SubtitleDisplayOptions
// 0x0180 (0x01B0 - 0x0030)
class USubtitleDisplayOptions final : public UDataAsset
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0030(0x0058)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayTextSizes[0x5];                             // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DisplayTextColors[0x2];                            // 0x009C(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayBorderSize[0x3];                            // 0x00BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayBackgroundOpacity[0x5];                     // 0x00C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x00E0(0x00D0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubtitleDisplayOptions">();
	}
	static class USubtitleDisplayOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitleDisplayOptions>();
	}
};
static_assert(alignof(USubtitleDisplayOptions) == 0x000010, "Wrong alignment on USubtitleDisplayOptions");
static_assert(sizeof(USubtitleDisplayOptions) == 0x0001B0, "Wrong size on USubtitleDisplayOptions");
static_assert(offsetof(USubtitleDisplayOptions, Font) == 0x000030, "Member 'USubtitleDisplayOptions::Font' has a wrong offset!");
static_assert(offsetof(USubtitleDisplayOptions, DisplayTextSizes) == 0x000088, "Member 'USubtitleDisplayOptions::DisplayTextSizes' has a wrong offset!");
static_assert(offsetof(USubtitleDisplayOptions, DisplayTextColors) == 0x00009C, "Member 'USubtitleDisplayOptions::DisplayTextColors' has a wrong offset!");
static_assert(offsetof(USubtitleDisplayOptions, DisplayBorderSize) == 0x0000BC, "Member 'USubtitleDisplayOptions::DisplayBorderSize' has a wrong offset!");
static_assert(offsetof(USubtitleDisplayOptions, DisplayBackgroundOpacity) == 0x0000C8, "Member 'USubtitleDisplayOptions::DisplayBackgroundOpacity' has a wrong offset!");
static_assert(offsetof(USubtitleDisplayOptions, BackgroundBrush) == 0x0000E0, "Member 'USubtitleDisplayOptions::BackgroundBrush' has a wrong offset!");

// Class GameSubtitles.MediaSubtitlesPlayer
// 0x0020 (0x0048 - 0x0028)
class UMediaSubtitlesPlayer final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlays*                              SourceSubtitles;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToMediaPlayer(class UMediaPlayer* InMediaPlayer);
	void Play();
	void SetSubtitles(class UOverlays* Subtitles);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaSubtitlesPlayer">();
	}
	static class UMediaSubtitlesPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaSubtitlesPlayer>();
	}
};
static_assert(alignof(UMediaSubtitlesPlayer) == 0x000008, "Wrong alignment on UMediaSubtitlesPlayer");
static_assert(sizeof(UMediaSubtitlesPlayer) == 0x000048, "Wrong size on UMediaSubtitlesPlayer");
static_assert(offsetof(UMediaSubtitlesPlayer, SourceSubtitles) == 0x000030, "Member 'UMediaSubtitlesPlayer::SourceSubtitles' has a wrong offset!");

// Class GameSubtitles.SubtitleDisplaySubsystem
// 0x0020 (0x0050 - 0x0030)
class USubtitleDisplaySubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubtitleFormat                        SubtitleFormat;                                    // 0x0048(0x0004)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubtitleDisplaySubsystem">();
	}
	static class USubtitleDisplaySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitleDisplaySubsystem>();
	}
};
static_assert(alignof(USubtitleDisplaySubsystem) == 0x000008, "Wrong alignment on USubtitleDisplaySubsystem");
static_assert(sizeof(USubtitleDisplaySubsystem) == 0x000050, "Wrong size on USubtitleDisplaySubsystem");
static_assert(offsetof(USubtitleDisplaySubsystem, SubtitleFormat) == 0x000048, "Member 'USubtitleDisplaySubsystem::SubtitleFormat' has a wrong offset!");

// Class GameSubtitles.SubtitleDisplay
// 0x0450 (0x05A0 - 0x0150)
class USubtitleDisplay final : public UWidget
{
public:
	struct FSubtitleFormat                        Format;                                            // 0x0150(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USubtitleDisplayOptions*                Options;                                           // 0x0158(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WrapTextAt;                                        // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviewMode;                                      // 0x0164(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PreviewText;                                       // 0x0168(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        GeneratedStyle;                                    // 0x0180(0x0340)(Transient, NativeAccessSpecifierPrivate)
	struct FSlateBrush                            GeneratedBackgroundBorder;                         // 0x04C0(0x00D0)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_590[0x10];                                     // 0x0590(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool HasSubtitles() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubtitleDisplay">();
	}
	static class USubtitleDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitleDisplay>();
	}
};
static_assert(alignof(USubtitleDisplay) == 0x000010, "Wrong alignment on USubtitleDisplay");
static_assert(sizeof(USubtitleDisplay) == 0x0005A0, "Wrong size on USubtitleDisplay");
static_assert(offsetof(USubtitleDisplay, Format) == 0x000150, "Member 'USubtitleDisplay::Format' has a wrong offset!");
static_assert(offsetof(USubtitleDisplay, Options) == 0x000158, "Member 'USubtitleDisplay::Options' has a wrong offset!");
static_assert(offsetof(USubtitleDisplay, WrapTextAt) == 0x000160, "Member 'USubtitleDisplay::WrapTextAt' has a wrong offset!");
static_assert(offsetof(USubtitleDisplay, bPreviewMode) == 0x000164, "Member 'USubtitleDisplay::bPreviewMode' has a wrong offset!");
static_assert(offsetof(USubtitleDisplay, PreviewText) == 0x000168, "Member 'USubtitleDisplay::PreviewText' has a wrong offset!");
static_assert(offsetof(USubtitleDisplay, GeneratedStyle) == 0x000180, "Member 'USubtitleDisplay::GeneratedStyle' has a wrong offset!");
static_assert(offsetof(USubtitleDisplay, GeneratedBackgroundBorder) == 0x0004C0, "Member 'USubtitleDisplay::GeneratedBackgroundBorder' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameSettings

#include "Basic.hpp"

#include "CommonUI_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "GameSettings_structs.hpp"


namespace SDK
{

// Class GameSettings.GameSettingPressAnyKey
// 0x0088 (0x0470 - 0x03E8)
class UGameSettingPressAnyKey : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_3E8[0x30];                                     // 0x03E8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTGFKeySelected;                                  // 0x0418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTGFInvalidKeySelected;                           // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTGFTwoKeysSelected;                              // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTGFKeySelectionCanceled;                         // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_458[0x18];                                     // 0x0458(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingPressAnyKey">();
	}
	static class UGameSettingPressAnyKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingPressAnyKey>();
	}
};
static_assert(alignof(UGameSettingPressAnyKey) == 0x000008, "Wrong alignment on UGameSettingPressAnyKey");
static_assert(sizeof(UGameSettingPressAnyKey) == 0x000470, "Wrong size on UGameSettingPressAnyKey");
static_assert(offsetof(UGameSettingPressAnyKey, OnTGFKeySelected) == 0x000418, "Member 'UGameSettingPressAnyKey::OnTGFKeySelected' has a wrong offset!");
static_assert(offsetof(UGameSettingPressAnyKey, OnTGFInvalidKeySelected) == 0x000428, "Member 'UGameSettingPressAnyKey::OnTGFInvalidKeySelected' has a wrong offset!");
static_assert(offsetof(UGameSettingPressAnyKey, OnTGFTwoKeysSelected) == 0x000438, "Member 'UGameSettingPressAnyKey::OnTGFTwoKeysSelected' has a wrong offset!");
static_assert(offsetof(UGameSettingPressAnyKey, OnTGFKeySelectionCanceled) == 0x000448, "Member 'UGameSettingPressAnyKey::OnTGFKeySelectionCanceled' has a wrong offset!");

// Class GameSettings.KeyAlreadyBoundWarning
// 0x0010 (0x0480 - 0x0470)
class UKeyAlreadyBoundWarning final : public UGameSettingPressAnyKey
{
public:
	class UTextBlock*                             WarningText;                                       // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             CancelText;                                        // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeyAlreadyBoundWarning">();
	}
	static class UKeyAlreadyBoundWarning* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeyAlreadyBoundWarning>();
	}
};
static_assert(alignof(UKeyAlreadyBoundWarning) == 0x000008, "Wrong alignment on UKeyAlreadyBoundWarning");
static_assert(sizeof(UKeyAlreadyBoundWarning) == 0x000480, "Wrong size on UKeyAlreadyBoundWarning");
static_assert(offsetof(UKeyAlreadyBoundWarning, WarningText) == 0x000470, "Member 'UKeyAlreadyBoundWarning::WarningText' has a wrong offset!");
static_assert(offsetof(UKeyAlreadyBoundWarning, CancelText) == 0x000478, "Member 'UKeyAlreadyBoundWarning::CancelText' has a wrong offset!");

// Class GameSettings.GameSetting
// 0x0140 (0x0168 - 0x0028)
class UGameSetting : public UObject
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalPlayer*                           LocalPlayer;                                       // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameSetting*                           SettingParent;                                     // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameSettingRegistry*                   OwningRegistry;                                    // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0xE0];                                      // 0x0088(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ESlateVisibility GetDisplayNameVisibility();
	void SetLocalPlayer(class ULocalPlayer* InLocalPlayer);
	void Startup();

	class FText GetDescriptionRichText() const;
	class FName GetDevName() const;
	class FText GetDisplayName() const;
	class FText GetDynamicDetails() const;
	const struct FGameplayTagContainer GetTags() const;
	class FText GetWarningRichText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSetting">();
	}
	static class UGameSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSetting>();
	}
};
static_assert(alignof(UGameSetting) == 0x000008, "Wrong alignment on UGameSetting");
static_assert(sizeof(UGameSetting) == 0x000168, "Wrong size on UGameSetting");
static_assert(offsetof(UGameSetting, LocalPlayer) == 0x000070, "Member 'UGameSetting::LocalPlayer' has a wrong offset!");
static_assert(offsetof(UGameSetting, SettingParent) == 0x000078, "Member 'UGameSetting::SettingParent' has a wrong offset!");
static_assert(offsetof(UGameSetting, OwningRegistry) == 0x000080, "Member 'UGameSetting::OwningRegistry' has a wrong offset!");

// Class GameSettings.GameSettingAction
// 0x0050 (0x01B8 - 0x0168)
class UGameSettingAction final : public UGameSetting
{
public:
	uint8                                         Pad_168[0x50];                                     // 0x0168(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingAction">();
	}
	static class UGameSettingAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingAction>();
	}
};
static_assert(alignof(UGameSettingAction) == 0x000008, "Wrong alignment on UGameSettingAction");
static_assert(sizeof(UGameSettingAction) == 0x0001B8, "Wrong size on UGameSettingAction");

// Class GameSettings.GameSettingCollection
// 0x0010 (0x0178 - 0x0168)
class UGameSettingCollection : public UGameSetting
{
public:
	TArray<class UGameSetting*>                   Settings;                                          // 0x0168(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingCollection">();
	}
	static class UGameSettingCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingCollection>();
	}
};
static_assert(alignof(UGameSettingCollection) == 0x000008, "Wrong alignment on UGameSettingCollection");
static_assert(sizeof(UGameSettingCollection) == 0x000178, "Wrong size on UGameSettingCollection");
static_assert(offsetof(UGameSettingCollection, Settings) == 0x000168, "Member 'UGameSettingCollection::Settings' has a wrong offset!");

// Class GameSettings.GameSettingCollectionPage
// 0x0030 (0x01A8 - 0x0178)
class UGameSettingCollectionPage final : public UGameSettingCollection
{
public:
	uint8                                         Pad_178[0x30];                                     // 0x0178(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingCollectionPage">();
	}
	static class UGameSettingCollectionPage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingCollectionPage>();
	}
};
static_assert(alignof(UGameSettingCollectionPage) == 0x000008, "Wrong alignment on UGameSettingCollectionPage");
static_assert(sizeof(UGameSettingCollectionPage) == 0x0001A8, "Wrong size on UGameSettingCollectionPage");

// Class GameSettings.GameSettingValue
// 0x0000 (0x0168 - 0x0168)
class UGameSettingValue : public UGameSetting
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingValue">();
	}
	static class UGameSettingValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingValue>();
	}
};
static_assert(alignof(UGameSettingValue) == 0x000008, "Wrong alignment on UGameSettingValue");
static_assert(sizeof(UGameSettingValue) == 0x000168, "Wrong size on UGameSettingValue");

// Class GameSettings.GameSettingValueDiscrete
// 0x0000 (0x0168 - 0x0168)
class UGameSettingValueDiscrete : public UGameSettingValue
{
public:
	int32 GetDiscreteOptionDefaultIndex() const;
	int32 GetDiscreteOptionIndex() const;
	TArray<class FText> GetDiscreteOptions() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingValueDiscrete">();
	}
	static class UGameSettingValueDiscrete* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingValueDiscrete>();
	}
};
static_assert(alignof(UGameSettingValueDiscrete) == 0x000008, "Wrong alignment on UGameSettingValueDiscrete");
static_assert(sizeof(UGameSettingValueDiscrete) == 0x000168, "Wrong size on UGameSettingValueDiscrete");

// Class GameSettings.GameSettingValueDiscreteDynamic
// 0x0068 (0x01D0 - 0x0168)
class UGameSettingValueDiscreteDynamic : public UGameSettingValueDiscrete
{
public:
	uint8                                         Pad_168[0x68];                                     // 0x0168(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingValueDiscreteDynamic">();
	}
	static class UGameSettingValueDiscreteDynamic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingValueDiscreteDynamic>();
	}
};
static_assert(alignof(UGameSettingValueDiscreteDynamic) == 0x000008, "Wrong alignment on UGameSettingValueDiscreteDynamic");
static_assert(sizeof(UGameSettingValueDiscreteDynamic) == 0x0001D0, "Wrong size on UGameSettingValueDiscreteDynamic");

// Class GameSettings.GameSettingValueDiscreteDynamic_Bool
// 0x0000 (0x01D0 - 0x01D0)
class UGameSettingValueDiscreteDynamic_Bool final : public UGameSettingValueDiscreteDynamic
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingValueDiscreteDynamic_Bool">();
	}
	static class UGameSettingValueDiscreteDynamic_Bool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingValueDiscreteDynamic_Bool>();
	}
};
static_assert(alignof(UGameSettingValueDiscreteDynamic_Bool) == 0x000008, "Wrong alignment on UGameSettingValueDiscreteDynamic_Bool");
static_assert(sizeof(UGameSettingValueDiscreteDynamic_Bool) == 0x0001D0, "Wrong size on UGameSettingValueDiscreteDynamic_Bool");

// Class GameSettings.GameSettingValueDiscreteDynamic_Number
// 0x0000 (0x01D0 - 0x01D0)
class UGameSettingValueDiscreteDynamic_Number final : public UGameSettingValueDiscreteDynamic
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingValueDiscreteDynamic_Number">();
	}
	static class UGameSettingValueDiscreteDynamic_Number* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingValueDiscreteDynamic_Number>();
	}
};
static_assert(alignof(UGameSettingValueDiscreteDynamic_Number) == 0x000008, "Wrong alignment on UGameSettingValueDiscreteDynamic_Number");
static_assert(sizeof(UGameSettingValueDiscreteDynamic_Number) == 0x0001D0, "Wrong size on UGameSettingValueDiscreteDynamic_Number");

// Class GameSettings.GameSettingValueDiscreteDynamic_Enum
// 0x0000 (0x01D0 - 0x01D0)
class UGameSettingValueDiscreteDynamic_Enum : public UGameSettingValueDiscreteDynamic
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingValueDiscreteDynamic_Enum">();
	}
	static class UGameSettingValueDiscreteDynamic_Enum* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingValueDiscreteDynamic_Enum>();
	}
};
static_assert(alignof(UGameSettingValueDiscreteDynamic_Enum) == 0x000008, "Wrong alignment on UGameSettingValueDiscreteDynamic_Enum");
static_assert(sizeof(UGameSettingValueDiscreteDynamic_Enum) == 0x0001D0, "Wrong size on UGameSettingValueDiscreteDynamic_Enum");

// Class GameSettings.GameSettingValueDiscreteDynamic_Color
// 0x0000 (0x01D0 - 0x01D0)
class UGameSettingValueDiscreteDynamic_Color final : public UGameSettingValueDiscreteDynamic
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingValueDiscreteDynamic_Color">();
	}
	static class UGameSettingValueDiscreteDynamic_Color* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingValueDiscreteDynamic_Color>();
	}
};
static_assert(alignof(UGameSettingValueDiscreteDynamic_Color) == 0x000008, "Wrong alignment on UGameSettingValueDiscreteDynamic_Color");
static_assert(sizeof(UGameSettingValueDiscreteDynamic_Color) == 0x0001D0, "Wrong size on UGameSettingValueDiscreteDynamic_Color");

// Class GameSettings.GameSettingValueDiscreteDynamic_Vector2D
// 0x0000 (0x01D0 - 0x01D0)
class UGameSettingValueDiscreteDynamic_Vector2D final : public UGameSettingValueDiscreteDynamic
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingValueDiscreteDynamic_Vector2D">();
	}
	static class UGameSettingValueDiscreteDynamic_Vector2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingValueDiscreteDynamic_Vector2D>();
	}
};
static_assert(alignof(UGameSettingValueDiscreteDynamic_Vector2D) == 0x000008, "Wrong alignment on UGameSettingValueDiscreteDynamic_Vector2D");
static_assert(sizeof(UGameSettingValueDiscreteDynamic_Vector2D) == 0x0001D0, "Wrong size on UGameSettingValueDiscreteDynamic_Vector2D");

// Class GameSettings.GameSettingValueScalar
// 0x0000 (0x0168 - 0x0168)
class UGameSettingValueScalar : public UGameSettingValue
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingValueScalar">();
	}
	static class UGameSettingValueScalar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingValueScalar>();
	}
};
static_assert(alignof(UGameSettingValueScalar) == 0x000008, "Wrong alignment on UGameSettingValueScalar");
static_assert(sizeof(UGameSettingValueScalar) == 0x000168, "Wrong size on UGameSettingValueScalar");

// Class GameSettings.GameSettingValueScalarDynamic
// 0x00C8 (0x0230 - 0x0168)
class UGameSettingValueScalarDynamic final : public UGameSettingValueScalar
{
public:
	uint8                                         Pad_168[0xC8];                                     // 0x0168(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingValueScalarDynamic">();
	}
	static class UGameSettingValueScalarDynamic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingValueScalarDynamic>();
	}
};
static_assert(alignof(UGameSettingValueScalarDynamic) == 0x000008, "Wrong alignment on UGameSettingValueScalarDynamic");
static_assert(sizeof(UGameSettingValueScalarDynamic) == 0x000230, "Wrong size on UGameSettingValueScalarDynamic");

// Class GameSettings.GameSettingRegistry
// 0x0088 (0x00B0 - 0x0028)
class UGameSettingRegistry : public UObject
{
public:
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGameSetting*>                   TopLevelSettings;                                  // 0x0088(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UGameSetting*>                   RegisteredSettings;                                // 0x0098(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class ULocalPlayer*                           OwningLocalPlayer;                                 // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingRegistry">();
	}
	static class UGameSettingRegistry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingRegistry>();
	}
};
static_assert(alignof(UGameSettingRegistry) == 0x000008, "Wrong alignment on UGameSettingRegistry");
static_assert(sizeof(UGameSettingRegistry) == 0x0000B0, "Wrong size on UGameSettingRegistry");
static_assert(offsetof(UGameSettingRegistry, TopLevelSettings) == 0x000088, "Member 'UGameSettingRegistry::TopLevelSettings' has a wrong offset!");
static_assert(offsetof(UGameSettingRegistry, RegisteredSettings) == 0x000098, "Member 'UGameSettingRegistry::RegisteredSettings' has a wrong offset!");
static_assert(offsetof(UGameSettingRegistry, OwningLocalPlayer) == 0x0000A8, "Member 'UGameSettingRegistry::OwningLocalPlayer' has a wrong offset!");

// Class GameSettings.GameSettingDetailExtension
// 0x0008 (0x0280 - 0x0278)
class UGameSettingDetailExtension final : public UUserWidget
{
public:
	class UGameSetting*                           Setting;                                           // 0x0278(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnSettingAssigned(class UGameSetting* InSetting);
	void OnSettingValueChanged(class UGameSetting* InSetting);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingDetailExtension">();
	}
	static class UGameSettingDetailExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingDetailExtension>();
	}
};
static_assert(alignof(UGameSettingDetailExtension) == 0x000008, "Wrong alignment on UGameSettingDetailExtension");
static_assert(sizeof(UGameSettingDetailExtension) == 0x000280, "Wrong size on UGameSettingDetailExtension");
static_assert(offsetof(UGameSettingDetailExtension, Setting) == 0x000278, "Member 'UGameSettingDetailExtension::Setting' has a wrong offset!");

// Class GameSettings.GameSettingDetailView
// 0x00D8 (0x0350 - 0x0278)
class UGameSettingDetailView final : public UUserWidget
{
public:
	class UGameSettingVisualData*                 VisualData;                                        // 0x0278(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FUserWidgetPool                        ExtensionWidgetPool;                               // 0x0280(0x0088)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UGameSetting*                           CurrentSetting;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_310[0x10];                                     // 0x0310(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_SettingName;                                  // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRichTextBlock*                   RichText_Description;                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRichTextBlock*                   RichText_DynamicDetails;                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRichTextBlock*                   RichText_WarningDetails;                           // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRichTextBlock*                   RichText_DisabledDetails;                          // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVerticalBox*                           Box_DetailsExtension;                              // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingDetailView">();
	}
	static class UGameSettingDetailView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingDetailView>();
	}
};
static_assert(alignof(UGameSettingDetailView) == 0x000008, "Wrong alignment on UGameSettingDetailView");
static_assert(sizeof(UGameSettingDetailView) == 0x000350, "Wrong size on UGameSettingDetailView");
static_assert(offsetof(UGameSettingDetailView, VisualData) == 0x000278, "Member 'UGameSettingDetailView::VisualData' has a wrong offset!");
static_assert(offsetof(UGameSettingDetailView, ExtensionWidgetPool) == 0x000280, "Member 'UGameSettingDetailView::ExtensionWidgetPool' has a wrong offset!");
static_assert(offsetof(UGameSettingDetailView, CurrentSetting) == 0x000308, "Member 'UGameSettingDetailView::CurrentSetting' has a wrong offset!");
static_assert(offsetof(UGameSettingDetailView, Text_SettingName) == 0x000320, "Member 'UGameSettingDetailView::Text_SettingName' has a wrong offset!");
static_assert(offsetof(UGameSettingDetailView, RichText_Description) == 0x000328, "Member 'UGameSettingDetailView::RichText_Description' has a wrong offset!");
static_assert(offsetof(UGameSettingDetailView, RichText_DynamicDetails) == 0x000330, "Member 'UGameSettingDetailView::RichText_DynamicDetails' has a wrong offset!");
static_assert(offsetof(UGameSettingDetailView, RichText_WarningDetails) == 0x000338, "Member 'UGameSettingDetailView::RichText_WarningDetails' has a wrong offset!");
static_assert(offsetof(UGameSettingDetailView, RichText_DisabledDetails) == 0x000340, "Member 'UGameSettingDetailView::RichText_DisabledDetails' has a wrong offset!");
static_assert(offsetof(UGameSettingDetailView, Box_DetailsExtension) == 0x000348, "Member 'UGameSettingDetailView::Box_DetailsExtension' has a wrong offset!");

// Class GameSettings.GameSettingListEntryBase
// 0x0038 (0x02F8 - 0x02C0)
class UGameSettingListEntryBase : public UCommonUserWidget
{
public:
	uint8                                         Pad_2C0[0x10];                                     // 0x02C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameSetting*                           Setting;                                           // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D8[0x18];                                     // 0x02D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Background;                                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UWidget* GetPrimaryGamepadFocusWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingListEntryBase">();
	}
	static class UGameSettingListEntryBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingListEntryBase>();
	}
};
static_assert(alignof(UGameSettingListEntryBase) == 0x000008, "Wrong alignment on UGameSettingListEntryBase");
static_assert(sizeof(UGameSettingListEntryBase) == 0x0002F8, "Wrong size on UGameSettingListEntryBase");
static_assert(offsetof(UGameSettingListEntryBase, Setting) == 0x0002D0, "Member 'UGameSettingListEntryBase::Setting' has a wrong offset!");
static_assert(offsetof(UGameSettingListEntryBase, Background) == 0x0002F0, "Member 'UGameSettingListEntryBase::Background' has a wrong offset!");

// Class GameSettings.GameSettingListEntry_Setting
// 0x0008 (0x0300 - 0x02F8)
class UGameSettingListEntry_Setting : public UGameSettingListEntryBase
{
public:
	class UCommonTextBlock*                       Text_SettingName;                                  // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingListEntry_Setting">();
	}
	static class UGameSettingListEntry_Setting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingListEntry_Setting>();
	}
};
static_assert(alignof(UGameSettingListEntry_Setting) == 0x000008, "Wrong alignment on UGameSettingListEntry_Setting");
static_assert(sizeof(UGameSettingListEntry_Setting) == 0x000300, "Wrong size on UGameSettingListEntry_Setting");
static_assert(offsetof(UGameSettingListEntry_Setting, Text_SettingName) == 0x0002F8, "Member 'UGameSettingListEntry_Setting::Text_SettingName' has a wrong offset!");

// Class GameSettings.GameSettingListEntrySetting_Discrete
// 0x0028 (0x0328 - 0x0300)
class UGameSettingListEntrySetting_Discrete final : public UGameSettingListEntry_Setting
{
public:
	class UGameSettingValueDiscrete*              DiscreteSetting;                                   // 0x0300(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Panel_Value;                                       // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameSettingRotator*                    Rotator_SettingValue;                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Decrease;                                   // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Increase;                                   // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingListEntrySetting_Discrete">();
	}
	static class UGameSettingListEntrySetting_Discrete* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingListEntrySetting_Discrete>();
	}
};
static_assert(alignof(UGameSettingListEntrySetting_Discrete) == 0x000008, "Wrong alignment on UGameSettingListEntrySetting_Discrete");
static_assert(sizeof(UGameSettingListEntrySetting_Discrete) == 0x000328, "Wrong size on UGameSettingListEntrySetting_Discrete");
static_assert(offsetof(UGameSettingListEntrySetting_Discrete, DiscreteSetting) == 0x000300, "Member 'UGameSettingListEntrySetting_Discrete::DiscreteSetting' has a wrong offset!");
static_assert(offsetof(UGameSettingListEntrySetting_Discrete, Panel_Value) == 0x000308, "Member 'UGameSettingListEntrySetting_Discrete::Panel_Value' has a wrong offset!");
static_assert(offsetof(UGameSettingListEntrySetting_Discrete, Rotator_SettingValue) == 0x000310, "Member 'UGameSettingListEntrySetting_Discrete::Rotator_SettingValue' has a wrong offset!");
static_assert(offsetof(UGameSettingListEntrySetting_Discrete, Button_Decrease) == 0x000318, "Member 'UGameSettingListEntrySetting_Discrete::Button_Decrease' has a wrong offset!");
static_assert(offsetof(UGameSettingListEntrySetting_Discrete, Button_Increase) == 0x000320, "Member 'UGameSettingListEntrySetting_Discrete::Button_Increase' has a wrong offset!");

// Class GameSettings.GameSettingListEntrySetting_Scalar
// 0x0020 (0x0320 - 0x0300)
class UGameSettingListEntrySetting_Scalar final : public UGameSettingListEntry_Setting
{
public:
	class UGameSettingValueScalar*                ScalarSetting;                                     // 0x0300(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Panel_Value;                                       // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnalogSlider*                          Slider_SettingValue;                               // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_SettingValue;                                 // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleSliderCaptureEnded();
	void HandleSliderValueChanged(float Value);
	void OnDefaultValueChanged(float DefaultValue);
	void OnValueChanged(float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingListEntrySetting_Scalar">();
	}
	static class UGameSettingListEntrySetting_Scalar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingListEntrySetting_Scalar>();
	}
};
static_assert(alignof(UGameSettingListEntrySetting_Scalar) == 0x000008, "Wrong alignment on UGameSettingListEntrySetting_Scalar");
static_assert(sizeof(UGameSettingListEntrySetting_Scalar) == 0x000320, "Wrong size on UGameSettingListEntrySetting_Scalar");
static_assert(offsetof(UGameSettingListEntrySetting_Scalar, ScalarSetting) == 0x000300, "Member 'UGameSettingListEntrySetting_Scalar::ScalarSetting' has a wrong offset!");
static_assert(offsetof(UGameSettingListEntrySetting_Scalar, Panel_Value) == 0x000308, "Member 'UGameSettingListEntrySetting_Scalar::Panel_Value' has a wrong offset!");
static_assert(offsetof(UGameSettingListEntrySetting_Scalar, Slider_SettingValue) == 0x000310, "Member 'UGameSettingListEntrySetting_Scalar::Slider_SettingValue' has a wrong offset!");
static_assert(offsetof(UGameSettingListEntrySetting_Scalar, Text_SettingValue) == 0x000318, "Member 'UGameSettingListEntrySetting_Scalar::Text_SettingValue' has a wrong offset!");

// Class GameSettings.GameSettingListEntrySetting_Action
// 0x0010 (0x0310 - 0x0300)
class UGameSettingListEntrySetting_Action final : public UGameSettingListEntry_Setting
{
public:
	class UGameSettingAction*                     ActionSetting;                                     // 0x0300(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Action;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnSettingAssigned(const class FText& ActionText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingListEntrySetting_Action">();
	}
	static class UGameSettingListEntrySetting_Action* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingListEntrySetting_Action>();
	}
};
static_assert(alignof(UGameSettingListEntrySetting_Action) == 0x000008, "Wrong alignment on UGameSettingListEntrySetting_Action");
static_assert(sizeof(UGameSettingListEntrySetting_Action) == 0x000310, "Wrong size on UGameSettingListEntrySetting_Action");
static_assert(offsetof(UGameSettingListEntrySetting_Action, ActionSetting) == 0x000300, "Member 'UGameSettingListEntrySetting_Action::ActionSetting' has a wrong offset!");
static_assert(offsetof(UGameSettingListEntrySetting_Action, Button_Action) == 0x000308, "Member 'UGameSettingListEntrySetting_Action::Button_Action' has a wrong offset!");

// Class GameSettings.GameSettingListEntrySetting_Navigation
// 0x0010 (0x0310 - 0x0300)
class UGameSettingListEntrySetting_Navigation final : public UGameSettingListEntry_Setting
{
public:
	class UGameSettingCollectionPage*             CollectionSetting;                                 // 0x0300(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Navigate;                                   // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnSettingAssigned(const class FText& ActionText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingListEntrySetting_Navigation">();
	}
	static class UGameSettingListEntrySetting_Navigation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingListEntrySetting_Navigation>();
	}
};
static_assert(alignof(UGameSettingListEntrySetting_Navigation) == 0x000008, "Wrong alignment on UGameSettingListEntrySetting_Navigation");
static_assert(sizeof(UGameSettingListEntrySetting_Navigation) == 0x000310, "Wrong size on UGameSettingListEntrySetting_Navigation");
static_assert(offsetof(UGameSettingListEntrySetting_Navigation, CollectionSetting) == 0x000300, "Member 'UGameSettingListEntrySetting_Navigation::CollectionSetting' has a wrong offset!");
static_assert(offsetof(UGameSettingListEntrySetting_Navigation, Button_Navigate) == 0x000308, "Member 'UGameSettingListEntrySetting_Navigation::Button_Navigate' has a wrong offset!");

// Class GameSettings.GameSettingListView
// 0x0060 (0x0C80 - 0x0C20)
class UGameSettingListView final : public UListView
{
public:
	class UGameSettingVisualData*                 VisualData;                                        // 0x0C20(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C28[0x58];                                     // 0x0C28(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingListView">();
	}
	static class UGameSettingListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingListView>();
	}
};
static_assert(alignof(UGameSettingListView) == 0x000010, "Wrong alignment on UGameSettingListView");
static_assert(sizeof(UGameSettingListView) == 0x000C80, "Wrong size on UGameSettingListView");
static_assert(offsetof(UGameSettingListView, VisualData) == 0x000C20, "Member 'UGameSettingListView::VisualData' has a wrong offset!");

// Class GameSettings.GameSettingPanel
// 0x0440 (0x0700 - 0x02C0)
class UGameSettingPanel final : public UCommonUserWidget
{
public:
	uint8                                         Pad_2C0[0x18];                                     // 0x02C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameSettingRegistry*                   Registry;                                          // 0x02D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGameSetting*>                   VisibleSettings;                                   // 0x02E0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UGameSetting*                           LastHoveredOrSelectedSetting;                      // 0x02F0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameSettingFilterState                FilterState;                                       // 0x02F8(0x03B8)(Transient, NativeAccessSpecifierPrivate)
	TArray<struct FGameSettingFilterState>        FilterNavigationStack;                             // 0x06B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C0[0x10];                                     // 0x06C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameSettingListView*                   ListView_Settings;                                 // 0x06D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameSettingDetailView*                 Details_Settings;                                  // 0x06D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             BP_OnExecuteNamedAction;                           // 0x06E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6F0[0x10];                                     // 0x06F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingPanel">();
	}
	static class UGameSettingPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingPanel>();
	}
};
static_assert(alignof(UGameSettingPanel) == 0x000008, "Wrong alignment on UGameSettingPanel");
static_assert(sizeof(UGameSettingPanel) == 0x000700, "Wrong size on UGameSettingPanel");
static_assert(offsetof(UGameSettingPanel, Registry) == 0x0002D8, "Member 'UGameSettingPanel::Registry' has a wrong offset!");
static_assert(offsetof(UGameSettingPanel, VisibleSettings) == 0x0002E0, "Member 'UGameSettingPanel::VisibleSettings' has a wrong offset!");
static_assert(offsetof(UGameSettingPanel, LastHoveredOrSelectedSetting) == 0x0002F0, "Member 'UGameSettingPanel::LastHoveredOrSelectedSetting' has a wrong offset!");
static_assert(offsetof(UGameSettingPanel, FilterState) == 0x0002F8, "Member 'UGameSettingPanel::FilterState' has a wrong offset!");
static_assert(offsetof(UGameSettingPanel, FilterNavigationStack) == 0x0006B0, "Member 'UGameSettingPanel::FilterNavigationStack' has a wrong offset!");
static_assert(offsetof(UGameSettingPanel, ListView_Settings) == 0x0006D0, "Member 'UGameSettingPanel::ListView_Settings' has a wrong offset!");
static_assert(offsetof(UGameSettingPanel, Details_Settings) == 0x0006D8, "Member 'UGameSettingPanel::Details_Settings' has a wrong offset!");
static_assert(offsetof(UGameSettingPanel, BP_OnExecuteNamedAction) == 0x0006E0, "Member 'UGameSettingPanel::BP_OnExecuteNamedAction' has a wrong offset!");

// Class GameSettings.GameSettingScreen
// 0x0078 (0x0460 - 0x03E8)
class UGameSettingScreen : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_3E8[0x68];                                     // 0x03E8(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameSettingPanel*                      Settings_Panel;                                    // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameSettingRegistry*                   Registry;                                          // 0x0458(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ApplyChanges();
	bool AttemptToPopNavigation();
	void CancelChanges();
	class UGameSettingCollection* GetSettingCollection(class FName SettingDevName, bool* HasAnySettings);
	void NavigateToSetting(class FName SettingDevName);
	void NavigateToSettings(const TArray<class FName>& SettingDevNames);
	void OnSettingsDirtyStateChanged(bool bSettingsDirty);

	bool HaveSettingsBeenChanged() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingScreen">();
	}
	static class UGameSettingScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingScreen>();
	}
};
static_assert(alignof(UGameSettingScreen) == 0x000008, "Wrong alignment on UGameSettingScreen");
static_assert(sizeof(UGameSettingScreen) == 0x000460, "Wrong size on UGameSettingScreen");
static_assert(offsetof(UGameSettingScreen, Settings_Panel) == 0x000450, "Member 'UGameSettingScreen::Settings_Panel' has a wrong offset!");
static_assert(offsetof(UGameSettingScreen, Registry) == 0x000458, "Member 'UGameSettingScreen::Registry' has a wrong offset!");

// Class GameSettings.GameSettingVisualData
// 0x0140 (0x0170 - 0x0030)
class UGameSettingVisualData final : public UDataAsset
{
public:
	TMap<TSubclassOf<class UGameSetting>, TSubclassOf<class UGameSettingListEntryBase>> EntryWidgetForClass;                               // 0x0030(0x0050)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<class FName, TSubclassOf<class UGameSettingListEntryBase>> EntryWidgetForName;                                // 0x0080(0x0050)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class UGameSetting>, struct FGameSettingClassExtensions> ExtensionsForClasses;                              // 0x00D0(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FGameSettingNameExtensions> ExtensionsForName;                                 // 0x0120(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingVisualData">();
	}
	static class UGameSettingVisualData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingVisualData>();
	}
};
static_assert(alignof(UGameSettingVisualData) == 0x000008, "Wrong alignment on UGameSettingVisualData");
static_assert(sizeof(UGameSettingVisualData) == 0x000170, "Wrong size on UGameSettingVisualData");
static_assert(offsetof(UGameSettingVisualData, EntryWidgetForClass) == 0x000030, "Member 'UGameSettingVisualData::EntryWidgetForClass' has a wrong offset!");
static_assert(offsetof(UGameSettingVisualData, EntryWidgetForName) == 0x000080, "Member 'UGameSettingVisualData::EntryWidgetForName' has a wrong offset!");
static_assert(offsetof(UGameSettingVisualData, ExtensionsForClasses) == 0x0000D0, "Member 'UGameSettingVisualData::ExtensionsForClasses' has a wrong offset!");
static_assert(offsetof(UGameSettingVisualData, ExtensionsForName) == 0x000120, "Member 'UGameSettingVisualData::ExtensionsForName' has a wrong offset!");

// Class GameSettings.GameSettingActionInterface
// 0x0000 (0x0028 - 0x0028)
class IGameSettingActionInterface final : public IInterface
{
public:
	bool ExecuteActionForSetting(const struct FGameplayTag& ActionTag, class UGameSetting* InSetting);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingActionInterface">();
	}
	static class IGameSettingActionInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGameSettingActionInterface>();
	}
};
static_assert(alignof(IGameSettingActionInterface) == 0x000008, "Wrong alignment on IGameSettingActionInterface");
static_assert(sizeof(IGameSettingActionInterface) == 0x000028, "Wrong size on IGameSettingActionInterface");

// Class GameSettings.GameSettingRotator
// 0x0000 (0x1570 - 0x1570)
class UGameSettingRotator final : public UCommonRotator
{
public:
	void BP_OnDefaultOptionSpecified(int32 DefaultOptionIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingRotator">();
	}
	static class UGameSettingRotator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingRotator>();
	}
};
static_assert(alignof(UGameSettingRotator) == 0x000010, "Wrong alignment on UGameSettingRotator");
static_assert(sizeof(UGameSettingRotator) == 0x001570, "Wrong size on UGameSettingRotator");

// Class GameSettings.GameResponsivePanel
// 0x0018 (0x0180 - 0x0168)
class UGameResponsivePanel final : public UPanelWidget
{
public:
	bool                                          bCanStackVertically;                               // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x17];                                     // 0x0169(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UGameResponsivePanelSlot* AddChildToGameResponsivePanel(class UWidget* Content);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameResponsivePanel">();
	}
	static class UGameResponsivePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameResponsivePanel>();
	}
};
static_assert(alignof(UGameResponsivePanel) == 0x000008, "Wrong alignment on UGameResponsivePanel");
static_assert(sizeof(UGameResponsivePanel) == 0x000180, "Wrong size on UGameResponsivePanel");
static_assert(offsetof(UGameResponsivePanel, bCanStackVertically) == 0x000168, "Member 'UGameResponsivePanel::bCanStackVertically' has a wrong offset!");

// Class GameSettings.GameResponsivePanelSlot
// 0x0008 (0x0040 - 0x0038)
class UGameResponsivePanelSlot final : public UPanelSlot
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameResponsivePanelSlot">();
	}
	static class UGameResponsivePanelSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameResponsivePanelSlot>();
	}
};
static_assert(alignof(UGameResponsivePanelSlot) == 0x000008, "Wrong alignment on UGameResponsivePanelSlot");
static_assert(sizeof(UGameResponsivePanelSlot) == 0x000040, "Wrong size on UGameResponsivePanelSlot");

}


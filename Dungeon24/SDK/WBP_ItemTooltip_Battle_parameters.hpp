#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ItemTooltip_Battle

#include "Basic.hpp"

#include "LyraGame_structs.hpp"
#include "TGFBattleProtocol_structs.hpp"


namespace SDK::Params
{

// Function WBP_ItemTooltip_Battle.WBP_ItemTooltip_Battle_C.ExecuteUbergraph_WBP_ItemTooltip_Battle
// 0x0048 (0x0048 - 0x0000)
struct WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfInventoryItemWrapper*               K2Node_CustomEvent_Item;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTgfInventoryWrapper*                   K2Node_CustomEvent_InventoryContext;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UTgfInventoryWrapper*             K2Node_CustomEvent_RootInventoryContext;           // 0x0018(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETGFProtoTgfEnItemStorageType                 K2Node_CustomEvent_pos_type;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bAttributeAsRange;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_ShowUnkonw;                     // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETgfActorCareer                               CallFunc_GetCharacterCareer_ReturnValue;           // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETgfWeaponEquipType                           CallFunc_GetWeaponEquipType_ReturnValue;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTypeId_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTgfEquipmentDefinition>    CallFunc_GetEquipmentDefinition_ReturnValue;       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle) == 0x000008, "Wrong alignment on WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle");
static_assert(sizeof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle) == 0x000048, "Wrong size on WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, EntryPoint) == 0x000000, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, K2Node_CustomEvent_Item) == 0x000008, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::K2Node_CustomEvent_Item' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, K2Node_CustomEvent_InventoryContext) == 0x000010, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::K2Node_CustomEvent_InventoryContext' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, K2Node_CustomEvent_RootInventoryContext) == 0x000018, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::K2Node_CustomEvent_RootInventoryContext' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, K2Node_CustomEvent_pos_type) == 0x000020, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::K2Node_CustomEvent_pos_type' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, K2Node_CustomEvent_bAttributeAsRange) == 0x000021, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::K2Node_CustomEvent_bAttributeAsRange' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, K2Node_CustomEvent_ShowUnkonw) == 0x000022, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::K2Node_CustomEvent_ShowUnkonw' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, CallFunc_GetCharacterCareer_ReturnValue) == 0x000023, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::CallFunc_GetCharacterCareer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, CallFunc_Array_IsEmpty_ReturnValue) == 0x000025, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, CallFunc_Array_Add_ReturnValue) == 0x000028, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, CallFunc_GetWeaponEquipType_ReturnValue) == 0x00002C, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::CallFunc_GetWeaponEquipType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, CallFunc_IsValid_ReturnValue_1) == 0x00002D, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, CallFunc_GetTypeId_ReturnValue) == 0x000030, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::CallFunc_GetTypeId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, CallFunc_GetEquipmentDefinition_ReturnValue) == 0x000038, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::CallFunc_GetEquipmentDefinition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle, CallFunc_IsValidClass_ReturnValue) == 0x000040, "Member 'WBP_ItemTooltip_Battle_C_ExecuteUbergraph_WBP_ItemTooltip_Battle::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");

// Function WBP_ItemTooltip_Battle.WBP_ItemTooltip_Battle_C.GetRightClickText
// 0x03B8 (0x03B8 - 0x0000)
struct WBP_ItemTooltip_Battle_C_GetRightClickText final
{
public:
	class FText                                   Operation;                                         // 0x0000(0x0018)(Parm, OutParm)
	class FText                                   Temp_text_Variable;                                // 0x0018(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00A8(0x0018)()
	ETGFProtoTgfEnItemStorageType                 Temp_byte_Variable;                                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_7;                              // 0x00C8(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00E0(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x00F8(0x0018)()
	class FText                                   Temp_text_Variable_10;                             // 0x0110(0x0018)()
	class FText                                   Temp_text_Variable_11;                             // 0x0128(0x0018)()
	class FText                                   Temp_text_Variable_12;                             // 0x0140(0x0018)()
	class FText                                   Temp_text_Variable_13;                             // 0x0158(0x0018)()
	class FText                                   Temp_text_Variable_14;                             // 0x0170(0x0018)()
	ETGFProtoTgfEnItemStorageType                 Temp_byte_Variable_1;                              // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_15;                             // 0x0190(0x0018)()
	class FText                                   Temp_text_Variable_16;                             // 0x01A8(0x0018)()
	class FText                                   Temp_text_Variable_17;                             // 0x01C0(0x0018)()
	class FText                                   Temp_text_Variable_18;                             // 0x01D8(0x0018)()
	class FText                                   Temp_text_Variable_19;                             // 0x01F0(0x0018)()
	class FText                                   Temp_text_Variable_20;                             // 0x0208(0x0018)()
	class FText                                   Temp_text_Variable_21;                             // 0x0220(0x0018)()
	class FText                                   Temp_text_Variable_22;                             // 0x0238(0x0018)()
	ETGFProtoTgfEnItemStorageType                 Temp_byte_Variable_2;                              // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_23;                             // 0x0258(0x0018)()
	class FText                                   Temp_text_Variable_24;                             // 0x0270(0x0018)()
	class FText                                   Temp_text_Variable_25;                             // 0x0288(0x0018)()
	class FText                                   Temp_text_Variable_26;                             // 0x02A0(0x0018)()
	class FText                                   Temp_text_Variable_27;                             // 0x02B8(0x0018)()
	class FText                                   Temp_text_Variable_28;                             // 0x02D0(0x0018)()
	class FText                                   Temp_text_Variable_29;                             // 0x02E8(0x0018)()
	class FText                                   Temp_text_Variable_30;                             // 0x0300(0x0018)()
	class FText                                   Temp_text_Variable_31;                             // 0x0318(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0330(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0348(0x0018)()
	ETGFProtoTgfEnItemStorageType                 Temp_byte_Variable_3;                              // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_2;                           // 0x0368(0x0018)()
	class FText                                   K2Node_Select_Default_3;                           // 0x0380(0x0018)()
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x0398(0x0018)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemTooltip_Battle_C_GetRightClickText) == 0x000008, "Wrong alignment on WBP_ItemTooltip_Battle_C_GetRightClickText");
static_assert(sizeof(WBP_ItemTooltip_Battle_C_GetRightClickText) == 0x0003B8, "Wrong size on WBP_ItemTooltip_Battle_C_GetRightClickText");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Operation) == 0x000000, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Operation' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable) == 0x000018, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_1) == 0x000030, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_2) == 0x000048, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_3) == 0x000060, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_4) == 0x000078, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_5) == 0x000090, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_6) == 0x0000A8, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_byte_Variable) == 0x0000C0, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_7) == 0x0000C8, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_8) == 0x0000E0, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_9) == 0x0000F8, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_10) == 0x000110, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_11) == 0x000128, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_12) == 0x000140, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_13) == 0x000158, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_14) == 0x000170, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_byte_Variable_1) == 0x000188, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_15) == 0x000190, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_16) == 0x0001A8, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_16' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_17) == 0x0001C0, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_17' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_18) == 0x0001D8, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_18' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_19) == 0x0001F0, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_19' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_20) == 0x000208, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_20' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_21) == 0x000220, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_21' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_22) == 0x000238, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_22' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_byte_Variable_2) == 0x000250, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_23) == 0x000258, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_23' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_24) == 0x000270, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_24' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_25) == 0x000288, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_25' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_26) == 0x0002A0, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_26' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_27) == 0x0002B8, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_27' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_28) == 0x0002D0, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_28' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_29) == 0x0002E8, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_29' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_30) == 0x000300, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_30' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_text_Variable_31) == 0x000318, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_text_Variable_31' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, K2Node_Select_Default) == 0x000330, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, K2Node_Select_Default_1) == 0x000348, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, Temp_byte_Variable_3) == 0x000360, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, K2Node_Select_Default_2) == 0x000368, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, K2Node_Select_Default_3) == 0x000380, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, CallFunc_GetEmptyText_ReturnValue) == 0x000398, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetRightClickText, K2Node_SwitchEnum_CmpSuccess) == 0x0003B0, "Member 'WBP_ItemTooltip_Battle_C_GetRightClickText::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_ItemTooltip_Battle.WBP_ItemTooltip_Battle_C.SetUp
// 0x0020 (0x0020 - 0x0000)
struct WBP_ItemTooltip_Battle_C_SetUp final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTgfInventoryWrapper*                   InventoryContext;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UTgfInventoryWrapper*             Param_RootInventoryContext;                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	ETGFProtoTgfEnItemStorageType                 Pos_type;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttributeAsRange;                                 // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowUnkonw;                                        // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemTooltip_Battle_C_SetUp) == 0x000008, "Wrong alignment on WBP_ItemTooltip_Battle_C_SetUp");
static_assert(sizeof(WBP_ItemTooltip_Battle_C_SetUp) == 0x000020, "Wrong size on WBP_ItemTooltip_Battle_C_SetUp");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_SetUp, Item) == 0x000000, "Member 'WBP_ItemTooltip_Battle_C_SetUp::Item' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_SetUp, InventoryContext) == 0x000008, "Member 'WBP_ItemTooltip_Battle_C_SetUp::InventoryContext' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_SetUp, Param_RootInventoryContext) == 0x000010, "Member 'WBP_ItemTooltip_Battle_C_SetUp::Param_RootInventoryContext' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_SetUp, Pos_type) == 0x000018, "Member 'WBP_ItemTooltip_Battle_C_SetUp::Pos_type' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_SetUp, bAttributeAsRange) == 0x000019, "Member 'WBP_ItemTooltip_Battle_C_SetUp::bAttributeAsRange' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_SetUp, ShowUnkonw) == 0x00001A, "Member 'WBP_ItemTooltip_Battle_C_SetUp::ShowUnkonw' has a wrong offset!");

// Function WBP_ItemTooltip_Battle.WBP_ItemTooltip_Battle_C.UpdateAttributesIn
// 0x0130 (0x0130 - 0x0000)
struct WBP_ItemTooltip_Battle_C_UpdateAttributesIn final
{
public:
	class FString                                 AttrColor;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UWBP_ItemTooltips_Buffline_C*           CurBuff;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         BufflineCount;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAffixDisplayConfig                    CurAttr;                                           // 0x0020(0x0100)(Edit, BlueprintVisible)
	TArray<struct FAffixDisplayConfig>            Attrs;                                             // 0x0120(0x0010)(Edit, BlueprintVisible)
};
static_assert(alignof(WBP_ItemTooltip_Battle_C_UpdateAttributesIn) == 0x000008, "Wrong alignment on WBP_ItemTooltip_Battle_C_UpdateAttributesIn");
static_assert(sizeof(WBP_ItemTooltip_Battle_C_UpdateAttributesIn) == 0x000130, "Wrong size on WBP_ItemTooltip_Battle_C_UpdateAttributesIn");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateAttributesIn, AttrColor) == 0x000000, "Member 'WBP_ItemTooltip_Battle_C_UpdateAttributesIn::AttrColor' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateAttributesIn, CurBuff) == 0x000010, "Member 'WBP_ItemTooltip_Battle_C_UpdateAttributesIn::CurBuff' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateAttributesIn, BufflineCount) == 0x000018, "Member 'WBP_ItemTooltip_Battle_C_UpdateAttributesIn::BufflineCount' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateAttributesIn, CurAttr) == 0x000020, "Member 'WBP_ItemTooltip_Battle_C_UpdateAttributesIn::CurAttr' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateAttributesIn, Attrs) == 0x000120, "Member 'WBP_ItemTooltip_Battle_C_UpdateAttributesIn::Attrs' has a wrong offset!");

// Function WBP_ItemTooltip_Battle.WBP_ItemTooltip_Battle_C.UpdateQuality
// 0x0230 (0x0230 - 0x0000)
struct WBP_ItemTooltip_Battle_C_UpdateQuality final
{
public:
	ETgfEquipQuality                              Quality;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_7;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_8;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_9;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_10;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_11;                           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_12;                           // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_13;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_14;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_15;                           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_2;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_16;                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_17;                           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_18;                           // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_19;                           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_20;                           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_21;                           // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_22;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_23;                           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_3;                              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_24;                           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_25;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_26;                           // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_27;                           // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_28;                           // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_29;                           // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_30;                           // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_31;                           // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_4;                              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_3;                           // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_32;                           // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_33;                           // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_34;                           // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_35;                           // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_36;                           // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_37;                           // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_38;                           // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_39;                           // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_5;                              // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_4;                           // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_40;                           // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_41;                           // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_42;                           // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_43;                           // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_44;                           // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_45;                           // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_46;                           // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_47;                           // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_6;                              // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_5;                           // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_48;                           // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_49;                           // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_50;                           // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_51;                           // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_52;                           // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_53;                           // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_54;                           // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_55;                           // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_6;                           // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemTooltip_Battle_C_UpdateQuality) == 0x000008, "Wrong alignment on WBP_ItemTooltip_Battle_C_UpdateQuality");
static_assert(sizeof(WBP_ItemTooltip_Battle_C_UpdateQuality) == 0x000230, "Wrong size on WBP_ItemTooltip_Battle_C_UpdateQuality");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Quality) == 0x000000, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Quality' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_byte_Variable) == 0x000001, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable) == 0x000008, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_1) == 0x000010, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_2) == 0x000018, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_3) == 0x000020, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_4) == 0x000028, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_5) == 0x000030, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_6) == 0x000038, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_7) == 0x000040, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_byte_Variable_1) == 0x000048, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, K2Node_Select_Default) == 0x000050, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_8) == 0x000058, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_9) == 0x000060, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_10) == 0x000068, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_11) == 0x000070, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_12) == 0x000078, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_13) == 0x000080, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_14) == 0x000088, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_15) == 0x000090, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_byte_Variable_2) == 0x000098, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, K2Node_Select_Default_1) == 0x0000A0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_16) == 0x0000A8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_17) == 0x0000B0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_18) == 0x0000B8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_19) == 0x0000C0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_20) == 0x0000C8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_21) == 0x0000D0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_22) == 0x0000D8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_23) == 0x0000E0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_byte_Variable_3) == 0x0000E8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, K2Node_Select_Default_2) == 0x0000F0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_24) == 0x0000F8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_24' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_25) == 0x000100, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_25' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_26) == 0x000108, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_26' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_27) == 0x000110, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_27' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_28) == 0x000118, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_28' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_29) == 0x000120, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_29' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_30) == 0x000128, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_30' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_31) == 0x000130, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_31' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_byte_Variable_4) == 0x000138, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, K2Node_Select_Default_3) == 0x000140, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_32) == 0x000148, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_32' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_33) == 0x000150, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_33' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_34) == 0x000158, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_34' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_35) == 0x000160, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_35' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_36) == 0x000168, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_36' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_37) == 0x000170, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_37' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_38) == 0x000178, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_38' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_39) == 0x000180, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_39' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_byte_Variable_5) == 0x000188, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, K2Node_Select_Default_4) == 0x000190, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_40) == 0x000198, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_40' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_41) == 0x0001A0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_41' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_42) == 0x0001A8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_42' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_43) == 0x0001B0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_43' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_44) == 0x0001B8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_44' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_45) == 0x0001C0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_45' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_46) == 0x0001C8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_46' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_47) == 0x0001D0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_47' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_byte_Variable_6) == 0x0001D8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, K2Node_Select_Default_5) == 0x0001E0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_48) == 0x0001E8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_48' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_49) == 0x0001F0, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_49' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_50) == 0x0001F8, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_50' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_51) == 0x000200, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_51' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_52) == 0x000208, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_52' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_53) == 0x000210, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_53' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_54) == 0x000218, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_54' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, Temp_object_Variable_55) == 0x000220, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::Temp_object_Variable_55' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateQuality, K2Node_Select_Default_6) == 0x000228, "Member 'WBP_ItemTooltip_Battle_C_UpdateQuality::K2Node_Select_Default_6' has a wrong offset!");

// Function WBP_ItemTooltip_Battle.WBP_ItemTooltip_Battle_C.UpdateTooltips
// 0x0458 (0x0458 - 0x0000)
struct WBP_ItemTooltip_Battle_C_UpdateTooltips final
{
public:
	int32                                         Ra;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      Temp_softobject_Variable;                          // 0x0008(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Temp_softobject_Variable_1;                        // 0x0038(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Temp_softobject_Variable_2;                        // 0x0068(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Temp_softobject_Variable_3;                        // 0x0098(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Temp_softobject_Variable_4;                        // 0x00C8(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Temp_softobject_Variable_5;                        // 0x00F8(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Temp_softobject_Variable_6;                        // 0x0128(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable;                                // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_7;                            // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_1;                              // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_8;                            // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_9;                            // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_10;                           // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_11;                           // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_12;                           // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_13;                           // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_14;                           // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_15;                           // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_2;                              // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_16;                           // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_17;                           // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_18;                           // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_19;                           // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_20;                           // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_21;                           // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_22;                           // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_23;                           // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_3;                              // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_24;                           // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_25;                           // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_26;                           // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_27;                           // 0x0250(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_28;                           // 0x0258(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_29;                           // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_30;                           // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_31;                           // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_4;                              // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_32;                           // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_33;                           // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_34;                           // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_35;                           // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_36;                           // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_37;                           // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_38;                           // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_39;                           // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_5;                              // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_40;                           // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_41;                           // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_42;                           // 0x02D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_43;                           // 0x02E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_44;                           // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_45;                           // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_46;                           // 0x02F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_47;                           // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_6;                              // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_48;                           // 0x0310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_49;                           // 0x0318(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_50;                           // 0x0320(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_51;                           // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_52;                           // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_53;                           // 0x0338(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_54;                           // 0x0340(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_55;                           // 0x0348(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_7;                              // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_56;                           // 0x0358(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_57;                           // 0x0360(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_58;                           // 0x0368(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_59;                           // 0x0370(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_60;                           // 0x0378(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_61;                           // 0x0380(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_62;                           // 0x0388(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_63;                           // 0x0390(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0398(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Temp_softobject_Variable_7;                        // 0x03A0(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x03D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x03D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D3[0x1];                                      // 0x03D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCorruptionID_ReturnValue;              // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x03DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETgfEquipQuality                              Temp_byte_Variable_8;                              // 0x03DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      K2Node_Select_Default_1;                           // 0x03E0(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	const class UInventoryFragment_InventoryIcon* CallFunc_FindFragmentByClass_ReturnValue;          // 0x0410(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0420(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_3;                           // 0x0428(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_4;                           // 0x0430(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_5;                           // 0x0438(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_6;                           // 0x0440(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_7;                           // 0x0448(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_8;                           // 0x0450(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemTooltip_Battle_C_UpdateTooltips) == 0x000008, "Wrong alignment on WBP_ItemTooltip_Battle_C_UpdateTooltips");
static_assert(sizeof(WBP_ItemTooltip_Battle_C_UpdateTooltips) == 0x000458, "Wrong size on WBP_ItemTooltip_Battle_C_UpdateTooltips");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Ra) == 0x000000, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Ra' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_softobject_Variable) == 0x000008, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_softobject_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_softobject_Variable_1) == 0x000038, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_softobject_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_softobject_Variable_2) == 0x000068, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_softobject_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_softobject_Variable_3) == 0x000098, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_softobject_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_softobject_Variable_4) == 0x0000C8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_softobject_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_softobject_Variable_5) == 0x0000F8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_softobject_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_softobject_Variable_6) == 0x000128, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_softobject_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_byte_Variable) == 0x000158, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable) == 0x000160, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_1) == 0x000168, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_2) == 0x000170, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_3) == 0x000178, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_4) == 0x000180, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_5) == 0x000188, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_6) == 0x000190, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_7) == 0x000198, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_byte_Variable_1) == 0x0001A0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_8) == 0x0001A8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_9) == 0x0001B0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_10) == 0x0001B8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_11) == 0x0001C0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_12) == 0x0001C8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_13) == 0x0001D0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_14) == 0x0001D8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_15) == 0x0001E0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_byte_Variable_2) == 0x0001E8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_16) == 0x0001F0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_17) == 0x0001F8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_18) == 0x000200, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_19) == 0x000208, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_20) == 0x000210, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_21) == 0x000218, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_22) == 0x000220, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_23) == 0x000228, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_byte_Variable_3) == 0x000230, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_24) == 0x000238, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_24' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_25) == 0x000240, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_25' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_26) == 0x000248, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_26' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_27) == 0x000250, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_27' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_28) == 0x000258, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_28' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_29) == 0x000260, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_29' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_30) == 0x000268, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_30' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_31) == 0x000270, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_31' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_byte_Variable_4) == 0x000278, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_32) == 0x000280, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_32' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_33) == 0x000288, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_33' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_34) == 0x000290, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_34' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_35) == 0x000298, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_35' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_36) == 0x0002A0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_36' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_37) == 0x0002A8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_37' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_38) == 0x0002B0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_38' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_39) == 0x0002B8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_39' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_byte_Variable_5) == 0x0002C0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_40) == 0x0002C8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_40' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_41) == 0x0002D0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_41' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_42) == 0x0002D8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_42' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_43) == 0x0002E0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_43' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_44) == 0x0002E8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_44' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_45) == 0x0002F0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_45' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_46) == 0x0002F8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_46' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_47) == 0x000300, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_47' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_byte_Variable_6) == 0x000308, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_48) == 0x000310, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_48' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_49) == 0x000318, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_49' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_50) == 0x000320, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_50' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_51) == 0x000328, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_51' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_52) == 0x000330, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_52' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_53) == 0x000338, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_53' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_54) == 0x000340, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_54' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_55) == 0x000348, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_55' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_byte_Variable_7) == 0x000350, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_56) == 0x000358, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_56' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_57) == 0x000360, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_57' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_58) == 0x000368, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_58' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_59) == 0x000370, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_59' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_60) == 0x000378, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_60' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_61) == 0x000380, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_61' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_62) == 0x000388, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_62' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_object_Variable_63) == 0x000390, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_object_Variable_63' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, K2Node_Select_Default) == 0x000398, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_softobject_Variable_7) == 0x0003A0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_softobject_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0003D0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0003D1, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, CallFunc_BooleanOR_ReturnValue) == 0x0003D2, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, CallFunc_GetCorruptionID_ReturnValue) == 0x0003D4, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::CallFunc_GetCorruptionID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, CallFunc_Greater_IntInt_ReturnValue) == 0x0003D8, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, CallFunc_IsValid_ReturnValue) == 0x0003D9, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, CallFunc_BooleanAND_ReturnValue) == 0x0003DA, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, Temp_byte_Variable_8) == 0x0003DB, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, K2Node_Select_Default_1) == 0x0003E0, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, CallFunc_FindFragmentByClass_ReturnValue) == 0x000410, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::CallFunc_FindFragmentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, CallFunc_IsValid_ReturnValue_1) == 0x000418, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, K2Node_Select_Default_2) == 0x000420, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, K2Node_Select_Default_3) == 0x000428, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, K2Node_Select_Default_4) == 0x000430, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, K2Node_Select_Default_5) == 0x000438, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, K2Node_Select_Default_6) == 0x000440, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, K2Node_Select_Default_7) == 0x000448, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_UpdateTooltips, K2Node_Select_Default_8) == 0x000450, "Member 'WBP_ItemTooltip_Battle_C_UpdateTooltips::K2Node_Select_Default_8' has a wrong offset!");

// Function WBP_ItemTooltip_Battle.WBP_ItemTooltip_Battle_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct WBP_ItemTooltip_Battle_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ItemTooltip_Battle_C_GetModuleName) == 0x000008, "Wrong alignment on WBP_ItemTooltip_Battle_C_GetModuleName");
static_assert(sizeof(WBP_ItemTooltip_Battle_C_GetModuleName) == 0x000010, "Wrong size on WBP_ItemTooltip_Battle_C_GetModuleName");
static_assert(offsetof(WBP_ItemTooltip_Battle_C_GetModuleName, ReturnValue) == 0x000000, "Member 'WBP_ItemTooltip_Battle_C_GetModuleName::ReturnValue' has a wrong offset!");

}


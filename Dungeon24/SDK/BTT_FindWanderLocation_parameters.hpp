#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_FindWanderLocation

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTT_FindWanderLocation.BTT_FindWanderLocation_C.ExecuteUbergraph_BTT_FindWanderLocation
// 0x00C8 (0x00C8 - 0x0000)
struct BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Tgf_Monster_C*                      K2Node_DynamicCast_AsBP_Tgf_Monster;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWanderRadius_Result;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetRandomLocationInNavigableRadius_RandomLocation; // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomLocationInNavigableRadius_ReturnValue; // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_1;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetRandomLocationInNavigableRadius_Radius_ImplicitCast; // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation) == 0x000008, "Wrong alignment on BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation");
static_assert(sizeof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation) == 0x0000C8, "Wrong size on BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, EntryPoint) == 0x000000, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x000008, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_BreakVector_X) == 0x000020, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_BreakVector_Y) == 0x000028, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_BreakVector_Z) == 0x000030, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, K2Node_Event_OwnerController) == 0x000038, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, K2Node_Event_ControlledPawn) == 0x000040, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, K2Node_DynamicCast_AsBP_Tgf_Monster) == 0x000048, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::K2Node_DynamicCast_AsBP_Tgf_Monster' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_GetWanderRadius_Result) == 0x000058, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_GetWanderRadius_Result' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_Not_PreBool_ReturnValue) == 0x000060, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_K2_GetRandomLocationInNavigableRadius_RandomLocation) == 0x000068, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_K2_GetRandomLocationInNavigableRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_K2_GetRandomLocationInNavigableRadius_ReturnValue) == 0x000080, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_K2_GetRandomLocationInNavigableRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_BreakVector_X_1) == 0x000088, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_BreakVector_Y_1) == 0x000090, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_BreakVector_Z_1) == 0x000098, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_SelectFloat_ReturnValue) == 0x0000A0, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_MakeVector_ReturnValue) == 0x0000A8, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation, CallFunc_K2_GetRandomLocationInNavigableRadius_Radius_ImplicitCast) == 0x0000C0, "Member 'BTT_FindWanderLocation_C_ExecuteUbergraph_BTT_FindWanderLocation::CallFunc_K2_GetRandomLocationInNavigableRadius_Radius_ImplicitCast' has a wrong offset!");

// Function BTT_FindWanderLocation.BTT_FindWanderLocation_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_FindWanderLocation_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_FindWanderLocation_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_FindWanderLocation_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_FindWanderLocation_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_FindWanderLocation_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_FindWanderLocation_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_FindWanderLocation_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_FindWanderLocation_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_FindWanderLocation_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

}


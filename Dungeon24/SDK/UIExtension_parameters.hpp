#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIExtension

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "UIExtension_structs.hpp"


namespace SDK::Params
{

// Function UIExtension.UIExtensionSubsystem.K2_RegisterExtensionAsData
// 0x0030 (0x0030 - 0x0000)
struct UIExtensionSubsystem_K2_RegisterExtensionAsData final
{
public:
	struct FGameplayTag                           ExtensionPointTag;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Data;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIExtensionHandle                     ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtensionSubsystem_K2_RegisterExtensionAsData) == 0x000008, "Wrong alignment on UIExtensionSubsystem_K2_RegisterExtensionAsData");
static_assert(sizeof(UIExtensionSubsystem_K2_RegisterExtensionAsData) == 0x000030, "Wrong size on UIExtensionSubsystem_K2_RegisterExtensionAsData");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsData, ExtensionPointTag) == 0x000000, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsData::ExtensionPointTag' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsData, Data) == 0x000008, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsData::Data' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsData, Priority) == 0x000010, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsData::Priority' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsData, ReturnValue) == 0x000018, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsData::ReturnValue' has a wrong offset!");

// Function UIExtension.UIExtensionSubsystem.K2_RegisterExtensionAsDataForContext
// 0x0038 (0x0038 - 0x0000)
struct UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext final
{
public:
	struct FGameplayTag                           ExtensionPointTag;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Data;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIExtensionHandle                     ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext) == 0x000008, "Wrong alignment on UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext");
static_assert(sizeof(UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext) == 0x000038, "Wrong size on UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext, ExtensionPointTag) == 0x000000, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext::ExtensionPointTag' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext, ContextObject) == 0x000008, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext::ContextObject' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext, Data) == 0x000010, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext::Data' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext, Priority) == 0x000018, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext::Priority' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext, ReturnValue) == 0x000020, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext::ReturnValue' has a wrong offset!");

// Function UIExtension.UIExtensionSubsystem.K2_RegisterExtensionAsWidget
// 0x0030 (0x0030 - 0x0000)
struct UIExtensionSubsystem_K2_RegisterExtensionAsWidget final
{
public:
	struct FGameplayTag                           ExtensionPointTag;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIExtensionHandle                     ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtensionSubsystem_K2_RegisterExtensionAsWidget) == 0x000008, "Wrong alignment on UIExtensionSubsystem_K2_RegisterExtensionAsWidget");
static_assert(sizeof(UIExtensionSubsystem_K2_RegisterExtensionAsWidget) == 0x000030, "Wrong size on UIExtensionSubsystem_K2_RegisterExtensionAsWidget");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsWidget, ExtensionPointTag) == 0x000000, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsWidget::ExtensionPointTag' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsWidget, WidgetClass) == 0x000008, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsWidget::WidgetClass' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsWidget, Priority) == 0x000010, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsWidget::Priority' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsWidget, ReturnValue) == 0x000018, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsWidget::ReturnValue' has a wrong offset!");

// Function UIExtension.UIExtensionSubsystem.K2_RegisterExtensionAsWidgetForContext
// 0x0038 (0x0038 - 0x0000)
struct UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext final
{
public:
	struct FGameplayTag                           ExtensionPointTag;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIExtensionHandle                     ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext) == 0x000008, "Wrong alignment on UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext");
static_assert(sizeof(UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext) == 0x000038, "Wrong size on UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext, ExtensionPointTag) == 0x000000, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext::ExtensionPointTag' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext, WidgetClass) == 0x000008, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext::WidgetClass' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext, ContextObject) == 0x000010, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext::ContextObject' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext, Priority) == 0x000018, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext::Priority' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext, ReturnValue) == 0x000020, "Member 'UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext::ReturnValue' has a wrong offset!");

// Function UIExtension.UIExtensionSubsystem.K2_RegisterExtensionPoint
// 0x0048 (0x0048 - 0x0000)
struct UIExtensionSubsystem_K2_RegisterExtensionPoint final
{
public:
	struct FGameplayTag                           ExtensionPointTag;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIExtensionPointMatch                        ExtensionPointTagMatchType;                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         AllowedDataClasses;                                // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EUIExtensionAction Action, struct FUIExtensionRequest& ExtensionRequest)> ExtensionCallback;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUIExtensionPointHandle                ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtensionSubsystem_K2_RegisterExtensionPoint) == 0x000008, "Wrong alignment on UIExtensionSubsystem_K2_RegisterExtensionPoint");
static_assert(sizeof(UIExtensionSubsystem_K2_RegisterExtensionPoint) == 0x000048, "Wrong size on UIExtensionSubsystem_K2_RegisterExtensionPoint");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionPoint, ExtensionPointTag) == 0x000000, "Member 'UIExtensionSubsystem_K2_RegisterExtensionPoint::ExtensionPointTag' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionPoint, ExtensionPointTagMatchType) == 0x000008, "Member 'UIExtensionSubsystem_K2_RegisterExtensionPoint::ExtensionPointTagMatchType' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionPoint, AllowedDataClasses) == 0x000010, "Member 'UIExtensionSubsystem_K2_RegisterExtensionPoint::AllowedDataClasses' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionPoint, ExtensionCallback) == 0x000020, "Member 'UIExtensionSubsystem_K2_RegisterExtensionPoint::ExtensionCallback' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_K2_RegisterExtensionPoint, ReturnValue) == 0x000030, "Member 'UIExtensionSubsystem_K2_RegisterExtensionPoint::ReturnValue' has a wrong offset!");

// Function UIExtension.UIExtensionSubsystem.UnregisterExtension
// 0x0018 (0x0018 - 0x0000)
struct UIExtensionSubsystem_UnregisterExtension final
{
public:
	struct FUIExtensionHandle                     ExtensionHandle;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtensionSubsystem_UnregisterExtension) == 0x000008, "Wrong alignment on UIExtensionSubsystem_UnregisterExtension");
static_assert(sizeof(UIExtensionSubsystem_UnregisterExtension) == 0x000018, "Wrong size on UIExtensionSubsystem_UnregisterExtension");
static_assert(offsetof(UIExtensionSubsystem_UnregisterExtension, ExtensionHandle) == 0x000000, "Member 'UIExtensionSubsystem_UnregisterExtension::ExtensionHandle' has a wrong offset!");

// Function UIExtension.UIExtensionSubsystem.UnregisterExtensionAsWidget
// 0x0010 (0x0010 - 0x0000)
struct UIExtensionSubsystem_UnregisterExtensionAsWidget final
{
public:
	struct FGameplayTag                           ExtensionPointTag;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                InWidgetClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtensionSubsystem_UnregisterExtensionAsWidget) == 0x000008, "Wrong alignment on UIExtensionSubsystem_UnregisterExtensionAsWidget");
static_assert(sizeof(UIExtensionSubsystem_UnregisterExtensionAsWidget) == 0x000010, "Wrong size on UIExtensionSubsystem_UnregisterExtensionAsWidget");
static_assert(offsetof(UIExtensionSubsystem_UnregisterExtensionAsWidget, ExtensionPointTag) == 0x000000, "Member 'UIExtensionSubsystem_UnregisterExtensionAsWidget::ExtensionPointTag' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_UnregisterExtensionAsWidget, InWidgetClass) == 0x000008, "Member 'UIExtensionSubsystem_UnregisterExtensionAsWidget::InWidgetClass' has a wrong offset!");

// Function UIExtension.UIExtensionSubsystem.UnregisterExtensionPoint
// 0x0018 (0x0018 - 0x0000)
struct UIExtensionSubsystem_UnregisterExtensionPoint final
{
public:
	struct FUIExtensionPointHandle                ExtensionPointHandle;                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtensionSubsystem_UnregisterExtensionPoint) == 0x000008, "Wrong alignment on UIExtensionSubsystem_UnregisterExtensionPoint");
static_assert(sizeof(UIExtensionSubsystem_UnregisterExtensionPoint) == 0x000018, "Wrong size on UIExtensionSubsystem_UnregisterExtensionPoint");
static_assert(offsetof(UIExtensionSubsystem_UnregisterExtensionPoint, ExtensionPointHandle) == 0x000000, "Member 'UIExtensionSubsystem_UnregisterExtensionPoint::ExtensionPointHandle' has a wrong offset!");

// Function UIExtension.UIExtensionSubsystem.UnregisterExtensionsWithExceptions
// 0x0018 (0x0018 - 0x0000)
struct UIExtensionSubsystem_UnregisterExtensionsWithExceptions final
{
public:
	struct FGameplayTag                           ExtensionPointTag;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UUserWidget>>        Exceptions;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtensionSubsystem_UnregisterExtensionsWithExceptions) == 0x000008, "Wrong alignment on UIExtensionSubsystem_UnregisterExtensionsWithExceptions");
static_assert(sizeof(UIExtensionSubsystem_UnregisterExtensionsWithExceptions) == 0x000018, "Wrong size on UIExtensionSubsystem_UnregisterExtensionsWithExceptions");
static_assert(offsetof(UIExtensionSubsystem_UnregisterExtensionsWithExceptions, ExtensionPointTag) == 0x000000, "Member 'UIExtensionSubsystem_UnregisterExtensionsWithExceptions::ExtensionPointTag' has a wrong offset!");
static_assert(offsetof(UIExtensionSubsystem_UnregisterExtensionsWithExceptions, Exceptions) == 0x000008, "Member 'UIExtensionSubsystem_UnregisterExtensionsWithExceptions::Exceptions' has a wrong offset!");

// Function UIExtension.UIExtensionHandleFunctions.IsValid
// 0x0020 (0x0020 - 0x0000)
struct UIExtensionHandleFunctions_IsValid final
{
public:
	struct FUIExtensionHandle                     Handle;                                            // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIExtensionHandleFunctions_IsValid) == 0x000008, "Wrong alignment on UIExtensionHandleFunctions_IsValid");
static_assert(sizeof(UIExtensionHandleFunctions_IsValid) == 0x000020, "Wrong size on UIExtensionHandleFunctions_IsValid");
static_assert(offsetof(UIExtensionHandleFunctions_IsValid, Handle) == 0x000000, "Member 'UIExtensionHandleFunctions_IsValid::Handle' has a wrong offset!");
static_assert(offsetof(UIExtensionHandleFunctions_IsValid, ReturnValue) == 0x000018, "Member 'UIExtensionHandleFunctions_IsValid::ReturnValue' has a wrong offset!");

// Function UIExtension.UIExtensionHandleFunctions.Unregister
// 0x0018 (0x0018 - 0x0000)
struct UIExtensionHandleFunctions_Unregister final
{
public:
	struct FUIExtensionHandle                     Handle;                                            // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtensionHandleFunctions_Unregister) == 0x000008, "Wrong alignment on UIExtensionHandleFunctions_Unregister");
static_assert(sizeof(UIExtensionHandleFunctions_Unregister) == 0x000018, "Wrong size on UIExtensionHandleFunctions_Unregister");
static_assert(offsetof(UIExtensionHandleFunctions_Unregister, Handle) == 0x000000, "Member 'UIExtensionHandleFunctions_Unregister::Handle' has a wrong offset!");

// Function UIExtension.UIExtensionPointHandleFunctions.IsValid
// 0x0020 (0x0020 - 0x0000)
struct UIExtensionPointHandleFunctions_IsValid final
{
public:
	struct FUIExtensionPointHandle                Handle;                                            // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIExtensionPointHandleFunctions_IsValid) == 0x000008, "Wrong alignment on UIExtensionPointHandleFunctions_IsValid");
static_assert(sizeof(UIExtensionPointHandleFunctions_IsValid) == 0x000020, "Wrong size on UIExtensionPointHandleFunctions_IsValid");
static_assert(offsetof(UIExtensionPointHandleFunctions_IsValid, Handle) == 0x000000, "Member 'UIExtensionPointHandleFunctions_IsValid::Handle' has a wrong offset!");
static_assert(offsetof(UIExtensionPointHandleFunctions_IsValid, ReturnValue) == 0x000018, "Member 'UIExtensionPointHandleFunctions_IsValid::ReturnValue' has a wrong offset!");

// Function UIExtension.UIExtensionPointHandleFunctions.Unregister
// 0x0018 (0x0018 - 0x0000)
struct UIExtensionPointHandleFunctions_Unregister final
{
public:
	struct FUIExtensionPointHandle                Handle;                                            // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtensionPointHandleFunctions_Unregister) == 0x000008, "Wrong alignment on UIExtensionPointHandleFunctions_Unregister");
static_assert(sizeof(UIExtensionPointHandleFunctions_Unregister) == 0x000018, "Wrong size on UIExtensionPointHandleFunctions_Unregister");
static_assert(offsetof(UIExtensionPointHandleFunctions_Unregister, Handle) == 0x000000, "Member 'UIExtensionPointHandleFunctions_Unregister::Handle' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Text3D

#include "Basic.hpp"

#include "Text3D_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class Text3D.Text3DActor
// 0x0008 (0x02A0 - 0x0298)
class AText3DActor final : public AActor
{
public:
	class UText3DComponent*                       Text3DComponent;                                   // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Text3DActor">();
	}
	static class AText3DActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AText3DActor>();
	}
};
static_assert(alignof(AText3DActor) == 0x000008, "Wrong alignment on AText3DActor");
static_assert(sizeof(AText3DActor) == 0x0002A0, "Wrong size on AText3DActor");
static_assert(offsetof(AText3DActor, Text3DComponent) == 0x000298, "Member 'AText3DActor::Text3DComponent' has a wrong offset!");

// Class Text3D.Text3DCharacterTransform
// 0x00B0 (0x0350 - 0x02A0)
class UText3DCharacterTransform final : public USceneComponent
{
public:
	bool                                          bLocationEnabled;                                  // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocationProgress;                                  // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DCharacterEffectOrder                   LocationOrder;                                     // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocationRange;                                     // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationDistance;                                  // 0x02B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleEnabled;                                     // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleProgress;                                     // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DCharacterEffectOrder                   ScaleOrder;                                        // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleRange;                                        // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleBegin;                                        // 0x02D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleEnd;                                          // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateEnabled;                                    // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotateProgress;                                    // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DCharacterEffectOrder                   RotateOrder;                                       // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotateRange;                                       // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotateBegin;                                       // 0x0318(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotateEnd;                                         // 0x0330(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLocationDistance(const struct FVector& Distance);
	void SetLocationEnabled(bool bEnabled);
	void SetLocationOrder(EText3DCharacterEffectOrder Order);
	void SetLocationProgress(float Progress);
	void SetLocationRange(float Range);
	void SetRotateBegin(const struct FRotator& Value);
	void SetRotateEnabled(bool bEnabled);
	void SetRotateEnd(const struct FRotator& Value);
	void SetRotateOrder(EText3DCharacterEffectOrder Order);
	void SetRotateProgress(float Progress);
	void SetRotateRange(float Range);
	void SetScaleBegin(const struct FVector& Value);
	void SetScaleEnabled(bool bEnabled);
	void SetScaleEnd(const struct FVector& Value);
	void SetScaleOrder(EText3DCharacterEffectOrder Order);
	void SetScaleProgress(float Progress);
	void SetScaleRange(float Range);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Text3DCharacterTransform">();
	}
	static class UText3DCharacterTransform* GetDefaultObj()
	{
		return GetDefaultObjImpl<UText3DCharacterTransform>();
	}
};
static_assert(alignof(UText3DCharacterTransform) == 0x000010, "Wrong alignment on UText3DCharacterTransform");
static_assert(sizeof(UText3DCharacterTransform) == 0x000350, "Wrong size on UText3DCharacterTransform");
static_assert(offsetof(UText3DCharacterTransform, bLocationEnabled) == 0x0002A0, "Member 'UText3DCharacterTransform::bLocationEnabled' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, LocationProgress) == 0x0002A4, "Member 'UText3DCharacterTransform::LocationProgress' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, LocationOrder) == 0x0002A8, "Member 'UText3DCharacterTransform::LocationOrder' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, LocationRange) == 0x0002AC, "Member 'UText3DCharacterTransform::LocationRange' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, LocationDistance) == 0x0002B0, "Member 'UText3DCharacterTransform::LocationDistance' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, bScaleEnabled) == 0x0002C8, "Member 'UText3DCharacterTransform::bScaleEnabled' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, ScaleProgress) == 0x0002CC, "Member 'UText3DCharacterTransform::ScaleProgress' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, ScaleOrder) == 0x0002D0, "Member 'UText3DCharacterTransform::ScaleOrder' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, ScaleRange) == 0x0002D4, "Member 'UText3DCharacterTransform::ScaleRange' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, ScaleBegin) == 0x0002D8, "Member 'UText3DCharacterTransform::ScaleBegin' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, ScaleEnd) == 0x0002F0, "Member 'UText3DCharacterTransform::ScaleEnd' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, bRotateEnabled) == 0x000308, "Member 'UText3DCharacterTransform::bRotateEnabled' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, RotateProgress) == 0x00030C, "Member 'UText3DCharacterTransform::RotateProgress' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, RotateOrder) == 0x000310, "Member 'UText3DCharacterTransform::RotateOrder' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, RotateRange) == 0x000314, "Member 'UText3DCharacterTransform::RotateRange' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, RotateBegin) == 0x000318, "Member 'UText3DCharacterTransform::RotateBegin' has a wrong offset!");
static_assert(offsetof(UText3DCharacterTransform, RotateEnd) == 0x000330, "Member 'UText3DCharacterTransform::RotateEnd' has a wrong offset!");

// Class Text3D.Text3DComponent
// 0x0110 (0x03B0 - 0x02A0)
class UText3DComponent final : public USceneComponent
{
public:
	class FText                                   Text;                                              // 0x02A0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Extrude;                                           // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bevel;                                             // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DBevelType                              BevelType;                                         // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BevelSegments;                                     // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutline;                                          // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutlineExpand;                                     // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     FrontMaterial;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BevelMaterial;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ExtrudeMaterial;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BackMaterial;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  Font;                                              // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DHorizontalTextAlignment                HorizontalAlignment;                               // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EText3DVerticalTextAlignment                  VerticalAlignment;                                 // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FA[0x2];                                      // 0x02FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Kerning;                                           // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineSpacing;                                       // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WordSpacing;                                       // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMaxWidth;                                      // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWidth;                                          // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMaxHeight;                                     // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHeight;                                         // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleProportionally;                              // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadow;                                       // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        TextRoot;                                          // 0x0320(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             TextGeneratedDelegate;                             // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_338[0x58];                                     // 0x0338(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CharacterKernings;                                 // 0x0390(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           CharacterMeshes;                                   // 0x03A0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void GetBounds(struct FVector* Origin, struct FVector* BoxExtent);
	int32 GetGlyphCount();
	class USceneComponent* GetGlyphKerningComponent(int32 Param_Index);
	const TArray<class USceneComponent*> GetGlyphKerningComponents();
	class UStaticMeshComponent* GetGlyphMeshComponent(int32 Param_Index);
	const TArray<class UStaticMeshComponent*> GetGlyphMeshComponents();
	struct FVector GetTextScale();
	void SetBackMaterial(class UMaterialInterface* Value);
	void SetBevel(const float Value);
	void SetBevelMaterial(class UMaterialInterface* Value);
	void SetBevelSegments(const int32 Value);
	void SetBevelType(const EText3DBevelType Value);
	void SetCastShadow(bool NewCastShadow);
	void SetExtrude(const float Value);
	void SetExtrudeMaterial(class UMaterialInterface* Value);
	void SetFont(const class UFont* InFont);
	void SetFreeze(const bool bFreeze);
	void SetFrontMaterial(class UMaterialInterface* Value);
	void SetHasMaxHeight(const bool Value);
	void SetHasMaxWidth(const bool Value);
	void SetHorizontalAlignment(const EText3DHorizontalTextAlignment Value);
	void SetKerning(const float Value);
	void SetLineSpacing(const float Value);
	void SetMaxHeight(const float Value);
	void SetMaxWidth(const float Value);
	void SetOutline(const bool bValue);
	void SetOutlineExpand(const float Value);
	void SetScaleProportionally(const bool Value);
	void SetText(const class FText& Value);
	void SetVerticalAlignment(const EText3DVerticalTextAlignment Value);
	void SetWordSpacing(const float Value);
	void TextGenerated__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Text3DComponent">();
	}
	static class UText3DComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UText3DComponent>();
	}
};
static_assert(alignof(UText3DComponent) == 0x000010, "Wrong alignment on UText3DComponent");
static_assert(sizeof(UText3DComponent) == 0x0003B0, "Wrong size on UText3DComponent");
static_assert(offsetof(UText3DComponent, Text) == 0x0002A0, "Member 'UText3DComponent::Text' has a wrong offset!");
static_assert(offsetof(UText3DComponent, Extrude) == 0x0002B8, "Member 'UText3DComponent::Extrude' has a wrong offset!");
static_assert(offsetof(UText3DComponent, Bevel) == 0x0002BC, "Member 'UText3DComponent::Bevel' has a wrong offset!");
static_assert(offsetof(UText3DComponent, BevelType) == 0x0002C0, "Member 'UText3DComponent::BevelType' has a wrong offset!");
static_assert(offsetof(UText3DComponent, BevelSegments) == 0x0002C4, "Member 'UText3DComponent::BevelSegments' has a wrong offset!");
static_assert(offsetof(UText3DComponent, bOutline) == 0x0002C8, "Member 'UText3DComponent::bOutline' has a wrong offset!");
static_assert(offsetof(UText3DComponent, OutlineExpand) == 0x0002CC, "Member 'UText3DComponent::OutlineExpand' has a wrong offset!");
static_assert(offsetof(UText3DComponent, FrontMaterial) == 0x0002D0, "Member 'UText3DComponent::FrontMaterial' has a wrong offset!");
static_assert(offsetof(UText3DComponent, BevelMaterial) == 0x0002D8, "Member 'UText3DComponent::BevelMaterial' has a wrong offset!");
static_assert(offsetof(UText3DComponent, ExtrudeMaterial) == 0x0002E0, "Member 'UText3DComponent::ExtrudeMaterial' has a wrong offset!");
static_assert(offsetof(UText3DComponent, BackMaterial) == 0x0002E8, "Member 'UText3DComponent::BackMaterial' has a wrong offset!");
static_assert(offsetof(UText3DComponent, Font) == 0x0002F0, "Member 'UText3DComponent::Font' has a wrong offset!");
static_assert(offsetof(UText3DComponent, HorizontalAlignment) == 0x0002F8, "Member 'UText3DComponent::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UText3DComponent, VerticalAlignment) == 0x0002F9, "Member 'UText3DComponent::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UText3DComponent, Kerning) == 0x0002FC, "Member 'UText3DComponent::Kerning' has a wrong offset!");
static_assert(offsetof(UText3DComponent, LineSpacing) == 0x000300, "Member 'UText3DComponent::LineSpacing' has a wrong offset!");
static_assert(offsetof(UText3DComponent, WordSpacing) == 0x000304, "Member 'UText3DComponent::WordSpacing' has a wrong offset!");
static_assert(offsetof(UText3DComponent, bHasMaxWidth) == 0x000308, "Member 'UText3DComponent::bHasMaxWidth' has a wrong offset!");
static_assert(offsetof(UText3DComponent, MaxWidth) == 0x00030C, "Member 'UText3DComponent::MaxWidth' has a wrong offset!");
static_assert(offsetof(UText3DComponent, bHasMaxHeight) == 0x000310, "Member 'UText3DComponent::bHasMaxHeight' has a wrong offset!");
static_assert(offsetof(UText3DComponent, MaxHeight) == 0x000314, "Member 'UText3DComponent::MaxHeight' has a wrong offset!");
static_assert(offsetof(UText3DComponent, bScaleProportionally) == 0x000318, "Member 'UText3DComponent::bScaleProportionally' has a wrong offset!");
static_assert(offsetof(UText3DComponent, bCastShadow) == 0x000319, "Member 'UText3DComponent::bCastShadow' has a wrong offset!");
static_assert(offsetof(UText3DComponent, TextRoot) == 0x000320, "Member 'UText3DComponent::TextRoot' has a wrong offset!");
static_assert(offsetof(UText3DComponent, TextGeneratedDelegate) == 0x000328, "Member 'UText3DComponent::TextGeneratedDelegate' has a wrong offset!");
static_assert(offsetof(UText3DComponent, CharacterKernings) == 0x000390, "Member 'UText3DComponent::CharacterKernings' has a wrong offset!");
static_assert(offsetof(UText3DComponent, CharacterMeshes) == 0x0003A0, "Member 'UText3DComponent::CharacterMeshes' has a wrong offset!");

// Class Text3D.Text3DEngineSubsystem
// 0x0068 (0x0098 - 0x0030)
class UText3DEngineSubsystem final : public UEngineSubsystem
{
public:
	class UMaterial*                              DefaultMaterial;                                   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<uint32, struct FCachedFontData>          CachedFonts;                                       // 0x0038(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x10];                                      // 0x0088(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Text3DEngineSubsystem">();
	}
	static class UText3DEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UText3DEngineSubsystem>();
	}
};
static_assert(alignof(UText3DEngineSubsystem) == 0x000008, "Wrong alignment on UText3DEngineSubsystem");
static_assert(sizeof(UText3DEngineSubsystem) == 0x000098, "Wrong size on UText3DEngineSubsystem");
static_assert(offsetof(UText3DEngineSubsystem, DefaultMaterial) == 0x000030, "Member 'UText3DEngineSubsystem::DefaultMaterial' has a wrong offset!");
static_assert(offsetof(UText3DEngineSubsystem, CachedFonts) == 0x000038, "Member 'UText3DEngineSubsystem::CachedFonts' has a wrong offset!");

}


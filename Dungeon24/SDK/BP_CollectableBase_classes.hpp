#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CollectableBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "LyraGame_structs.hpp"
#include "BP_InteractableBase_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CollectableBase.BP_CollectableBase_C
// 0x0110 (0x0460 - 0x0350)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_CollectableBase_C : public ABP_InteractableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_CollectableBase_C;               // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTgfCollectableLightComponent*          TgfCollectableLight;                               // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_Rotation_853FC13145C424E5752B22820AD6EA87; // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Rotation__Direction_853FC13145C424E5752B22820AD6EA87; // 0x036C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D[0x3];                                      // 0x036D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Rotation;                                          // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CollectableObjectType;                             // 0x0378(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ULyraInventoryItemInstance*             Inventory_Instance;                                // 0x0380(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Rot_Force;                                         // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impulse;                                           // 0x0390(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         BeamVFX;                                           // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Light;                                      // 0x03B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0xF];                                      // 0x03B1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FinalTransform;                                    // 0x03C0(0x0060)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TArray<ETgfItemType>                          ItemTypesToDiscardBeam;                            // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int64                                         ObjectId;                                          // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CollectableBase_C*>          AttachedCollectables;                              // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance)
	float                                         BaseRotX;                                          // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseRotY;                                          // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseRotZ;                                          // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseExternalMesh;                                   // 0x0454(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddBeam();
	void AddMapHint();
	void BndEvt__BP_CollectableBase_ObjectNode_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ConstructionScriptImp();
	void DestroyCollectableItem();
	void DoLaunch();
	void ExecuteUbergraph_BP_CollectableBase(int32 EntryPoint);
	void Get_Item_Id(int32* ItemId);
	void GetInteractionPromptText(class APlayerController* Param_Instigator, class FText* Key, class FText* Out_Text_Line_1, class FText* Out_Text_Line_2);
	void IsPvpMatchType(bool* PVPMatchType);
	void LaunchCollectable(const struct FVector& Param_Impulse, double RotForce, bool EnableLight);
	void OnPickUpFail(class APawn* InteractingPawn);
	void OnProjectileStop(const struct FHitResult& ImpactResult);
	void OnRep_FinalTransform();
	void Perform_Interaction(class APawn* InteractingPawn, bool bSuccess);
	void PerformInteraction_on_Server(class APawn* InteractingPawn);
	void PlayProjectile();
	void ReceiveBeginPlay();
	void RefreshScale(const struct FVector& NewScale);
	void RemoveMapHint();
	void Rotation__FinishedFunc();
	void Rotation__UpdateFunc();
	void SetCollectableObject(class UStaticMesh* ObjectMesh, class UClass* InventoryItemDefinition);
	void SetHighlightingRecursively(class AActor* Actor, bool Highlighting);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CollectableBase_C">();
	}
	static class ABP_CollectableBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CollectableBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_CollectableBase_C) == 0x000010, "Wrong alignment on ABP_CollectableBase_C");
static_assert(sizeof(ABP_CollectableBase_C) == 0x000460, "Wrong size on ABP_CollectableBase_C");
static_assert(offsetof(ABP_CollectableBase_C, UberGraphFrame_BP_CollectableBase_C) == 0x000350, "Member 'ABP_CollectableBase_C::UberGraphFrame_BP_CollectableBase_C' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, TgfCollectableLight) == 0x000358, "Member 'ABP_CollectableBase_C::TgfCollectableLight' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, PointLight) == 0x000360, "Member 'ABP_CollectableBase_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, Rotation_Rotation_853FC13145C424E5752B22820AD6EA87) == 0x000368, "Member 'ABP_CollectableBase_C::Rotation_Rotation_853FC13145C424E5752B22820AD6EA87' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, Rotation__Direction_853FC13145C424E5752B22820AD6EA87) == 0x00036C, "Member 'ABP_CollectableBase_C::Rotation__Direction_853FC13145C424E5752B22820AD6EA87' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, Rotation) == 0x000370, "Member 'ABP_CollectableBase_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, CollectableObjectType) == 0x000378, "Member 'ABP_CollectableBase_C::CollectableObjectType' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, Inventory_Instance) == 0x000380, "Member 'ABP_CollectableBase_C::Inventory_Instance' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, Rot_Force) == 0x000388, "Member 'ABP_CollectableBase_C::Rot_Force' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, Impulse) == 0x000390, "Member 'ABP_CollectableBase_C::Impulse' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, BeamVFX) == 0x0003A8, "Member 'ABP_CollectableBase_C::BeamVFX' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, Enable_Light) == 0x0003B0, "Member 'ABP_CollectableBase_C::Enable_Light' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, FinalTransform) == 0x0003C0, "Member 'ABP_CollectableBase_C::FinalTransform' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, ItemTypesToDiscardBeam) == 0x000420, "Member 'ABP_CollectableBase_C::ItemTypesToDiscardBeam' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, ObjectId) == 0x000430, "Member 'ABP_CollectableBase_C::ObjectId' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, AttachedCollectables) == 0x000438, "Member 'ABP_CollectableBase_C::AttachedCollectables' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, BaseRotX) == 0x000448, "Member 'ABP_CollectableBase_C::BaseRotX' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, BaseRotY) == 0x00044C, "Member 'ABP_CollectableBase_C::BaseRotY' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, BaseRotZ) == 0x000450, "Member 'ABP_CollectableBase_C::BaseRotZ' has a wrong offset!");
static_assert(offsetof(ABP_CollectableBase_C, UseExternalMesh) == 0x000454, "Member 'ABP_CollectableBase_C::UseExternalMesh' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LyraGame

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AnimationCore_structs.hpp"
#include "AIModule_structs.hpp"
#include "LyraGame_structs.hpp"
#include "AudioMixer_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "CommonUser_structs.hpp"


namespace SDK::Params
{

// Function LyraGame.TgfAbilityCheats.AddAbilitySet
// 0x0004 (0x0004 - 0x0000)
struct TgfAbilityCheats_AddAbilitySet final
{
public:
	int32                                         AbilitySetId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityCheats_AddAbilitySet) == 0x000004, "Wrong alignment on TgfAbilityCheats_AddAbilitySet");
static_assert(sizeof(TgfAbilityCheats_AddAbilitySet) == 0x000004, "Wrong size on TgfAbilityCheats_AddAbilitySet");
static_assert(offsetof(TgfAbilityCheats_AddAbilitySet, AbilitySetId) == 0x000000, "Member 'TgfAbilityCheats_AddAbilitySet::AbilitySetId' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.AddAttrValue
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilityCheats_AddAttrValue final
{
public:
	class FString                                 AttrStr;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilityCheats_AddAttrValue) == 0x000008, "Wrong alignment on TgfAbilityCheats_AddAttrValue");
static_assert(sizeof(TgfAbilityCheats_AddAttrValue) == 0x000018, "Wrong size on TgfAbilityCheats_AddAttrValue");
static_assert(offsetof(TgfAbilityCheats_AddAttrValue, AttrStr) == 0x000000, "Member 'TgfAbilityCheats_AddAttrValue::AttrStr' has a wrong offset!");
static_assert(offsetof(TgfAbilityCheats_AddAttrValue, Value) == 0x000010, "Member 'TgfAbilityCheats_AddAttrValue::Value' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.AddLooseGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilityCheats_AddLooseGameplayTag final
{
public:
	class FString                                 TagName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedReplicated;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FoundTagInServer;                                  // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilityCheats_AddLooseGameplayTag) == 0x000008, "Wrong alignment on TgfAbilityCheats_AddLooseGameplayTag");
static_assert(sizeof(TgfAbilityCheats_AddLooseGameplayTag) == 0x000018, "Wrong size on TgfAbilityCheats_AddLooseGameplayTag");
static_assert(offsetof(TgfAbilityCheats_AddLooseGameplayTag, TagName) == 0x000000, "Member 'TgfAbilityCheats_AddLooseGameplayTag::TagName' has a wrong offset!");
static_assert(offsetof(TgfAbilityCheats_AddLooseGameplayTag, Nums) == 0x000010, "Member 'TgfAbilityCheats_AddLooseGameplayTag::Nums' has a wrong offset!");
static_assert(offsetof(TgfAbilityCheats_AddLooseGameplayTag, NeedReplicated) == 0x000014, "Member 'TgfAbilityCheats_AddLooseGameplayTag::NeedReplicated' has a wrong offset!");
static_assert(offsetof(TgfAbilityCheats_AddLooseGameplayTag, FoundTagInServer) == 0x000015, "Member 'TgfAbilityCheats_AddLooseGameplayTag::FoundTagInServer' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.GiveAbilitySet
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilityCheats_GiveAbilitySet final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityCheats_GiveAbilitySet) == 0x000008, "Wrong alignment on TgfAbilityCheats_GiveAbilitySet");
static_assert(sizeof(TgfAbilityCheats_GiveAbilitySet) == 0x000010, "Wrong size on TgfAbilityCheats_GiveAbilitySet");
static_assert(offsetof(TgfAbilityCheats_GiveAbilitySet, AssetName) == 0x000000, "Member 'TgfAbilityCheats_GiveAbilitySet::AssetName' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.InjectInput
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilityCheats_InjectInput final
{
public:
	class FString                                 InputStr;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityCheats_InjectInput) == 0x000008, "Wrong alignment on TgfAbilityCheats_InjectInput");
static_assert(sizeof(TgfAbilityCheats_InjectInput) == 0x000010, "Wrong size on TgfAbilityCheats_InjectInput");
static_assert(offsetof(TgfAbilityCheats_InjectInput, InputStr) == 0x000000, "Member 'TgfAbilityCheats_InjectInput::InputStr' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.MulAttrValue
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilityCheats_MulAttrValue final
{
public:
	class FString                                 AttrStr;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilityCheats_MulAttrValue) == 0x000008, "Wrong alignment on TgfAbilityCheats_MulAttrValue");
static_assert(sizeof(TgfAbilityCheats_MulAttrValue) == 0x000018, "Wrong size on TgfAbilityCheats_MulAttrValue");
static_assert(offsetof(TgfAbilityCheats_MulAttrValue, AttrStr) == 0x000000, "Member 'TgfAbilityCheats_MulAttrValue::AttrStr' has a wrong offset!");
static_assert(offsetof(TgfAbilityCheats_MulAttrValue, Value) == 0x000010, "Member 'TgfAbilityCheats_MulAttrValue::Value' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.RebirthLocation
// 0x000C (0x000C - 0x0000)
struct TgfAbilityCheats_RebirthLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityCheats_RebirthLocation) == 0x000004, "Wrong alignment on TgfAbilityCheats_RebirthLocation");
static_assert(sizeof(TgfAbilityCheats_RebirthLocation) == 0x00000C, "Wrong size on TgfAbilityCheats_RebirthLocation");
static_assert(offsetof(TgfAbilityCheats_RebirthLocation, X) == 0x000000, "Member 'TgfAbilityCheats_RebirthLocation::X' has a wrong offset!");
static_assert(offsetof(TgfAbilityCheats_RebirthLocation, Y) == 0x000004, "Member 'TgfAbilityCheats_RebirthLocation::Y' has a wrong offset!");
static_assert(offsetof(TgfAbilityCheats_RebirthLocation, Z) == 0x000008, "Member 'TgfAbilityCheats_RebirthLocation::Z' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.RemoveLooseGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilityCheats_RemoveLooseGameplayTag final
{
public:
	class FString                                 TagName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedReplicated;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FoundTagInServer;                                  // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilityCheats_RemoveLooseGameplayTag) == 0x000008, "Wrong alignment on TgfAbilityCheats_RemoveLooseGameplayTag");
static_assert(sizeof(TgfAbilityCheats_RemoveLooseGameplayTag) == 0x000018, "Wrong size on TgfAbilityCheats_RemoveLooseGameplayTag");
static_assert(offsetof(TgfAbilityCheats_RemoveLooseGameplayTag, TagName) == 0x000000, "Member 'TgfAbilityCheats_RemoveLooseGameplayTag::TagName' has a wrong offset!");
static_assert(offsetof(TgfAbilityCheats_RemoveLooseGameplayTag, Nums) == 0x000010, "Member 'TgfAbilityCheats_RemoveLooseGameplayTag::Nums' has a wrong offset!");
static_assert(offsetof(TgfAbilityCheats_RemoveLooseGameplayTag, NeedReplicated) == 0x000014, "Member 'TgfAbilityCheats_RemoveLooseGameplayTag::NeedReplicated' has a wrong offset!");
static_assert(offsetof(TgfAbilityCheats_RemoveLooseGameplayTag, FoundTagInServer) == 0x000015, "Member 'TgfAbilityCheats_RemoveLooseGameplayTag::FoundTagInServer' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.SetAttrValue
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilityCheats_SetAttrValue final
{
public:
	class FString                                 AttrStr;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilityCheats_SetAttrValue) == 0x000008, "Wrong alignment on TgfAbilityCheats_SetAttrValue");
static_assert(sizeof(TgfAbilityCheats_SetAttrValue) == 0x000018, "Wrong size on TgfAbilityCheats_SetAttrValue");
static_assert(offsetof(TgfAbilityCheats_SetAttrValue, AttrStr) == 0x000000, "Member 'TgfAbilityCheats_SetAttrValue::AttrStr' has a wrong offset!");
static_assert(offsetof(TgfAbilityCheats_SetAttrValue, Value) == 0x000010, "Member 'TgfAbilityCheats_SetAttrValue::Value' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.SetFirstLevel
// 0x0004 (0x0004 - 0x0000)
struct TgfAbilityCheats_SetFirstLevel final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityCheats_SetFirstLevel) == 0x000004, "Wrong alignment on TgfAbilityCheats_SetFirstLevel");
static_assert(sizeof(TgfAbilityCheats_SetFirstLevel) == 0x000004, "Wrong size on TgfAbilityCheats_SetFirstLevel");
static_assert(offsetof(TgfAbilityCheats_SetFirstLevel, Value) == 0x000000, "Member 'TgfAbilityCheats_SetFirstLevel::Value' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.ToggleAuthIgnoreAbilitySystemCooldowns
// 0x0001 (0x0001 - 0x0000)
struct TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCooldowns final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCooldowns) == 0x000001, "Wrong alignment on TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCooldowns");
static_assert(sizeof(TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCooldowns) == 0x000001, "Wrong size on TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCooldowns");
static_assert(offsetof(TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCooldowns, Enabled) == 0x000000, "Member 'TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCooldowns::Enabled' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.ToggleAuthIgnoreAbilitySystemCosts
// 0x0001 (0x0001 - 0x0000)
struct TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCosts final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCosts) == 0x000001, "Wrong alignment on TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCosts");
static_assert(sizeof(TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCosts) == 0x000001, "Wrong size on TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCosts");
static_assert(offsetof(TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCosts, Enabled) == 0x000000, "Member 'TgfAbilityCheats_ToggleAuthIgnoreAbilitySystemCosts::Enabled' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.TriggerInput
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilityCheats_TriggerInput final
{
public:
	class FString                                 InputStr;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityCheats_TriggerInput) == 0x000008, "Wrong alignment on TgfAbilityCheats_TriggerInput");
static_assert(sizeof(TgfAbilityCheats_TriggerInput) == 0x000010, "Wrong size on TgfAbilityCheats_TriggerInput");
static_assert(offsetof(TgfAbilityCheats_TriggerInput, InputStr) == 0x000000, "Member 'TgfAbilityCheats_TriggerInput::InputStr' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.TriggerInputContinous
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilityCheats_TriggerInputContinous final
{
public:
	class FString                                 InputStr;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityCheats_TriggerInputContinous) == 0x000008, "Wrong alignment on TgfAbilityCheats_TriggerInputContinous");
static_assert(sizeof(TgfAbilityCheats_TriggerInputContinous) == 0x000010, "Wrong size on TgfAbilityCheats_TriggerInputContinous");
static_assert(offsetof(TgfAbilityCheats_TriggerInputContinous, InputStr) == 0x000000, "Member 'TgfAbilityCheats_TriggerInputContinous::InputStr' has a wrong offset!");

// Function LyraGame.TgfAbilityCheats.UseOldHit
// 0x0001 (0x0001 - 0x0000)
struct TgfAbilityCheats_UseOldHit final
{
public:
	bool                                          UseOld;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityCheats_UseOldHit) == 0x000001, "Wrong alignment on TgfAbilityCheats_UseOldHit");
static_assert(sizeof(TgfAbilityCheats_UseOldHit) == 0x000001, "Wrong size on TgfAbilityCheats_UseOldHit");
static_assert(offsetof(TgfAbilityCheats_UseOldHit, UseOld) == 0x000000, "Member 'TgfAbilityCheats_UseOldHit::UseOld' has a wrong offset!");

// Function LyraGame.AbilityTask_WaitGameplayTagCountChanged.WaitGameplayTagCountChanged
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOptionalExternalTarget;                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayTagCountChanged* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged) == 0x000008, "Wrong alignment on AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged");
static_assert(sizeof(AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged) == 0x000028, "Wrong size on AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged");
static_assert(offsetof(AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged, Tag) == 0x000008, "Member 'AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged::Tag' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged, InOptionalExternalTarget) == 0x000010, "Member 'AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged::InOptionalExternalTarget' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged, OnlyTriggerOnce) == 0x000018, "Member 'AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged::OnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged, ReturnValue) == 0x000020, "Member 'AbilityTask_WaitGameplayTagCountChanged_WaitGameplayTagCountChanged::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInteractorBattleComponent.MulticastDamageEvent
// 0x0030 (0x0030 - 0x0000)
struct TgfInteractorBattleComponent_MulticastDamageEvent final
{
public:
	class AActor*                                 DamageInstigator;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageInstigatorTags;                              // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         DamageValue;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInteractorBattleComponent_MulticastDamageEvent) == 0x000008, "Wrong alignment on TgfInteractorBattleComponent_MulticastDamageEvent");
static_assert(sizeof(TgfInteractorBattleComponent_MulticastDamageEvent) == 0x000030, "Wrong size on TgfInteractorBattleComponent_MulticastDamageEvent");
static_assert(offsetof(TgfInteractorBattleComponent_MulticastDamageEvent, DamageInstigator) == 0x000000, "Member 'TgfInteractorBattleComponent_MulticastDamageEvent::DamageInstigator' has a wrong offset!");
static_assert(offsetof(TgfInteractorBattleComponent_MulticastDamageEvent, DamageInstigatorTags) == 0x000008, "Member 'TgfInteractorBattleComponent_MulticastDamageEvent::DamageInstigatorTags' has a wrong offset!");
static_assert(offsetof(TgfInteractorBattleComponent_MulticastDamageEvent, DamageValue) == 0x000028, "Member 'TgfInteractorBattleComponent_MulticastDamageEvent::DamageValue' has a wrong offset!");

// Function LyraGame.TgfInteractorBattleComponent.MulticastDeathEvent
// 0x0010 (0x0010 - 0x0000)
struct TgfInteractorBattleComponent_MulticastDeathEvent final
{
public:
	class AActor*                                 DamageInstigator;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageTarget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInteractorBattleComponent_MulticastDeathEvent) == 0x000008, "Wrong alignment on TgfInteractorBattleComponent_MulticastDeathEvent");
static_assert(sizeof(TgfInteractorBattleComponent_MulticastDeathEvent) == 0x000010, "Wrong size on TgfInteractorBattleComponent_MulticastDeathEvent");
static_assert(offsetof(TgfInteractorBattleComponent_MulticastDeathEvent, DamageInstigator) == 0x000000, "Member 'TgfInteractorBattleComponent_MulticastDeathEvent::DamageInstigator' has a wrong offset!");
static_assert(offsetof(TgfInteractorBattleComponent_MulticastDeathEvent, DamageTarget) == 0x000008, "Member 'TgfInteractorBattleComponent_MulticastDeathEvent::DamageTarget' has a wrong offset!");

// Function LyraGame.TgfInteractorBattleComponent.OnHit
// 0x0010 (0x0010 - 0x0000)
struct TgfInteractorBattleComponent_OnHit final
{
public:
	class AActor*                                 SrcActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfUseAttackType                             AttackType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInteractorBattleComponent_OnHit) == 0x000008, "Wrong alignment on TgfInteractorBattleComponent_OnHit");
static_assert(sizeof(TgfInteractorBattleComponent_OnHit) == 0x000010, "Wrong size on TgfInteractorBattleComponent_OnHit");
static_assert(offsetof(TgfInteractorBattleComponent_OnHit, SrcActor) == 0x000000, "Member 'TgfInteractorBattleComponent_OnHit::SrcActor' has a wrong offset!");
static_assert(offsetof(TgfInteractorBattleComponent_OnHit, AttackType) == 0x000008, "Member 'TgfInteractorBattleComponent_OnHit::AttackType' has a wrong offset!");

// Function LyraGame.TgfInteractorBattleComponent.OnRep_DeathState
// 0x0001 (0x0001 - 0x0000)
struct TgfInteractorBattleComponent_OnRep_DeathState final
{
public:
	ETgfDeathState                                OldDeathState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInteractorBattleComponent_OnRep_DeathState) == 0x000001, "Wrong alignment on TgfInteractorBattleComponent_OnRep_DeathState");
static_assert(sizeof(TgfInteractorBattleComponent_OnRep_DeathState) == 0x000001, "Wrong size on TgfInteractorBattleComponent_OnRep_DeathState");
static_assert(offsetof(TgfInteractorBattleComponent_OnRep_DeathState, OldDeathState) == 0x000000, "Member 'TgfInteractorBattleComponent_OnRep_DeathState::OldDeathState' has a wrong offset!");

// Function LyraGame.TgfInteractorBattleComponent.GetCurrentHP
// 0x0004 (0x0004 - 0x0000)
struct TgfInteractorBattleComponent_GetCurrentHP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInteractorBattleComponent_GetCurrentHP) == 0x000004, "Wrong alignment on TgfInteractorBattleComponent_GetCurrentHP");
static_assert(sizeof(TgfInteractorBattleComponent_GetCurrentHP) == 0x000004, "Wrong size on TgfInteractorBattleComponent_GetCurrentHP");
static_assert(offsetof(TgfInteractorBattleComponent_GetCurrentHP, ReturnValue) == 0x000000, "Member 'TgfInteractorBattleComponent_GetCurrentHP::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInteractorBattleComponent.GetDeadOrDying
// 0x0001 (0x0001 - 0x0000)
struct TgfInteractorBattleComponent_GetDeadOrDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInteractorBattleComponent_GetDeadOrDying) == 0x000001, "Wrong alignment on TgfInteractorBattleComponent_GetDeadOrDying");
static_assert(sizeof(TgfInteractorBattleComponent_GetDeadOrDying) == 0x000001, "Wrong size on TgfInteractorBattleComponent_GetDeadOrDying");
static_assert(offsetof(TgfInteractorBattleComponent_GetDeadOrDying, ReturnValue) == 0x000000, "Member 'TgfInteractorBattleComponent_GetDeadOrDying::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInteractorBattleComponent.GetTotalHP
// 0x0004 (0x0004 - 0x0000)
struct TgfInteractorBattleComponent_GetTotalHP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInteractorBattleComponent_GetTotalHP) == 0x000004, "Wrong alignment on TgfInteractorBattleComponent_GetTotalHP");
static_assert(sizeof(TgfInteractorBattleComponent_GetTotalHP) == 0x000004, "Wrong size on TgfInteractorBattleComponent_GetTotalHP");
static_assert(offsetof(TgfInteractorBattleComponent_GetTotalHP, ReturnValue) == 0x000000, "Member 'TgfInteractorBattleComponent_GetTotalHP::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInteractorBattleComponent.IsDeadOrDying
// 0x0001 (0x0001 - 0x0000)
struct TgfInteractorBattleComponent_IsDeadOrDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInteractorBattleComponent_IsDeadOrDying) == 0x000001, "Wrong alignment on TgfInteractorBattleComponent_IsDeadOrDying");
static_assert(sizeof(TgfInteractorBattleComponent_IsDeadOrDying) == 0x000001, "Wrong size on TgfInteractorBattleComponent_IsDeadOrDying");
static_assert(offsetof(TgfInteractorBattleComponent_IsDeadOrDying, ReturnValue) == 0x000000, "Member 'TgfInteractorBattleComponent_IsDeadOrDying::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInteractorBattleComponent.IsEnableBattle
// 0x0001 (0x0001 - 0x0000)
struct TgfInteractorBattleComponent_IsEnableBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInteractorBattleComponent_IsEnableBattle) == 0x000001, "Wrong alignment on TgfInteractorBattleComponent_IsEnableBattle");
static_assert(sizeof(TgfInteractorBattleComponent_IsEnableBattle) == 0x000001, "Wrong size on TgfInteractorBattleComponent_IsEnableBattle");
static_assert(offsetof(TgfInteractorBattleComponent_IsEnableBattle, ReturnValue) == 0x000000, "Member 'TgfInteractorBattleComponent_IsEnableBattle::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.ForceSpectate
// 0x0001 (0x0001 - 0x0000)
struct TgfCharacterCheats_ForceSpectate final
{
public:
	bool                                          ToSpectate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_ForceSpectate) == 0x000001, "Wrong alignment on TgfCharacterCheats_ForceSpectate");
static_assert(sizeof(TgfCharacterCheats_ForceSpectate) == 0x000001, "Wrong size on TgfCharacterCheats_ForceSpectate");
static_assert(offsetof(TgfCharacterCheats_ForceSpectate, ToSpectate) == 0x000000, "Member 'TgfCharacterCheats_ForceSpectate::ToSpectate' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.HidePlayerNames
// 0x0001 (0x0001 - 0x0000)
struct TgfCharacterCheats_HidePlayerNames final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_HidePlayerNames) == 0x000001, "Wrong alignment on TgfCharacterCheats_HidePlayerNames");
static_assert(sizeof(TgfCharacterCheats_HidePlayerNames) == 0x000001, "Wrong size on TgfCharacterCheats_HidePlayerNames");
static_assert(offsetof(TgfCharacterCheats_HidePlayerNames, Hide) == 0x000000, "Member 'TgfCharacterCheats_HidePlayerNames::Hide' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.ReinitCharaCareer
// 0x0004 (0x0004 - 0x0000)
struct TgfCharacterCheats_ReinitCharaCareer final
{
public:
	int32                                         CareerInt;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_ReinitCharaCareer) == 0x000004, "Wrong alignment on TgfCharacterCheats_ReinitCharaCareer");
static_assert(sizeof(TgfCharacterCheats_ReinitCharaCareer) == 0x000004, "Wrong size on TgfCharacterCheats_ReinitCharaCareer");
static_assert(offsetof(TgfCharacterCheats_ReinitCharaCareer, CareerInt) == 0x000000, "Member 'TgfCharacterCheats_ReinitCharaCareer::CareerInt' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SetActorMapBounds
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterCheats_SetActorMapBounds final
{
public:
	float                                         AIBound;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickBound;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_SetActorMapBounds) == 0x000004, "Wrong alignment on TgfCharacterCheats_SetActorMapBounds");
static_assert(sizeof(TgfCharacterCheats_SetActorMapBounds) == 0x000008, "Wrong size on TgfCharacterCheats_SetActorMapBounds");
static_assert(offsetof(TgfCharacterCheats_SetActorMapBounds, AIBound) == 0x000000, "Member 'TgfCharacterCheats_SetActorMapBounds::AIBound' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SetActorMapBounds, TickBound) == 0x000004, "Member 'TgfCharacterCheats_SetActorMapBounds::TickBound' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SetCharaLocation
// 0x000C (0x000C - 0x0000)
struct TgfCharacterCheats_SetCharaLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_SetCharaLocation) == 0x000004, "Wrong alignment on TgfCharacterCheats_SetCharaLocation");
static_assert(sizeof(TgfCharacterCheats_SetCharaLocation) == 0x00000C, "Wrong size on TgfCharacterCheats_SetCharaLocation");
static_assert(offsetof(TgfCharacterCheats_SetCharaLocation, X) == 0x000000, "Member 'TgfCharacterCheats_SetCharaLocation::X' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SetCharaLocation, Y) == 0x000004, "Member 'TgfCharacterCheats_SetCharaLocation::Y' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SetCharaLocation, Z) == 0x000008, "Member 'TgfCharacterCheats_SetCharaLocation::Z' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SetDisplayCareerAndRace
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterCheats_SetDisplayCareerAndRace final
{
public:
	int32                                         CareerInt;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaceInt;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_SetDisplayCareerAndRace) == 0x000004, "Wrong alignment on TgfCharacterCheats_SetDisplayCareerAndRace");
static_assert(sizeof(TgfCharacterCheats_SetDisplayCareerAndRace) == 0x000008, "Wrong size on TgfCharacterCheats_SetDisplayCareerAndRace");
static_assert(offsetof(TgfCharacterCheats_SetDisplayCareerAndRace, CareerInt) == 0x000000, "Member 'TgfCharacterCheats_SetDisplayCareerAndRace::CareerInt' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SetDisplayCareerAndRace, RaceInt) == 0x000004, "Member 'TgfCharacterCheats_SetDisplayCareerAndRace::RaceInt' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SetFreeze
// 0x0001 (0x0001 - 0x0000)
struct TgfCharacterCheats_SetFreeze final
{
public:
	bool                                          bFreeze;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_SetFreeze) == 0x000001, "Wrong alignment on TgfCharacterCheats_SetFreeze");
static_assert(sizeof(TgfCharacterCheats_SetFreeze) == 0x000001, "Wrong size on TgfCharacterCheats_SetFreeze");
static_assert(offsetof(TgfCharacterCheats_SetFreeze, bFreeze) == 0x000000, "Member 'TgfCharacterCheats_SetFreeze::bFreeze' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SetMithrilCharacter
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterCheats_SetMithrilCharacter final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemainingRebirthChance;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_SetMithrilCharacter) == 0x000004, "Wrong alignment on TgfCharacterCheats_SetMithrilCharacter");
static_assert(sizeof(TgfCharacterCheats_SetMithrilCharacter) == 0x000008, "Wrong size on TgfCharacterCheats_SetMithrilCharacter");
static_assert(offsetof(TgfCharacterCheats_SetMithrilCharacter, Value) == 0x000000, "Member 'TgfCharacterCheats_SetMithrilCharacter::Value' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SetMithrilCharacter, RemainingRebirthChance) == 0x000004, "Member 'TgfCharacterCheats_SetMithrilCharacter::RemainingRebirthChance' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SetPlayerSceneTag
// 0x0004 (0x0004 - 0x0000)
struct TgfCharacterCheats_SetPlayerSceneTag final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_SetPlayerSceneTag) == 0x000004, "Wrong alignment on TgfCharacterCheats_SetPlayerSceneTag");
static_assert(sizeof(TgfCharacterCheats_SetPlayerSceneTag) == 0x000004, "Wrong size on TgfCharacterCheats_SetPlayerSceneTag");
static_assert(offsetof(TgfCharacterCheats_SetPlayerSceneTag, Tag) == 0x000000, "Member 'TgfCharacterCheats_SetPlayerSceneTag::Tag' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SetPlayMontageDelay
// 0x0010 (0x0010 - 0x0000)
struct TgfCharacterCheats_SetPlayMontageDelay final
{
public:
	bool                                          bOpenServerPlayDelay;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenClientBehind;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenClientAhead;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChaseMaxPing;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_SetPlayMontageDelay) == 0x000004, "Wrong alignment on TgfCharacterCheats_SetPlayMontageDelay");
static_assert(sizeof(TgfCharacterCheats_SetPlayMontageDelay) == 0x000010, "Wrong size on TgfCharacterCheats_SetPlayMontageDelay");
static_assert(offsetof(TgfCharacterCheats_SetPlayMontageDelay, bOpenServerPlayDelay) == 0x000000, "Member 'TgfCharacterCheats_SetPlayMontageDelay::bOpenServerPlayDelay' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SetPlayMontageDelay, DelayTime) == 0x000004, "Member 'TgfCharacterCheats_SetPlayMontageDelay::DelayTime' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SetPlayMontageDelay, bOpenClientBehind) == 0x000008, "Member 'TgfCharacterCheats_SetPlayMontageDelay::bOpenClientBehind' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SetPlayMontageDelay, bOpenClientAhead) == 0x000009, "Member 'TgfCharacterCheats_SetPlayMontageDelay::bOpenClientAhead' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SetPlayMontageDelay, ChaseMaxPing) == 0x00000C, "Member 'TgfCharacterCheats_SetPlayMontageDelay::ChaseMaxPing' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SpawnActor
// 0x0018 (0x0018 - 0x0000)
struct TgfCharacterCheats_SpawnActor final
{
public:
	class FString                                 ClassPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterCheats_SpawnActor) == 0x000008, "Wrong alignment on TgfCharacterCheats_SpawnActor");
static_assert(sizeof(TgfCharacterCheats_SpawnActor) == 0x000018, "Wrong size on TgfCharacterCheats_SpawnActor");
static_assert(offsetof(TgfCharacterCheats_SpawnActor, ClassPath) == 0x000000, "Member 'TgfCharacterCheats_SpawnActor::ClassPath' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SpawnActor, Distance) == 0x000010, "Member 'TgfCharacterCheats_SpawnActor::Distance' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SpawnMonster
// 0x0020 (0x0020 - 0x0000)
struct TgfCharacterCheats_SpawnMonster final
{
public:
	class FString                                 ClassPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootIndex;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Dormant;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterCheats_SpawnMonster) == 0x000008, "Wrong alignment on TgfCharacterCheats_SpawnMonster");
static_assert(sizeof(TgfCharacterCheats_SpawnMonster) == 0x000020, "Wrong size on TgfCharacterCheats_SpawnMonster");
static_assert(offsetof(TgfCharacterCheats_SpawnMonster, ClassPath) == 0x000000, "Member 'TgfCharacterCheats_SpawnMonster::ClassPath' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SpawnMonster, Distance) == 0x000010, "Member 'TgfCharacterCheats_SpawnMonster::Distance' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SpawnMonster, LootIndex) == 0x000014, "Member 'TgfCharacterCheats_SpawnMonster::LootIndex' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SpawnMonster, Dormant) == 0x000018, "Member 'TgfCharacterCheats_SpawnMonster::Dormant' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.TestTryIncreaseAndCheckSecurityInvalidCount
// 0x0004 (0x0004 - 0x0000)
struct TgfCharacterCheats_TestTryIncreaseAndCheckSecurityInvalidCount final
{
public:
	int32                                         Reason;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_TestTryIncreaseAndCheckSecurityInvalidCount) == 0x000004, "Wrong alignment on TgfCharacterCheats_TestTryIncreaseAndCheckSecurityInvalidCount");
static_assert(sizeof(TgfCharacterCheats_TestTryIncreaseAndCheckSecurityInvalidCount) == 0x000004, "Wrong size on TgfCharacterCheats_TestTryIncreaseAndCheckSecurityInvalidCount");
static_assert(offsetof(TgfCharacterCheats_TestTryIncreaseAndCheckSecurityInvalidCount, Reason) == 0x000000, "Member 'TgfCharacterCheats_TestTryIncreaseAndCheckSecurityInvalidCount::Reason' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.AddSkin
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterCheats_AddSkin final
{
public:
	int32                                         SkinType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_AddSkin) == 0x000004, "Wrong alignment on TgfCharacterCheats_AddSkin");
static_assert(sizeof(TgfCharacterCheats_AddSkin) == 0x000008, "Wrong size on TgfCharacterCheats_AddSkin");
static_assert(offsetof(TgfCharacterCheats_AddSkin, SkinType) == 0x000000, "Member 'TgfCharacterCheats_AddSkin::SkinType' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_AddSkin, SkinId) == 0x000004, "Member 'TgfCharacterCheats_AddSkin::SkinId' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SetFaceConfig
// 0x0018 (0x0018 - 0x0000)
struct TgfCharacterCheats_SetFaceConfig final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterCheats_SetFaceConfig) == 0x000008, "Wrong alignment on TgfCharacterCheats_SetFaceConfig");
static_assert(sizeof(TgfCharacterCheats_SetFaceConfig) == 0x000018, "Wrong size on TgfCharacterCheats_SetFaceConfig");
static_assert(offsetof(TgfCharacterCheats_SetFaceConfig, Param_Name) == 0x000000, "Member 'TgfCharacterCheats_SetFaceConfig::Param_Name' has a wrong offset!");
static_assert(offsetof(TgfCharacterCheats_SetFaceConfig, Type) == 0x000010, "Member 'TgfCharacterCheats_SetFaceConfig::Type' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SetGender
// 0x0004 (0x0004 - 0x0000)
struct TgfCharacterCheats_SetGender final
{
public:
	int32                                         Gender;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_SetGender) == 0x000004, "Wrong alignment on TgfCharacterCheats_SetGender");
static_assert(sizeof(TgfCharacterCheats_SetGender) == 0x000004, "Wrong size on TgfCharacterCheats_SetGender");
static_assert(offsetof(TgfCharacterCheats_SetGender, Gender) == 0x000000, "Member 'TgfCharacterCheats_SetGender::Gender' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct TgfCharacterCheats_SetPlayerName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_SetPlayerName) == 0x000008, "Wrong alignment on TgfCharacterCheats_SetPlayerName");
static_assert(sizeof(TgfCharacterCheats_SetPlayerName) == 0x000010, "Wrong size on TgfCharacterCheats_SetPlayerName");
static_assert(offsetof(TgfCharacterCheats_SetPlayerName, Param_Name) == 0x000000, "Member 'TgfCharacterCheats_SetPlayerName::Param_Name' has a wrong offset!");

// Function LyraGame.TgfCharacterCheats.SetRace
// 0x0004 (0x0004 - 0x0000)
struct TgfCharacterCheats_SetRace final
{
public:
	int32                                         Race;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterCheats_SetRace) == 0x000004, "Wrong alignment on TgfCharacterCheats_SetRace");
static_assert(sizeof(TgfCharacterCheats_SetRace) == 0x000004, "Wrong size on TgfCharacterCheats_SetRace");
static_assert(offsetof(TgfCharacterCheats_SetRace, Race) == 0x000000, "Member 'TgfCharacterCheats_SetRace::Race' has a wrong offset!");

// Function LyraGame.AbilityTask_MonitorMove.MonitorMove
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_MonitorMove_MonitorMove final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDuration;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldExecuteAtFirst;                             // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_MonitorMove*               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_MonitorMove_MonitorMove) == 0x000008, "Wrong alignment on AbilityTask_MonitorMove_MonitorMove");
static_assert(sizeof(AbilityTask_MonitorMove_MonitorMove) == 0x000028, "Wrong size on AbilityTask_MonitorMove_MonitorMove");
static_assert(offsetof(AbilityTask_MonitorMove_MonitorMove, OwningAbility) == 0x000000, "Member 'AbilityTask_MonitorMove_MonitorMove::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_MonitorMove_MonitorMove, TaskName) == 0x000008, "Member 'AbilityTask_MonitorMove_MonitorMove::TaskName' has a wrong offset!");
static_assert(offsetof(AbilityTask_MonitorMove_MonitorMove, bHasDuration) == 0x000010, "Member 'AbilityTask_MonitorMove_MonitorMove::bHasDuration' has a wrong offset!");
static_assert(offsetof(AbilityTask_MonitorMove_MonitorMove, Duration) == 0x000014, "Member 'AbilityTask_MonitorMove_MonitorMove::Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_MonitorMove_MonitorMove, Period) == 0x000018, "Member 'AbilityTask_MonitorMove_MonitorMove::Period' has a wrong offset!");
static_assert(offsetof(AbilityTask_MonitorMove_MonitorMove, bShouldExecuteAtFirst) == 0x00001C, "Member 'AbilityTask_MonitorMove_MonitorMove::bShouldExecuteAtFirst' has a wrong offset!");
static_assert(offsetof(AbilityTask_MonitorMove_MonitorMove, ReturnValue) == 0x000020, "Member 'AbilityTask_MonitorMove_MonitorMove::ReturnValue' has a wrong offset!");

// Function LyraGame.RoleDisplayAttributeUtility.GetMaxHealth
// 0x0010 (0x0010 - 0x0000)
struct RoleDisplayAttributeUtility_GetMaxHealth final
{
public:
	class ULyraAbilitySystemComponent*            AbilitySystem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RoleDisplayAttributeUtility_GetMaxHealth) == 0x000008, "Wrong alignment on RoleDisplayAttributeUtility_GetMaxHealth");
static_assert(sizeof(RoleDisplayAttributeUtility_GetMaxHealth) == 0x000010, "Wrong size on RoleDisplayAttributeUtility_GetMaxHealth");
static_assert(offsetof(RoleDisplayAttributeUtility_GetMaxHealth, AbilitySystem) == 0x000000, "Member 'RoleDisplayAttributeUtility_GetMaxHealth::AbilitySystem' has a wrong offset!");
static_assert(offsetof(RoleDisplayAttributeUtility_GetMaxHealth, ReturnValue) == 0x000008, "Member 'RoleDisplayAttributeUtility_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function LyraGame.RoleDisplayAttributeUtility.SortRoleDisplayAttribute
// 0x0020 (0x0020 - 0x0000)
struct RoleDisplayAttributeUtility_SortRoleDisplayAttribute final
{
public:
	TArray<struct FRoleDisplayAttribute>          Attributes;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRoleDisplayAttribute>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleDisplayAttributeUtility_SortRoleDisplayAttribute) == 0x000008, "Wrong alignment on RoleDisplayAttributeUtility_SortRoleDisplayAttribute");
static_assert(sizeof(RoleDisplayAttributeUtility_SortRoleDisplayAttribute) == 0x000020, "Wrong size on RoleDisplayAttributeUtility_SortRoleDisplayAttribute");
static_assert(offsetof(RoleDisplayAttributeUtility_SortRoleDisplayAttribute, Attributes) == 0x000000, "Member 'RoleDisplayAttributeUtility_SortRoleDisplayAttribute::Attributes' has a wrong offset!");
static_assert(offsetof(RoleDisplayAttributeUtility_SortRoleDisplayAttribute, ReturnValue) == 0x000010, "Member 'RoleDisplayAttributeUtility_SortRoleDisplayAttribute::ReturnValue' has a wrong offset!");

// Function LyraGame.AbilityTask_StateChangeMonitor.WaitMonitorStateChanged
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_StateChangeMonitor_WaitMonitorStateChanged final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerImmediately;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TriggerCounts;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_StateChangeMonitor*        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_StateChangeMonitor_WaitMonitorStateChanged) == 0x000008, "Wrong alignment on AbilityTask_StateChangeMonitor_WaitMonitorStateChanged");
static_assert(sizeof(AbilityTask_StateChangeMonitor_WaitMonitorStateChanged) == 0x000020, "Wrong size on AbilityTask_StateChangeMonitor_WaitMonitorStateChanged");
static_assert(offsetof(AbilityTask_StateChangeMonitor_WaitMonitorStateChanged, OwningAbility) == 0x000000, "Member 'AbilityTask_StateChangeMonitor_WaitMonitorStateChanged::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_StateChangeMonitor_WaitMonitorStateChanged, TaskName) == 0x000008, "Member 'AbilityTask_StateChangeMonitor_WaitMonitorStateChanged::TaskName' has a wrong offset!");
static_assert(offsetof(AbilityTask_StateChangeMonitor_WaitMonitorStateChanged, TriggerImmediately) == 0x000010, "Member 'AbilityTask_StateChangeMonitor_WaitMonitorStateChanged::TriggerImmediately' has a wrong offset!");
static_assert(offsetof(AbilityTask_StateChangeMonitor_WaitMonitorStateChanged, TriggerCounts) == 0x000014, "Member 'AbilityTask_StateChangeMonitor_WaitMonitorStateChanged::TriggerCounts' has a wrong offset!");
static_assert(offsetof(AbilityTask_StateChangeMonitor_WaitMonitorStateChanged, ReturnValue) == 0x000018, "Member 'AbilityTask_StateChangeMonitor_WaitMonitorStateChanged::ReturnValue' has a wrong offset!");

// Function LyraGame.AsyncAtion_AppearanceDataListen.RegisterAppearanceDataListen
// 0x0018 (0x0018 - 0x0000)
struct AsyncAtion_AppearanceDataListen_RegisterAppearanceDataListen final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RoleID;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAtion_AppearanceDataListen*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAtion_AppearanceDataListen_RegisterAppearanceDataListen) == 0x000008, "Wrong alignment on AsyncAtion_AppearanceDataListen_RegisterAppearanceDataListen");
static_assert(sizeof(AsyncAtion_AppearanceDataListen_RegisterAppearanceDataListen) == 0x000018, "Wrong size on AsyncAtion_AppearanceDataListen_RegisterAppearanceDataListen");
static_assert(offsetof(AsyncAtion_AppearanceDataListen_RegisterAppearanceDataListen, WorldContextObject) == 0x000000, "Member 'AsyncAtion_AppearanceDataListen_RegisterAppearanceDataListen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAtion_AppearanceDataListen_RegisterAppearanceDataListen, RoleID) == 0x000008, "Member 'AsyncAtion_AppearanceDataListen_RegisterAppearanceDataListen::RoleID' has a wrong offset!");
static_assert(offsetof(AsyncAtion_AppearanceDataListen_RegisterAppearanceDataListen, ReturnValue) == 0x000010, "Member 'AsyncAtion_AppearanceDataListen_RegisterAppearanceDataListen::ReturnValue' has a wrong offset!");

// Function LyraGame.AsyncAtion_AppearanceDataListen.HandleOnAppearanceDataGet
// 0x0010 (0x0010 - 0x0000)
struct AsyncAtion_AppearanceDataListen_HandleOnAppearanceDataGet final
{
public:
	int64                                         InRoleID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SlateBrush;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAtion_AppearanceDataListen_HandleOnAppearanceDataGet) == 0x000008, "Wrong alignment on AsyncAtion_AppearanceDataListen_HandleOnAppearanceDataGet");
static_assert(sizeof(AsyncAtion_AppearanceDataListen_HandleOnAppearanceDataGet) == 0x000010, "Wrong size on AsyncAtion_AppearanceDataListen_HandleOnAppearanceDataGet");
static_assert(offsetof(AsyncAtion_AppearanceDataListen_HandleOnAppearanceDataGet, InRoleID) == 0x000000, "Member 'AsyncAtion_AppearanceDataListen_HandleOnAppearanceDataGet::InRoleID' has a wrong offset!");
static_assert(offsetof(AsyncAtion_AppearanceDataListen_HandleOnAppearanceDataGet, SlateBrush) == 0x000008, "Member 'AsyncAtion_AppearanceDataListen_HandleOnAppearanceDataGet::SlateBrush' has a wrong offset!");

// Function LyraGame.RuneSwordSkillHelperActor.GetOwnerPawn
// 0x0008 (0x0008 - 0x0000)
struct RuneSwordSkillHelperActor_GetOwnerPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuneSwordSkillHelperActor_GetOwnerPawn) == 0x000008, "Wrong alignment on RuneSwordSkillHelperActor_GetOwnerPawn");
static_assert(sizeof(RuneSwordSkillHelperActor_GetOwnerPawn) == 0x000008, "Wrong size on RuneSwordSkillHelperActor_GetOwnerPawn");
static_assert(offsetof(RuneSwordSkillHelperActor_GetOwnerPawn, ReturnValue) == 0x000000, "Member 'RuneSwordSkillHelperActor_GetOwnerPawn::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAnimNotifyState_MontagePlayRate.MontagePlayRateRevert
// 0x0010 (0x0010 - 0x0000)
struct TgfAnimNotifyState_MontagePlayRate_MontagePlayRateRevert final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAnimNotifyState_MontagePlayRate_MontagePlayRateRevert) == 0x000008, "Wrong alignment on TgfAnimNotifyState_MontagePlayRate_MontagePlayRateRevert");
static_assert(sizeof(TgfAnimNotifyState_MontagePlayRate_MontagePlayRateRevert) == 0x000010, "Wrong size on TgfAnimNotifyState_MontagePlayRate_MontagePlayRateRevert");
static_assert(offsetof(TgfAnimNotifyState_MontagePlayRate_MontagePlayRateRevert, MeshComp) == 0x000000, "Member 'TgfAnimNotifyState_MontagePlayRate_MontagePlayRateRevert::MeshComp' has a wrong offset!");
static_assert(offsetof(TgfAnimNotifyState_MontagePlayRate_MontagePlayRateRevert, Animation) == 0x000008, "Member 'TgfAnimNotifyState_MontagePlayRate_MontagePlayRateRevert::Animation' has a wrong offset!");

// Function LyraGame.TgfAnimNotifyState_MontagePlayRate.MontagePlayRateTakeEffect
// 0x0010 (0x0010 - 0x0000)
struct TgfAnimNotifyState_MontagePlayRate_MontagePlayRateTakeEffect final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAnimNotifyState_MontagePlayRate_MontagePlayRateTakeEffect) == 0x000008, "Wrong alignment on TgfAnimNotifyState_MontagePlayRate_MontagePlayRateTakeEffect");
static_assert(sizeof(TgfAnimNotifyState_MontagePlayRate_MontagePlayRateTakeEffect) == 0x000010, "Wrong size on TgfAnimNotifyState_MontagePlayRate_MontagePlayRateTakeEffect");
static_assert(offsetof(TgfAnimNotifyState_MontagePlayRate_MontagePlayRateTakeEffect, MeshComp) == 0x000000, "Member 'TgfAnimNotifyState_MontagePlayRate_MontagePlayRateTakeEffect::MeshComp' has a wrong offset!");
static_assert(offsetof(TgfAnimNotifyState_MontagePlayRate_MontagePlayRateTakeEffect, Animation) == 0x000008, "Member 'TgfAnimNotifyState_MontagePlayRate_MontagePlayRateTakeEffect::Animation' has a wrong offset!");

// Function LyraGame.AbilityTask_TickMonitor.WaitMonitorSatisfied
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_TickMonitor_WaitMonitorSatisfied final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_TickMonitor*               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_TickMonitor_WaitMonitorSatisfied) == 0x000008, "Wrong alignment on AbilityTask_TickMonitor_WaitMonitorSatisfied");
static_assert(sizeof(AbilityTask_TickMonitor_WaitMonitorSatisfied) == 0x000020, "Wrong size on AbilityTask_TickMonitor_WaitMonitorSatisfied");
static_assert(offsetof(AbilityTask_TickMonitor_WaitMonitorSatisfied, OwningAbility) == 0x000000, "Member 'AbilityTask_TickMonitor_WaitMonitorSatisfied::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_TickMonitor_WaitMonitorSatisfied, TaskName) == 0x000008, "Member 'AbilityTask_TickMonitor_WaitMonitorSatisfied::TaskName' has a wrong offset!");
static_assert(offsetof(AbilityTask_TickMonitor_WaitMonitorSatisfied, OnlyTriggerOnce) == 0x000010, "Member 'AbilityTask_TickMonitor_WaitMonitorSatisfied::OnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(AbilityTask_TickMonitor_WaitMonitorSatisfied, ReturnValue) == 0x000018, "Member 'AbilityTask_TickMonitor_WaitMonitorSatisfied::ReturnValue' has a wrong offset!");

// Function LyraGame.AbilityTask_WaitForInteractableTargets_ProjectileTrace.WaitForInteractableTargets_ProjectileTrace
// 0x00F0 (0x00F0 - 0x0000)
struct AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionProfileName                  TraceProfile;                                      // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InteractionScanRate;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetingLocationInfo  Param_StartLocation;                               // 0x0020(0x00A0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ProjectileRadius;                                  // 0x00C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaunchVelocity;                                    // 0x00C8(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimTime;                                        // 0x00E0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x00E4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitForInteractableTargets_ProjectileTrace* ReturnValue;                                       // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace) == 0x000010, "Wrong alignment on AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace");
static_assert(sizeof(AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace) == 0x0000F0, "Wrong size on AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace, TraceProfile) == 0x000008, "Member 'AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace::TraceProfile' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace, InteractionScanRate) == 0x000010, "Member 'AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace::InteractionScanRate' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace, Param_StartLocation) == 0x000020, "Member 'AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace::Param_StartLocation' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace, ProjectileRadius) == 0x0000C0, "Member 'AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace::ProjectileRadius' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace, LaunchVelocity) == 0x0000C8, "Member 'AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace, MaxSimTime) == 0x0000E0, "Member 'AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace::MaxSimTime' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace, TraceChannel) == 0x0000E4, "Member 'AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace::TraceChannel' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace, ReturnValue) == 0x0000E8, "Member 'AbilityTask_WaitForInteractableTargets_ProjectileTrace_WaitForInteractableTargets_ProjectileTrace::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetBase.GetGameWidgetCharacter
// 0x0008 (0x0008 - 0x0000)
struct TgfGameWidgetBase_GetGameWidgetCharacter final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetBase_GetGameWidgetCharacter) == 0x000008, "Wrong alignment on TgfGameWidgetBase_GetGameWidgetCharacter");
static_assert(sizeof(TgfGameWidgetBase_GetGameWidgetCharacter) == 0x000008, "Wrong size on TgfGameWidgetBase_GetGameWidgetCharacter");
static_assert(offsetof(TgfGameWidgetBase_GetGameWidgetCharacter, ReturnValue) == 0x000000, "Member 'TgfGameWidgetBase_GetGameWidgetCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetBase.SetCustomCharacter
// 0x0008 (0x0008 - 0x0000)
struct TgfGameWidgetBase_SetCustomCharacter final
{
public:
	class ALyraCharacter*                         InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetBase_SetCustomCharacter) == 0x000008, "Wrong alignment on TgfGameWidgetBase_SetCustomCharacter");
static_assert(sizeof(TgfGameWidgetBase_SetCustomCharacter) == 0x000008, "Wrong size on TgfGameWidgetBase_SetCustomCharacter");
static_assert(offsetof(TgfGameWidgetBase_SetCustomCharacter, InCharacter) == 0x000000, "Member 'TgfGameWidgetBase_SetCustomCharacter::InCharacter' has a wrong offset!");

// Function LyraGame.TgfGameWidgetBase.GetLyraAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct TgfGameWidgetBase_GetLyraAbilitySystemComponent final
{
public:
	class ULyraAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetBase_GetLyraAbilitySystemComponent) == 0x000008, "Wrong alignment on TgfGameWidgetBase_GetLyraAbilitySystemComponent");
static_assert(sizeof(TgfGameWidgetBase_GetLyraAbilitySystemComponent) == 0x000008, "Wrong size on TgfGameWidgetBase_GetLyraAbilitySystemComponent");
static_assert(offsetof(TgfGameWidgetBase_GetLyraAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'TgfGameWidgetBase_GetLyraAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetBase.GetLyraPlayerController
// 0x0008 (0x0008 - 0x0000)
struct TgfGameWidgetBase_GetLyraPlayerController final
{
public:
	class ALyraPlayerController*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetBase_GetLyraPlayerController) == 0x000008, "Wrong alignment on TgfGameWidgetBase_GetLyraPlayerController");
static_assert(sizeof(TgfGameWidgetBase_GetLyraPlayerController) == 0x000008, "Wrong size on TgfGameWidgetBase_GetLyraPlayerController");
static_assert(offsetof(TgfGameWidgetBase_GetLyraPlayerController, ReturnValue) == 0x000000, "Member 'TgfGameWidgetBase_GetLyraPlayerController::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetBase.GetSelfLyraAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct TgfGameWidgetBase_GetSelfLyraAbilitySystemComponent final
{
public:
	class ULyraAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetBase_GetSelfLyraAbilitySystemComponent) == 0x000008, "Wrong alignment on TgfGameWidgetBase_GetSelfLyraAbilitySystemComponent");
static_assert(sizeof(TgfGameWidgetBase_GetSelfLyraAbilitySystemComponent) == 0x000008, "Wrong size on TgfGameWidgetBase_GetSelfLyraAbilitySystemComponent");
static_assert(offsetof(TgfGameWidgetBase_GetSelfLyraAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'TgfGameWidgetBase_GetSelfLyraAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetBase.GetTgfEquipmentManagerComponent
// 0x0008 (0x0008 - 0x0000)
struct TgfGameWidgetBase_GetTgfEquipmentManagerComponent final
{
public:
	class UTgfEquipmentManagerComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetBase_GetTgfEquipmentManagerComponent) == 0x000008, "Wrong alignment on TgfGameWidgetBase_GetTgfEquipmentManagerComponent");
static_assert(sizeof(TgfGameWidgetBase_GetTgfEquipmentManagerComponent) == 0x000008, "Wrong size on TgfGameWidgetBase_GetTgfEquipmentManagerComponent");
static_assert(offsetof(TgfGameWidgetBase_GetTgfEquipmentManagerComponent, ReturnValue) == 0x000000, "Member 'TgfGameWidgetBase_GetTgfEquipmentManagerComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.BP_OnApplyGECallback
// 0x0018 (0x0018 - 0x0000)
struct TgfDashBoardWidget_BP_OnApplyGECallback final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGameplayEffect*                  GE;                                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_BP_OnApplyGECallback) == 0x000008, "Wrong alignment on TgfDashBoardWidget_BP_OnApplyGECallback");
static_assert(sizeof(TgfDashBoardWidget_BP_OnApplyGECallback) == 0x000018, "Wrong size on TgfDashBoardWidget_BP_OnApplyGECallback");
static_assert(offsetof(TgfDashBoardWidget_BP_OnApplyGECallback, Target) == 0x000000, "Member 'TgfDashBoardWidget_BP_OnApplyGECallback::Target' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnApplyGECallback, GE) == 0x000008, "Member 'TgfDashBoardWidget_BP_OnApplyGECallback::GE' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnApplyGECallback, ActiveHandle) == 0x000010, "Member 'TgfDashBoardWidget_BP_OnApplyGECallback::ActiveHandle' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.BP_OnBuffAdd
// 0x0020 (0x0020 - 0x0000)
struct TgfDashBoardWidget_BP_OnBuffAdd final
{
public:
	class UTgfGameplayEffect*                     GE;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCnt;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfDashBoardWidget_BP_OnBuffAdd) == 0x000008, "Wrong alignment on TgfDashBoardWidget_BP_OnBuffAdd");
static_assert(sizeof(TgfDashBoardWidget_BP_OnBuffAdd) == 0x000020, "Wrong size on TgfDashBoardWidget_BP_OnBuffAdd");
static_assert(offsetof(TgfDashBoardWidget_BP_OnBuffAdd, GE) == 0x000000, "Member 'TgfDashBoardWidget_BP_OnBuffAdd::GE' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnBuffAdd, ActiveHandle) == 0x000008, "Member 'TgfDashBoardWidget_BP_OnBuffAdd::ActiveHandle' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnBuffAdd, RemainTime) == 0x000010, "Member 'TgfDashBoardWidget_BP_OnBuffAdd::RemainTime' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnBuffAdd, TotalTime) == 0x000014, "Member 'TgfDashBoardWidget_BP_OnBuffAdd::TotalTime' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnBuffAdd, StackCnt) == 0x000018, "Member 'TgfDashBoardWidget_BP_OnBuffAdd::StackCnt' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.BP_OnCastFailed
// 0x0020 (0x0020 - 0x0000)
struct TgfDashBoardWidget_BP_OnCastFailed final
{
public:
	const class UGameplayAbility*                 FailedGA;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FailedText;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_BP_OnCastFailed) == 0x000008, "Wrong alignment on TgfDashBoardWidget_BP_OnCastFailed");
static_assert(sizeof(TgfDashBoardWidget_BP_OnCastFailed) == 0x000020, "Wrong size on TgfDashBoardWidget_BP_OnCastFailed");
static_assert(offsetof(TgfDashBoardWidget_BP_OnCastFailed, FailedGA) == 0x000000, "Member 'TgfDashBoardWidget_BP_OnCastFailed::FailedGA' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnCastFailed, Tag) == 0x000008, "Member 'TgfDashBoardWidget_BP_OnCastFailed::Tag' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnCastFailed, FailedText) == 0x000010, "Member 'TgfDashBoardWidget_BP_OnCastFailed::FailedText' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.BP_OnGEDurationChange
// 0x0014 (0x0014 - 0x0000)
struct TgfDashBoardWidget_BP_OnGEDurationChange final
{
public:
	struct FActiveGameplayEffectHandle            GEHandle;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCnt;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_BP_OnGEDurationChange) == 0x000004, "Wrong alignment on TgfDashBoardWidget_BP_OnGEDurationChange");
static_assert(sizeof(TgfDashBoardWidget_BP_OnGEDurationChange) == 0x000014, "Wrong size on TgfDashBoardWidget_BP_OnGEDurationChange");
static_assert(offsetof(TgfDashBoardWidget_BP_OnGEDurationChange, GEHandle) == 0x000000, "Member 'TgfDashBoardWidget_BP_OnGEDurationChange::GEHandle' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnGEDurationChange, NewTime) == 0x000008, "Member 'TgfDashBoardWidget_BP_OnGEDurationChange::NewTime' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnGEDurationChange, TotalTime) == 0x00000C, "Member 'TgfDashBoardWidget_BP_OnGEDurationChange::TotalTime' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnGEDurationChange, StackCnt) == 0x000010, "Member 'TgfDashBoardWidget_BP_OnGEDurationChange::StackCnt' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.BP_OnGERemove
// 0x0008 (0x0008 - 0x0000)
struct TgfDashBoardWidget_BP_OnGERemove final
{
public:
	struct FActiveGameplayEffectHandle            GEHandle;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_BP_OnGERemove) == 0x000004, "Wrong alignment on TgfDashBoardWidget_BP_OnGERemove");
static_assert(sizeof(TgfDashBoardWidget_BP_OnGERemove) == 0x000008, "Wrong size on TgfDashBoardWidget_BP_OnGERemove");
static_assert(offsetof(TgfDashBoardWidget_BP_OnGERemove, GEHandle) == 0x000000, "Member 'TgfDashBoardWidget_BP_OnGERemove::GEHandle' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.BP_OnListenedTagChange
// 0x000C (0x000C - 0x0000)
struct TgfDashBoardWidget_BP_OnListenedTagChange final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCnt;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_BP_OnListenedTagChange) == 0x000004, "Wrong alignment on TgfDashBoardWidget_BP_OnListenedTagChange");
static_assert(sizeof(TgfDashBoardWidget_BP_OnListenedTagChange) == 0x00000C, "Wrong size on TgfDashBoardWidget_BP_OnListenedTagChange");
static_assert(offsetof(TgfDashBoardWidget_BP_OnListenedTagChange, Tag) == 0x000000, "Member 'TgfDashBoardWidget_BP_OnListenedTagChange::Tag' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_BP_OnListenedTagChange, NewCnt) == 0x000008, "Member 'TgfDashBoardWidget_BP_OnListenedTagChange::NewCnt' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.GetCareerAndRaceFromNecklace
// 0x0003 (0x0003 - 0x0000)
struct TgfDashBoardWidget_GetCareerAndRaceFromNecklace final
{
public:
	ETgfActorCareer                               OutCareer;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 OutRace;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_GetCareerAndRaceFromNecklace) == 0x000001, "Wrong alignment on TgfDashBoardWidget_GetCareerAndRaceFromNecklace");
static_assert(sizeof(TgfDashBoardWidget_GetCareerAndRaceFromNecklace) == 0x000003, "Wrong size on TgfDashBoardWidget_GetCareerAndRaceFromNecklace");
static_assert(offsetof(TgfDashBoardWidget_GetCareerAndRaceFromNecklace, OutCareer) == 0x000000, "Member 'TgfDashBoardWidget_GetCareerAndRaceFromNecklace::OutCareer' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_GetCareerAndRaceFromNecklace, OutRace) == 0x000001, "Member 'TgfDashBoardWidget_GetCareerAndRaceFromNecklace::OutRace' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_GetCareerAndRaceFromNecklace, ReturnValue) == 0x000002, "Member 'TgfDashBoardWidget_GetCareerAndRaceFromNecklace::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.GetCurMagic
// 0x0004 (0x0004 - 0x0000)
struct TgfDashBoardWidget_GetCurMagic final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_GetCurMagic) == 0x000004, "Wrong alignment on TgfDashBoardWidget_GetCurMagic");
static_assert(sizeof(TgfDashBoardWidget_GetCurMagic) == 0x000004, "Wrong size on TgfDashBoardWidget_GetCurMagic");
static_assert(offsetof(TgfDashBoardWidget_GetCurMagic, ReturnValue) == 0x000000, "Member 'TgfDashBoardWidget_GetCurMagic::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.GetHealthBarType
// 0x0003 (0x0003 - 0x0000)
struct TgfDashBoardWidget_GetHealthBarType final
{
public:
	ETgfActorCareer                               Career;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 Race;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthBarType                                ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_GetHealthBarType) == 0x000001, "Wrong alignment on TgfDashBoardWidget_GetHealthBarType");
static_assert(sizeof(TgfDashBoardWidget_GetHealthBarType) == 0x000003, "Wrong size on TgfDashBoardWidget_GetHealthBarType");
static_assert(offsetof(TgfDashBoardWidget_GetHealthBarType, Career) == 0x000000, "Member 'TgfDashBoardWidget_GetHealthBarType::Career' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_GetHealthBarType, Race) == 0x000001, "Member 'TgfDashBoardWidget_GetHealthBarType::Race' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_GetHealthBarType, ReturnValue) == 0x000002, "Member 'TgfDashBoardWidget_GetHealthBarType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.GetMaxMagicFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfDashBoardWidget_GetMaxMagicFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_GetMaxMagicFinal) == 0x000004, "Wrong alignment on TgfDashBoardWidget_GetMaxMagicFinal");
static_assert(sizeof(TgfDashBoardWidget_GetMaxMagicFinal) == 0x000004, "Wrong size on TgfDashBoardWidget_GetMaxMagicFinal");
static_assert(offsetof(TgfDashBoardWidget_GetMaxMagicFinal, ReturnValue) == 0x000000, "Member 'TgfDashBoardWidget_GetMaxMagicFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.GetTgfSkillGA
// 0x0028 (0x0028 - 0x0000)
struct TgfDashBoardWidget_GetTgfSkillGA final
{
public:
	class ULyraAbilitySystemComponent*            ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   Tags;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UGameplayAbility*>               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_GetTgfSkillGA) == 0x000008, "Wrong alignment on TgfDashBoardWidget_GetTgfSkillGA");
static_assert(sizeof(TgfDashBoardWidget_GetTgfSkillGA) == 0x000028, "Wrong size on TgfDashBoardWidget_GetTgfSkillGA");
static_assert(offsetof(TgfDashBoardWidget_GetTgfSkillGA, ASC) == 0x000000, "Member 'TgfDashBoardWidget_GetTgfSkillGA::ASC' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_GetTgfSkillGA, Tags) == 0x000008, "Member 'TgfDashBoardWidget_GetTgfSkillGA::Tags' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_GetTgfSkillGA, ReturnValue) == 0x000018, "Member 'TgfDashBoardWidget_GetTgfSkillGA::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.ListenTagChanged
// 0x0040 (0x0040 - 0x0000)
struct TgfDashBoardWidget_ListenTagChanged final
{
public:
	struct FGameplayTagContainer                  Container1;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Container2;                                        // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_ListenTagChanged) == 0x000008, "Wrong alignment on TgfDashBoardWidget_ListenTagChanged");
static_assert(sizeof(TgfDashBoardWidget_ListenTagChanged) == 0x000040, "Wrong size on TgfDashBoardWidget_ListenTagChanged");
static_assert(offsetof(TgfDashBoardWidget_ListenTagChanged, Container1) == 0x000000, "Member 'TgfDashBoardWidget_ListenTagChanged::Container1' has a wrong offset!");
static_assert(offsetof(TgfDashBoardWidget_ListenTagChanged, Container2) == 0x000020, "Member 'TgfDashBoardWidget_ListenTagChanged::Container2' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.OnChangeViewTarget
// 0x0008 (0x0008 - 0x0000)
struct TgfDashBoardWidget_OnChangeViewTarget final
{
public:
	class AActor*                                 NewViewTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_OnChangeViewTarget) == 0x000008, "Wrong alignment on TgfDashBoardWidget_OnChangeViewTarget");
static_assert(sizeof(TgfDashBoardWidget_OnChangeViewTarget) == 0x000008, "Wrong size on TgfDashBoardWidget_OnChangeViewTarget");
static_assert(offsetof(TgfDashBoardWidget_OnChangeViewTarget, NewViewTarget) == 0x000000, "Member 'TgfDashBoardWidget_OnChangeViewTarget::NewViewTarget' has a wrong offset!");

// Function LyraGame.TgfDashBoardWidget.SetAttachCareer
// 0x0001 (0x0001 - 0x0000)
struct TgfDashBoardWidget_SetAttachCareer final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDashBoardWidget_SetAttachCareer) == 0x000001, "Wrong alignment on TgfDashBoardWidget_SetAttachCareer");
static_assert(sizeof(TgfDashBoardWidget_SetAttachCareer) == 0x000001, "Wrong size on TgfDashBoardWidget_SetAttachCareer");
static_assert(offsetof(TgfDashBoardWidget_SetAttachCareer, bValue) == 0x000000, "Member 'TgfDashBoardWidget_SetAttachCareer::bValue' has a wrong offset!");

// Function LyraGame.ActorMapComponent.UpdateCharacterGravity
// 0x0010 (0x0010 - 0x0000)
struct ActorMapComponent_UpdateCharacterGravity final
{
public:
	class AActor*                                 LocalPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultGravity;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetGravity;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapComponent_UpdateCharacterGravity) == 0x000008, "Wrong alignment on ActorMapComponent_UpdateCharacterGravity");
static_assert(sizeof(ActorMapComponent_UpdateCharacterGravity) == 0x000010, "Wrong size on ActorMapComponent_UpdateCharacterGravity");
static_assert(offsetof(ActorMapComponent_UpdateCharacterGravity, LocalPawn) == 0x000000, "Member 'ActorMapComponent_UpdateCharacterGravity::LocalPawn' has a wrong offset!");
static_assert(offsetof(ActorMapComponent_UpdateCharacterGravity, DefaultGravity) == 0x000008, "Member 'ActorMapComponent_UpdateCharacterGravity::DefaultGravity' has a wrong offset!");
static_assert(offsetof(ActorMapComponent_UpdateCharacterGravity, TargetGravity) == 0x00000C, "Member 'ActorMapComponent_UpdateCharacterGravity::TargetGravity' has a wrong offset!");

// Function LyraGame.ActorMapComponent.UpdateCharacterPlayerNameHeight
// 0x0018 (0x0018 - 0x0000)
struct ActorMapComponent_UpdateCharacterPlayerNameHeight final
{
public:
	class AActor*                                 LocalPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                       PlayNameComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           LocationCurve;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapComponent_UpdateCharacterPlayerNameHeight) == 0x000008, "Wrong alignment on ActorMapComponent_UpdateCharacterPlayerNameHeight");
static_assert(sizeof(ActorMapComponent_UpdateCharacterPlayerNameHeight) == 0x000018, "Wrong size on ActorMapComponent_UpdateCharacterPlayerNameHeight");
static_assert(offsetof(ActorMapComponent_UpdateCharacterPlayerNameHeight, LocalPawn) == 0x000000, "Member 'ActorMapComponent_UpdateCharacterPlayerNameHeight::LocalPawn' has a wrong offset!");
static_assert(offsetof(ActorMapComponent_UpdateCharacterPlayerNameHeight, PlayNameComponent) == 0x000008, "Member 'ActorMapComponent_UpdateCharacterPlayerNameHeight::PlayNameComponent' has a wrong offset!");
static_assert(offsetof(ActorMapComponent_UpdateCharacterPlayerNameHeight, LocationCurve) == 0x000010, "Member 'ActorMapComponent_UpdateCharacterPlayerNameHeight::LocationCurve' has a wrong offset!");

// Function LyraGame.ActorMapComponent.CheckInDistanceToLocalPlayer
// 0x000C (0x000C - 0x0000)
struct ActorMapComponent_CheckInDistanceToLocalPlayer final
{
public:
	float                                         XYDis;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZDis;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorMapComponent_CheckInDistanceToLocalPlayer) == 0x000004, "Wrong alignment on ActorMapComponent_CheckInDistanceToLocalPlayer");
static_assert(sizeof(ActorMapComponent_CheckInDistanceToLocalPlayer) == 0x00000C, "Wrong size on ActorMapComponent_CheckInDistanceToLocalPlayer");
static_assert(offsetof(ActorMapComponent_CheckInDistanceToLocalPlayer, XYDis) == 0x000000, "Member 'ActorMapComponent_CheckInDistanceToLocalPlayer::XYDis' has a wrong offset!");
static_assert(offsetof(ActorMapComponent_CheckInDistanceToLocalPlayer, ZDis) == 0x000004, "Member 'ActorMapComponent_CheckInDistanceToLocalPlayer::ZDis' has a wrong offset!");
static_assert(offsetof(ActorMapComponent_CheckInDistanceToLocalPlayer, ReturnValue) == 0x000008, "Member 'ActorMapComponent_CheckInDistanceToLocalPlayer::ReturnValue' has a wrong offset!");

// Function LyraGame.ActorMapComponent.GetLyraCharacter
// 0x0008 (0x0008 - 0x0000)
struct ActorMapComponent_GetLyraCharacter final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapComponent_GetLyraCharacter) == 0x000008, "Wrong alignment on ActorMapComponent_GetLyraCharacter");
static_assert(sizeof(ActorMapComponent_GetLyraCharacter) == 0x000008, "Wrong size on ActorMapComponent_GetLyraCharacter");
static_assert(offsetof(ActorMapComponent_GetLyraCharacter, ReturnValue) == 0x000000, "Member 'ActorMapComponent_GetLyraCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.AddDeltaMonsterAINum
// 0x0008 (0x0008 - 0x0000)
struct ActorMapSubsystem_AddDeltaMonsterAINum final
{
public:
	int32                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_AddDeltaMonsterAINum) == 0x000004, "Wrong alignment on ActorMapSubsystem_AddDeltaMonsterAINum");
static_assert(sizeof(ActorMapSubsystem_AddDeltaMonsterAINum) == 0x000008, "Wrong size on ActorMapSubsystem_AddDeltaMonsterAINum");
static_assert(offsetof(ActorMapSubsystem_AddDeltaMonsterAINum, Delta) == 0x000000, "Member 'ActorMapSubsystem_AddDeltaMonsterAINum::Delta' has a wrong offset!");
static_assert(offsetof(ActorMapSubsystem_AddDeltaMonsterAINum, Total) == 0x000004, "Member 'ActorMapSubsystem_AddDeltaMonsterAINum::Total' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.AddDeltaMonsterTickNum
// 0x0008 (0x0008 - 0x0000)
struct ActorMapSubsystem_AddDeltaMonsterTickNum final
{
public:
	int32                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_AddDeltaMonsterTickNum) == 0x000004, "Wrong alignment on ActorMapSubsystem_AddDeltaMonsterTickNum");
static_assert(sizeof(ActorMapSubsystem_AddDeltaMonsterTickNum) == 0x000008, "Wrong size on ActorMapSubsystem_AddDeltaMonsterTickNum");
static_assert(offsetof(ActorMapSubsystem_AddDeltaMonsterTickNum, Delta) == 0x000000, "Member 'ActorMapSubsystem_AddDeltaMonsterTickNum::Delta' has a wrong offset!");
static_assert(offsetof(ActorMapSubsystem_AddDeltaMonsterTickNum, Total) == 0x000004, "Member 'ActorMapSubsystem_AddDeltaMonsterTickNum::Total' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.AddHero
// 0x0008 (0x0008 - 0x0000)
struct ActorMapSubsystem_AddHero final
{
public:
	class ALyraCharacter*                         Hero;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_AddHero) == 0x000008, "Wrong alignment on ActorMapSubsystem_AddHero");
static_assert(sizeof(ActorMapSubsystem_AddHero) == 0x000008, "Wrong size on ActorMapSubsystem_AddHero");
static_assert(offsetof(ActorMapSubsystem_AddHero, Hero) == 0x000000, "Member 'ActorMapSubsystem_AddHero::Hero' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.CheckCharacterEnabled
// 0x0010 (0x0010 - 0x0000)
struct ActorMapSubsystem_CheckCharacterEnabled final
{
public:
	class ALyraCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bound;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorMapSubsystem_CheckCharacterEnabled) == 0x000008, "Wrong alignment on ActorMapSubsystem_CheckCharacterEnabled");
static_assert(sizeof(ActorMapSubsystem_CheckCharacterEnabled) == 0x000010, "Wrong size on ActorMapSubsystem_CheckCharacterEnabled");
static_assert(offsetof(ActorMapSubsystem_CheckCharacterEnabled, Character) == 0x000000, "Member 'ActorMapSubsystem_CheckCharacterEnabled::Character' has a wrong offset!");
static_assert(offsetof(ActorMapSubsystem_CheckCharacterEnabled, Bound) == 0x000008, "Member 'ActorMapSubsystem_CheckCharacterEnabled::Bound' has a wrong offset!");
static_assert(offsetof(ActorMapSubsystem_CheckCharacterEnabled, ReturnValue) == 0x00000C, "Member 'ActorMapSubsystem_CheckCharacterEnabled::ReturnValue' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.GetCurrentHeroNum
// 0x0004 (0x0004 - 0x0000)
struct ActorMapSubsystem_GetCurrentHeroNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_GetCurrentHeroNum) == 0x000004, "Wrong alignment on ActorMapSubsystem_GetCurrentHeroNum");
static_assert(sizeof(ActorMapSubsystem_GetCurrentHeroNum) == 0x000004, "Wrong size on ActorMapSubsystem_GetCurrentHeroNum");
static_assert(offsetof(ActorMapSubsystem_GetCurrentHeroNum, ReturnValue) == 0x000000, "Member 'ActorMapSubsystem_GetCurrentHeroNum::ReturnValue' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.RemoveHero
// 0x0008 (0x0008 - 0x0000)
struct ActorMapSubsystem_RemoveHero final
{
public:
	class ALyraCharacter*                         Hero;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_RemoveHero) == 0x000008, "Wrong alignment on ActorMapSubsystem_RemoveHero");
static_assert(sizeof(ActorMapSubsystem_RemoveHero) == 0x000008, "Wrong size on ActorMapSubsystem_RemoveHero");
static_assert(offsetof(ActorMapSubsystem_RemoveHero, Hero) == 0x000000, "Member 'ActorMapSubsystem_RemoveHero::Hero' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.SetMonsterActorMapAIBound
// 0x0004 (0x0004 - 0x0000)
struct ActorMapSubsystem_SetMonsterActorMapAIBound final
{
public:
	float                                         Bound;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_SetMonsterActorMapAIBound) == 0x000004, "Wrong alignment on ActorMapSubsystem_SetMonsterActorMapAIBound");
static_assert(sizeof(ActorMapSubsystem_SetMonsterActorMapAIBound) == 0x000004, "Wrong size on ActorMapSubsystem_SetMonsterActorMapAIBound");
static_assert(offsetof(ActorMapSubsystem_SetMonsterActorMapAIBound, Bound) == 0x000000, "Member 'ActorMapSubsystem_SetMonsterActorMapAIBound::Bound' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.SetMonsterActorMapTickBound
// 0x0004 (0x0004 - 0x0000)
struct ActorMapSubsystem_SetMonsterActorMapTickBound final
{
public:
	float                                         Bound;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_SetMonsterActorMapTickBound) == 0x000004, "Wrong alignment on ActorMapSubsystem_SetMonsterActorMapTickBound");
static_assert(sizeof(ActorMapSubsystem_SetMonsterActorMapTickBound) == 0x000004, "Wrong size on ActorMapSubsystem_SetMonsterActorMapTickBound");
static_assert(offsetof(ActorMapSubsystem_SetMonsterActorMapTickBound, Bound) == 0x000000, "Member 'ActorMapSubsystem_SetMonsterActorMapTickBound::Bound' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.GetMonsterActorMapAIBound
// 0x0004 (0x0004 - 0x0000)
struct ActorMapSubsystem_GetMonsterActorMapAIBound final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_GetMonsterActorMapAIBound) == 0x000004, "Wrong alignment on ActorMapSubsystem_GetMonsterActorMapAIBound");
static_assert(sizeof(ActorMapSubsystem_GetMonsterActorMapAIBound) == 0x000004, "Wrong size on ActorMapSubsystem_GetMonsterActorMapAIBound");
static_assert(offsetof(ActorMapSubsystem_GetMonsterActorMapAIBound, ReturnValue) == 0x000000, "Member 'ActorMapSubsystem_GetMonsterActorMapAIBound::ReturnValue' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.GetMonsterActorMapTickBound
// 0x0004 (0x0004 - 0x0000)
struct ActorMapSubsystem_GetMonsterActorMapTickBound final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_GetMonsterActorMapTickBound) == 0x000004, "Wrong alignment on ActorMapSubsystem_GetMonsterActorMapTickBound");
static_assert(sizeof(ActorMapSubsystem_GetMonsterActorMapTickBound) == 0x000004, "Wrong size on ActorMapSubsystem_GetMonsterActorMapTickBound");
static_assert(offsetof(ActorMapSubsystem_GetMonsterActorMapTickBound, ReturnValue) == 0x000000, "Member 'ActorMapSubsystem_GetMonsterActorMapTickBound::ReturnValue' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.GetMonsterAIEnableNum
// 0x0004 (0x0004 - 0x0000)
struct ActorMapSubsystem_GetMonsterAIEnableNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_GetMonsterAIEnableNum) == 0x000004, "Wrong alignment on ActorMapSubsystem_GetMonsterAIEnableNum");
static_assert(sizeof(ActorMapSubsystem_GetMonsterAIEnableNum) == 0x000004, "Wrong size on ActorMapSubsystem_GetMonsterAIEnableNum");
static_assert(offsetof(ActorMapSubsystem_GetMonsterAIEnableNum, ReturnValue) == 0x000000, "Member 'ActorMapSubsystem_GetMonsterAIEnableNum::ReturnValue' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.GetMonsterAITotalNum
// 0x0004 (0x0004 - 0x0000)
struct ActorMapSubsystem_GetMonsterAITotalNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_GetMonsterAITotalNum) == 0x000004, "Wrong alignment on ActorMapSubsystem_GetMonsterAITotalNum");
static_assert(sizeof(ActorMapSubsystem_GetMonsterAITotalNum) == 0x000004, "Wrong size on ActorMapSubsystem_GetMonsterAITotalNum");
static_assert(offsetof(ActorMapSubsystem_GetMonsterAITotalNum, ReturnValue) == 0x000000, "Member 'ActorMapSubsystem_GetMonsterAITotalNum::ReturnValue' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.GetMonsterTickEnableNum
// 0x0004 (0x0004 - 0x0000)
struct ActorMapSubsystem_GetMonsterTickEnableNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_GetMonsterTickEnableNum) == 0x000004, "Wrong alignment on ActorMapSubsystem_GetMonsterTickEnableNum");
static_assert(sizeof(ActorMapSubsystem_GetMonsterTickEnableNum) == 0x000004, "Wrong size on ActorMapSubsystem_GetMonsterTickEnableNum");
static_assert(offsetof(ActorMapSubsystem_GetMonsterTickEnableNum, ReturnValue) == 0x000000, "Member 'ActorMapSubsystem_GetMonsterTickEnableNum::ReturnValue' has a wrong offset!");

// Function LyraGame.ActorMapSubsystem.GetMonsterTickTotalNum
// 0x0004 (0x0004 - 0x0000)
struct ActorMapSubsystem_GetMonsterTickTotalNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMapSubsystem_GetMonsterTickTotalNum) == 0x000004, "Wrong alignment on ActorMapSubsystem_GetMonsterTickTotalNum");
static_assert(sizeof(ActorMapSubsystem_GetMonsterTickTotalNum) == 0x000004, "Wrong size on ActorMapSubsystem_GetMonsterTickTotalNum");
static_assert(offsetof(ActorMapSubsystem_GetMonsterTickTotalNum, ReturnValue) == 0x000000, "Member 'ActorMapSubsystem_GetMonsterTickTotalNum::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCheckBox.TgfOnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct TgfCheckBox_TgfOnCheckStateChanged final
{
public:
	ECheckBoxState                                NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheckBox_TgfOnCheckStateChanged) == 0x000001, "Wrong alignment on TgfCheckBox_TgfOnCheckStateChanged");
static_assert(sizeof(TgfCheckBox_TgfOnCheckStateChanged) == 0x000001, "Wrong size on TgfCheckBox_TgfOnCheckStateChanged");
static_assert(offsetof(TgfCheckBox_TgfOnCheckStateChanged, NewState) == 0x000000, "Member 'TgfCheckBox_TgfOnCheckStateChanged::NewState' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.GetActorSimpleCollisionCylinderExtent
// 0x0020 (0x0020 - 0x0000)
struct AIBlueprintHelperExLibrary_GetActorSimpleCollisionCylinderExtent final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionCylinderExtent) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_GetActorSimpleCollisionCylinderExtent");
static_assert(sizeof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionCylinderExtent) == 0x000020, "Wrong size on AIBlueprintHelperExLibrary_GetActorSimpleCollisionCylinderExtent");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionCylinderExtent, Actor) == 0x000000, "Member 'AIBlueprintHelperExLibrary_GetActorSimpleCollisionCylinderExtent::Actor' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionCylinderExtent, ReturnValue) == 0x000008, "Member 'AIBlueprintHelperExLibrary_GetActorSimpleCollisionCylinderExtent::ReturnValue' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.GetActorSimpleCollisionHalfHeight
// 0x0010 (0x0010 - 0x0000)
struct AIBlueprintHelperExLibrary_GetActorSimpleCollisionHalfHeight final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionHalfHeight) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_GetActorSimpleCollisionHalfHeight");
static_assert(sizeof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionHalfHeight) == 0x000010, "Wrong size on AIBlueprintHelperExLibrary_GetActorSimpleCollisionHalfHeight");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionHalfHeight, Actor) == 0x000000, "Member 'AIBlueprintHelperExLibrary_GetActorSimpleCollisionHalfHeight::Actor' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionHalfHeight, ReturnValue) == 0x000008, "Member 'AIBlueprintHelperExLibrary_GetActorSimpleCollisionHalfHeight::ReturnValue' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.GetActorSimpleCollisionRadius
// 0x0010 (0x0010 - 0x0000)
struct AIBlueprintHelperExLibrary_GetActorSimpleCollisionRadius final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionRadius) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_GetActorSimpleCollisionRadius");
static_assert(sizeof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionRadius) == 0x000010, "Wrong size on AIBlueprintHelperExLibrary_GetActorSimpleCollisionRadius");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionRadius, Actor) == 0x000000, "Member 'AIBlueprintHelperExLibrary_GetActorSimpleCollisionRadius::Actor' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetActorSimpleCollisionRadius, ReturnValue) == 0x000008, "Member 'AIBlueprintHelperExLibrary_GetActorSimpleCollisionRadius::ReturnValue' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.GetAISenseConfig
// 0x0018 (0x0018 - 0x0000)
struct AIBlueprintHelperExLibrary_GetAISenseConfig final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAISense>                   SenseClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAISenseConfig*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBlueprintHelperExLibrary_GetAISenseConfig) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_GetAISenseConfig");
static_assert(sizeof(AIBlueprintHelperExLibrary_GetAISenseConfig) == 0x000018, "Wrong size on AIBlueprintHelperExLibrary_GetAISenseConfig");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetAISenseConfig, Controller) == 0x000000, "Member 'AIBlueprintHelperExLibrary_GetAISenseConfig::Controller' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetAISenseConfig, SenseClass) == 0x000008, "Member 'AIBlueprintHelperExLibrary_GetAISenseConfig::SenseClass' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetAISenseConfig, ReturnValue) == 0x000010, "Member 'AIBlueprintHelperExLibrary_GetAISenseConfig::ReturnValue' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.GetAISenseHearingRange
// 0x0010 (0x0010 - 0x0000)
struct AIBlueprintHelperExLibrary_GetAISenseHearingRange final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBlueprintHelperExLibrary_GetAISenseHearingRange) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_GetAISenseHearingRange");
static_assert(sizeof(AIBlueprintHelperExLibrary_GetAISenseHearingRange) == 0x000010, "Wrong size on AIBlueprintHelperExLibrary_GetAISenseHearingRange");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetAISenseHearingRange, Controller) == 0x000000, "Member 'AIBlueprintHelperExLibrary_GetAISenseHearingRange::Controller' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetAISenseHearingRange, ReturnValue) == 0x000008, "Member 'AIBlueprintHelperExLibrary_GetAISenseHearingRange::ReturnValue' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.GetAISenseSightPeripheralVisionAngleDegrees
// 0x0010 (0x0010 - 0x0000)
struct AIBlueprintHelperExLibrary_GetAISenseSightPeripheralVisionAngleDegrees final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBlueprintHelperExLibrary_GetAISenseSightPeripheralVisionAngleDegrees) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_GetAISenseSightPeripheralVisionAngleDegrees");
static_assert(sizeof(AIBlueprintHelperExLibrary_GetAISenseSightPeripheralVisionAngleDegrees) == 0x000010, "Wrong size on AIBlueprintHelperExLibrary_GetAISenseSightPeripheralVisionAngleDegrees");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetAISenseSightPeripheralVisionAngleDegrees, Controller) == 0x000000, "Member 'AIBlueprintHelperExLibrary_GetAISenseSightPeripheralVisionAngleDegrees::Controller' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetAISenseSightPeripheralVisionAngleDegrees, ReturnValue) == 0x000008, "Member 'AIBlueprintHelperExLibrary_GetAISenseSightPeripheralVisionAngleDegrees::ReturnValue' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.GetAISenseSightRadius
// 0x0010 (0x0010 - 0x0000)
struct AIBlueprintHelperExLibrary_GetAISenseSightRadius final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBlueprintHelperExLibrary_GetAISenseSightRadius) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_GetAISenseSightRadius");
static_assert(sizeof(AIBlueprintHelperExLibrary_GetAISenseSightRadius) == 0x000010, "Wrong size on AIBlueprintHelperExLibrary_GetAISenseSightRadius");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetAISenseSightRadius, Controller) == 0x000000, "Member 'AIBlueprintHelperExLibrary_GetAISenseSightRadius::Controller' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_GetAISenseSightRadius, ReturnValue) == 0x000008, "Member 'AIBlueprintHelperExLibrary_GetAISenseSightRadius::ReturnValue' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.PauseLogic
// 0x0018 (0x0018 - 0x0000)
struct AIBlueprintHelperExLibrary_PauseLogic final
{
public:
	class UBrainComponent*                        BrainComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBlueprintHelperExLibrary_PauseLogic) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_PauseLogic");
static_assert(sizeof(AIBlueprintHelperExLibrary_PauseLogic) == 0x000018, "Wrong size on AIBlueprintHelperExLibrary_PauseLogic");
static_assert(offsetof(AIBlueprintHelperExLibrary_PauseLogic, BrainComponent) == 0x000000, "Member 'AIBlueprintHelperExLibrary_PauseLogic::BrainComponent' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_PauseLogic, Reason) == 0x000008, "Member 'AIBlueprintHelperExLibrary_PauseLogic::Reason' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.RefreshAIPerceptionStimuliSource
// 0x0018 (0x0018 - 0x0000)
struct AIBlueprintHelperExLibrary_RefreshAIPerceptionStimuliSource final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAISense>                   Sense;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBlueprintHelperExLibrary_RefreshAIPerceptionStimuliSource) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_RefreshAIPerceptionStimuliSource");
static_assert(sizeof(AIBlueprintHelperExLibrary_RefreshAIPerceptionStimuliSource) == 0x000018, "Wrong size on AIBlueprintHelperExLibrary_RefreshAIPerceptionStimuliSource");
static_assert(offsetof(AIBlueprintHelperExLibrary_RefreshAIPerceptionStimuliSource, WorldContextObject) == 0x000000, "Member 'AIBlueprintHelperExLibrary_RefreshAIPerceptionStimuliSource::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_RefreshAIPerceptionStimuliSource, Sense) == 0x000008, "Member 'AIBlueprintHelperExLibrary_RefreshAIPerceptionStimuliSource::Sense' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_RefreshAIPerceptionStimuliSource, Target) == 0x000010, "Member 'AIBlueprintHelperExLibrary_RefreshAIPerceptionStimuliSource::Target' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.ResumeLogic
// 0x0018 (0x0018 - 0x0000)
struct AIBlueprintHelperExLibrary_ResumeLogic final
{
public:
	class UBrainComponent*                        BrainComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBlueprintHelperExLibrary_ResumeLogic) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_ResumeLogic");
static_assert(sizeof(AIBlueprintHelperExLibrary_ResumeLogic) == 0x000018, "Wrong size on AIBlueprintHelperExLibrary_ResumeLogic");
static_assert(offsetof(AIBlueprintHelperExLibrary_ResumeLogic, BrainComponent) == 0x000000, "Member 'AIBlueprintHelperExLibrary_ResumeLogic::BrainComponent' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_ResumeLogic, Reason) == 0x000008, "Member 'AIBlueprintHelperExLibrary_ResumeLogic::Reason' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.SetAISenseEnabled
// 0x0018 (0x0018 - 0x0000)
struct AIBlueprintHelperExLibrary_SetAISenseEnabled final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAISense>                   SenseClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBlueprintHelperExLibrary_SetAISenseEnabled) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_SetAISenseEnabled");
static_assert(sizeof(AIBlueprintHelperExLibrary_SetAISenseEnabled) == 0x000018, "Wrong size on AIBlueprintHelperExLibrary_SetAISenseEnabled");
static_assert(offsetof(AIBlueprintHelperExLibrary_SetAISenseEnabled, Controller) == 0x000000, "Member 'AIBlueprintHelperExLibrary_SetAISenseEnabled::Controller' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_SetAISenseEnabled, SenseClass) == 0x000008, "Member 'AIBlueprintHelperExLibrary_SetAISenseEnabled::SenseClass' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_SetAISenseEnabled, bEnable) == 0x000010, "Member 'AIBlueprintHelperExLibrary_SetAISenseEnabled::bEnable' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.SetAISenseHearingRange
// 0x0010 (0x0010 - 0x0000)
struct AIBlueprintHelperExLibrary_SetAISenseHearingRange final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBlueprintHelperExLibrary_SetAISenseHearingRange) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_SetAISenseHearingRange");
static_assert(sizeof(AIBlueprintHelperExLibrary_SetAISenseHearingRange) == 0x000010, "Wrong size on AIBlueprintHelperExLibrary_SetAISenseHearingRange");
static_assert(offsetof(AIBlueprintHelperExLibrary_SetAISenseHearingRange, Controller) == 0x000000, "Member 'AIBlueprintHelperExLibrary_SetAISenseHearingRange::Controller' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_SetAISenseHearingRange, Range) == 0x000008, "Member 'AIBlueprintHelperExLibrary_SetAISenseHearingRange::Range' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.SetAISensesEnabled
// 0x0010 (0x0010 - 0x0000)
struct AIBlueprintHelperExLibrary_SetAISensesEnabled final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBlueprintHelperExLibrary_SetAISensesEnabled) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_SetAISensesEnabled");
static_assert(sizeof(AIBlueprintHelperExLibrary_SetAISensesEnabled) == 0x000010, "Wrong size on AIBlueprintHelperExLibrary_SetAISensesEnabled");
static_assert(offsetof(AIBlueprintHelperExLibrary_SetAISensesEnabled, Controller) == 0x000000, "Member 'AIBlueprintHelperExLibrary_SetAISensesEnabled::Controller' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_SetAISensesEnabled, bEnable) == 0x000008, "Member 'AIBlueprintHelperExLibrary_SetAISensesEnabled::bEnable' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.SetAISenseSightPeripheralVisionAngleDegrees
// 0x0010 (0x0010 - 0x0000)
struct AIBlueprintHelperExLibrary_SetAISenseSightPeripheralVisionAngleDegrees final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Degrees;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBlueprintHelperExLibrary_SetAISenseSightPeripheralVisionAngleDegrees) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_SetAISenseSightPeripheralVisionAngleDegrees");
static_assert(sizeof(AIBlueprintHelperExLibrary_SetAISenseSightPeripheralVisionAngleDegrees) == 0x000010, "Wrong size on AIBlueprintHelperExLibrary_SetAISenseSightPeripheralVisionAngleDegrees");
static_assert(offsetof(AIBlueprintHelperExLibrary_SetAISenseSightPeripheralVisionAngleDegrees, Controller) == 0x000000, "Member 'AIBlueprintHelperExLibrary_SetAISenseSightPeripheralVisionAngleDegrees::Controller' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_SetAISenseSightPeripheralVisionAngleDegrees, Degrees) == 0x000008, "Member 'AIBlueprintHelperExLibrary_SetAISenseSightPeripheralVisionAngleDegrees::Degrees' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.SetAISenseSightRadius
// 0x0010 (0x0010 - 0x0000)
struct AIBlueprintHelperExLibrary_SetAISenseSightRadius final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBlueprintHelperExLibrary_SetAISenseSightRadius) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_SetAISenseSightRadius");
static_assert(sizeof(AIBlueprintHelperExLibrary_SetAISenseSightRadius) == 0x000010, "Wrong size on AIBlueprintHelperExLibrary_SetAISenseSightRadius");
static_assert(offsetof(AIBlueprintHelperExLibrary_SetAISenseSightRadius, Controller) == 0x000000, "Member 'AIBlueprintHelperExLibrary_SetAISenseSightRadius::Controller' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_SetAISenseSightRadius, Radius) == 0x000008, "Member 'AIBlueprintHelperExLibrary_SetAISenseSightRadius::Radius' has a wrong offset!");

// Function LyraGame.AIBlueprintHelperExLibrary.TestPathSync
// 0x0050 (0x0050 - 0x0000)
struct AIBlueprintHelperExLibrary_TestPathSync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointA;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointB;                                            // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathExistanceQueryType                       PathQueryType;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowPartialPaths;                                 // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBlueprintHelperExLibrary_TestPathSync) == 0x000008, "Wrong alignment on AIBlueprintHelperExLibrary_TestPathSync");
static_assert(sizeof(AIBlueprintHelperExLibrary_TestPathSync) == 0x000050, "Wrong size on AIBlueprintHelperExLibrary_TestPathSync");
static_assert(offsetof(AIBlueprintHelperExLibrary_TestPathSync, WorldContextObject) == 0x000000, "Member 'AIBlueprintHelperExLibrary_TestPathSync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_TestPathSync, PointA) == 0x000008, "Member 'AIBlueprintHelperExLibrary_TestPathSync::PointA' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_TestPathSync, PointB) == 0x000020, "Member 'AIBlueprintHelperExLibrary_TestPathSync::PointB' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_TestPathSync, PathQueryType) == 0x000038, "Member 'AIBlueprintHelperExLibrary_TestPathSync::PathQueryType' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_TestPathSync, FilterClass) == 0x000040, "Member 'AIBlueprintHelperExLibrary_TestPathSync::FilterClass' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_TestPathSync, AllowPartialPaths) == 0x000048, "Member 'AIBlueprintHelperExLibrary_TestPathSync::AllowPartialPaths' has a wrong offset!");
static_assert(offsetof(AIBlueprintHelperExLibrary_TestPathSync, ReturnValue) == 0x000049, "Member 'AIBlueprintHelperExLibrary_TestPathSync::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentBlueprintLibrary.CheckFirstPerson
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentBlueprintLibrary_CheckFirstPerson final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentBlueprintLibrary_CheckFirstPerson) == 0x000008, "Wrong alignment on TgfEquipmentBlueprintLibrary_CheckFirstPerson");
static_assert(sizeof(TgfEquipmentBlueprintLibrary_CheckFirstPerson) == 0x000010, "Wrong size on TgfEquipmentBlueprintLibrary_CheckFirstPerson");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_CheckFirstPerson, Target) == 0x000000, "Member 'TgfEquipmentBlueprintLibrary_CheckFirstPerson::Target' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_CheckFirstPerson, ReturnValue) == 0x000008, "Member 'TgfEquipmentBlueprintLibrary_CheckFirstPerson::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentBlueprintLibrary.DealEquipAddCondAttr
// 0x0020 (0x0020 - 0x0000)
struct TgfEquipmentBlueprintLibrary_DealEquipAddCondAttr final
{
public:
	class ALyraCharacter*                         Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpec>            GESpecToApply;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentBlueprintLibrary_DealEquipAddCondAttr) == 0x000008, "Wrong alignment on TgfEquipmentBlueprintLibrary_DealEquipAddCondAttr");
static_assert(sizeof(TgfEquipmentBlueprintLibrary_DealEquipAddCondAttr) == 0x000020, "Wrong size on TgfEquipmentBlueprintLibrary_DealEquipAddCondAttr");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_DealEquipAddCondAttr, Instigator) == 0x000000, "Member 'TgfEquipmentBlueprintLibrary_DealEquipAddCondAttr::Instigator' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_DealEquipAddCondAttr, Target) == 0x000008, "Member 'TgfEquipmentBlueprintLibrary_DealEquipAddCondAttr::Target' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_DealEquipAddCondAttr, GESpecToApply) == 0x000010, "Member 'TgfEquipmentBlueprintLibrary_DealEquipAddCondAttr::GESpecToApply' has a wrong offset!");

// Function LyraGame.TgfEquipmentBlueprintLibrary.DealEquipRemoveCondAttr
// 0x0020 (0x0020 - 0x0000)
struct TgfEquipmentBlueprintLibrary_DealEquipRemoveCondAttr final
{
public:
	class ALyraCharacter*                         Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpec>            GESpecApplied;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentBlueprintLibrary_DealEquipRemoveCondAttr) == 0x000008, "Wrong alignment on TgfEquipmentBlueprintLibrary_DealEquipRemoveCondAttr");
static_assert(sizeof(TgfEquipmentBlueprintLibrary_DealEquipRemoveCondAttr) == 0x000020, "Wrong size on TgfEquipmentBlueprintLibrary_DealEquipRemoveCondAttr");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_DealEquipRemoveCondAttr, Instigator) == 0x000000, "Member 'TgfEquipmentBlueprintLibrary_DealEquipRemoveCondAttr::Instigator' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_DealEquipRemoveCondAttr, Target) == 0x000008, "Member 'TgfEquipmentBlueprintLibrary_DealEquipRemoveCondAttr::Target' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_DealEquipRemoveCondAttr, GESpecApplied) == 0x000010, "Member 'TgfEquipmentBlueprintLibrary_DealEquipRemoveCondAttr::GESpecApplied' has a wrong offset!");

// Function LyraGame.TgfEquipmentBlueprintLibrary.RestoreFOVConfig
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentBlueprintLibrary_RestoreFOVConfig final
{
public:
	class UMaterialInterface*                     OriginMat;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReplaceMat;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentBlueprintLibrary_RestoreFOVConfig) == 0x000008, "Wrong alignment on TgfEquipmentBlueprintLibrary_RestoreFOVConfig");
static_assert(sizeof(TgfEquipmentBlueprintLibrary_RestoreFOVConfig) == 0x000010, "Wrong size on TgfEquipmentBlueprintLibrary_RestoreFOVConfig");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_RestoreFOVConfig, OriginMat) == 0x000000, "Member 'TgfEquipmentBlueprintLibrary_RestoreFOVConfig::OriginMat' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_RestoreFOVConfig, ReplaceMat) == 0x000008, "Member 'TgfEquipmentBlueprintLibrary_RestoreFOVConfig::ReplaceMat' has a wrong offset!");

// Function LyraGame.TgfEquipmentBlueprintLibrary.SetAllFOVConfigForCharacter
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentBlueprintLibrary_SetAllFOVConfigForCharacter final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentBlueprintLibrary_SetAllFOVConfigForCharacter) == 0x000008, "Wrong alignment on TgfEquipmentBlueprintLibrary_SetAllFOVConfigForCharacter");
static_assert(sizeof(TgfEquipmentBlueprintLibrary_SetAllFOVConfigForCharacter) == 0x000010, "Wrong size on TgfEquipmentBlueprintLibrary_SetAllFOVConfigForCharacter");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetAllFOVConfigForCharacter, Mesh) == 0x000000, "Member 'TgfEquipmentBlueprintLibrary_SetAllFOVConfigForCharacter::Mesh' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetAllFOVConfigForCharacter, bEnable) == 0x000008, "Member 'TgfEquipmentBlueprintLibrary_SetAllFOVConfigForCharacter::bEnable' has a wrong offset!");

// Function LyraGame.TgfEquipmentBlueprintLibrary.SetAlphaConfig
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentBlueprintLibrary_SetAlphaConfig final
{
public:
	class UFXSystemComponent*                     FxComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentBlueprintLibrary_SetAlphaConfig) == 0x000008, "Wrong alignment on TgfEquipmentBlueprintLibrary_SetAlphaConfig");
static_assert(sizeof(TgfEquipmentBlueprintLibrary_SetAlphaConfig) == 0x000010, "Wrong size on TgfEquipmentBlueprintLibrary_SetAlphaConfig");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetAlphaConfig, FxComp) == 0x000000, "Member 'TgfEquipmentBlueprintLibrary_SetAlphaConfig::FxComp' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetAlphaConfig, Value) == 0x000008, "Member 'TgfEquipmentBlueprintLibrary_SetAlphaConfig::Value' has a wrong offset!");

// Function LyraGame.TgfEquipmentBlueprintLibrary.SetFOVConfig
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentBlueprintLibrary_SetFOVConfig final
{
public:
	class UFXSystemComponent*                     FxComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentBlueprintLibrary_SetFOVConfig) == 0x000008, "Wrong alignment on TgfEquipmentBlueprintLibrary_SetFOVConfig");
static_assert(sizeof(TgfEquipmentBlueprintLibrary_SetFOVConfig) == 0x000010, "Wrong size on TgfEquipmentBlueprintLibrary_SetFOVConfig");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetFOVConfig, FxComp) == 0x000000, "Member 'TgfEquipmentBlueprintLibrary_SetFOVConfig::FxComp' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetFOVConfig, Enabled) == 0x000008, "Member 'TgfEquipmentBlueprintLibrary_SetFOVConfig::Enabled' has a wrong offset!");

// Function LyraGame.TgfEquipmentBlueprintLibrary.SetFOVConfigWithCheckBP
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentBlueprintLibrary_SetFOVConfigWithCheckBP final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     FxComp;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentBlueprintLibrary_SetFOVConfigWithCheckBP) == 0x000008, "Wrong alignment on TgfEquipmentBlueprintLibrary_SetFOVConfigWithCheckBP");
static_assert(sizeof(TgfEquipmentBlueprintLibrary_SetFOVConfigWithCheckBP) == 0x000010, "Wrong size on TgfEquipmentBlueprintLibrary_SetFOVConfigWithCheckBP");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetFOVConfigWithCheckBP, Target) == 0x000000, "Member 'TgfEquipmentBlueprintLibrary_SetFOVConfigWithCheckBP::Target' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetFOVConfigWithCheckBP, FxComp) == 0x000008, "Member 'TgfEquipmentBlueprintLibrary_SetFOVConfigWithCheckBP::FxComp' has a wrong offset!");

// Function LyraGame.TgfEquipmentBlueprintLibrary.SetFOVMeshConfig
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentBlueprintLibrary_SetFOVMeshConfig final
{
public:
	class UMeshComponent*                         MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentBlueprintLibrary_SetFOVMeshConfig) == 0x000008, "Wrong alignment on TgfEquipmentBlueprintLibrary_SetFOVMeshConfig");
static_assert(sizeof(TgfEquipmentBlueprintLibrary_SetFOVMeshConfig) == 0x000010, "Wrong size on TgfEquipmentBlueprintLibrary_SetFOVMeshConfig");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetFOVMeshConfig, MeshComp) == 0x000000, "Member 'TgfEquipmentBlueprintLibrary_SetFOVMeshConfig::MeshComp' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetFOVMeshConfig, Enabled) == 0x000008, "Member 'TgfEquipmentBlueprintLibrary_SetFOVMeshConfig::Enabled' has a wrong offset!");

// Function LyraGame.TgfEquipmentBlueprintLibrary.SetFOVMeshConfigWithCheckBP
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentBlueprintLibrary_SetFOVMeshConfigWithCheckBP final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         MeshComp;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentBlueprintLibrary_SetFOVMeshConfigWithCheckBP) == 0x000008, "Wrong alignment on TgfEquipmentBlueprintLibrary_SetFOVMeshConfigWithCheckBP");
static_assert(sizeof(TgfEquipmentBlueprintLibrary_SetFOVMeshConfigWithCheckBP) == 0x000010, "Wrong size on TgfEquipmentBlueprintLibrary_SetFOVMeshConfigWithCheckBP");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetFOVMeshConfigWithCheckBP, Target) == 0x000000, "Member 'TgfEquipmentBlueprintLibrary_SetFOVMeshConfigWithCheckBP::Target' has a wrong offset!");
static_assert(offsetof(TgfEquipmentBlueprintLibrary_SetFOVMeshConfigWithCheckBP, MeshComp) == 0x000008, "Member 'TgfEquipmentBlueprintLibrary_SetFOVMeshConfigWithCheckBP::MeshComp' has a wrong offset!");

// Function LyraGame.AsyncAction_UntilItemReadyForPaint.UntilEquipmentReadyForPaint
// 0x0018 (0x0018 - 0x0000)
struct AsyncAction_UntilItemReadyForPaint_UntilEquipmentReadyForPaint final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfEquipmentWrapper*                   Equipment;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_UntilItemReadyForPaint*    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_UntilItemReadyForPaint_UntilEquipmentReadyForPaint) == 0x000008, "Wrong alignment on AsyncAction_UntilItemReadyForPaint_UntilEquipmentReadyForPaint");
static_assert(sizeof(AsyncAction_UntilItemReadyForPaint_UntilEquipmentReadyForPaint) == 0x000018, "Wrong size on AsyncAction_UntilItemReadyForPaint_UntilEquipmentReadyForPaint");
static_assert(offsetof(AsyncAction_UntilItemReadyForPaint_UntilEquipmentReadyForPaint, WorldContextObject) == 0x000000, "Member 'AsyncAction_UntilItemReadyForPaint_UntilEquipmentReadyForPaint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_UntilItemReadyForPaint_UntilEquipmentReadyForPaint, Equipment) == 0x000008, "Member 'AsyncAction_UntilItemReadyForPaint_UntilEquipmentReadyForPaint::Equipment' has a wrong offset!");
static_assert(offsetof(AsyncAction_UntilItemReadyForPaint_UntilEquipmentReadyForPaint, ReturnValue) == 0x000010, "Member 'AsyncAction_UntilItemReadyForPaint_UntilEquipmentReadyForPaint::ReturnValue' has a wrong offset!");

// Function LyraGame.AsyncAction_UntilItemReadyForPaint.UntilInventoryItemReadyForPaint
// 0x0018 (0x0018 - 0x0000)
struct AsyncAction_UntilItemReadyForPaint_UntilInventoryItemReadyForPaint final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_UntilItemReadyForPaint*    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_UntilItemReadyForPaint_UntilInventoryItemReadyForPaint) == 0x000008, "Wrong alignment on AsyncAction_UntilItemReadyForPaint_UntilInventoryItemReadyForPaint");
static_assert(sizeof(AsyncAction_UntilItemReadyForPaint_UntilInventoryItemReadyForPaint) == 0x000018, "Wrong size on AsyncAction_UntilItemReadyForPaint_UntilInventoryItemReadyForPaint");
static_assert(offsetof(AsyncAction_UntilItemReadyForPaint_UntilInventoryItemReadyForPaint, WorldContextObject) == 0x000000, "Member 'AsyncAction_UntilItemReadyForPaint_UntilInventoryItemReadyForPaint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_UntilItemReadyForPaint_UntilInventoryItemReadyForPaint, Item) == 0x000008, "Member 'AsyncAction_UntilItemReadyForPaint_UntilInventoryItemReadyForPaint::Item' has a wrong offset!");
static_assert(offsetof(AsyncAction_UntilItemReadyForPaint_UntilInventoryItemReadyForPaint, ReturnValue) == 0x000010, "Member 'AsyncAction_UntilItemReadyForPaint_UntilInventoryItemReadyForPaint::ReturnValue' has a wrong offset!");

// Function LyraGame.AsyncAction_InventoryItemRightClickOverride.Create
// 0x0018 (0x0018 - 0x0000)
struct AsyncAction_InventoryItemRightClickOverride_Create final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   InventoryContext;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_InventoryItemRightClickOverride* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_InventoryItemRightClickOverride_Create) == 0x000008, "Wrong alignment on AsyncAction_InventoryItemRightClickOverride_Create");
static_assert(sizeof(AsyncAction_InventoryItemRightClickOverride_Create) == 0x000018, "Wrong size on AsyncAction_InventoryItemRightClickOverride_Create");
static_assert(offsetof(AsyncAction_InventoryItemRightClickOverride_Create, WorldContextObject) == 0x000000, "Member 'AsyncAction_InventoryItemRightClickOverride_Create::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_InventoryItemRightClickOverride_Create, InventoryContext) == 0x000008, "Member 'AsyncAction_InventoryItemRightClickOverride_Create::InventoryContext' has a wrong offset!");
static_assert(offsetof(AsyncAction_InventoryItemRightClickOverride_Create, ReturnValue) == 0x000010, "Member 'AsyncAction_InventoryItemRightClickOverride_Create::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryRoleWrapper.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryRoleWrapper_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_GetMaxHealth) == 0x000004, "Wrong alignment on TgfInventoryRoleWrapper_GetMaxHealth");
static_assert(sizeof(TgfInventoryRoleWrapper_GetMaxHealth) == 0x000004, "Wrong size on TgfInventoryRoleWrapper_GetMaxHealth");
static_assert(offsetof(TgfInventoryRoleWrapper_GetMaxHealth, ReturnValue) == 0x000000, "Member 'TgfInventoryRoleWrapper_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryRoleWrapper.GetRoleAttributeValue
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryRoleWrapper_GetRoleAttributeValue final
{
public:
	EnRoleDisplayAttribueID                       Type_id;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_GetRoleAttributeValue) == 0x000004, "Wrong alignment on TgfInventoryRoleWrapper_GetRoleAttributeValue");
static_assert(sizeof(TgfInventoryRoleWrapper_GetRoleAttributeValue) == 0x000008, "Wrong size on TgfInventoryRoleWrapper_GetRoleAttributeValue");
static_assert(offsetof(TgfInventoryRoleWrapper_GetRoleAttributeValue, Type_id) == 0x000000, "Member 'TgfInventoryRoleWrapper_GetRoleAttributeValue::Type_id' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_GetRoleAttributeValue, ReturnValue) == 0x000004, "Member 'TgfInventoryRoleWrapper_GetRoleAttributeValue::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryRoleWrapper.GetTalentOfFirstLevelAttribute
// 0x0058 (0x0058 - 0x0000)
struct TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute final
{
public:
	const class UTgfFirstLevelAttrDataAsset*      DataAsset;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorCareer                               Career;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 Race;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     ConditionalAttr;                                   // 0x0010(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTgfCareerTalentCfgItem>        Configs;                                           // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute) == 0x000008, "Wrong alignment on TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute");
static_assert(sizeof(TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute) == 0x000058, "Wrong size on TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute");
static_assert(offsetof(TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute, DataAsset) == 0x000000, "Member 'TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute::DataAsset' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute, Career) == 0x000008, "Member 'TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute::Career' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute, Race) == 0x000009, "Member 'TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute::Race' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute, ConditionalAttr) == 0x000010, "Member 'TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute::ConditionalAttr' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute, Configs) == 0x000048, "Member 'TgfInventoryRoleWrapper_GetTalentOfFirstLevelAttribute::Configs' has a wrong offset!");

// Function LyraGame.TgfInventoryRoleWrapper.GetTalentsOfAttribute
// 0x0028 (0x0028 - 0x0000)
struct TgfInventoryRoleWrapper_GetTalentsOfAttribute final
{
public:
	EnRoleDisplayAttribueID                       Type_id;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Talents;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OpenedTalents;                                     // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_GetTalentsOfAttribute) == 0x000008, "Wrong alignment on TgfInventoryRoleWrapper_GetTalentsOfAttribute");
static_assert(sizeof(TgfInventoryRoleWrapper_GetTalentsOfAttribute) == 0x000028, "Wrong size on TgfInventoryRoleWrapper_GetTalentsOfAttribute");
static_assert(offsetof(TgfInventoryRoleWrapper_GetTalentsOfAttribute, Type_id) == 0x000000, "Member 'TgfInventoryRoleWrapper_GetTalentsOfAttribute::Type_id' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_GetTalentsOfAttribute, Talents) == 0x000008, "Member 'TgfInventoryRoleWrapper_GetTalentsOfAttribute::Talents' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_GetTalentsOfAttribute, OpenedTalents) == 0x000018, "Member 'TgfInventoryRoleWrapper_GetTalentsOfAttribute::OpenedTalents' has a wrong offset!");

// Function LyraGame.TgfInventoryRoleWrapper.GetOwningCharacter
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryRoleWrapper_GetOwningCharacter final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_GetOwningCharacter) == 0x000008, "Wrong alignment on TgfInventoryRoleWrapper_GetOwningCharacter");
static_assert(sizeof(TgfInventoryRoleWrapper_GetOwningCharacter) == 0x000008, "Wrong size on TgfInventoryRoleWrapper_GetOwningCharacter");
static_assert(offsetof(TgfInventoryRoleWrapper_GetOwningCharacter, ReturnValue) == 0x000000, "Member 'TgfInventoryRoleWrapper_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryRoleWrapper.GetSkillE
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryRoleWrapper_GetSkillE final
{
public:
	class UTgfGameplayAbility*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_GetSkillE) == 0x000008, "Wrong alignment on TgfInventoryRoleWrapper_GetSkillE");
static_assert(sizeof(TgfInventoryRoleWrapper_GetSkillE) == 0x000008, "Wrong size on TgfInventoryRoleWrapper_GetSkillE");
static_assert(offsetof(TgfInventoryRoleWrapper_GetSkillE, ReturnValue) == 0x000000, "Member 'TgfInventoryRoleWrapper_GetSkillE::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryRoleWrapper.GetSkillQ
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryRoleWrapper_GetSkillQ final
{
public:
	class UTgfGameplayAbility*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_GetSkillQ) == 0x000008, "Wrong alignment on TgfInventoryRoleWrapper_GetSkillQ");
static_assert(sizeof(TgfInventoryRoleWrapper_GetSkillQ) == 0x000008, "Wrong size on TgfInventoryRoleWrapper_GetSkillQ");
static_assert(offsetof(TgfInventoryRoleWrapper_GetSkillQ, ReturnValue) == 0x000000, "Member 'TgfInventoryRoleWrapper_GetSkillQ::ReturnValue' has a wrong offset!");

// Function LyraGame.AsyncAction_InventoryItemLeftClickOverride.Create
// 0x0018 (0x0018 - 0x0000)
struct AsyncAction_InventoryItemLeftClickOverride_Create final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   InventoryContext;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_InventoryItemLeftClickOverride* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_InventoryItemLeftClickOverride_Create) == 0x000008, "Wrong alignment on AsyncAction_InventoryItemLeftClickOverride_Create");
static_assert(sizeof(AsyncAction_InventoryItemLeftClickOverride_Create) == 0x000018, "Wrong size on AsyncAction_InventoryItemLeftClickOverride_Create");
static_assert(offsetof(AsyncAction_InventoryItemLeftClickOverride_Create, WorldContextObject) == 0x000000, "Member 'AsyncAction_InventoryItemLeftClickOverride_Create::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_InventoryItemLeftClickOverride_Create, InventoryContext) == 0x000008, "Member 'AsyncAction_InventoryItemLeftClickOverride_Create::InventoryContext' has a wrong offset!");
static_assert(offsetof(AsyncAction_InventoryItemLeftClickOverride_Create, ReturnValue) == 0x000010, "Member 'AsyncAction_InventoryItemLeftClickOverride_Create::ReturnValue' has a wrong offset!");

// Function LyraGame.AudioObstacleDetectionComponent.SetOneShotObstructionAndOcclusion
// 0x0010 (0x0010 - 0x0000)
struct AudioObstacleDetectionComponent_SetOneShotObstructionAndOcclusion final
{
public:
	class UAkComponent*                           SpeakerComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           IgnoredActor;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioObstacleDetectionComponent_SetOneShotObstructionAndOcclusion) == 0x000008, "Wrong alignment on AudioObstacleDetectionComponent_SetOneShotObstructionAndOcclusion");
static_assert(sizeof(AudioObstacleDetectionComponent_SetOneShotObstructionAndOcclusion) == 0x000010, "Wrong size on AudioObstacleDetectionComponent_SetOneShotObstructionAndOcclusion");
static_assert(offsetof(AudioObstacleDetectionComponent_SetOneShotObstructionAndOcclusion, SpeakerComponent) == 0x000000, "Member 'AudioObstacleDetectionComponent_SetOneShotObstructionAndOcclusion::SpeakerComponent' has a wrong offset!");
static_assert(offsetof(AudioObstacleDetectionComponent_SetOneShotObstructionAndOcclusion, IgnoredActor) == 0x000008, "Member 'AudioObstacleDetectionComponent_SetOneShotObstructionAndOcclusion::IgnoredActor' has a wrong offset!");

// Function LyraGame.AudioObstacleDetectionComponent.OnListenerActorChange
// 0x0008 (0x0008 - 0x0000)
struct AudioObstacleDetectionComponent_OnListenerActorChange final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioObstacleDetectionComponent_OnListenerActorChange) == 0x000008, "Wrong alignment on AudioObstacleDetectionComponent_OnListenerActorChange");
static_assert(sizeof(AudioObstacleDetectionComponent_OnListenerActorChange) == 0x000008, "Wrong size on AudioObstacleDetectionComponent_OnListenerActorChange");
static_assert(offsetof(AudioObstacleDetectionComponent_OnListenerActorChange, InActor) == 0x000000, "Member 'AudioObstacleDetectionComponent_OnListenerActorChange::InActor' has a wrong offset!");

// Function LyraGame.AudioObstacleDetectionComponent.SetDiffractionSoundPoints
// 0x0008 (0x0008 - 0x0000)
struct AudioObstacleDetectionComponent_SetDiffractionSoundPoints final
{
public:
	class UAkComponent*                           SpeakerComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioObstacleDetectionComponent_SetDiffractionSoundPoints) == 0x000008, "Wrong alignment on AudioObstacleDetectionComponent_SetDiffractionSoundPoints");
static_assert(sizeof(AudioObstacleDetectionComponent_SetDiffractionSoundPoints) == 0x000008, "Wrong size on AudioObstacleDetectionComponent_SetDiffractionSoundPoints");
static_assert(offsetof(AudioObstacleDetectionComponent_SetDiffractionSoundPoints, SpeakerComponent) == 0x000000, "Member 'AudioObstacleDetectionComponent_SetDiffractionSoundPoints::SpeakerComponent' has a wrong offset!");

// Function LyraGame.AudioObstacleDetectionComponent.SetOcclusion
// 0x0008 (0x0008 - 0x0000)
struct AudioObstacleDetectionComponent_SetOcclusion final
{
public:
	const class UAkComponent*                     SpeakerComponent;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioObstacleDetectionComponent_SetOcclusion) == 0x000008, "Wrong alignment on AudioObstacleDetectionComponent_SetOcclusion");
static_assert(sizeof(AudioObstacleDetectionComponent_SetOcclusion) == 0x000008, "Wrong size on AudioObstacleDetectionComponent_SetOcclusion");
static_assert(offsetof(AudioObstacleDetectionComponent_SetOcclusion, SpeakerComponent) == 0x000000, "Member 'AudioObstacleDetectionComponent_SetOcclusion::SpeakerComponent' has a wrong offset!");

// Function LyraGame.TgfCursorPayloadFunctions.InstigateCursorPayload
// 0x0158 (0x0158 - 0x0000)
struct TgfCursorPayloadFunctions_InstigateCursorPayload final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UDragDropOperation*                     DragDropOperation;                                 // 0x0098(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A0(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCursorPayloadFunctions_InstigateCursorPayload) == 0x000008, "Wrong alignment on TgfCursorPayloadFunctions_InstigateCursorPayload");
static_assert(sizeof(TgfCursorPayloadFunctions_InstigateCursorPayload) == 0x000158, "Wrong size on TgfCursorPayloadFunctions_InstigateCursorPayload");
static_assert(offsetof(TgfCursorPayloadFunctions_InstigateCursorPayload, MouseEvent) == 0x000000, "Member 'TgfCursorPayloadFunctions_InstigateCursorPayload::MouseEvent' has a wrong offset!");
static_assert(offsetof(TgfCursorPayloadFunctions_InstigateCursorPayload, DragDropOperation) == 0x000098, "Member 'TgfCursorPayloadFunctions_InstigateCursorPayload::DragDropOperation' has a wrong offset!");
static_assert(offsetof(TgfCursorPayloadFunctions_InstigateCursorPayload, ReturnValue) == 0x0000A0, "Member 'TgfCursorPayloadFunctions_InstigateCursorPayload::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleDsBpFuncLibrary.FillOssLogPlayerInteraction
// 0x0038 (0x0038 - 0x0000)
struct BattleDsBpFuncLibrary_FillOssLogPlayerInteraction final
{
public:
	class ALyraCharacter*                         InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InTargetName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleDsBpFuncLibrary_FillOssLogPlayerInteraction) == 0x000008, "Wrong alignment on BattleDsBpFuncLibrary_FillOssLogPlayerInteraction");
static_assert(sizeof(BattleDsBpFuncLibrary_FillOssLogPlayerInteraction) == 0x000038, "Wrong size on BattleDsBpFuncLibrary_FillOssLogPlayerInteraction");
static_assert(offsetof(BattleDsBpFuncLibrary_FillOssLogPlayerInteraction, InCharacter) == 0x000000, "Member 'BattleDsBpFuncLibrary_FillOssLogPlayerInteraction::InCharacter' has a wrong offset!");
static_assert(offsetof(BattleDsBpFuncLibrary_FillOssLogPlayerInteraction, InTargetName) == 0x000008, "Member 'BattleDsBpFuncLibrary_FillOssLogPlayerInteraction::InTargetName' has a wrong offset!");
static_assert(offsetof(BattleDsBpFuncLibrary_FillOssLogPlayerInteraction, InLocation) == 0x000018, "Member 'BattleDsBpFuncLibrary_FillOssLogPlayerInteraction::InLocation' has a wrong offset!");
static_assert(offsetof(BattleDsBpFuncLibrary_FillOssLogPlayerInteraction, ItemId) == 0x000030, "Member 'BattleDsBpFuncLibrary_FillOssLogPlayerInteraction::ItemId' has a wrong offset!");

// Function LyraGame.BattleDsUtility.GetCurrentUserCount
// 0x0004 (0x0004 - 0x0000)
struct BattleDsUtility_GetCurrentUserCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_GetCurrentUserCount) == 0x000004, "Wrong alignment on BattleDsUtility_GetCurrentUserCount");
static_assert(sizeof(BattleDsUtility_GetCurrentUserCount) == 0x000004, "Wrong size on BattleDsUtility_GetCurrentUserCount");
static_assert(offsetof(BattleDsUtility_GetCurrentUserCount, ReturnValue) == 0x000000, "Member 'BattleDsUtility_GetCurrentUserCount::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleDsUtility.GetFlawlessTrialLevelArgs
// 0x000C (0x000C - 0x0000)
struct BattleDsUtility_GetFlawlessTrialLevelArgs final
{
public:
	bool                                          _Flawless;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _WinningStreak;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRewardsAvailable;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleDsUtility_GetFlawlessTrialLevelArgs) == 0x000004, "Wrong alignment on BattleDsUtility_GetFlawlessTrialLevelArgs");
static_assert(sizeof(BattleDsUtility_GetFlawlessTrialLevelArgs) == 0x00000C, "Wrong size on BattleDsUtility_GetFlawlessTrialLevelArgs");
static_assert(offsetof(BattleDsUtility_GetFlawlessTrialLevelArgs, _Flawless) == 0x000000, "Member 'BattleDsUtility_GetFlawlessTrialLevelArgs::_Flawless' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_GetFlawlessTrialLevelArgs, _WinningStreak) == 0x000004, "Member 'BattleDsUtility_GetFlawlessTrialLevelArgs::_WinningStreak' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_GetFlawlessTrialLevelArgs, _bRewardsAvailable) == 0x000008, "Member 'BattleDsUtility_GetFlawlessTrialLevelArgs::_bRewardsAvailable' has a wrong offset!");

// Function LyraGame.BattleDsUtility.GetHomelandLevelArgs
// 0x0018 (0x0018 - 0x0000)
struct BattleDsUtility_GetHomelandLevelArgs final
{
public:
	int64                                         _LastMoonEyeInteractionTimeStamp;                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         _CurrentCycleTimeStamp;                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         _CycleLength;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_GetHomelandLevelArgs) == 0x000008, "Wrong alignment on BattleDsUtility_GetHomelandLevelArgs");
static_assert(sizeof(BattleDsUtility_GetHomelandLevelArgs) == 0x000018, "Wrong size on BattleDsUtility_GetHomelandLevelArgs");
static_assert(offsetof(BattleDsUtility_GetHomelandLevelArgs, _LastMoonEyeInteractionTimeStamp) == 0x000000, "Member 'BattleDsUtility_GetHomelandLevelArgs::_LastMoonEyeInteractionTimeStamp' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_GetHomelandLevelArgs, _CurrentCycleTimeStamp) == 0x000008, "Member 'BattleDsUtility_GetHomelandLevelArgs::_CurrentCycleTimeStamp' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_GetHomelandLevelArgs, _CycleLength) == 0x000010, "Member 'BattleDsUtility_GetHomelandLevelArgs::_CycleLength' has a wrong offset!");

// Function LyraGame.BattleDsUtility.GetTotalUserCount
// 0x0004 (0x0004 - 0x0000)
struct BattleDsUtility_GetTotalUserCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_GetTotalUserCount) == 0x000004, "Wrong alignment on BattleDsUtility_GetTotalUserCount");
static_assert(sizeof(BattleDsUtility_GetTotalUserCount) == 0x000004, "Wrong size on BattleDsUtility_GetTotalUserCount");
static_assert(offsetof(BattleDsUtility_GetTotalUserCount, ReturnValue) == 0x000000, "Member 'BattleDsUtility_GetTotalUserCount::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleDsUtility.GetWaitingRoomTimeout
// 0x0004 (0x0004 - 0x0000)
struct BattleDsUtility_GetWaitingRoomTimeout final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_GetWaitingRoomTimeout) == 0x000004, "Wrong alignment on BattleDsUtility_GetWaitingRoomTimeout");
static_assert(sizeof(BattleDsUtility_GetWaitingRoomTimeout) == 0x000004, "Wrong size on BattleDsUtility_GetWaitingRoomTimeout");
static_assert(offsetof(BattleDsUtility_GetWaitingRoomTimeout, ReturnValue) == 0x000000, "Member 'BattleDsUtility_GetWaitingRoomTimeout::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleDsUtility.HasNextFloor
// 0x0001 (0x0001 - 0x0000)
struct BattleDsUtility_HasNextFloor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_HasNextFloor) == 0x000001, "Wrong alignment on BattleDsUtility_HasNextFloor");
static_assert(sizeof(BattleDsUtility_HasNextFloor) == 0x000001, "Wrong size on BattleDsUtility_HasNextFloor");
static_assert(offsetof(BattleDsUtility_HasNextFloor, ReturnValue) == 0x000000, "Member 'BattleDsUtility_HasNextFloor::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleDsUtility.InitGameMap
// 0x0010 (0x0010 - 0x0000)
struct BattleDsUtility_InitGameMap final
{
public:
	int32                                         Map_id;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_timeout;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsIndependentMapMode;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_InitGameMap) == 0x000004, "Wrong alignment on BattleDsUtility_InitGameMap");
static_assert(sizeof(BattleDsUtility_InitGameMap) == 0x000010, "Wrong size on BattleDsUtility_InitGameMap");
static_assert(offsetof(BattleDsUtility_InitGameMap, Map_id) == 0x000000, "Member 'BattleDsUtility_InitGameMap::Map_id' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_InitGameMap, Game_timeout) == 0x000004, "Member 'BattleDsUtility_InitGameMap::Game_timeout' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_InitGameMap, IsIndependentMapMode) == 0x000008, "Member 'BattleDsUtility_InitGameMap::IsIndependentMapMode' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_InitGameMap, ReturnValue) == 0x00000C, "Member 'BattleDsUtility_InitGameMap::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleDsUtility.InitPlayerGameData
// 0x0008 (0x0008 - 0x0000)
struct BattleDsUtility_InitPlayerGameData final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_InitPlayerGameData) == 0x000008, "Wrong alignment on BattleDsUtility_InitPlayerGameData");
static_assert(sizeof(BattleDsUtility_InitPlayerGameData) == 0x000008, "Wrong size on BattleDsUtility_InitPlayerGameData");
static_assert(offsetof(BattleDsUtility_InitPlayerGameData, PlayerState) == 0x000000, "Member 'BattleDsUtility_InitPlayerGameData::PlayerState' has a wrong offset!");

// Function LyraGame.BattleDsUtility.IsOptionArgsInit
// 0x0001 (0x0001 - 0x0000)
struct BattleDsUtility_IsOptionArgsInit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_IsOptionArgsInit) == 0x000001, "Wrong alignment on BattleDsUtility_IsOptionArgsInit");
static_assert(sizeof(BattleDsUtility_IsOptionArgsInit) == 0x000001, "Wrong size on BattleDsUtility_IsOptionArgsInit");
static_assert(offsetof(BattleDsUtility_IsOptionArgsInit, ReturnValue) == 0x000000, "Member 'BattleDsUtility_IsOptionArgsInit::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleDsUtility.IsPlayerGameOver
// 0x0010 (0x0010 - 0x0000)
struct BattleDsUtility_IsPlayerGameOver final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleDsUtility_IsPlayerGameOver) == 0x000008, "Wrong alignment on BattleDsUtility_IsPlayerGameOver");
static_assert(sizeof(BattleDsUtility_IsPlayerGameOver) == 0x000010, "Wrong size on BattleDsUtility_IsPlayerGameOver");
static_assert(offsetof(BattleDsUtility_IsPlayerGameOver, PlayerState) == 0x000000, "Member 'BattleDsUtility_IsPlayerGameOver::PlayerState' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_IsPlayerGameOver, ReturnValue) == 0x000008, "Member 'BattleDsUtility_IsPlayerGameOver::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleDsUtility.IsRoomReady
// 0x0001 (0x0001 - 0x0000)
struct BattleDsUtility_IsRoomReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_IsRoomReady) == 0x000001, "Wrong alignment on BattleDsUtility_IsRoomReady");
static_assert(sizeof(BattleDsUtility_IsRoomReady) == 0x000001, "Wrong size on BattleDsUtility_IsRoomReady");
static_assert(offsetof(BattleDsUtility_IsRoomReady, ReturnValue) == 0x000000, "Member 'BattleDsUtility_IsRoomReady::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleDsUtility.OptionArgs
// 0x0010 (0x0010 - 0x0000)
struct BattleDsUtility_OptionArgs final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_OptionArgs) == 0x000008, "Wrong alignment on BattleDsUtility_OptionArgs");
static_assert(sizeof(BattleDsUtility_OptionArgs) == 0x000010, "Wrong size on BattleDsUtility_OptionArgs");
static_assert(offsetof(BattleDsUtility_OptionArgs, ReturnValue) == 0x000000, "Member 'BattleDsUtility_OptionArgs::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleDsUtility.PlayerDeadPlayerState
// 0x0010 (0x0010 - 0x0000)
struct BattleDsUtility_PlayerDeadPlayerState final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSmallBackpackActive;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleDsUtility_PlayerDeadPlayerState) == 0x000008, "Wrong alignment on BattleDsUtility_PlayerDeadPlayerState");
static_assert(sizeof(BattleDsUtility_PlayerDeadPlayerState) == 0x000010, "Wrong size on BattleDsUtility_PlayerDeadPlayerState");
static_assert(offsetof(BattleDsUtility_PlayerDeadPlayerState, PlayerState) == 0x000000, "Member 'BattleDsUtility_PlayerDeadPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_PlayerDeadPlayerState, bSmallBackpackActive) == 0x000008, "Member 'BattleDsUtility_PlayerDeadPlayerState::bSmallBackpackActive' has a wrong offset!");

// Function LyraGame.BattleDsUtility.PlayerUseItem
// 0x0010 (0x0010 - 0x0000)
struct BattleDsUtility_PlayerUseItem final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_PlayerUseItem) == 0x000008, "Wrong alignment on BattleDsUtility_PlayerUseItem");
static_assert(sizeof(BattleDsUtility_PlayerUseItem) == 0x000010, "Wrong size on BattleDsUtility_PlayerUseItem");
static_assert(offsetof(BattleDsUtility_PlayerUseItem, PlayerState) == 0x000000, "Member 'BattleDsUtility_PlayerUseItem::PlayerState' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_PlayerUseItem, ItemId) == 0x000008, "Member 'BattleDsUtility_PlayerUseItem::ItemId' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_PlayerUseItem, Count) == 0x00000C, "Member 'BattleDsUtility_PlayerUseItem::Count' has a wrong offset!");

// Function LyraGame.BattleDsUtility.PVPGameWinTeam
// 0x0004 (0x0004 - 0x0000)
struct BattleDsUtility_PVPGameWinTeam final
{
public:
	int32                                         Faction_id;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_PVPGameWinTeam) == 0x000004, "Wrong alignment on BattleDsUtility_PVPGameWinTeam");
static_assert(sizeof(BattleDsUtility_PVPGameWinTeam) == 0x000004, "Wrong size on BattleDsUtility_PVPGameWinTeam");
static_assert(offsetof(BattleDsUtility_PVPGameWinTeam, Faction_id) == 0x000000, "Member 'BattleDsUtility_PVPGameWinTeam::Faction_id' has a wrong offset!");

// Function LyraGame.BattleDsUtility.PVPGameWinTeamRound
// 0x0008 (0x0008 - 0x0000)
struct BattleDsUtility_PVPGameWinTeamRound final
{
public:
	int32                                         Round_id;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Faction_id;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDsUtility_PVPGameWinTeamRound) == 0x000004, "Wrong alignment on BattleDsUtility_PVPGameWinTeamRound");
static_assert(sizeof(BattleDsUtility_PVPGameWinTeamRound) == 0x000008, "Wrong size on BattleDsUtility_PVPGameWinTeamRound");
static_assert(offsetof(BattleDsUtility_PVPGameWinTeamRound, Round_id) == 0x000000, "Member 'BattleDsUtility_PVPGameWinTeamRound::Round_id' has a wrong offset!");
static_assert(offsetof(BattleDsUtility_PVPGameWinTeamRound, Faction_id) == 0x000004, "Member 'BattleDsUtility_PVPGameWinTeamRound::Faction_id' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.BP_ApplyGameplayEffectToASCTarget
// 0x0020 (0x0020 - 0x0000)
struct LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget) == 0x000008, "Wrong alignment on LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget");
static_assert(sizeof(LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget) == 0x000020, "Wrong size on LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget");
static_assert(offsetof(LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget, Target) == 0x000000, "Member 'LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget::Target' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget, GameplayEffectClass) == 0x000008, "Member 'LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget, GameplayEffectLevel) == 0x000010, "Member 'LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget, Stacks) == 0x000014, "Member 'LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget::Stacks' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget, ReturnValue) == 0x000018, "Member 'LyraGameplayAbility_BP_ApplyGameplayEffectToASCTarget::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.ChangeActivationGroup
// 0x0002 (0x0002 - 0x0000)
struct LyraGameplayAbility_ChangeActivationGroup final
{
public:
	ELyraAbilityActivationGroup                   NewGroup;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_ChangeActivationGroup) == 0x000001, "Wrong alignment on LyraGameplayAbility_ChangeActivationGroup");
static_assert(sizeof(LyraGameplayAbility_ChangeActivationGroup) == 0x000002, "Wrong size on LyraGameplayAbility_ChangeActivationGroup");
static_assert(offsetof(LyraGameplayAbility_ChangeActivationGroup, NewGroup) == 0x000000, "Member 'LyraGameplayAbility_ChangeActivationGroup::NewGroup' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_ChangeActivationGroup, ReturnValue) == 0x000001, "Member 'LyraGameplayAbility_ChangeActivationGroup::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.K2_ApplyGameplayEffectSpecToASCTarget
// 0x0020 (0x0020 - 0x0000)
struct LyraGameplayAbility_K2_ApplyGameplayEffectSpecToASCTarget final
{
public:
	struct FGameplayEffectSpecHandle              EffectSpecHandle;                                  // 0x0000(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_K2_ApplyGameplayEffectSpecToASCTarget) == 0x000008, "Wrong alignment on LyraGameplayAbility_K2_ApplyGameplayEffectSpecToASCTarget");
static_assert(sizeof(LyraGameplayAbility_K2_ApplyGameplayEffectSpecToASCTarget) == 0x000020, "Wrong size on LyraGameplayAbility_K2_ApplyGameplayEffectSpecToASCTarget");
static_assert(offsetof(LyraGameplayAbility_K2_ApplyGameplayEffectSpecToASCTarget, EffectSpecHandle) == 0x000000, "Member 'LyraGameplayAbility_K2_ApplyGameplayEffectSpecToASCTarget::EffectSpecHandle' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_K2_ApplyGameplayEffectSpecToASCTarget, Target) == 0x000010, "Member 'LyraGameplayAbility_K2_ApplyGameplayEffectSpecToASCTarget::Target' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_K2_ApplyGameplayEffectSpecToASCTarget, ReturnValue) == 0x000018, "Member 'LyraGameplayAbility_K2_ApplyGameplayEffectSpecToASCTarget::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.PickBestCastSkillMontage
// 0x0040 (0x0040 - 0x0000)
struct LyraGameplayAbility_PickBestCastSkillMontage final
{
public:
	struct FGameplayTagContainer                  CosmeticTag;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETgfMontageEntryType                          EntryType;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           FindMontage;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraGameplayAbility_PickBestCastSkillMontage) == 0x000008, "Wrong alignment on LyraGameplayAbility_PickBestCastSkillMontage");
static_assert(sizeof(LyraGameplayAbility_PickBestCastSkillMontage) == 0x000040, "Wrong size on LyraGameplayAbility_PickBestCastSkillMontage");
static_assert(offsetof(LyraGameplayAbility_PickBestCastSkillMontage, CosmeticTag) == 0x000000, "Member 'LyraGameplayAbility_PickBestCastSkillMontage::CosmeticTag' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_PickBestCastSkillMontage, EntryType) == 0x000020, "Member 'LyraGameplayAbility_PickBestCastSkillMontage::EntryType' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_PickBestCastSkillMontage, FindMontage) == 0x000028, "Member 'LyraGameplayAbility_PickBestCastSkillMontage::FindMontage' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_PickBestCastSkillMontage, SectionName) == 0x000030, "Member 'LyraGameplayAbility_PickBestCastSkillMontage::SectionName' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_PickBestCastSkillMontage, ReturnValue) == 0x000038, "Member 'LyraGameplayAbility_PickBestCastSkillMontage::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.PickBestCastSkillMontage_FilteredWithTag
// 0x0048 (0x0048 - 0x0000)
struct LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag final
{
public:
	struct FGameplayTagContainer                  CosmeticTag;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FilterTag;                                         // 0x0020(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfMontageEntryType                          EntryType;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           FindMontage;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag) == 0x000008, "Wrong alignment on LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag");
static_assert(sizeof(LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag) == 0x000048, "Wrong size on LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag");
static_assert(offsetof(LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag, CosmeticTag) == 0x000000, "Member 'LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag::CosmeticTag' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag, FilterTag) == 0x000020, "Member 'LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag::FilterTag' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag, EntryType) == 0x000028, "Member 'LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag::EntryType' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag, FindMontage) == 0x000030, "Member 'LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag::FindMontage' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag, SectionName) == 0x000038, "Member 'LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag::SectionName' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag, ReturnValue) == 0x000040, "Member 'LyraGameplayAbility_PickBestCastSkillMontage_FilteredWithTag::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.ReceiveInputPressed
// 0x0068 (0x0068 - 0x0000)
struct LyraGameplayAbility_ReceiveInputPressed final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayAbilityActivationInfo         ActivationInfo;                                    // 0x0048(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_ReceiveInputPressed) == 0x000008, "Wrong alignment on LyraGameplayAbility_ReceiveInputPressed");
static_assert(sizeof(LyraGameplayAbility_ReceiveInputPressed) == 0x000068, "Wrong size on LyraGameplayAbility_ReceiveInputPressed");
static_assert(offsetof(LyraGameplayAbility_ReceiveInputPressed, ActorInfo) == 0x000000, "Member 'LyraGameplayAbility_ReceiveInputPressed::ActorInfo' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_ReceiveInputPressed, ActivationInfo) == 0x000048, "Member 'LyraGameplayAbility_ReceiveInputPressed::ActivationInfo' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.ReceiveInputReleased
// 0x0068 (0x0068 - 0x0000)
struct LyraGameplayAbility_ReceiveInputReleased final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayAbilityActivationInfo         ActivationInfo;                                    // 0x0048(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_ReceiveInputReleased) == 0x000008, "Wrong alignment on LyraGameplayAbility_ReceiveInputReleased");
static_assert(sizeof(LyraGameplayAbility_ReceiveInputReleased) == 0x000068, "Wrong size on LyraGameplayAbility_ReceiveInputReleased");
static_assert(offsetof(LyraGameplayAbility_ReceiveInputReleased, ActorInfo) == 0x000000, "Member 'LyraGameplayAbility_ReceiveInputReleased::ActorInfo' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_ReceiveInputReleased, ActivationInfo) == 0x000048, "Member 'LyraGameplayAbility_ReceiveInputReleased::ActivationInfo' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.RemoveGameplayEffectFromOwnerExcludedAssetTags
// 0x0028 (0x0028 - 0x0000)
struct LyraGameplayAbility_RemoveGameplayEffectFromOwnerExcludedAssetTags final
{
public:
	struct FGameplayTagContainer                  ExcludedTags;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraGameplayAbility_RemoveGameplayEffectFromOwnerExcludedAssetTags) == 0x000008, "Wrong alignment on LyraGameplayAbility_RemoveGameplayEffectFromOwnerExcludedAssetTags");
static_assert(sizeof(LyraGameplayAbility_RemoveGameplayEffectFromOwnerExcludedAssetTags) == 0x000028, "Wrong size on LyraGameplayAbility_RemoveGameplayEffectFromOwnerExcludedAssetTags");
static_assert(offsetof(LyraGameplayAbility_RemoveGameplayEffectFromOwnerExcludedAssetTags, ExcludedTags) == 0x000000, "Member 'LyraGameplayAbility_RemoveGameplayEffectFromOwnerExcludedAssetTags::ExcludedTags' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_RemoveGameplayEffectFromOwnerExcludedAssetTags, StacksToRemove) == 0x000020, "Member 'LyraGameplayAbility_RemoveGameplayEffectFromOwnerExcludedAssetTags::StacksToRemove' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.SetAutoRecoverCameraMode
// 0x0010 (0x0010 - 0x0000)
struct LyraGameplayAbility_SetAutoRecoverCameraMode final
{
public:
	TSubclassOf<class ULyraCameraMode>            CameraMode;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraGameplayAbility_SetAutoRecoverCameraMode) == 0x000008, "Wrong alignment on LyraGameplayAbility_SetAutoRecoverCameraMode");
static_assert(sizeof(LyraGameplayAbility_SetAutoRecoverCameraMode) == 0x000010, "Wrong size on LyraGameplayAbility_SetAutoRecoverCameraMode");
static_assert(offsetof(LyraGameplayAbility_SetAutoRecoverCameraMode, CameraMode) == 0x000000, "Member 'LyraGameplayAbility_SetAutoRecoverCameraMode::CameraMode' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_SetAutoRecoverCameraMode, DelayTime) == 0x000008, "Member 'LyraGameplayAbility_SetAutoRecoverCameraMode::DelayTime' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.SetCameraMode
// 0x0008 (0x0008 - 0x0000)
struct LyraGameplayAbility_SetCameraMode final
{
public:
	TSubclassOf<class ULyraCameraMode>            CameraMode;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_SetCameraMode) == 0x000008, "Wrong alignment on LyraGameplayAbility_SetCameraMode");
static_assert(sizeof(LyraGameplayAbility_SetCameraMode) == 0x000008, "Wrong size on LyraGameplayAbility_SetCameraMode");
static_assert(offsetof(LyraGameplayAbility_SetCameraMode, CameraMode) == 0x000000, "Member 'LyraGameplayAbility_SetCameraMode::CameraMode' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.SetCameraModeFromServer
// 0x0008 (0x0008 - 0x0000)
struct LyraGameplayAbility_SetCameraModeFromServer final
{
public:
	TSubclassOf<class ULyraCameraMode>            CameraMode;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_SetCameraModeFromServer) == 0x000008, "Wrong alignment on LyraGameplayAbility_SetCameraModeFromServer");
static_assert(sizeof(LyraGameplayAbility_SetCameraModeFromServer) == 0x000008, "Wrong size on LyraGameplayAbility_SetCameraModeFromServer");
static_assert(offsetof(LyraGameplayAbility_SetCameraModeFromServer, CameraMode) == 0x000000, "Member 'LyraGameplayAbility_SetCameraModeFromServer::CameraMode' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.CanChangeActivationGroup
// 0x0002 (0x0002 - 0x0000)
struct LyraGameplayAbility_CanChangeActivationGroup final
{
public:
	ELyraAbilityActivationGroup                   NewGroup;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_CanChangeActivationGroup) == 0x000001, "Wrong alignment on LyraGameplayAbility_CanChangeActivationGroup");
static_assert(sizeof(LyraGameplayAbility_CanChangeActivationGroup) == 0x000002, "Wrong size on LyraGameplayAbility_CanChangeActivationGroup");
static_assert(offsetof(LyraGameplayAbility_CanChangeActivationGroup, NewGroup) == 0x000000, "Member 'LyraGameplayAbility_CanChangeActivationGroup::NewGroup' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_CanChangeActivationGroup, ReturnValue) == 0x000001, "Member 'LyraGameplayAbility_CanChangeActivationGroup::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.GetControllerFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct LyraGameplayAbility_GetControllerFromActorInfo final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_GetControllerFromActorInfo) == 0x000008, "Wrong alignment on LyraGameplayAbility_GetControllerFromActorInfo");
static_assert(sizeof(LyraGameplayAbility_GetControllerFromActorInfo) == 0x000008, "Wrong size on LyraGameplayAbility_GetControllerFromActorInfo");
static_assert(offsetof(LyraGameplayAbility_GetControllerFromActorInfo, ReturnValue) == 0x000000, "Member 'LyraGameplayAbility_GetControllerFromActorInfo::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.GetHeroComponentFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct LyraGameplayAbility_GetHeroComponentFromActorInfo final
{
public:
	class ULyraHeroComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_GetHeroComponentFromActorInfo) == 0x000008, "Wrong alignment on LyraGameplayAbility_GetHeroComponentFromActorInfo");
static_assert(sizeof(LyraGameplayAbility_GetHeroComponentFromActorInfo) == 0x000008, "Wrong size on LyraGameplayAbility_GetHeroComponentFromActorInfo");
static_assert(offsetof(LyraGameplayAbility_GetHeroComponentFromActorInfo, ReturnValue) == 0x000000, "Member 'LyraGameplayAbility_GetHeroComponentFromActorInfo::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.GetLyraAbilitySystemComponentFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct LyraGameplayAbility_GetLyraAbilitySystemComponentFromActorInfo final
{
public:
	class ULyraAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_GetLyraAbilitySystemComponentFromActorInfo) == 0x000008, "Wrong alignment on LyraGameplayAbility_GetLyraAbilitySystemComponentFromActorInfo");
static_assert(sizeof(LyraGameplayAbility_GetLyraAbilitySystemComponentFromActorInfo) == 0x000008, "Wrong size on LyraGameplayAbility_GetLyraAbilitySystemComponentFromActorInfo");
static_assert(offsetof(LyraGameplayAbility_GetLyraAbilitySystemComponentFromActorInfo, ReturnValue) == 0x000000, "Member 'LyraGameplayAbility_GetLyraAbilitySystemComponentFromActorInfo::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.GetLyraCharacterFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct LyraGameplayAbility_GetLyraCharacterFromActorInfo final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_GetLyraCharacterFromActorInfo) == 0x000008, "Wrong alignment on LyraGameplayAbility_GetLyraCharacterFromActorInfo");
static_assert(sizeof(LyraGameplayAbility_GetLyraCharacterFromActorInfo) == 0x000008, "Wrong size on LyraGameplayAbility_GetLyraCharacterFromActorInfo");
static_assert(offsetof(LyraGameplayAbility_GetLyraCharacterFromActorInfo, ReturnValue) == 0x000000, "Member 'LyraGameplayAbility_GetLyraCharacterFromActorInfo::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.GetLyraPlayerControllerFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct LyraGameplayAbility_GetLyraPlayerControllerFromActorInfo final
{
public:
	class ALyraPlayerController*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_GetLyraPlayerControllerFromActorInfo) == 0x000008, "Wrong alignment on LyraGameplayAbility_GetLyraPlayerControllerFromActorInfo");
static_assert(sizeof(LyraGameplayAbility_GetLyraPlayerControllerFromActorInfo) == 0x000008, "Wrong size on LyraGameplayAbility_GetLyraPlayerControllerFromActorInfo");
static_assert(offsetof(LyraGameplayAbility_GetLyraPlayerControllerFromActorInfo, ReturnValue) == 0x000000, "Member 'LyraGameplayAbility_GetLyraPlayerControllerFromActorInfo::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility.ScriptOnAbilityFailedToActivate
// 0x0020 (0x0020 - 0x0000)
struct LyraGameplayAbility_ScriptOnAbilityFailedToActivate final
{
public:
	struct FGameplayTagContainer                  FailedReason;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_ScriptOnAbilityFailedToActivate) == 0x000008, "Wrong alignment on LyraGameplayAbility_ScriptOnAbilityFailedToActivate");
static_assert(sizeof(LyraGameplayAbility_ScriptOnAbilityFailedToActivate) == 0x000020, "Wrong size on LyraGameplayAbility_ScriptOnAbilityFailedToActivate");
static_assert(offsetof(LyraGameplayAbility_ScriptOnAbilityFailedToActivate, FailedReason) == 0x000000, "Member 'LyraGameplayAbility_ScriptOnAbilityFailedToActivate::FailedReason' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.ApplyAOEGameplayEffect
// 0x01C0 (0x01C0 - 0x0000)
struct TgfGameplayAbility_ApplyAOEGameplayEffect final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNum;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraTeamComparison                           TeamRestrict;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALyraCharacter*>                 AppliedActors;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTgfApplyAOEExtraParam                 ExtraParams;                                       // 0x0030(0x0190)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_ApplyAOEGameplayEffect) == 0x000008, "Wrong alignment on TgfGameplayAbility_ApplyAOEGameplayEffect");
static_assert(sizeof(TgfGameplayAbility_ApplyAOEGameplayEffect) == 0x0001C0, "Wrong size on TgfGameplayAbility_ApplyAOEGameplayEffect");
static_assert(offsetof(TgfGameplayAbility_ApplyAOEGameplayEffect, Actors) == 0x000000, "Member 'TgfGameplayAbility_ApplyAOEGameplayEffect::Actors' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyAOEGameplayEffect, GameplayEffectClass) == 0x000010, "Member 'TgfGameplayAbility_ApplyAOEGameplayEffect::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyAOEGameplayEffect, MaxNum) == 0x000018, "Member 'TgfGameplayAbility_ApplyAOEGameplayEffect::MaxNum' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyAOEGameplayEffect, TeamRestrict) == 0x00001C, "Member 'TgfGameplayAbility_ApplyAOEGameplayEffect::TeamRestrict' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyAOEGameplayEffect, AppliedActors) == 0x000020, "Member 'TgfGameplayAbility_ApplyAOEGameplayEffect::AppliedActors' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyAOEGameplayEffect, ExtraParams) == 0x000030, "Member 'TgfGameplayAbility_ApplyAOEGameplayEffect::ExtraParams' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.ApplyGameplayEffectToOwnerWithTags
// 0x0038 (0x0038 - 0x0000)
struct TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags) == 0x000008, "Wrong alignment on TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags");
static_assert(sizeof(TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags) == 0x000038, "Wrong size on TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags, Tags) == 0x000000, "Member 'TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags::Tags' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags, GameplayEffectClass) == 0x000020, "Member 'TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags, GameplayEffectLevel) == 0x000028, "Member 'TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags, Stacks) == 0x00002C, "Member 'TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags::Stacks' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags, ReturnValue) == 0x000030, "Member 'TgfGameplayAbility_ApplyGameplayEffectToOwnerWithTags::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.ApplyGameplayEffectToTargetWithTags
// 0x0068 (0x0068 - 0x0000)
struct TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       Target;                                            // 0x0020(0x0028)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags) == 0x000008, "Wrong alignment on TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags");
static_assert(sizeof(TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags) == 0x000068, "Wrong size on TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags, Tags) == 0x000000, "Member 'TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags::Tags' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags, Target) == 0x000020, "Member 'TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags::Target' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags, GameplayEffectClass) == 0x000048, "Member 'TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags, GameplayEffectLevel) == 0x000050, "Member 'TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags, Stacks) == 0x000054, "Member 'TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags::Stacks' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags, ReturnValue) == 0x000058, "Member 'TgfGameplayAbility_ApplyGameplayEffectToTargetWithTags::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.ApplyGameplayEffectWithTags
// 0x0030 (0x0030 - 0x0000)
struct TgfGameplayAbility_ApplyGameplayEffectWithTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Callback;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_ApplyGameplayEffectWithTags) == 0x000008, "Wrong alignment on TgfGameplayAbility_ApplyGameplayEffectWithTags");
static_assert(sizeof(TgfGameplayAbility_ApplyGameplayEffectWithTags) == 0x000030, "Wrong size on TgfGameplayAbility_ApplyGameplayEffectWithTags");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectWithTags, Tags) == 0x000000, "Member 'TgfGameplayAbility_ApplyGameplayEffectWithTags::Tags' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_ApplyGameplayEffectWithTags, Callback) == 0x000020, "Member 'TgfGameplayAbility_ApplyGameplayEffectWithTags::Callback' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.CheckAbilityTaskMonitorSatisfied
// 0x0001 (0x0001 - 0x0000)
struct TgfGameplayAbility_CheckAbilityTaskMonitorSatisfied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_CheckAbilityTaskMonitorSatisfied) == 0x000001, "Wrong alignment on TgfGameplayAbility_CheckAbilityTaskMonitorSatisfied");
static_assert(sizeof(TgfGameplayAbility_CheckAbilityTaskMonitorSatisfied) == 0x000001, "Wrong size on TgfGameplayAbility_CheckAbilityTaskMonitorSatisfied");
static_assert(offsetof(TgfGameplayAbility_CheckAbilityTaskMonitorSatisfied, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_CheckAbilityTaskMonitorSatisfied::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.CheckValidFromInputTag
// 0x000C (0x000C - 0x0000)
struct TgfGameplayAbility_CheckValidFromInputTag final
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_CheckValidFromInputTag) == 0x000004, "Wrong alignment on TgfGameplayAbility_CheckValidFromInputTag");
static_assert(sizeof(TgfGameplayAbility_CheckValidFromInputTag) == 0x00000C, "Wrong size on TgfGameplayAbility_CheckValidFromInputTag");
static_assert(offsetof(TgfGameplayAbility_CheckValidFromInputTag, InputTag) == 0x000000, "Member 'TgfGameplayAbility_CheckValidFromInputTag::InputTag' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_CheckValidFromInputTag, ReturnValue) == 0x000008, "Member 'TgfGameplayAbility_CheckValidFromInputTag::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.CommitSubAbilityCost
// 0x0050 (0x0050 - 0x0000)
struct TgfGameplayAbility_CommitSubAbilityCost final
{
public:
	float                                         OutMagicCost;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UGameplayEffect*                  CostGE;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     CostAttribute;                                     // 0x0010(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreCostCheck;                                   // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_CommitSubAbilityCost) == 0x000008, "Wrong alignment on TgfGameplayAbility_CommitSubAbilityCost");
static_assert(sizeof(TgfGameplayAbility_CommitSubAbilityCost) == 0x000050, "Wrong size on TgfGameplayAbility_CommitSubAbilityCost");
static_assert(offsetof(TgfGameplayAbility_CommitSubAbilityCost, OutMagicCost) == 0x000000, "Member 'TgfGameplayAbility_CommitSubAbilityCost::OutMagicCost' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_CommitSubAbilityCost, CostGE) == 0x000008, "Member 'TgfGameplayAbility_CommitSubAbilityCost::CostGE' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_CommitSubAbilityCost, CostAttribute) == 0x000010, "Member 'TgfGameplayAbility_CommitSubAbilityCost::CostAttribute' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_CommitSubAbilityCost, IgnoreCostCheck) == 0x000048, "Member 'TgfGameplayAbility_CommitSubAbilityCost::IgnoreCostCheck' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_CommitSubAbilityCost, ReturnValue) == 0x000049, "Member 'TgfGameplayAbility_CommitSubAbilityCost::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.DisperseActiveBuff
// 0x0040 (0x0040 - 0x0000)
struct TgfGameplayAbility_DisperseActiveBuff final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  HighPriorityTags;                                  // 0x0018(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_DisperseActiveBuff) == 0x000008, "Wrong alignment on TgfGameplayAbility_DisperseActiveBuff");
static_assert(sizeof(TgfGameplayAbility_DisperseActiveBuff) == 0x000040, "Wrong size on TgfGameplayAbility_DisperseActiveBuff");
static_assert(offsetof(TgfGameplayAbility_DisperseActiveBuff, Actors) == 0x000000, "Member 'TgfGameplayAbility_DisperseActiveBuff::Actors' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_DisperseActiveBuff, Tag) == 0x000010, "Member 'TgfGameplayAbility_DisperseActiveBuff::Tag' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_DisperseActiveBuff, HighPriorityTags) == 0x000018, "Member 'TgfGameplayAbility_DisperseActiveBuff::HighPriorityTags' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_DisperseActiveBuff, Num) == 0x000038, "Member 'TgfGameplayAbility_DisperseActiveBuff::Num' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_DisperseActiveBuff, ReturnValue) == 0x00003C, "Member 'TgfGameplayAbility_DisperseActiveBuff::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.GetCollectableActors
// 0x0028 (0x0028 - 0x0000)
struct TgfGameplayAbility_GetCollectableActors final
{
public:
	TArray<struct FTgfCollectableActorInfo>       OutActorInfos;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckAngle;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreBlock;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_GetCollectableActors) == 0x000008, "Wrong alignment on TgfGameplayAbility_GetCollectableActors");
static_assert(sizeof(TgfGameplayAbility_GetCollectableActors) == 0x000028, "Wrong size on TgfGameplayAbility_GetCollectableActors");
static_assert(offsetof(TgfGameplayAbility_GetCollectableActors, OutActorInfos) == 0x000000, "Member 'TgfGameplayAbility_GetCollectableActors::OutActorInfos' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_GetCollectableActors, SourceActor) == 0x000010, "Member 'TgfGameplayAbility_GetCollectableActors::SourceActor' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_GetCollectableActors, Radius) == 0x000018, "Member 'TgfGameplayAbility_GetCollectableActors::Radius' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_GetCollectableActors, CheckAngle) == 0x00001C, "Member 'TgfGameplayAbility_GetCollectableActors::CheckAngle' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_GetCollectableActors, TraceChannel) == 0x000020, "Member 'TgfGameplayAbility_GetCollectableActors::TraceChannel' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_GetCollectableActors, bIgnoreBlock) == 0x000021, "Member 'TgfGameplayAbility_GetCollectableActors::bIgnoreBlock' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.GetCooldownTag
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAbility_GetCooldownTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_GetCooldownTag) == 0x000004, "Wrong alignment on TgfGameplayAbility_GetCooldownTag");
static_assert(sizeof(TgfGameplayAbility_GetCooldownTag) == 0x000008, "Wrong size on TgfGameplayAbility_GetCooldownTag");
static_assert(offsetof(TgfGameplayAbility_GetCooldownTag, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_GetCooldownTag::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.GetCooldownTimeDuration
// 0x0004 (0x0004 - 0x0000)
struct TgfGameplayAbility_GetCooldownTimeDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_GetCooldownTimeDuration) == 0x000004, "Wrong alignment on TgfGameplayAbility_GetCooldownTimeDuration");
static_assert(sizeof(TgfGameplayAbility_GetCooldownTimeDuration) == 0x000004, "Wrong size on TgfGameplayAbility_GetCooldownTimeDuration");
static_assert(offsetof(TgfGameplayAbility_GetCooldownTimeDuration, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_GetCooldownTimeDuration::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.GetSkillWidget
// 0x0010 (0x0010 - 0x0000)
struct TgfGameplayAbility_GetSkillWidget final
{
public:
	bool                                          bIgnoreTagCheck;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfSkillWidgetBase*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_GetSkillWidget) == 0x000008, "Wrong alignment on TgfGameplayAbility_GetSkillWidget");
static_assert(sizeof(TgfGameplayAbility_GetSkillWidget) == 0x000010, "Wrong size on TgfGameplayAbility_GetSkillWidget");
static_assert(offsetof(TgfGameplayAbility_GetSkillWidget, bIgnoreTagCheck) == 0x000000, "Member 'TgfGameplayAbility_GetSkillWidget::bIgnoreTagCheck' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_GetSkillWidget, ReturnValue) == 0x000008, "Member 'TgfGameplayAbility_GetSkillWidget::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.GetSpecGA
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAbility_GetSpecGA final
{
public:
	class UGameplayAbility*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_GetSpecGA) == 0x000008, "Wrong alignment on TgfGameplayAbility_GetSpecGA");
static_assert(sizeof(TgfGameplayAbility_GetSpecGA) == 0x000008, "Wrong size on TgfGameplayAbility_GetSpecGA");
static_assert(offsetof(TgfGameplayAbility_GetSpecGA, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_GetSpecGA::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.K2_CheckValidFromInputTag
// 0x000C (0x000C - 0x0000)
struct TgfGameplayAbility_K2_CheckValidFromInputTag final
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_K2_CheckValidFromInputTag) == 0x000004, "Wrong alignment on TgfGameplayAbility_K2_CheckValidFromInputTag");
static_assert(sizeof(TgfGameplayAbility_K2_CheckValidFromInputTag) == 0x00000C, "Wrong size on TgfGameplayAbility_K2_CheckValidFromInputTag");
static_assert(offsetof(TgfGameplayAbility_K2_CheckValidFromInputTag, InputTag) == 0x000000, "Member 'TgfGameplayAbility_K2_CheckValidFromInputTag::InputTag' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_K2_CheckValidFromInputTag, ReturnValue) == 0x000008, "Member 'TgfGameplayAbility_K2_CheckValidFromInputTag::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.MakeEffectContextSimple
// 0x0018 (0x0018 - 0x0000)
struct TgfGameplayAbility_MakeEffectContextSimple final
{
public:
	struct FGameplayEffectContextHandle           ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_MakeEffectContextSimple) == 0x000008, "Wrong alignment on TgfGameplayAbility_MakeEffectContextSimple");
static_assert(sizeof(TgfGameplayAbility_MakeEffectContextSimple) == 0x000018, "Wrong size on TgfGameplayAbility_MakeEffectContextSimple");
static_assert(offsetof(TgfGameplayAbility_MakeEffectContextSimple, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_MakeEffectContextSimple::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.MatchCoolDownTagBySpecHandle
// 0x0018 (0x0018 - 0x0000)
struct TgfGameplayAbility_MatchCoolDownTagBySpecHandle final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_MatchCoolDownTagBySpecHandle) == 0x000008, "Wrong alignment on TgfGameplayAbility_MatchCoolDownTagBySpecHandle");
static_assert(sizeof(TgfGameplayAbility_MatchCoolDownTagBySpecHandle) == 0x000018, "Wrong size on TgfGameplayAbility_MatchCoolDownTagBySpecHandle");
static_assert(offsetof(TgfGameplayAbility_MatchCoolDownTagBySpecHandle, SpecHandle) == 0x000000, "Member 'TgfGameplayAbility_MatchCoolDownTagBySpecHandle::SpecHandle' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_MatchCoolDownTagBySpecHandle, ReturnValue) == 0x000010, "Member 'TgfGameplayAbility_MatchCoolDownTagBySpecHandle::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.PostEndAbility
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAbility_PostEndAbility final
{
public:
	class UGameplayAbility*                       ActivatedAbility;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_PostEndAbility) == 0x000008, "Wrong alignment on TgfGameplayAbility_PostEndAbility");
static_assert(sizeof(TgfGameplayAbility_PostEndAbility) == 0x000008, "Wrong size on TgfGameplayAbility_PostEndAbility");
static_assert(offsetof(TgfGameplayAbility_PostEndAbility, ActivatedAbility) == 0x000000, "Member 'TgfGameplayAbility_PostEndAbility::ActivatedAbility' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.CheckAdditionCooldownTags
// 0x0028 (0x0028 - 0x0000)
struct TgfGameplayAbility_CheckAdditionCooldownTags final
{
public:
	struct FGameplayTagContainer                  AdditionalTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_CheckAdditionCooldownTags) == 0x000008, "Wrong alignment on TgfGameplayAbility_CheckAdditionCooldownTags");
static_assert(sizeof(TgfGameplayAbility_CheckAdditionCooldownTags) == 0x000028, "Wrong size on TgfGameplayAbility_CheckAdditionCooldownTags");
static_assert(offsetof(TgfGameplayAbility_CheckAdditionCooldownTags, AdditionalTags) == 0x000000, "Member 'TgfGameplayAbility_CheckAdditionCooldownTags::AdditionalTags' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_CheckAdditionCooldownTags, ReturnValue) == 0x000020, "Member 'TgfGameplayAbility_CheckAdditionCooldownTags::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.CheckEquipmentInstanceRestrict
// 0x0018 (0x0018 - 0x0000)
struct TgfGameplayAbility_CheckEquipmentInstanceRestrict final
{
public:
	const class UObject*                          SourceObject;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGameplayAbility*                 AbilityInstance;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_CheckEquipmentInstanceRestrict) == 0x000008, "Wrong alignment on TgfGameplayAbility_CheckEquipmentInstanceRestrict");
static_assert(sizeof(TgfGameplayAbility_CheckEquipmentInstanceRestrict) == 0x000018, "Wrong size on TgfGameplayAbility_CheckEquipmentInstanceRestrict");
static_assert(offsetof(TgfGameplayAbility_CheckEquipmentInstanceRestrict, SourceObject) == 0x000000, "Member 'TgfGameplayAbility_CheckEquipmentInstanceRestrict::SourceObject' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_CheckEquipmentInstanceRestrict, AbilityInstance) == 0x000008, "Member 'TgfGameplayAbility_CheckEquipmentInstanceRestrict::AbilityInstance' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_CheckEquipmentInstanceRestrict, ReturnValue) == 0x000010, "Member 'TgfGameplayAbility_CheckEquipmentInstanceRestrict::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.CheckEquipmentInstanceValid
// 0x0010 (0x0010 - 0x0000)
struct TgfGameplayAbility_CheckEquipmentInstanceValid final
{
public:
	const class UObject*                          TargetObject;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_CheckEquipmentInstanceValid) == 0x000008, "Wrong alignment on TgfGameplayAbility_CheckEquipmentInstanceValid");
static_assert(sizeof(TgfGameplayAbility_CheckEquipmentInstanceValid) == 0x000010, "Wrong size on TgfGameplayAbility_CheckEquipmentInstanceValid");
static_assert(offsetof(TgfGameplayAbility_CheckEquipmentInstanceValid, TargetObject) == 0x000000, "Member 'TgfGameplayAbility_CheckEquipmentInstanceValid::TargetObject' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_CheckEquipmentInstanceValid, ReturnValue) == 0x000008, "Member 'TgfGameplayAbility_CheckEquipmentInstanceValid::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.CheckSubAbilityCost
// 0x0018 (0x0018 - 0x0000)
struct TgfGameplayAbility_CheckSubAbilityCost final
{
public:
	const class UGameplayEffect*                  CostGE;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FailedTag;                                         // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_CheckSubAbilityCost) == 0x000008, "Wrong alignment on TgfGameplayAbility_CheckSubAbilityCost");
static_assert(sizeof(TgfGameplayAbility_CheckSubAbilityCost) == 0x000018, "Wrong size on TgfGameplayAbility_CheckSubAbilityCost");
static_assert(offsetof(TgfGameplayAbility_CheckSubAbilityCost, CostGE) == 0x000000, "Member 'TgfGameplayAbility_CheckSubAbilityCost::CostGE' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_CheckSubAbilityCost, FailedTag) == 0x000008, "Member 'TgfGameplayAbility_CheckSubAbilityCost::FailedTag' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_CheckSubAbilityCost, ReturnValue) == 0x000010, "Member 'TgfGameplayAbility_CheckSubAbilityCost::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.GetAnotherEquipmentInstance
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAbility_GetAnotherEquipmentInstance final
{
public:
	const class ULyraEquipmentInstance*           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_GetAnotherEquipmentInstance) == 0x000008, "Wrong alignment on TgfGameplayAbility_GetAnotherEquipmentInstance");
static_assert(sizeof(TgfGameplayAbility_GetAnotherEquipmentInstance) == 0x000008, "Wrong size on TgfGameplayAbility_GetAnotherEquipmentInstance");
static_assert(offsetof(TgfGameplayAbility_GetAnotherEquipmentInstance, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_GetAnotherEquipmentInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.GetSourceEquipmentInstance
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAbility_GetSourceEquipmentInstance final
{
public:
	const class ULyraEquipmentInstance*           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_GetSourceEquipmentInstance) == 0x000008, "Wrong alignment on TgfGameplayAbility_GetSourceEquipmentInstance");
static_assert(sizeof(TgfGameplayAbility_GetSourceEquipmentInstance) == 0x000008, "Wrong size on TgfGameplayAbility_GetSourceEquipmentInstance");
static_assert(offsetof(TgfGameplayAbility_GetSourceEquipmentInstance, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_GetSourceEquipmentInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.GetWeaponHandType
// 0x0001 (0x0001 - 0x0000)
struct TgfGameplayAbility_GetWeaponHandType final
{
public:
	ETgfWeaponHandType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_GetWeaponHandType) == 0x000001, "Wrong alignment on TgfGameplayAbility_GetWeaponHandType");
static_assert(sizeof(TgfGameplayAbility_GetWeaponHandType) == 0x000001, "Wrong size on TgfGameplayAbility_GetWeaponHandType");
static_assert(offsetof(TgfGameplayAbility_GetWeaponHandType, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_GetWeaponHandType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.HasTalentTag
// 0x000C (0x000C - 0x0000)
struct TgfGameplayAbility_HasTalentTag final
{
public:
	struct FGameplayTag                           TagToCheck;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_HasTalentTag) == 0x000004, "Wrong alignment on TgfGameplayAbility_HasTalentTag");
static_assert(sizeof(TgfGameplayAbility_HasTalentTag) == 0x00000C, "Wrong size on TgfGameplayAbility_HasTalentTag");
static_assert(offsetof(TgfGameplayAbility_HasTalentTag, TagToCheck) == 0x000000, "Member 'TgfGameplayAbility_HasTalentTag::TagToCheck' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_HasTalentTag, ReturnValue) == 0x000008, "Member 'TgfGameplayAbility_HasTalentTag::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.IsCharacterStateValid
// 0x0001 (0x0001 - 0x0000)
struct TgfGameplayAbility_IsCharacterStateValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_IsCharacterStateValid) == 0x000001, "Wrong alignment on TgfGameplayAbility_IsCharacterStateValid");
static_assert(sizeof(TgfGameplayAbility_IsCharacterStateValid) == 0x000001, "Wrong size on TgfGameplayAbility_IsCharacterStateValid");
static_assert(offsetof(TgfGameplayAbility_IsCharacterStateValid, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_IsCharacterStateValid::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.IsCurrentActive
// 0x0001 (0x0001 - 0x0000)
struct TgfGameplayAbility_IsCurrentActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_IsCurrentActive) == 0x000001, "Wrong alignment on TgfGameplayAbility_IsCurrentActive");
static_assert(sizeof(TgfGameplayAbility_IsCurrentActive) == 0x000001, "Wrong size on TgfGameplayAbility_IsCurrentActive");
static_assert(offsetof(TgfGameplayAbility_IsCurrentActive, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_IsCurrentActive::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.IsUsingWeapon
// 0x0002 (0x0002 - 0x0000)
struct TgfGameplayAbility_IsUsingWeapon final
{
public:
	ETgfEquipSubType                              EquipSubType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_IsUsingWeapon) == 0x000001, "Wrong alignment on TgfGameplayAbility_IsUsingWeapon");
static_assert(sizeof(TgfGameplayAbility_IsUsingWeapon) == 0x000002, "Wrong size on TgfGameplayAbility_IsUsingWeapon");
static_assert(offsetof(TgfGameplayAbility_IsUsingWeapon, EquipSubType) == 0x000000, "Member 'TgfGameplayAbility_IsUsingWeapon::EquipSubType' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_IsUsingWeapon, ReturnValue) == 0x000001, "Member 'TgfGameplayAbility_IsUsingWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.K2_GetCooldownGameplayEffect
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAbility_K2_GetCooldownGameplayEffect final
{
public:
	class UGameplayEffect*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_K2_GetCooldownGameplayEffect) == 0x000008, "Wrong alignment on TgfGameplayAbility_K2_GetCooldownGameplayEffect");
static_assert(sizeof(TgfGameplayAbility_K2_GetCooldownGameplayEffect) == 0x000008, "Wrong size on TgfGameplayAbility_K2_GetCooldownGameplayEffect");
static_assert(offsetof(TgfGameplayAbility_K2_GetCooldownGameplayEffect, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_K2_GetCooldownGameplayEffect::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility.K2_PostCheckCooldown
// 0x0050 (0x0050 - 0x0000)
struct TgfGameplayAbility_K2_PostCheckCooldown final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0048(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckResult;                                       // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_K2_PostCheckCooldown) == 0x000008, "Wrong alignment on TgfGameplayAbility_K2_PostCheckCooldown");
static_assert(sizeof(TgfGameplayAbility_K2_PostCheckCooldown) == 0x000050, "Wrong size on TgfGameplayAbility_K2_PostCheckCooldown");
static_assert(offsetof(TgfGameplayAbility_K2_PostCheckCooldown, ActorInfo) == 0x000000, "Member 'TgfGameplayAbility_K2_PostCheckCooldown::ActorInfo' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_K2_PostCheckCooldown, Handle) == 0x000048, "Member 'TgfGameplayAbility_K2_PostCheckCooldown::Handle' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_K2_PostCheckCooldown, CheckResult) == 0x00004C, "Member 'TgfGameplayAbility_K2_PostCheckCooldown::CheckResult' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_K2_PostCheckCooldown, ReturnValue) == 0x00004D, "Member 'TgfGameplayAbility_K2_PostCheckCooldown::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleUtility.AddItem
// 0x0020 (0x0020 - 0x0000)
struct BattleUtility_AddItem final
{
public:
	class UTgfInventoryManagerComponent*          Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClassName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUtility_AddItem) == 0x000008, "Wrong alignment on BattleUtility_AddItem");
static_assert(sizeof(BattleUtility_AddItem) == 0x000020, "Wrong size on BattleUtility_AddItem");
static_assert(offsetof(BattleUtility_AddItem, Component) == 0x000000, "Member 'BattleUtility_AddItem::Component' has a wrong offset!");
static_assert(offsetof(BattleUtility_AddItem, ItemId) == 0x000008, "Member 'BattleUtility_AddItem::ItemId' has a wrong offset!");
static_assert(offsetof(BattleUtility_AddItem, Nums) == 0x00000C, "Member 'BattleUtility_AddItem::Nums' has a wrong offset!");
static_assert(offsetof(BattleUtility_AddItem, ClassName) == 0x000010, "Member 'BattleUtility_AddItem::ClassName' has a wrong offset!");

// Function LyraGame.BattleUtility.CreateItemInstanceForLobby
// 0x0030 (0x0030 - 0x0000)
struct BattleUtility_CreateItemInstanceForLobby final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCnt;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClassName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTgfInventoryItemInstance*>      ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUtility_CreateItemInstanceForLobby) == 0x000008, "Wrong alignment on BattleUtility_CreateItemInstanceForLobby");
static_assert(sizeof(BattleUtility_CreateItemInstanceForLobby) == 0x000030, "Wrong size on BattleUtility_CreateItemInstanceForLobby");
static_assert(offsetof(BattleUtility_CreateItemInstanceForLobby, Owner) == 0x000000, "Member 'BattleUtility_CreateItemInstanceForLobby::Owner' has a wrong offset!");
static_assert(offsetof(BattleUtility_CreateItemInstanceForLobby, ItemId) == 0x000008, "Member 'BattleUtility_CreateItemInstanceForLobby::ItemId' has a wrong offset!");
static_assert(offsetof(BattleUtility_CreateItemInstanceForLobby, ItemCnt) == 0x00000C, "Member 'BattleUtility_CreateItemInstanceForLobby::ItemCnt' has a wrong offset!");
static_assert(offsetof(BattleUtility_CreateItemInstanceForLobby, ClassName) == 0x000010, "Member 'BattleUtility_CreateItemInstanceForLobby::ClassName' has a wrong offset!");
static_assert(offsetof(BattleUtility_CreateItemInstanceForLobby, ReturnValue) == 0x000020, "Member 'BattleUtility_CreateItemInstanceForLobby::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleUtility.GetEquipSubtype
// 0x0010 (0x0010 - 0x0000)
struct BattleUtility_GetEquipSubtype final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSubType                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleUtility_GetEquipSubtype) == 0x000008, "Wrong alignment on BattleUtility_GetEquipSubtype");
static_assert(sizeof(BattleUtility_GetEquipSubtype) == 0x000010, "Wrong size on BattleUtility_GetEquipSubtype");
static_assert(offsetof(BattleUtility_GetEquipSubtype, ItemInstance) == 0x000000, "Member 'BattleUtility_GetEquipSubtype::ItemInstance' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetEquipSubtype, ReturnValue) == 0x000008, "Member 'BattleUtility_GetEquipSubtype::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleUtility.GetEquipType
// 0x0010 (0x0010 - 0x0000)
struct BattleUtility_GetEquipType final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponEquipType                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleUtility_GetEquipType) == 0x000008, "Wrong alignment on BattleUtility_GetEquipType");
static_assert(sizeof(BattleUtility_GetEquipType) == 0x000010, "Wrong size on BattleUtility_GetEquipType");
static_assert(offsetof(BattleUtility_GetEquipType, ItemInstance) == 0x000000, "Member 'BattleUtility_GetEquipType::ItemInstance' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetEquipType, ReturnValue) == 0x000008, "Member 'BattleUtility_GetEquipType::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleUtility.GetMatchedCareers
// 0x0020 (0x0020 - 0x0000)
struct BattleUtility_GetMatchedCareers final
{
public:
	ETgfEquipSubType                              EquipType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETgfActorCareer>                       ActorCareer;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleUtility_GetMatchedCareers) == 0x000008, "Wrong alignment on BattleUtility_GetMatchedCareers");
static_assert(sizeof(BattleUtility_GetMatchedCareers) == 0x000020, "Wrong size on BattleUtility_GetMatchedCareers");
static_assert(offsetof(BattleUtility_GetMatchedCareers, EquipType) == 0x000000, "Member 'BattleUtility_GetMatchedCareers::EquipType' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetMatchedCareers, ActorCareer) == 0x000008, "Member 'BattleUtility_GetMatchedCareers::ActorCareer' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetMatchedCareers, ReturnValue) == 0x000018, "Member 'BattleUtility_GetMatchedCareers::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleUtility.GetTalentOfFirstLevelAttribute
// 0x0058 (0x0058 - 0x0000)
struct BattleUtility_GetTalentOfFirstLevelAttribute final
{
public:
	const class UTgfFirstLevelAttrDataAsset*      DataAsset;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorCareer                               Career;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 Race;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     ConditionalAttr;                                   // 0x0010(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTgfCareerTalentCfgItem>        Configs;                                           // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUtility_GetTalentOfFirstLevelAttribute) == 0x000008, "Wrong alignment on BattleUtility_GetTalentOfFirstLevelAttribute");
static_assert(sizeof(BattleUtility_GetTalentOfFirstLevelAttribute) == 0x000058, "Wrong size on BattleUtility_GetTalentOfFirstLevelAttribute");
static_assert(offsetof(BattleUtility_GetTalentOfFirstLevelAttribute, DataAsset) == 0x000000, "Member 'BattleUtility_GetTalentOfFirstLevelAttribute::DataAsset' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalentOfFirstLevelAttribute, Career) == 0x000008, "Member 'BattleUtility_GetTalentOfFirstLevelAttribute::Career' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalentOfFirstLevelAttribute, Race) == 0x000009, "Member 'BattleUtility_GetTalentOfFirstLevelAttribute::Race' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalentOfFirstLevelAttribute, ConditionalAttr) == 0x000010, "Member 'BattleUtility_GetTalentOfFirstLevelAttribute::ConditionalAttr' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalentOfFirstLevelAttribute, Configs) == 0x000048, "Member 'BattleUtility_GetTalentOfFirstLevelAttribute::Configs' has a wrong offset!");

// Function LyraGame.BattleUtility.GetTalentOfGameplayTag
// 0x00A0 (0x00A0 - 0x0000)
struct BattleUtility_GetTalentOfGameplayTag final
{
public:
	TArray<struct FTgfCareerTalentCfgItem>        Talents;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagToCheck;                                        // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfCareerTalentCfgItem                OutTalent;                                         // 0x0018(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleUtility_GetTalentOfGameplayTag) == 0x000008, "Wrong alignment on BattleUtility_GetTalentOfGameplayTag");
static_assert(sizeof(BattleUtility_GetTalentOfGameplayTag) == 0x0000A0, "Wrong size on BattleUtility_GetTalentOfGameplayTag");
static_assert(offsetof(BattleUtility_GetTalentOfGameplayTag, Talents) == 0x000000, "Member 'BattleUtility_GetTalentOfGameplayTag::Talents' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalentOfGameplayTag, TagToCheck) == 0x000010, "Member 'BattleUtility_GetTalentOfGameplayTag::TagToCheck' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalentOfGameplayTag, OutTalent) == 0x000018, "Member 'BattleUtility_GetTalentOfGameplayTag::OutTalent' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalentOfGameplayTag, ReturnValue) == 0x000098, "Member 'BattleUtility_GetTalentOfGameplayTag::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleUtility.GetTalents
// 0x0020 (0x0020 - 0x0000)
struct BattleUtility_GetTalents final
{
public:
	const class UTgfFirstLevelAttrDataAsset*      DataAsset;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorCareer                               Career;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 Race;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTgfCareerTalentCfgItem>        Configs;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUtility_GetTalents) == 0x000008, "Wrong alignment on BattleUtility_GetTalents");
static_assert(sizeof(BattleUtility_GetTalents) == 0x000020, "Wrong size on BattleUtility_GetTalents");
static_assert(offsetof(BattleUtility_GetTalents, DataAsset) == 0x000000, "Member 'BattleUtility_GetTalents::DataAsset' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalents, Career) == 0x000008, "Member 'BattleUtility_GetTalents::Career' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalents, Race) == 0x000009, "Member 'BattleUtility_GetTalents::Race' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalents, Configs) == 0x000010, "Member 'BattleUtility_GetTalents::Configs' has a wrong offset!");

// Function LyraGame.BattleUtility.GetTalentsWithOrder
// 0x0020 (0x0020 - 0x0000)
struct BattleUtility_GetTalentsWithOrder final
{
public:
	const class UTgfFirstLevelAttrDataAsset*      DataAsset;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorCareer                               Career;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 Race;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTgfCareerTalentCfgItem>        Configs;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUtility_GetTalentsWithOrder) == 0x000008, "Wrong alignment on BattleUtility_GetTalentsWithOrder");
static_assert(sizeof(BattleUtility_GetTalentsWithOrder) == 0x000020, "Wrong size on BattleUtility_GetTalentsWithOrder");
static_assert(offsetof(BattleUtility_GetTalentsWithOrder, DataAsset) == 0x000000, "Member 'BattleUtility_GetTalentsWithOrder::DataAsset' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalentsWithOrder, Career) == 0x000008, "Member 'BattleUtility_GetTalentsWithOrder::Career' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalentsWithOrder, Race) == 0x000009, "Member 'BattleUtility_GetTalentsWithOrder::Race' has a wrong offset!");
static_assert(offsetof(BattleUtility_GetTalentsWithOrder, Configs) == 0x000010, "Member 'BattleUtility_GetTalentsWithOrder::Configs' has a wrong offset!");

// Function LyraGame.BattleUtility.GetUExcelLoaderTgfConfigExcelConstConfig
// 0x0008 (0x0008 - 0x0000)
struct BattleUtility_GetUExcelLoaderTgfConfigExcelConstConfig final
{
public:
	class UExcelLoaderTgfConfigExcelConstConfig*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUtility_GetUExcelLoaderTgfConfigExcelConstConfig) == 0x000008, "Wrong alignment on BattleUtility_GetUExcelLoaderTgfConfigExcelConstConfig");
static_assert(sizeof(BattleUtility_GetUExcelLoaderTgfConfigExcelConstConfig) == 0x000008, "Wrong size on BattleUtility_GetUExcelLoaderTgfConfigExcelConstConfig");
static_assert(offsetof(BattleUtility_GetUExcelLoaderTgfConfigExcelConstConfig, ReturnValue) == 0x000000, "Member 'BattleUtility_GetUExcelLoaderTgfConfigExcelConstConfig::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleUtility.IsEquipMatchLeftWeapon
// 0x0010 (0x0010 - 0x0000)
struct BattleUtility_IsEquipMatchLeftWeapon final
{
public:
	TSubclassOf<class UTgfInventoryItemDefinition> Main_weapon;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSubType                              Left_type;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleUtility_IsEquipMatchLeftWeapon) == 0x000008, "Wrong alignment on BattleUtility_IsEquipMatchLeftWeapon");
static_assert(sizeof(BattleUtility_IsEquipMatchLeftWeapon) == 0x000010, "Wrong size on BattleUtility_IsEquipMatchLeftWeapon");
static_assert(offsetof(BattleUtility_IsEquipMatchLeftWeapon, Main_weapon) == 0x000000, "Member 'BattleUtility_IsEquipMatchLeftWeapon::Main_weapon' has a wrong offset!");
static_assert(offsetof(BattleUtility_IsEquipMatchLeftWeapon, Left_type) == 0x000008, "Member 'BattleUtility_IsEquipMatchLeftWeapon::Left_type' has a wrong offset!");
static_assert(offsetof(BattleUtility_IsEquipMatchLeftWeapon, ReturnValue) == 0x000009, "Member 'BattleUtility_IsEquipMatchLeftWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleUtility.Loot
// 0x0068 (0x0068 - 0x0000)
struct BattleUtility_Loot final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserKey;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   PlayerStates;                                      // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class APlayerState*                           LootPlayerState;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClassName;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootType;                                          // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTgfInventoryItemInstance*>      ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUtility_Loot) == 0x000008, "Wrong alignment on BattleUtility_Loot");
static_assert(sizeof(BattleUtility_Loot) == 0x000068, "Wrong size on BattleUtility_Loot");
static_assert(offsetof(BattleUtility_Loot, Owner) == 0x000000, "Member 'BattleUtility_Loot::Owner' has a wrong offset!");
static_assert(offsetof(BattleUtility_Loot, SourceName) == 0x000008, "Member 'BattleUtility_Loot::SourceName' has a wrong offset!");
static_assert(offsetof(BattleUtility_Loot, UserKey) == 0x000018, "Member 'BattleUtility_Loot::UserKey' has a wrong offset!");
static_assert(offsetof(BattleUtility_Loot, PlayerStates) == 0x000028, "Member 'BattleUtility_Loot::PlayerStates' has a wrong offset!");
static_assert(offsetof(BattleUtility_Loot, LootPlayerState) == 0x000038, "Member 'BattleUtility_Loot::LootPlayerState' has a wrong offset!");
static_assert(offsetof(BattleUtility_Loot, ClassName) == 0x000040, "Member 'BattleUtility_Loot::ClassName' has a wrong offset!");
static_assert(offsetof(BattleUtility_Loot, LootType) == 0x000050, "Member 'BattleUtility_Loot::LootType' has a wrong offset!");
static_assert(offsetof(BattleUtility_Loot, ReturnValue) == 0x000058, "Member 'BattleUtility_Loot::ReturnValue' has a wrong offset!");

// Function LyraGame.BattleUtility.MatchCareer
// 0x0003 (0x0003 - 0x0000)
struct BattleUtility_MatchCareer final
{
public:
	ETgfEquipSubType                              EquipType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorCareer                               ActorCareer;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUtility_MatchCareer) == 0x000001, "Wrong alignment on BattleUtility_MatchCareer");
static_assert(sizeof(BattleUtility_MatchCareer) == 0x000003, "Wrong size on BattleUtility_MatchCareer");
static_assert(offsetof(BattleUtility_MatchCareer, EquipType) == 0x000000, "Member 'BattleUtility_MatchCareer::EquipType' has a wrong offset!");
static_assert(offsetof(BattleUtility_MatchCareer, ActorCareer) == 0x000001, "Member 'BattleUtility_MatchCareer::ActorCareer' has a wrong offset!");
static_assert(offsetof(BattleUtility_MatchCareer, ReturnValue) == 0x000002, "Member 'BattleUtility_MatchCareer::ReturnValue' has a wrong offset!");

// Function LyraGame.BTTask_BlackboardObserve.RegisterObserve
// 0x0001 (0x0001 - 0x0000)
struct BTTask_BlackboardObserve_RegisterObserve final
{
public:
	uint8                                         KeyID;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_BlackboardObserve_RegisterObserve) == 0x000001, "Wrong alignment on BTTask_BlackboardObserve_RegisterObserve");
static_assert(sizeof(BTTask_BlackboardObserve_RegisterObserve) == 0x000001, "Wrong size on BTTask_BlackboardObserve_RegisterObserve");
static_assert(offsetof(BTTask_BlackboardObserve_RegisterObserve, KeyID) == 0x000000, "Member 'BTTask_BlackboardObserve_RegisterObserve::KeyID' has a wrong offset!");

// Function LyraGame.CharacterSelectionComponent.SetCustomnTraceStartPos
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectionComponent_SetCustomnTraceStartPos final
{
public:
	TDelegate<void()>                             InGetTraceStartPosDelegate;                        // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectionComponent_SetCustomnTraceStartPos) == 0x000004, "Wrong alignment on CharacterSelectionComponent_SetCustomnTraceStartPos");
static_assert(sizeof(CharacterSelectionComponent_SetCustomnTraceStartPos) == 0x000010, "Wrong size on CharacterSelectionComponent_SetCustomnTraceStartPos");
static_assert(offsetof(CharacterSelectionComponent_SetCustomnTraceStartPos, InGetTraceStartPosDelegate) == 0x000000, "Member 'CharacterSelectionComponent_SetCustomnTraceStartPos::InGetTraceStartPosDelegate' has a wrong offset!");

// Function LyraGame.CharacterSelectionComponent.SetFilterCallback
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectionComponent_SetFilterCallback final
{
public:
	TDelegate<void(class AActor* Actor)>          InOnShouldActorSelected;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectionComponent_SetFilterCallback) == 0x000004, "Wrong alignment on CharacterSelectionComponent_SetFilterCallback");
static_assert(sizeof(CharacterSelectionComponent_SetFilterCallback) == 0x000010, "Wrong size on CharacterSelectionComponent_SetFilterCallback");
static_assert(offsetof(CharacterSelectionComponent_SetFilterCallback, InOnShouldActorSelected) == 0x000000, "Member 'CharacterSelectionComponent_SetFilterCallback::InOnShouldActorSelected' has a wrong offset!");

// Function LyraGame.CharacterSelectionComponent.GetTraceStartPos
// 0x0020 (0x0020 - 0x0000)
struct CharacterSelectionComponent_GetTraceStartPos final
{
public:
	const class AController*                      Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectionComponent_GetTraceStartPos) == 0x000008, "Wrong alignment on CharacterSelectionComponent_GetTraceStartPos");
static_assert(sizeof(CharacterSelectionComponent_GetTraceStartPos) == 0x000020, "Wrong size on CharacterSelectionComponent_GetTraceStartPos");
static_assert(offsetof(CharacterSelectionComponent_GetTraceStartPos, Controller) == 0x000000, "Member 'CharacterSelectionComponent_GetTraceStartPos::Controller' has a wrong offset!");
static_assert(offsetof(CharacterSelectionComponent_GetTraceStartPos, ReturnValue) == 0x000008, "Member 'CharacterSelectionComponent_GetTraceStartPos::ReturnValue' has a wrong offset!");

// Function LyraGame.CharacterSelectionComponent.IsActorValid
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectionComponent_IsActorValid final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectionComponent_IsActorValid) == 0x000008, "Wrong alignment on CharacterSelectionComponent_IsActorValid");
static_assert(sizeof(CharacterSelectionComponent_IsActorValid) == 0x000010, "Wrong size on CharacterSelectionComponent_IsActorValid");
static_assert(offsetof(CharacterSelectionComponent_IsActorValid, Actor) == 0x000000, "Member 'CharacterSelectionComponent_IsActorValid::Actor' has a wrong offset!");
static_assert(offsetof(CharacterSelectionComponent_IsActorValid, ReturnValue) == 0x000008, "Member 'CharacterSelectionComponent_IsActorValid::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.FindFragmentByClass
// 0x0018 (0x0018 - 0x0000)
struct DataUtility_FindFragmentByClass final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> Item_class;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemFragment> Fragment_class;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ULyraInventoryItemFragment*       ReturnValue;                                       // 0x0010(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_FindFragmentByClass) == 0x000008, "Wrong alignment on DataUtility_FindFragmentByClass");
static_assert(sizeof(DataUtility_FindFragmentByClass) == 0x000018, "Wrong size on DataUtility_FindFragmentByClass");
static_assert(offsetof(DataUtility_FindFragmentByClass, Item_class) == 0x000000, "Member 'DataUtility_FindFragmentByClass::Item_class' has a wrong offset!");
static_assert(offsetof(DataUtility_FindFragmentByClass, Fragment_class) == 0x000008, "Member 'DataUtility_FindFragmentByClass::Fragment_class' has a wrong offset!");
static_assert(offsetof(DataUtility_FindFragmentByClass, ReturnValue) == 0x000010, "Member 'DataUtility_FindFragmentByClass::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetBestFitDefinition
// 0x0018 (0x0018 - 0x0000)
struct DataUtility_GetBestFitDefinition final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> SourceDef;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULyraInventoryItemDefinition> ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetBestFitDefinition) == 0x000008, "Wrong alignment on DataUtility_GetBestFitDefinition");
static_assert(sizeof(DataUtility_GetBestFitDefinition) == 0x000018, "Wrong size on DataUtility_GetBestFitDefinition");
static_assert(offsetof(DataUtility_GetBestFitDefinition, SourceDef) == 0x000000, "Member 'DataUtility_GetBestFitDefinition::SourceDef' has a wrong offset!");
static_assert(offsetof(DataUtility_GetBestFitDefinition, SkinId) == 0x000008, "Member 'DataUtility_GetBestFitDefinition::SkinId' has a wrong offset!");
static_assert(offsetof(DataUtility_GetBestFitDefinition, ReturnValue) == 0x000010, "Member 'DataUtility_GetBestFitDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetClassDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct DataUtility_GetClassDefaultObject final
{
public:
	class UClass*                                 Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetClassDefaultObject) == 0x000008, "Wrong alignment on DataUtility_GetClassDefaultObject");
static_assert(sizeof(DataUtility_GetClassDefaultObject) == 0x000010, "Wrong size on DataUtility_GetClassDefaultObject");
static_assert(offsetof(DataUtility_GetClassDefaultObject, Param_Class) == 0x000000, "Member 'DataUtility_GetClassDefaultObject::Param_Class' has a wrong offset!");
static_assert(offsetof(DataUtility_GetClassDefaultObject, ReturnValue) == 0x000008, "Member 'DataUtility_GetClassDefaultObject::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetDataUtilityInstance
// 0x0008 (0x0008 - 0x0000)
struct DataUtility_GetDataUtilityInstance final
{
public:
	class UDataUtility*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetDataUtilityInstance) == 0x000008, "Wrong alignment on DataUtility_GetDataUtilityInstance");
static_assert(sizeof(DataUtility_GetDataUtilityInstance) == 0x000008, "Wrong size on DataUtility_GetDataUtilityInstance");
static_assert(offsetof(DataUtility_GetDataUtilityInstance, ReturnValue) == 0x000000, "Member 'DataUtility_GetDataUtilityInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetFacadeItemPosOffset
// 0x0020 (0x0020 - 0x0000)
struct DataUtility_GetFacadeItemPosOffset final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetFacadeItemPosOffset) == 0x000008, "Wrong alignment on DataUtility_GetFacadeItemPosOffset");
static_assert(sizeof(DataUtility_GetFacadeItemPosOffset) == 0x000020, "Wrong size on DataUtility_GetFacadeItemPosOffset");
static_assert(offsetof(DataUtility_GetFacadeItemPosOffset, Type_id) == 0x000000, "Member 'DataUtility_GetFacadeItemPosOffset::Type_id' has a wrong offset!");
static_assert(offsetof(DataUtility_GetFacadeItemPosOffset, ReturnValue) == 0x000008, "Member 'DataUtility_GetFacadeItemPosOffset::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetFacadeItemRotator
// 0x0018 (0x0018 - 0x0000)
struct DataUtility_GetFacadeItemRotator final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetFacadeItemRotator) == 0x000008, "Wrong alignment on DataUtility_GetFacadeItemRotator");
static_assert(sizeof(DataUtility_GetFacadeItemRotator) == 0x000018, "Wrong size on DataUtility_GetFacadeItemRotator");
static_assert(offsetof(DataUtility_GetFacadeItemRotator, Type_id) == 0x000000, "Member 'DataUtility_GetFacadeItemRotator::Type_id' has a wrong offset!");
static_assert(offsetof(DataUtility_GetFacadeItemRotator, ReturnValue) == 0x000008, "Member 'DataUtility_GetFacadeItemRotator::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetFacadeItemScale
// 0x0020 (0x0020 - 0x0000)
struct DataUtility_GetFacadeItemScale final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetFacadeItemScale) == 0x000008, "Wrong alignment on DataUtility_GetFacadeItemScale");
static_assert(sizeof(DataUtility_GetFacadeItemScale) == 0x000020, "Wrong size on DataUtility_GetFacadeItemScale");
static_assert(offsetof(DataUtility_GetFacadeItemScale, Type_id) == 0x000000, "Member 'DataUtility_GetFacadeItemScale::Type_id' has a wrong offset!");
static_assert(offsetof(DataUtility_GetFacadeItemScale, ReturnValue) == 0x000008, "Member 'DataUtility_GetFacadeItemScale::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetHeadFrameDefinition
// 0x0010 (0x0010 - 0x0000)
struct DataUtility_GetHeadFrameDefinition final
{
public:
	int32                                         SkinId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTgfItemHeadFrameDefinition            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetHeadFrameDefinition) == 0x000008, "Wrong alignment on DataUtility_GetHeadFrameDefinition");
static_assert(sizeof(DataUtility_GetHeadFrameDefinition) == 0x000010, "Wrong size on DataUtility_GetHeadFrameDefinition");
static_assert(offsetof(DataUtility_GetHeadFrameDefinition, SkinId) == 0x000000, "Member 'DataUtility_GetHeadFrameDefinition::SkinId' has a wrong offset!");
static_assert(offsetof(DataUtility_GetHeadFrameDefinition, ReturnValue) == 0x000008, "Member 'DataUtility_GetHeadFrameDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetPreviewSkinDefinition
// 0x0018 (0x0018 - 0x0000)
struct DataUtility_GetPreviewSkinDefinition final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> SourceDef;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULyraInventoryItemDefinition> ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetPreviewSkinDefinition) == 0x000008, "Wrong alignment on DataUtility_GetPreviewSkinDefinition");
static_assert(sizeof(DataUtility_GetPreviewSkinDefinition) == 0x000018, "Wrong size on DataUtility_GetPreviewSkinDefinition");
static_assert(offsetof(DataUtility_GetPreviewSkinDefinition, SourceDef) == 0x000000, "Member 'DataUtility_GetPreviewSkinDefinition::SourceDef' has a wrong offset!");
static_assert(offsetof(DataUtility_GetPreviewSkinDefinition, SkinId) == 0x000008, "Member 'DataUtility_GetPreviewSkinDefinition::SkinId' has a wrong offset!");
static_assert(offsetof(DataUtility_GetPreviewSkinDefinition, ReturnValue) == 0x000010, "Member 'DataUtility_GetPreviewSkinDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetSkinDefinition
// 0x0018 (0x0018 - 0x0000)
struct DataUtility_GetSkinDefinition final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> SourceDef;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULyraInventoryItemDefinition> ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetSkinDefinition) == 0x000008, "Wrong alignment on DataUtility_GetSkinDefinition");
static_assert(sizeof(DataUtility_GetSkinDefinition) == 0x000018, "Wrong size on DataUtility_GetSkinDefinition");
static_assert(offsetof(DataUtility_GetSkinDefinition, SourceDef) == 0x000000, "Member 'DataUtility_GetSkinDefinition::SourceDef' has a wrong offset!");
static_assert(offsetof(DataUtility_GetSkinDefinition, SkinId) == 0x000008, "Member 'DataUtility_GetSkinDefinition::SkinId' has a wrong offset!");
static_assert(offsetof(DataUtility_GetSkinDefinition, ReturnValue) == 0x000010, "Member 'DataUtility_GetSkinDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.IsFacadeItem
// 0x0008 (0x0008 - 0x0000)
struct DataUtility_IsFacadeItem final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataUtility_IsFacadeItem) == 0x000004, "Wrong alignment on DataUtility_IsFacadeItem");
static_assert(sizeof(DataUtility_IsFacadeItem) == 0x000008, "Wrong size on DataUtility_IsFacadeItem");
static_assert(offsetof(DataUtility_IsFacadeItem, Type_id) == 0x000000, "Member 'DataUtility_IsFacadeItem::Type_id' has a wrong offset!");
static_assert(offsetof(DataUtility_IsFacadeItem, ReturnValue) == 0x000004, "Member 'DataUtility_IsFacadeItem::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.IsGearGemInstItem
// 0x0008 (0x0008 - 0x0000)
struct DataUtility_IsGearGemInstItem final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataUtility_IsGearGemInstItem) == 0x000004, "Wrong alignment on DataUtility_IsGearGemInstItem");
static_assert(sizeof(DataUtility_IsGearGemInstItem) == 0x000008, "Wrong size on DataUtility_IsGearGemInstItem");
static_assert(offsetof(DataUtility_IsGearGemInstItem, Type_id) == 0x000000, "Member 'DataUtility_IsGearGemInstItem::Type_id' has a wrong offset!");
static_assert(offsetof(DataUtility_IsGearGemInstItem, ReturnValue) == 0x000004, "Member 'DataUtility_IsGearGemInstItem::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.IsRoleItem
// 0x0008 (0x0008 - 0x0000)
struct DataUtility_IsRoleItem final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataUtility_IsRoleItem) == 0x000004, "Wrong alignment on DataUtility_IsRoleItem");
static_assert(sizeof(DataUtility_IsRoleItem) == 0x000008, "Wrong size on DataUtility_IsRoleItem");
static_assert(offsetof(DataUtility_IsRoleItem, Type_id) == 0x000000, "Member 'DataUtility_IsRoleItem::Type_id' has a wrong offset!");
static_assert(offsetof(DataUtility_IsRoleItem, ReturnValue) == 0x000004, "Member 'DataUtility_IsRoleItem::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.IsSkinItem
// 0x0008 (0x0008 - 0x0000)
struct DataUtility_IsSkinItem final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataUtility_IsSkinItem) == 0x000004, "Wrong alignment on DataUtility_IsSkinItem");
static_assert(sizeof(DataUtility_IsSkinItem) == 0x000008, "Wrong size on DataUtility_IsSkinItem");
static_assert(offsetof(DataUtility_IsSkinItem, Type_id) == 0x000000, "Member 'DataUtility_IsSkinItem::Type_id' has a wrong offset!");
static_assert(offsetof(DataUtility_IsSkinItem, ReturnValue) == 0x000004, "Member 'DataUtility_IsSkinItem::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.IsVirtualItem
// 0x0008 (0x0008 - 0x0000)
struct DataUtility_IsVirtualItem final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataUtility_IsVirtualItem) == 0x000004, "Wrong alignment on DataUtility_IsVirtualItem");
static_assert(sizeof(DataUtility_IsVirtualItem) == 0x000008, "Wrong size on DataUtility_IsVirtualItem");
static_assert(offsetof(DataUtility_IsVirtualItem, Type_id) == 0x000000, "Member 'DataUtility_IsVirtualItem::Type_id' has a wrong offset!");
static_assert(offsetof(DataUtility_IsVirtualItem, ReturnValue) == 0x000004, "Member 'DataUtility_IsVirtualItem::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetAbilitySetClass
// 0x0010 (0x0010 - 0x0000)
struct DataUtility_GetAbilitySetClass final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ULyraAbilitySet*                  ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetAbilitySetClass) == 0x000008, "Wrong alignment on DataUtility_GetAbilitySetClass");
static_assert(sizeof(DataUtility_GetAbilitySetClass) == 0x000010, "Wrong size on DataUtility_GetAbilitySetClass");
static_assert(offsetof(DataUtility_GetAbilitySetClass, Type) == 0x000000, "Member 'DataUtility_GetAbilitySetClass::Type' has a wrong offset!");
static_assert(offsetof(DataUtility_GetAbilitySetClass, ReturnValue) == 0x000008, "Member 'DataUtility_GetAbilitySetClass::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetEquipClass
// 0x0010 (0x0010 - 0x0000)
struct DataUtility_GetEquipClass final
{
public:
	int32                                         EquipId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTgfEquipmentDefinition>    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetEquipClass) == 0x000008, "Wrong alignment on DataUtility_GetEquipClass");
static_assert(sizeof(DataUtility_GetEquipClass) == 0x000010, "Wrong size on DataUtility_GetEquipClass");
static_assert(offsetof(DataUtility_GetEquipClass, EquipId) == 0x000000, "Member 'DataUtility_GetEquipClass::EquipId' has a wrong offset!");
static_assert(offsetof(DataUtility_GetEquipClass, ReturnValue) == 0x000008, "Member 'DataUtility_GetEquipClass::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetItemClass
// 0x0010 (0x0010 - 0x0000)
struct DataUtility_GetItemClass final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTgfInventoryItemDefinition> ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetItemClass) == 0x000008, "Wrong alignment on DataUtility_GetItemClass");
static_assert(sizeof(DataUtility_GetItemClass) == 0x000010, "Wrong size on DataUtility_GetItemClass");
static_assert(offsetof(DataUtility_GetItemClass, ItemId) == 0x000000, "Member 'DataUtility_GetItemClass::ItemId' has a wrong offset!");
static_assert(offsetof(DataUtility_GetItemClass, ReturnValue) == 0x000008, "Member 'DataUtility_GetItemClass::ReturnValue' has a wrong offset!");

// Function LyraGame.DataUtility.GetItemSkinSetClass
// 0x0010 (0x0010 - 0x0000)
struct DataUtility_GetItemSkinSetClass final
{
public:
	int32                                         SkinId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UItemSkinSet*                     ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataUtility_GetItemSkinSetClass) == 0x000008, "Wrong alignment on DataUtility_GetItemSkinSetClass");
static_assert(sizeof(DataUtility_GetItemSkinSetClass) == 0x000010, "Wrong size on DataUtility_GetItemSkinSetClass");
static_assert(offsetof(DataUtility_GetItemSkinSetClass, SkinId) == 0x000000, "Member 'DataUtility_GetItemSkinSetClass::SkinId' has a wrong offset!");
static_assert(offsetof(DataUtility_GetItemSkinSetClass, ReturnValue) == 0x000008, "Member 'DataUtility_GetItemSkinSetClass::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfSoulEnergyAttributeSet.OnRep_CurSoulEnergy
// 0x0010 (0x0010 - 0x0000)
struct TgfSoulEnergyAttributeSet_OnRep_CurSoulEnergy final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSoulEnergyAttributeSet_OnRep_CurSoulEnergy) == 0x000008, "Wrong alignment on TgfSoulEnergyAttributeSet_OnRep_CurSoulEnergy");
static_assert(sizeof(TgfSoulEnergyAttributeSet_OnRep_CurSoulEnergy) == 0x000010, "Wrong size on TgfSoulEnergyAttributeSet_OnRep_CurSoulEnergy");
static_assert(offsetof(TgfSoulEnergyAttributeSet_OnRep_CurSoulEnergy, OldValue) == 0x000000, "Member 'TgfSoulEnergyAttributeSet_OnRep_CurSoulEnergy::OldValue' has a wrong offset!");

// Function LyraGame.TgfSoulEnergyAttributeSet.OnRep_MaxSoulEnergyBase
// 0x0010 (0x0010 - 0x0000)
struct TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyBase) == 0x000008, "Wrong alignment on TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyBase");
static_assert(sizeof(TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyBase) == 0x000010, "Wrong size on TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyBase");
static_assert(offsetof(TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyBase, OldValue) == 0x000000, "Member 'TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfSoulEnergyAttributeSet.OnRep_MaxSoulEnergyPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyPercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyPercent) == 0x000008, "Wrong alignment on TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyPercent");
static_assert(sizeof(TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyPercent) == 0x000010, "Wrong size on TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyPercent");
static_assert(offsetof(TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyPercent, OldValue) == 0x000000, "Member 'TgfSoulEnergyAttributeSet_OnRep_MaxSoulEnergyPercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfSoulEnergyAttributeSet.OnRep_SoulEnergyGenerateRate
// 0x0010 (0x0010 - 0x0000)
struct TgfSoulEnergyAttributeSet_OnRep_SoulEnergyGenerateRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyGenerateRate) == 0x000008, "Wrong alignment on TgfSoulEnergyAttributeSet_OnRep_SoulEnergyGenerateRate");
static_assert(sizeof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyGenerateRate) == 0x000010, "Wrong size on TgfSoulEnergyAttributeSet_OnRep_SoulEnergyGenerateRate");
static_assert(offsetof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyGenerateRate, OldValue) == 0x000000, "Member 'TgfSoulEnergyAttributeSet_OnRep_SoulEnergyGenerateRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfSoulEnergyAttributeSet.OnRep_SoulEnergyOnHit
// 0x0010 (0x0010 - 0x0000)
struct TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHit final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHit) == 0x000008, "Wrong alignment on TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHit");
static_assert(sizeof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHit) == 0x000010, "Wrong size on TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHit");
static_assert(offsetof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHit, OldValue) == 0x000000, "Member 'TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHit::OldValue' has a wrong offset!");

// Function LyraGame.TgfSoulEnergyAttributeSet.OnRep_SoulEnergyOnHurt
// 0x0010 (0x0010 - 0x0000)
struct TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHurt final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHurt) == 0x000008, "Wrong alignment on TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHurt");
static_assert(sizeof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHurt) == 0x000010, "Wrong size on TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHurt");
static_assert(offsetof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHurt, OldValue) == 0x000000, "Member 'TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnHurt::OldValue' has a wrong offset!");

// Function LyraGame.TgfSoulEnergyAttributeSet.OnRep_SoulEnergyOnKill
// 0x0010 (0x0010 - 0x0000)
struct TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnKill final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnKill) == 0x000008, "Wrong alignment on TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnKill");
static_assert(sizeof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnKill) == 0x000010, "Wrong size on TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnKill");
static_assert(offsetof(TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnKill, OldValue) == 0x000000, "Member 'TgfSoulEnergyAttributeSet_OnRep_SoulEnergyOnKill::OldValue' has a wrong offset!");

// Function LyraGame.TgfSoulEnergyAttributeSet.GetMaxSoulEnergyFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfSoulEnergyAttributeSet_GetMaxSoulEnergyFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSoulEnergyAttributeSet_GetMaxSoulEnergyFinal) == 0x000004, "Wrong alignment on TgfSoulEnergyAttributeSet_GetMaxSoulEnergyFinal");
static_assert(sizeof(TgfSoulEnergyAttributeSet_GetMaxSoulEnergyFinal) == 0x000004, "Wrong size on TgfSoulEnergyAttributeSet_GetMaxSoulEnergyFinal");
static_assert(offsetof(TgfSoulEnergyAttributeSet_GetMaxSoulEnergyFinal, ReturnValue) == 0x000000, "Member 'TgfSoulEnergyAttributeSet_GetMaxSoulEnergyFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfSoulEnergyAttributeSet.IsFullSEP
// 0x0001 (0x0001 - 0x0000)
struct TgfSoulEnergyAttributeSet_IsFullSEP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSoulEnergyAttributeSet_IsFullSEP) == 0x000001, "Wrong alignment on TgfSoulEnergyAttributeSet_IsFullSEP");
static_assert(sizeof(TgfSoulEnergyAttributeSet_IsFullSEP) == 0x000001, "Wrong size on TgfSoulEnergyAttributeSet_IsFullSEP");
static_assert(offsetof(TgfSoulEnergyAttributeSet_IsFullSEP, ReturnValue) == 0x000000, "Member 'TgfSoulEnergyAttributeSet_IsFullSEP::ReturnValue' has a wrong offset!");

// Function LyraGame.DeathZone.BroadCastSpawnPortalMessage
// 0x000C (0x000C - 0x0000)
struct DeathZone_BroadCastSpawnPortalMessage final
{
public:
	int32                                         BluePortalSpawned;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RedPortalSpawned;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowPortalSpawned;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathZone_BroadCastSpawnPortalMessage) == 0x000004, "Wrong alignment on DeathZone_BroadCastSpawnPortalMessage");
static_assert(sizeof(DeathZone_BroadCastSpawnPortalMessage) == 0x00000C, "Wrong size on DeathZone_BroadCastSpawnPortalMessage");
static_assert(offsetof(DeathZone_BroadCastSpawnPortalMessage, BluePortalSpawned) == 0x000000, "Member 'DeathZone_BroadCastSpawnPortalMessage::BluePortalSpawned' has a wrong offset!");
static_assert(offsetof(DeathZone_BroadCastSpawnPortalMessage, RedPortalSpawned) == 0x000004, "Member 'DeathZone_BroadCastSpawnPortalMessage::RedPortalSpawned' has a wrong offset!");
static_assert(offsetof(DeathZone_BroadCastSpawnPortalMessage, ShadowPortalSpawned) == 0x000008, "Member 'DeathZone_BroadCastSpawnPortalMessage::ShadowPortalSpawned' has a wrong offset!");

// Function LyraGame.DeathZone.Generate
// 0x0010 (0x0010 - 0x0000)
struct DeathZone_Generate final
{
public:
	TArray<struct FDeathZoneDiscRuntimeInstance>  OutDiscs;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathZone_Generate) == 0x000008, "Wrong alignment on DeathZone_Generate");
static_assert(sizeof(DeathZone_Generate) == 0x000010, "Wrong size on DeathZone_Generate");
static_assert(offsetof(DeathZone_Generate, OutDiscs) == 0x000000, "Member 'DeathZone_Generate::OutDiscs' has a wrong offset!");

// Function LyraGame.DeathZone.GetSpawnPortalInfo
// 0x0030 (0x0030 - 0x0000)
struct DeathZone_GetSpawnPortalInfo final
{
public:
	struct FSpawnedPortalsInfo                    ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathZone_GetSpawnPortalInfo) == 0x000008, "Wrong alignment on DeathZone_GetSpawnPortalInfo");
static_assert(sizeof(DeathZone_GetSpawnPortalInfo) == 0x000030, "Wrong size on DeathZone_GetSpawnPortalInfo");
static_assert(offsetof(DeathZone_GetSpawnPortalInfo, ReturnValue) == 0x000000, "Member 'DeathZone_GetSpawnPortalInfo::ReturnValue' has a wrong offset!");

// Function LyraGame.DeathZone.PickPortalPlacementsWithinRange
// 0x0070 (0x0070 - 0x0000)
struct DeathZone_PickPortalPlacementsWithinRange final
{
public:
	int32                                         NumPortals;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CircleOrigin;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CircleRadius;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        PotentialPlacements;                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  bPortalVisited;                                    // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPortalSpawnInfo>               OutPortalInfos;                                    // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SpawnTime;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EPortalType                                   PortalType;                                        // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeathZone_PickPortalPlacementsWithinRange) == 0x000008, "Wrong alignment on DeathZone_PickPortalPlacementsWithinRange");
static_assert(sizeof(DeathZone_PickPortalPlacementsWithinRange) == 0x000070, "Wrong size on DeathZone_PickPortalPlacementsWithinRange");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRange, NumPortals) == 0x000000, "Member 'DeathZone_PickPortalPlacementsWithinRange::NumPortals' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRange, CircleOrigin) == 0x000008, "Member 'DeathZone_PickPortalPlacementsWithinRange::CircleOrigin' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRange, CircleRadius) == 0x000020, "Member 'DeathZone_PickPortalPlacementsWithinRange::CircleRadius' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRange, PotentialPlacements) == 0x000028, "Member 'DeathZone_PickPortalPlacementsWithinRange::PotentialPlacements' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRange, bPortalVisited) == 0x000038, "Member 'DeathZone_PickPortalPlacementsWithinRange::bPortalVisited' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRange, OutPortalInfos) == 0x000048, "Member 'DeathZone_PickPortalPlacementsWithinRange::OutPortalInfos' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRange, SpawnTime) == 0x000058, "Member 'DeathZone_PickPortalPlacementsWithinRange::SpawnTime' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRange, PortalType) == 0x000068, "Member 'DeathZone_PickPortalPlacementsWithinRange::PortalType' has a wrong offset!");

// Function LyraGame.DeathZone.PickPortalPlacementsWithinRangeWithProbability
// 0x0070 (0x0070 - 0x0000)
struct DeathZone_PickPortalPlacementsWithinRangeWithProbability final
{
public:
	int32                                         NumPortals;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CircleOrigin;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CircleRadius;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        PotentialPlacements;                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  bPortalVisited;                                    // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPortalSpawnInfo>               OutPortalInfos;                                    // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPortalSpawnConfig>             SpawnTime;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EPortalType                                   PortalType;                                        // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeathZone_PickPortalPlacementsWithinRangeWithProbability) == 0x000008, "Wrong alignment on DeathZone_PickPortalPlacementsWithinRangeWithProbability");
static_assert(sizeof(DeathZone_PickPortalPlacementsWithinRangeWithProbability) == 0x000070, "Wrong size on DeathZone_PickPortalPlacementsWithinRangeWithProbability");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithProbability, NumPortals) == 0x000000, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithProbability::NumPortals' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithProbability, CircleOrigin) == 0x000008, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithProbability::CircleOrigin' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithProbability, CircleRadius) == 0x000020, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithProbability::CircleRadius' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithProbability, PotentialPlacements) == 0x000028, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithProbability::PotentialPlacements' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithProbability, bPortalVisited) == 0x000038, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithProbability::bPortalVisited' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithProbability, OutPortalInfos) == 0x000048, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithProbability::OutPortalInfos' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithProbability, SpawnTime) == 0x000058, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithProbability::SpawnTime' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithProbability, PortalType) == 0x000068, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithProbability::PortalType' has a wrong offset!");

// Function LyraGame.DeathZone.PickPortalPlacementsWithinRangeWithSpawnConfigs
// 0x0068 (0x0068 - 0x0000)
struct DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs final
{
public:
	int32                                         NumPortals;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CircleOrigin;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CircleRadius;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        PotentialPlacements;                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  bPortalVisited;                                    // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPortalSpawnInfo>               OutPortalInfos;                                    // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPortalSpawnConfig>             SpawnConfigs;                                      // 0x0058(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs) == 0x000008, "Wrong alignment on DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs");
static_assert(sizeof(DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs) == 0x000068, "Wrong size on DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs, NumPortals) == 0x000000, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs::NumPortals' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs, CircleOrigin) == 0x000008, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs::CircleOrigin' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs, CircleRadius) == 0x000020, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs::CircleRadius' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs, PotentialPlacements) == 0x000028, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs::PotentialPlacements' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs, bPortalVisited) == 0x000038, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs::bPortalVisited' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs, OutPortalInfos) == 0x000048, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs::OutPortalInfos' has a wrong offset!");
static_assert(offsetof(DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs, SpawnConfigs) == 0x000058, "Member 'DeathZone_PickPortalPlacementsWithinRangeWithSpawnConfigs::SpawnConfigs' has a wrong offset!");

// Function LyraGame.DeathZone.SpawnOnePortalOrScroll
// 0x0080 (0x0080 - 0x0000)
struct DeathZone_SpawnOnePortalOrScroll final
{
public:
	EPortalType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     PortalClass;                                       // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathZone_SpawnOnePortalOrScroll) == 0x000010, "Wrong alignment on DeathZone_SpawnOnePortalOrScroll");
static_assert(sizeof(DeathZone_SpawnOnePortalOrScroll) == 0x000080, "Wrong size on DeathZone_SpawnOnePortalOrScroll");
static_assert(offsetof(DeathZone_SpawnOnePortalOrScroll, Type) == 0x000000, "Member 'DeathZone_SpawnOnePortalOrScroll::Type' has a wrong offset!");
static_assert(offsetof(DeathZone_SpawnOnePortalOrScroll, Transform) == 0x000010, "Member 'DeathZone_SpawnOnePortalOrScroll::Transform' has a wrong offset!");
static_assert(offsetof(DeathZone_SpawnOnePortalOrScroll, PortalClass) == 0x000070, "Member 'DeathZone_SpawnOnePortalOrScroll::PortalClass' has a wrong offset!");
static_assert(offsetof(DeathZone_SpawnOnePortalOrScroll, ReturnValue) == 0x000078, "Member 'DeathZone_SpawnOnePortalOrScroll::ReturnValue' has a wrong offset!");

// Function LyraGame.DeathZone.SpawnPortalAndScrolls
// 0x0038 (0x0038 - 0x0000)
struct DeathZone_SpawnPortalAndScrolls final
{
public:
	struct FDeathZoneDiscRuntimeInstance          CurrentDisc;                                       // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        CurrentTimeDuration;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathZone_SpawnPortalAndScrolls) == 0x000008, "Wrong alignment on DeathZone_SpawnPortalAndScrolls");
static_assert(sizeof(DeathZone_SpawnPortalAndScrolls) == 0x000038, "Wrong size on DeathZone_SpawnPortalAndScrolls");
static_assert(offsetof(DeathZone_SpawnPortalAndScrolls, CurrentDisc) == 0x000000, "Member 'DeathZone_SpawnPortalAndScrolls::CurrentDisc' has a wrong offset!");
static_assert(offsetof(DeathZone_SpawnPortalAndScrolls, CurrentTimeDuration) == 0x000030, "Member 'DeathZone_SpawnPortalAndScrolls::CurrentTimeDuration' has a wrong offset!");

// Function LyraGame.DeathZone.GetAllPortalLocations
// 0x0018 (0x0018 - 0x0000)
struct DeathZone_GetAllPortalLocations final
{
public:
	EPortalType                                   PortalType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathZone_GetAllPortalLocations) == 0x000008, "Wrong alignment on DeathZone_GetAllPortalLocations");
static_assert(sizeof(DeathZone_GetAllPortalLocations) == 0x000018, "Wrong size on DeathZone_GetAllPortalLocations");
static_assert(offsetof(DeathZone_GetAllPortalLocations, PortalType) == 0x000000, "Member 'DeathZone_GetAllPortalLocations::PortalType' has a wrong offset!");
static_assert(offsetof(DeathZone_GetAllPortalLocations, ReturnValue) == 0x000008, "Member 'DeathZone_GetAllPortalLocations::ReturnValue' has a wrong offset!");

// Function LyraGame.DeathZone.GetAvailablePortalNums
// 0x0008 (0x0008 - 0x0000)
struct DeathZone_GetAvailablePortalNums final
{
public:
	EPortalType                                   PortalType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathZone_GetAvailablePortalNums) == 0x000004, "Wrong alignment on DeathZone_GetAvailablePortalNums");
static_assert(sizeof(DeathZone_GetAvailablePortalNums) == 0x000008, "Wrong size on DeathZone_GetAvailablePortalNums");
static_assert(offsetof(DeathZone_GetAvailablePortalNums, PortalType) == 0x000000, "Member 'DeathZone_GetAvailablePortalNums::PortalType' has a wrong offset!");
static_assert(offsetof(DeathZone_GetAvailablePortalNums, ReturnValue) == 0x000004, "Member 'DeathZone_GetAvailablePortalNums::ReturnValue' has a wrong offset!");

// Function LyraGame.DeathZone.GetDiscDefinitionByIndex
// 0x0098 (0x0098 - 0x0000)
struct DeathZone_GetDiscDefinitionByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDeathZoneDisc                         ReturnValue;                                       // 0x0008(0x0090)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathZone_GetDiscDefinitionByIndex) == 0x000008, "Wrong alignment on DeathZone_GetDiscDefinitionByIndex");
static_assert(sizeof(DeathZone_GetDiscDefinitionByIndex) == 0x000098, "Wrong size on DeathZone_GetDiscDefinitionByIndex");
static_assert(offsetof(DeathZone_GetDiscDefinitionByIndex, Param_Index) == 0x000000, "Member 'DeathZone_GetDiscDefinitionByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(DeathZone_GetDiscDefinitionByIndex, ReturnValue) == 0x000008, "Member 'DeathZone_GetDiscDefinitionByIndex::ReturnValue' has a wrong offset!");

// Function LyraGame.DeathZone.RandomPointInCircle
// 0x0028 (0x0028 - 0x0000)
struct DeathZone_RandomPointInCircle final
{
public:
	struct FVector2D                              Center;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathZone_RandomPointInCircle) == 0x000008, "Wrong alignment on DeathZone_RandomPointInCircle");
static_assert(sizeof(DeathZone_RandomPointInCircle) == 0x000028, "Wrong size on DeathZone_RandomPointInCircle");
static_assert(offsetof(DeathZone_RandomPointInCircle, Center) == 0x000000, "Member 'DeathZone_RandomPointInCircle::Center' has a wrong offset!");
static_assert(offsetof(DeathZone_RandomPointInCircle, Radius) == 0x000010, "Member 'DeathZone_RandomPointInCircle::Radius' has a wrong offset!");
static_assert(offsetof(DeathZone_RandomPointInCircle, ReturnValue) == 0x000018, "Member 'DeathZone_RandomPointInCircle::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility_MontageCamera.OnDeactivateEventReceived
// 0x00B0 (0x00B0 - 0x0000)
struct TgfGameplayAbility_MontageCamera_OnDeactivateEventReceived final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_MontageCamera_OnDeactivateEventReceived) == 0x000008, "Wrong alignment on TgfGameplayAbility_MontageCamera_OnDeactivateEventReceived");
static_assert(sizeof(TgfGameplayAbility_MontageCamera_OnDeactivateEventReceived) == 0x0000B0, "Wrong size on TgfGameplayAbility_MontageCamera_OnDeactivateEventReceived");
static_assert(offsetof(TgfGameplayAbility_MontageCamera_OnDeactivateEventReceived, Payload) == 0x000000, "Member 'TgfGameplayAbility_MontageCamera_OnDeactivateEventReceived::Payload' has a wrong offset!");

// Function LyraGame.AsyncAction_ExperienceReady.WaitForExperienceReady
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_ExperienceReady_WaitForExperienceReady final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_ExperienceReady*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_ExperienceReady_WaitForExperienceReady) == 0x000008, "Wrong alignment on AsyncAction_ExperienceReady_WaitForExperienceReady");
static_assert(sizeof(AsyncAction_ExperienceReady_WaitForExperienceReady) == 0x000010, "Wrong size on AsyncAction_ExperienceReady_WaitForExperienceReady");
static_assert(offsetof(AsyncAction_ExperienceReady_WaitForExperienceReady, WorldContextObject) == 0x000000, "Member 'AsyncAction_ExperienceReady_WaitForExperienceReady::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_ExperienceReady_WaitForExperienceReady, ReturnValue) == 0x000008, "Member 'AsyncAction_ExperienceReady_WaitForExperienceReady::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorWidgetInterface.BindIndicator
// 0x0008 (0x0008 - 0x0000)
struct IndicatorWidgetInterface_BindIndicator final
{
public:
	class UIndicatorDescriptor*                   Indicator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorWidgetInterface_BindIndicator) == 0x000008, "Wrong alignment on IndicatorWidgetInterface_BindIndicator");
static_assert(sizeof(IndicatorWidgetInterface_BindIndicator) == 0x000008, "Wrong size on IndicatorWidgetInterface_BindIndicator");
static_assert(offsetof(IndicatorWidgetInterface_BindIndicator, Indicator) == 0x000000, "Member 'IndicatorWidgetInterface_BindIndicator::Indicator' has a wrong offset!");

// Function LyraGame.IndicatorWidgetInterface.UnbindIndicator
// 0x0008 (0x0008 - 0x0000)
struct IndicatorWidgetInterface_UnbindIndicator final
{
public:
	const class UIndicatorDescriptor*             Indicator;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorWidgetInterface_UnbindIndicator) == 0x000008, "Wrong alignment on IndicatorWidgetInterface_UnbindIndicator");
static_assert(sizeof(IndicatorWidgetInterface_UnbindIndicator) == 0x000008, "Wrong size on IndicatorWidgetInterface_UnbindIndicator");
static_assert(offsetof(IndicatorWidgetInterface_UnbindIndicator, Indicator) == 0x000000, "Member 'IndicatorWidgetInterface_UnbindIndicator::Indicator' has a wrong offset!");

// Function LyraGame.TgfEnviromentEquipmentSubsystem.InsertToTorchArray
// 0x0008 (0x0008 - 0x0000)
struct TgfEnviromentEquipmentSubsystem_InsertToTorchArray final
{
public:
	class AActor*                                 TorchActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEnviromentEquipmentSubsystem_InsertToTorchArray) == 0x000008, "Wrong alignment on TgfEnviromentEquipmentSubsystem_InsertToTorchArray");
static_assert(sizeof(TgfEnviromentEquipmentSubsystem_InsertToTorchArray) == 0x000008, "Wrong size on TgfEnviromentEquipmentSubsystem_InsertToTorchArray");
static_assert(offsetof(TgfEnviromentEquipmentSubsystem_InsertToTorchArray, TorchActor) == 0x000000, "Member 'TgfEnviromentEquipmentSubsystem_InsertToTorchArray::TorchActor' has a wrong offset!");

// Function LyraGame.LyraNumberPopComponent.AddNumberPop
// 0x0060 (0x0060 - 0x0000)
struct LyraNumberPopComponent_AddNumberPop final
{
public:
	struct FLyraNumberPopRequest                  NewRequest;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraNumberPopComponent_AddNumberPop) == 0x000008, "Wrong alignment on LyraNumberPopComponent_AddNumberPop");
static_assert(sizeof(LyraNumberPopComponent_AddNumberPop) == 0x000060, "Wrong size on LyraNumberPopComponent_AddNumberPop");
static_assert(offsetof(LyraNumberPopComponent_AddNumberPop, NewRequest) == 0x000000, "Member 'LyraNumberPopComponent_AddNumberPop::NewRequest' has a wrong offset!");

// Function LyraGame.InGameTaskFunctionLibrary.InGameReportClientTaskProgressValue
// 0x0018 (0x0018 - 0x0000)
struct InGameTaskFunctionLibrary_InGameReportClientTaskProgressValue final
{
public:
	ETGFInGameRookieTaskType                      RookieTaskType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameTaskFunctionLibrary_InGameReportClientTaskProgressValue) == 0x000008, "Wrong alignment on InGameTaskFunctionLibrary_InGameReportClientTaskProgressValue");
static_assert(sizeof(InGameTaskFunctionLibrary_InGameReportClientTaskProgressValue) == 0x000018, "Wrong size on InGameTaskFunctionLibrary_InGameReportClientTaskProgressValue");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportClientTaskProgressValue, RookieTaskType) == 0x000000, "Member 'InGameTaskFunctionLibrary_InGameReportClientTaskProgressValue::RookieTaskType' has a wrong offset!");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportClientTaskProgressValue, Value) == 0x000008, "Member 'InGameTaskFunctionLibrary_InGameReportClientTaskProgressValue::Value' has a wrong offset!");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportClientTaskProgressValue, ReturnValue) == 0x000010, "Member 'InGameTaskFunctionLibrary_InGameReportClientTaskProgressValue::ReturnValue' has a wrong offset!");

// Function LyraGame.InGameTaskFunctionLibrary.InGameReportClientTaskProgressValueWithCharacterParam
// 0x0020 (0x0020 - 0x0000)
struct InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam final
{
public:
	ETGFInGameRookieTaskType                      RookieTaskType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         InCharacter;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam) == 0x000008, "Wrong alignment on InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam");
static_assert(sizeof(InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam) == 0x000020, "Wrong size on InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam, RookieTaskType) == 0x000000, "Member 'InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam::RookieTaskType' has a wrong offset!");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam, Value) == 0x000008, "Member 'InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam::Value' has a wrong offset!");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam, InCharacter) == 0x000010, "Member 'InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam::InCharacter' has a wrong offset!");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam, ReturnValue) == 0x000018, "Member 'InGameTaskFunctionLibrary_InGameReportClientTaskProgressValueWithCharacterParam::ReturnValue' has a wrong offset!");

// Function LyraGame.InGameTaskFunctionLibrary.InGameReportDeathTask
// 0x0018 (0x0018 - 0x0000)
struct InGameTaskFunctionLibrary_InGameReportDeathTask final
{
public:
	class AActor*                                 Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Death;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameTaskFunctionLibrary_InGameReportDeathTask) == 0x000008, "Wrong alignment on InGameTaskFunctionLibrary_InGameReportDeathTask");
static_assert(sizeof(InGameTaskFunctionLibrary_InGameReportDeathTask) == 0x000018, "Wrong size on InGameTaskFunctionLibrary_InGameReportDeathTask");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportDeathTask, Killer) == 0x000000, "Member 'InGameTaskFunctionLibrary_InGameReportDeathTask::Killer' has a wrong offset!");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportDeathTask, Death) == 0x000008, "Member 'InGameTaskFunctionLibrary_InGameReportDeathTask::Death' has a wrong offset!");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportDeathTask, ReturnValue) == 0x000010, "Member 'InGameTaskFunctionLibrary_InGameReportDeathTask::ReturnValue' has a wrong offset!");

// Function LyraGame.InGameTaskFunctionLibrary.InGameReportInteractorTask
// 0x0020 (0x0020 - 0x0000)
struct InGameTaskFunctionLibrary_InGameReportInteractorTask final
{
public:
	bool                                          bIsLootable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Destroyer;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractorTarget;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameTaskFunctionLibrary_InGameReportInteractorTask) == 0x000008, "Wrong alignment on InGameTaskFunctionLibrary_InGameReportInteractorTask");
static_assert(sizeof(InGameTaskFunctionLibrary_InGameReportInteractorTask) == 0x000020, "Wrong size on InGameTaskFunctionLibrary_InGameReportInteractorTask");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportInteractorTask, bIsLootable) == 0x000000, "Member 'InGameTaskFunctionLibrary_InGameReportInteractorTask::bIsLootable' has a wrong offset!");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportInteractorTask, Destroyer) == 0x000008, "Member 'InGameTaskFunctionLibrary_InGameReportInteractorTask::Destroyer' has a wrong offset!");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportInteractorTask, InteractorTarget) == 0x000010, "Member 'InGameTaskFunctionLibrary_InGameReportInteractorTask::InteractorTarget' has a wrong offset!");
static_assert(offsetof(InGameTaskFunctionLibrary_InGameReportInteractorTask, ReturnValue) == 0x000018, "Member 'InGameTaskFunctionLibrary_InGameReportInteractorTask::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayEventAsyncAction.WaitForGameplayEventToCharaOrInteractor
// 0x0020 (0x0020 - 0x0000)
struct TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfGameplayEventAsyncAction*           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor) == 0x000008, "Wrong alignment on TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor");
static_assert(sizeof(TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor) == 0x000020, "Wrong size on TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor");
static_assert(offsetof(TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor, WorldContext) == 0x000000, "Member 'TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor::WorldContext' has a wrong offset!");
static_assert(offsetof(TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor, Actor) == 0x000008, "Member 'TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor::Actor' has a wrong offset!");
static_assert(offsetof(TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor, Tag) == 0x000010, "Member 'TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor::Tag' has a wrong offset!");
static_assert(offsetof(TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor, ReturnValue) == 0x000018, "Member 'TgfGameplayEventAsyncAction_WaitForGameplayEventToCharaOrInteractor::ReturnValue' has a wrong offset!");

// DelegateFunction LyraGame.TgfGameplayEventAsyncAction.EventReceivedDelegate__DelegateSignature
// 0x00B8 (0x00B8 - 0x0000)
struct TgfGameplayEventAsyncAction_EventReceivedDelegate__DelegateSignature final
{
public:
	struct FGameplayTag                           ReceivedTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     Payload;                                           // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayEventAsyncAction_EventReceivedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on TgfGameplayEventAsyncAction_EventReceivedDelegate__DelegateSignature");
static_assert(sizeof(TgfGameplayEventAsyncAction_EventReceivedDelegate__DelegateSignature) == 0x0000B8, "Wrong size on TgfGameplayEventAsyncAction_EventReceivedDelegate__DelegateSignature");
static_assert(offsetof(TgfGameplayEventAsyncAction_EventReceivedDelegate__DelegateSignature, ReceivedTag) == 0x000000, "Member 'TgfGameplayEventAsyncAction_EventReceivedDelegate__DelegateSignature::ReceivedTag' has a wrong offset!");
static_assert(offsetof(TgfGameplayEventAsyncAction_EventReceivedDelegate__DelegateSignature, Payload) == 0x000008, "Member 'TgfGameplayEventAsyncAction_EventReceivedDelegate__DelegateSignature::Payload' has a wrong offset!");

// Function LyraGame.LyraEquipmentInstance.GetEquipDef
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentInstance_GetEquipDef final
{
public:
	bool                                          NeedSkined;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULyraEquipmentDefinition>   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentInstance_GetEquipDef) == 0x000008, "Wrong alignment on LyraEquipmentInstance_GetEquipDef");
static_assert(sizeof(LyraEquipmentInstance_GetEquipDef) == 0x000010, "Wrong size on LyraEquipmentInstance_GetEquipDef");
static_assert(offsetof(LyraEquipmentInstance_GetEquipDef, NeedSkined) == 0x000000, "Member 'LyraEquipmentInstance_GetEquipDef::NeedSkined' has a wrong offset!");
static_assert(offsetof(LyraEquipmentInstance_GetEquipDef, ReturnValue) == 0x000008, "Member 'LyraEquipmentInstance_GetEquipDef::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentInstance.GetEquipId
// 0x0004 (0x0004 - 0x0000)
struct LyraEquipmentInstance_GetEquipId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentInstance_GetEquipId) == 0x000004, "Wrong alignment on LyraEquipmentInstance_GetEquipId");
static_assert(sizeof(LyraEquipmentInstance_GetEquipId) == 0x000004, "Wrong size on LyraEquipmentInstance_GetEquipId");
static_assert(offsetof(LyraEquipmentInstance_GetEquipId, ReturnValue) == 0x000000, "Member 'LyraEquipmentInstance_GetEquipId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentInstance.GetEquipSubtype
// 0x0001 (0x0001 - 0x0000)
struct LyraEquipmentInstance_GetEquipSubtype final
{
public:
	ETgfEquipSubType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentInstance_GetEquipSubtype) == 0x000001, "Wrong alignment on LyraEquipmentInstance_GetEquipSubtype");
static_assert(sizeof(LyraEquipmentInstance_GetEquipSubtype) == 0x000001, "Wrong size on LyraEquipmentInstance_GetEquipSubtype");
static_assert(offsetof(LyraEquipmentInstance_GetEquipSubtype, ReturnValue) == 0x000000, "Member 'LyraEquipmentInstance_GetEquipSubtype::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentInstance.GetEquipType
// 0x0001 (0x0001 - 0x0000)
struct LyraEquipmentInstance_GetEquipType final
{
public:
	ETgfWeaponEquipType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentInstance_GetEquipType) == 0x000001, "Wrong alignment on LyraEquipmentInstance_GetEquipType");
static_assert(sizeof(LyraEquipmentInstance_GetEquipType) == 0x000001, "Wrong size on LyraEquipmentInstance_GetEquipType");
static_assert(offsetof(LyraEquipmentInstance_GetEquipType, ReturnValue) == 0x000000, "Member 'LyraEquipmentInstance_GetEquipType::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentInstance.GetInventory
// 0x0008 (0x0008 - 0x0000)
struct LyraEquipmentInstance_GetInventory final
{
public:
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentInstance_GetInventory) == 0x000008, "Wrong alignment on LyraEquipmentInstance_GetInventory");
static_assert(sizeof(LyraEquipmentInstance_GetInventory) == 0x000008, "Wrong size on LyraEquipmentInstance_GetInventory");
static_assert(offsetof(LyraEquipmentInstance_GetInventory, ReturnValue) == 0x000000, "Member 'LyraEquipmentInstance_GetInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentInstance.GetOwnerAbilitySystem
// 0x0008 (0x0008 - 0x0000)
struct LyraEquipmentInstance_GetOwnerAbilitySystem final
{
public:
	class ULyraAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentInstance_GetOwnerAbilitySystem) == 0x000008, "Wrong alignment on LyraEquipmentInstance_GetOwnerAbilitySystem");
static_assert(sizeof(LyraEquipmentInstance_GetOwnerAbilitySystem) == 0x000008, "Wrong size on LyraEquipmentInstance_GetOwnerAbilitySystem");
static_assert(offsetof(LyraEquipmentInstance_GetOwnerAbilitySystem, ReturnValue) == 0x000000, "Member 'LyraEquipmentInstance_GetOwnerAbilitySystem::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentInstance.GetPawn
// 0x0008 (0x0008 - 0x0000)
struct LyraEquipmentInstance_GetPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentInstance_GetPawn) == 0x000008, "Wrong alignment on LyraEquipmentInstance_GetPawn");
static_assert(sizeof(LyraEquipmentInstance_GetPawn) == 0x000008, "Wrong size on LyraEquipmentInstance_GetPawn");
static_assert(offsetof(LyraEquipmentInstance_GetPawn, ReturnValue) == 0x000000, "Member 'LyraEquipmentInstance_GetPawn::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentInstance.GetTypedPawn
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentInstance_GetTypedPawn final
{
public:
	TSubclassOf<class APawn>                      PawnType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentInstance_GetTypedPawn) == 0x000008, "Wrong alignment on LyraEquipmentInstance_GetTypedPawn");
static_assert(sizeof(LyraEquipmentInstance_GetTypedPawn) == 0x000010, "Wrong size on LyraEquipmentInstance_GetTypedPawn");
static_assert(offsetof(LyraEquipmentInstance_GetTypedPawn, PawnType) == 0x000000, "Member 'LyraEquipmentInstance_GetTypedPawn::PawnType' has a wrong offset!");
static_assert(offsetof(LyraEquipmentInstance_GetTypedPawn, ReturnValue) == 0x000008, "Member 'LyraEquipmentInstance_GetTypedPawn::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentInstance.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct LyraEquipmentInstance_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentInstance_IsEquipped) == 0x000001, "Wrong alignment on LyraEquipmentInstance_IsEquipped");
static_assert(sizeof(LyraEquipmentInstance_IsEquipped) == 0x000001, "Wrong size on LyraEquipmentInstance_IsEquipped");
static_assert(offsetof(LyraEquipmentInstance_IsEquipped, ReturnValue) == 0x000000, "Member 'LyraEquipmentInstance_IsEquipped::ReturnValue' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.AddItemDefinitionToEquipmentWithSlot
// 0x0018 (0x0018 - 0x0000)
struct ItemFunctionLibrary_AddItemDefinitionToEquipmentWithSlot final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfEquipmentManagerComponent*          TargetEquipmentComp;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemFunctionLibrary_AddItemDefinitionToEquipmentWithSlot) == 0x000008, "Wrong alignment on ItemFunctionLibrary_AddItemDefinitionToEquipmentWithSlot");
static_assert(sizeof(ItemFunctionLibrary_AddItemDefinitionToEquipmentWithSlot) == 0x000018, "Wrong size on ItemFunctionLibrary_AddItemDefinitionToEquipmentWithSlot");
static_assert(offsetof(ItemFunctionLibrary_AddItemDefinitionToEquipmentWithSlot, ItemDefinition) == 0x000000, "Member 'ItemFunctionLibrary_AddItemDefinitionToEquipmentWithSlot::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_AddItemDefinitionToEquipmentWithSlot, TargetEquipmentComp) == 0x000008, "Member 'ItemFunctionLibrary_AddItemDefinitionToEquipmentWithSlot::TargetEquipmentComp' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_AddItemDefinitionToEquipmentWithSlot, Slot) == 0x000010, "Member 'ItemFunctionLibrary_AddItemDefinitionToEquipmentWithSlot::Slot' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.CheckDistance
// 0x0028 (0x0028 - 0x0000)
struct ItemFunctionLibrary_CheckDistance final
{
public:
	TArray<class UTgfInventoryManagerComponent*>  InventoryCompList;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentCompList;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemFunctionLibrary_CheckDistance) == 0x000008, "Wrong alignment on ItemFunctionLibrary_CheckDistance");
static_assert(sizeof(ItemFunctionLibrary_CheckDistance) == 0x000028, "Wrong size on ItemFunctionLibrary_CheckDistance");
static_assert(offsetof(ItemFunctionLibrary_CheckDistance, InventoryCompList) == 0x000000, "Member 'ItemFunctionLibrary_CheckDistance::InventoryCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_CheckDistance, EquipmentCompList) == 0x000010, "Member 'ItemFunctionLibrary_CheckDistance::EquipmentCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_CheckDistance, Distance) == 0x000020, "Member 'ItemFunctionLibrary_CheckDistance::Distance' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_CheckDistance, ReturnValue) == 0x000024, "Member 'ItemFunctionLibrary_CheckDistance::ReturnValue' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.DiscardItem
// 0x0050 (0x0050 - 0x0000)
struct ItemFunctionLibrary_DiscardItem final
{
public:
	struct FTgfInventoryOperationItemSource       Source;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfInventoryManagerComponent*>  InventoryCompList;                                 // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentCompList;                                 // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_DiscardItem) == 0x000008, "Wrong alignment on ItemFunctionLibrary_DiscardItem");
static_assert(sizeof(ItemFunctionLibrary_DiscardItem) == 0x000050, "Wrong size on ItemFunctionLibrary_DiscardItem");
static_assert(offsetof(ItemFunctionLibrary_DiscardItem, Source) == 0x000000, "Member 'ItemFunctionLibrary_DiscardItem::Source' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_DiscardItem, InventoryCompList) == 0x000030, "Member 'ItemFunctionLibrary_DiscardItem::InventoryCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_DiscardItem, EquipmentCompList) == 0x000040, "Member 'ItemFunctionLibrary_DiscardItem::EquipmentCompList' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.DropItem
// 0x0058 (0x0058 - 0x0000)
struct ItemFunctionLibrary_DropItem final
{
public:
	struct FTgfInventoryOperationItemSource       Source;                                            // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         Character;                                         // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTgfInventoryManagerComponent*>  InventoryCompList;                                 // 0x0038(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentCompList;                                 // 0x0048(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_DropItem) == 0x000008, "Wrong alignment on ItemFunctionLibrary_DropItem");
static_assert(sizeof(ItemFunctionLibrary_DropItem) == 0x000058, "Wrong size on ItemFunctionLibrary_DropItem");
static_assert(offsetof(ItemFunctionLibrary_DropItem, Source) == 0x000000, "Member 'ItemFunctionLibrary_DropItem::Source' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_DropItem, Character) == 0x000030, "Member 'ItemFunctionLibrary_DropItem::Character' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_DropItem, InventoryCompList) == 0x000038, "Member 'ItemFunctionLibrary_DropItem::InventoryCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_DropItem, EquipmentCompList) == 0x000048, "Member 'ItemFunctionLibrary_DropItem::EquipmentCompList' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.DropItemToWorld
// 0x0018 (0x0018 - 0x0000)
struct ItemFunctionLibrary_DropItemToWorld final
{
public:
	class ULyraInventoryItemInstance*             Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ALyraCharacter*                   Character;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemFunctionLibrary_DropItemToWorld) == 0x000008, "Wrong alignment on ItemFunctionLibrary_DropItemToWorld");
static_assert(sizeof(ItemFunctionLibrary_DropItemToWorld) == 0x000018, "Wrong size on ItemFunctionLibrary_DropItemToWorld");
static_assert(offsetof(ItemFunctionLibrary_DropItemToWorld, Item) == 0x000000, "Member 'ItemFunctionLibrary_DropItemToWorld::Item' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_DropItemToWorld, Character) == 0x000008, "Member 'ItemFunctionLibrary_DropItemToWorld::Character' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_DropItemToWorld, ReturnValue) == 0x000010, "Member 'ItemFunctionLibrary_DropItemToWorld::ReturnValue' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.ExchangeEquipsWithSlots
// 0x0030 (0x0030 - 0x0000)
struct ItemFunctionLibrary_ExchangeEquipsWithSlots final
{
public:
	class UTgfEquipmentManagerComponent*          TargetEquipmentComp;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot1;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot2;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTgfInventoryManagerComponent*>  InventoryCompList;                                 // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentCompList;                                 // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_ExchangeEquipsWithSlots) == 0x000008, "Wrong alignment on ItemFunctionLibrary_ExchangeEquipsWithSlots");
static_assert(sizeof(ItemFunctionLibrary_ExchangeEquipsWithSlots) == 0x000030, "Wrong size on ItemFunctionLibrary_ExchangeEquipsWithSlots");
static_assert(offsetof(ItemFunctionLibrary_ExchangeEquipsWithSlots, TargetEquipmentComp) == 0x000000, "Member 'ItemFunctionLibrary_ExchangeEquipsWithSlots::TargetEquipmentComp' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeEquipsWithSlots, Slot1) == 0x000008, "Member 'ItemFunctionLibrary_ExchangeEquipsWithSlots::Slot1' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeEquipsWithSlots, Slot2) == 0x000009, "Member 'ItemFunctionLibrary_ExchangeEquipsWithSlots::Slot2' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeEquipsWithSlots, InventoryCompList) == 0x000010, "Member 'ItemFunctionLibrary_ExchangeEquipsWithSlots::InventoryCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeEquipsWithSlots, EquipmentCompList) == 0x000020, "Member 'ItemFunctionLibrary_ExchangeEquipsWithSlots::EquipmentCompList' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.ExchangeItemsToInventory
// 0x0030 (0x0030 - 0x0000)
struct ItemFunctionLibrary_ExchangeItemsToInventory final
{
public:
	TArray<struct FTgfInventoryOperationItemSource> Source;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfInventoryManagerComponent*>  InventoryCompList;                                 // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentCompList;                                 // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_ExchangeItemsToInventory) == 0x000008, "Wrong alignment on ItemFunctionLibrary_ExchangeItemsToInventory");
static_assert(sizeof(ItemFunctionLibrary_ExchangeItemsToInventory) == 0x000030, "Wrong size on ItemFunctionLibrary_ExchangeItemsToInventory");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemsToInventory, Source) == 0x000000, "Member 'ItemFunctionLibrary_ExchangeItemsToInventory::Source' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemsToInventory, InventoryCompList) == 0x000010, "Member 'ItemFunctionLibrary_ExchangeItemsToInventory::InventoryCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemsToInventory, EquipmentCompList) == 0x000020, "Member 'ItemFunctionLibrary_ExchangeItemsToInventory::EquipmentCompList' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.ExchangeItemToEquipmentFromLoot
// 0x0068 (0x0068 - 0x0000)
struct ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot final
{
public:
	struct FTgfInventoryOperationItemSource       Source;                                            // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTgfEquipmentManagerComponent*          TargetEquipmentComp;                               // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 TargetSlot;                                        // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfInventoryManagerComponent*          TargetInventoryComp;                               // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryManagerComponent*          SourceInventoryComp;                               // 0x0048(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfEquipmentManagerComponent*          SourceEquipmentComp;                               // 0x0050(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              FromPoint;                                         // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 FromEquipSlot;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot) == 0x000008, "Wrong alignment on ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot");
static_assert(sizeof(ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot) == 0x000068, "Wrong size on ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot, Source) == 0x000000, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot::Source' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot, TargetEquipmentComp) == 0x000030, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot::TargetEquipmentComp' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot, TargetSlot) == 0x000038, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot::TargetSlot' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot, TargetInventoryComp) == 0x000040, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot::TargetInventoryComp' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot, SourceInventoryComp) == 0x000048, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot::SourceInventoryComp' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot, SourceEquipmentComp) == 0x000050, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot::SourceEquipmentComp' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot, FromPoint) == 0x000058, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot::FromPoint' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot, FromEquipSlot) == 0x000060, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentFromLoot::FromEquipSlot' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.ExchangeItemToEquipmentWithSlot
// 0x0070 (0x0070 - 0x0000)
struct ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot final
{
public:
	struct FTgfInventoryOperationItemSource       Source;                                            // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTgfEquipmentManagerComponent*          TargetEquipmentComp;                               // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfEquipmentManagerComponent*          SourceEquipmentComp;                               // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryManagerComponent*          SourceInventoryComp;                               // 0x0048(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTgfInventoryManagerComponent*>  InventoryCompList;                                 // 0x0050(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentCompList;                                 // 0x0060(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot) == 0x000008, "Wrong alignment on ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot");
static_assert(sizeof(ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot) == 0x000070, "Wrong size on ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot, Source) == 0x000000, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot::Source' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot, TargetEquipmentComp) == 0x000030, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot::TargetEquipmentComp' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot, Slot) == 0x000038, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot::Slot' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot, SourceEquipmentComp) == 0x000040, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot::SourceEquipmentComp' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot, SourceInventoryComp) == 0x000048, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot::SourceInventoryComp' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot, InventoryCompList) == 0x000050, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot::InventoryCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot, EquipmentCompList) == 0x000060, "Member 'ItemFunctionLibrary_ExchangeItemToEquipmentWithSlot::EquipmentCompList' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.ExchangeItemToInventory
// 0x0060 (0x0060 - 0x0000)
struct ItemFunctionLibrary_ExchangeItemToInventory final
{
public:
	struct FTgfInventoryOperationItemSource       Source;                                            // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTgfInventoryManagerComponent*          TargetInventoryComp;                               // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTgfInventoryManagerComponent*>  InventoryCompList;                                 // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentCompList;                                 // 0x0050(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_ExchangeItemToInventory) == 0x000008, "Wrong alignment on ItemFunctionLibrary_ExchangeItemToInventory");
static_assert(sizeof(ItemFunctionLibrary_ExchangeItemToInventory) == 0x000060, "Wrong size on ItemFunctionLibrary_ExchangeItemToInventory");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToInventory, Source) == 0x000000, "Member 'ItemFunctionLibrary_ExchangeItemToInventory::Source' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToInventory, TargetInventoryComp) == 0x000030, "Member 'ItemFunctionLibrary_ExchangeItemToInventory::TargetInventoryComp' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToInventory, InventoryType) == 0x000038, "Member 'ItemFunctionLibrary_ExchangeItemToInventory::InventoryType' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToInventory, InventoryCompList) == 0x000040, "Member 'ItemFunctionLibrary_ExchangeItemToInventory::InventoryCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_ExchangeItemToInventory, EquipmentCompList) == 0x000050, "Member 'ItemFunctionLibrary_ExchangeItemToInventory::EquipmentCompList' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.FindItemInCompList
// 0x0030 (0x0030 - 0x0000)
struct ItemFunctionLibrary_FindItemInCompList final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTgfInventoryManagerComponent*>  InventoryCompList;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentCompList;                                 // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemFunctionLibrary_FindItemInCompList) == 0x000008, "Wrong alignment on ItemFunctionLibrary_FindItemInCompList");
static_assert(sizeof(ItemFunctionLibrary_FindItemInCompList) == 0x000030, "Wrong size on ItemFunctionLibrary_FindItemInCompList");
static_assert(offsetof(ItemFunctionLibrary_FindItemInCompList, ItemInstance) == 0x000000, "Member 'ItemFunctionLibrary_FindItemInCompList::ItemInstance' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_FindItemInCompList, InventoryCompList) == 0x000008, "Member 'ItemFunctionLibrary_FindItemInCompList::InventoryCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_FindItemInCompList, EquipmentCompList) == 0x000018, "Member 'ItemFunctionLibrary_FindItemInCompList::EquipmentCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_FindItemInCompList, ReturnValue) == 0x000028, "Member 'ItemFunctionLibrary_FindItemInCompList::ReturnValue' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.GetAllCompList
// 0x0040 (0x0040 - 0x0000)
struct ItemFunctionLibrary_GetAllCompList final
{
public:
	TArray<class ALyraCharacter*>                 CharacterList;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ATgfStaticInteraction*>          InteractorList;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UTgfInventoryManagerComponent*>  InventoryCompList;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentCompList;                                 // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_GetAllCompList) == 0x000008, "Wrong alignment on ItemFunctionLibrary_GetAllCompList");
static_assert(sizeof(ItemFunctionLibrary_GetAllCompList) == 0x000040, "Wrong size on ItemFunctionLibrary_GetAllCompList");
static_assert(offsetof(ItemFunctionLibrary_GetAllCompList, CharacterList) == 0x000000, "Member 'ItemFunctionLibrary_GetAllCompList::CharacterList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_GetAllCompList, InteractorList) == 0x000010, "Member 'ItemFunctionLibrary_GetAllCompList::InteractorList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_GetAllCompList, InventoryCompList) == 0x000020, "Member 'ItemFunctionLibrary_GetAllCompList::InventoryCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_GetAllCompList, EquipmentCompList) == 0x000030, "Member 'ItemFunctionLibrary_GetAllCompList::EquipmentCompList' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.GetInventoryLootState
// 0x0010 (0x0010 - 0x0000)
struct ItemFunctionLibrary_GetInventoryLootState final
{
public:
	struct FTgfInventoryLootState                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_GetInventoryLootState) == 0x000008, "Wrong alignment on ItemFunctionLibrary_GetInventoryLootState");
static_assert(sizeof(ItemFunctionLibrary_GetInventoryLootState) == 0x000010, "Wrong size on ItemFunctionLibrary_GetInventoryLootState");
static_assert(offsetof(ItemFunctionLibrary_GetInventoryLootState, ReturnValue) == 0x000000, "Member 'ItemFunctionLibrary_GetInventoryLootState::ReturnValue' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.GetLootVaildDistance
// 0x0004 (0x0004 - 0x0000)
struct ItemFunctionLibrary_GetLootVaildDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_GetLootVaildDistance) == 0x000004, "Wrong alignment on ItemFunctionLibrary_GetLootVaildDistance");
static_assert(sizeof(ItemFunctionLibrary_GetLootVaildDistance) == 0x000004, "Wrong size on ItemFunctionLibrary_GetLootVaildDistance");
static_assert(offsetof(ItemFunctionLibrary_GetLootVaildDistance, ReturnValue) == 0x000000, "Member 'ItemFunctionLibrary_GetLootVaildDistance::ReturnValue' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.MergeGemToItem
// 0x0048 (0x0048 - 0x0000)
struct ItemFunctionLibrary_MergeGemToItem final
{
public:
	class UTgfInventoryItemInstance*              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryItemInstance*              GemItem;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraAbilitySystemComponent*            OwnerABS;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTgfInventoryManagerComponent*>  InventoryCompList;                                 // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentCompList;                                 // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETgfEquipAttrParseType                        AttrParseType;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraEquipmentInstance*                 Equipment;                                         // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_MergeGemToItem) == 0x000008, "Wrong alignment on ItemFunctionLibrary_MergeGemToItem");
static_assert(sizeof(ItemFunctionLibrary_MergeGemToItem) == 0x000048, "Wrong size on ItemFunctionLibrary_MergeGemToItem");
static_assert(offsetof(ItemFunctionLibrary_MergeGemToItem, Item) == 0x000000, "Member 'ItemFunctionLibrary_MergeGemToItem::Item' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_MergeGemToItem, GemItem) == 0x000008, "Member 'ItemFunctionLibrary_MergeGemToItem::GemItem' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_MergeGemToItem, OwnerABS) == 0x000010, "Member 'ItemFunctionLibrary_MergeGemToItem::OwnerABS' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_MergeGemToItem, InventoryCompList) == 0x000018, "Member 'ItemFunctionLibrary_MergeGemToItem::InventoryCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_MergeGemToItem, EquipmentCompList) == 0x000028, "Member 'ItemFunctionLibrary_MergeGemToItem::EquipmentCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_MergeGemToItem, AttrParseType) == 0x000038, "Member 'ItemFunctionLibrary_MergeGemToItem::AttrParseType' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_MergeGemToItem, Equipment) == 0x000040, "Member 'ItemFunctionLibrary_MergeGemToItem::Equipment' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.MergeItemInstance
// 0x0058 (0x0058 - 0x0000)
struct ItemFunctionLibrary_MergeItemInstance final
{
public:
	class ULyraInventoryItemInstance*             TargetItemInstance;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfInventoryOperationItemSource       Source;                                            // 0x0008(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfInventoryManagerComponent*>  InventoryCompList;                                 // 0x0038(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentCompList;                                 // 0x0048(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_MergeItemInstance) == 0x000008, "Wrong alignment on ItemFunctionLibrary_MergeItemInstance");
static_assert(sizeof(ItemFunctionLibrary_MergeItemInstance) == 0x000058, "Wrong size on ItemFunctionLibrary_MergeItemInstance");
static_assert(offsetof(ItemFunctionLibrary_MergeItemInstance, TargetItemInstance) == 0x000000, "Member 'ItemFunctionLibrary_MergeItemInstance::TargetItemInstance' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_MergeItemInstance, Source) == 0x000008, "Member 'ItemFunctionLibrary_MergeItemInstance::Source' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_MergeItemInstance, InventoryCompList) == 0x000038, "Member 'ItemFunctionLibrary_MergeItemInstance::InventoryCompList' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_MergeItemInstance, EquipmentCompList) == 0x000048, "Member 'ItemFunctionLibrary_MergeItemInstance::EquipmentCompList' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.MoveAnotherCharacterEquipmentAndInventoryToSelf
// 0x0010 (0x0010 - 0x0000)
struct ItemFunctionLibrary_MoveAnotherCharacterEquipmentAndInventoryToSelf final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearEquipped;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemFunctionLibrary_MoveAnotherCharacterEquipmentAndInventoryToSelf) == 0x000008, "Wrong alignment on ItemFunctionLibrary_MoveAnotherCharacterEquipmentAndInventoryToSelf");
static_assert(sizeof(ItemFunctionLibrary_MoveAnotherCharacterEquipmentAndInventoryToSelf) == 0x000010, "Wrong size on ItemFunctionLibrary_MoveAnotherCharacterEquipmentAndInventoryToSelf");
static_assert(offsetof(ItemFunctionLibrary_MoveAnotherCharacterEquipmentAndInventoryToSelf, Target) == 0x000000, "Member 'ItemFunctionLibrary_MoveAnotherCharacterEquipmentAndInventoryToSelf::Target' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_MoveAnotherCharacterEquipmentAndInventoryToSelf, bClearEquipped) == 0x000008, "Member 'ItemFunctionLibrary_MoveAnotherCharacterEquipmentAndInventoryToSelf::bClearEquipped' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.PickUpItem
// 0x0018 (0x0018 - 0x0000)
struct ItemFunctionLibrary_PickUpItem final
{
public:
	TSubclassOf<class UTgfInventoryItemDefinition> ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemFunctionLibrary_PickUpItem) == 0x000008, "Wrong alignment on ItemFunctionLibrary_PickUpItem");
static_assert(sizeof(ItemFunctionLibrary_PickUpItem) == 0x000018, "Wrong size on ItemFunctionLibrary_PickUpItem");
static_assert(offsetof(ItemFunctionLibrary_PickUpItem, ItemDefinition) == 0x000000, "Member 'ItemFunctionLibrary_PickUpItem::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_PickUpItem, ItemInstance) == 0x000008, "Member 'ItemFunctionLibrary_PickUpItem::ItemInstance' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_PickUpItem, ReturnValue) == 0x000010, "Member 'ItemFunctionLibrary_PickUpItem::ReturnValue' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.SetStealTarget
// 0x0008 (0x0008 - 0x0000)
struct ItemFunctionLibrary_SetStealTarget final
{
public:
	class ALyraCharacter*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_SetStealTarget) == 0x000008, "Wrong alignment on ItemFunctionLibrary_SetStealTarget");
static_assert(sizeof(ItemFunctionLibrary_SetStealTarget) == 0x000008, "Wrong size on ItemFunctionLibrary_SetStealTarget");
static_assert(offsetof(ItemFunctionLibrary_SetStealTarget, Target) == 0x000000, "Member 'ItemFunctionLibrary_SetStealTarget::Target' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.StealItemSimpleResultNotifyClient
// 0x0018 (0x0018 - 0x0000)
struct ItemFunctionLibrary_StealItemSimpleResultNotifyClient final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReasonTxt;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemFunctionLibrary_StealItemSimpleResultNotifyClient) == 0x000008, "Wrong alignment on ItemFunctionLibrary_StealItemSimpleResultNotifyClient");
static_assert(sizeof(ItemFunctionLibrary_StealItemSimpleResultNotifyClient) == 0x000018, "Wrong size on ItemFunctionLibrary_StealItemSimpleResultNotifyClient");
static_assert(offsetof(ItemFunctionLibrary_StealItemSimpleResultNotifyClient, Success) == 0x000000, "Member 'ItemFunctionLibrary_StealItemSimpleResultNotifyClient::Success' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_StealItemSimpleResultNotifyClient, ReasonTxt) == 0x000008, "Member 'ItemFunctionLibrary_StealItemSimpleResultNotifyClient::ReasonTxt' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.CanRemoveEquipment
// 0x0030 (0x0030 - 0x0000)
struct ItemFunctionLibrary_CanRemoveEquipment final
{
public:
	class ULyraEquipmentInstance*                 EquipmentInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTgfEquipmentManagerComponent*    EquipmentManager;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutFailReason;                                     // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemFunctionLibrary_CanRemoveEquipment) == 0x000008, "Wrong alignment on ItemFunctionLibrary_CanRemoveEquipment");
static_assert(sizeof(ItemFunctionLibrary_CanRemoveEquipment) == 0x000030, "Wrong size on ItemFunctionLibrary_CanRemoveEquipment");
static_assert(offsetof(ItemFunctionLibrary_CanRemoveEquipment, EquipmentInstance) == 0x000000, "Member 'ItemFunctionLibrary_CanRemoveEquipment::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_CanRemoveEquipment, EquipmentManager) == 0x000008, "Member 'ItemFunctionLibrary_CanRemoveEquipment::EquipmentManager' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_CanRemoveEquipment, OutFailReason) == 0x000010, "Member 'ItemFunctionLibrary_CanRemoveEquipment::OutFailReason' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_CanRemoveEquipment, ReturnValue) == 0x000028, "Member 'ItemFunctionLibrary_CanRemoveEquipment::ReturnValue' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.CanRemoveItemFromEquipmentList
// 0x0038 (0x0038 - 0x0000)
struct ItemFunctionLibrary_CanRemoveItemFromEquipmentList final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentManagerComponent*>  EquipmentManagers;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                   OutFailReason;                                     // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemFunctionLibrary_CanRemoveItemFromEquipmentList) == 0x000008, "Wrong alignment on ItemFunctionLibrary_CanRemoveItemFromEquipmentList");
static_assert(sizeof(ItemFunctionLibrary_CanRemoveItemFromEquipmentList) == 0x000038, "Wrong size on ItemFunctionLibrary_CanRemoveItemFromEquipmentList");
static_assert(offsetof(ItemFunctionLibrary_CanRemoveItemFromEquipmentList, ItemInstance) == 0x000000, "Member 'ItemFunctionLibrary_CanRemoveItemFromEquipmentList::ItemInstance' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_CanRemoveItemFromEquipmentList, EquipmentManagers) == 0x000008, "Member 'ItemFunctionLibrary_CanRemoveItemFromEquipmentList::EquipmentManagers' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_CanRemoveItemFromEquipmentList, OutFailReason) == 0x000018, "Member 'ItemFunctionLibrary_CanRemoveItemFromEquipmentList::OutFailReason' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_CanRemoveItemFromEquipmentList, ReturnValue) == 0x000030, "Member 'ItemFunctionLibrary_CanRemoveItemFromEquipmentList::ReturnValue' has a wrong offset!");

// Function LyraGame.ItemFunctionLibrary.FindBestEquipSlotForItem
// 0x0018 (0x0018 - 0x0000)
struct ItemFunctionLibrary_FindBestEquipSlotForItem final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTgfEquipmentManagerComponent*    EquipmentManager;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAutoFillConfig;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemFunctionLibrary_FindBestEquipSlotForItem) == 0x000008, "Wrong alignment on ItemFunctionLibrary_FindBestEquipSlotForItem");
static_assert(sizeof(ItemFunctionLibrary_FindBestEquipSlotForItem) == 0x000018, "Wrong size on ItemFunctionLibrary_FindBestEquipSlotForItem");
static_assert(offsetof(ItemFunctionLibrary_FindBestEquipSlotForItem, ItemInstance) == 0x000000, "Member 'ItemFunctionLibrary_FindBestEquipSlotForItem::ItemInstance' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_FindBestEquipSlotForItem, EquipmentManager) == 0x000008, "Member 'ItemFunctionLibrary_FindBestEquipSlotForItem::EquipmentManager' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_FindBestEquipSlotForItem, bUseAutoFillConfig) == 0x000010, "Member 'ItemFunctionLibrary_FindBestEquipSlotForItem::bUseAutoFillConfig' has a wrong offset!");
static_assert(offsetof(ItemFunctionLibrary_FindBestEquipSlotForItem, ReturnValue) == 0x000011, "Member 'ItemFunctionLibrary_FindBestEquipSlotForItem::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.StaticCreateInstance
// 0x0028 (0x0028 - 0x0000)
struct LyraInventoryManagerComponent_StaticCreateInstance final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemDefinition> ItemClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULyraInventoryItemInstance> InstanceType;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryManagerComponent_StaticCreateInstance) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_StaticCreateInstance");
static_assert(sizeof(LyraInventoryManagerComponent_StaticCreateInstance) == 0x000028, "Wrong size on LyraInventoryManagerComponent_StaticCreateInstance");
static_assert(offsetof(LyraInventoryManagerComponent_StaticCreateInstance, Owner) == 0x000000, "Member 'LyraInventoryManagerComponent_StaticCreateInstance::Owner' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_StaticCreateInstance, ItemClass) == 0x000008, "Member 'LyraInventoryManagerComponent_StaticCreateInstance::ItemClass' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_StaticCreateInstance, StackCount) == 0x000010, "Member 'LyraInventoryManagerComponent_StaticCreateInstance::StackCount' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_StaticCreateInstance, InstanceType) == 0x000018, "Member 'LyraInventoryManagerComponent_StaticCreateInstance::InstanceType' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_StaticCreateInstance, ReturnValue) == 0x000020, "Member 'LyraInventoryManagerComponent_StaticCreateInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.AddItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_AddItemDefinition final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumToAdd;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryManagerComponent_AddItemDefinition) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_AddItemDefinition");
static_assert(sizeof(LyraInventoryManagerComponent_AddItemDefinition) == 0x000010, "Wrong size on LyraInventoryManagerComponent_AddItemDefinition");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemDefinition, ItemDef) == 0x000000, "Member 'LyraInventoryManagerComponent_AddItemDefinition::ItemDef' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemDefinition, InventoryType) == 0x000008, "Member 'LyraInventoryManagerComponent_AddItemDefinition::InventoryType' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemDefinition, NumToAdd) == 0x00000C, "Member 'LyraInventoryManagerComponent_AddItemDefinition::NumToAdd' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.AddItemDefinitionAuth
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_AddItemDefinitionAuth final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumToAdd;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryManagerComponent_AddItemDefinitionAuth) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_AddItemDefinitionAuth");
static_assert(sizeof(LyraInventoryManagerComponent_AddItemDefinitionAuth) == 0x000010, "Wrong size on LyraInventoryManagerComponent_AddItemDefinitionAuth");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemDefinitionAuth, ItemDef) == 0x000000, "Member 'LyraInventoryManagerComponent_AddItemDefinitionAuth::ItemDef' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemDefinitionAuth, InventoryType) == 0x000008, "Member 'LyraInventoryManagerComponent_AddItemDefinitionAuth::InventoryType' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemDefinitionAuth, NumToAdd) == 0x00000C, "Member 'LyraInventoryManagerComponent_AddItemDefinitionAuth::NumToAdd' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.AddItemInstance
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_AddItemInstance final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryManagerComponent_AddItemInstance) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_AddItemInstance");
static_assert(sizeof(LyraInventoryManagerComponent_AddItemInstance) == 0x000010, "Wrong size on LyraInventoryManagerComponent_AddItemInstance");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemInstance, ItemInstance) == 0x000000, "Member 'LyraInventoryManagerComponent_AddItemInstance::ItemInstance' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemInstance, InventoryType) == 0x000008, "Member 'LyraInventoryManagerComponent_AddItemInstance::InventoryType' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.AddItemInstanceAuth
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_AddItemInstanceAuth final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryManagerComponent_AddItemInstanceAuth) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_AddItemInstanceAuth");
static_assert(sizeof(LyraInventoryManagerComponent_AddItemInstanceAuth) == 0x000010, "Wrong size on LyraInventoryManagerComponent_AddItemInstanceAuth");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemInstanceAuth, ItemInstance) == 0x000000, "Member 'LyraInventoryManagerComponent_AddItemInstanceAuth::ItemInstance' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemInstanceAuth, InventoryType) == 0x000008, "Member 'LyraInventoryManagerComponent_AddItemInstanceAuth::InventoryType' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.AddItemInstanceWithAutoStack
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_AddItemInstanceWithAutoStack final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryManagerComponent_AddItemInstanceWithAutoStack) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_AddItemInstanceWithAutoStack");
static_assert(sizeof(LyraInventoryManagerComponent_AddItemInstanceWithAutoStack) == 0x000010, "Wrong size on LyraInventoryManagerComponent_AddItemInstanceWithAutoStack");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemInstanceWithAutoStack, ItemInstance) == 0x000000, "Member 'LyraInventoryManagerComponent_AddItemInstanceWithAutoStack::ItemInstance' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_AddItemInstanceWithAutoStack, InventoryType) == 0x000008, "Member 'LyraInventoryManagerComponent_AddItemInstanceWithAutoStack::InventoryType' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.RemoveItemByDefinition
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_RemoveItemByDefinition final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumToConsume;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryManagerComponent_RemoveItemByDefinition) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_RemoveItemByDefinition");
static_assert(sizeof(LyraInventoryManagerComponent_RemoveItemByDefinition) == 0x000010, "Wrong size on LyraInventoryManagerComponent_RemoveItemByDefinition");
static_assert(offsetof(LyraInventoryManagerComponent_RemoveItemByDefinition, ItemDef) == 0x000000, "Member 'LyraInventoryManagerComponent_RemoveItemByDefinition::ItemDef' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_RemoveItemByDefinition, NumToConsume) == 0x000008, "Member 'LyraInventoryManagerComponent_RemoveItemByDefinition::NumToConsume' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.RemoveItemByDefinitionAuth
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_RemoveItemByDefinitionAuth final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumToConsume;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryManagerComponent_RemoveItemByDefinitionAuth) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_RemoveItemByDefinitionAuth");
static_assert(sizeof(LyraInventoryManagerComponent_RemoveItemByDefinitionAuth) == 0x000010, "Wrong size on LyraInventoryManagerComponent_RemoveItemByDefinitionAuth");
static_assert(offsetof(LyraInventoryManagerComponent_RemoveItemByDefinitionAuth, ItemDef) == 0x000000, "Member 'LyraInventoryManagerComponent_RemoveItemByDefinitionAuth::ItemDef' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_RemoveItemByDefinitionAuth, NumToConsume) == 0x000008, "Member 'LyraInventoryManagerComponent_RemoveItemByDefinitionAuth::NumToConsume' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.RemoveItemInstance
// 0x0008 (0x0008 - 0x0000)
struct LyraInventoryManagerComponent_RemoveItemInstance final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryManagerComponent_RemoveItemInstance) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_RemoveItemInstance");
static_assert(sizeof(LyraInventoryManagerComponent_RemoveItemInstance) == 0x000008, "Wrong size on LyraInventoryManagerComponent_RemoveItemInstance");
static_assert(offsetof(LyraInventoryManagerComponent_RemoveItemInstance, ItemInstance) == 0x000000, "Member 'LyraInventoryManagerComponent_RemoveItemInstance::ItemInstance' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.UpdateItemInstance
// 0x0008 (0x0008 - 0x0000)
struct LyraInventoryManagerComponent_UpdateItemInstance final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryManagerComponent_UpdateItemInstance) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_UpdateItemInstance");
static_assert(sizeof(LyraInventoryManagerComponent_UpdateItemInstance) == 0x000008, "Wrong size on LyraInventoryManagerComponent_UpdateItemInstance");
static_assert(offsetof(LyraInventoryManagerComponent_UpdateItemInstance, ItemInstance) == 0x000000, "Member 'LyraInventoryManagerComponent_UpdateItemInstance::ItemInstance' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.CanAddItemDefinition
// 0x0018 (0x0018 - 0x0000)
struct LyraInventoryManagerComponent_CanAddItemDefinition final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryManagerComponent_CanAddItemDefinition) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_CanAddItemDefinition");
static_assert(sizeof(LyraInventoryManagerComponent_CanAddItemDefinition) == 0x000018, "Wrong size on LyraInventoryManagerComponent_CanAddItemDefinition");
static_assert(offsetof(LyraInventoryManagerComponent_CanAddItemDefinition, ItemDef) == 0x000000, "Member 'LyraInventoryManagerComponent_CanAddItemDefinition::ItemDef' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_CanAddItemDefinition, InventoryType) == 0x000008, "Member 'LyraInventoryManagerComponent_CanAddItemDefinition::InventoryType' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_CanAddItemDefinition, StackCount) == 0x00000C, "Member 'LyraInventoryManagerComponent_CanAddItemDefinition::StackCount' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_CanAddItemDefinition, ReturnValue) == 0x000010, "Member 'LyraInventoryManagerComponent_CanAddItemDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.CanAddItemInstance
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_CanAddItemInstance final
{
public:
	class ULyraInventoryItemInstance*             Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            LyraInventoryType;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryManagerComponent_CanAddItemInstance) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_CanAddItemInstance");
static_assert(sizeof(LyraInventoryManagerComponent_CanAddItemInstance) == 0x000010, "Wrong size on LyraInventoryManagerComponent_CanAddItemInstance");
static_assert(offsetof(LyraInventoryManagerComponent_CanAddItemInstance, Instance) == 0x000000, "Member 'LyraInventoryManagerComponent_CanAddItemInstance::Instance' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_CanAddItemInstance, LyraInventoryType) == 0x000008, "Member 'LyraInventoryManagerComponent_CanAddItemInstance::LyraInventoryType' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_CanAddItemInstance, ReturnValue) == 0x000009, "Member 'LyraInventoryManagerComponent_CanAddItemInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.CanAddItemInstances
// 0x0018 (0x0018 - 0x0000)
struct LyraInventoryManagerComponent_CanAddItemInstances final
{
public:
	TArray<class ULyraInventoryItemInstance*>     AddInstances;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ELyraInventoryType                            LyraInventoryType;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryManagerComponent_CanAddItemInstances) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_CanAddItemInstances");
static_assert(sizeof(LyraInventoryManagerComponent_CanAddItemInstances) == 0x000018, "Wrong size on LyraInventoryManagerComponent_CanAddItemInstances");
static_assert(offsetof(LyraInventoryManagerComponent_CanAddItemInstances, AddInstances) == 0x000000, "Member 'LyraInventoryManagerComponent_CanAddItemInstances::AddInstances' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_CanAddItemInstances, LyraInventoryType) == 0x000010, "Member 'LyraInventoryManagerComponent_CanAddItemInstances::LyraInventoryType' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_CanAddItemInstances, ReturnValue) == 0x000011, "Member 'LyraInventoryManagerComponent_CanAddItemInstances::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.CreateInstance
// 0x0018 (0x0018 - 0x0000)
struct LyraInventoryManagerComponent_CreateInstance final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryManagerComponent_CreateInstance) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_CreateInstance");
static_assert(sizeof(LyraInventoryManagerComponent_CreateInstance) == 0x000018, "Wrong size on LyraInventoryManagerComponent_CreateInstance");
static_assert(offsetof(LyraInventoryManagerComponent_CreateInstance, ItemClass) == 0x000000, "Member 'LyraInventoryManagerComponent_CreateInstance::ItemClass' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_CreateInstance, StackCount) == 0x000008, "Member 'LyraInventoryManagerComponent_CreateInstance::StackCount' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_CreateInstance, ReturnValue) == 0x000010, "Member 'LyraInventoryManagerComponent_CreateInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.FindFirstItemByDefinition
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_FindFirstItemByDefinition final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryManagerComponent_FindFirstItemByDefinition) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_FindFirstItemByDefinition");
static_assert(sizeof(LyraInventoryManagerComponent_FindFirstItemByDefinition) == 0x000010, "Wrong size on LyraInventoryManagerComponent_FindFirstItemByDefinition");
static_assert(offsetof(LyraInventoryManagerComponent_FindFirstItemByDefinition, ItemDef) == 0x000000, "Member 'LyraInventoryManagerComponent_FindFirstItemByDefinition::ItemDef' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_FindFirstItemByDefinition, ReturnValue) == 0x000008, "Member 'LyraInventoryManagerComponent_FindFirstItemByDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.GetAllEntries
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_GetAllEntries final
{
public:
	TArray<struct FLyraInventoryEntry>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryManagerComponent_GetAllEntries) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_GetAllEntries");
static_assert(sizeof(LyraInventoryManagerComponent_GetAllEntries) == 0x000010, "Wrong size on LyraInventoryManagerComponent_GetAllEntries");
static_assert(offsetof(LyraInventoryManagerComponent_GetAllEntries, ReturnValue) == 0x000000, "Member 'LyraInventoryManagerComponent_GetAllEntries::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.GetAllItems
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_GetAllItems final
{
public:
	TArray<class ULyraInventoryItemInstance*>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryManagerComponent_GetAllItems) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_GetAllItems");
static_assert(sizeof(LyraInventoryManagerComponent_GetAllItems) == 0x000010, "Wrong size on LyraInventoryManagerComponent_GetAllItems");
static_assert(offsetof(LyraInventoryManagerComponent_GetAllItems, ReturnValue) == 0x000000, "Member 'LyraInventoryManagerComponent_GetAllItems::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.GetAllSize
// 0x0004 (0x0004 - 0x0000)
struct LyraInventoryManagerComponent_GetAllSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryManagerComponent_GetAllSize) == 0x000004, "Wrong alignment on LyraInventoryManagerComponent_GetAllSize");
static_assert(sizeof(LyraInventoryManagerComponent_GetAllSize) == 0x000004, "Wrong size on LyraInventoryManagerComponent_GetAllSize");
static_assert(offsetof(LyraInventoryManagerComponent_GetAllSize, ReturnValue) == 0x000000, "Member 'LyraInventoryManagerComponent_GetAllSize::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.GetEntryIndexByItemInstance
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_GetEntryIndexByItemInstance final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryManagerComponent_GetEntryIndexByItemInstance) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_GetEntryIndexByItemInstance");
static_assert(sizeof(LyraInventoryManagerComponent_GetEntryIndexByItemInstance) == 0x000010, "Wrong size on LyraInventoryManagerComponent_GetEntryIndexByItemInstance");
static_assert(offsetof(LyraInventoryManagerComponent_GetEntryIndexByItemInstance, ItemInstance) == 0x000000, "Member 'LyraInventoryManagerComponent_GetEntryIndexByItemInstance::ItemInstance' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_GetEntryIndexByItemInstance, ReturnValue) == 0x000008, "Member 'LyraInventoryManagerComponent_GetEntryIndexByItemInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.GetItemByIndex
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_GetItemByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryManagerComponent_GetItemByIndex) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_GetItemByIndex");
static_assert(sizeof(LyraInventoryManagerComponent_GetItemByIndex) == 0x000010, "Wrong size on LyraInventoryManagerComponent_GetItemByIndex");
static_assert(offsetof(LyraInventoryManagerComponent_GetItemByIndex, Param_Index) == 0x000000, "Member 'LyraInventoryManagerComponent_GetItemByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_GetItemByIndex, ReturnValue) == 0x000008, "Member 'LyraInventoryManagerComponent_GetItemByIndex::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.GetTotalItemCountByDefinition
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryManagerComponent_GetTotalItemCountByDefinition final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryManagerComponent_GetTotalItemCountByDefinition) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_GetTotalItemCountByDefinition");
static_assert(sizeof(LyraInventoryManagerComponent_GetTotalItemCountByDefinition) == 0x000010, "Wrong size on LyraInventoryManagerComponent_GetTotalItemCountByDefinition");
static_assert(offsetof(LyraInventoryManagerComponent_GetTotalItemCountByDefinition, ItemDef) == 0x000000, "Member 'LyraInventoryManagerComponent_GetTotalItemCountByDefinition::ItemDef' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_GetTotalItemCountByDefinition, ReturnValue) == 0x000008, "Member 'LyraInventoryManagerComponent_GetTotalItemCountByDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryManagerComponent.HasEmptyInventory
// 0x0018 (0x0018 - 0x0000)
struct LyraInventoryManagerComponent_HasEmptyInventory final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Position;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryManagerComponent_HasEmptyInventory) == 0x000008, "Wrong alignment on LyraInventoryManagerComponent_HasEmptyInventory");
static_assert(sizeof(LyraInventoryManagerComponent_HasEmptyInventory) == 0x000018, "Wrong size on LyraInventoryManagerComponent_HasEmptyInventory");
static_assert(offsetof(LyraInventoryManagerComponent_HasEmptyInventory, ItemClass) == 0x000000, "Member 'LyraInventoryManagerComponent_HasEmptyInventory::ItemClass' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_HasEmptyInventory, Position) == 0x000008, "Member 'LyraInventoryManagerComponent_HasEmptyInventory::Position' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_HasEmptyInventory, InventoryType) == 0x000010, "Member 'LyraInventoryManagerComponent_HasEmptyInventory::InventoryType' has a wrong offset!");
static_assert(offsetof(LyraInventoryManagerComponent_HasEmptyInventory, ReturnValue) == 0x000011, "Member 'LyraInventoryManagerComponent_HasEmptyInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInGameServiceComponent.IsGameServerLogin
// 0x0001 (0x0001 - 0x0000)
struct TgfInGameServiceComponent_IsGameServerLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInGameServiceComponent_IsGameServerLogin) == 0x000001, "Wrong alignment on TgfInGameServiceComponent_IsGameServerLogin");
static_assert(sizeof(TgfInGameServiceComponent_IsGameServerLogin) == 0x000001, "Wrong size on TgfInGameServiceComponent_IsGameServerLogin");
static_assert(offsetof(TgfInGameServiceComponent_IsGameServerLogin, ReturnValue) == 0x000000, "Member 'TgfInGameServiceComponent_IsGameServerLogin::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAIController.GetDebugInfoString
// 0x0010 (0x0010 - 0x0000)
struct LyraAIController_GetDebugInfoString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAIController_GetDebugInfoString) == 0x000008, "Wrong alignment on LyraAIController_GetDebugInfoString");
static_assert(sizeof(LyraAIController_GetDebugInfoString) == 0x000010, "Wrong size on LyraAIController_GetDebugInfoString");
static_assert(offsetof(LyraAIController_GetDebugInfoString, ReturnValue) == 0x000000, "Member 'LyraAIController_GetDebugInfoString::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAIController.OnRep_MyTeamID
// 0x0001 (0x0001 - 0x0000)
struct LyraAIController_OnRep_MyTeamID final
{
public:
	struct FGenericTeamId                         OldTeamID;                                         // 0x0000(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAIController_OnRep_MyTeamID) == 0x000001, "Wrong alignment on LyraAIController_OnRep_MyTeamID");
static_assert(sizeof(LyraAIController_OnRep_MyTeamID) == 0x000001, "Wrong size on LyraAIController_OnRep_MyTeamID");
static_assert(offsetof(LyraAIController_OnRep_MyTeamID, OldTeamID) == 0x000000, "Member 'LyraAIController_OnRep_MyTeamID::OldTeamID' has a wrong offset!");

// Function LyraGame.TgfEquipmentWrapper.GetEquipmentDefinition
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentWrapper_GetEquipmentDefinition final
{
public:
	bool                                          bIsSkin;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTgfEquipmentDefinition>    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentWrapper_GetEquipmentDefinition) == 0x000008, "Wrong alignment on TgfEquipmentWrapper_GetEquipmentDefinition");
static_assert(sizeof(TgfEquipmentWrapper_GetEquipmentDefinition) == 0x000010, "Wrong size on TgfEquipmentWrapper_GetEquipmentDefinition");
static_assert(offsetof(TgfEquipmentWrapper_GetEquipmentDefinition, bIsSkin) == 0x000000, "Member 'TgfEquipmentWrapper_GetEquipmentDefinition::bIsSkin' has a wrong offset!");
static_assert(offsetof(TgfEquipmentWrapper_GetEquipmentDefinition, ReturnValue) == 0x000008, "Member 'TgfEquipmentWrapper_GetEquipmentDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentWrapper.GetEquipmentDefinitionObject
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentWrapper_GetEquipmentDefinitionObject final
{
public:
	bool                                          bIsSkin;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTgfEquipmentDefinition*          ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentWrapper_GetEquipmentDefinitionObject) == 0x000008, "Wrong alignment on TgfEquipmentWrapper_GetEquipmentDefinitionObject");
static_assert(sizeof(TgfEquipmentWrapper_GetEquipmentDefinitionObject) == 0x000010, "Wrong size on TgfEquipmentWrapper_GetEquipmentDefinitionObject");
static_assert(offsetof(TgfEquipmentWrapper_GetEquipmentDefinitionObject, bIsSkin) == 0x000000, "Member 'TgfEquipmentWrapper_GetEquipmentDefinitionObject::bIsSkin' has a wrong offset!");
static_assert(offsetof(TgfEquipmentWrapper_GetEquipmentDefinitionObject, ReturnValue) == 0x000008, "Member 'TgfEquipmentWrapper_GetEquipmentDefinitionObject::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentWrapper.GetEquipSubtype
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentWrapper_GetEquipSubtype final
{
public:
	ETgfEquipSubType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentWrapper_GetEquipSubtype) == 0x000001, "Wrong alignment on TgfEquipmentWrapper_GetEquipSubtype");
static_assert(sizeof(TgfEquipmentWrapper_GetEquipSubtype) == 0x000001, "Wrong size on TgfEquipmentWrapper_GetEquipSubtype");
static_assert(offsetof(TgfEquipmentWrapper_GetEquipSubtype, ReturnValue) == 0x000000, "Member 'TgfEquipmentWrapper_GetEquipSubtype::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentWrapper.GetItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentWrapper_GetItemDefinition final
{
public:
	bool                                          bIsSkin;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTgfInventoryItemDefinition> ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentWrapper_GetItemDefinition) == 0x000008, "Wrong alignment on TgfEquipmentWrapper_GetItemDefinition");
static_assert(sizeof(TgfEquipmentWrapper_GetItemDefinition) == 0x000010, "Wrong size on TgfEquipmentWrapper_GetItemDefinition");
static_assert(offsetof(TgfEquipmentWrapper_GetItemDefinition, bIsSkin) == 0x000000, "Member 'TgfEquipmentWrapper_GetItemDefinition::bIsSkin' has a wrong offset!");
static_assert(offsetof(TgfEquipmentWrapper_GetItemDefinition, ReturnValue) == 0x000008, "Member 'TgfEquipmentWrapper_GetItemDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentWrapper.GetItemDefinitionObject
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentWrapper_GetItemDefinitionObject final
{
public:
	bool                                          bIsSkin;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTgfInventoryItemDefinition*      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentWrapper_GetItemDefinitionObject) == 0x000008, "Wrong alignment on TgfEquipmentWrapper_GetItemDefinitionObject");
static_assert(sizeof(TgfEquipmentWrapper_GetItemDefinitionObject) == 0x000010, "Wrong size on TgfEquipmentWrapper_GetItemDefinitionObject");
static_assert(offsetof(TgfEquipmentWrapper_GetItemDefinitionObject, bIsSkin) == 0x000000, "Member 'TgfEquipmentWrapper_GetItemDefinitionObject::bIsSkin' has a wrong offset!");
static_assert(offsetof(TgfEquipmentWrapper_GetItemDefinitionObject, ReturnValue) == 0x000008, "Member 'TgfEquipmentWrapper_GetItemDefinitionObject::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentWrapper.GetWeaponEquipType
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentWrapper_GetWeaponEquipType final
{
public:
	ETgfWeaponEquipType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentWrapper_GetWeaponEquipType) == 0x000001, "Wrong alignment on TgfEquipmentWrapper_GetWeaponEquipType");
static_assert(sizeof(TgfEquipmentWrapper_GetWeaponEquipType) == 0x000001, "Wrong size on TgfEquipmentWrapper_GetWeaponEquipType");
static_assert(offsetof(TgfEquipmentWrapper_GetWeaponEquipType, ReturnValue) == 0x000000, "Member 'TgfEquipmentWrapper_GetWeaponEquipType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfPawnMaterialManagerComponent.BatchSetMainMeshScalarParameterValue
// 0x000C (0x000C - 0x0000)
struct TgfPawnMaterialManagerComponent_BatchSetMainMeshScalarParameterValue final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlternateValue;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPawnMaterialManagerComponent_BatchSetMainMeshScalarParameterValue) == 0x000004, "Wrong alignment on TgfPawnMaterialManagerComponent_BatchSetMainMeshScalarParameterValue");
static_assert(sizeof(TgfPawnMaterialManagerComponent_BatchSetMainMeshScalarParameterValue) == 0x00000C, "Wrong size on TgfPawnMaterialManagerComponent_BatchSetMainMeshScalarParameterValue");
static_assert(offsetof(TgfPawnMaterialManagerComponent_BatchSetMainMeshScalarParameterValue, ParameterName) == 0x000000, "Member 'TgfPawnMaterialManagerComponent_BatchSetMainMeshScalarParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(TgfPawnMaterialManagerComponent_BatchSetMainMeshScalarParameterValue, AlternateValue) == 0x000008, "Member 'TgfPawnMaterialManagerComponent_BatchSetMainMeshScalarParameterValue::AlternateValue' has a wrong offset!");

// Function LyraGame.TgfPawnMaterialManagerComponent.BatchSetMainMeshVectorParameterValue
// 0x0020 (0x0020 - 0x0000)
struct TgfPawnMaterialManagerComponent_BatchSetMainMeshVectorParameterValue final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AlternateValue;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPawnMaterialManagerComponent_BatchSetMainMeshVectorParameterValue) == 0x000008, "Wrong alignment on TgfPawnMaterialManagerComponent_BatchSetMainMeshVectorParameterValue");
static_assert(sizeof(TgfPawnMaterialManagerComponent_BatchSetMainMeshVectorParameterValue) == 0x000020, "Wrong size on TgfPawnMaterialManagerComponent_BatchSetMainMeshVectorParameterValue");
static_assert(offsetof(TgfPawnMaterialManagerComponent_BatchSetMainMeshVectorParameterValue, ParameterName) == 0x000000, "Member 'TgfPawnMaterialManagerComponent_BatchSetMainMeshVectorParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(TgfPawnMaterialManagerComponent_BatchSetMainMeshVectorParameterValue, AlternateValue) == 0x000008, "Member 'TgfPawnMaterialManagerComponent_BatchSetMainMeshVectorParameterValue::AlternateValue' has a wrong offset!");

// Function LyraGame.TgfPawnMaterialManagerComponent.OnMaterialUpdatedAfter
// 0x0002 (0x0002 - 0x0000)
struct TgfPawnMaterialManagerComponent_OnMaterialUpdatedAfter final
{
public:
	ETgfCharaMatStateType                         NewStateType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfCharaMatStateType                         OldStateType;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPawnMaterialManagerComponent_OnMaterialUpdatedAfter) == 0x000001, "Wrong alignment on TgfPawnMaterialManagerComponent_OnMaterialUpdatedAfter");
static_assert(sizeof(TgfPawnMaterialManagerComponent_OnMaterialUpdatedAfter) == 0x000002, "Wrong size on TgfPawnMaterialManagerComponent_OnMaterialUpdatedAfter");
static_assert(offsetof(TgfPawnMaterialManagerComponent_OnMaterialUpdatedAfter, NewStateType) == 0x000000, "Member 'TgfPawnMaterialManagerComponent_OnMaterialUpdatedAfter::NewStateType' has a wrong offset!");
static_assert(offsetof(TgfPawnMaterialManagerComponent_OnMaterialUpdatedAfter, OldStateType) == 0x000001, "Member 'TgfPawnMaterialManagerComponent_OnMaterialUpdatedAfter::OldStateType' has a wrong offset!");

// Function LyraGame.TgfPawnMaterialManagerComponent.OnMaterialUpdatedBefore
// 0x0002 (0x0002 - 0x0000)
struct TgfPawnMaterialManagerComponent_OnMaterialUpdatedBefore final
{
public:
	ETgfCharaMatStateType                         NewStateType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfCharaMatStateType                         OldStateType;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPawnMaterialManagerComponent_OnMaterialUpdatedBefore) == 0x000001, "Wrong alignment on TgfPawnMaterialManagerComponent_OnMaterialUpdatedBefore");
static_assert(sizeof(TgfPawnMaterialManagerComponent_OnMaterialUpdatedBefore) == 0x000002, "Wrong size on TgfPawnMaterialManagerComponent_OnMaterialUpdatedBefore");
static_assert(offsetof(TgfPawnMaterialManagerComponent_OnMaterialUpdatedBefore, NewStateType) == 0x000000, "Member 'TgfPawnMaterialManagerComponent_OnMaterialUpdatedBefore::NewStateType' has a wrong offset!");
static_assert(offsetof(TgfPawnMaterialManagerComponent_OnMaterialUpdatedBefore, OldStateType) == 0x000001, "Member 'TgfPawnMaterialManagerComponent_OnMaterialUpdatedBefore::OldStateType' has a wrong offset!");

// Function LyraGame.TgfPawnMaterialManagerComponent.SwitchToSpecifiedOverlayMaterial
// 0x0001 (0x0001 - 0x0000)
struct TgfPawnMaterialManagerComponent_SwitchToSpecifiedOverlayMaterial final
{
public:
	ETgfPawnOverlayMaterialType                   MIType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPawnMaterialManagerComponent_SwitchToSpecifiedOverlayMaterial) == 0x000001, "Wrong alignment on TgfPawnMaterialManagerComponent_SwitchToSpecifiedOverlayMaterial");
static_assert(sizeof(TgfPawnMaterialManagerComponent_SwitchToSpecifiedOverlayMaterial) == 0x000001, "Wrong size on TgfPawnMaterialManagerComponent_SwitchToSpecifiedOverlayMaterial");
static_assert(offsetof(TgfPawnMaterialManagerComponent_SwitchToSpecifiedOverlayMaterial, MIType) == 0x000000, "Member 'TgfPawnMaterialManagerComponent_SwitchToSpecifiedOverlayMaterial::MIType' has a wrong offset!");

// Function LyraGame.TgfPawnMaterialManagerComponent.UpdateMaterialState
// 0x0001 (0x0001 - 0x0000)
struct TgfPawnMaterialManagerComponent_UpdateMaterialState final
{
public:
	ETgfCharaMatStateType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPawnMaterialManagerComponent_UpdateMaterialState) == 0x000001, "Wrong alignment on TgfPawnMaterialManagerComponent_UpdateMaterialState");
static_assert(sizeof(TgfPawnMaterialManagerComponent_UpdateMaterialState) == 0x000001, "Wrong size on TgfPawnMaterialManagerComponent_UpdateMaterialState");
static_assert(offsetof(TgfPawnMaterialManagerComponent_UpdateMaterialState, Type) == 0x000000, "Member 'TgfPawnMaterialManagerComponent_UpdateMaterialState::Type' has a wrong offset!");

// Function LyraGame.TgfPawnMaterialManagerComponent.ContainsMaterialState
// 0x0002 (0x0002 - 0x0000)
struct TgfPawnMaterialManagerComponent_ContainsMaterialState final
{
public:
	ETgfCharaMatStateType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPawnMaterialManagerComponent_ContainsMaterialState) == 0x000001, "Wrong alignment on TgfPawnMaterialManagerComponent_ContainsMaterialState");
static_assert(sizeof(TgfPawnMaterialManagerComponent_ContainsMaterialState) == 0x000002, "Wrong size on TgfPawnMaterialManagerComponent_ContainsMaterialState");
static_assert(offsetof(TgfPawnMaterialManagerComponent_ContainsMaterialState, Type) == 0x000000, "Member 'TgfPawnMaterialManagerComponent_ContainsMaterialState::Type' has a wrong offset!");
static_assert(offsetof(TgfPawnMaterialManagerComponent_ContainsMaterialState, ReturnValue) == 0x000001, "Member 'TgfPawnMaterialManagerComponent_ContainsMaterialState::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfPawnMaterialManagerComponent.FindTagByStateType
// 0x000C (0x000C - 0x0000)
struct TgfPawnMaterialManagerComponent_FindTagByStateType final
{
public:
	ETgfCharaMatStateType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPawnMaterialManagerComponent_FindTagByStateType) == 0x000004, "Wrong alignment on TgfPawnMaterialManagerComponent_FindTagByStateType");
static_assert(sizeof(TgfPawnMaterialManagerComponent_FindTagByStateType) == 0x00000C, "Wrong size on TgfPawnMaterialManagerComponent_FindTagByStateType");
static_assert(offsetof(TgfPawnMaterialManagerComponent_FindTagByStateType, Type) == 0x000000, "Member 'TgfPawnMaterialManagerComponent_FindTagByStateType::Type' has a wrong offset!");
static_assert(offsetof(TgfPawnMaterialManagerComponent_FindTagByStateType, ReturnValue) == 0x000004, "Member 'TgfPawnMaterialManagerComponent_FindTagByStateType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfPawnMaterialManagerComponent.GetStateType
// 0x0001 (0x0001 - 0x0000)
struct TgfPawnMaterialManagerComponent_GetStateType final
{
public:
	ETgfCharaMatStateType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPawnMaterialManagerComponent_GetStateType) == 0x000001, "Wrong alignment on TgfPawnMaterialManagerComponent_GetStateType");
static_assert(sizeof(TgfPawnMaterialManagerComponent_GetStateType) == 0x000001, "Wrong size on TgfPawnMaterialManagerComponent_GetStateType");
static_assert(offsetof(TgfPawnMaterialManagerComponent_GetStateType, ReturnValue) == 0x000000, "Member 'TgfPawnMaterialManagerComponent_GetStateType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfPawnMaterialManagerComponent.GetStateTypeByTag
// 0x0001 (0x0001 - 0x0000)
struct TgfPawnMaterialManagerComponent_GetStateTypeByTag final
{
public:
	ETgfCharaMatStateType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPawnMaterialManagerComponent_GetStateTypeByTag) == 0x000001, "Wrong alignment on TgfPawnMaterialManagerComponent_GetStateTypeByTag");
static_assert(sizeof(TgfPawnMaterialManagerComponent_GetStateTypeByTag) == 0x000001, "Wrong size on TgfPawnMaterialManagerComponent_GetStateTypeByTag");
static_assert(offsetof(TgfPawnMaterialManagerComponent_GetStateTypeByTag, ReturnValue) == 0x000000, "Member 'TgfPawnMaterialManagerComponent_GetStateTypeByTag::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterMaterialManagerComponent.BatchSetScalarParameterValue
// 0x00B0 (0x00B0 - 0x0000)
struct TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlternateValue;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETgfCharaPart, struct FUTgfCharacterBodyMaterialCache> AvatarAlternateMaterials;                          // 0x0010(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class UMeshComponent*, struct FUTgfCharacterEquipmentMaterialCache> EquipmentAlternateMaterials;                       // 0x0060(0x0050)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue) == 0x000008, "Wrong alignment on TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue");
static_assert(sizeof(TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue) == 0x0000B0, "Wrong size on TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue, ParameterName) == 0x000000, "Member 'TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue, AlternateValue) == 0x000008, "Member 'TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue::AlternateValue' has a wrong offset!");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue, AvatarAlternateMaterials) == 0x000010, "Member 'TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue::AvatarAlternateMaterials' has a wrong offset!");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue, EquipmentAlternateMaterials) == 0x000060, "Member 'TgfCharacterMaterialManagerComponent_BatchSetScalarParameterValue::EquipmentAlternateMaterials' has a wrong offset!");

// Function LyraGame.TgfCharacterMaterialManagerComponent.BatchSetVectorParameterValue
// 0x00C0 (0x00C0 - 0x0000)
struct TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AlternateValue;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ETgfCharaPart, struct FUTgfCharacterBodyMaterialCache> AvatarAlternateMaterials;                          // 0x0020(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class UMeshComponent*, struct FUTgfCharacterEquipmentMaterialCache> EquipmentAlternateMaterials;                       // 0x0070(0x0050)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue) == 0x000008, "Wrong alignment on TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue");
static_assert(sizeof(TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue) == 0x0000C0, "Wrong size on TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue, ParameterName) == 0x000000, "Member 'TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue, AlternateValue) == 0x000008, "Member 'TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue::AlternateValue' has a wrong offset!");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue, AvatarAlternateMaterials) == 0x000020, "Member 'TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue::AvatarAlternateMaterials' has a wrong offset!");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue, EquipmentAlternateMaterials) == 0x000070, "Member 'TgfCharacterMaterialManagerComponent_BatchSetVectorParameterValue::EquipmentAlternateMaterials' has a wrong offset!");

// Function LyraGame.TgfCharacterMaterialManagerComponent.SetAllNiagaraAndLightNewActiveOnWeapons
// 0x0001 (0x0001 - 0x0000)
struct TgfCharacterMaterialManagerComponent_SetAllNiagaraAndLightNewActiveOnWeapons final
{
public:
	bool                                          CheckValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMaterialManagerComponent_SetAllNiagaraAndLightNewActiveOnWeapons) == 0x000001, "Wrong alignment on TgfCharacterMaterialManagerComponent_SetAllNiagaraAndLightNewActiveOnWeapons");
static_assert(sizeof(TgfCharacterMaterialManagerComponent_SetAllNiagaraAndLightNewActiveOnWeapons) == 0x000001, "Wrong size on TgfCharacterMaterialManagerComponent_SetAllNiagaraAndLightNewActiveOnWeapons");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_SetAllNiagaraAndLightNewActiveOnWeapons, CheckValue) == 0x000000, "Member 'TgfCharacterMaterialManagerComponent_SetAllNiagaraAndLightNewActiveOnWeapons::CheckValue' has a wrong offset!");

// Function LyraGame.TgfCharacterMaterialManagerComponent.SetCloakType
// 0x0001 (0x0001 - 0x0000)
struct TgfCharacterMaterialManagerComponent_SetCloakType final
{
public:
	ETgfCharacterMaterialCloakType                NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMaterialManagerComponent_SetCloakType) == 0x000001, "Wrong alignment on TgfCharacterMaterialManagerComponent_SetCloakType");
static_assert(sizeof(TgfCharacterMaterialManagerComponent_SetCloakType) == 0x000001, "Wrong size on TgfCharacterMaterialManagerComponent_SetCloakType");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_SetCloakType, NewType) == 0x000000, "Member 'TgfCharacterMaterialManagerComponent_SetCloakType::NewType' has a wrong offset!");

// Function LyraGame.TgfCharacterMaterialManagerComponent.SwitchSkin
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterMaterialManagerComponent_SwitchSkin final
{
public:
	class UMaterialInstance*                      SkinMat;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMaterialManagerComponent_SwitchSkin) == 0x000008, "Wrong alignment on TgfCharacterMaterialManagerComponent_SwitchSkin");
static_assert(sizeof(TgfCharacterMaterialManagerComponent_SwitchSkin) == 0x000008, "Wrong size on TgfCharacterMaterialManagerComponent_SwitchSkin");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_SwitchSkin, SkinMat) == 0x000000, "Member 'TgfCharacterMaterialManagerComponent_SwitchSkin::SkinMat' has a wrong offset!");

// Function LyraGame.TgfCharacterMaterialManagerComponent.UpdateCloakLerpValue
// 0x0004 (0x0004 - 0x0000)
struct TgfCharacterMaterialManagerComponent_UpdateCloakLerpValue final
{
public:
	float                                         LerpValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMaterialManagerComponent_UpdateCloakLerpValue) == 0x000004, "Wrong alignment on TgfCharacterMaterialManagerComponent_UpdateCloakLerpValue");
static_assert(sizeof(TgfCharacterMaterialManagerComponent_UpdateCloakLerpValue) == 0x000004, "Wrong size on TgfCharacterMaterialManagerComponent_UpdateCloakLerpValue");
static_assert(offsetof(TgfCharacterMaterialManagerComponent_UpdateCloakLerpValue, LerpValue) == 0x000000, "Member 'TgfCharacterMaterialManagerComponent_UpdateCloakLerpValue::LerpValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetCorruptionId
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemWrapper_GetCorruptionId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetCorruptionId) == 0x000004, "Wrong alignment on TgfInventoryItemWrapper_GetCorruptionId");
static_assert(sizeof(TgfInventoryItemWrapper_GetCorruptionId) == 0x000004, "Wrong size on TgfInventoryItemWrapper_GetCorruptionId");
static_assert(offsetof(TgfInventoryItemWrapper_GetCorruptionId, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetCorruptionId::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetDurabilityPoint
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemWrapper_GetDurabilityPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetDurabilityPoint) == 0x000004, "Wrong alignment on TgfInventoryItemWrapper_GetDurabilityPoint");
static_assert(sizeof(TgfInventoryItemWrapper_GetDurabilityPoint) == 0x000004, "Wrong size on TgfInventoryItemWrapper_GetDurabilityPoint");
static_assert(offsetof(TgfInventoryItemWrapper_GetDurabilityPoint, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetDurabilityPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetMaxDurabilityPoint
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemWrapper_GetMaxDurabilityPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetMaxDurabilityPoint) == 0x000004, "Wrong alignment on TgfInventoryItemWrapper_GetMaxDurabilityPoint");
static_assert(sizeof(TgfInventoryItemWrapper_GetMaxDurabilityPoint) == 0x000004, "Wrong size on TgfInventoryItemWrapper_GetMaxDurabilityPoint");
static_assert(offsetof(TgfInventoryItemWrapper_GetMaxDurabilityPoint, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetMaxDurabilityPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetOwners
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_GetOwners final
{
public:
	TArray<struct FTgfPlayerIDKey>                Owners;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetOwners) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_GetOwners");
static_assert(sizeof(TgfInventoryItemWrapper_GetOwners) == 0x000010, "Wrong size on TgfInventoryItemWrapper_GetOwners");
static_assert(offsetof(TgfInventoryItemWrapper_GetOwners, Owners) == 0x000000, "Member 'TgfInventoryItemWrapper_GetOwners::Owners' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetPolishingCount
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemWrapper_GetPolishingCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetPolishingCount) == 0x000004, "Wrong alignment on TgfInventoryItemWrapper_GetPolishingCount");
static_assert(sizeof(TgfInventoryItemWrapper_GetPolishingCount) == 0x000004, "Wrong size on TgfInventoryItemWrapper_GetPolishingCount");
static_assert(offsetof(TgfInventoryItemWrapper_GetPolishingCount, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetPolishingCount::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetSkinId
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemWrapper_GetSkinId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetSkinId) == 0x000004, "Wrong alignment on TgfInventoryItemWrapper_GetSkinId");
static_assert(sizeof(TgfInventoryItemWrapper_GetSkinId) == 0x000004, "Wrong size on TgfInventoryItemWrapper_GetSkinId");
static_assert(offsetof(TgfInventoryItemWrapper_GetSkinId, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetSkinId::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.HasDurabilityPoint
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemWrapper_HasDurabilityPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_HasDurabilityPoint) == 0x000001, "Wrong alignment on TgfInventoryItemWrapper_HasDurabilityPoint");
static_assert(sizeof(TgfInventoryItemWrapper_HasDurabilityPoint) == 0x000001, "Wrong size on TgfInventoryItemWrapper_HasDurabilityPoint");
static_assert(offsetof(TgfInventoryItemWrapper_HasDurabilityPoint, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_HasDurabilityPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.IsHeirloom
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemWrapper_IsHeirloom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_IsHeirloom) == 0x000001, "Wrong alignment on TgfInventoryItemWrapper_IsHeirloom");
static_assert(sizeof(TgfInventoryItemWrapper_IsHeirloom) == 0x000001, "Wrong size on TgfInventoryItemWrapper_IsHeirloom");
static_assert(offsetof(TgfInventoryItemWrapper_IsHeirloom, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_IsHeirloom::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.IsMyHeirloom
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_IsMyHeirloom final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryItemWrapper_IsMyHeirloom) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_IsMyHeirloom");
static_assert(sizeof(TgfInventoryItemWrapper_IsMyHeirloom) == 0x000010, "Wrong size on TgfInventoryItemWrapper_IsMyHeirloom");
static_assert(offsetof(TgfInventoryItemWrapper_IsMyHeirloom, SelfActor) == 0x000000, "Member 'TgfInventoryItemWrapper_IsMyHeirloom::SelfActor' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_IsMyHeirloom, ReturnValue) == 0x000008, "Member 'TgfInventoryItemWrapper_IsMyHeirloom::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.IsSameItem
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_IsSameItem final
{
public:
	class UTgfInventoryItemWrapper*               AnotherItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryItemWrapper_IsSameItem) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_IsSameItem");
static_assert(sizeof(TgfInventoryItemWrapper_IsSameItem) == 0x000010, "Wrong size on TgfInventoryItemWrapper_IsSameItem");
static_assert(offsetof(TgfInventoryItemWrapper_IsSameItem, AnotherItem) == 0x000000, "Member 'TgfInventoryItemWrapper_IsSameItem::AnotherItem' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_IsSameItem, ReturnValue) == 0x000008, "Member 'TgfInventoryItemWrapper_IsSameItem::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.IsTargetInventory
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_IsTargetInventory final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryItemWrapper_IsTargetInventory) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_IsTargetInventory");
static_assert(sizeof(TgfInventoryItemWrapper_IsTargetInventory) == 0x000010, "Wrong size on TgfInventoryItemWrapper_IsTargetInventory");
static_assert(offsetof(TgfInventoryItemWrapper_IsTargetInventory, Owner) == 0x000000, "Member 'TgfInventoryItemWrapper_IsTargetInventory::Owner' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_IsTargetInventory, ReturnValue) == 0x000008, "Member 'TgfInventoryItemWrapper_IsTargetInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.IsTeammateInventory
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_IsTeammateInventory final
{
public:
	class AActor*                                 ViewCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryItemWrapper_IsTeammateInventory) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_IsTeammateInventory");
static_assert(sizeof(TgfInventoryItemWrapper_IsTeammateInventory) == 0x000010, "Wrong size on TgfInventoryItemWrapper_IsTeammateInventory");
static_assert(offsetof(TgfInventoryItemWrapper_IsTeammateInventory, ViewCharacter) == 0x000000, "Member 'TgfInventoryItemWrapper_IsTeammateInventory::ViewCharacter' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_IsTeammateInventory, ReturnValue) == 0x000008, "Member 'TgfInventoryItemWrapper_IsTeammateInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.SpawnEquipmentActorsWithAttachTarget
// 0x0020 (0x0020 - 0x0000)
struct TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget final
{
public:
	class USceneComponent*                        AttachTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutSpawnedActors;                                  // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAttachToLeft;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedSkin;                                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget");
static_assert(sizeof(TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget) == 0x000020, "Wrong size on TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget");
static_assert(offsetof(TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget, AttachTarget) == 0x000000, "Member 'TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget::AttachTarget' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget, OutSpawnedActors) == 0x000008, "Member 'TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget::OutSpawnedActors' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget, bAttachToLeft) == 0x000018, "Member 'TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget::bAttachToLeft' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget, NeedSkin) == 0x000019, "Member 'TgfInventoryItemWrapper_SpawnEquipmentActorsWithAttachTarget::NeedSkin' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.CanDivide
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemWrapper_CanDivide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_CanDivide) == 0x000001, "Wrong alignment on TgfInventoryItemWrapper_CanDivide");
static_assert(sizeof(TgfInventoryItemWrapper_CanDivide) == 0x000001, "Wrong size on TgfInventoryItemWrapper_CanDivide");
static_assert(offsetof(TgfInventoryItemWrapper_CanDivide, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_CanDivide::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.FindFragmentByClass
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryItemWrapper_FindFragmentByClass final
{
public:
	TSubclassOf<class ULyraInventoryItemFragment> FragmentClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkin;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ULyraInventoryItemFragment*       ReturnValue;                                       // 0x0010(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_FindFragmentByClass) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_FindFragmentByClass");
static_assert(sizeof(TgfInventoryItemWrapper_FindFragmentByClass) == 0x000018, "Wrong size on TgfInventoryItemWrapper_FindFragmentByClass");
static_assert(offsetof(TgfInventoryItemWrapper_FindFragmentByClass, FragmentClass) == 0x000000, "Member 'TgfInventoryItemWrapper_FindFragmentByClass::FragmentClass' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_FindFragmentByClass, bIsSkin) == 0x000008, "Member 'TgfInventoryItemWrapper_FindFragmentByClass::bIsSkin' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_FindFragmentByClass, ReturnValue) == 0x000010, "Member 'TgfInventoryItemWrapper_FindFragmentByClass::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetAffixDisplayConfig
// 0x0050 (0x0050 - 0x0000)
struct TgfInventoryItemWrapper_GetAffixDisplayConfig final
{
public:
	TArray<struct FAffixDisplayConfig>            Base;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            Main;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            Top;                                               // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            Gem;                                               // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            GearSet;                                           // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetAffixDisplayConfig) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_GetAffixDisplayConfig");
static_assert(sizeof(TgfInventoryItemWrapper_GetAffixDisplayConfig) == 0x000050, "Wrong size on TgfInventoryItemWrapper_GetAffixDisplayConfig");
static_assert(offsetof(TgfInventoryItemWrapper_GetAffixDisplayConfig, Base) == 0x000000, "Member 'TgfInventoryItemWrapper_GetAffixDisplayConfig::Base' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_GetAffixDisplayConfig, Main) == 0x000010, "Member 'TgfInventoryItemWrapper_GetAffixDisplayConfig::Main' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_GetAffixDisplayConfig, Top) == 0x000020, "Member 'TgfInventoryItemWrapper_GetAffixDisplayConfig::Top' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_GetAffixDisplayConfig, Gem) == 0x000030, "Member 'TgfInventoryItemWrapper_GetAffixDisplayConfig::Gem' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_GetAffixDisplayConfig, GearSet) == 0x000040, "Member 'TgfInventoryItemWrapper_GetAffixDisplayConfig::GearSet' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetEquipmentDefinition
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_GetEquipmentDefinition final
{
public:
	bool                                          bIsSkin;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTgfEquipmentDefinition>    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetEquipmentDefinition) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_GetEquipmentDefinition");
static_assert(sizeof(TgfInventoryItemWrapper_GetEquipmentDefinition) == 0x000010, "Wrong size on TgfInventoryItemWrapper_GetEquipmentDefinition");
static_assert(offsetof(TgfInventoryItemWrapper_GetEquipmentDefinition, bIsSkin) == 0x000000, "Member 'TgfInventoryItemWrapper_GetEquipmentDefinition::bIsSkin' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_GetEquipmentDefinition, ReturnValue) == 0x000008, "Member 'TgfInventoryItemWrapper_GetEquipmentDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetEquipmentDefinitionObject
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_GetEquipmentDefinitionObject final
{
public:
	bool                                          bIsSkin;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTgfEquipmentDefinition*          ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetEquipmentDefinitionObject) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_GetEquipmentDefinitionObject");
static_assert(sizeof(TgfInventoryItemWrapper_GetEquipmentDefinitionObject) == 0x000010, "Wrong size on TgfInventoryItemWrapper_GetEquipmentDefinitionObject");
static_assert(offsetof(TgfInventoryItemWrapper_GetEquipmentDefinitionObject, bIsSkin) == 0x000000, "Member 'TgfInventoryItemWrapper_GetEquipmentDefinitionObject::bIsSkin' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_GetEquipmentDefinitionObject, ReturnValue) == 0x000008, "Member 'TgfInventoryItemWrapper_GetEquipmentDefinitionObject::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetEquipSubtype
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemWrapper_GetEquipSubtype final
{
public:
	ETgfEquipSubType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetEquipSubtype) == 0x000001, "Wrong alignment on TgfInventoryItemWrapper_GetEquipSubtype");
static_assert(sizeof(TgfInventoryItemWrapper_GetEquipSubtype) == 0x000001, "Wrong size on TgfInventoryItemWrapper_GetEquipSubtype");
static_assert(offsetof(TgfInventoryItemWrapper_GetEquipSubtype, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetEquipSubtype::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetExpireTimepoint
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemWrapper_GetExpireTimepoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetExpireTimepoint) == 0x000004, "Wrong alignment on TgfInventoryItemWrapper_GetExpireTimepoint");
static_assert(sizeof(TgfInventoryItemWrapper_GetExpireTimepoint) == 0x000004, "Wrong size on TgfInventoryItemWrapper_GetExpireTimepoint");
static_assert(offsetof(TgfInventoryItemWrapper_GetExpireTimepoint, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetExpireTimepoint::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetGemData
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryItemWrapper_GetGemData final
{
public:
	class UTGFProtoTgfDItemGem*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetGemData) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_GetGemData");
static_assert(sizeof(TgfInventoryItemWrapper_GetGemData) == 0x000008, "Wrong size on TgfInventoryItemWrapper_GetGemData");
static_assert(offsetof(TgfInventoryItemWrapper_GetGemData, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetGemData::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetGuid
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemWrapper_GetGuid final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetGuid) == 0x000004, "Wrong alignment on TgfInventoryItemWrapper_GetGuid");
static_assert(sizeof(TgfInventoryItemWrapper_GetGuid) == 0x000004, "Wrong size on TgfInventoryItemWrapper_GetGuid");
static_assert(offsetof(TgfInventoryItemWrapper_GetGuid, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetGuid::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetIdleAnimation
// 0x0038 (0x0038 - 0x0000)
struct TgfInventoryItemWrapper_GetIdleAnimation final
{
public:
	class UTgfInventoryItemWrapper*               OffhandItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WithTags;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsRightIdle;                                      // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequenceBase*                ReturnValue;                                       // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetIdleAnimation) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_GetIdleAnimation");
static_assert(sizeof(TgfInventoryItemWrapper_GetIdleAnimation) == 0x000038, "Wrong size on TgfInventoryItemWrapper_GetIdleAnimation");
static_assert(offsetof(TgfInventoryItemWrapper_GetIdleAnimation, OffhandItem) == 0x000000, "Member 'TgfInventoryItemWrapper_GetIdleAnimation::OffhandItem' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_GetIdleAnimation, WithTags) == 0x000008, "Member 'TgfInventoryItemWrapper_GetIdleAnimation::WithTags' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_GetIdleAnimation, bIsRightIdle) == 0x000028, "Member 'TgfInventoryItemWrapper_GetIdleAnimation::bIsRightIdle' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_GetIdleAnimation, ReturnValue) == 0x000030, "Member 'TgfInventoryItemWrapper_GetIdleAnimation::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_GetItemDefinition final
{
public:
	bool                                          bIsSkin;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTgfInventoryItemDefinition> ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetItemDefinition) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_GetItemDefinition");
static_assert(sizeof(TgfInventoryItemWrapper_GetItemDefinition) == 0x000010, "Wrong size on TgfInventoryItemWrapper_GetItemDefinition");
static_assert(offsetof(TgfInventoryItemWrapper_GetItemDefinition, bIsSkin) == 0x000000, "Member 'TgfInventoryItemWrapper_GetItemDefinition::bIsSkin' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_GetItemDefinition, ReturnValue) == 0x000008, "Member 'TgfInventoryItemWrapper_GetItemDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetItemDefinitionObject
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_GetItemDefinitionObject final
{
public:
	bool                                          bIsSkin;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTgfInventoryItemDefinition*      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetItemDefinitionObject) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_GetItemDefinitionObject");
static_assert(sizeof(TgfInventoryItemWrapper_GetItemDefinitionObject) == 0x000010, "Wrong size on TgfInventoryItemWrapper_GetItemDefinitionObject");
static_assert(offsetof(TgfInventoryItemWrapper_GetItemDefinitionObject, bIsSkin) == 0x000000, "Member 'TgfInventoryItemWrapper_GetItemDefinitionObject::bIsSkin' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_GetItemDefinitionObject, ReturnValue) == 0x000008, "Member 'TgfInventoryItemWrapper_GetItemDefinitionObject::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetItemSize
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryItemWrapper_GetItemSize final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetItemSize) == 0x000004, "Wrong alignment on TgfInventoryItemWrapper_GetItemSize");
static_assert(sizeof(TgfInventoryItemWrapper_GetItemSize) == 0x000008, "Wrong size on TgfInventoryItemWrapper_GetItemSize");
static_assert(offsetof(TgfInventoryItemWrapper_GetItemSize, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetItemSize::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetStackCount
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemWrapper_GetStackCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetStackCount) == 0x000004, "Wrong alignment on TgfInventoryItemWrapper_GetStackCount");
static_assert(sizeof(TgfInventoryItemWrapper_GetStackCount) == 0x000004, "Wrong size on TgfInventoryItemWrapper_GetStackCount");
static_assert(offsetof(TgfInventoryItemWrapper_GetStackCount, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetStackCount::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetTypeId
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemWrapper_GetTypeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetTypeId) == 0x000004, "Wrong alignment on TgfInventoryItemWrapper_GetTypeId");
static_assert(sizeof(TgfInventoryItemWrapper_GetTypeId) == 0x000004, "Wrong size on TgfInventoryItemWrapper_GetTypeId");
static_assert(offsetof(TgfInventoryItemWrapper_GetTypeId, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetTypeId::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.GetWeaponEquipType
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemWrapper_GetWeaponEquipType final
{
public:
	ETgfWeaponEquipType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemWrapper_GetWeaponEquipType) == 0x000001, "Wrong alignment on TgfInventoryItemWrapper_GetWeaponEquipType");
static_assert(sizeof(TgfInventoryItemWrapper_GetWeaponEquipType) == 0x000001, "Wrong size on TgfInventoryItemWrapper_GetWeaponEquipType");
static_assert(offsetof(TgfInventoryItemWrapper_GetWeaponEquipType, ReturnValue) == 0x000000, "Member 'TgfInventoryItemWrapper_GetWeaponEquipType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemWrapper.IsTheSameAs
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemWrapper_IsTheSameAs final
{
public:
	class UTgfInventoryItemWrapper*               Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryItemWrapper_IsTheSameAs) == 0x000008, "Wrong alignment on TgfInventoryItemWrapper_IsTheSameAs");
static_assert(sizeof(TgfInventoryItemWrapper_IsTheSameAs) == 0x000010, "Wrong size on TgfInventoryItemWrapper_IsTheSameAs");
static_assert(offsetof(TgfInventoryItemWrapper_IsTheSameAs, Other) == 0x000000, "Member 'TgfInventoryItemWrapper_IsTheSameAs::Other' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemWrapper_IsTheSameAs, ReturnValue) == 0x000008, "Member 'TgfInventoryItemWrapper_IsTheSameAs::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.ActivateAllEscapeDevices
// 0x0008 (0x0008 - 0x0000)
struct TgfCheatComponent_ActivateAllEscapeDevices final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_ActivateAllEscapeDevices) == 0x000008, "Wrong alignment on TgfCheatComponent_ActivateAllEscapeDevices");
static_assert(sizeof(TgfCheatComponent_ActivateAllEscapeDevices) == 0x000008, "Wrong size on TgfCheatComponent_ActivateAllEscapeDevices");
static_assert(offsetof(TgfCheatComponent_ActivateAllEscapeDevices, World) == 0x000000, "Member 'TgfCheatComponent_ActivateAllEscapeDevices::World' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.AddBlockingLootSlot
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_AddBlockingLootSlot final
{
public:
	class UTgfEquipmentManagerComponent*          EquipmentComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_AddBlockingLootSlot) == 0x000008, "Wrong alignment on TgfCheatComponent_AddBlockingLootSlot");
static_assert(sizeof(TgfCheatComponent_AddBlockingLootSlot) == 0x000010, "Wrong size on TgfCheatComponent_AddBlockingLootSlot");
static_assert(offsetof(TgfCheatComponent_AddBlockingLootSlot, EquipmentComponent) == 0x000000, "Member 'TgfCheatComponent_AddBlockingLootSlot::EquipmentComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddBlockingLootSlot, Slot) == 0x000008, "Member 'TgfCheatComponent_AddBlockingLootSlot::Slot' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.AddGearsetLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_AddGearsetLevel final
{
public:
	class UTgfEquipmentManagerComponent*          EquipmentComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GearsetId;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeltaLevel;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_AddGearsetLevel) == 0x000008, "Wrong alignment on TgfCheatComponent_AddGearsetLevel");
static_assert(sizeof(TgfCheatComponent_AddGearsetLevel) == 0x000010, "Wrong size on TgfCheatComponent_AddGearsetLevel");
static_assert(offsetof(TgfCheatComponent_AddGearsetLevel, EquipmentComponent) == 0x000000, "Member 'TgfCheatComponent_AddGearsetLevel::EquipmentComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddGearsetLevel, GearsetId) == 0x000008, "Member 'TgfCheatComponent_AddGearsetLevel::GearsetId' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddGearsetLevel, DeltaLevel) == 0x00000C, "Member 'TgfCheatComponent_AddGearsetLevel::DeltaLevel' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.AddItemDefinition
// 0x0018 (0x0018 - 0x0000)
struct TgfCheatComponent_AddItemDefinition final
{
public:
	class UTgfInventoryManagerComponent*          InventoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumToAdd;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_AddItemDefinition) == 0x000008, "Wrong alignment on TgfCheatComponent_AddItemDefinition");
static_assert(sizeof(TgfCheatComponent_AddItemDefinition) == 0x000018, "Wrong size on TgfCheatComponent_AddItemDefinition");
static_assert(offsetof(TgfCheatComponent_AddItemDefinition, InventoryComponent) == 0x000000, "Member 'TgfCheatComponent_AddItemDefinition::InventoryComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddItemDefinition, ItemDef) == 0x000008, "Member 'TgfCheatComponent_AddItemDefinition::ItemDef' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddItemDefinition, NumToAdd) == 0x000010, "Member 'TgfCheatComponent_AddItemDefinition::NumToAdd' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.AddLooseGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct TgfCheatComponent_AddLooseGameplayTag final
{
public:
	class ULyraAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedReplicated;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_AddLooseGameplayTag) == 0x000008, "Wrong alignment on TgfCheatComponent_AddLooseGameplayTag");
static_assert(sizeof(TgfCheatComponent_AddLooseGameplayTag) == 0x000018, "Wrong size on TgfCheatComponent_AddLooseGameplayTag");
static_assert(offsetof(TgfCheatComponent_AddLooseGameplayTag, AbilitySystemComponent) == 0x000000, "Member 'TgfCheatComponent_AddLooseGameplayTag::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddLooseGameplayTag, GameplayTag) == 0x000008, "Member 'TgfCheatComponent_AddLooseGameplayTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddLooseGameplayTag, Nums) == 0x000010, "Member 'TgfCheatComponent_AddLooseGameplayTag::Nums' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddLooseGameplayTag, NeedReplicated) == 0x000014, "Member 'TgfCheatComponent_AddLooseGameplayTag::NeedReplicated' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.AddLooseGameplayTagWithFString
// 0x0020 (0x0020 - 0x0000)
struct TgfCheatComponent_AddLooseGameplayTagWithFString final
{
public:
	class ULyraAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedReplicated;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_AddLooseGameplayTagWithFString) == 0x000008, "Wrong alignment on TgfCheatComponent_AddLooseGameplayTagWithFString");
static_assert(sizeof(TgfCheatComponent_AddLooseGameplayTagWithFString) == 0x000020, "Wrong size on TgfCheatComponent_AddLooseGameplayTagWithFString");
static_assert(offsetof(TgfCheatComponent_AddLooseGameplayTagWithFString, AbilitySystemComponent) == 0x000000, "Member 'TgfCheatComponent_AddLooseGameplayTagWithFString::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddLooseGameplayTagWithFString, TagName) == 0x000008, "Member 'TgfCheatComponent_AddLooseGameplayTagWithFString::TagName' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddLooseGameplayTagWithFString, Nums) == 0x000018, "Member 'TgfCheatComponent_AddLooseGameplayTagWithFString::Nums' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddLooseGameplayTagWithFString, NeedReplicated) == 0x00001C, "Member 'TgfCheatComponent_AddLooseGameplayTagWithFString::NeedReplicated' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.AddLootItem
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_AddLootItem final
{
public:
	class UTgfInventoryManagerComponent*          InventoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_AddLootItem) == 0x000008, "Wrong alignment on TgfCheatComponent_AddLootItem");
static_assert(sizeof(TgfCheatComponent_AddLootItem) == 0x000010, "Wrong size on TgfCheatComponent_AddLootItem");
static_assert(offsetof(TgfCheatComponent_AddLootItem, InventoryComponent) == 0x000000, "Member 'TgfCheatComponent_AddLootItem::InventoryComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddLootItem, ItemId) == 0x000008, "Member 'TgfCheatComponent_AddLootItem::ItemId' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_AddLootItem, Nums) == 0x00000C, "Member 'TgfCheatComponent_AddLootItem::Nums' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.AddPlayerBots
// 0x0004 (0x0004 - 0x0000)
struct TgfCheatComponent_AddPlayerBots final
{
public:
	int32                                         AddCnt;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_AddPlayerBots) == 0x000004, "Wrong alignment on TgfCheatComponent_AddPlayerBots");
static_assert(sizeof(TgfCheatComponent_AddPlayerBots) == 0x000004, "Wrong size on TgfCheatComponent_AddPlayerBots");
static_assert(offsetof(TgfCheatComponent_AddPlayerBots, AddCnt) == 0x000000, "Member 'TgfCheatComponent_AddPlayerBots::AddCnt' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.ClearAbility
// 0x0008 (0x0008 - 0x0000)
struct TgfCheatComponent_ClearAbility final
{
public:
	class ULyraAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_ClearAbility) == 0x000008, "Wrong alignment on TgfCheatComponent_ClearAbility");
static_assert(sizeof(TgfCheatComponent_ClearAbility) == 0x000008, "Wrong size on TgfCheatComponent_ClearAbility");
static_assert(offsetof(TgfCheatComponent_ClearAbility, AbilitySystemComponent) == 0x000000, "Member 'TgfCheatComponent_ClearAbility::AbilitySystemComponent' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.ClearAllGearsetLevel
// 0x0008 (0x0008 - 0x0000)
struct TgfCheatComponent_ClearAllGearsetLevel final
{
public:
	class UTgfEquipmentManagerComponent*          EquipmentComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_ClearAllGearsetLevel) == 0x000008, "Wrong alignment on TgfCheatComponent_ClearAllGearsetLevel");
static_assert(sizeof(TgfCheatComponent_ClearAllGearsetLevel) == 0x000008, "Wrong size on TgfCheatComponent_ClearAllGearsetLevel");
static_assert(offsetof(TgfCheatComponent_ClearAllGearsetLevel, EquipmentComponent) == 0x000000, "Member 'TgfCheatComponent_ClearAllGearsetLevel::EquipmentComponent' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.ClientSetPlayMontagePlay
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_ClientSetPlayMontagePlay final
{
public:
	bool                                          bOpenServerPlayDelay;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenClientBehind;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenClientAhead;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChaseMaxPing;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_ClientSetPlayMontagePlay) == 0x000004, "Wrong alignment on TgfCheatComponent_ClientSetPlayMontagePlay");
static_assert(sizeof(TgfCheatComponent_ClientSetPlayMontagePlay) == 0x000010, "Wrong size on TgfCheatComponent_ClientSetPlayMontagePlay");
static_assert(offsetof(TgfCheatComponent_ClientSetPlayMontagePlay, bOpenServerPlayDelay) == 0x000000, "Member 'TgfCheatComponent_ClientSetPlayMontagePlay::bOpenServerPlayDelay' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ClientSetPlayMontagePlay, DelayTime) == 0x000004, "Member 'TgfCheatComponent_ClientSetPlayMontagePlay::DelayTime' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ClientSetPlayMontagePlay, bOpenClientBehind) == 0x000008, "Member 'TgfCheatComponent_ClientSetPlayMontagePlay::bOpenClientBehind' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ClientSetPlayMontagePlay, bOpenClientAhead) == 0x000009, "Member 'TgfCheatComponent_ClientSetPlayMontagePlay::bOpenClientAhead' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ClientSetPlayMontagePlay, ChaseMaxPing) == 0x00000C, "Member 'TgfCheatComponent_ClientSetPlayMontagePlay::ChaseMaxPing' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.ClientShowPortalLocations
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_ClientShowPortalLocations final
{
public:
	TArray<struct FVector>                        Locations;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_ClientShowPortalLocations) == 0x000008, "Wrong alignment on TgfCheatComponent_ClientShowPortalLocations");
static_assert(sizeof(TgfCheatComponent_ClientShowPortalLocations) == 0x000010, "Wrong size on TgfCheatComponent_ClientShowPortalLocations");
static_assert(offsetof(TgfCheatComponent_ClientShowPortalLocations, Locations) == 0x000000, "Member 'TgfCheatComponent_ClientShowPortalLocations::Locations' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.DealAttrValue
// 0x0048 (0x0048 - 0x0000)
struct TgfCheatComponent_DealAttrValue final
{
public:
	class ULyraAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     GPAttr;                                            // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModOp;                                             // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_DealAttrValue) == 0x000008, "Wrong alignment on TgfCheatComponent_DealAttrValue");
static_assert(sizeof(TgfCheatComponent_DealAttrValue) == 0x000048, "Wrong size on TgfCheatComponent_DealAttrValue");
static_assert(offsetof(TgfCheatComponent_DealAttrValue, AbilitySystemComponent) == 0x000000, "Member 'TgfCheatComponent_DealAttrValue::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_DealAttrValue, GPAttr) == 0x000008, "Member 'TgfCheatComponent_DealAttrValue::GPAttr' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_DealAttrValue, Value) == 0x000040, "Member 'TgfCheatComponent_DealAttrValue::Value' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_DealAttrValue, ModOp) == 0x000044, "Member 'TgfCheatComponent_DealAttrValue::ModOp' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.DsQuitGame
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_DsQuitGame final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_DsQuitGame) == 0x000008, "Wrong alignment on TgfCheatComponent_DsQuitGame");
static_assert(sizeof(TgfCheatComponent_DsQuitGame) == 0x000010, "Wrong size on TgfCheatComponent_DsQuitGame");
static_assert(offsetof(TgfCheatComponent_DsQuitGame, PlayerState) == 0x000000, "Member 'TgfCheatComponent_DsQuitGame::PlayerState' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_DsQuitGame, Type) == 0x000008, "Member 'TgfCheatComponent_DsQuitGame::Type' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.EndCurrentPhase
// 0x0008 (0x0008 - 0x0000)
struct TgfCheatComponent_EndCurrentPhase final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_EndCurrentPhase) == 0x000008, "Wrong alignment on TgfCheatComponent_EndCurrentPhase");
static_assert(sizeof(TgfCheatComponent_EndCurrentPhase) == 0x000008, "Wrong size on TgfCheatComponent_EndCurrentPhase");
static_assert(offsetof(TgfCheatComponent_EndCurrentPhase, World) == 0x000000, "Member 'TgfCheatComponent_EndCurrentPhase::World' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.ForceGC
// 0x0001 (0x0001 - 0x0000)
struct TgfCheatComponent_ForceGC final
{
public:
	bool                                          FullPurge;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_ForceGC) == 0x000001, "Wrong alignment on TgfCheatComponent_ForceGC");
static_assert(sizeof(TgfCheatComponent_ForceGC) == 0x000001, "Wrong size on TgfCheatComponent_ForceGC");
static_assert(offsetof(TgfCheatComponent_ForceGC, FullPurge) == 0x000000, "Member 'TgfCheatComponent_ForceGC::FullPurge' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.FreezeSelf
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_FreezeSelf final
{
public:
	class ALyraCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFreeze;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_FreezeSelf) == 0x000008, "Wrong alignment on TgfCheatComponent_FreezeSelf");
static_assert(sizeof(TgfCheatComponent_FreezeSelf) == 0x000010, "Wrong size on TgfCheatComponent_FreezeSelf");
static_assert(offsetof(TgfCheatComponent_FreezeSelf, Character) == 0x000000, "Member 'TgfCheatComponent_FreezeSelf::Character' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_FreezeSelf, bFreeze) == 0x000008, "Member 'TgfCheatComponent_FreezeSelf::bFreeze' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.GiveAbility
// 0x0018 (0x0018 - 0x0000)
struct TgfCheatComponent_GiveAbility final
{
public:
	class ULyraAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_GiveAbility) == 0x000008, "Wrong alignment on TgfCheatComponent_GiveAbility");
static_assert(sizeof(TgfCheatComponent_GiveAbility) == 0x000018, "Wrong size on TgfCheatComponent_GiveAbility");
static_assert(offsetof(TgfCheatComponent_GiveAbility, AbilitySystemComponent) == 0x000000, "Member 'TgfCheatComponent_GiveAbility::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_GiveAbility, AssetName) == 0x000008, "Member 'TgfCheatComponent_GiveAbility::AssetName' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.MultiWorldTravel
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_MultiWorldTravel final
{
public:
	class FString                                 MapPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_MultiWorldTravel) == 0x000008, "Wrong alignment on TgfCheatComponent_MultiWorldTravel");
static_assert(sizeof(TgfCheatComponent_MultiWorldTravel) == 0x000010, "Wrong size on TgfCheatComponent_MultiWorldTravel");
static_assert(offsetof(TgfCheatComponent_MultiWorldTravel, MapPath) == 0x000000, "Member 'TgfCheatComponent_MultiWorldTravel::MapPath' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.PrintActorMapLog
// 0x001C (0x001C - 0x0000)
struct TgfCheatComponent_PrintActorMapLog final
{
public:
	int32                                         ActorNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AIEnableNum;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AITotalNum;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickEnableNum;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickTotalNum;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AIBound;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickBound;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_PrintActorMapLog) == 0x000004, "Wrong alignment on TgfCheatComponent_PrintActorMapLog");
static_assert(sizeof(TgfCheatComponent_PrintActorMapLog) == 0x00001C, "Wrong size on TgfCheatComponent_PrintActorMapLog");
static_assert(offsetof(TgfCheatComponent_PrintActorMapLog, ActorNum) == 0x000000, "Member 'TgfCheatComponent_PrintActorMapLog::ActorNum' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_PrintActorMapLog, AIEnableNum) == 0x000004, "Member 'TgfCheatComponent_PrintActorMapLog::AIEnableNum' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_PrintActorMapLog, AITotalNum) == 0x000008, "Member 'TgfCheatComponent_PrintActorMapLog::AITotalNum' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_PrintActorMapLog, TickEnableNum) == 0x00000C, "Member 'TgfCheatComponent_PrintActorMapLog::TickEnableNum' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_PrintActorMapLog, TickTotalNum) == 0x000010, "Member 'TgfCheatComponent_PrintActorMapLog::TickTotalNum' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_PrintActorMapLog, AIBound) == 0x000014, "Member 'TgfCheatComponent_PrintActorMapLog::AIBound' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_PrintActorMapLog, TickBound) == 0x000018, "Member 'TgfCheatComponent_PrintActorMapLog::TickBound' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.RebirthSelf
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_RebirthSelf final
{
public:
	class ALyraCharacter*                         LyraCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_RebirthSelf) == 0x000008, "Wrong alignment on TgfCheatComponent_RebirthSelf");
static_assert(sizeof(TgfCheatComponent_RebirthSelf) == 0x000010, "Wrong size on TgfCheatComponent_RebirthSelf");
static_assert(offsetof(TgfCheatComponent_RebirthSelf, LyraCharacter) == 0x000000, "Member 'TgfCheatComponent_RebirthSelf::LyraCharacter' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_RebirthSelf, AbilitySystemComponent) == 0x000008, "Member 'TgfCheatComponent_RebirthSelf::AbilitySystemComponent' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.RecoverAmmo
// 0x0008 (0x0008 - 0x0000)
struct TgfCheatComponent_RecoverAmmo final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_RecoverAmmo) == 0x000008, "Wrong alignment on TgfCheatComponent_RecoverAmmo");
static_assert(sizeof(TgfCheatComponent_RecoverAmmo) == 0x000008, "Wrong size on TgfCheatComponent_RecoverAmmo");
static_assert(offsetof(TgfCheatComponent_RecoverAmmo, InActor) == 0x000000, "Member 'TgfCheatComponent_RecoverAmmo::InActor' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.ReinitCharaCareer
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_ReinitCharaCareer final
{
public:
	class ALyraCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorCareer                               Career;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_ReinitCharaCareer) == 0x000008, "Wrong alignment on TgfCheatComponent_ReinitCharaCareer");
static_assert(sizeof(TgfCheatComponent_ReinitCharaCareer) == 0x000010, "Wrong size on TgfCheatComponent_ReinitCharaCareer");
static_assert(offsetof(TgfCheatComponent_ReinitCharaCareer, Character) == 0x000000, "Member 'TgfCheatComponent_ReinitCharaCareer::Character' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ReinitCharaCareer, Career) == 0x000008, "Member 'TgfCheatComponent_ReinitCharaCareer::Career' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.RemoveItemByDefinition
// 0x0018 (0x0018 - 0x0000)
struct TgfCheatComponent_RemoveItemByDefinition final
{
public:
	class UTgfInventoryManagerComponent*          InventoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumToRemove;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_RemoveItemByDefinition) == 0x000008, "Wrong alignment on TgfCheatComponent_RemoveItemByDefinition");
static_assert(sizeof(TgfCheatComponent_RemoveItemByDefinition) == 0x000018, "Wrong size on TgfCheatComponent_RemoveItemByDefinition");
static_assert(offsetof(TgfCheatComponent_RemoveItemByDefinition, InventoryComponent) == 0x000000, "Member 'TgfCheatComponent_RemoveItemByDefinition::InventoryComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_RemoveItemByDefinition, ItemDef) == 0x000008, "Member 'TgfCheatComponent_RemoveItemByDefinition::ItemDef' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_RemoveItemByDefinition, NumToRemove) == 0x000010, "Member 'TgfCheatComponent_RemoveItemByDefinition::NumToRemove' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.RemoveLooseGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct TgfCheatComponent_RemoveLooseGameplayTag final
{
public:
	class ULyraAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedReplicated;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_RemoveLooseGameplayTag) == 0x000008, "Wrong alignment on TgfCheatComponent_RemoveLooseGameplayTag");
static_assert(sizeof(TgfCheatComponent_RemoveLooseGameplayTag) == 0x000018, "Wrong size on TgfCheatComponent_RemoveLooseGameplayTag");
static_assert(offsetof(TgfCheatComponent_RemoveLooseGameplayTag, AbilitySystemComponent) == 0x000000, "Member 'TgfCheatComponent_RemoveLooseGameplayTag::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_RemoveLooseGameplayTag, GameplayTag) == 0x000008, "Member 'TgfCheatComponent_RemoveLooseGameplayTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_RemoveLooseGameplayTag, Nums) == 0x000010, "Member 'TgfCheatComponent_RemoveLooseGameplayTag::Nums' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_RemoveLooseGameplayTag, NeedReplicated) == 0x000014, "Member 'TgfCheatComponent_RemoveLooseGameplayTag::NeedReplicated' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.RemoveLooseGameplayTagWithFString
// 0x0020 (0x0020 - 0x0000)
struct TgfCheatComponent_RemoveLooseGameplayTagWithFString final
{
public:
	class ULyraAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedReplicated;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_RemoveLooseGameplayTagWithFString) == 0x000008, "Wrong alignment on TgfCheatComponent_RemoveLooseGameplayTagWithFString");
static_assert(sizeof(TgfCheatComponent_RemoveLooseGameplayTagWithFString) == 0x000020, "Wrong size on TgfCheatComponent_RemoveLooseGameplayTagWithFString");
static_assert(offsetof(TgfCheatComponent_RemoveLooseGameplayTagWithFString, AbilitySystemComponent) == 0x000000, "Member 'TgfCheatComponent_RemoveLooseGameplayTagWithFString::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_RemoveLooseGameplayTagWithFString, TagName) == 0x000008, "Member 'TgfCheatComponent_RemoveLooseGameplayTagWithFString::TagName' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_RemoveLooseGameplayTagWithFString, Nums) == 0x000018, "Member 'TgfCheatComponent_RemoveLooseGameplayTagWithFString::Nums' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_RemoveLooseGameplayTagWithFString, NeedReplicated) == 0x00001C, "Member 'TgfCheatComponent_RemoveLooseGameplayTagWithFString::NeedReplicated' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.RemovePlayerBots
// 0x0004 (0x0004 - 0x0000)
struct TgfCheatComponent_RemovePlayerBots final
{
public:
	int32                                         RemoveCnt;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_RemovePlayerBots) == 0x000004, "Wrong alignment on TgfCheatComponent_RemovePlayerBots");
static_assert(sizeof(TgfCheatComponent_RemovePlayerBots) == 0x000004, "Wrong size on TgfCheatComponent_RemovePlayerBots");
static_assert(offsetof(TgfCheatComponent_RemovePlayerBots, RemoveCnt) == 0x000000, "Member 'TgfCheatComponent_RemovePlayerBots::RemoveCnt' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.ResizeInventory
// 0x0018 (0x0018 - 0x0000)
struct TgfCheatComponent_ResizeInventory final
{
public:
	class UTgfInventoryManagerComponent*          InventoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Size;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_ResizeInventory) == 0x000008, "Wrong alignment on TgfCheatComponent_ResizeInventory");
static_assert(sizeof(TgfCheatComponent_ResizeInventory) == 0x000018, "Wrong size on TgfCheatComponent_ResizeInventory");
static_assert(offsetof(TgfCheatComponent_ResizeInventory, InventoryComponent) == 0x000000, "Member 'TgfCheatComponent_ResizeInventory::InventoryComponent' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ResizeInventory, Size) == 0x000008, "Member 'TgfCheatComponent_ResizeInventory::Size' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ResizeInventory, InventoryType) == 0x000010, "Member 'TgfCheatComponent_ResizeInventory::InventoryType' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.ServerSetPlayMontagePlay
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_ServerSetPlayMontagePlay final
{
public:
	bool                                          bOpenServerPlayDelay;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenClientBehind;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenClientAhead;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChaseMaxPing;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_ServerSetPlayMontagePlay) == 0x000004, "Wrong alignment on TgfCheatComponent_ServerSetPlayMontagePlay");
static_assert(sizeof(TgfCheatComponent_ServerSetPlayMontagePlay) == 0x000010, "Wrong size on TgfCheatComponent_ServerSetPlayMontagePlay");
static_assert(offsetof(TgfCheatComponent_ServerSetPlayMontagePlay, bOpenServerPlayDelay) == 0x000000, "Member 'TgfCheatComponent_ServerSetPlayMontagePlay::bOpenServerPlayDelay' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ServerSetPlayMontagePlay, DelayTime) == 0x000004, "Member 'TgfCheatComponent_ServerSetPlayMontagePlay::DelayTime' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ServerSetPlayMontagePlay, bOpenClientBehind) == 0x000008, "Member 'TgfCheatComponent_ServerSetPlayMontagePlay::bOpenClientBehind' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ServerSetPlayMontagePlay, bOpenClientAhead) == 0x000009, "Member 'TgfCheatComponent_ServerSetPlayMontagePlay::bOpenClientAhead' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ServerSetPlayMontagePlay, ChaseMaxPing) == 0x00000C, "Member 'TgfCheatComponent_ServerSetPlayMontagePlay::ChaseMaxPing' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.SetActorMapBounds
// 0x0008 (0x0008 - 0x0000)
struct TgfCheatComponent_SetActorMapBounds final
{
public:
	float                                         AIBound;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickBound;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_SetActorMapBounds) == 0x000004, "Wrong alignment on TgfCheatComponent_SetActorMapBounds");
static_assert(sizeof(TgfCheatComponent_SetActorMapBounds) == 0x000008, "Wrong size on TgfCheatComponent_SetActorMapBounds");
static_assert(offsetof(TgfCheatComponent_SetActorMapBounds, AIBound) == 0x000000, "Member 'TgfCheatComponent_SetActorMapBounds::AIBound' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_SetActorMapBounds, TickBound) == 0x000004, "Member 'TgfCheatComponent_SetActorMapBounds::TickBound' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.SetDeathZoneEnabled
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_SetDeathZoneEnabled final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Enabled;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_SetDeathZoneEnabled) == 0x000008, "Wrong alignment on TgfCheatComponent_SetDeathZoneEnabled");
static_assert(sizeof(TgfCheatComponent_SetDeathZoneEnabled) == 0x000010, "Wrong size on TgfCheatComponent_SetDeathZoneEnabled");
static_assert(offsetof(TgfCheatComponent_SetDeathZoneEnabled, World) == 0x000000, "Member 'TgfCheatComponent_SetDeathZoneEnabled::World' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_SetDeathZoneEnabled, Enabled) == 0x000008, "Member 'TgfCheatComponent_SetDeathZoneEnabled::Enabled' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.SetMithrilCharacter
// 0x0018 (0x0018 - 0x0000)
struct TgfCheatComponent_SetMithrilCharacter final
{
public:
	class ALyraCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingRebirthChance;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_SetMithrilCharacter) == 0x000008, "Wrong alignment on TgfCheatComponent_SetMithrilCharacter");
static_assert(sizeof(TgfCheatComponent_SetMithrilCharacter) == 0x000018, "Wrong size on TgfCheatComponent_SetMithrilCharacter");
static_assert(offsetof(TgfCheatComponent_SetMithrilCharacter, Character) == 0x000000, "Member 'TgfCheatComponent_SetMithrilCharacter::Character' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_SetMithrilCharacter, Value) == 0x000008, "Member 'TgfCheatComponent_SetMithrilCharacter::Value' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_SetMithrilCharacter, Level) == 0x00000C, "Member 'TgfCheatComponent_SetMithrilCharacter::Level' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_SetMithrilCharacter, RemainingRebirthChance) == 0x000010, "Member 'TgfCheatComponent_SetMithrilCharacter::RemainingRebirthChance' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.SetPlayerSceneTag
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_SetPlayerSceneTag final
{
public:
	class ALyraCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tag;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_SetPlayerSceneTag) == 0x000008, "Wrong alignment on TgfCheatComponent_SetPlayerSceneTag");
static_assert(sizeof(TgfCheatComponent_SetPlayerSceneTag) == 0x000010, "Wrong size on TgfCheatComponent_SetPlayerSceneTag");
static_assert(offsetof(TgfCheatComponent_SetPlayerSceneTag, Character) == 0x000000, "Member 'TgfCheatComponent_SetPlayerSceneTag::Character' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_SetPlayerSceneTag, Tag) == 0x000008, "Member 'TgfCheatComponent_SetPlayerSceneTag::Tag' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.ShowPortalLocations
// 0x0004 (0x0004 - 0x0000)
struct TgfCheatComponent_ShowPortalLocations final
{
public:
	int32                                         PortalType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_ShowPortalLocations) == 0x000004, "Wrong alignment on TgfCheatComponent_ShowPortalLocations");
static_assert(sizeof(TgfCheatComponent_ShowPortalLocations) == 0x000004, "Wrong size on TgfCheatComponent_ShowPortalLocations");
static_assert(offsetof(TgfCheatComponent_ShowPortalLocations, PortalType) == 0x000000, "Member 'TgfCheatComponent_ShowPortalLocations::PortalType' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.SpawnActor
// 0x0020 (0x0020 - 0x0000)
struct TgfCheatComponent_SpawnActor final
{
public:
	TSubclassOf<class AActor>                     Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_SpawnActor) == 0x000008, "Wrong alignment on TgfCheatComponent_SpawnActor");
static_assert(sizeof(TgfCheatComponent_SpawnActor) == 0x000020, "Wrong size on TgfCheatComponent_SpawnActor");
static_assert(offsetof(TgfCheatComponent_SpawnActor, Param_Class) == 0x000000, "Member 'TgfCheatComponent_SpawnActor::Param_Class' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_SpawnActor, Position) == 0x000008, "Member 'TgfCheatComponent_SpawnActor::Position' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.SpawnAllEscapeDevices
// 0x0008 (0x0008 - 0x0000)
struct TgfCheatComponent_SpawnAllEscapeDevices final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_SpawnAllEscapeDevices) == 0x000008, "Wrong alignment on TgfCheatComponent_SpawnAllEscapeDevices");
static_assert(sizeof(TgfCheatComponent_SpawnAllEscapeDevices) == 0x000008, "Wrong size on TgfCheatComponent_SpawnAllEscapeDevices");
static_assert(offsetof(TgfCheatComponent_SpawnAllEscapeDevices, World) == 0x000000, "Member 'TgfCheatComponent_SpawnAllEscapeDevices::World' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.SpawnMonster
// 0x0028 (0x0028 - 0x0000)
struct TgfCheatComponent_SpawnMonster final
{
public:
	TSubclassOf<class ALyraCharacter>             Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootIndex;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Dormant;                                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_SpawnMonster) == 0x000008, "Wrong alignment on TgfCheatComponent_SpawnMonster");
static_assert(sizeof(TgfCheatComponent_SpawnMonster) == 0x000028, "Wrong size on TgfCheatComponent_SpawnMonster");
static_assert(offsetof(TgfCheatComponent_SpawnMonster, Param_Class) == 0x000000, "Member 'TgfCheatComponent_SpawnMonster::Param_Class' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_SpawnMonster, Position) == 0x000008, "Member 'TgfCheatComponent_SpawnMonster::Position' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_SpawnMonster, LootIndex) == 0x000020, "Member 'TgfCheatComponent_SpawnMonster::LootIndex' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_SpawnMonster, Dormant) == 0x000024, "Member 'TgfCheatComponent_SpawnMonster::Dormant' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.SpawnOnePortal
// 0x0020 (0x0020 - 0x0000)
struct TgfCheatComponent_SpawnOnePortal final
{
public:
	int32                                         PortalType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_SpawnOnePortal) == 0x000008, "Wrong alignment on TgfCheatComponent_SpawnOnePortal");
static_assert(sizeof(TgfCheatComponent_SpawnOnePortal) == 0x000020, "Wrong size on TgfCheatComponent_SpawnOnePortal");
static_assert(offsetof(TgfCheatComponent_SpawnOnePortal, PortalType) == 0x000000, "Member 'TgfCheatComponent_SpawnOnePortal::PortalType' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_SpawnOnePortal, Location) == 0x000008, "Member 'TgfCheatComponent_SpawnOnePortal::Location' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.TeleportChara
// 0x0038 (0x0038 - 0x0000)
struct TgfCheatComponent_TeleportChara final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_TeleportChara) == 0x000008, "Wrong alignment on TgfCheatComponent_TeleportChara");
static_assert(sizeof(TgfCheatComponent_TeleportChara) == 0x000038, "Wrong size on TgfCheatComponent_TeleportChara");
static_assert(offsetof(TgfCheatComponent_TeleportChara, Pawn) == 0x000000, "Member 'TgfCheatComponent_TeleportChara::Pawn' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_TeleportChara, Location) == 0x000008, "Member 'TgfCheatComponent_TeleportChara::Location' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_TeleportChara, Rotation) == 0x000020, "Member 'TgfCheatComponent_TeleportChara::Rotation' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.ToggleIgnoreAbilitySystemArg
// 0x0008 (0x0008 - 0x0000)
struct TgfCheatComponent_ToggleIgnoreAbilitySystemArg final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_ToggleIgnoreAbilitySystemArg) == 0x000004, "Wrong alignment on TgfCheatComponent_ToggleIgnoreAbilitySystemArg");
static_assert(sizeof(TgfCheatComponent_ToggleIgnoreAbilitySystemArg) == 0x000008, "Wrong size on TgfCheatComponent_ToggleIgnoreAbilitySystemArg");
static_assert(offsetof(TgfCheatComponent_ToggleIgnoreAbilitySystemArg, Type) == 0x000000, "Member 'TgfCheatComponent_ToggleIgnoreAbilitySystemArg::Type' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_ToggleIgnoreAbilitySystemArg, Enabled) == 0x000004, "Member 'TgfCheatComponent_ToggleIgnoreAbilitySystemArg::Enabled' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.TryIncreaseAndCheckSecurityInvalidCount
// 0x0010 (0x0010 - 0x0000)
struct TgfCheatComponent_TryIncreaseAndCheckSecurityInvalidCount final
{
public:
	class ALyraPlayerController*                  PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reason;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCheatComponent_TryIncreaseAndCheckSecurityInvalidCount) == 0x000008, "Wrong alignment on TgfCheatComponent_TryIncreaseAndCheckSecurityInvalidCount");
static_assert(sizeof(TgfCheatComponent_TryIncreaseAndCheckSecurityInvalidCount) == 0x000010, "Wrong size on TgfCheatComponent_TryIncreaseAndCheckSecurityInvalidCount");
static_assert(offsetof(TgfCheatComponent_TryIncreaseAndCheckSecurityInvalidCount, PC) == 0x000000, "Member 'TgfCheatComponent_TryIncreaseAndCheckSecurityInvalidCount::PC' has a wrong offset!");
static_assert(offsetof(TgfCheatComponent_TryIncreaseAndCheckSecurityInvalidCount, Reason) == 0x000008, "Member 'TgfCheatComponent_TryIncreaseAndCheckSecurityInvalidCount::Reason' has a wrong offset!");

// Function LyraGame.TgfCheatComponent.WaitingRoomCountdown
// 0x0004 (0x0004 - 0x0000)
struct TgfCheatComponent_WaitingRoomCountdown final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCheatComponent_WaitingRoomCountdown) == 0x000004, "Wrong alignment on TgfCheatComponent_WaitingRoomCountdown");
static_assert(sizeof(TgfCheatComponent_WaitingRoomCountdown) == 0x000004, "Wrong size on TgfCheatComponent_WaitingRoomCountdown");
static_assert(offsetof(TgfCheatComponent_WaitingRoomCountdown, Time) == 0x000000, "Member 'TgfCheatComponent_WaitingRoomCountdown::Time' has a wrong offset!");

// Function LyraGame.LyraContextEffectsInterface.AnimMotionEffect
// 0x0180 (0x0180 - 0x0000)
struct LyraContextEffectsInterface_AnimMotionEffect final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MotionEffect;                                      // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        StaticMeshComponent;                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                AnimationSequence;                                 // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitSuccess;                                       // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0058(0x00E8)(ConstParm, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Contexts;                                          // 0x0140(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                VFXScale;                                          // 0x0160(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolume;                                       // 0x0178(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioPitch;                                        // 0x017C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraContextEffectsInterface_AnimMotionEffect) == 0x000008, "Wrong alignment on LyraContextEffectsInterface_AnimMotionEffect");
static_assert(sizeof(LyraContextEffectsInterface_AnimMotionEffect) == 0x000180, "Wrong size on LyraContextEffectsInterface_AnimMotionEffect");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, bone) == 0x000000, "Member 'LyraContextEffectsInterface_AnimMotionEffect::bone' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, MotionEffect) == 0x000008, "Member 'LyraContextEffectsInterface_AnimMotionEffect::MotionEffect' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, StaticMeshComponent) == 0x000010, "Member 'LyraContextEffectsInterface_AnimMotionEffect::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, LocationOffset) == 0x000018, "Member 'LyraContextEffectsInterface_AnimMotionEffect::LocationOffset' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, RotationOffset) == 0x000030, "Member 'LyraContextEffectsInterface_AnimMotionEffect::RotationOffset' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, AnimationSequence) == 0x000048, "Member 'LyraContextEffectsInterface_AnimMotionEffect::AnimationSequence' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, bHitSuccess) == 0x000050, "Member 'LyraContextEffectsInterface_AnimMotionEffect::bHitSuccess' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, HitResult) == 0x000058, "Member 'LyraContextEffectsInterface_AnimMotionEffect::HitResult' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, Contexts) == 0x000140, "Member 'LyraContextEffectsInterface_AnimMotionEffect::Contexts' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, VFXScale) == 0x000160, "Member 'LyraContextEffectsInterface_AnimMotionEffect::VFXScale' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, AudioVolume) == 0x000178, "Member 'LyraContextEffectsInterface_AnimMotionEffect::AudioVolume' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsInterface_AnimMotionEffect, AudioPitch) == 0x00017C, "Member 'LyraContextEffectsInterface_AnimMotionEffect::AudioPitch' has a wrong offset!");

// Function LyraGame.TgfHeadCosmeticDataAsset.UpdateHeadResConfigWithTemplateID
// 0x0064 (0x0064 - 0x0000)
struct TgfHeadCosmeticDataAsset_UpdateHeadResConfigWithTemplateID final
{
public:
	int32                                         InTemplateID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfHeadResConfig                      InHeadResConfig;                                   // 0x0004(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTgfHeadResConfig                      ReturnValue;                                       // 0x0034(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHeadCosmeticDataAsset_UpdateHeadResConfigWithTemplateID) == 0x000004, "Wrong alignment on TgfHeadCosmeticDataAsset_UpdateHeadResConfigWithTemplateID");
static_assert(sizeof(TgfHeadCosmeticDataAsset_UpdateHeadResConfigWithTemplateID) == 0x000064, "Wrong size on TgfHeadCosmeticDataAsset_UpdateHeadResConfigWithTemplateID");
static_assert(offsetof(TgfHeadCosmeticDataAsset_UpdateHeadResConfigWithTemplateID, InTemplateID) == 0x000000, "Member 'TgfHeadCosmeticDataAsset_UpdateHeadResConfigWithTemplateID::InTemplateID' has a wrong offset!");
static_assert(offsetof(TgfHeadCosmeticDataAsset_UpdateHeadResConfigWithTemplateID, InHeadResConfig) == 0x000004, "Member 'TgfHeadCosmeticDataAsset_UpdateHeadResConfigWithTemplateID::InHeadResConfig' has a wrong offset!");
static_assert(offsetof(TgfHeadCosmeticDataAsset_UpdateHeadResConfigWithTemplateID, ReturnValue) == 0x000034, "Member 'TgfHeadCosmeticDataAsset_UpdateHeadResConfigWithTemplateID::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraWeaponBase.K2_OnWeaponVisibleChanged
// 0x0001 (0x0001 - 0x0000)
struct LyraWeaponBase_K2_OnWeaponVisibleChanged final
{
public:
	bool                                          Visiblity;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWeaponBase_K2_OnWeaponVisibleChanged) == 0x000001, "Wrong alignment on LyraWeaponBase_K2_OnWeaponVisibleChanged");
static_assert(sizeof(LyraWeaponBase_K2_OnWeaponVisibleChanged) == 0x000001, "Wrong size on LyraWeaponBase_K2_OnWeaponVisibleChanged");
static_assert(offsetof(LyraWeaponBase_K2_OnWeaponVisibleChanged, Visiblity) == 0x000000, "Member 'LyraWeaponBase_K2_OnWeaponVisibleChanged::Visiblity' has a wrong offset!");

// Function LyraGame.LyraWeaponBase.OnRep_Held
// 0x0001 (0x0001 - 0x0000)
struct LyraWeaponBase_OnRep_Held final
{
public:
	bool                                          OldHeld;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWeaponBase_OnRep_Held) == 0x000001, "Wrong alignment on LyraWeaponBase_OnRep_Held");
static_assert(sizeof(LyraWeaponBase_OnRep_Held) == 0x000001, "Wrong size on LyraWeaponBase_OnRep_Held");
static_assert(offsetof(LyraWeaponBase_OnRep_Held, OldHeld) == 0x000000, "Member 'LyraWeaponBase_OnRep_Held::OldHeld' has a wrong offset!");

// Function LyraGame.LyraWeaponBase.SetEquipmentInstance
// 0x0008 (0x0008 - 0x0000)
struct LyraWeaponBase_SetEquipmentInstance final
{
public:
	class UTgfEquipmentInstance*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWeaponBase_SetEquipmentInstance) == 0x000008, "Wrong alignment on LyraWeaponBase_SetEquipmentInstance");
static_assert(sizeof(LyraWeaponBase_SetEquipmentInstance) == 0x000008, "Wrong size on LyraWeaponBase_SetEquipmentInstance");
static_assert(offsetof(LyraWeaponBase_SetEquipmentInstance, Instance) == 0x000000, "Member 'LyraWeaponBase_SetEquipmentInstance::Instance' has a wrong offset!");

// Function LyraGame.LyraWeaponBase.GetEquipmentInstance
// 0x0008 (0x0008 - 0x0000)
struct LyraWeaponBase_GetEquipmentInstance final
{
public:
	class UTgfEquipmentInstance*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWeaponBase_GetEquipmentInstance) == 0x000008, "Wrong alignment on LyraWeaponBase_GetEquipmentInstance");
static_assert(sizeof(LyraWeaponBase_GetEquipmentInstance) == 0x000008, "Wrong size on LyraWeaponBase_GetEquipmentInstance");
static_assert(offsetof(LyraWeaponBase_GetEquipmentInstance, ReturnValue) == 0x000000, "Member 'LyraWeaponBase_GetEquipmentInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFCombatZoneComponent.IsInside
// 0x0020 (0x0020 - 0x0000)
struct TGFCombatZoneComponent_IsInside final
{
public:
	struct FVector                                InPoint;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFCombatZoneComponent_IsInside) == 0x000008, "Wrong alignment on TGFCombatZoneComponent_IsInside");
static_assert(sizeof(TGFCombatZoneComponent_IsInside) == 0x000020, "Wrong size on TGFCombatZoneComponent_IsInside");
static_assert(offsetof(TGFCombatZoneComponent_IsInside, InPoint) == 0x000000, "Member 'TGFCombatZoneComponent_IsInside::InPoint' has a wrong offset!");
static_assert(offsetof(TGFCombatZoneComponent_IsInside, ReturnValue) == 0x000018, "Member 'TGFCombatZoneComponent_IsInside::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.AbilityTargetDataFromPassiveMoveInfo
// 0x0068 (0x0068 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_AbilityTargetDataFromPassiveMoveInfo final
{
public:
	struct FTgfGameplayAbilityTargetingPassiveMoveInfo PassiveMoveInfo;                                   // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       ReturnValue;                                       // 0x0040(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_AbilityTargetDataFromPassiveMoveInfo) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_AbilityTargetDataFromPassiveMoveInfo");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_AbilityTargetDataFromPassiveMoveInfo) == 0x000068, "Wrong size on TgfAbilitySystemBlueprintLibrary_AbilityTargetDataFromPassiveMoveInfo");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AbilityTargetDataFromPassiveMoveInfo, PassiveMoveInfo) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_AbilityTargetDataFromPassiveMoveInfo::PassiveMoveInfo' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AbilityTargetDataFromPassiveMoveInfo, ReturnValue) == 0x000040, "Member 'TgfAbilitySystemBlueprintLibrary_AbilityTargetDataFromPassiveMoveInfo::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.AddFullWeaponAmmo
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_AddFullWeaponAmmo final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_AddFullWeaponAmmo) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_AddFullWeaponAmmo");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_AddFullWeaponAmmo) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_AddFullWeaponAmmo");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AddFullWeaponAmmo, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_AddFullWeaponAmmo::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AddFullWeaponAmmo, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_AddFullWeaponAmmo::Right' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.AddGameplayEffectContextSourceObject
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_AddGameplayEffectContextSourceObject final
{
public:
	struct FGameplayEffectContextHandle           GECH;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_AddGameplayEffectContextSourceObject) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_AddGameplayEffectContextSourceObject");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_AddGameplayEffectContextSourceObject) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_AddGameplayEffectContextSourceObject");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AddGameplayEffectContextSourceObject, GECH) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_AddGameplayEffectContextSourceObject::GECH' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AddGameplayEffectContextSourceObject, Object) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_AddGameplayEffectContextSourceObject::Object' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.AddItemByDef
// 0x0028 (0x0028 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_AddItemByDef final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTgfInventoryItemDefinition> ItemDef;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClassName;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_AddItemByDef) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_AddItemByDef");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_AddItemByDef) == 0x000028, "Wrong size on TgfAbilitySystemBlueprintLibrary_AddItemByDef");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AddItemByDef, Target) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_AddItemByDef::Target' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AddItemByDef, ItemDef) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_AddItemByDef::ItemDef' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AddItemByDef, Num) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_AddItemByDef::Num' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AddItemByDef, ClassName) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_AddItemByDef::ClassName' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.AddWeaponAmmoByCountWithoutCostItem
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_AddWeaponAmmoByCountWithoutCostItem final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddCount;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_AddWeaponAmmoByCountWithoutCostItem) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_AddWeaponAmmoByCountWithoutCostItem");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_AddWeaponAmmoByCountWithoutCostItem) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_AddWeaponAmmoByCountWithoutCostItem");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AddWeaponAmmoByCountWithoutCostItem, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_AddWeaponAmmoByCountWithoutCostItem::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AddWeaponAmmoByCountWithoutCostItem, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_AddWeaponAmmoByCountWithoutCostItem::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AddWeaponAmmoByCountWithoutCostItem, AddCount) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_AddWeaponAmmoByCountWithoutCostItem::AddCount' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.AfterApplyGEWithSpec
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_AfterApplyGEWithSpec final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpec>            GESpecApplied;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_AfterApplyGEWithSpec) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_AfterApplyGEWithSpec");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_AfterApplyGEWithSpec) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_AfterApplyGEWithSpec");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AfterApplyGEWithSpec, Instigator) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_AfterApplyGEWithSpec::Instigator' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AfterApplyGEWithSpec, Target) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_AfterApplyGEWithSpec::Target' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AfterApplyGEWithSpec, GESpecApplied) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_AfterApplyGEWithSpec::GESpecApplied' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.AmmoAutoRecoverByInstance
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverByInstance final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryItemInstance*              Instance;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverByInstance) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverByInstance");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverByInstance) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverByInstance");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverByInstance, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverByInstance::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverByInstance, Instance) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverByInstance::Instance' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverByInstance, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverByInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.AmmoAutoRecoverBySlot
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverBySlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          ChangeSlot;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverBySlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverBySlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverBySlot) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverBySlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverBySlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverBySlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverBySlot, ChangeSlot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_AmmoAutoRecoverBySlot::ChangeSlot' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.AmmoClearByInstance
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_AmmoClearByInstance final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryItemInstance*              Instance;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_AmmoClearByInstance) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_AmmoClearByInstance");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_AmmoClearByInstance) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_AmmoClearByInstance");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AmmoClearByInstance, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_AmmoClearByInstance::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AmmoClearByInstance, Instance) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_AmmoClearByInstance::Instance' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AmmoClearByInstance, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_AmmoClearByInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.ApplyAOEWithGA
// 0x01D0 (0x01D0 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Targets;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNum;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraTeamComparison                           TeamRestrict;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALyraCharacter*>                 AppliedActors;                                     // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       SourceGA;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfApplyAOEExtraParam                 ExtraParams;                                       // 0x0040(0x0190)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA) == 0x0001D0, "Wrong size on TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA, Source) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA::Source' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA, Targets) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA::Targets' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA, GameplayEffectClass) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA, MaxNum) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA::MaxNum' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA, TeamRestrict) == 0x000024, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA::TeamRestrict' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA, AppliedActors) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA::AppliedActors' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA, SourceGA) == 0x000038, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA::SourceGA' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA, ExtraParams) == 0x000040, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyAOEWithGA::ExtraParams' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.ApplyGE
// 0x0050 (0x0050 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_ApplyGE final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                ASCInstigator;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                ASCHitActor;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           GECH;                                              // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    GEs;                                               // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         DamageRate;                                        // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponAttack;                                      // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_ApplyGE) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_ApplyGE");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_ApplyGE) == 0x000050, "Wrong size on TgfAbilitySystemBlueprintLibrary_ApplyGE");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyGE, Instigator) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyGE::Instigator' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyGE, Target) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyGE::Target' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyGE, ASCInstigator) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyGE::ASCInstigator' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyGE, ASCHitActor) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyGE::ASCHitActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyGE, GECH) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyGE::GECH' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyGE, GEs) == 0x000038, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyGE::GEs' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyGE, DamageRate) == 0x000048, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyGE::DamageRate' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyGE, WeaponAttack) == 0x00004C, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyGE::WeaponAttack' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.ApplyHitValueAndInterrupt
// 0x0048 (0x0048 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt final
{
public:
	float                                         HitValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           InEffectContext;                                   // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            InterruptGEClass;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Src;                                               // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Trg;                                               // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetIsPlayer;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanCauseInterrupt;                                 // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Level;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt) == 0x000048, "Wrong size on TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt, HitValue) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt::HitValue' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt, InEffectContext) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt::InEffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt, InterruptGEClass) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt::InterruptGEClass' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt, Src) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt::Src' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt, Trg) == 0x000030, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt::Trg' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt, TargetIsPlayer) == 0x000038, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt::TargetIsPlayer' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt, CanCauseInterrupt) == 0x000039, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt::CanCauseInterrupt' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt, Level) == 0x00003C, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt::Level' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt, ReturnValue) == 0x000040, "Member 'TgfAbilitySystemBlueprintLibrary_ApplyHitValueAndInterrupt::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.AutoFillAdditionalWeaponSlot
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_AutoFillAdditionalWeaponSlot final
{
public:
	class ALyraCharacter*                         LyraCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSubType                              WeaponType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_AutoFillAdditionalWeaponSlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_AutoFillAdditionalWeaponSlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_AutoFillAdditionalWeaponSlot) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_AutoFillAdditionalWeaponSlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AutoFillAdditionalWeaponSlot, LyraCharacter) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_AutoFillAdditionalWeaponSlot::LyraCharacter' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_AutoFillAdditionalWeaponSlot, WeaponType) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_AutoFillAdditionalWeaponSlot::WeaponType' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.BeforeApplyGEWithSpec
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_BeforeApplyGEWithSpec final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpec>            GESpecToApply;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_BeforeApplyGEWithSpec) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_BeforeApplyGEWithSpec");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_BeforeApplyGEWithSpec) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_BeforeApplyGEWithSpec");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_BeforeApplyGEWithSpec, Instigator) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_BeforeApplyGEWithSpec::Instigator' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_BeforeApplyGEWithSpec, Target) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_BeforeApplyGEWithSpec::Target' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_BeforeApplyGEWithSpec, GESpecToApply) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_BeforeApplyGEWithSpec::GESpecToApply' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.CalcHitValue
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_CalcHitValue final
{
public:
	class AActor*                                 SrcActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TrgActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfUseAttackType                             AttackType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Guarded;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideAtk;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideDef;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_CalcHitValue) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_CalcHitValue");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_CalcHitValue) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_CalcHitValue");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CalcHitValue, SrcActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_CalcHitValue::SrcActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CalcHitValue, TrgActor) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_CalcHitValue::TrgActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CalcHitValue, AttackType) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_CalcHitValue::AttackType' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CalcHitValue, Guarded) == 0x000011, "Member 'TgfAbilitySystemBlueprintLibrary_CalcHitValue::Guarded' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CalcHitValue, OverrideAtk) == 0x000014, "Member 'TgfAbilitySystemBlueprintLibrary_CalcHitValue::OverrideAtk' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CalcHitValue, OverrideDef) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_CalcHitValue::OverrideDef' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CalcHitValue, ReturnValue) == 0x00001C, "Member 'TgfAbilitySystemBlueprintLibrary_CalcHitValue::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.CanBeTarget
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_CanBeTarget final
{
public:
	class AActor*                                 InputActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_CanBeTarget) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_CanBeTarget");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_CanBeTarget) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_CanBeTarget");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CanBeTarget, InputActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_CanBeTarget::InputActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CanBeTarget, ReturnValue) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_CanBeTarget::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.CapsuleTraceMultiWithHeightLimit
// 0x0090 (0x0090 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotHigherThanCenter;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotLowerThanCenter;                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     OutHits;                                           // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0064(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x0074(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit) == 0x000090, "Wrong size on TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, WorldContextObject) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, Center) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::Center' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, Radius) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::Radius' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, HalfHeight) == 0x000024, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::HalfHeight' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, NotHigherThanCenter) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::NotHigherThanCenter' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, NotLowerThanCenter) == 0x00002C, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::NotLowerThanCenter' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, TraceChannel) == 0x000030, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::TraceChannel' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, bTraceComplex) == 0x000031, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::bTraceComplex' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, ActorsToIgnore) == 0x000038, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, DrawDebugType) == 0x000048, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::DrawDebugType' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, OutHits) == 0x000050, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::OutHits' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, bIgnoreSelf) == 0x000060, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, TraceColor) == 0x000064, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::TraceColor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, TraceHitColor) == 0x000074, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::TraceHitColor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, DrawTime) == 0x000084, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::DrawTime' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit, ReturnValue) == 0x000088, "Member 'TgfAbilitySystemBlueprintLibrary_CapsuleTraceMultiWithHeightLimit::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.CheckCanReload
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_CheckCanReload final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_CheckCanReload) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_CheckCanReload");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_CheckCanReload) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_CheckCanReload");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckCanReload, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_CheckCanReload::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckCanReload, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_CheckCanReload::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckCanReload, ReturnValue) == 0x000009, "Member 'TgfAbilitySystemBlueprintLibrary_CheckCanReload::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.CheckGuardedProjectile
// 0x00F8 (0x00F8 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_CheckGuardedProjectile final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x00E8)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_CheckGuardedProjectile) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_CheckGuardedProjectile");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_CheckGuardedProjectile) == 0x0000F8, "Wrong size on TgfAbilitySystemBlueprintLibrary_CheckGuardedProjectile");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckGuardedProjectile, HitActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_CheckGuardedProjectile::HitActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckGuardedProjectile, HitResult) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_CheckGuardedProjectile::HitResult' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckGuardedProjectile, ReturnValue) == 0x0000F0, "Member 'TgfAbilitySystemBlueprintLibrary_CheckGuardedProjectile::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.CheckHasAbility
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_CheckHasAbility final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>           InAbilityClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_CheckHasAbility) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_CheckHasAbility");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_CheckHasAbility) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_CheckHasAbility");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckHasAbility, Actor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_CheckHasAbility::Actor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckHasAbility, InAbilityClass) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_CheckHasAbility::InAbilityClass' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckHasAbility, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_CheckHasAbility::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.CheckNeedSnap
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_CheckNeedSnap final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_CheckNeedSnap) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_CheckNeedSnap");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_CheckNeedSnap) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_CheckNeedSnap");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckNeedSnap, Montage) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_CheckNeedSnap::Montage' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckNeedSnap, ReturnValue) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_CheckNeedSnap::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.CheckNeedTriggerReload
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_CheckNeedTriggerReload final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_CheckNeedTriggerReload) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_CheckNeedTriggerReload");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_CheckNeedTriggerReload) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_CheckNeedTriggerReload");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckNeedTriggerReload, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_CheckNeedTriggerReload::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckNeedTriggerReload, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_CheckNeedTriggerReload::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckNeedTriggerReload, ReturnValue) == 0x000009, "Member 'TgfAbilitySystemBlueprintLibrary_CheckNeedTriggerReload::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.CheckVisibilityToLocalPlayer
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_CheckVisibilityToLocalPlayer final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VisibleTag;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_CheckVisibilityToLocalPlayer) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_CheckVisibilityToLocalPlayer");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_CheckVisibilityToLocalPlayer) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_CheckVisibilityToLocalPlayer");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckVisibilityToLocalPlayer, TargetActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_CheckVisibilityToLocalPlayer::TargetActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckVisibilityToLocalPlayer, VisibleTag) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_CheckVisibilityToLocalPlayer::VisibleTag' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_CheckVisibilityToLocalPlayer, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_CheckVisibilityToLocalPlayer::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.ConsumeItemByWeaponInHand
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand, Num) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand::Num' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_ConsumeItemByWeaponInHand::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.DisperseActiveBuff
// 0x0040 (0x0040 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  HighPriorityTags;                                  // 0x0018(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff) == 0x000040, "Wrong size on TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff, Actors) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff::Actors' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff, Tag) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff::Tag' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff, HighPriorityTags) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff::HighPriorityTags' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff, Num) == 0x000038, "Member 'TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff::Num' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff, ReturnValue) == 0x00003C, "Member 'TgfAbilitySystemBlueprintLibrary_DisperseActiveBuff::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.DoFullReload
// 0x0008 (0x0008 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_DoFullReload final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_DoFullReload) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_DoFullReload");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_DoFullReload) == 0x000008, "Wrong size on TgfAbilitySystemBlueprintLibrary_DoFullReload");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_DoFullReload, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_DoFullReload::InActor' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.DropAllAdditionalInventoryItem
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_DropAllAdditionalInventoryItem final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULyraInventoryItemInstance*>     Items;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_DropAllAdditionalInventoryItem) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_DropAllAdditionalInventoryItem");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_DropAllAdditionalInventoryItem) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_DropAllAdditionalInventoryItem");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_DropAllAdditionalInventoryItem, Target) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_DropAllAdditionalInventoryItem::Target' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_DropAllAdditionalInventoryItem, Items) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_DropAllAdditionalInventoryItem::Items' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextAddExtraParam
// 0x0038 (0x0038 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextAddExtraParam final
{
public:
	struct FGameplayEffectContextHandle           InEffectContext;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FTgfGameplayEffectExtraParam           InExtraParam;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextAddExtraParam) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextAddExtraParam");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextAddExtraParam) == 0x000038, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextAddExtraParam");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextAddExtraParam, InEffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextAddExtraParam::InEffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextAddExtraParam, InExtraParam) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextAddExtraParam::InExtraParam' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextAddExtraParam, bReset) == 0x000030, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextAddExtraParam::bReset' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextAddInstigator
// 0x0028 (0x0028 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextAddInstigator final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 InInstigator;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InEffectCauser;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextAddInstigator) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextAddInstigator");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextAddInstigator) == 0x000028, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextAddInstigator");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextAddInstigator, EffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextAddInstigator::EffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextAddInstigator, InInstigator) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextAddInstigator::InInstigator' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextAddInstigator, InEffectCauser) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextAddInstigator::InEffectCauser' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextGetAbility
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextGetAbility final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	const class UGameplayAbility*                 ReturnValue;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextGetAbility) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextGetAbility");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextGetAbility) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextGetAbility");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetAbility, EffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetAbility::EffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetAbility, ReturnValue) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetAbility::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextGetAbilityInstance
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextGetAbilityInstance final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	const class UGameplayAbility*                 ReturnValue;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextGetAbilityInstance) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextGetAbilityInstance");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextGetAbilityInstance) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextGetAbilityInstance");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetAbilityInstance, EffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetAbilityInstance::EffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetAbilityInstance, ReturnValue) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetAbilityInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextGetCriticalRandomValue
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextGetCriticalRandomValue final
{
public:
	struct FGameplayEffectContextHandle           InEffectContext;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextGetCriticalRandomValue) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextGetCriticalRandomValue");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextGetCriticalRandomValue) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextGetCriticalRandomValue");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetCriticalRandomValue, InEffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetCriticalRandomValue::InEffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetCriticalRandomValue, ReturnValue) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetCriticalRandomValue::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextGetExtraParam
// 0x0030 (0x0030 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextGetExtraParam final
{
public:
	struct FGameplayEffectContextHandle           InEffectContext;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FTgfGameplayEffectExtraParam           ReturnValue;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextGetExtraParam) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextGetExtraParam");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextGetExtraParam) == 0x000030, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextGetExtraParam");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetExtraParam, InEffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetExtraParam::InEffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetExtraParam, ReturnValue) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetExtraParam::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextGetHitValue
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextGetHitValue final
{
public:
	struct FGameplayEffectContextHandle           InEffectContext;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextGetHitValue) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextGetHitValue");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextGetHitValue) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextGetHitValue");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetHitValue, InEffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetHitValue::InEffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetHitValue, ReturnValue) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetHitValue::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextGetNormalWeight
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextGetNormalWeight final
{
public:
	struct FGameplayEffectContextHandle           InEffectContext;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextGetNormalWeight) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextGetNormalWeight");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextGetNormalWeight) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextGetNormalWeight");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetNormalWeight, InEffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetNormalWeight::InEffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetNormalWeight, ReturnValue) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetNormalWeight::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextGetTangentWeight
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextGetTangentWeight final
{
public:
	struct FGameplayEffectContextHandle           InEffectContext;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextGetTangentWeight) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextGetTangentWeight");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextGetTangentWeight) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextGetTangentWeight");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetTangentWeight, InEffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetTangentWeight::InEffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextGetTangentWeight, ReturnValue) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextGetTangentWeight::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextHasExtraParam
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextHasExtraParam final
{
public:
	struct FGameplayEffectContextHandle           InEffectContext;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextHasExtraParam) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextHasExtraParam");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextHasExtraParam) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextHasExtraParam");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextHasExtraParam, InEffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextHasExtraParam::InEffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextHasExtraParam, ReturnValue) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextHasExtraParam::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextSetCriticalRandomValue
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextSetCriticalRandomValue final
{
public:
	struct FGameplayEffectContextHandle           InEffectContext;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextSetCriticalRandomValue) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextSetCriticalRandomValue");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextSetCriticalRandomValue) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextSetCriticalRandomValue");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextSetCriticalRandomValue, InEffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextSetCriticalRandomValue::InEffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextSetCriticalRandomValue, InValue) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextSetCriticalRandomValue::InValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextSetDirectionWeight
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextSetDirectionWeight final
{
public:
	struct FGameplayEffectContextHandle           InEffectContext;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         InNormalWeight;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTangentWeight;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextSetDirectionWeight) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextSetDirectionWeight");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextSetDirectionWeight) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextSetDirectionWeight");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextSetDirectionWeight, InEffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextSetDirectionWeight::InEffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextSetDirectionWeight, InNormalWeight) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextSetDirectionWeight::InNormalWeight' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextSetDirectionWeight, InTangentWeight) == 0x00001C, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextSetDirectionWeight::InTangentWeight' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextSetHitValue
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextSetHitValue final
{
public:
	struct FGameplayEffectContextHandle           InEffectContext;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         InHitValue;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextSetHitValue) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextSetHitValue");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextSetHitValue) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextSetHitValue");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextSetHitValue, InEffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextSetHitValue::InEffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextSetHitValue, InHitValue) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextSetHitValue::InHitValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.EffectContextSetSourceAbility
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_EffectContextSetSourceAbility final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	const class UGameplayAbility*                 GameplayAbility;                                   // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_EffectContextSetSourceAbility) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_EffectContextSetSourceAbility");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_EffectContextSetSourceAbility) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_EffectContextSetSourceAbility");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextSetSourceAbility, EffectContext) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextSetSourceAbility::EffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_EffectContextSetSourceAbility, GameplayAbility) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_EffectContextSetSourceAbility::GameplayAbility' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.FindBackStabActor
// 0x0050 (0x0050 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_FindBackStabActor final
{
public:
	class AActor*                                 SrcActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ViewForward;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ViewPos;                                           // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackDegree;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDegree;                                           // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VDegree;                                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_FindBackStabActor) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_FindBackStabActor");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_FindBackStabActor) == 0x000050, "Wrong size on TgfAbilitySystemBlueprintLibrary_FindBackStabActor");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindBackStabActor, SrcActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_FindBackStabActor::SrcActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindBackStabActor, ViewForward) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_FindBackStabActor::ViewForward' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindBackStabActor, ViewPos) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_FindBackStabActor::ViewPos' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindBackStabActor, BackDegree) == 0x000038, "Member 'TgfAbilitySystemBlueprintLibrary_FindBackStabActor::BackDegree' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindBackStabActor, HDegree) == 0x00003C, "Member 'TgfAbilitySystemBlueprintLibrary_FindBackStabActor::HDegree' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindBackStabActor, VDegree) == 0x000040, "Member 'TgfAbilitySystemBlueprintLibrary_FindBackStabActor::VDegree' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindBackStabActor, Radius) == 0x000044, "Member 'TgfAbilitySystemBlueprintLibrary_FindBackStabActor::Radius' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindBackStabActor, ReturnValue) == 0x000048, "Member 'TgfAbilitySystemBlueprintLibrary_FindBackStabActor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.FindDefaultComponentByClass
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_FindDefaultComponentByClass final
{
public:
	TSubclassOf<class AActor>                     InActorClass;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            InComponentClass;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_FindDefaultComponentByClass) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_FindDefaultComponentByClass");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_FindDefaultComponentByClass) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_FindDefaultComponentByClass");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindDefaultComponentByClass, InActorClass) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_FindDefaultComponentByClass::InActorClass' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindDefaultComponentByClass, InComponentClass) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_FindDefaultComponentByClass::InComponentClass' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindDefaultComponentByClass, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_FindDefaultComponentByClass::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.FindProperGroundPos
// 0x0040 (0x0040 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_FindProperGroundPos final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NowPos;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckDepth;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_FindProperGroundPos) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_FindProperGroundPos");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_FindProperGroundPos) == 0x000040, "Wrong size on TgfAbilitySystemBlueprintLibrary_FindProperGroundPos");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindProperGroundPos, WorldContextObject) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_FindProperGroundPos::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindProperGroundPos, NowPos) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_FindProperGroundPos::NowPos' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindProperGroundPos, CheckDepth) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_FindProperGroundPos::CheckDepth' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_FindProperGroundPos, ReturnValue) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_FindProperGroundPos::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetActiveGameplayEffectHandleByClass
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTgfGameplayEffect>         GEClass;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            OutHandle;                                         // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass, Target) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass::Target' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass, GEClass) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass::GEClass' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass, OutHandle) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass::OutHandle' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass, ReturnValue) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_GetActiveGameplayEffectHandleByClass::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetAllMatchingTags
// 0x0048 (0x0048 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetAllMatchingTags final
{
public:
	class ULyraAbilitySystemComponent*            ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToMatch;                                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MatchResult;                                       // 0x0028(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetAllMatchingTags) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetAllMatchingTags");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetAllMatchingTags) == 0x000048, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetAllMatchingTags");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAllMatchingTags, ASC) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetAllMatchingTags::ASC' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAllMatchingTags, TagsToMatch) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetAllMatchingTags::TagsToMatch' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAllMatchingTags, MatchResult) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_GetAllMatchingTags::MatchResult' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetAmmoItemCount
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetAmmoItemCount final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetAmmoItemCount) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetAmmoItemCount");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetAmmoItemCount) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetAmmoItemCount");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAmmoItemCount, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetAmmoItemCount::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAmmoItemCount, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetAmmoItemCount::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAmmoItemCount, ReturnValue) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetAmmoItemCount::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetAmmoItemCountBySlot
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetAmmoItemCountBySlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetAmmoItemCountBySlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetAmmoItemCountBySlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetAmmoItemCountBySlot) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetAmmoItemCountBySlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAmmoItemCountBySlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetAmmoItemCountBySlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAmmoItemCountBySlot, Slot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetAmmoItemCountBySlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAmmoItemCountBySlot, ReturnValue) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetAmmoItemCountBySlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetAnimDriveProjectileTemplateByEquipSlot
// 0x0028 (0x0028 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATgfProjectileBase>         DefaultProjectileTemplate;                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutResult;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATgfProjectileBase>         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot) == 0x000028, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot, Slot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot, IgnoreIndex) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot::IgnoreIndex' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot, DefaultProjectileTemplate) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot::DefaultProjectileTemplate' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot, bOutResult) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot::bOutResult' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot, ReturnValue) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_GetAnimDriveProjectileTemplateByEquipSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetAttackRate
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetAttackRate final
{
public:
	class AActor*                                 SrcActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultRate;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetAttackRate) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetAttackRate");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetAttackRate) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetAttackRate");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAttackRate, SrcActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetAttackRate::SrcActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAttackRate, DefaultRate) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetAttackRate::DefaultRate' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAttackRate, ReturnValue) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetAttackRate::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetAttackWeight
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetAttackWeight final
{
public:
	class AActor*                                 SrcActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfUseAttackType                             AttackType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetAttackWeight) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetAttackWeight");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetAttackWeight) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetAttackWeight");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAttackWeight, SrcActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetAttackWeight::SrcActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAttackWeight, AttackType) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetAttackWeight::AttackType' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetAttackWeight, ReturnValue) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetAttackWeight::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetConsoleVariableSourceByName
// 0x0020 (0x0020 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetConsoleVariableSourceByName final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetConsoleVariableSourceByName) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetConsoleVariableSourceByName");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetConsoleVariableSourceByName) == 0x000020, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetConsoleVariableSourceByName");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetConsoleVariableSourceByName, VariableName) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetConsoleVariableSourceByName::VariableName' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetConsoleVariableSourceByName, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetConsoleVariableSourceByName::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetControllerFromGameplayCueParameters
// 0x00E8 (0x00E8 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetControllerFromGameplayCueParameters final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class APlayerController*                      ReturnValue;                                       // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetControllerFromGameplayCueParameters) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetControllerFromGameplayCueParameters");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetControllerFromGameplayCueParameters) == 0x0000E8, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetControllerFromGameplayCueParameters");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetControllerFromGameplayCueParameters, Parameters) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetControllerFromGameplayCueParameters::Parameters' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetControllerFromGameplayCueParameters, ReturnValue) == 0x0000E0, "Member 'TgfAbilitySystemBlueprintLibrary_GetControllerFromGameplayCueParameters::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetCoolDownCountDuration
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetCoolDownCountDuration final
{
public:
	class AActor*                                 SrcActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultDuration;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetCoolDownCountDuration) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetCoolDownCountDuration");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetCoolDownCountDuration) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetCoolDownCountDuration");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCoolDownCountDuration, SrcActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetCoolDownCountDuration::SrcActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCoolDownCountDuration, DefaultDuration) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetCoolDownCountDuration::DefaultDuration' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCoolDownCountDuration, ReturnValue) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetCoolDownCountDuration::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetCurrentCharacterState
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetCurrentCharacterState final
{
public:
	class ALyraCharacter*                         InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CharacterStateTag;                                 // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetCurrentCharacterState) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetCurrentCharacterState");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetCurrentCharacterState) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetCurrentCharacterState");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentCharacterState, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentCharacterState::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentCharacterState, CharacterStateTag) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentCharacterState::CharacterStateTag' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentCharacterState, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentCharacterState::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetCurrentHandEquipInstance
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipInstance final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraEquipmentInstance*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipInstance) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipInstance");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipInstance) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipInstance");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipInstance, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipInstance::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipInstance, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipInstance::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipInstance, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetCurrentHandEquipSlot
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipSlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipSlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipSlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipSlot) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipSlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipSlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipSlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipSlot, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipSlot::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipSlot, ReturnValue) == 0x000009, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentHandEquipSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetCurrentWeaponDefinition
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTgfWeaponDefinition*             ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition, IgnoreIndex) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition::IgnoreIndex' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetCurrentWeaponFirstActor
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponFirstActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponFirstActor) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponFirstActor");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponFirstActor) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponFirstActor");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponFirstActor, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponFirstActor::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponFirstActor, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponFirstActor::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponFirstActor, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetCurrentWeaponFirstActor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetDamageSourceDir
// 0x0038 (0x0038 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir final
{
public:
	float                                         OutAngle;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir) == 0x000038, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir, OutAngle) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir::OutAngle' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir, EffectContext) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir::EffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir, Instigator) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir::Instigator' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir, Target) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir::Target' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir, ReturnValue) == 0x000030, "Member 'TgfAbilitySystemBlueprintLibrary_GetDamageSourceDir::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetDefendValue
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetDefendValue final
{
public:
	class AActor*                                 SrcActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Guarded;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetDefendValue) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetDefendValue");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetDefendValue) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetDefendValue");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDefendValue, SrcActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetDefendValue::SrcActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDefendValue, Guarded) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetDefendValue::Guarded' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDefendValue, ReturnValue) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetDefendValue::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetDisplayQualityByEquipSlot
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipQuality                              ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot, Slot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot, IgnoreIndex) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot::IgnoreIndex' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetDisplayQualityByEquipSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetEquipSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetEquipSkeletalMesh final
{
public:
	class ULyraEquipmentInstance*                 EquipInstance;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetEquipSkeletalMesh) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetEquipSkeletalMesh");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetEquipSkeletalMesh) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetEquipSkeletalMesh");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetEquipSkeletalMesh, EquipInstance) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetEquipSkeletalMesh::EquipInstance' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetEquipSkeletalMesh, ReturnValue) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetEquipSkeletalMesh::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetInventoryItemInstanceByEquipSlot
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot, Slot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot, IgnoreIndex) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot::IgnoreIndex' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetInventoryItemInstanceByEquipSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetMontageRate
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetMontageRate final
{
public:
	class AActor*                                 SrcActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfMontageRateType                           RateType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultRate;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetMontageRate) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetMontageRate");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetMontageRate) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetMontageRate");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetMontageRate, SrcActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetMontageRate::SrcActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetMontageRate, RateType) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetMontageRate::RateType' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetMontageRate, DefaultRate) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetMontageRate::DefaultRate' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetMontageRate, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetMontageRate::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetMoveActorNotifyDuration
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetMoveActorNotifyDuration final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetMoveActorNotifyDuration) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetMoveActorNotifyDuration");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetMoveActorNotifyDuration) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetMoveActorNotifyDuration");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetMoveActorNotifyDuration, Montage) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetMoveActorNotifyDuration::Montage' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetMoveActorNotifyDuration, ReturnValue) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetMoveActorNotifyDuration::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetNoHitProjectileTemplateByEquipSlot
// 0x0028 (0x0028 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATgfProjectileBase>         DefaultProjectileTemplate;                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutResult;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATgfProjectileBase>         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot) == 0x000028, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot, Slot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot, IgnoreIndex) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot::IgnoreIndex' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot, DefaultProjectileTemplate) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot::DefaultProjectileTemplate' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot, bOutResult) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot::bOutResult' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot, ReturnValue) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_GetNoHitProjectileTemplateByEquipSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetNormalProjectileTemplateByEquipSlot
// 0x0028 (0x0028 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATgfProjectileBase>         DefaultProjectileTemplate;                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutResult;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATgfProjectileBase>         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot) == 0x000028, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot, Slot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot, IgnoreIndex) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot::IgnoreIndex' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot, DefaultProjectileTemplate) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot::DefaultProjectileTemplate' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot, bOutResult) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot::bOutResult' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot, ReturnValue) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_GetNormalProjectileTemplateByEquipSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetSharedDPH
// 0x0014 (0x0014 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetSharedDPH final
{
public:
	float                                         DPH;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActualNum;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSharedNum;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDPHRate;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetSharedDPH) == 0x000004, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetSharedDPH");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetSharedDPH) == 0x000014, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetSharedDPH");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetSharedDPH, DPH) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetSharedDPH::DPH' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetSharedDPH, ActualNum) == 0x000004, "Member 'TgfAbilitySystemBlueprintLibrary_GetSharedDPH::ActualNum' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetSharedDPH, MinSharedNum) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetSharedDPH::MinSharedNum' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetSharedDPH, MinDPHRate) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetSharedDPH::MinDPHRate' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetSharedDPH, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetSharedDPH::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetSnapNotifyDuration
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetSnapNotifyDuration final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetSnapNotifyDuration) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetSnapNotifyDuration");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetSnapNotifyDuration) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetSnapNotifyDuration");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetSnapNotifyDuration, Montage) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetSnapNotifyDuration::Montage' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetSnapNotifyDuration, ReturnValue) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetSnapNotifyDuration::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetTaggedProjectile
// 0x0030 (0x0030 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ProjectileTag;                                     // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATgfProjectileBase>         DefaultProjectileTemplate;                         // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutResult;                                        // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATgfProjectileBase>         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile) == 0x000030, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile, Slot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile::Slot' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile, IgnoreIndex) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile::IgnoreIndex' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile, ProjectileTag) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile::ProjectileTag' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile, DefaultProjectileTemplate) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile::DefaultProjectileTemplate' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile, bOutResult) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile::bOutResult' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile, ReturnValue) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_GetTaggedProjectile::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetTargetDataPassiveMoveInfo
// 0x0078 (0x0078 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetTargetDataPassiveMoveInfo final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTgfGameplayAbilityTargetData_PassiveMove ReturnValue;                                       // 0x0030(0x0048)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetTargetDataPassiveMoveInfo) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetTargetDataPassiveMoveInfo");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetTargetDataPassiveMoveInfo) == 0x000078, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetTargetDataPassiveMoveInfo");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTargetDataPassiveMoveInfo, TargetData) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetTargetDataPassiveMoveInfo::TargetData' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTargetDataPassiveMoveInfo, Param_Index) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_GetTargetDataPassiveMoveInfo::Param_Index' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTargetDataPassiveMoveInfo, ReturnValue) == 0x000030, "Member 'TgfAbilitySystemBlueprintLibrary_GetTargetDataPassiveMoveInfo::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetTrackProjectileTemplateByEquipSlot
// 0x0028 (0x0028 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATgfProjectileBase>         DefaultProjectileTemplate;                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutResult;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATgfProjectileBase>         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot) == 0x000028, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot, Slot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot, IgnoreIndex) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot::IgnoreIndex' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot, DefaultProjectileTemplate) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot::DefaultProjectileTemplate' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot, bOutResult) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot::bOutResult' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot, ReturnValue) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_GetTrackProjectileTemplateByEquipSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetVulnerFactorRawValue
// 0x0030 (0x0030 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetVulnerFactorRawValue final
{
public:
	class AActor*                                 SrcActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetVulnerFactorRawValue) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetVulnerFactorRawValue");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetVulnerFactorRawValue) == 0x000030, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetVulnerFactorRawValue");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetVulnerFactorRawValue, SrcActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetVulnerFactorRawValue::SrcActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetVulnerFactorRawValue, TagContainer) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetVulnerFactorRawValue::TagContainer' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetVulnerFactorRawValue, ReturnValue) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_GetVulnerFactorRawValue::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetWeaponAmmoType
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetWeaponAmmoType final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponAmmoType                               ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetWeaponAmmoType) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetWeaponAmmoType");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetWeaponAmmoType) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetWeaponAmmoType");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponAmmoType, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponAmmoType::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponAmmoType, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponAmmoType::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponAmmoType, ReturnValue) == 0x000009, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponAmmoType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetWeaponAttack
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetWeaponAttack final
{
public:
	class AActor*                                 SrcActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfUseAttackType                             AttackType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetWeaponAttack) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetWeaponAttack");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetWeaponAttack) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetWeaponAttack");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponAttack, SrcActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponAttack::SrcActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponAttack, AttackType) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponAttack::AttackType' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponAttack, ReturnValue) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponAttack::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetWeaponCurAmmo
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmo final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmo) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmo");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmo) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmo");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmo, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmo::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmo, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmo::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmo, ReturnValue) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmo::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetWeaponCurAmmoBySlot
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmoBySlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmoBySlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmoBySlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmoBySlot) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmoBySlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmoBySlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmoBySlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmoBySlot, Slot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmoBySlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmoBySlot, ReturnValue) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponCurAmmoBySlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetWeaponDefinitionByEquipSlot
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTgfWeaponDefinition*             ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot, Slot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot, IgnoreIndex) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot::IgnoreIndex' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponDefinitionByEquipSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetWeaponInventoryItemInstance
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetWeaponInventoryItemInstance final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfInventoryItemInstance*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetWeaponInventoryItemInstance) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetWeaponInventoryItemInstance");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetWeaponInventoryItemInstance) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetWeaponInventoryItemInstance");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponInventoryItemInstance, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponInventoryItemInstance::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponInventoryItemInstance, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponInventoryItemInstance::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponInventoryItemInstance, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponInventoryItemInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetWeaponMaxAmmo
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmo final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmo) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmo");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmo) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmo");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmo, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmo::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmo, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmo::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmo, ReturnValue) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmo::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.GetWeaponMaxAmmoBySlot
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmoBySlot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmoBySlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmoBySlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmoBySlot) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmoBySlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmoBySlot, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmoBySlot::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmoBySlot, Slot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmoBySlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmoBySlot, ReturnValue) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_GetWeaponMaxAmmoBySlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.HasAllMatchingGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags) == 0x000030, "Wrong size on TgfAbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags, Actor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags, GameplayTags) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags::GameplayTags' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags, ReturnValue) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_HasAllMatchingGameplayTags::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.HasAnyMatchingGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags) == 0x000030, "Wrong size on TgfAbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags, Actor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags, GameplayTags) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags::GameplayTags' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags, ReturnValue) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_HasAnyMatchingGameplayTags::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.IsAbilityFromCurrentHand
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfGameplayAbility*                    Ability;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand, Ability) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand::Ability' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand, Right) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand, ReturnValue) == 0x000011, "Member 'TgfAbilitySystemBlueprintLibrary_IsAbilityFromCurrentHand::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.IsCharacterState
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_IsCharacterState final
{
public:
	class ALyraCharacter*                         InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CharacterStateTag;                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_IsCharacterState) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_IsCharacterState");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_IsCharacterState) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_IsCharacterState");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsCharacterState, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_IsCharacterState::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsCharacterState, CharacterStateTag) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_IsCharacterState::CharacterStateTag' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsCharacterState, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_IsCharacterState::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.IsCritical
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_IsCritical final
{
public:
	class UAbilitySystemComponent*                SrcABS;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                TrgABS;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalRandom;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_IsCritical) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_IsCritical");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_IsCritical) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_IsCritical");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsCritical, SrcABS) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_IsCritical::SrcABS' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsCritical, TrgABS) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_IsCritical::TrgABS' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsCritical, CriticalRandom) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_IsCritical::CriticalRandom' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsCritical, ReturnValue) == 0x000014, "Member 'TgfAbilitySystemBlueprintLibrary_IsCritical::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.IsEquipLocked
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_IsEquipLocked final
{
public:
	const class UTgfEquipmentManagerComponent*    EquipmentManager;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ULyraEquipmentInstance*           EquipIns;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_IsEquipLocked) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_IsEquipLocked");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_IsEquipLocked) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_IsEquipLocked");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsEquipLocked, EquipmentManager) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_IsEquipLocked::EquipmentManager' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsEquipLocked, EquipIns) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_IsEquipLocked::EquipIns' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsEquipLocked, ReturnValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_IsEquipLocked::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.IsHPFull
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_IsHPFull final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_IsHPFull) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_IsHPFull");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_IsHPFull) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_IsHPFull");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsHPFull, TargetActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_IsHPFull::TargetActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsHPFull, ReturnValue) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_IsHPFull::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.IsInstigatorSummonSourceLocallyControlled
// 0x00E8 (0x00E8 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_IsInstigatorSummonSourceLocallyControlled final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_IsInstigatorSummonSourceLocallyControlled) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_IsInstigatorSummonSourceLocallyControlled");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_IsInstigatorSummonSourceLocallyControlled) == 0x0000E8, "Wrong size on TgfAbilitySystemBlueprintLibrary_IsInstigatorSummonSourceLocallyControlled");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsInstigatorSummonSourceLocallyControlled, Parameters) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_IsInstigatorSummonSourceLocallyControlled::Parameters' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsInstigatorSummonSourceLocallyControlled, ReturnValue) == 0x0000E0, "Member 'TgfAbilitySystemBlueprintLibrary_IsInstigatorSummonSourceLocallyControlled::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.IsNaturalEnergyEmpty
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_IsNaturalEnergyEmpty final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_IsNaturalEnergyEmpty) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_IsNaturalEnergyEmpty");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_IsNaturalEnergyEmpty) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_IsNaturalEnergyEmpty");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsNaturalEnergyEmpty, TargetActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_IsNaturalEnergyEmpty::TargetActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsNaturalEnergyEmpty, ReturnValue) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_IsNaturalEnergyEmpty::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.IsNormalCharacterState
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_IsNormalCharacterState final
{
public:
	class ALyraCharacter*                         InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_IsNormalCharacterState) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_IsNormalCharacterState");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_IsNormalCharacterState) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_IsNormalCharacterState");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsNormalCharacterState, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_IsNormalCharacterState::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsNormalCharacterState, ReturnValue) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_IsNormalCharacterState::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.IsSoulEnergyFull
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_IsSoulEnergyFull final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_IsSoulEnergyFull) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_IsSoulEnergyFull");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_IsSoulEnergyFull) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_IsSoulEnergyFull");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsSoulEnergyFull, TargetActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_IsSoulEnergyFull::TargetActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsSoulEnergyFull, ReturnValue) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_IsSoulEnergyFull::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.IsWhichHandWeapon
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_IsWhichHandWeapon final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_IsWhichHandWeapon) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_IsWhichHandWeapon");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_IsWhichHandWeapon) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_IsWhichHandWeapon");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsWhichHandWeapon, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_IsWhichHandWeapon::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsWhichHandWeapon, Right) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_IsWhichHandWeapon::Right' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IsWhichHandWeapon, ReturnValue) == 0x000009, "Member 'TgfAbilitySystemBlueprintLibrary_IsWhichHandWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.IterateAvailableSlot
// 0x0028 (0x0028 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot final
{
public:
	const class UTgfEquipmentManagerComponent*    EquipmentManager;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Step;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETgfWeaponChangeSlot>                  SlotList;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot) == 0x000028, "Wrong size on TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot, EquipmentManager) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot::EquipmentManager' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot, Step) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot::Step' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot, SlotList) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot::SlotList' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot, ReturnValue) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_IterateAvailableSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.MakeGESpecHandle
// 0x0038 (0x0038 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectDef;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           GECH;                                              // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         InLevel;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle) == 0x000038, "Wrong size on TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle, GameplayEffectDef) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle::GameplayEffectDef' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle, GECH) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle::GECH' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle, InLevel) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle::InLevel' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle, ReturnValue) == 0x000028, "Member 'TgfAbilitySystemBlueprintLibrary_MakeGESpecHandle::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.RecoverAllSlotWeaponAmmoWithoutCostItem
// 0x0008 (0x0008 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_RecoverAllSlotWeaponAmmoWithoutCostItem final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_RecoverAllSlotWeaponAmmoWithoutCostItem) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_RecoverAllSlotWeaponAmmoWithoutCostItem");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_RecoverAllSlotWeaponAmmoWithoutCostItem) == 0x000008, "Wrong size on TgfAbilitySystemBlueprintLibrary_RecoverAllSlotWeaponAmmoWithoutCostItem");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_RecoverAllSlotWeaponAmmoWithoutCostItem, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_RecoverAllSlotWeaponAmmoWithoutCostItem::InActor' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.RecoverSlotWeaponAmmoWithoutCostItem
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_RecoverSlotWeaponAmmoWithoutCostItem final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          ChangeSlot;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_RecoverSlotWeaponAmmoWithoutCostItem) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_RecoverSlotWeaponAmmoWithoutCostItem");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_RecoverSlotWeaponAmmoWithoutCostItem) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_RecoverSlotWeaponAmmoWithoutCostItem");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_RecoverSlotWeaponAmmoWithoutCostItem, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_RecoverSlotWeaponAmmoWithoutCostItem::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_RecoverSlotWeaponAmmoWithoutCostItem, ChangeSlot) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_RecoverSlotWeaponAmmoWithoutCostItem::ChangeSlot' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.ReturnMagicCost
// 0x0038 (0x0038 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_ReturnMagicCost final
{
public:
	TSubclassOf<class UGameplayEffect>            ReturnMagicGEClass;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Src;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CostValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_ReturnMagicCost) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_ReturnMagicCost");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_ReturnMagicCost) == 0x000038, "Wrong size on TgfAbilitySystemBlueprintLibrary_ReturnMagicCost");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ReturnMagicCost, ReturnMagicGEClass) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_ReturnMagicCost::ReturnMagicGEClass' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ReturnMagicCost, Src) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_ReturnMagicCost::Src' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ReturnMagicCost, CostValue) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_ReturnMagicCost::CostValue' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ReturnMagicCost, EffectContext) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_ReturnMagicCost::EffectContext' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ReturnMagicCost, Level) == 0x000030, "Member 'TgfAbilitySystemBlueprintLibrary_ReturnMagicCost::Level' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.SendClearAdditionalInventoryEvent
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_SendClearAdditionalInventoryEvent final
{
public:
	class ALyraCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedDrop;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_SendClearAdditionalInventoryEvent) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_SendClearAdditionalInventoryEvent");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_SendClearAdditionalInventoryEvent) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_SendClearAdditionalInventoryEvent");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_SendClearAdditionalInventoryEvent, Character) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_SendClearAdditionalInventoryEvent::Character' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_SendClearAdditionalInventoryEvent, bNeedDrop) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_SendClearAdditionalInventoryEvent::bNeedDrop' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.SendCommonGameEvent
// 0x0030 (0x0030 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent final
{
public:
	struct FGameplayTag                           InstigatorEvent;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TargetEvent;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpec>            GESpecToApply;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent) == 0x000030, "Wrong size on TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent, InstigatorEvent) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent::InstigatorEvent' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent, TargetEvent) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent::TargetEvent' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent, Instigator) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent::Instigator' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent, Target) == 0x000018, "Member 'TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent::Target' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent, GESpecToApply) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_SendCommonGameEvent::GESpecToApply' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.SendGameplayEventToCharaOrInteract
// 0x00C0 (0x00C0 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_SendGameplayEventToCharaOrInteract final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     Payload;                                           // 0x0010(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_SendGameplayEventToCharaOrInteract) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_SendGameplayEventToCharaOrInteract");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_SendGameplayEventToCharaOrInteract) == 0x0000C0, "Wrong size on TgfAbilitySystemBlueprintLibrary_SendGameplayEventToCharaOrInteract");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_SendGameplayEventToCharaOrInteract, Actor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_SendGameplayEventToCharaOrInteract::Actor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_SendGameplayEventToCharaOrInteract, EventTag) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_SendGameplayEventToCharaOrInteract::EventTag' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_SendGameplayEventToCharaOrInteract, Payload) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_SendGameplayEventToCharaOrInteract::Payload' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.ShouldHitValueInterrupt
// 0x0018 (0x0018 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanCauseInterrupt;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetIsPlayer;                                    // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasDefence;                                        // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasCharging;                                       // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasUninterruptible;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt) == 0x000018, "Wrong size on TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt, WorldContextObject) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt, HitValue) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt::HitValue' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt, CanCauseInterrupt) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt::CanCauseInterrupt' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt, TargetIsPlayer) == 0x00000D, "Member 'TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt::TargetIsPlayer' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt, HasDefence) == 0x00000E, "Member 'TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt::HasDefence' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt, HasCharging) == 0x00000F, "Member 'TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt::HasCharging' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt, HasUninterruptible) == 0x000010, "Member 'TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt::HasUninterruptible' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt, ReturnValue) == 0x000011, "Member 'TgfAbilitySystemBlueprintLibrary_ShouldHitValueInterrupt::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.TestRootMotion
// 0x0028 (0x0028 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_TestRootMotion final
{
public:
	class ALyraCharacter*                         InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_TestRootMotion) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_TestRootMotion");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_TestRootMotion) == 0x000028, "Wrong size on TgfAbilitySystemBlueprintLibrary_TestRootMotion");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_TestRootMotion, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_TestRootMotion::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_TestRootMotion, TargetLocation) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_TestRootMotion::TargetLocation' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_TestRootMotion, Duration) == 0x000020, "Member 'TgfAbilitySystemBlueprintLibrary_TestRootMotion::Duration' has a wrong offset!");

// Function LyraGame.TgfAbilitySystemBlueprintLibrary.UseWeaponAmmo
// 0x0010 (0x0010 - 0x0000)
struct TgfAbilitySystemBlueprintLibrary_UseWeaponAmmo final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAbilitySystemBlueprintLibrary_UseWeaponAmmo) == 0x000008, "Wrong alignment on TgfAbilitySystemBlueprintLibrary_UseWeaponAmmo");
static_assert(sizeof(TgfAbilitySystemBlueprintLibrary_UseWeaponAmmo) == 0x000010, "Wrong size on TgfAbilitySystemBlueprintLibrary_UseWeaponAmmo");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_UseWeaponAmmo, InActor) == 0x000000, "Member 'TgfAbilitySystemBlueprintLibrary_UseWeaponAmmo::InActor' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_UseWeaponAmmo, UseCount) == 0x000008, "Member 'TgfAbilitySystemBlueprintLibrary_UseWeaponAmmo::UseCount' has a wrong offset!");
static_assert(offsetof(TgfAbilitySystemBlueprintLibrary_UseWeaponAmmo, Right) == 0x00000C, "Member 'TgfAbilitySystemBlueprintLibrary_UseWeaponAmmo::Right' has a wrong offset!");

// Function LyraGame.TgfAbilityTask_WaitGameplayEvent.WaitGameplayEventWithTime
// 0x0040 (0x0040 - 0x0000)
struct TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 Param_OptionalExternalTarget;                      // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyMatchExact;                                    // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfAbilityTask_WaitGameplayEvent*      ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime) == 0x000008, "Wrong alignment on TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime");
static_assert(sizeof(TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime) == 0x000040, "Wrong size on TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime");
static_assert(offsetof(TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime, OwningAbility) == 0x000000, "Member 'TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime::OwningAbility' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime, EventTags) == 0x000008, "Member 'TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime::EventTags' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime, Param_OptionalExternalTarget) == 0x000028, "Member 'TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime::Param_OptionalExternalTarget' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime, OnlyTriggerOnce) == 0x000030, "Member 'TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime::OnlyTriggerOnce' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime, OnlyMatchExact) == 0x000031, "Member 'TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime::OnlyMatchExact' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime, ReturnValue) == 0x000038, "Member 'TgfAbilityTask_WaitGameplayEvent_WaitGameplayEventWithTime::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraDevelopmentStatics.CanPlayerBotsAttack
// 0x0001 (0x0001 - 0x0000)
struct LyraDevelopmentStatics_CanPlayerBotsAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraDevelopmentStatics_CanPlayerBotsAttack) == 0x000001, "Wrong alignment on LyraDevelopmentStatics_CanPlayerBotsAttack");
static_assert(sizeof(LyraDevelopmentStatics_CanPlayerBotsAttack) == 0x000001, "Wrong size on LyraDevelopmentStatics_CanPlayerBotsAttack");
static_assert(offsetof(LyraDevelopmentStatics_CanPlayerBotsAttack, ReturnValue) == 0x000000, "Member 'LyraDevelopmentStatics_CanPlayerBotsAttack::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraDevelopmentStatics.ShouldLoadCosmeticBackgrounds
// 0x0001 (0x0001 - 0x0000)
struct LyraDevelopmentStatics_ShouldLoadCosmeticBackgrounds final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraDevelopmentStatics_ShouldLoadCosmeticBackgrounds) == 0x000001, "Wrong alignment on LyraDevelopmentStatics_ShouldLoadCosmeticBackgrounds");
static_assert(sizeof(LyraDevelopmentStatics_ShouldLoadCosmeticBackgrounds) == 0x000001, "Wrong size on LyraDevelopmentStatics_ShouldLoadCosmeticBackgrounds");
static_assert(offsetof(LyraDevelopmentStatics_ShouldLoadCosmeticBackgrounds, ReturnValue) == 0x000000, "Member 'LyraDevelopmentStatics_ShouldLoadCosmeticBackgrounds::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraDevelopmentStatics.ShouldSkipDirectlyToGameplay
// 0x0001 (0x0001 - 0x0000)
struct LyraDevelopmentStatics_ShouldSkipDirectlyToGameplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraDevelopmentStatics_ShouldSkipDirectlyToGameplay) == 0x000001, "Wrong alignment on LyraDevelopmentStatics_ShouldSkipDirectlyToGameplay");
static_assert(sizeof(LyraDevelopmentStatics_ShouldSkipDirectlyToGameplay) == 0x000001, "Wrong size on LyraDevelopmentStatics_ShouldSkipDirectlyToGameplay");
static_assert(offsetof(LyraDevelopmentStatics_ShouldSkipDirectlyToGameplay, ReturnValue) == 0x000000, "Member 'LyraDevelopmentStatics_ShouldSkipDirectlyToGameplay::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilityTask_WaitMoving.WaitMoving
// 0x0028 (0x0028 - 0x0000)
struct TgfAbilityTask_WaitMoving_WaitMoving final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovingCheckParams                     Params_0;                                          // 0x0008(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfAbilityTask_WaitMoving*             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityTask_WaitMoving_WaitMoving) == 0x000008, "Wrong alignment on TgfAbilityTask_WaitMoving_WaitMoving");
static_assert(sizeof(TgfAbilityTask_WaitMoving_WaitMoving) == 0x000028, "Wrong size on TgfAbilityTask_WaitMoving_WaitMoving");
static_assert(offsetof(TgfAbilityTask_WaitMoving_WaitMoving, OwningAbility) == 0x000000, "Member 'TgfAbilityTask_WaitMoving_WaitMoving::OwningAbility' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_WaitMoving_WaitMoving, Params_0) == 0x000008, "Member 'TgfAbilityTask_WaitMoving_WaitMoving::Params_0' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_WaitMoving_WaitMoving, ReturnValue) == 0x000020, "Member 'TgfAbilityTask_WaitMoving_WaitMoving::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfActorCustomDepthStencilManagerComponent.SetCustomStencilTypeAndValue
// 0x0018 (0x0018 - 0x0000)
struct TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue final
{
public:
	ETgfStencilTypeBaseValue                      StencilType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSet;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Subtype;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Recursively;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue) == 0x000008, "Wrong alignment on TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue");
static_assert(sizeof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue) == 0x000018, "Wrong size on TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue, StencilType) == 0x000000, "Member 'TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue::StencilType' has a wrong offset!");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue, bSet) == 0x000001, "Member 'TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue::bSet' has a wrong offset!");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue, Subtype) == 0x000004, "Member 'TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue::Subtype' has a wrong offset!");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue, TargetMesh) == 0x000008, "Member 'TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue::TargetMesh' has a wrong offset!");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue, Recursively) == 0x000010, "Member 'TgfActorCustomDepthStencilManagerComponent_SetCustomStencilTypeAndValue::Recursively' has a wrong offset!");

// Function LyraGame.TgfActorCustomDepthStencilManagerComponent.SetCustomStencilValue
// 0x0010 (0x0010 - 0x0000)
struct TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValue final
{
public:
	ETgfStencilRef                                StencilValue;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSet;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    TargetMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValue) == 0x000008, "Wrong alignment on TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValue");
static_assert(sizeof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValue) == 0x000010, "Wrong size on TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValue");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValue, StencilValue) == 0x000000, "Member 'TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValue::StencilValue' has a wrong offset!");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValue, bSet) == 0x000001, "Member 'TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValue::bSet' has a wrong offset!");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValue, TargetMesh) == 0x000008, "Member 'TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValue::TargetMesh' has a wrong offset!");

// Function LyraGame.TgfActorCustomDepthStencilManagerComponent.SetCustomStencilValueByRealValue
// 0x0010 (0x0010 - 0x0000)
struct TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValueByRealValue final
{
public:
	class UPrimitiveComponent*                    TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValueByRealValue) == 0x000008, "Wrong alignment on TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValueByRealValue");
static_assert(sizeof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValueByRealValue) == 0x000010, "Wrong size on TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValueByRealValue");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValueByRealValue, TargetMesh) == 0x000000, "Member 'TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValueByRealValue::TargetMesh' has a wrong offset!");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValueByRealValue, Value) == 0x000008, "Member 'TgfActorCustomDepthStencilManagerComponent_SetCustomStencilValueByRealValue::Value' has a wrong offset!");

// Function LyraGame.TgfActorCustomDepthStencilManagerComponent.SetStencilSubtypeValue
// 0x0010 (0x0010 - 0x0000)
struct TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue final
{
public:
	ETgfStencilTypeBaseValue                      StencilType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSet;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue) == 0x000004, "Wrong alignment on TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue");
static_assert(sizeof(TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue) == 0x000010, "Wrong size on TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue, StencilType) == 0x000000, "Member 'TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue::StencilType' has a wrong offset!");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue, Value) == 0x000004, "Member 'TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue::Value' has a wrong offset!");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue, bSet) == 0x000008, "Member 'TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue::bSet' has a wrong offset!");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue, ReturnValue) == 0x00000C, "Member 'TgfActorCustomDepthStencilManagerComponent_SetStencilSubtypeValue::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfActorCustomDepthStencilManagerComponent.GetCurrentStencilValue
// 0x0004 (0x0004 - 0x0000)
struct TgfActorCustomDepthStencilManagerComponent_GetCurrentStencilValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfActorCustomDepthStencilManagerComponent_GetCurrentStencilValue) == 0x000004, "Wrong alignment on TgfActorCustomDepthStencilManagerComponent_GetCurrentStencilValue");
static_assert(sizeof(TgfActorCustomDepthStencilManagerComponent_GetCurrentStencilValue) == 0x000004, "Wrong size on TgfActorCustomDepthStencilManagerComponent_GetCurrentStencilValue");
static_assert(offsetof(TgfActorCustomDepthStencilManagerComponent_GetCurrentStencilValue, ReturnValue) == 0x000000, "Member 'TgfActorCustomDepthStencilManagerComponent_GetCurrentStencilValue::ReturnValue' has a wrong offset!");

// Function LyraGame.AsyncAction_ObserveTeamColors.ObserveTeamColors
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_ObserveTeamColors_ObserveTeamColors final
{
public:
	class UObject*                                TeamAgent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_ObserveTeamColors*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_ObserveTeamColors_ObserveTeamColors) == 0x000008, "Wrong alignment on AsyncAction_ObserveTeamColors_ObserveTeamColors");
static_assert(sizeof(AsyncAction_ObserveTeamColors_ObserveTeamColors) == 0x000010, "Wrong size on AsyncAction_ObserveTeamColors_ObserveTeamColors");
static_assert(offsetof(AsyncAction_ObserveTeamColors_ObserveTeamColors, TeamAgent) == 0x000000, "Member 'AsyncAction_ObserveTeamColors_ObserveTeamColors::TeamAgent' has a wrong offset!");
static_assert(offsetof(AsyncAction_ObserveTeamColors_ObserveTeamColors, ReturnValue) == 0x000008, "Member 'AsyncAction_ObserveTeamColors_ObserveTeamColors::ReturnValue' has a wrong offset!");

// Function LyraGame.AsyncAction_ObserveTeamColors.OnDisplayAssetChanged
// 0x0008 (0x0008 - 0x0000)
struct AsyncAction_ObserveTeamColors_OnDisplayAssetChanged final
{
public:
	const class ULyraTeamDisplayAsset*            DisplayAsset;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_ObserveTeamColors_OnDisplayAssetChanged) == 0x000008, "Wrong alignment on AsyncAction_ObserveTeamColors_OnDisplayAssetChanged");
static_assert(sizeof(AsyncAction_ObserveTeamColors_OnDisplayAssetChanged) == 0x000008, "Wrong size on AsyncAction_ObserveTeamColors_OnDisplayAssetChanged");
static_assert(offsetof(AsyncAction_ObserveTeamColors_OnDisplayAssetChanged, DisplayAsset) == 0x000000, "Member 'AsyncAction_ObserveTeamColors_OnDisplayAssetChanged::DisplayAsset' has a wrong offset!");

// Function LyraGame.AsyncAction_ObserveTeamColors.OnWatchedAgentChangedTeam
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_ObserveTeamColors_OnWatchedAgentChangedTeam final
{
public:
	class UObject*                                TeamAgent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldTeam;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeam;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_ObserveTeamColors_OnWatchedAgentChangedTeam) == 0x000008, "Wrong alignment on AsyncAction_ObserveTeamColors_OnWatchedAgentChangedTeam");
static_assert(sizeof(AsyncAction_ObserveTeamColors_OnWatchedAgentChangedTeam) == 0x000010, "Wrong size on AsyncAction_ObserveTeamColors_OnWatchedAgentChangedTeam");
static_assert(offsetof(AsyncAction_ObserveTeamColors_OnWatchedAgentChangedTeam, TeamAgent) == 0x000000, "Member 'AsyncAction_ObserveTeamColors_OnWatchedAgentChangedTeam::TeamAgent' has a wrong offset!");
static_assert(offsetof(AsyncAction_ObserveTeamColors_OnWatchedAgentChangedTeam, OldTeam) == 0x000008, "Member 'AsyncAction_ObserveTeamColors_OnWatchedAgentChangedTeam::OldTeam' has a wrong offset!");
static_assert(offsetof(AsyncAction_ObserveTeamColors_OnWatchedAgentChangedTeam, NewTeam) == 0x00000C, "Member 'AsyncAction_ObserveTeamColors_OnWatchedAgentChangedTeam::NewTeam' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.AddTeamTagStack
// 0x0010 (0x0010 - 0x0000)
struct LyraTeamSubsystem_AddTeamTagStack final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_AddTeamTagStack) == 0x000004, "Wrong alignment on LyraTeamSubsystem_AddTeamTagStack");
static_assert(sizeof(LyraTeamSubsystem_AddTeamTagStack) == 0x000010, "Wrong size on LyraTeamSubsystem_AddTeamTagStack");
static_assert(offsetof(LyraTeamSubsystem_AddTeamTagStack, TeamId) == 0x000000, "Member 'LyraTeamSubsystem_AddTeamTagStack::TeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_AddTeamTagStack, Tag) == 0x000004, "Member 'LyraTeamSubsystem_AddTeamTagStack::Tag' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_AddTeamTagStack, StackCount) == 0x00000C, "Member 'LyraTeamSubsystem_AddTeamTagStack::StackCount' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.GetEffectiveTeamDisplayAsset
// 0x0018 (0x0018 - 0x0000)
struct LyraTeamSubsystem_GetEffectiveTeamDisplayAsset final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ViewerTeamAgent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraTeamDisplayAsset*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_GetEffectiveTeamDisplayAsset) == 0x000008, "Wrong alignment on LyraTeamSubsystem_GetEffectiveTeamDisplayAsset");
static_assert(sizeof(LyraTeamSubsystem_GetEffectiveTeamDisplayAsset) == 0x000018, "Wrong size on LyraTeamSubsystem_GetEffectiveTeamDisplayAsset");
static_assert(offsetof(LyraTeamSubsystem_GetEffectiveTeamDisplayAsset, TeamId) == 0x000000, "Member 'LyraTeamSubsystem_GetEffectiveTeamDisplayAsset::TeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_GetEffectiveTeamDisplayAsset, ViewerTeamAgent) == 0x000008, "Member 'LyraTeamSubsystem_GetEffectiveTeamDisplayAsset::ViewerTeamAgent' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_GetEffectiveTeamDisplayAsset, ReturnValue) == 0x000010, "Member 'LyraTeamSubsystem_GetEffectiveTeamDisplayAsset::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.GetOwnPlayer
// 0x0008 (0x0008 - 0x0000)
struct LyraTeamSubsystem_GetOwnPlayer final
{
public:
	class ALyraPlayerController*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_GetOwnPlayer) == 0x000008, "Wrong alignment on LyraTeamSubsystem_GetOwnPlayer");
static_assert(sizeof(LyraTeamSubsystem_GetOwnPlayer) == 0x000008, "Wrong size on LyraTeamSubsystem_GetOwnPlayer");
static_assert(offsetof(LyraTeamSubsystem_GetOwnPlayer, ReturnValue) == 0x000000, "Member 'LyraTeamSubsystem_GetOwnPlayer::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.GetPlayersInTeam
// 0x0018 (0x0018 - 0x0000)
struct LyraTeamSubsystem_GetPlayersInTeam final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALyraPlayerState*>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_GetPlayersInTeam) == 0x000008, "Wrong alignment on LyraTeamSubsystem_GetPlayersInTeam");
static_assert(sizeof(LyraTeamSubsystem_GetPlayersInTeam) == 0x000018, "Wrong size on LyraTeamSubsystem_GetPlayersInTeam");
static_assert(offsetof(LyraTeamSubsystem_GetPlayersInTeam, TeamId) == 0x000000, "Member 'LyraTeamSubsystem_GetPlayersInTeam::TeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_GetPlayersInTeam, ReturnValue) == 0x000008, "Member 'LyraTeamSubsystem_GetPlayersInTeam::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.GetPlayerStatesWithSameTeam
// 0x0018 (0x0018 - 0x0000)
struct LyraTeamSubsystem_GetPlayerStatesWithSameTeam final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ALyraPlayerState*>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_GetPlayerStatesWithSameTeam) == 0x000008, "Wrong alignment on LyraTeamSubsystem_GetPlayerStatesWithSameTeam");
static_assert(sizeof(LyraTeamSubsystem_GetPlayerStatesWithSameTeam) == 0x000018, "Wrong size on LyraTeamSubsystem_GetPlayerStatesWithSameTeam");
static_assert(offsetof(LyraTeamSubsystem_GetPlayerStatesWithSameTeam, Target) == 0x000000, "Member 'LyraTeamSubsystem_GetPlayerStatesWithSameTeam::Target' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_GetPlayerStatesWithSameTeam, ReturnValue) == 0x000008, "Member 'LyraTeamSubsystem_GetPlayerStatesWithSameTeam::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.GetPlayersWithSameTeam
// 0x0018 (0x0018 - 0x0000)
struct LyraTeamSubsystem_GetPlayersWithSameTeam final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ALyraPlayerState*>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_GetPlayersWithSameTeam) == 0x000008, "Wrong alignment on LyraTeamSubsystem_GetPlayersWithSameTeam");
static_assert(sizeof(LyraTeamSubsystem_GetPlayersWithSameTeam) == 0x000018, "Wrong size on LyraTeamSubsystem_GetPlayersWithSameTeam");
static_assert(offsetof(LyraTeamSubsystem_GetPlayersWithSameTeam, Target) == 0x000000, "Member 'LyraTeamSubsystem_GetPlayersWithSameTeam::Target' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_GetPlayersWithSameTeam, ReturnValue) == 0x000008, "Member 'LyraTeamSubsystem_GetPlayersWithSameTeam::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.GetTeamDisplayAsset
// 0x0010 (0x0010 - 0x0000)
struct LyraTeamSubsystem_GetTeamDisplayAsset final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewerTeamId;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraTeamDisplayAsset*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_GetTeamDisplayAsset) == 0x000008, "Wrong alignment on LyraTeamSubsystem_GetTeamDisplayAsset");
static_assert(sizeof(LyraTeamSubsystem_GetTeamDisplayAsset) == 0x000010, "Wrong size on LyraTeamSubsystem_GetTeamDisplayAsset");
static_assert(offsetof(LyraTeamSubsystem_GetTeamDisplayAsset, TeamId) == 0x000000, "Member 'LyraTeamSubsystem_GetTeamDisplayAsset::TeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_GetTeamDisplayAsset, ViewerTeamId) == 0x000004, "Member 'LyraTeamSubsystem_GetTeamDisplayAsset::ViewerTeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_GetTeamDisplayAsset, ReturnValue) == 0x000008, "Member 'LyraTeamSubsystem_GetTeamDisplayAsset::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.GetTeamMembers
// 0x0018 (0x0018 - 0x0000)
struct LyraTeamSubsystem_GetTeamMembers final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALyraPlayerState*>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_GetTeamMembers) == 0x000008, "Wrong alignment on LyraTeamSubsystem_GetTeamMembers");
static_assert(sizeof(LyraTeamSubsystem_GetTeamMembers) == 0x000018, "Wrong size on LyraTeamSubsystem_GetTeamMembers");
static_assert(offsetof(LyraTeamSubsystem_GetTeamMembers, TeamId) == 0x000000, "Member 'LyraTeamSubsystem_GetTeamMembers::TeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_GetTeamMembers, ReturnValue) == 0x000008, "Member 'LyraTeamSubsystem_GetTeamMembers::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.RemoveTeamTagStack
// 0x0010 (0x0010 - 0x0000)
struct LyraTeamSubsystem_RemoveTeamTagStack final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_RemoveTeamTagStack) == 0x000004, "Wrong alignment on LyraTeamSubsystem_RemoveTeamTagStack");
static_assert(sizeof(LyraTeamSubsystem_RemoveTeamTagStack) == 0x000010, "Wrong size on LyraTeamSubsystem_RemoveTeamTagStack");
static_assert(offsetof(LyraTeamSubsystem_RemoveTeamTagStack, TeamId) == 0x000000, "Member 'LyraTeamSubsystem_RemoveTeamTagStack::TeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_RemoveTeamTagStack, Tag) == 0x000004, "Member 'LyraTeamSubsystem_RemoveTeamTagStack::Tag' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_RemoveTeamTagStack, StackCount) == 0x00000C, "Member 'LyraTeamSubsystem_RemoveTeamTagStack::StackCount' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.CompareTeams
// 0x0020 (0x0020 - 0x0000)
struct LyraTeamSubsystem_CompareTeams final
{
public:
	const class UObject*                          A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIdA;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIdB;                                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraTeamComparison                           ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTeamSubsystem_CompareTeams) == 0x000008, "Wrong alignment on LyraTeamSubsystem_CompareTeams");
static_assert(sizeof(LyraTeamSubsystem_CompareTeams) == 0x000020, "Wrong size on LyraTeamSubsystem_CompareTeams");
static_assert(offsetof(LyraTeamSubsystem_CompareTeams, A) == 0x000000, "Member 'LyraTeamSubsystem_CompareTeams::A' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_CompareTeams, B) == 0x000008, "Member 'LyraTeamSubsystem_CompareTeams::B' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_CompareTeams, TeamIdA) == 0x000010, "Member 'LyraTeamSubsystem_CompareTeams::TeamIdA' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_CompareTeams, TeamIdB) == 0x000014, "Member 'LyraTeamSubsystem_CompareTeams::TeamIdB' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_CompareTeams, ReturnValue) == 0x000018, "Member 'LyraTeamSubsystem_CompareTeams::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.DoesTeamExist
// 0x0008 (0x0008 - 0x0000)
struct LyraTeamSubsystem_DoesTeamExist final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTeamSubsystem_DoesTeamExist) == 0x000004, "Wrong alignment on LyraTeamSubsystem_DoesTeamExist");
static_assert(sizeof(LyraTeamSubsystem_DoesTeamExist) == 0x000008, "Wrong size on LyraTeamSubsystem_DoesTeamExist");
static_assert(offsetof(LyraTeamSubsystem_DoesTeamExist, TeamId) == 0x000000, "Member 'LyraTeamSubsystem_DoesTeamExist::TeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_DoesTeamExist, ReturnValue) == 0x000004, "Member 'LyraTeamSubsystem_DoesTeamExist::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.FindTeamFromActor
// 0x0010 (0x0010 - 0x0000)
struct LyraTeamSubsystem_FindTeamFromActor final
{
public:
	const class UObject*                          TestActor;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPartOfTeam;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamId;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_FindTeamFromActor) == 0x000008, "Wrong alignment on LyraTeamSubsystem_FindTeamFromActor");
static_assert(sizeof(LyraTeamSubsystem_FindTeamFromActor) == 0x000010, "Wrong size on LyraTeamSubsystem_FindTeamFromActor");
static_assert(offsetof(LyraTeamSubsystem_FindTeamFromActor, TestActor) == 0x000000, "Member 'LyraTeamSubsystem_FindTeamFromActor::TestActor' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_FindTeamFromActor, bIsPartOfTeam) == 0x000008, "Member 'LyraTeamSubsystem_FindTeamFromActor::bIsPartOfTeam' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_FindTeamFromActor, TeamId) == 0x00000C, "Member 'LyraTeamSubsystem_FindTeamFromActor::TeamId' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.GetTeamIDs
// 0x0010 (0x0010 - 0x0000)
struct LyraTeamSubsystem_GetTeamIDs final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_GetTeamIDs) == 0x000008, "Wrong alignment on LyraTeamSubsystem_GetTeamIDs");
static_assert(sizeof(LyraTeamSubsystem_GetTeamIDs) == 0x000010, "Wrong size on LyraTeamSubsystem_GetTeamIDs");
static_assert(offsetof(LyraTeamSubsystem_GetTeamIDs, ReturnValue) == 0x000000, "Member 'LyraTeamSubsystem_GetTeamIDs::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.GetTeamTagStackCount
// 0x0010 (0x0010 - 0x0000)
struct LyraTeamSubsystem_GetTeamTagStackCount final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamSubsystem_GetTeamTagStackCount) == 0x000004, "Wrong alignment on LyraTeamSubsystem_GetTeamTagStackCount");
static_assert(sizeof(LyraTeamSubsystem_GetTeamTagStackCount) == 0x000010, "Wrong size on LyraTeamSubsystem_GetTeamTagStackCount");
static_assert(offsetof(LyraTeamSubsystem_GetTeamTagStackCount, TeamId) == 0x000000, "Member 'LyraTeamSubsystem_GetTeamTagStackCount::TeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_GetTeamTagStackCount, Tag) == 0x000004, "Member 'LyraTeamSubsystem_GetTeamTagStackCount::Tag' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_GetTeamTagStackCount, ReturnValue) == 0x00000C, "Member 'LyraTeamSubsystem_GetTeamTagStackCount::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamSubsystem.TeamHasTag
// 0x0010 (0x0010 - 0x0000)
struct LyraTeamSubsystem_TeamHasTag final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTeamSubsystem_TeamHasTag) == 0x000004, "Wrong alignment on LyraTeamSubsystem_TeamHasTag");
static_assert(sizeof(LyraTeamSubsystem_TeamHasTag) == 0x000010, "Wrong size on LyraTeamSubsystem_TeamHasTag");
static_assert(offsetof(LyraTeamSubsystem_TeamHasTag, TeamId) == 0x000000, "Member 'LyraTeamSubsystem_TeamHasTag::TeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_TeamHasTag, Tag) == 0x000004, "Member 'LyraTeamSubsystem_TeamHasTag::Tag' has a wrong offset!");
static_assert(offsetof(LyraTeamSubsystem_TeamHasTag, ReturnValue) == 0x00000C, "Member 'LyraTeamSubsystem_TeamHasTag::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAnimNotifyState_GameplayTag.NeedDealTag
// 0x0010 (0x0010 - 0x0000)
struct TgfAnimNotifyState_GameplayTag_NeedDealTag final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAnimNotifyState_GameplayTag_NeedDealTag) == 0x000008, "Wrong alignment on TgfAnimNotifyState_GameplayTag_NeedDealTag");
static_assert(sizeof(TgfAnimNotifyState_GameplayTag_NeedDealTag) == 0x000010, "Wrong size on TgfAnimNotifyState_GameplayTag_NeedDealTag");
static_assert(offsetof(TgfAnimNotifyState_GameplayTag_NeedDealTag, MeshComp) == 0x000000, "Member 'TgfAnimNotifyState_GameplayTag_NeedDealTag::MeshComp' has a wrong offset!");
static_assert(offsetof(TgfAnimNotifyState_GameplayTag_NeedDealTag, ReturnValue) == 0x000008, "Member 'TgfAnimNotifyState_GameplayTag_NeedDealTag::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTabListWidgetBase.GetPreregisteredTabInfo
// 0x0130 (0x0130 - 0x0000)
struct LyraTabListWidgetBase_GetPreregisteredTabInfo final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLyraTabDescriptor                     OutTabInfo;                                        // 0x0010(0x0110)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0xF];                                      // 0x0121(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTabListWidgetBase_GetPreregisteredTabInfo) == 0x000010, "Wrong alignment on LyraTabListWidgetBase_GetPreregisteredTabInfo");
static_assert(sizeof(LyraTabListWidgetBase_GetPreregisteredTabInfo) == 0x000130, "Wrong size on LyraTabListWidgetBase_GetPreregisteredTabInfo");
static_assert(offsetof(LyraTabListWidgetBase_GetPreregisteredTabInfo, TabNameID) == 0x000000, "Member 'LyraTabListWidgetBase_GetPreregisteredTabInfo::TabNameID' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_GetPreregisteredTabInfo, OutTabInfo) == 0x000010, "Member 'LyraTabListWidgetBase_GetPreregisteredTabInfo::OutTabInfo' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_GetPreregisteredTabInfo, ReturnValue) == 0x000120, "Member 'LyraTabListWidgetBase_GetPreregisteredTabInfo::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTabListWidgetBase.GetVisibleTabCount
// 0x0004 (0x0004 - 0x0000)
struct LyraTabListWidgetBase_GetVisibleTabCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabListWidgetBase_GetVisibleTabCount) == 0x000004, "Wrong alignment on LyraTabListWidgetBase_GetVisibleTabCount");
static_assert(sizeof(LyraTabListWidgetBase_GetVisibleTabCount) == 0x000004, "Wrong size on LyraTabListWidgetBase_GetVisibleTabCount");
static_assert(offsetof(LyraTabListWidgetBase_GetVisibleTabCount, ReturnValue) == 0x000000, "Member 'LyraTabListWidgetBase_GetVisibleTabCount::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTabListWidgetBase.IsTabVisible
// 0x000C (0x000C - 0x0000)
struct LyraTabListWidgetBase_IsTabVisible final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTabListWidgetBase_IsTabVisible) == 0x000004, "Wrong alignment on LyraTabListWidgetBase_IsTabVisible");
static_assert(sizeof(LyraTabListWidgetBase_IsTabVisible) == 0x00000C, "Wrong size on LyraTabListWidgetBase_IsTabVisible");
static_assert(offsetof(LyraTabListWidgetBase_IsTabVisible, TabId) == 0x000000, "Member 'LyraTabListWidgetBase_IsTabVisible::TabId' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_IsTabVisible, ReturnValue) == 0x000008, "Member 'LyraTabListWidgetBase_IsTabVisible::ReturnValue' has a wrong offset!");

// DelegateFunction LyraGame.LyraTabListWidgetBase.OnTabContentCreated__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonUserWidget*                      TabWidget;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature) == 0x000008, "Wrong alignment on LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature");
static_assert(sizeof(LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature) == 0x000010, "Wrong size on LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature");
static_assert(offsetof(LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature, TabId) == 0x000000, "Member 'LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature::TabId' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature, TabWidget) == 0x000008, "Member 'LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature::TabWidget' has a wrong offset!");

// Function LyraGame.LyraTabListWidgetBase.RegisterDynamicTab
// 0x0120 (0x0120 - 0x0000)
struct LyraTabListWidgetBase_RegisterDynamicTab final
{
public:
	struct FLyraTabDescriptor                     TabDescriptor;                                     // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0xF];                                      // 0x0111(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTabListWidgetBase_RegisterDynamicTab) == 0x000010, "Wrong alignment on LyraTabListWidgetBase_RegisterDynamicTab");
static_assert(sizeof(LyraTabListWidgetBase_RegisterDynamicTab) == 0x000120, "Wrong size on LyraTabListWidgetBase_RegisterDynamicTab");
static_assert(offsetof(LyraTabListWidgetBase_RegisterDynamicTab, TabDescriptor) == 0x000000, "Member 'LyraTabListWidgetBase_RegisterDynamicTab::TabDescriptor' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_RegisterDynamicTab, ReturnValue) == 0x000110, "Member 'LyraTabListWidgetBase_RegisterDynamicTab::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTabListWidgetBase.SetPreregisteredTabInfoLock
// 0x000C (0x000C - 0x0000)
struct LyraTabListWidgetBase_SetPreregisteredTabInfoLock final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLock;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTabListWidgetBase_SetPreregisteredTabInfoLock) == 0x000004, "Wrong alignment on LyraTabListWidgetBase_SetPreregisteredTabInfoLock");
static_assert(sizeof(LyraTabListWidgetBase_SetPreregisteredTabInfoLock) == 0x00000C, "Wrong size on LyraTabListWidgetBase_SetPreregisteredTabInfoLock");
static_assert(offsetof(LyraTabListWidgetBase_SetPreregisteredTabInfoLock, TabNameID) == 0x000000, "Member 'LyraTabListWidgetBase_SetPreregisteredTabInfoLock::TabNameID' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_SetPreregisteredTabInfoLock, IsLock) == 0x000008, "Member 'LyraTabListWidgetBase_SetPreregisteredTabInfoLock::IsLock' has a wrong offset!");

// Function LyraGame.LyraTabListWidgetBase.SetTabHiddenState
// 0x000C (0x000C - 0x0000)
struct LyraTabListWidgetBase_SetTabHiddenState final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTabListWidgetBase_SetTabHiddenState) == 0x000004, "Wrong alignment on LyraTabListWidgetBase_SetTabHiddenState");
static_assert(sizeof(LyraTabListWidgetBase_SetTabHiddenState) == 0x00000C, "Wrong size on LyraTabListWidgetBase_SetTabHiddenState");
static_assert(offsetof(LyraTabListWidgetBase_SetTabHiddenState, TabNameID) == 0x000000, "Member 'LyraTabListWidgetBase_SetTabHiddenState::TabNameID' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_SetTabHiddenState, bHidden) == 0x000008, "Member 'LyraTabListWidgetBase_SetTabHiddenState::bHidden' has a wrong offset!");

// Function LyraGame.LyraTabListWidgetBase.IsFirstTabActive
// 0x0001 (0x0001 - 0x0000)
struct LyraTabListWidgetBase_IsFirstTabActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabListWidgetBase_IsFirstTabActive) == 0x000001, "Wrong alignment on LyraTabListWidgetBase_IsFirstTabActive");
static_assert(sizeof(LyraTabListWidgetBase_IsFirstTabActive) == 0x000001, "Wrong size on LyraTabListWidgetBase_IsFirstTabActive");
static_assert(offsetof(LyraTabListWidgetBase_IsFirstTabActive, ReturnValue) == 0x000000, "Member 'LyraTabListWidgetBase_IsFirstTabActive::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTabListWidgetBase.IsLastTabActive
// 0x0001 (0x0001 - 0x0000)
struct LyraTabListWidgetBase_IsLastTabActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabListWidgetBase_IsLastTabActive) == 0x000001, "Wrong alignment on LyraTabListWidgetBase_IsLastTabActive");
static_assert(sizeof(LyraTabListWidgetBase_IsLastTabActive) == 0x000001, "Wrong size on LyraTabListWidgetBase_IsLastTabActive");
static_assert(offsetof(LyraTabListWidgetBase_IsLastTabActive, ReturnValue) == 0x000000, "Member 'LyraTabListWidgetBase_IsLastTabActive::ReturnValue' has a wrong offset!");

// Function LyraGame.MaterialProgressBar.AnimateProgressFromCurrent
// 0x0008 (0x0008 - 0x0000)
struct MaterialProgressBar_AnimateProgressFromCurrent final
{
public:
	float                                         End;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimSpeed;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_AnimateProgressFromCurrent) == 0x000004, "Wrong alignment on MaterialProgressBar_AnimateProgressFromCurrent");
static_assert(sizeof(MaterialProgressBar_AnimateProgressFromCurrent) == 0x000008, "Wrong size on MaterialProgressBar_AnimateProgressFromCurrent");
static_assert(offsetof(MaterialProgressBar_AnimateProgressFromCurrent, End) == 0x000000, "Member 'MaterialProgressBar_AnimateProgressFromCurrent::End' has a wrong offset!");
static_assert(offsetof(MaterialProgressBar_AnimateProgressFromCurrent, AnimSpeed) == 0x000004, "Member 'MaterialProgressBar_AnimateProgressFromCurrent::AnimSpeed' has a wrong offset!");

// Function LyraGame.MaterialProgressBar.AnimateProgressFromStart
// 0x000C (0x000C - 0x0000)
struct MaterialProgressBar_AnimateProgressFromStart final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimSpeed;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_AnimateProgressFromStart) == 0x000004, "Wrong alignment on MaterialProgressBar_AnimateProgressFromStart");
static_assert(sizeof(MaterialProgressBar_AnimateProgressFromStart) == 0x00000C, "Wrong size on MaterialProgressBar_AnimateProgressFromStart");
static_assert(offsetof(MaterialProgressBar_AnimateProgressFromStart, Start) == 0x000000, "Member 'MaterialProgressBar_AnimateProgressFromStart::Start' has a wrong offset!");
static_assert(offsetof(MaterialProgressBar_AnimateProgressFromStart, End) == 0x000004, "Member 'MaterialProgressBar_AnimateProgressFromStart::End' has a wrong offset!");
static_assert(offsetof(MaterialProgressBar_AnimateProgressFromStart, AnimSpeed) == 0x000008, "Member 'MaterialProgressBar_AnimateProgressFromStart::AnimSpeed' has a wrong offset!");

// Function LyraGame.MaterialProgressBar.SetColorA
// 0x0010 (0x0010 - 0x0000)
struct MaterialProgressBar_SetColorA final
{
public:
	struct FLinearColor                           ColorA;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_SetColorA) == 0x000004, "Wrong alignment on MaterialProgressBar_SetColorA");
static_assert(sizeof(MaterialProgressBar_SetColorA) == 0x000010, "Wrong size on MaterialProgressBar_SetColorA");
static_assert(offsetof(MaterialProgressBar_SetColorA, ColorA) == 0x000000, "Member 'MaterialProgressBar_SetColorA::ColorA' has a wrong offset!");

// Function LyraGame.MaterialProgressBar.SetColorB
// 0x0010 (0x0010 - 0x0000)
struct MaterialProgressBar_SetColorB final
{
public:
	struct FLinearColor                           ColorB;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_SetColorB) == 0x000004, "Wrong alignment on MaterialProgressBar_SetColorB");
static_assert(sizeof(MaterialProgressBar_SetColorB) == 0x000010, "Wrong size on MaterialProgressBar_SetColorB");
static_assert(offsetof(MaterialProgressBar_SetColorB, ColorB) == 0x000000, "Member 'MaterialProgressBar_SetColorB::ColorB' has a wrong offset!");

// Function LyraGame.MaterialProgressBar.SetColorBackground
// 0x0010 (0x0010 - 0x0000)
struct MaterialProgressBar_SetColorBackground final
{
public:
	struct FLinearColor                           ColorBackground;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_SetColorBackground) == 0x000004, "Wrong alignment on MaterialProgressBar_SetColorBackground");
static_assert(sizeof(MaterialProgressBar_SetColorBackground) == 0x000010, "Wrong size on MaterialProgressBar_SetColorBackground");
static_assert(offsetof(MaterialProgressBar_SetColorBackground, ColorBackground) == 0x000000, "Member 'MaterialProgressBar_SetColorBackground::ColorBackground' has a wrong offset!");

// Function LyraGame.MaterialProgressBar.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct MaterialProgressBar_SetProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_SetProgress) == 0x000004, "Wrong alignment on MaterialProgressBar_SetProgress");
static_assert(sizeof(MaterialProgressBar_SetProgress) == 0x000004, "Wrong size on MaterialProgressBar_SetProgress");
static_assert(offsetof(MaterialProgressBar_SetProgress, Progress) == 0x000000, "Member 'MaterialProgressBar_SetProgress::Progress' has a wrong offset!");

// Function LyraGame.MaterialProgressBar.SetStartProgress
// 0x0004 (0x0004 - 0x0000)
struct MaterialProgressBar_SetStartProgress final
{
public:
	float                                         StartProgress;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_SetStartProgress) == 0x000004, "Wrong alignment on MaterialProgressBar_SetStartProgress");
static_assert(sizeof(MaterialProgressBar_SetStartProgress) == 0x000004, "Wrong size on MaterialProgressBar_SetStartProgress");
static_assert(offsetof(MaterialProgressBar_SetStartProgress, StartProgress) == 0x000000, "Member 'MaterialProgressBar_SetStartProgress::StartProgress' has a wrong offset!");

// Function LyraGame.TgfAnimNotifyState_WeaponMaterialParameter.ElapsedTime
// 0x0010 (0x0010 - 0x0000)
struct TgfAnimNotifyState_WeaponMaterialParameter_ElapsedTime final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Default;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAnimNotifyState_WeaponMaterialParameter_ElapsedTime) == 0x000008, "Wrong alignment on TgfAnimNotifyState_WeaponMaterialParameter_ElapsedTime");
static_assert(sizeof(TgfAnimNotifyState_WeaponMaterialParameter_ElapsedTime) == 0x000010, "Wrong size on TgfAnimNotifyState_WeaponMaterialParameter_ElapsedTime");
static_assert(offsetof(TgfAnimNotifyState_WeaponMaterialParameter_ElapsedTime, MeshComp) == 0x000000, "Member 'TgfAnimNotifyState_WeaponMaterialParameter_ElapsedTime::MeshComp' has a wrong offset!");
static_assert(offsetof(TgfAnimNotifyState_WeaponMaterialParameter_ElapsedTime, Default) == 0x000008, "Member 'TgfAnimNotifyState_WeaponMaterialParameter_ElapsedTime::Default' has a wrong offset!");
static_assert(offsetof(TgfAnimNotifyState_WeaponMaterialParameter_ElapsedTime, ReturnValue) == 0x00000C, "Member 'TgfAnimNotifyState_WeaponMaterialParameter_ElapsedTime::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAnimNotifyState_WeaponMaterialParameter.TotalTime
// 0x0010 (0x0010 - 0x0000)
struct TgfAnimNotifyState_WeaponMaterialParameter_TotalTime final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Default;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAnimNotifyState_WeaponMaterialParameter_TotalTime) == 0x000008, "Wrong alignment on TgfAnimNotifyState_WeaponMaterialParameter_TotalTime");
static_assert(sizeof(TgfAnimNotifyState_WeaponMaterialParameter_TotalTime) == 0x000010, "Wrong size on TgfAnimNotifyState_WeaponMaterialParameter_TotalTime");
static_assert(offsetof(TgfAnimNotifyState_WeaponMaterialParameter_TotalTime, MeshComp) == 0x000000, "Member 'TgfAnimNotifyState_WeaponMaterialParameter_TotalTime::MeshComp' has a wrong offset!");
static_assert(offsetof(TgfAnimNotifyState_WeaponMaterialParameter_TotalTime, Default) == 0x000008, "Member 'TgfAnimNotifyState_WeaponMaterialParameter_TotalTime::Default' has a wrong offset!");
static_assert(offsetof(TgfAnimNotifyState_WeaponMaterialParameter_TotalTime, ReturnValue) == 0x00000C, "Member 'TgfAnimNotifyState_WeaponMaterialParameter_TotalTime::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraButtonBase.SetButtonText
// 0x0018 (0x0018 - 0x0000)
struct LyraButtonBase_SetButtonText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraButtonBase_SetButtonText) == 0x000008, "Wrong alignment on LyraButtonBase_SetButtonText");
static_assert(sizeof(LyraButtonBase_SetButtonText) == 0x000018, "Wrong size on LyraButtonBase_SetButtonText");
static_assert(offsetof(LyraButtonBase_SetButtonText, InText) == 0x000000, "Member 'LyraButtonBase_SetButtonText::InText' has a wrong offset!");

// Function LyraGame.LyraButtonBase.UpdateButtonText
// 0x0018 (0x0018 - 0x0000)
struct LyraButtonBase_UpdateButtonText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraButtonBase_UpdateButtonText) == 0x000008, "Wrong alignment on LyraButtonBase_UpdateButtonText");
static_assert(sizeof(LyraButtonBase_UpdateButtonText) == 0x000018, "Wrong size on LyraButtonBase_UpdateButtonText");
static_assert(offsetof(LyraButtonBase_UpdateButtonText, InText) == 0x000000, "Member 'LyraButtonBase_UpdateButtonText::InText' has a wrong offset!");

// Function LyraGame.LyraTabButtonBase.SetTabLabelInfo_Implementation
// 0x0110 (0x0110 - 0x0000)
struct LyraTabButtonBase_SetTabLabelInfo_Implementation final
{
public:
	struct FLyraTabDescriptor                     TabLabelInfo;                                      // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabButtonBase_SetTabLabelInfo_Implementation) == 0x000010, "Wrong alignment on LyraTabButtonBase_SetTabLabelInfo_Implementation");
static_assert(sizeof(LyraTabButtonBase_SetTabLabelInfo_Implementation) == 0x000110, "Wrong size on LyraTabButtonBase_SetTabLabelInfo_Implementation");
static_assert(offsetof(LyraTabButtonBase_SetTabLabelInfo_Implementation, TabLabelInfo) == 0x000000, "Member 'LyraTabButtonBase_SetTabLabelInfo_Implementation::TabLabelInfo' has a wrong offset!");

// Function LyraGame.TgfEquipmentInstance.K2_OnWeaponVisibleChanged
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentInstance_K2_OnWeaponVisibleChanged final
{
public:
	bool                                          Visiblity;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentInstance_K2_OnWeaponVisibleChanged) == 0x000001, "Wrong alignment on TgfEquipmentInstance_K2_OnWeaponVisibleChanged");
static_assert(sizeof(TgfEquipmentInstance_K2_OnWeaponVisibleChanged) == 0x000001, "Wrong size on TgfEquipmentInstance_K2_OnWeaponVisibleChanged");
static_assert(offsetof(TgfEquipmentInstance_K2_OnWeaponVisibleChanged, Visiblity) == 0x000000, "Member 'TgfEquipmentInstance_K2_OnWeaponVisibleChanged::Visiblity' has a wrong offset!");

// Function LyraGame.TgfEquipmentInstance.ModifiedDurabilityPoint
// 0x0004 (0x0004 - 0x0000)
struct TgfEquipmentInstance_ModifiedDurabilityPoint final
{
public:
	int32                                         DeltaPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentInstance_ModifiedDurabilityPoint) == 0x000004, "Wrong alignment on TgfEquipmentInstance_ModifiedDurabilityPoint");
static_assert(sizeof(TgfEquipmentInstance_ModifiedDurabilityPoint) == 0x000004, "Wrong size on TgfEquipmentInstance_ModifiedDurabilityPoint");
static_assert(offsetof(TgfEquipmentInstance_ModifiedDurabilityPoint, DeltaPoint) == 0x000000, "Member 'TgfEquipmentInstance_ModifiedDurabilityPoint::DeltaPoint' has a wrong offset!");

// Function LyraGame.TgfEquipmentInstance.RemoveGameplayEffectWithSourceObjectAndTags
// 0x0028 (0x0028 - 0x0000)
struct TgfEquipmentInstance_RemoveGameplayEffectWithSourceObjectAndTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          CheckAnotherWeapon;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentInstance_RemoveGameplayEffectWithSourceObjectAndTags) == 0x000008, "Wrong alignment on TgfEquipmentInstance_RemoveGameplayEffectWithSourceObjectAndTags");
static_assert(sizeof(TgfEquipmentInstance_RemoveGameplayEffectWithSourceObjectAndTags) == 0x000028, "Wrong size on TgfEquipmentInstance_RemoveGameplayEffectWithSourceObjectAndTags");
static_assert(offsetof(TgfEquipmentInstance_RemoveGameplayEffectWithSourceObjectAndTags, TagContainer) == 0x000000, "Member 'TgfEquipmentInstance_RemoveGameplayEffectWithSourceObjectAndTags::TagContainer' has a wrong offset!");
static_assert(offsetof(TgfEquipmentInstance_RemoveGameplayEffectWithSourceObjectAndTags, CheckAnotherWeapon) == 0x000020, "Member 'TgfEquipmentInstance_RemoveGameplayEffectWithSourceObjectAndTags::CheckAnotherWeapon' has a wrong offset!");
static_assert(offsetof(TgfEquipmentInstance_RemoveGameplayEffectWithSourceObjectAndTags, ReturnValue) == 0x000024, "Member 'TgfEquipmentInstance_RemoveGameplayEffectWithSourceObjectAndTags::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentInstance.SetWeaponVisible
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentInstance_SetWeaponVisible final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentInstance_SetWeaponVisible) == 0x000001, "Wrong alignment on TgfEquipmentInstance_SetWeaponVisible");
static_assert(sizeof(TgfEquipmentInstance_SetWeaponVisible) == 0x000001, "Wrong size on TgfEquipmentInstance_SetWeaponVisible");
static_assert(offsetof(TgfEquipmentInstance_SetWeaponVisible, Value) == 0x000000, "Member 'TgfEquipmentInstance_SetWeaponVisible::Value' has a wrong offset!");

// Function LyraGame.TgfEquipmentInstance.SpawnEquipmentActorsWithAttachTarget
// 0x0018 (0x0018 - 0x0000)
struct TgfEquipmentInstance_SpawnEquipmentActorsWithAttachTarget final
{
public:
	class USceneComponent*                        AttachTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutSpawnedActors;                                  // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentInstance_SpawnEquipmentActorsWithAttachTarget) == 0x000008, "Wrong alignment on TgfEquipmentInstance_SpawnEquipmentActorsWithAttachTarget");
static_assert(sizeof(TgfEquipmentInstance_SpawnEquipmentActorsWithAttachTarget) == 0x000018, "Wrong size on TgfEquipmentInstance_SpawnEquipmentActorsWithAttachTarget");
static_assert(offsetof(TgfEquipmentInstance_SpawnEquipmentActorsWithAttachTarget, AttachTarget) == 0x000000, "Member 'TgfEquipmentInstance_SpawnEquipmentActorsWithAttachTarget::AttachTarget' has a wrong offset!");
static_assert(offsetof(TgfEquipmentInstance_SpawnEquipmentActorsWithAttachTarget, OutSpawnedActors) == 0x000008, "Member 'TgfEquipmentInstance_SpawnEquipmentActorsWithAttachTarget::OutSpawnedActors' has a wrong offset!");

// Function LyraGame.TgfEquipmentInstance.GetDurabilityPoint
// 0x0004 (0x0004 - 0x0000)
struct TgfEquipmentInstance_GetDurabilityPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentInstance_GetDurabilityPoint) == 0x000004, "Wrong alignment on TgfEquipmentInstance_GetDurabilityPoint");
static_assert(sizeof(TgfEquipmentInstance_GetDurabilityPoint) == 0x000004, "Wrong size on TgfEquipmentInstance_GetDurabilityPoint");
static_assert(offsetof(TgfEquipmentInstance_GetDurabilityPoint, ReturnValue) == 0x000000, "Member 'TgfEquipmentInstance_GetDurabilityPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentInstance.GetSpawnedActors
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentInstance_GetSpawnedActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentInstance_GetSpawnedActors) == 0x000008, "Wrong alignment on TgfEquipmentInstance_GetSpawnedActors");
static_assert(sizeof(TgfEquipmentInstance_GetSpawnedActors) == 0x000010, "Wrong size on TgfEquipmentInstance_GetSpawnedActors");
static_assert(offsetof(TgfEquipmentInstance_GetSpawnedActors, ReturnValue) == 0x000000, "Member 'TgfEquipmentInstance_GetSpawnedActors::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentInstance.GetWeaponVisible
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentInstance_GetWeaponVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentInstance_GetWeaponVisible) == 0x000001, "Wrong alignment on TgfEquipmentInstance_GetWeaponVisible");
static_assert(sizeof(TgfEquipmentInstance_GetWeaponVisible) == 0x000001, "Wrong size on TgfEquipmentInstance_GetWeaponVisible");
static_assert(offsetof(TgfEquipmentInstance_GetWeaponVisible, ReturnValue) == 0x000000, "Member 'TgfEquipmentInstance_GetWeaponVisible::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentInstance.HasDurabilityPoint
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentInstance_HasDurabilityPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentInstance_HasDurabilityPoint) == 0x000001, "Wrong alignment on TgfEquipmentInstance_HasDurabilityPoint");
static_assert(sizeof(TgfEquipmentInstance_HasDurabilityPoint) == 0x000001, "Wrong size on TgfEquipmentInstance_HasDurabilityPoint");
static_assert(offsetof(TgfEquipmentInstance_HasDurabilityPoint, ReturnValue) == 0x000000, "Member 'TgfEquipmentInstance_HasDurabilityPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttachedAnimInstance.GetAttachedParentAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct TgfAttachedAnimInstance_GetAttachedParentAnimInstance final
{
public:
	class UAnimInstance*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttachedAnimInstance_GetAttachedParentAnimInstance) == 0x000008, "Wrong alignment on TgfAttachedAnimInstance_GetAttachedParentAnimInstance");
static_assert(sizeof(TgfAttachedAnimInstance_GetAttachedParentAnimInstance) == 0x000008, "Wrong size on TgfAttachedAnimInstance_GetAttachedParentAnimInstance");
static_assert(offsetof(TgfAttachedAnimInstance_GetAttachedParentAnimInstance, ReturnValue) == 0x000000, "Member 'TgfAttachedAnimInstance_GetAttachedParentAnimInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttachedAnimInstance.GetAttachedParentCharacter
// 0x0008 (0x0008 - 0x0000)
struct TgfAttachedAnimInstance_GetAttachedParentCharacter final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttachedAnimInstance_GetAttachedParentCharacter) == 0x000008, "Wrong alignment on TgfAttachedAnimInstance_GetAttachedParentCharacter");
static_assert(sizeof(TgfAttachedAnimInstance_GetAttachedParentCharacter) == 0x000008, "Wrong size on TgfAttachedAnimInstance_GetAttachedParentCharacter");
static_assert(offsetof(TgfAttachedAnimInstance_GetAttachedParentCharacter, ReturnValue) == 0x000000, "Member 'TgfAttachedAnimInstance_GetAttachedParentCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttachedAnimInstance.IsOnDedicatedServer
// 0x0001 (0x0001 - 0x0000)
struct TgfAttachedAnimInstance_IsOnDedicatedServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttachedAnimInstance_IsOnDedicatedServer) == 0x000001, "Wrong alignment on TgfAttachedAnimInstance_IsOnDedicatedServer");
static_assert(sizeof(TgfAttachedAnimInstance_IsOnDedicatedServer) == 0x000001, "Wrong size on TgfAttachedAnimInstance_IsOnDedicatedServer");
static_assert(offsetof(TgfAttachedAnimInstance_IsOnDedicatedServer, ReturnValue) == 0x000000, "Member 'TgfAttachedAnimInstance_IsOnDedicatedServer::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSimulatedInputWidget.InputKeyValue
// 0x0018 (0x0018 - 0x0000)
struct LyraSimulatedInputWidget_InputKeyValue final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSimulatedInputWidget_InputKeyValue) == 0x000008, "Wrong alignment on LyraSimulatedInputWidget_InputKeyValue");
static_assert(sizeof(LyraSimulatedInputWidget_InputKeyValue) == 0x000018, "Wrong size on LyraSimulatedInputWidget_InputKeyValue");
static_assert(offsetof(LyraSimulatedInputWidget_InputKeyValue, Value) == 0x000000, "Member 'LyraSimulatedInputWidget_InputKeyValue::Value' has a wrong offset!");

// Function LyraGame.LyraSimulatedInputWidget.InputKeyValue2D
// 0x0010 (0x0010 - 0x0000)
struct LyraSimulatedInputWidget_InputKeyValue2D final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSimulatedInputWidget_InputKeyValue2D) == 0x000008, "Wrong alignment on LyraSimulatedInputWidget_InputKeyValue2D");
static_assert(sizeof(LyraSimulatedInputWidget_InputKeyValue2D) == 0x000010, "Wrong size on LyraSimulatedInputWidget_InputKeyValue2D");
static_assert(offsetof(LyraSimulatedInputWidget_InputKeyValue2D, Value) == 0x000000, "Member 'LyraSimulatedInputWidget_InputKeyValue2D::Value' has a wrong offset!");

// Function LyraGame.LyraSimulatedInputWidget.GetAssociatedAction
// 0x0008 (0x0008 - 0x0000)
struct LyraSimulatedInputWidget_GetAssociatedAction final
{
public:
	const class UInputAction*                     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSimulatedInputWidget_GetAssociatedAction) == 0x000008, "Wrong alignment on LyraSimulatedInputWidget_GetAssociatedAction");
static_assert(sizeof(LyraSimulatedInputWidget_GetAssociatedAction) == 0x000008, "Wrong size on LyraSimulatedInputWidget_GetAssociatedAction");
static_assert(offsetof(LyraSimulatedInputWidget_GetAssociatedAction, ReturnValue) == 0x000000, "Member 'LyraSimulatedInputWidget_GetAssociatedAction::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSimulatedInputWidget.GetEnhancedInputSubsystem
// 0x0008 (0x0008 - 0x0000)
struct LyraSimulatedInputWidget_GetEnhancedInputSubsystem final
{
public:
	class UEnhancedInputLocalPlayerSubsystem*     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSimulatedInputWidget_GetEnhancedInputSubsystem) == 0x000008, "Wrong alignment on LyraSimulatedInputWidget_GetEnhancedInputSubsystem");
static_assert(sizeof(LyraSimulatedInputWidget_GetEnhancedInputSubsystem) == 0x000008, "Wrong size on LyraSimulatedInputWidget_GetEnhancedInputSubsystem");
static_assert(offsetof(LyraSimulatedInputWidget_GetEnhancedInputSubsystem, ReturnValue) == 0x000000, "Member 'LyraSimulatedInputWidget_GetEnhancedInputSubsystem::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSimulatedInputWidget.GetSimulatedKey
// 0x0018 (0x0018 - 0x0000)
struct LyraSimulatedInputWidget_GetSimulatedKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSimulatedInputWidget_GetSimulatedKey) == 0x000008, "Wrong alignment on LyraSimulatedInputWidget_GetSimulatedKey");
static_assert(sizeof(LyraSimulatedInputWidget_GetSimulatedKey) == 0x000018, "Wrong size on LyraSimulatedInputWidget_GetSimulatedKey");
static_assert(offsetof(LyraSimulatedInputWidget_GetSimulatedKey, ReturnValue) == 0x000000, "Member 'LyraSimulatedInputWidget_GetSimulatedKey::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAuraManagerComponent.AddGameplayAura
// 0x0010 (0x0010 - 0x0000)
struct TgfAuraManagerComponent_AddGameplayAura final
{
public:
	TSubclassOf<class UTgfGameplayAura>           AuraClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfActiveGameplayAuraHandle           ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAuraManagerComponent_AddGameplayAura) == 0x000008, "Wrong alignment on TgfAuraManagerComponent_AddGameplayAura");
static_assert(sizeof(TgfAuraManagerComponent_AddGameplayAura) == 0x000010, "Wrong size on TgfAuraManagerComponent_AddGameplayAura");
static_assert(offsetof(TgfAuraManagerComponent_AddGameplayAura, AuraClass) == 0x000000, "Member 'TgfAuraManagerComponent_AddGameplayAura::AuraClass' has a wrong offset!");
static_assert(offsetof(TgfAuraManagerComponent_AddGameplayAura, ReturnValue) == 0x000008, "Member 'TgfAuraManagerComponent_AddGameplayAura::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAuraManagerComponent.AddGameplayAuraWithSourceCharacter
// 0x0018 (0x0018 - 0x0000)
struct TgfAuraManagerComponent_AddGameplayAuraWithSourceCharacter final
{
public:
	TSubclassOf<class UTgfGameplayAura>           AuraClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Source;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfActiveGameplayAuraHandle           ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAuraManagerComponent_AddGameplayAuraWithSourceCharacter) == 0x000008, "Wrong alignment on TgfAuraManagerComponent_AddGameplayAuraWithSourceCharacter");
static_assert(sizeof(TgfAuraManagerComponent_AddGameplayAuraWithSourceCharacter) == 0x000018, "Wrong size on TgfAuraManagerComponent_AddGameplayAuraWithSourceCharacter");
static_assert(offsetof(TgfAuraManagerComponent_AddGameplayAuraWithSourceCharacter, AuraClass) == 0x000000, "Member 'TgfAuraManagerComponent_AddGameplayAuraWithSourceCharacter::AuraClass' has a wrong offset!");
static_assert(offsetof(TgfAuraManagerComponent_AddGameplayAuraWithSourceCharacter, Source) == 0x000008, "Member 'TgfAuraManagerComponent_AddGameplayAuraWithSourceCharacter::Source' has a wrong offset!");
static_assert(offsetof(TgfAuraManagerComponent_AddGameplayAuraWithSourceCharacter, ReturnValue) == 0x000010, "Member 'TgfAuraManagerComponent_AddGameplayAuraWithSourceCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAuraManagerComponent.GetActiveAuraByClass
// 0x0010 (0x0010 - 0x0000)
struct TgfAuraManagerComponent_GetActiveAuraByClass final
{
public:
	TSubclassOf<class UTgfGameplayAura>           AuraClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfGameplayAura*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAuraManagerComponent_GetActiveAuraByClass) == 0x000008, "Wrong alignment on TgfAuraManagerComponent_GetActiveAuraByClass");
static_assert(sizeof(TgfAuraManagerComponent_GetActiveAuraByClass) == 0x000010, "Wrong size on TgfAuraManagerComponent_GetActiveAuraByClass");
static_assert(offsetof(TgfAuraManagerComponent_GetActiveAuraByClass, AuraClass) == 0x000000, "Member 'TgfAuraManagerComponent_GetActiveAuraByClass::AuraClass' has a wrong offset!");
static_assert(offsetof(TgfAuraManagerComponent_GetActiveAuraByClass, ReturnValue) == 0x000008, "Member 'TgfAuraManagerComponent_GetActiveAuraByClass::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAuraManagerComponent.HandleInstigatorDeath
// 0x0008 (0x0008 - 0x0000)
struct TgfAuraManagerComponent_HandleInstigatorDeath final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAuraManagerComponent_HandleInstigatorDeath) == 0x000008, "Wrong alignment on TgfAuraManagerComponent_HandleInstigatorDeath");
static_assert(sizeof(TgfAuraManagerComponent_HandleInstigatorDeath) == 0x000008, "Wrong size on TgfAuraManagerComponent_HandleInstigatorDeath");
static_assert(offsetof(TgfAuraManagerComponent_HandleInstigatorDeath, OwningActor) == 0x000000, "Member 'TgfAuraManagerComponent_HandleInstigatorDeath::OwningActor' has a wrong offset!");

// Function LyraGame.TgfAuraManagerComponent.HandleInstigatorEscape
// 0x0010 (0x0010 - 0x0000)
struct TgfAuraManagerComponent_HandleInstigatorEscape final
{
public:
	class APawn*                                  OwingPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaiting;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAuraManagerComponent_HandleInstigatorEscape) == 0x000008, "Wrong alignment on TgfAuraManagerComponent_HandleInstigatorEscape");
static_assert(sizeof(TgfAuraManagerComponent_HandleInstigatorEscape) == 0x000010, "Wrong size on TgfAuraManagerComponent_HandleInstigatorEscape");
static_assert(offsetof(TgfAuraManagerComponent_HandleInstigatorEscape, OwingPawn) == 0x000000, "Member 'TgfAuraManagerComponent_HandleInstigatorEscape::OwingPawn' has a wrong offset!");
static_assert(offsetof(TgfAuraManagerComponent_HandleInstigatorEscape, bWaiting) == 0x000008, "Member 'TgfAuraManagerComponent_HandleInstigatorEscape::bWaiting' has a wrong offset!");

// Function LyraGame.TgfAuraManagerComponent.HandleInstigatorRebirth
// 0x0008 (0x0008 - 0x0000)
struct TgfAuraManagerComponent_HandleInstigatorRebirth final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAuraManagerComponent_HandleInstigatorRebirth) == 0x000008, "Wrong alignment on TgfAuraManagerComponent_HandleInstigatorRebirth");
static_assert(sizeof(TgfAuraManagerComponent_HandleInstigatorRebirth) == 0x000008, "Wrong size on TgfAuraManagerComponent_HandleInstigatorRebirth");
static_assert(offsetof(TgfAuraManagerComponent_HandleInstigatorRebirth, OwningActor) == 0x000000, "Member 'TgfAuraManagerComponent_HandleInstigatorRebirth::OwningActor' has a wrong offset!");

// Function LyraGame.TgfAuraManagerComponent.RemoveGameplayAura
// 0x0008 (0x0008 - 0x0000)
struct TgfAuraManagerComponent_RemoveGameplayAura final
{
public:
	class UTgfGameplayAura*                       GameplayAura;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAuraManagerComponent_RemoveGameplayAura) == 0x000008, "Wrong alignment on TgfAuraManagerComponent_RemoveGameplayAura");
static_assert(sizeof(TgfAuraManagerComponent_RemoveGameplayAura) == 0x000008, "Wrong size on TgfAuraManagerComponent_RemoveGameplayAura");
static_assert(offsetof(TgfAuraManagerComponent_RemoveGameplayAura, GameplayAura) == 0x000000, "Member 'TgfAuraManagerComponent_RemoveGameplayAura::GameplayAura' has a wrong offset!");

// Function LyraGame.TgfAuraManagerComponent.RemoveGameplayAuraByHandle
// 0x0004 (0x0004 - 0x0000)
struct TgfAuraManagerComponent_RemoveGameplayAuraByHandle final
{
public:
	struct FTgfActiveGameplayAuraHandle           Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAuraManagerComponent_RemoveGameplayAuraByHandle) == 0x000004, "Wrong alignment on TgfAuraManagerComponent_RemoveGameplayAuraByHandle");
static_assert(sizeof(TgfAuraManagerComponent_RemoveGameplayAuraByHandle) == 0x000004, "Wrong size on TgfAuraManagerComponent_RemoveGameplayAuraByHandle");
static_assert(offsetof(TgfAuraManagerComponent_RemoveGameplayAuraByHandle, Handle) == 0x000000, "Member 'TgfAuraManagerComponent_RemoveGameplayAuraByHandle::Handle' has a wrong offset!");

// Function LyraGame.TgfAuraManagerComponent.RemoveGameplayAuraBySourceAura
// 0x0010 (0x0010 - 0x0000)
struct TgfAuraManagerComponent_RemoveGameplayAuraBySourceAura final
{
public:
	TSubclassOf<class UTgfGameplayAura>           AuraClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAuraManagerComponent_RemoveGameplayAuraBySourceAura) == 0x000008, "Wrong alignment on TgfAuraManagerComponent_RemoveGameplayAuraBySourceAura");
static_assert(sizeof(TgfAuraManagerComponent_RemoveGameplayAuraBySourceAura) == 0x000010, "Wrong size on TgfAuraManagerComponent_RemoveGameplayAuraBySourceAura");
static_assert(offsetof(TgfAuraManagerComponent_RemoveGameplayAuraBySourceAura, AuraClass) == 0x000000, "Member 'TgfAuraManagerComponent_RemoveGameplayAuraBySourceAura::AuraClass' has a wrong offset!");
static_assert(offsetof(TgfAuraManagerComponent_RemoveGameplayAuraBySourceAura, StacksToRemove) == 0x000008, "Member 'TgfAuraManagerComponent_RemoveGameplayAuraBySourceAura::StacksToRemove' has a wrong offset!");

// Function LyraGame.TgfAuraManagerComponent.RemoveGameplayAuraWithAppliedTags
// 0x0020 (0x0020 - 0x0000)
struct TgfAuraManagerComponent_RemoveGameplayAuraWithAppliedTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAuraManagerComponent_RemoveGameplayAuraWithAppliedTags) == 0x000008, "Wrong alignment on TgfAuraManagerComponent_RemoveGameplayAuraWithAppliedTags");
static_assert(sizeof(TgfAuraManagerComponent_RemoveGameplayAuraWithAppliedTags) == 0x000020, "Wrong size on TgfAuraManagerComponent_RemoveGameplayAuraWithAppliedTags");
static_assert(offsetof(TgfAuraManagerComponent_RemoveGameplayAuraWithAppliedTags, Tags) == 0x000000, "Member 'TgfAuraManagerComponent_RemoveGameplayAuraWithAppliedTags::Tags' has a wrong offset!");

// Function LyraGame.LyraTaggedActor.IsAttachedFirstPersonCharacter
// 0x0001 (0x0001 - 0x0000)
struct LyraTaggedActor_IsAttachedFirstPersonCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTaggedActor_IsAttachedFirstPersonCharacter) == 0x000001, "Wrong alignment on LyraTaggedActor_IsAttachedFirstPersonCharacter");
static_assert(sizeof(LyraTaggedActor_IsAttachedFirstPersonCharacter) == 0x000001, "Wrong size on LyraTaggedActor_IsAttachedFirstPersonCharacter");
static_assert(offsetof(LyraTaggedActor_IsAttachedFirstPersonCharacter, ReturnValue) == 0x000000, "Member 'LyraTaggedActor_IsAttachedFirstPersonCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.BuildAvatarMeshForExternalUse
// 0x0038 (0x0038 - 0x0000)
struct TgfAvatarActor_BuildAvatarMeshForExternalUse final
{
public:
	struct FGameplayTagContainer                  CosmeticTags;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  OutMeshesToAppend;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_BuildAvatarMeshForExternalUse) == 0x000008, "Wrong alignment on TgfAvatarActor_BuildAvatarMeshForExternalUse");
static_assert(sizeof(TgfAvatarActor_BuildAvatarMeshForExternalUse) == 0x000038, "Wrong size on TgfAvatarActor_BuildAvatarMeshForExternalUse");
static_assert(offsetof(TgfAvatarActor_BuildAvatarMeshForExternalUse, CosmeticTags) == 0x000000, "Member 'TgfAvatarActor_BuildAvatarMeshForExternalUse::CosmeticTags' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_BuildAvatarMeshForExternalUse, OutMeshesToAppend) == 0x000020, "Member 'TgfAvatarActor_BuildAvatarMeshForExternalUse::OutMeshesToAppend' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_BuildAvatarMeshForExternalUse, ReturnValue) == 0x000030, "Member 'TgfAvatarActor_BuildAvatarMeshForExternalUse::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.DisableSubMeshClothSimulation
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_DisableSubMeshClothSimulation final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_DisableSubMeshClothSimulation) == 0x000001, "Wrong alignment on TgfAvatarActor_DisableSubMeshClothSimulation");
static_assert(sizeof(TgfAvatarActor_DisableSubMeshClothSimulation) == 0x000001, "Wrong size on TgfAvatarActor_DisableSubMeshClothSimulation");
static_assert(offsetof(TgfAvatarActor_DisableSubMeshClothSimulation, bDisable) == 0x000000, "Member 'TgfAvatarActor_DisableSubMeshClothSimulation::bDisable' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.ForceThirdPerson
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_ForceThirdPerson final
{
public:
	bool                                          bThirdPerson;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_ForceThirdPerson) == 0x000001, "Wrong alignment on TgfAvatarActor_ForceThirdPerson");
static_assert(sizeof(TgfAvatarActor_ForceThirdPerson) == 0x000001, "Wrong size on TgfAvatarActor_ForceThirdPerson");
static_assert(offsetof(TgfAvatarActor_ForceThirdPerson, bThirdPerson) == 0x000000, "Member 'TgfAvatarActor_ForceThirdPerson::bThirdPerson' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.GetAllAttachmentActors
// 0x0010 (0x0010 - 0x0000)
struct TgfAvatarActor_GetAllAttachmentActors final
{
public:
	TArray<class AActor*>                         OutSpawnedActors;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_GetAllAttachmentActors) == 0x000008, "Wrong alignment on TgfAvatarActor_GetAllAttachmentActors");
static_assert(sizeof(TgfAvatarActor_GetAllAttachmentActors) == 0x000010, "Wrong size on TgfAvatarActor_GetAllAttachmentActors");
static_assert(offsetof(TgfAvatarActor_GetAllAttachmentActors, OutSpawnedActors) == 0x000000, "Member 'TgfAvatarActor_GetAllAttachmentActors::OutSpawnedActors' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.GetAllSkinIDs
// 0x0010 (0x0010 - 0x0000)
struct TgfAvatarActor_GetAllSkinIDs final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_GetAllSkinIDs) == 0x000008, "Wrong alignment on TgfAvatarActor_GetAllSkinIDs");
static_assert(sizeof(TgfAvatarActor_GetAllSkinIDs) == 0x000010, "Wrong size on TgfAvatarActor_GetAllSkinIDs");
static_assert(offsetof(TgfAvatarActor_GetAllSkinIDs, ReturnValue) == 0x000000, "Member 'TgfAvatarActor_GetAllSkinIDs::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.GetAvatarGender
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_GetAvatarGender final
{
public:
	ETgfActorGender                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_GetAvatarGender) == 0x000001, "Wrong alignment on TgfAvatarActor_GetAvatarGender");
static_assert(sizeof(TgfAvatarActor_GetAvatarGender) == 0x000001, "Wrong size on TgfAvatarActor_GetAvatarGender");
static_assert(offsetof(TgfAvatarActor_GetAvatarGender, ReturnValue) == 0x000000, "Member 'TgfAvatarActor_GetAvatarGender::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.GetAvatarRace
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_GetAvatarRace final
{
public:
	ETgfActorRace                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_GetAvatarRace) == 0x000001, "Wrong alignment on TgfAvatarActor_GetAvatarRace");
static_assert(sizeof(TgfAvatarActor_GetAvatarRace) == 0x000001, "Wrong size on TgfAvatarActor_GetAvatarRace");
static_assert(offsetof(TgfAvatarActor_GetAvatarRace, ReturnValue) == 0x000000, "Member 'TgfAvatarActor_GetAvatarRace::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.GetFaceConfig
// 0x0030 (0x0030 - 0x0000)
struct TgfAvatarActor_GetFaceConfig final
{
public:
	struct FTgfHeadResConfig                      ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_GetFaceConfig) == 0x000004, "Wrong alignment on TgfAvatarActor_GetFaceConfig");
static_assert(sizeof(TgfAvatarActor_GetFaceConfig) == 0x000030, "Wrong size on TgfAvatarActor_GetFaceConfig");
static_assert(offsetof(TgfAvatarActor_GetFaceConfig, ReturnValue) == 0x000000, "Member 'TgfAvatarActor_GetFaceConfig::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.GetInventoryAvatar
// 0x0008 (0x0008 - 0x0000)
struct TgfAvatarActor_GetInventoryAvatar final
{
public:
	class ATgfAvatarActor*                        InventoryAvatar;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_GetInventoryAvatar) == 0x000008, "Wrong alignment on TgfAvatarActor_GetInventoryAvatar");
static_assert(sizeof(TgfAvatarActor_GetInventoryAvatar) == 0x000008, "Wrong size on TgfAvatarActor_GetInventoryAvatar");
static_assert(offsetof(TgfAvatarActor_GetInventoryAvatar, InventoryAvatar) == 0x000000, "Member 'TgfAvatarActor_GetInventoryAvatar::InventoryAvatar' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.GetIsActive
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_GetIsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_GetIsActive) == 0x000001, "Wrong alignment on TgfAvatarActor_GetIsActive");
static_assert(sizeof(TgfAvatarActor_GetIsActive) == 0x000001, "Wrong size on TgfAvatarActor_GetIsActive");
static_assert(offsetof(TgfAvatarActor_GetIsActive, ReturnValue) == 0x000000, "Member 'TgfAvatarActor_GetIsActive::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.GetIsMainAvatar
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_GetIsMainAvatar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_GetIsMainAvatar) == 0x000001, "Wrong alignment on TgfAvatarActor_GetIsMainAvatar");
static_assert(sizeof(TgfAvatarActor_GetIsMainAvatar) == 0x000001, "Wrong size on TgfAvatarActor_GetIsMainAvatar");
static_assert(offsetof(TgfAvatarActor_GetIsMainAvatar, ReturnValue) == 0x000000, "Member 'TgfAvatarActor_GetIsMainAvatar::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.OnUpdateAvatarDataMesh
// 0x0002 (0x0002 - 0x0000)
struct TgfAvatarActor_OnUpdateAvatarDataMesh final
{
public:
	ETgfActorGender                               Gender;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 Race;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_OnUpdateAvatarDataMesh) == 0x000001, "Wrong alignment on TgfAvatarActor_OnUpdateAvatarDataMesh");
static_assert(sizeof(TgfAvatarActor_OnUpdateAvatarDataMesh) == 0x000002, "Wrong size on TgfAvatarActor_OnUpdateAvatarDataMesh");
static_assert(offsetof(TgfAvatarActor_OnUpdateAvatarDataMesh, Gender) == 0x000000, "Member 'TgfAvatarActor_OnUpdateAvatarDataMesh::Gender' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_OnUpdateAvatarDataMesh, Race) == 0x000001, "Member 'TgfAvatarActor_OnUpdateAvatarDataMesh::Race' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.RemoveSkinMeshIDs
// 0x0008 (0x0008 - 0x0000)
struct TgfAvatarActor_RemoveSkinMeshIDs final
{
public:
	ETgfSkinSlot                                  Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkinId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_RemoveSkinMeshIDs) == 0x000004, "Wrong alignment on TgfAvatarActor_RemoveSkinMeshIDs");
static_assert(sizeof(TgfAvatarActor_RemoveSkinMeshIDs) == 0x000008, "Wrong size on TgfAvatarActor_RemoveSkinMeshIDs");
static_assert(offsetof(TgfAvatarActor_RemoveSkinMeshIDs, Slot) == 0x000000, "Member 'TgfAvatarActor_RemoveSkinMeshIDs::Slot' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_RemoveSkinMeshIDs, SkinId) == 0x000004, "Member 'TgfAvatarActor_RemoveSkinMeshIDs::SkinId' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetActive
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_SetActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_SetActive) == 0x000001, "Wrong alignment on TgfAvatarActor_SetActive");
static_assert(sizeof(TgfAvatarActor_SetActive) == 0x000001, "Wrong size on TgfAvatarActor_SetActive");
static_assert(offsetof(TgfAvatarActor_SetActive, Active) == 0x000000, "Member 'TgfAvatarActor_SetActive::Active' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetAllSkinIdMeshIdsAndHelmetVisible
// 0x0018 (0x0018 - 0x0000)
struct TgfAvatarActor_SetAllSkinIdMeshIdsAndHelmetVisible final
{
public:
	TArray<int32>                                 SkinIds;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          HelmetVisible;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAvatarActor_SetAllSkinIdMeshIdsAndHelmetVisible) == 0x000008, "Wrong alignment on TgfAvatarActor_SetAllSkinIdMeshIdsAndHelmetVisible");
static_assert(sizeof(TgfAvatarActor_SetAllSkinIdMeshIdsAndHelmetVisible) == 0x000018, "Wrong size on TgfAvatarActor_SetAllSkinIdMeshIdsAndHelmetVisible");
static_assert(offsetof(TgfAvatarActor_SetAllSkinIdMeshIdsAndHelmetVisible, SkinIds) == 0x000000, "Member 'TgfAvatarActor_SetAllSkinIdMeshIdsAndHelmetVisible::SkinIds' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_SetAllSkinIdMeshIdsAndHelmetVisible, HelmetVisible) == 0x000010, "Member 'TgfAvatarActor_SetAllSkinIdMeshIdsAndHelmetVisible::HelmetVisible' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetAnimTick
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_SetAnimTick final
{
public:
	EVisibilityBasedAnimTickOption                Option;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_SetAnimTick) == 0x000001, "Wrong alignment on TgfAvatarActor_SetAnimTick");
static_assert(sizeof(TgfAvatarActor_SetAnimTick) == 0x000001, "Wrong size on TgfAvatarActor_SetAnimTick");
static_assert(offsetof(TgfAvatarActor_SetAnimTick, Option) == 0x000000, "Member 'TgfAvatarActor_SetAnimTick::Option' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetAvatarGender
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_SetAvatarGender final
{
public:
	ETgfActorGender                               Data;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_SetAvatarGender) == 0x000001, "Wrong alignment on TgfAvatarActor_SetAvatarGender");
static_assert(sizeof(TgfAvatarActor_SetAvatarGender) == 0x000001, "Wrong size on TgfAvatarActor_SetAvatarGender");
static_assert(offsetof(TgfAvatarActor_SetAvatarGender, Data) == 0x000000, "Member 'TgfAvatarActor_SetAvatarGender::Data' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetAvatarRace
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_SetAvatarRace final
{
public:
	ETgfActorRace                                 Data;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_SetAvatarRace) == 0x000001, "Wrong alignment on TgfAvatarActor_SetAvatarRace");
static_assert(sizeof(TgfAvatarActor_SetAvatarRace) == 0x000001, "Wrong size on TgfAvatarActor_SetAvatarRace");
static_assert(offsetof(TgfAvatarActor_SetAvatarRace, Data) == 0x000000, "Member 'TgfAvatarActor_SetAvatarRace::Data' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetAvatarSkinMesh
// 0x0018 (0x0018 - 0x0000)
struct TgfAvatarActor_SetAvatarSkinMesh final
{
public:
	TArray<struct FTgfCharaPartChangeConfig>      InAttachmentMeshParts;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAvatarActor_SetAvatarSkinMesh) == 0x000008, "Wrong alignment on TgfAvatarActor_SetAvatarSkinMesh");
static_assert(sizeof(TgfAvatarActor_SetAvatarSkinMesh) == 0x000018, "Wrong size on TgfAvatarActor_SetAvatarSkinMesh");
static_assert(offsetof(TgfAvatarActor_SetAvatarSkinMesh, InAttachmentMeshParts) == 0x000000, "Member 'TgfAvatarActor_SetAvatarSkinMesh::InAttachmentMeshParts' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_SetAvatarSkinMesh, ReturnValue) == 0x000010, "Member 'TgfAvatarActor_SetAvatarSkinMesh::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetEquipmentAttachment
// 0x0010 (0x0010 - 0x0000)
struct TgfAvatarActor_SetEquipmentAttachment final
{
public:
	TArray<struct FTgfCharaPartSpawnActor>        SpawnActorsInfo;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_SetEquipmentAttachment) == 0x000008, "Wrong alignment on TgfAvatarActor_SetEquipmentAttachment");
static_assert(sizeof(TgfAvatarActor_SetEquipmentAttachment) == 0x000010, "Wrong size on TgfAvatarActor_SetEquipmentAttachment");
static_assert(offsetof(TgfAvatarActor_SetEquipmentAttachment, SpawnActorsInfo) == 0x000000, "Member 'TgfAvatarActor_SetEquipmentAttachment::SpawnActorsInfo' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetFaceConfig
// 0x0030 (0x0030 - 0x0000)
struct TgfAvatarActor_SetFaceConfig final
{
public:
	struct FTgfHeadResConfig                      Data;                                              // 0x0000(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_SetFaceConfig) == 0x000004, "Wrong alignment on TgfAvatarActor_SetFaceConfig");
static_assert(sizeof(TgfAvatarActor_SetFaceConfig) == 0x000030, "Wrong size on TgfAvatarActor_SetFaceConfig");
static_assert(offsetof(TgfAvatarActor_SetFaceConfig, Data) == 0x000000, "Member 'TgfAvatarActor_SetFaceConfig::Data' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetIsMainAvatar
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_SetIsMainAvatar final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_SetIsMainAvatar) == 0x000001, "Wrong alignment on TgfAvatarActor_SetIsMainAvatar");
static_assert(sizeof(TgfAvatarActor_SetIsMainAvatar) == 0x000001, "Wrong size on TgfAvatarActor_SetIsMainAvatar");
static_assert(offsetof(TgfAvatarActor_SetIsMainAvatar, Value) == 0x000000, "Member 'TgfAvatarActor_SetIsMainAvatar::Value' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetLobbyActor
// 0x0001 (0x0001 - 0x0000)
struct TgfAvatarActor_SetLobbyActor final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_SetLobbyActor) == 0x000001, "Wrong alignment on TgfAvatarActor_SetLobbyActor");
static_assert(sizeof(TgfAvatarActor_SetLobbyActor) == 0x000001, "Wrong size on TgfAvatarActor_SetLobbyActor");
static_assert(offsetof(TgfAvatarActor_SetLobbyActor, Value) == 0x000000, "Member 'TgfAvatarActor_SetLobbyActor::Value' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetOverrideAvatarMesh
// 0x0018 (0x0018 - 0x0000)
struct TgfAvatarActor_SetOverrideAvatarMesh final
{
public:
	TArray<struct FTgfCharaPartChangeConfig>      InOverrideMeshParts;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAvatarActor_SetOverrideAvatarMesh) == 0x000008, "Wrong alignment on TgfAvatarActor_SetOverrideAvatarMesh");
static_assert(sizeof(TgfAvatarActor_SetOverrideAvatarMesh) == 0x000018, "Wrong size on TgfAvatarActor_SetOverrideAvatarMesh");
static_assert(offsetof(TgfAvatarActor_SetOverrideAvatarMesh, InOverrideMeshParts) == 0x000000, "Member 'TgfAvatarActor_SetOverrideAvatarMesh::InOverrideMeshParts' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_SetOverrideAvatarMesh, ReturnValue) == 0x000010, "Member 'TgfAvatarActor_SetOverrideAvatarMesh::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SetSkinMeshForce
// 0x0018 (0x0018 - 0x0000)
struct TgfAvatarActor_SetSkinMeshForce final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreTypeCheck;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfSkinSlot                                  SlotAlternative;                                   // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULyraInventoryItemDefinition> Definition;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAvatarActor_SetSkinMeshForce) == 0x000008, "Wrong alignment on TgfAvatarActor_SetSkinMeshForce");
static_assert(sizeof(TgfAvatarActor_SetSkinMeshForce) == 0x000018, "Wrong size on TgfAvatarActor_SetSkinMeshForce");
static_assert(offsetof(TgfAvatarActor_SetSkinMeshForce, Type_id) == 0x000000, "Member 'TgfAvatarActor_SetSkinMeshForce::Type_id' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_SetSkinMeshForce, IgnoreTypeCheck) == 0x000004, "Member 'TgfAvatarActor_SetSkinMeshForce::IgnoreTypeCheck' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_SetSkinMeshForce, SlotAlternative) == 0x000005, "Member 'TgfAvatarActor_SetSkinMeshForce::SlotAlternative' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_SetSkinMeshForce, Definition) == 0x000008, "Member 'TgfAvatarActor_SetSkinMeshForce::Definition' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_SetSkinMeshForce, ReturnValue) == 0x000010, "Member 'TgfAvatarActor_SetSkinMeshForce::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.SwitchSkin
// 0x0008 (0x0008 - 0x0000)
struct TgfAvatarActor_SwitchSkin final
{
public:
	class UMaterialInterface*                     SkinMat;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_SwitchSkin) == 0x000008, "Wrong alignment on TgfAvatarActor_SwitchSkin");
static_assert(sizeof(TgfAvatarActor_SwitchSkin) == 0x000008, "Wrong size on TgfAvatarActor_SwitchSkin");
static_assert(offsetof(TgfAvatarActor_SwitchSkin, SkinMat) == 0x000000, "Member 'TgfAvatarActor_SwitchSkin::SkinMat' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.ToggleBaseMeshForBodyPart
// 0x0002 (0x0002 - 0x0000)
struct TgfAvatarActor_ToggleBaseMeshForBodyPart final
{
public:
	ETgfCharaPart                                 Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBaseMeshVisible;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_ToggleBaseMeshForBodyPart) == 0x000001, "Wrong alignment on TgfAvatarActor_ToggleBaseMeshForBodyPart");
static_assert(sizeof(TgfAvatarActor_ToggleBaseMeshForBodyPart) == 0x000002, "Wrong size on TgfAvatarActor_ToggleBaseMeshForBodyPart");
static_assert(offsetof(TgfAvatarActor_ToggleBaseMeshForBodyPart, Part) == 0x000000, "Member 'TgfAvatarActor_ToggleBaseMeshForBodyPart::Part' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_ToggleBaseMeshForBodyPart, bBaseMeshVisible) == 0x000001, "Member 'TgfAvatarActor_ToggleBaseMeshForBodyPart::bBaseMeshVisible' has a wrong offset!");

// Function LyraGame.TgfAvatarActor.UpdateMeshMorphTarget
// 0x000C (0x000C - 0x0000)
struct TgfAvatarActor_UpdateMeshMorphTarget final
{
public:
	class FName                                   MorphName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarActor_UpdateMeshMorphTarget) == 0x000004, "Wrong alignment on TgfAvatarActor_UpdateMeshMorphTarget");
static_assert(sizeof(TgfAvatarActor_UpdateMeshMorphTarget) == 0x00000C, "Wrong size on TgfAvatarActor_UpdateMeshMorphTarget");
static_assert(offsetof(TgfAvatarActor_UpdateMeshMorphTarget, MorphName) == 0x000000, "Member 'TgfAvatarActor_UpdateMeshMorphTarget::MorphName' has a wrong offset!");
static_assert(offsetof(TgfAvatarActor_UpdateMeshMorphTarget, Weight) == 0x000008, "Member 'TgfAvatarActor_UpdateMeshMorphTarget::Weight' has a wrong offset!");

// Function LyraGame.TgfAvatarHelperComponent.CopyDataFromAvatar
// 0x0008 (0x0008 - 0x0000)
struct TgfAvatarHelperComponent_CopyDataFromAvatar final
{
public:
	class ATgfAvatarActor*                        Avatar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarHelperComponent_CopyDataFromAvatar) == 0x000008, "Wrong alignment on TgfAvatarHelperComponent_CopyDataFromAvatar");
static_assert(sizeof(TgfAvatarHelperComponent_CopyDataFromAvatar) == 0x000008, "Wrong size on TgfAvatarHelperComponent_CopyDataFromAvatar");
static_assert(offsetof(TgfAvatarHelperComponent_CopyDataFromAvatar, Avatar) == 0x000000, "Member 'TgfAvatarHelperComponent_CopyDataFromAvatar::Avatar' has a wrong offset!");

// Function LyraGame.TgfAvatarHelperComponent.CopyDataToAvatar
// 0x0008 (0x0008 - 0x0000)
struct TgfAvatarHelperComponent_CopyDataToAvatar final
{
public:
	class ATgfAvatarActor*                        Avatar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAvatarHelperComponent_CopyDataToAvatar) == 0x000008, "Wrong alignment on TgfAvatarHelperComponent_CopyDataToAvatar");
static_assert(sizeof(TgfAvatarHelperComponent_CopyDataToAvatar) == 0x000008, "Wrong size on TgfAvatarHelperComponent_CopyDataToAvatar");
static_assert(offsetof(TgfAvatarHelperComponent_CopyDataToAvatar, Avatar) == 0x000000, "Member 'TgfAvatarHelperComponent_CopyDataToAvatar::Avatar' has a wrong offset!");

// Function LyraGame.TgfBattleEleResistanceDataAsset.GetConfigElementResistanceRate
// 0x0008 (0x0008 - 0x0000)
struct TgfBattleEleResistanceDataAsset_GetConfigElementResistanceRate final
{
public:
	ETgfBattleElement                             AttackElement;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfBattleElement                             DefendElement;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBattleEleResistanceDataAsset_GetConfigElementResistanceRate) == 0x000004, "Wrong alignment on TgfBattleEleResistanceDataAsset_GetConfigElementResistanceRate");
static_assert(sizeof(TgfBattleEleResistanceDataAsset_GetConfigElementResistanceRate) == 0x000008, "Wrong size on TgfBattleEleResistanceDataAsset_GetConfigElementResistanceRate");
static_assert(offsetof(TgfBattleEleResistanceDataAsset_GetConfigElementResistanceRate, AttackElement) == 0x000000, "Member 'TgfBattleEleResistanceDataAsset_GetConfigElementResistanceRate::AttackElement' has a wrong offset!");
static_assert(offsetof(TgfBattleEleResistanceDataAsset_GetConfigElementResistanceRate, DefendElement) == 0x000001, "Member 'TgfBattleEleResistanceDataAsset_GetConfigElementResistanceRate::DefendElement' has a wrong offset!");
static_assert(offsetof(TgfBattleEleResistanceDataAsset_GetConfigElementResistanceRate, ReturnValue) == 0x000004, "Member 'TgfBattleEleResistanceDataAsset_GetConfigElementResistanceRate::ReturnValue' has a wrong offset!");

// Function LyraGame.CircumferenceMarkerWidget.SetRadius
// 0x0004 (0x0004 - 0x0000)
struct CircumferenceMarkerWidget_SetRadius final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircumferenceMarkerWidget_SetRadius) == 0x000004, "Wrong alignment on CircumferenceMarkerWidget_SetRadius");
static_assert(sizeof(CircumferenceMarkerWidget_SetRadius) == 0x000004, "Wrong size on CircumferenceMarkerWidget_SetRadius");
static_assert(offsetof(CircumferenceMarkerWidget_SetRadius, InRadius) == 0x000000, "Member 'CircumferenceMarkerWidget_SetRadius::InRadius' has a wrong offset!");

// Function LyraGame.EnumUtils.GetAnotherSlot
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_GetAnotherSlot final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_GetAnotherSlot) == 0x000001, "Wrong alignment on EnumUtils_GetAnotherSlot");
static_assert(sizeof(EnumUtils_GetAnotherSlot) == 0x000002, "Wrong size on EnumUtils_GetAnotherSlot");
static_assert(offsetof(EnumUtils_GetAnotherSlot, Slot) == 0x000000, "Member 'EnumUtils_GetAnotherSlot::Slot' has a wrong offset!");
static_assert(offsetof(EnumUtils_GetAnotherSlot, ReturnValue) == 0x000001, "Member 'EnumUtils_GetAnotherSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsAdditionalWeapon
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_IsAdditionalWeapon final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsAdditionalWeapon) == 0x000001, "Wrong alignment on EnumUtils_IsAdditionalWeapon");
static_assert(sizeof(EnumUtils_IsAdditionalWeapon) == 0x000002, "Wrong size on EnumUtils_IsAdditionalWeapon");
static_assert(offsetof(EnumUtils_IsAdditionalWeapon, Slot) == 0x000000, "Member 'EnumUtils_IsAdditionalWeapon::Slot' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsAdditionalWeapon, ReturnValue) == 0x000001, "Member 'EnumUtils_IsAdditionalWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsBossMonster
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_IsBossMonster final
{
public:
	ETgfActorType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsBossMonster) == 0x000001, "Wrong alignment on EnumUtils_IsBossMonster");
static_assert(sizeof(EnumUtils_IsBossMonster) == 0x000002, "Wrong size on EnumUtils_IsBossMonster");
static_assert(offsetof(EnumUtils_IsBossMonster, Type) == 0x000000, "Member 'EnumUtils_IsBossMonster::Type' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsBossMonster, ReturnValue) == 0x000001, "Member 'EnumUtils_IsBossMonster::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsBotPlayer
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_IsBotPlayer final
{
public:
	ETgfActorType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsBotPlayer) == 0x000001, "Wrong alignment on EnumUtils_IsBotPlayer");
static_assert(sizeof(EnumUtils_IsBotPlayer) == 0x000002, "Wrong size on EnumUtils_IsBotPlayer");
static_assert(offsetof(EnumUtils_IsBotPlayer, Type) == 0x000000, "Member 'EnumUtils_IsBotPlayer::Type' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsBotPlayer, ReturnValue) == 0x000001, "Member 'EnumUtils_IsBotPlayer::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsCurrentWeapon
// 0x0003 (0x0003 - 0x0000)
struct EnumUtils_IsCurrentWeapon final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          ChangeSlot;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsCurrentWeapon) == 0x000001, "Wrong alignment on EnumUtils_IsCurrentWeapon");
static_assert(sizeof(EnumUtils_IsCurrentWeapon) == 0x000003, "Wrong size on EnumUtils_IsCurrentWeapon");
static_assert(offsetof(EnumUtils_IsCurrentWeapon, Slot) == 0x000000, "Member 'EnumUtils_IsCurrentWeapon::Slot' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsCurrentWeapon, ChangeSlot) == 0x000001, "Member 'EnumUtils_IsCurrentWeapon::ChangeSlot' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsCurrentWeapon, ReturnValue) == 0x000002, "Member 'EnumUtils_IsCurrentWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsEliteMonster
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_IsEliteMonster final
{
public:
	ETgfActorType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsEliteMonster) == 0x000001, "Wrong alignment on EnumUtils_IsEliteMonster");
static_assert(sizeof(EnumUtils_IsEliteMonster) == 0x000002, "Wrong size on EnumUtils_IsEliteMonster");
static_assert(offsetof(EnumUtils_IsEliteMonster, Type) == 0x000000, "Member 'EnumUtils_IsEliteMonster::Type' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsEliteMonster, ReturnValue) == 0x000001, "Member 'EnumUtils_IsEliteMonster::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsLeftHandWeapon
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_IsLeftHandWeapon final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsLeftHandWeapon) == 0x000001, "Wrong alignment on EnumUtils_IsLeftHandWeapon");
static_assert(sizeof(EnumUtils_IsLeftHandWeapon) == 0x000002, "Wrong size on EnumUtils_IsLeftHandWeapon");
static_assert(offsetof(EnumUtils_IsLeftHandWeapon, Slot) == 0x000000, "Member 'EnumUtils_IsLeftHandWeapon::Slot' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsLeftHandWeapon, ReturnValue) == 0x000001, "Member 'EnumUtils_IsLeftHandWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsMatchSlot
// 0x0004 (0x0004 - 0x0000)
struct EnumUtils_IsMatchSlot final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponEquipType                           EquipType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanEquipDouble;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsMatchSlot) == 0x000001, "Wrong alignment on EnumUtils_IsMatchSlot");
static_assert(sizeof(EnumUtils_IsMatchSlot) == 0x000004, "Wrong size on EnumUtils_IsMatchSlot");
static_assert(offsetof(EnumUtils_IsMatchSlot, Slot) == 0x000000, "Member 'EnumUtils_IsMatchSlot::Slot' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsMatchSlot, EquipType) == 0x000001, "Member 'EnumUtils_IsMatchSlot::EquipType' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsMatchSlot, CanEquipDouble) == 0x000002, "Member 'EnumUtils_IsMatchSlot::CanEquipDouble' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsMatchSlot, ReturnValue) == 0x000003, "Member 'EnumUtils_IsMatchSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsMonster
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_IsMonster final
{
public:
	ETgfActorType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsMonster) == 0x000001, "Wrong alignment on EnumUtils_IsMonster");
static_assert(sizeof(EnumUtils_IsMonster) == 0x000002, "Wrong size on EnumUtils_IsMonster");
static_assert(offsetof(EnumUtils_IsMonster, Type) == 0x000000, "Member 'EnumUtils_IsMonster::Type' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsMonster, ReturnValue) == 0x000001, "Member 'EnumUtils_IsMonster::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsPlayer
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_IsPlayer final
{
public:
	ETgfActorType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsPlayer) == 0x000001, "Wrong alignment on EnumUtils_IsPlayer");
static_assert(sizeof(EnumUtils_IsPlayer) == 0x000002, "Wrong size on EnumUtils_IsPlayer");
static_assert(offsetof(EnumUtils_IsPlayer, Type) == 0x000000, "Member 'EnumUtils_IsPlayer::Type' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsPlayer, ReturnValue) == 0x000001, "Member 'EnumUtils_IsPlayer::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsRightHandWeapon
// 0x0003 (0x0003 - 0x0000)
struct EnumUtils_IsRightHandWeapon final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedConsumable;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsRightHandWeapon) == 0x000001, "Wrong alignment on EnumUtils_IsRightHandWeapon");
static_assert(sizeof(EnumUtils_IsRightHandWeapon) == 0x000003, "Wrong size on EnumUtils_IsRightHandWeapon");
static_assert(offsetof(EnumUtils_IsRightHandWeapon, Slot) == 0x000000, "Member 'EnumUtils_IsRightHandWeapon::Slot' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsRightHandWeapon, NeedConsumable) == 0x000001, "Member 'EnumUtils_IsRightHandWeapon::NeedConsumable' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsRightHandWeapon, ReturnValue) == 0x000002, "Member 'EnumUtils_IsRightHandWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsSummonActor
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_IsSummonActor final
{
public:
	ETgfActorType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsSummonActor) == 0x000001, "Wrong alignment on EnumUtils_IsSummonActor");
static_assert(sizeof(EnumUtils_IsSummonActor) == 0x000002, "Wrong size on EnumUtils_IsSummonActor");
static_assert(offsetof(EnumUtils_IsSummonActor, Type) == 0x000000, "Member 'EnumUtils_IsSummonActor::Type' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsSummonActor, ReturnValue) == 0x000001, "Member 'EnumUtils_IsSummonActor::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsWeapon
// 0x0003 (0x0003 - 0x0000)
struct EnumUtils_IsWeapon final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyBase;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsWeapon) == 0x000001, "Wrong alignment on EnumUtils_IsWeapon");
static_assert(sizeof(EnumUtils_IsWeapon) == 0x000003, "Wrong size on EnumUtils_IsWeapon");
static_assert(offsetof(EnumUtils_IsWeapon, Slot) == 0x000000, "Member 'EnumUtils_IsWeapon::Slot' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsWeapon, OnlyBase) == 0x000001, "Member 'EnumUtils_IsWeapon::OnlyBase' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsWeapon, ReturnValue) == 0x000002, "Member 'EnumUtils_IsWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.IsWeaponChangeSlot
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_IsWeaponChangeSlot final
{
public:
	ETgfWeaponChangeSlot                          ChangeSlot;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_IsWeaponChangeSlot) == 0x000001, "Wrong alignment on EnumUtils_IsWeaponChangeSlot");
static_assert(sizeof(EnumUtils_IsWeaponChangeSlot) == 0x000002, "Wrong size on EnumUtils_IsWeaponChangeSlot");
static_assert(offsetof(EnumUtils_IsWeaponChangeSlot, ChangeSlot) == 0x000000, "Member 'EnumUtils_IsWeaponChangeSlot::ChangeSlot' has a wrong offset!");
static_assert(offsetof(EnumUtils_IsWeaponChangeSlot, ReturnValue) == 0x000001, "Member 'EnumUtils_IsWeaponChangeSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.NeedLeftHand
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_NeedLeftHand final
{
public:
	ETgfWeaponEquipType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_NeedLeftHand) == 0x000001, "Wrong alignment on EnumUtils_NeedLeftHand");
static_assert(sizeof(EnumUtils_NeedLeftHand) == 0x000002, "Wrong size on EnumUtils_NeedLeftHand");
static_assert(offsetof(EnumUtils_NeedLeftHand, Type) == 0x000000, "Member 'EnumUtils_NeedLeftHand::Type' has a wrong offset!");
static_assert(offsetof(EnumUtils_NeedLeftHand, ReturnValue) == 0x000001, "Member 'EnumUtils_NeedLeftHand::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.NeedRightHand
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_NeedRightHand final
{
public:
	ETgfWeaponEquipType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_NeedRightHand) == 0x000001, "Wrong alignment on EnumUtils_NeedRightHand");
static_assert(sizeof(EnumUtils_NeedRightHand) == 0x000002, "Wrong size on EnumUtils_NeedRightHand");
static_assert(offsetof(EnumUtils_NeedRightHand, Type) == 0x000000, "Member 'EnumUtils_NeedRightHand::Type' has a wrong offset!");
static_assert(offsetof(EnumUtils_NeedRightHand, ReturnValue) == 0x000001, "Member 'EnumUtils_NeedRightHand::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.Parse3ValIntFromFloat
// 0x0008 (0x0008 - 0x0000)
struct EnumUtils_Parse3ValIntFromFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_Parse3ValIntFromFloat) == 0x000004, "Wrong alignment on EnumUtils_Parse3ValIntFromFloat");
static_assert(sizeof(EnumUtils_Parse3ValIntFromFloat) == 0x000008, "Wrong size on EnumUtils_Parse3ValIntFromFloat");
static_assert(offsetof(EnumUtils_Parse3ValIntFromFloat, Value) == 0x000000, "Member 'EnumUtils_Parse3ValIntFromFloat::Value' has a wrong offset!");
static_assert(offsetof(EnumUtils_Parse3ValIntFromFloat, ReturnValue) == 0x000004, "Member 'EnumUtils_Parse3ValIntFromFloat::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.ParseAttackTypeFromFloat
// 0x0008 (0x0008 - 0x0000)
struct EnumUtils_ParseAttackTypeFromFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfUseAttackType                             ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnumUtils_ParseAttackTypeFromFloat) == 0x000004, "Wrong alignment on EnumUtils_ParseAttackTypeFromFloat");
static_assert(sizeof(EnumUtils_ParseAttackTypeFromFloat) == 0x000008, "Wrong size on EnumUtils_ParseAttackTypeFromFloat");
static_assert(offsetof(EnumUtils_ParseAttackTypeFromFloat, Value) == 0x000000, "Member 'EnumUtils_ParseAttackTypeFromFloat::Value' has a wrong offset!");
static_assert(offsetof(EnumUtils_ParseAttackTypeFromFloat, ReturnValue) == 0x000004, "Member 'EnumUtils_ParseAttackTypeFromFloat::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.ParseBattleElementTagFromEnum
// 0x000C (0x000C - 0x0000)
struct EnumUtils_ParseBattleElementTagFromEnum final
{
public:
	ETgfBattleElement                             BattleElement;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_ParseBattleElementTagFromEnum) == 0x000004, "Wrong alignment on EnumUtils_ParseBattleElementTagFromEnum");
static_assert(sizeof(EnumUtils_ParseBattleElementTagFromEnum) == 0x00000C, "Wrong size on EnumUtils_ParseBattleElementTagFromEnum");
static_assert(offsetof(EnumUtils_ParseBattleElementTagFromEnum, BattleElement) == 0x000000, "Member 'EnumUtils_ParseBattleElementTagFromEnum::BattleElement' has a wrong offset!");
static_assert(offsetof(EnumUtils_ParseBattleElementTagFromEnum, ReturnValue) == 0x000004, "Member 'EnumUtils_ParseBattleElementTagFromEnum::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.ParseBoolFromFloat
// 0x0008 (0x0008 - 0x0000)
struct EnumUtils_ParseBoolFromFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnumUtils_ParseBoolFromFloat) == 0x000004, "Wrong alignment on EnumUtils_ParseBoolFromFloat");
static_assert(sizeof(EnumUtils_ParseBoolFromFloat) == 0x000008, "Wrong size on EnumUtils_ParseBoolFromFloat");
static_assert(offsetof(EnumUtils_ParseBoolFromFloat, Value) == 0x000000, "Member 'EnumUtils_ParseBoolFromFloat::Value' has a wrong offset!");
static_assert(offsetof(EnumUtils_ParseBoolFromFloat, ReturnValue) == 0x000004, "Member 'EnumUtils_ParseBoolFromFloat::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.ParseDamageBattleElementTagFromEnum
// 0x000C (0x000C - 0x0000)
struct EnumUtils_ParseDamageBattleElementTagFromEnum final
{
public:
	ETgfBattleElement                             BattleElement;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_ParseDamageBattleElementTagFromEnum) == 0x000004, "Wrong alignment on EnumUtils_ParseDamageBattleElementTagFromEnum");
static_assert(sizeof(EnumUtils_ParseDamageBattleElementTagFromEnum) == 0x00000C, "Wrong size on EnumUtils_ParseDamageBattleElementTagFromEnum");
static_assert(offsetof(EnumUtils_ParseDamageBattleElementTagFromEnum, BattleElement) == 0x000000, "Member 'EnumUtils_ParseDamageBattleElementTagFromEnum::BattleElement' has a wrong offset!");
static_assert(offsetof(EnumUtils_ParseDamageBattleElementTagFromEnum, ReturnValue) == 0x000004, "Member 'EnumUtils_ParseDamageBattleElementTagFromEnum::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.ParseElementFromFloat
// 0x0008 (0x0008 - 0x0000)
struct EnumUtils_ParseElementFromFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfBattleElement                             ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnumUtils_ParseElementFromFloat) == 0x000004, "Wrong alignment on EnumUtils_ParseElementFromFloat");
static_assert(sizeof(EnumUtils_ParseElementFromFloat) == 0x000008, "Wrong size on EnumUtils_ParseElementFromFloat");
static_assert(offsetof(EnumUtils_ParseElementFromFloat, Value) == 0x000000, "Member 'EnumUtils_ParseElementFromFloat::Value' has a wrong offset!");
static_assert(offsetof(EnumUtils_ParseElementFromFloat, ReturnValue) == 0x000004, "Member 'EnumUtils_ParseElementFromFloat::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.ParseLeftHandWeaponSlot
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_ParseLeftHandWeaponSlot final
{
public:
	ETgfWeaponChangeSlot                          Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_ParseLeftHandWeaponSlot) == 0x000001, "Wrong alignment on EnumUtils_ParseLeftHandWeaponSlot");
static_assert(sizeof(EnumUtils_ParseLeftHandWeaponSlot) == 0x000002, "Wrong size on EnumUtils_ParseLeftHandWeaponSlot");
static_assert(offsetof(EnumUtils_ParseLeftHandWeaponSlot, Slot) == 0x000000, "Member 'EnumUtils_ParseLeftHandWeaponSlot::Slot' has a wrong offset!");
static_assert(offsetof(EnumUtils_ParseLeftHandWeaponSlot, ReturnValue) == 0x000001, "Member 'EnumUtils_ParseLeftHandWeaponSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.ParseRightHandWeaponSlot
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_ParseRightHandWeaponSlot final
{
public:
	ETgfWeaponChangeSlot                          Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_ParseRightHandWeaponSlot) == 0x000001, "Wrong alignment on EnumUtils_ParseRightHandWeaponSlot");
static_assert(sizeof(EnumUtils_ParseRightHandWeaponSlot) == 0x000002, "Wrong size on EnumUtils_ParseRightHandWeaponSlot");
static_assert(offsetof(EnumUtils_ParseRightHandWeaponSlot, Slot) == 0x000000, "Member 'EnumUtils_ParseRightHandWeaponSlot::Slot' has a wrong offset!");
static_assert(offsetof(EnumUtils_ParseRightHandWeaponSlot, ReturnValue) == 0x000001, "Member 'EnumUtils_ParseRightHandWeaponSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.ParseWeaponSlot
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_ParseWeaponSlot final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_ParseWeaponSlot) == 0x000001, "Wrong alignment on EnumUtils_ParseWeaponSlot");
static_assert(sizeof(EnumUtils_ParseWeaponSlot) == 0x000002, "Wrong size on EnumUtils_ParseWeaponSlot");
static_assert(offsetof(EnumUtils_ParseWeaponSlot, Slot) == 0x000000, "Member 'EnumUtils_ParseWeaponSlot::Slot' has a wrong offset!");
static_assert(offsetof(EnumUtils_ParseWeaponSlot, ReturnValue) == 0x000001, "Member 'EnumUtils_ParseWeaponSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.EnumUtils.ParseWeaponSlotToEquipSlotExtra
// 0x0002 (0x0002 - 0x0000)
struct EnumUtils_ParseWeaponSlotToEquipSlotExtra final
{
public:
	ETgfWeaponChangeSlot                          Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumUtils_ParseWeaponSlotToEquipSlotExtra) == 0x000001, "Wrong alignment on EnumUtils_ParseWeaponSlotToEquipSlotExtra");
static_assert(sizeof(EnumUtils_ParseWeaponSlotToEquipSlotExtra) == 0x000002, "Wrong size on EnumUtils_ParseWeaponSlotToEquipSlotExtra");
static_assert(offsetof(EnumUtils_ParseWeaponSlotToEquipSlotExtra, Slot) == 0x000000, "Member 'EnumUtils_ParseWeaponSlotToEquipSlotExtra::Slot' has a wrong offset!");
static_assert(offsetof(EnumUtils_ParseWeaponSlotToEquipSlotExtra, ReturnValue) == 0x000001, "Member 'EnumUtils_ParseWeaponSlotToEquipSlotExtra::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.BlendFloat
// 0x0020 (0x0020 - 0x0000)
struct TgfBlueprintFunctionLibrary_BlendFloat final
{
public:
	float                                         CurValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlendingUtilParamsCache               CachedParams;                                      // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_BlendFloat) == 0x000004, "Wrong alignment on TgfBlueprintFunctionLibrary_BlendFloat");
static_assert(sizeof(TgfBlueprintFunctionLibrary_BlendFloat) == 0x000020, "Wrong size on TgfBlueprintFunctionLibrary_BlendFloat");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BlendFloat, CurValue) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_BlendFloat::CurValue' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BlendFloat, TargetValue) == 0x000004, "Member 'TgfBlueprintFunctionLibrary_BlendFloat::TargetValue' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BlendFloat, DeltaTime) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_BlendFloat::DeltaTime' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BlendFloat, TotalTime) == 0x00000C, "Member 'TgfBlueprintFunctionLibrary_BlendFloat::TotalTime' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BlendFloat, CachedParams) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_BlendFloat::CachedParams' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BlendFloat, ReturnValue) == 0x00001C, "Member 'TgfBlueprintFunctionLibrary_BlendFloat::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.BoxOverlapActorsWithRot
// 0x00A0 (0x00A0 - 0x0000)
struct TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxPos;                                            // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rot;                                               // 0x0040(0x0020)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UClass*                                 ActorClassFilter;                                  // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0078(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot) == 0x000010, "Wrong alignment on TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot");
static_assert(sizeof(TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot) == 0x0000A0, "Wrong size on TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot, WorldContextObject) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot, BoxPos) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot::BoxPos' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot, BoxExtent) == 0x000020, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot::BoxExtent' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot, Rot) == 0x000040, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot::Rot' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot, ObjectTypes) == 0x000060, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot::ObjectTypes' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot, ActorClassFilter) == 0x000070, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot::ActorClassFilter' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot, ActorsToIgnore) == 0x000078, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot, OutActors) == 0x000088, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot::OutActors' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot, ReturnValue) == 0x000098, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapActorsWithRot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.BoxOverlapComponentsWithRot
// 0x00A0 (0x00A0 - 0x0000)
struct TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxPos;                                            // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rot;                                               // 0x0040(0x0020)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UClass*                                 ComponentClassFilter;                              // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0078(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            OutComponents;                                     // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot) == 0x000010, "Wrong alignment on TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot");
static_assert(sizeof(TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot) == 0x0000A0, "Wrong size on TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot, WorldContextObject) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot, BoxPos) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot::BoxPos' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot, Extent) == 0x000020, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot::Extent' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot, Rot) == 0x000040, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot::Rot' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot, ObjectTypes) == 0x000060, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot::ObjectTypes' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot, ComponentClassFilter) == 0x000070, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot::ComponentClassFilter' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot, ActorsToIgnore) == 0x000078, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot, OutComponents) == 0x000088, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot::OutComponents' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot, ReturnValue) == 0x000098, "Member 'TgfBlueprintFunctionLibrary_BoxOverlapComponentsWithRot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.CalcItemScreenSizeByViewTarget
// 0x0058 (0x0058 - 0x0000)
struct TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget final
{
public:
	struct FVector                                ViewPos;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ItemPos;                                           // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ItemExtent;                                        // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InViewTarget;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget");
static_assert(sizeof(TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget) == 0x000058, "Wrong size on TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget");
static_assert(offsetof(TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget, ViewPos) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget::ViewPos' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget, ItemPos) == 0x000018, "Member 'TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget::ItemPos' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget, ItemExtent) == 0x000030, "Member 'TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget::ItemExtent' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget, InViewTarget) == 0x000048, "Member 'TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget::InViewTarget' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget, ReturnValue) == 0x000050, "Member 'TgfBlueprintFunctionLibrary_CalcItemScreenSizeByViewTarget::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.CheckCurrentWeaponSlotType
// 0x0010 (0x0010 - 0x0000)
struct TgfBlueprintFunctionLibrary_CheckCurrentWeaponSlotType final
{
public:
	class ALyraCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_CheckCurrentWeaponSlotType) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_CheckCurrentWeaponSlotType");
static_assert(sizeof(TgfBlueprintFunctionLibrary_CheckCurrentWeaponSlotType) == 0x000010, "Wrong size on TgfBlueprintFunctionLibrary_CheckCurrentWeaponSlotType");
static_assert(offsetof(TgfBlueprintFunctionLibrary_CheckCurrentWeaponSlotType, Character) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_CheckCurrentWeaponSlotType::Character' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_CheckCurrentWeaponSlotType, Slot) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_CheckCurrentWeaponSlotType::Slot' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_CheckCurrentWeaponSlotType, ReturnValue) == 0x000009, "Member 'TgfBlueprintFunctionLibrary_CheckCurrentWeaponSlotType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.ClassicSpeedDamping
// 0x0014 (0x0014 - 0x0000)
struct TgfBlueprintFunctionLibrary_ClassicSpeedDamping final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpeedDampingParams                    DampingParams;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_ClassicSpeedDamping) == 0x000004, "Wrong alignment on TgfBlueprintFunctionLibrary_ClassicSpeedDamping");
static_assert(sizeof(TgfBlueprintFunctionLibrary_ClassicSpeedDamping) == 0x000014, "Wrong size on TgfBlueprintFunctionLibrary_ClassicSpeedDamping");
static_assert(offsetof(TgfBlueprintFunctionLibrary_ClassicSpeedDamping, Current) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_ClassicSpeedDamping::Current' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_ClassicSpeedDamping, DeltaTime) == 0x000004, "Member 'TgfBlueprintFunctionLibrary_ClassicSpeedDamping::DeltaTime' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_ClassicSpeedDamping, DampingParams) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_ClassicSpeedDamping::DampingParams' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_ClassicSpeedDamping, ReturnValue) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_ClassicSpeedDamping::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.DestroyChildActor
// 0x0010 (0x0010 - 0x0000)
struct TgfBlueprintFunctionLibrary_DestroyChildActor final
{
public:
	class AActor*                                 Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ChildType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_DestroyChildActor) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_DestroyChildActor");
static_assert(sizeof(TgfBlueprintFunctionLibrary_DestroyChildActor) == 0x000010, "Wrong size on TgfBlueprintFunctionLibrary_DestroyChildActor");
static_assert(offsetof(TgfBlueprintFunctionLibrary_DestroyChildActor, Parent) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_DestroyChildActor::Parent' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_DestroyChildActor, ChildType) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_DestroyChildActor::ChildType' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.EvaluateCurve
// 0x0090 (0x0090 - 0x0000)
struct TgfBlueprintFunctionLibrary_EvaluateCurve final
{
public:
	struct FRuntimeFloatCurve                     Curve;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x008C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_EvaluateCurve) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_EvaluateCurve");
static_assert(sizeof(TgfBlueprintFunctionLibrary_EvaluateCurve) == 0x000090, "Wrong size on TgfBlueprintFunctionLibrary_EvaluateCurve");
static_assert(offsetof(TgfBlueprintFunctionLibrary_EvaluateCurve, Curve) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_EvaluateCurve::Curve' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_EvaluateCurve, Value) == 0x000088, "Member 'TgfBlueprintFunctionLibrary_EvaluateCurve::Value' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_EvaluateCurve, ReturnValue) == 0x00008C, "Member 'TgfBlueprintFunctionLibrary_EvaluateCurve::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.EvaluateCurveMapping
// 0x0098 (0x0098 - 0x0000)
struct TgfBlueprintFunctionLibrary_EvaluateCurveMapping final
{
public:
	struct FRuntimeFloatCurve                     Curve;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MappingDuration;                                   // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0094(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_EvaluateCurveMapping) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_EvaluateCurveMapping");
static_assert(sizeof(TgfBlueprintFunctionLibrary_EvaluateCurveMapping) == 0x000098, "Wrong size on TgfBlueprintFunctionLibrary_EvaluateCurveMapping");
static_assert(offsetof(TgfBlueprintFunctionLibrary_EvaluateCurveMapping, Curve) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_EvaluateCurveMapping::Curve' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_EvaluateCurveMapping, Time) == 0x000088, "Member 'TgfBlueprintFunctionLibrary_EvaluateCurveMapping::Time' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_EvaluateCurveMapping, MappingDuration) == 0x00008C, "Member 'TgfBlueprintFunctionLibrary_EvaluateCurveMapping::MappingDuration' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_EvaluateCurveMapping, DefaultValue) == 0x000090, "Member 'TgfBlueprintFunctionLibrary_EvaluateCurveMapping::DefaultValue' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_EvaluateCurveMapping, ReturnValue) == 0x000094, "Member 'TgfBlueprintFunctionLibrary_EvaluateCurveMapping::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.FindUnoccupiedLocationForSpawn
// 0x0060 (0x0060 - 0x0000)
struct TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn final
{
public:
	const class AActor*                           WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TestLocation;                                      // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TestRotation;                                      // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PlaceLocation;                                     // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn");
static_assert(sizeof(TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn) == 0x000060, "Wrong size on TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn");
static_assert(offsetof(TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn, WorldContext) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn::WorldContext' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn, ActorClass) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn::ActorClass' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn, TestLocation) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn::TestLocation' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn, TestRotation) == 0x000028, "Member 'TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn::TestRotation' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn, PlaceLocation) == 0x000040, "Member 'TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn::PlaceLocation' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn, ReturnValue) == 0x000058, "Member 'TgfBlueprintFunctionLibrary_FindUnoccupiedLocationForSpawn::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetAllBluePrintClassesOfPath
// 0x0020 (0x0020 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetAllBluePrintClassesOfPath final
{
public:
	class FName                                   Path;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludingSubPath;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetAllBluePrintClassesOfPath) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetAllBluePrintClassesOfPath");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetAllBluePrintClassesOfPath) == 0x000020, "Wrong size on TgfBlueprintFunctionLibrary_GetAllBluePrintClassesOfPath");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAllBluePrintClassesOfPath, Path) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetAllBluePrintClassesOfPath::Path' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAllBluePrintClassesOfPath, IncludingSubPath) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetAllBluePrintClassesOfPath::IncludingSubPath' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAllBluePrintClassesOfPath, ReturnValue) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_GetAllBluePrintClassesOfPath::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetAngleBetweenTwoVectors
// 0x0038 (0x0038 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors final
{
public:
	struct FVector                                Lhs;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Rhs;                                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Signed;                                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors) == 0x000038, "Wrong size on TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors, Lhs) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors::Lhs' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors, Rhs) == 0x000018, "Member 'TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors::Rhs' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors, Signed) == 0x000030, "Member 'TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors::Signed' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors, ReturnValue) == 0x000034, "Member 'TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetAngleBetweenTwoVectors2D
// 0x0038 (0x0038 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D final
{
public:
	struct FVector                                Lhs;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Rhs;                                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Signed;                                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D) == 0x000038, "Wrong size on TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D, Lhs) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D::Lhs' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D, Rhs) == 0x000018, "Member 'TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D::Rhs' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D, Signed) == 0x000030, "Member 'TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D::Signed' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D, ReturnValue) == 0x000034, "Member 'TgfBlueprintFunctionLibrary_GetAngleBetweenTwoVectors2D::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetAngleDirection8
// 0x0008 (0x0008 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetAngleDirection8 final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimConfigDirection8                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetAngleDirection8) == 0x000004, "Wrong alignment on TgfBlueprintFunctionLibrary_GetAngleDirection8");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetAngleDirection8) == 0x000008, "Wrong size on TgfBlueprintFunctionLibrary_GetAngleDirection8");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleDirection8, Angle) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetAngleDirection8::Angle' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleDirection8, ReturnValue) == 0x000004, "Member 'TgfBlueprintFunctionLibrary_GetAngleDirection8::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetAngleDirection8_WithThreshold
// 0x0014 (0x0014 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackThreshold;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizThreshold;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontThreshold;                                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimConfigDirection8                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold) == 0x000004, "Wrong alignment on TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold) == 0x000014, "Wrong size on TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold, Angle) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold::Angle' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold, BackThreshold) == 0x000004, "Member 'TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold::BackThreshold' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold, HorizThreshold) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold::HorizThreshold' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold, FrontThreshold) == 0x00000C, "Member 'TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold::FrontThreshold' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold, ReturnValue) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_GetAngleDirection8_WithThreshold::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetAttachNiagaraComponents
// 0x0018 (0x0018 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetAttachNiagaraComponents final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNiagaraComponent*>              NiagaraSystems;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetAttachNiagaraComponents) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetAttachNiagaraComponents");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetAttachNiagaraComponents) == 0x000018, "Wrong size on TgfBlueprintFunctionLibrary_GetAttachNiagaraComponents");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAttachNiagaraComponents, Target) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetAttachNiagaraComponents::Target' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetAttachNiagaraComponents, NiagaraSystems) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetAttachNiagaraComponents::NiagaraSystems' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetCharacterControlledRotation
// 0x0020 (0x0020 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetCharacterControlledRotation final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetCharacterControlledRotation) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetCharacterControlledRotation");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetCharacterControlledRotation) == 0x000020, "Wrong size on TgfBlueprintFunctionLibrary_GetCharacterControlledRotation");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetCharacterControlledRotation, Character) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetCharacterControlledRotation::Character' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetCharacterControlledRotation, ReturnValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetCharacterControlledRotation::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetCurrentAcceleration
// 0x0020 (0x0020 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetCurrentAcceleration final
{
public:
	const class UCharacterMovementComponent*      MovementComponent;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetCurrentAcceleration) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetCurrentAcceleration");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetCurrentAcceleration) == 0x000020, "Wrong size on TgfBlueprintFunctionLibrary_GetCurrentAcceleration");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetCurrentAcceleration, MovementComponent) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetCurrentAcceleration::MovementComponent' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetCurrentAcceleration, ReturnValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetCurrentAcceleration::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetDebugName
// 0x0018 (0x0018 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetDebugName final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetDebugName) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetDebugName");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetDebugName) == 0x000018, "Wrong size on TgfBlueprintFunctionLibrary_GetDebugName");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetDebugName, Actor) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetDebugName::Actor' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetDebugName, ReturnValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetDebugName::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetDeltaTimeInMilliseconds
// 0x0018 (0x0018 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetDeltaTimeInMilliseconds final
{
public:
	struct FDateTime                              EndTime;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartTime;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetDeltaTimeInMilliseconds) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetDeltaTimeInMilliseconds");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetDeltaTimeInMilliseconds) == 0x000018, "Wrong size on TgfBlueprintFunctionLibrary_GetDeltaTimeInMilliseconds");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetDeltaTimeInMilliseconds, EndTime) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetDeltaTimeInMilliseconds::EndTime' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetDeltaTimeInMilliseconds, StartTime) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetDeltaTimeInMilliseconds::StartTime' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetDeltaTimeInMilliseconds, ReturnValue) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_GetDeltaTimeInMilliseconds::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetEquipmentDefinition
// 0x0010 (0x0010 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetEquipmentDefinition final
{
public:
	int32                                         TypeId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTgfEquipmentDefinition*          ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetEquipmentDefinition) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetEquipmentDefinition");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetEquipmentDefinition) == 0x000010, "Wrong size on TgfBlueprintFunctionLibrary_GetEquipmentDefinition");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetEquipmentDefinition, TypeId) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetEquipmentDefinition::TypeId' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetEquipmentDefinition, ReturnValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetEquipmentDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetLocalViewTarget
// 0x0010 (0x0010 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetLocalViewTarget final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetLocalViewTarget) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetLocalViewTarget");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetLocalViewTarget) == 0x000010, "Wrong size on TgfBlueprintFunctionLibrary_GetLocalViewTarget");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetLocalViewTarget, WorldContext) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetLocalViewTarget::WorldContext' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetLocalViewTarget, ReturnValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetLocalViewTarget::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetMeshComponentsBound
// 0x0040 (0x0040 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetMeshComponentsBound final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeFromChildActors;                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyCollidingComponents;                          // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetMeshComponentsBound) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetMeshComponentsBound");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetMeshComponentsBound) == 0x000040, "Wrong size on TgfBlueprintFunctionLibrary_GetMeshComponentsBound");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetMeshComponentsBound, InActor) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetMeshComponentsBound::InActor' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetMeshComponentsBound, Origin) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetMeshComponentsBound::Origin' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetMeshComponentsBound, BoxExtent) == 0x000020, "Member 'TgfBlueprintFunctionLibrary_GetMeshComponentsBound::BoxExtent' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetMeshComponentsBound, bIncludeFromChildActors) == 0x000038, "Member 'TgfBlueprintFunctionLibrary_GetMeshComponentsBound::bIncludeFromChildActors' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetMeshComponentsBound, bOnlyCollidingComponents) == 0x000039, "Member 'TgfBlueprintFunctionLibrary_GetMeshComponentsBound::bOnlyCollidingComponents' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetPlayMontageDelayInfo
// 0x000C (0x000C - 0x0000)
struct TgfBlueprintFunctionLibrary_GetPlayMontageDelayInfo final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheck;                                            // 0x0004(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultInvalidValue;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetPlayMontageDelayInfo) == 0x000004, "Wrong alignment on TgfBlueprintFunctionLibrary_GetPlayMontageDelayInfo");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetPlayMontageDelayInfo) == 0x00000C, "Wrong size on TgfBlueprintFunctionLibrary_GetPlayMontageDelayInfo");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetPlayMontageDelayInfo, DelayTime) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetPlayMontageDelayInfo::DelayTime' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetPlayMontageDelayInfo, bCheck) == 0x000004, "Member 'TgfBlueprintFunctionLibrary_GetPlayMontageDelayInfo::bCheck' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetPlayMontageDelayInfo, DefaultInvalidValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetPlayMontageDelayInfo::DefaultInvalidValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetRaceAvatarData
// 0x0170 (0x0170 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetRaceAvatarData final
{
public:
	ETgfActorRace                                 Race;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightOffset;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfRaceAvatarBodyModifyData           ReturnValue;                                       // 0x0008(0x0168)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetRaceAvatarData) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetRaceAvatarData");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetRaceAvatarData) == 0x000170, "Wrong size on TgfBlueprintFunctionLibrary_GetRaceAvatarData");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetRaceAvatarData, Race) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetRaceAvatarData::Race' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetRaceAvatarData, HeightOffset) == 0x000004, "Member 'TgfBlueprintFunctionLibrary_GetRaceAvatarData::HeightOffset' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetRaceAvatarData, ReturnValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetRaceAvatarData::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetSpawnOffsetPos
// 0x0050 (0x0050 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetSpawnOffsetPos final
{
public:
	TArray<struct FVector>                        OutOffsetPos;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class AActor*                           SrcActor;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        SpawnOffset;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SpawnNum;                                          // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SourceOffset;                                      // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetSpawnOffsetPos) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetSpawnOffsetPos");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetSpawnOffsetPos) == 0x000050, "Wrong size on TgfBlueprintFunctionLibrary_GetSpawnOffsetPos");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetSpawnOffsetPos, OutOffsetPos) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetSpawnOffsetPos::OutOffsetPos' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetSpawnOffsetPos, SrcActor) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_GetSpawnOffsetPos::SrcActor' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetSpawnOffsetPos, SpawnOffset) == 0x000018, "Member 'TgfBlueprintFunctionLibrary_GetSpawnOffsetPos::SpawnOffset' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetSpawnOffsetPos, SpawnNum) == 0x000028, "Member 'TgfBlueprintFunctionLibrary_GetSpawnOffsetPos::SpawnNum' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetSpawnOffsetPos, SourceOffset) == 0x000030, "Member 'TgfBlueprintFunctionLibrary_GetSpawnOffsetPos::SourceOffset' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetSpawnOffsetPos, ReturnValue) == 0x000048, "Member 'TgfBlueprintFunctionLibrary_GetSpawnOffsetPos::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetUniqueHitResultsByActor
// 0x0020 (0x0020 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetUniqueHitResultsByActor final
{
public:
	TArray<struct FHitResult>                     InHits;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     OutHits;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetUniqueHitResultsByActor) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetUniqueHitResultsByActor");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetUniqueHitResultsByActor) == 0x000020, "Wrong size on TgfBlueprintFunctionLibrary_GetUniqueHitResultsByActor");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetUniqueHitResultsByActor, InHits) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetUniqueHitResultsByActor::InHits' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetUniqueHitResultsByActor, OutHits) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_GetUniqueHitResultsByActor::OutHits' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetVectorDirection
// 0x0038 (0x0038 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetVectorDirection final
{
public:
	struct FVector                                Lhs;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Rhs;                                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetVectorDirection) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetVectorDirection");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetVectorDirection) == 0x000038, "Wrong size on TgfBlueprintFunctionLibrary_GetVectorDirection");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetVectorDirection, Lhs) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetVectorDirection::Lhs' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetVectorDirection, Rhs) == 0x000018, "Member 'TgfBlueprintFunctionLibrary_GetVectorDirection::Rhs' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetVectorDirection, ReturnValue) == 0x000030, "Member 'TgfBlueprintFunctionLibrary_GetVectorDirection::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.GetWorldNameOfSpecificLevel
// 0x0018 (0x0018 - 0x0000)
struct TgfBlueprintFunctionLibrary_GetWorldNameOfSpecificLevel final
{
public:
	class ULevel*                                 InLevel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_GetWorldNameOfSpecificLevel) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_GetWorldNameOfSpecificLevel");
static_assert(sizeof(TgfBlueprintFunctionLibrary_GetWorldNameOfSpecificLevel) == 0x000018, "Wrong size on TgfBlueprintFunctionLibrary_GetWorldNameOfSpecificLevel");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetWorldNameOfSpecificLevel, InLevel) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_GetWorldNameOfSpecificLevel::InLevel' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_GetWorldNameOfSpecificLevel, ReturnValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_GetWorldNameOfSpecificLevel::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.IsActorCloser
// 0x0030 (0x0030 - 0x0000)
struct TgfBlueprintFunctionLibrary_IsActorCloser final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_IsActorCloser) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_IsActorCloser");
static_assert(sizeof(TgfBlueprintFunctionLibrary_IsActorCloser) == 0x000030, "Wrong size on TgfBlueprintFunctionLibrary_IsActorCloser");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsActorCloser, ActorA) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_IsActorCloser::ActorA' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsActorCloser, ActorB) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_IsActorCloser::ActorB' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsActorCloser, Pos) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_IsActorCloser::Pos' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsActorCloser, ReturnValue) == 0x000028, "Member 'TgfBlueprintFunctionLibrary_IsActorCloser::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.IsCharacterAttrGreater
// 0x0050 (0x0050 - 0x0000)
struct TgfBlueprintFunctionLibrary_IsCharacterAttrGreater final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0010(0x0038)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_IsCharacterAttrGreater) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_IsCharacterAttrGreater");
static_assert(sizeof(TgfBlueprintFunctionLibrary_IsCharacterAttrGreater) == 0x000050, "Wrong size on TgfBlueprintFunctionLibrary_IsCharacterAttrGreater");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterAttrGreater, ActorA) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_IsCharacterAttrGreater::ActorA' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterAttrGreater, ActorB) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_IsCharacterAttrGreater::ActorB' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterAttrGreater, Attribute) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_IsCharacterAttrGreater::Attribute' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterAttrGreater, ReturnValue) == 0x000048, "Member 'TgfBlueprintFunctionLibrary_IsCharacterAttrGreater::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.IsCharacterCloser
// 0x0030 (0x0030 - 0x0000)
struct TgfBlueprintFunctionLibrary_IsCharacterCloser final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_IsCharacterCloser) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_IsCharacterCloser");
static_assert(sizeof(TgfBlueprintFunctionLibrary_IsCharacterCloser) == 0x000030, "Wrong size on TgfBlueprintFunctionLibrary_IsCharacterCloser");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterCloser, ActorA) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_IsCharacterCloser::ActorA' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterCloser, ActorB) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_IsCharacterCloser::ActorB' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterCloser, Pos) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_IsCharacterCloser::Pos' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterCloser, ReturnValue) == 0x000028, "Member 'TgfBlueprintFunctionLibrary_IsCharacterCloser::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.IsCharacterHealthRatioHigher
// 0x0018 (0x0018 - 0x0000)
struct TgfBlueprintFunctionLibrary_IsCharacterHealthRatioHigher final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_IsCharacterHealthRatioHigher) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_IsCharacterHealthRatioHigher");
static_assert(sizeof(TgfBlueprintFunctionLibrary_IsCharacterHealthRatioHigher) == 0x000018, "Wrong size on TgfBlueprintFunctionLibrary_IsCharacterHealthRatioHigher");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterHealthRatioHigher, ActorA) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_IsCharacterHealthRatioHigher::ActorA' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterHealthRatioHigher, ActorB) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_IsCharacterHealthRatioHigher::ActorB' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterHealthRatioHigher, ReturnValue) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_IsCharacterHealthRatioHigher::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.IsCharacterRight
// 0x0048 (0x0048 - 0x0000)
struct TgfBlueprintFunctionLibrary_IsCharacterRight final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CenterPos;                                         // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x0028(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_IsCharacterRight) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_IsCharacterRight");
static_assert(sizeof(TgfBlueprintFunctionLibrary_IsCharacterRight) == 0x000048, "Wrong size on TgfBlueprintFunctionLibrary_IsCharacterRight");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterRight, ActorA) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_IsCharacterRight::ActorA' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterRight, ActorB) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_IsCharacterRight::ActorB' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterRight, CenterPos) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_IsCharacterRight::CenterPos' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterRight, Forward) == 0x000028, "Member 'TgfBlueprintFunctionLibrary_IsCharacterRight::Forward' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsCharacterRight, ReturnValue) == 0x000040, "Member 'TgfBlueprintFunctionLibrary_IsCharacterRight::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.IsDevelopmentBuild
// 0x0001 (0x0001 - 0x0000)
struct TgfBlueprintFunctionLibrary_IsDevelopmentBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_IsDevelopmentBuild) == 0x000001, "Wrong alignment on TgfBlueprintFunctionLibrary_IsDevelopmentBuild");
static_assert(sizeof(TgfBlueprintFunctionLibrary_IsDevelopmentBuild) == 0x000001, "Wrong size on TgfBlueprintFunctionLibrary_IsDevelopmentBuild");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsDevelopmentBuild, ReturnValue) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_IsDevelopmentBuild::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.IsOnDedicatedServer
// 0x0010 (0x0010 - 0x0000)
struct TgfBlueprintFunctionLibrary_IsOnDedicatedServer final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_IsOnDedicatedServer) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_IsOnDedicatedServer");
static_assert(sizeof(TgfBlueprintFunctionLibrary_IsOnDedicatedServer) == 0x000010, "Wrong size on TgfBlueprintFunctionLibrary_IsOnDedicatedServer");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsOnDedicatedServer, WorldContext) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_IsOnDedicatedServer::WorldContext' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsOnDedicatedServer, ReturnValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_IsOnDedicatedServer::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.IsPendingKillPending
// 0x0010 (0x0010 - 0x0000)
struct TgfBlueprintFunctionLibrary_IsPendingKillPending final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_IsPendingKillPending) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_IsPendingKillPending");
static_assert(sizeof(TgfBlueprintFunctionLibrary_IsPendingKillPending) == 0x000010, "Wrong size on TgfBlueprintFunctionLibrary_IsPendingKillPending");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsPendingKillPending, Actor) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_IsPendingKillPending::Actor' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsPendingKillPending, ReturnValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_IsPendingKillPending::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.IsRunningInPIE
// 0x0001 (0x0001 - 0x0000)
struct TgfBlueprintFunctionLibrary_IsRunningInPIE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_IsRunningInPIE) == 0x000001, "Wrong alignment on TgfBlueprintFunctionLibrary_IsRunningInPIE");
static_assert(sizeof(TgfBlueprintFunctionLibrary_IsRunningInPIE) == 0x000001, "Wrong size on TgfBlueprintFunctionLibrary_IsRunningInPIE");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsRunningInPIE, ReturnValue) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_IsRunningInPIE::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.IsValid
// 0x0028 (0x0028 - 0x0000)
struct TgfBlueprintFunctionLibrary_IsValid final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_IsValid) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_IsValid");
static_assert(sizeof(TgfBlueprintFunctionLibrary_IsValid) == 0x000028, "Wrong size on TgfBlueprintFunctionLibrary_IsValid");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsValid, TagContainer) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_IsValid::TagContainer' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_IsValid, ReturnValue) == 0x000020, "Member 'TgfBlueprintFunctionLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.MakeAxis
// 0x0028 (0x0028 - 0x0000)
struct TgfBlueprintFunctionLibrary_MakeAxis final
{
public:
	ETgfAxisName                                  Axis;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAxis                                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_MakeAxis) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_MakeAxis");
static_assert(sizeof(TgfBlueprintFunctionLibrary_MakeAxis) == 0x000028, "Wrong size on TgfBlueprintFunctionLibrary_MakeAxis");
static_assert(offsetof(TgfBlueprintFunctionLibrary_MakeAxis, Axis) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_MakeAxis::Axis' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_MakeAxis, ReturnValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_MakeAxis::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.MakeVectorFromAxis
// 0x0020 (0x0020 - 0x0000)
struct TgfBlueprintFunctionLibrary_MakeVectorFromAxis final
{
public:
	ETgfAxisName                                  Axis;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_MakeVectorFromAxis) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_MakeVectorFromAxis");
static_assert(sizeof(TgfBlueprintFunctionLibrary_MakeVectorFromAxis) == 0x000020, "Wrong size on TgfBlueprintFunctionLibrary_MakeVectorFromAxis");
static_assert(offsetof(TgfBlueprintFunctionLibrary_MakeVectorFromAxis, Axis) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_MakeVectorFromAxis::Axis' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_MakeVectorFromAxis, ReturnValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_MakeVectorFromAxis::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.PreparePhysicalMaterials
// 0x0008 (0x0008 - 0x0000)
struct TgfBlueprintFunctionLibrary_PreparePhysicalMaterials final
{
public:
	const class UTgfObjectListDataAsset*          ObjectListDataAsset;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_PreparePhysicalMaterials) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_PreparePhysicalMaterials");
static_assert(sizeof(TgfBlueprintFunctionLibrary_PreparePhysicalMaterials) == 0x000008, "Wrong size on TgfBlueprintFunctionLibrary_PreparePhysicalMaterials");
static_assert(offsetof(TgfBlueprintFunctionLibrary_PreparePhysicalMaterials, ObjectListDataAsset) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_PreparePhysicalMaterials::ObjectListDataAsset' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.RequestRoleAppearanceTexture
// 0x0088 (0x0088 - 0x0000)
struct TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture final
{
public:
	int64                                         RoleID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfAvatarBuildConfig                  InAppearanceConfig;                                // 0x0008(0x0068)(Parm, NativeAccessSpecifierPublic)
	bool                                          NeedQueueFirst;                                    // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ImgSize;                                           // 0x0078(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture");
static_assert(sizeof(TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture) == 0x000088, "Wrong size on TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture");
static_assert(offsetof(TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture, RoleID) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture::RoleID' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture, InAppearanceConfig) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture::InAppearanceConfig' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture, NeedQueueFirst) == 0x000070, "Member 'TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture::NeedQueueFirst' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture, ImgSize) == 0x000078, "Member 'TgfBlueprintFunctionLibrary_RequestRoleAppearanceTexture::ImgSize' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.ReregisterActor
// 0x0008 (0x0008 - 0x0000)
struct TgfBlueprintFunctionLibrary_ReregisterActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_ReregisterActor) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_ReregisterActor");
static_assert(sizeof(TgfBlueprintFunctionLibrary_ReregisterActor) == 0x000008, "Wrong size on TgfBlueprintFunctionLibrary_ReregisterActor");
static_assert(offsetof(TgfBlueprintFunctionLibrary_ReregisterActor, InActor) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_ReregisterActor::InActor' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.ResetBlendFloat
// 0x000C (0x000C - 0x0000)
struct TgfBlueprintFunctionLibrary_ResetBlendFloat final
{
public:
	struct FBlendingUtilParamsCache               CachedParams;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_ResetBlendFloat) == 0x000004, "Wrong alignment on TgfBlueprintFunctionLibrary_ResetBlendFloat");
static_assert(sizeof(TgfBlueprintFunctionLibrary_ResetBlendFloat) == 0x00000C, "Wrong size on TgfBlueprintFunctionLibrary_ResetBlendFloat");
static_assert(offsetof(TgfBlueprintFunctionLibrary_ResetBlendFloat, CachedParams) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_ResetBlendFloat::CachedParams' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SetActorCustomStencilValue
// 0x0018 (0x0018 - 0x0000)
struct TgfBlueprintFunctionLibrary_SetActorCustomStencilValue final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfStencilRef                                StencilValue;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSet;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    TargetMesh;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SetActorCustomStencilValue) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_SetActorCustomStencilValue");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SetActorCustomStencilValue) == 0x000018, "Wrong size on TgfBlueprintFunctionLibrary_SetActorCustomStencilValue");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetActorCustomStencilValue, TargetActor) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SetActorCustomStencilValue::TargetActor' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetActorCustomStencilValue, StencilValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_SetActorCustomStencilValue::StencilValue' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetActorCustomStencilValue, bSet) == 0x000009, "Member 'TgfBlueprintFunctionLibrary_SetActorCustomStencilValue::bSet' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetActorCustomStencilValue, TargetMesh) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_SetActorCustomStencilValue::TargetMesh' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SetCharacterWeaponMaterialParameter_Float
// 0x0018 (0x0018 - 0x0000)
struct TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param_Name;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponHandType                            Hand;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float) == 0x000018, "Wrong size on TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float, Character) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float::Character' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float, Param_Name) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float::Param_Name' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float, Value) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float::Value' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float, Hand) == 0x000014, "Member 'TgfBlueprintFunctionLibrary_SetCharacterWeaponMaterialParameter_Float::Hand' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SetCustomStencilValueSingleBit
// 0x0010 (0x0010 - 0x0000)
struct TgfBlueprintFunctionLibrary_SetCustomStencilValueSingleBit final
{
public:
	class UPrimitiveComponent*                    Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfStencilRef                                StencilValue;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSet;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SetCustomStencilValueSingleBit) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_SetCustomStencilValueSingleBit");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SetCustomStencilValueSingleBit) == 0x000010, "Wrong size on TgfBlueprintFunctionLibrary_SetCustomStencilValueSingleBit");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetCustomStencilValueSingleBit, Mesh) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SetCustomStencilValueSingleBit::Mesh' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetCustomStencilValueSingleBit, StencilValue) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_SetCustomStencilValueSingleBit::StencilValue' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetCustomStencilValueSingleBit, bSet) == 0x000009, "Member 'TgfBlueprintFunctionLibrary_SetCustomStencilValueSingleBit::bSet' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SetWorldPhysicsSimulationEnabled
// 0x0010 (0x0010 - 0x0000)
struct TgfBlueprintFunctionLibrary_SetWorldPhysicsSimulationEnabled final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SetWorldPhysicsSimulationEnabled) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_SetWorldPhysicsSimulationEnabled");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SetWorldPhysicsSimulationEnabled) == 0x000010, "Wrong size on TgfBlueprintFunctionLibrary_SetWorldPhysicsSimulationEnabled");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetWorldPhysicsSimulationEnabled, Actor) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SetWorldPhysicsSimulationEnabled::Actor' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SetWorldPhysicsSimulationEnabled, Enabled) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_SetWorldPhysicsSimulationEnabled::Enabled' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SortActorsByAngle
// 0x0058 (0x0058 - 0x0000)
struct TgfBlueprintFunctionLibrary_SortActorsByAngle final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                CenterPos;                                         // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x0028(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReverse;                                        // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SortActorsByAngle) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_SortActorsByAngle");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SortActorsByAngle) == 0x000058, "Wrong size on TgfBlueprintFunctionLibrary_SortActorsByAngle");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByAngle, Actors) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SortActorsByAngle::Actors' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByAngle, CenterPos) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_SortActorsByAngle::CenterPos' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByAngle, Forward) == 0x000028, "Member 'TgfBlueprintFunctionLibrary_SortActorsByAngle::Forward' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByAngle, bIsReverse) == 0x000040, "Member 'TgfBlueprintFunctionLibrary_SortActorsByAngle::bIsReverse' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByAngle, ReturnValue) == 0x000048, "Member 'TgfBlueprintFunctionLibrary_SortActorsByAngle::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SortActorsByAttribute
// 0x0060 (0x0060 - 0x0000)
struct TgfBlueprintFunctionLibrary_SortActorsByAttribute final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0010(0x0038)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReverse;                                        // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SortActorsByAttribute) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_SortActorsByAttribute");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SortActorsByAttribute) == 0x000060, "Wrong size on TgfBlueprintFunctionLibrary_SortActorsByAttribute");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByAttribute, Actors) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SortActorsByAttribute::Actors' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByAttribute, Attribute) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_SortActorsByAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByAttribute, bIsReverse) == 0x000048, "Member 'TgfBlueprintFunctionLibrary_SortActorsByAttribute::bIsReverse' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByAttribute, ReturnValue) == 0x000050, "Member 'TgfBlueprintFunctionLibrary_SortActorsByAttribute::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SortActorsByDistance
// 0x0040 (0x0040 - 0x0000)
struct TgfBlueprintFunctionLibrary_SortActorsByDistance final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReverse;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SortActorsByDistance) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_SortActorsByDistance");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SortActorsByDistance) == 0x000040, "Wrong size on TgfBlueprintFunctionLibrary_SortActorsByDistance");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByDistance, Actors) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SortActorsByDistance::Actors' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByDistance, Pos) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_SortActorsByDistance::Pos' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByDistance, bIsReverse) == 0x000028, "Member 'TgfBlueprintFunctionLibrary_SortActorsByDistance::bIsReverse' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByDistance, ReturnValue) == 0x000030, "Member 'TgfBlueprintFunctionLibrary_SortActorsByDistance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SortActorsByHealthRatio
// 0x0028 (0x0028 - 0x0000)
struct TgfBlueprintFunctionLibrary_SortActorsByHealthRatio final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsReverse;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SortActorsByHealthRatio) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_SortActorsByHealthRatio");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SortActorsByHealthRatio) == 0x000028, "Wrong size on TgfBlueprintFunctionLibrary_SortActorsByHealthRatio");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByHealthRatio, Actors) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SortActorsByHealthRatio::Actors' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByHealthRatio, bIsReverse) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_SortActorsByHealthRatio::bIsReverse' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SortActorsByHealthRatio, ReturnValue) == 0x000018, "Member 'TgfBlueprintFunctionLibrary_SortActorsByHealthRatio::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SpawnDecalFromAbility
// 0x0068 (0x0068 - 0x0000)
struct TgfBlueprintFunctionLibrary_SpawnDecalFromAbility final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnCenter;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRadius;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      SurfaceTypes;                                      // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           GECH;                                              // 0x0048(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0060(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SpawnDecalFromAbility) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_SpawnDecalFromAbility");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SpawnDecalFromAbility) == 0x000068, "Wrong size on TgfBlueprintFunctionLibrary_SpawnDecalFromAbility");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpawnDecalFromAbility, Instigator) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SpawnDecalFromAbility::Instigator' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpawnDecalFromAbility, SpawnCenter) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_SpawnDecalFromAbility::SpawnCenter' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpawnDecalFromAbility, SpawnRadius) == 0x000020, "Member 'TgfBlueprintFunctionLibrary_SpawnDecalFromAbility::SpawnRadius' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpawnDecalFromAbility, ObjectTypes) == 0x000028, "Member 'TgfBlueprintFunctionLibrary_SpawnDecalFromAbility::ObjectTypes' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpawnDecalFromAbility, SurfaceTypes) == 0x000038, "Member 'TgfBlueprintFunctionLibrary_SpawnDecalFromAbility::SurfaceTypes' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpawnDecalFromAbility, GECH) == 0x000048, "Member 'TgfBlueprintFunctionLibrary_SpawnDecalFromAbility::GECH' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpawnDecalFromAbility, GameplayCueTag) == 0x000060, "Member 'TgfBlueprintFunctionLibrary_SpawnDecalFromAbility::GameplayCueTag' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SpawnEquipmentActorsWithAttachTarget
// 0x0028 (0x0028 - 0x0000)
struct TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget final
{
public:
	int32                                         Type_id;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        AttachTarget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutSpawnedActors;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAttachToLeft;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget) == 0x000028, "Wrong size on TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget, Type_id) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget::Type_id' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget, AttachTarget) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget::AttachTarget' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget, OutSpawnedActors) == 0x000010, "Member 'TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget::OutSpawnedActors' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget, bAttachToLeft) == 0x000020, "Member 'TgfBlueprintFunctionLibrary_SpawnEquipmentActorsWithAttachTarget::bAttachToLeft' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SpringFloatBlendAssist
// 0x0018 (0x0018 - 0x0000)
struct TgfBlueprintFunctionLibrary_SpringFloatBlendAssist final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatSpringState                      State;                                             // 0x0008(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SpringFloatBlendAssist) == 0x000004, "Wrong alignment on TgfBlueprintFunctionLibrary_SpringFloatBlendAssist");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SpringFloatBlendAssist) == 0x000018, "Wrong size on TgfBlueprintFunctionLibrary_SpringFloatBlendAssist");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpringFloatBlendAssist, Current) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SpringFloatBlendAssist::Current' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpringFloatBlendAssist, Target) == 0x000004, "Member 'TgfBlueprintFunctionLibrary_SpringFloatBlendAssist::Target' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpringFloatBlendAssist, State) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_SpringFloatBlendAssist::State' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpringFloatBlendAssist, ReturnValue) == 0x000014, "Member 'TgfBlueprintFunctionLibrary_SpringFloatBlendAssist::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.SpringFloatSpeed
// 0x0010 (0x0010 - 0x0000)
struct TgfBlueprintFunctionLibrary_SpringFloatSpeed final
{
public:
	struct FFloatSpringState                      State;                                             // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_SpringFloatSpeed) == 0x000004, "Wrong alignment on TgfBlueprintFunctionLibrary_SpringFloatSpeed");
static_assert(sizeof(TgfBlueprintFunctionLibrary_SpringFloatSpeed) == 0x000010, "Wrong size on TgfBlueprintFunctionLibrary_SpringFloatSpeed");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpringFloatSpeed, State) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_SpringFloatSpeed::State' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_SpringFloatSpeed, ReturnValue) == 0x00000C, "Member 'TgfBlueprintFunctionLibrary_SpringFloatSpeed::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.StopAllMontage
// 0x0010 (0x0010 - 0x0000)
struct TgfBlueprintFunctionLibrary_StopAllMontage final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_StopAllMontage) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_StopAllMontage");
static_assert(sizeof(TgfBlueprintFunctionLibrary_StopAllMontage) == 0x000010, "Wrong size on TgfBlueprintFunctionLibrary_StopAllMontage");
static_assert(offsetof(TgfBlueprintFunctionLibrary_StopAllMontage, AnimInstance) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_StopAllMontage::AnimInstance' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_StopAllMontage, BlendOutTime) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_StopAllMontage::BlendOutTime' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.TGFEasilyGetItemById
// 0x0040 (0x0040 - 0x0000)
struct TgfBlueprintFunctionLibrary_TGFEasilyGetItemById final
{
public:
	int32                                         SkinId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             OutEquipment;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  OutSkinParts;                                      // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotatar;                                        // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBlueprintFunctionLibrary_TGFEasilyGetItemById) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_TGFEasilyGetItemById");
static_assert(sizeof(TgfBlueprintFunctionLibrary_TGFEasilyGetItemById) == 0x000040, "Wrong size on TgfBlueprintFunctionLibrary_TGFEasilyGetItemById");
static_assert(offsetof(TgfBlueprintFunctionLibrary_TGFEasilyGetItemById, SkinId) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_TGFEasilyGetItemById::SkinId' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_TGFEasilyGetItemById, OutEquipment) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_TGFEasilyGetItemById::OutEquipment' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_TGFEasilyGetItemById, OutSkinParts) == 0x000018, "Member 'TgfBlueprintFunctionLibrary_TGFEasilyGetItemById::OutSkinParts' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_TGFEasilyGetItemById, OutRotatar) == 0x000028, "Member 'TgfBlueprintFunctionLibrary_TGFEasilyGetItemById::OutRotatar' has a wrong offset!");

// Function LyraGame.TgfBlueprintFunctionLibrary.ToggleActorTick
// 0x0010 (0x0010 - 0x0000)
struct TgfBlueprintFunctionLibrary_ToggleActorTick final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldTick;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAffectComps;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBlueprintFunctionLibrary_ToggleActorTick) == 0x000008, "Wrong alignment on TgfBlueprintFunctionLibrary_ToggleActorTick");
static_assert(sizeof(TgfBlueprintFunctionLibrary_ToggleActorTick) == 0x000010, "Wrong size on TgfBlueprintFunctionLibrary_ToggleActorTick");
static_assert(offsetof(TgfBlueprintFunctionLibrary_ToggleActorTick, InActor) == 0x000000, "Member 'TgfBlueprintFunctionLibrary_ToggleActorTick::InActor' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_ToggleActorTick, ShouldTick) == 0x000008, "Member 'TgfBlueprintFunctionLibrary_ToggleActorTick::ShouldTick' has a wrong offset!");
static_assert(offsetof(TgfBlueprintFunctionLibrary_ToggleActorTick, ShouldAffectComps) == 0x000009, "Member 'TgfBlueprintFunctionLibrary_ToggleActorTick::ShouldAffectComps' has a wrong offset!");

// Function LyraGame.TgfBPCheatsBase.CheatEnabled
// 0x0001 (0x0001 - 0x0000)
struct TgfBPCheatsBase_CheatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBPCheatsBase_CheatEnabled) == 0x000001, "Wrong alignment on TgfBPCheatsBase_CheatEnabled");
static_assert(sizeof(TgfBPCheatsBase_CheatEnabled) == 0x000001, "Wrong size on TgfBPCheatsBase_CheatEnabled");
static_assert(offsetof(TgfBPCheatsBase_CheatEnabled, ReturnValue) == 0x000000, "Member 'TgfBPCheatsBase_CheatEnabled::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBPCheatsBase.GetAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct TgfBPCheatsBase_GetAbilitySystemComponent final
{
public:
	class ULyraAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBPCheatsBase_GetAbilitySystemComponent) == 0x000008, "Wrong alignment on TgfBPCheatsBase_GetAbilitySystemComponent");
static_assert(sizeof(TgfBPCheatsBase_GetAbilitySystemComponent) == 0x000008, "Wrong size on TgfBPCheatsBase_GetAbilitySystemComponent");
static_assert(offsetof(TgfBPCheatsBase_GetAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'TgfBPCheatsBase_GetAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBPCheatsBase.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct TgfBPCheatsBase_GetCharacter final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBPCheatsBase_GetCharacter) == 0x000008, "Wrong alignment on TgfBPCheatsBase_GetCharacter");
static_assert(sizeof(TgfBPCheatsBase_GetCharacter) == 0x000008, "Wrong size on TgfBPCheatsBase_GetCharacter");
static_assert(offsetof(TgfBPCheatsBase_GetCharacter, ReturnValue) == 0x000000, "Member 'TgfBPCheatsBase_GetCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBPCheatsBase.GetTgfCheatComponent
// 0x0008 (0x0008 - 0x0000)
struct TgfBPCheatsBase_GetTgfCheatComponent final
{
public:
	class UTgfCheatComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBPCheatsBase_GetTgfCheatComponent) == 0x000008, "Wrong alignment on TgfBPCheatsBase_GetTgfCheatComponent");
static_assert(sizeof(TgfBPCheatsBase_GetTgfCheatComponent) == 0x000008, "Wrong size on TgfBPCheatsBase_GetTgfCheatComponent");
static_assert(offsetof(TgfBPCheatsBase_GetTgfCheatComponent, ReturnValue) == 0x000000, "Member 'TgfBPCheatsBase_GetTgfCheatComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraIndicatorManagerComponent.AddIndicator
// 0x0008 (0x0008 - 0x0000)
struct LyraIndicatorManagerComponent_AddIndicator final
{
public:
	class UIndicatorDescriptor*                   IndicatorDescriptor;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraIndicatorManagerComponent_AddIndicator) == 0x000008, "Wrong alignment on LyraIndicatorManagerComponent_AddIndicator");
static_assert(sizeof(LyraIndicatorManagerComponent_AddIndicator) == 0x000008, "Wrong size on LyraIndicatorManagerComponent_AddIndicator");
static_assert(offsetof(LyraIndicatorManagerComponent_AddIndicator, IndicatorDescriptor) == 0x000000, "Member 'LyraIndicatorManagerComponent_AddIndicator::IndicatorDescriptor' has a wrong offset!");

// Function LyraGame.LyraIndicatorManagerComponent.RemoveIndicator
// 0x0008 (0x0008 - 0x0000)
struct LyraIndicatorManagerComponent_RemoveIndicator final
{
public:
	class UIndicatorDescriptor*                   IndicatorDescriptor;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraIndicatorManagerComponent_RemoveIndicator) == 0x000008, "Wrong alignment on LyraIndicatorManagerComponent_RemoveIndicator");
static_assert(sizeof(LyraIndicatorManagerComponent_RemoveIndicator) == 0x000008, "Wrong size on LyraIndicatorManagerComponent_RemoveIndicator");
static_assert(offsetof(LyraIndicatorManagerComponent_RemoveIndicator, IndicatorDescriptor) == 0x000000, "Member 'LyraIndicatorManagerComponent_RemoveIndicator::IndicatorDescriptor' has a wrong offset!");

// Function LyraGame.LyraReticleWidgetBase.InitializeFromWeapon
// 0x0008 (0x0008 - 0x0000)
struct LyraReticleWidgetBase_InitializeFromWeapon final
{
public:
	class ULyraWeaponInstance*                    InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReticleWidgetBase_InitializeFromWeapon) == 0x000008, "Wrong alignment on LyraReticleWidgetBase_InitializeFromWeapon");
static_assert(sizeof(LyraReticleWidgetBase_InitializeFromWeapon) == 0x000008, "Wrong size on LyraReticleWidgetBase_InitializeFromWeapon");
static_assert(offsetof(LyraReticleWidgetBase_InitializeFromWeapon, InWeapon) == 0x000000, "Member 'LyraReticleWidgetBase_InitializeFromWeapon::InWeapon' has a wrong offset!");

// Function LyraGame.LyraReticleWidgetBase.ComputeMaxScreenspaceSpreadRadius
// 0x0004 (0x0004 - 0x0000)
struct LyraReticleWidgetBase_ComputeMaxScreenspaceSpreadRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReticleWidgetBase_ComputeMaxScreenspaceSpreadRadius) == 0x000004, "Wrong alignment on LyraReticleWidgetBase_ComputeMaxScreenspaceSpreadRadius");
static_assert(sizeof(LyraReticleWidgetBase_ComputeMaxScreenspaceSpreadRadius) == 0x000004, "Wrong size on LyraReticleWidgetBase_ComputeMaxScreenspaceSpreadRadius");
static_assert(offsetof(LyraReticleWidgetBase_ComputeMaxScreenspaceSpreadRadius, ReturnValue) == 0x000000, "Member 'LyraReticleWidgetBase_ComputeMaxScreenspaceSpreadRadius::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraReticleWidgetBase.ComputeSpreadAngle
// 0x0004 (0x0004 - 0x0000)
struct LyraReticleWidgetBase_ComputeSpreadAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReticleWidgetBase_ComputeSpreadAngle) == 0x000004, "Wrong alignment on LyraReticleWidgetBase_ComputeSpreadAngle");
static_assert(sizeof(LyraReticleWidgetBase_ComputeSpreadAngle) == 0x000004, "Wrong size on LyraReticleWidgetBase_ComputeSpreadAngle");
static_assert(offsetof(LyraReticleWidgetBase_ComputeSpreadAngle, ReturnValue) == 0x000000, "Member 'LyraReticleWidgetBase_ComputeSpreadAngle::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraReticleWidgetBase.HasFirstShotAccuracy
// 0x0001 (0x0001 - 0x0000)
struct LyraReticleWidgetBase_HasFirstShotAccuracy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReticleWidgetBase_HasFirstShotAccuracy) == 0x000001, "Wrong alignment on LyraReticleWidgetBase_HasFirstShotAccuracy");
static_assert(sizeof(LyraReticleWidgetBase_HasFirstShotAccuracy) == 0x000001, "Wrong size on LyraReticleWidgetBase_HasFirstShotAccuracy");
static_assert(offsetof(LyraReticleWidgetBase_HasFirstShotAccuracy, ReturnValue) == 0x000000, "Member 'LyraReticleWidgetBase_HasFirstShotAccuracy::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCameraPostProcessBlueprintLibrary.DeletePostProcessMaterial
// 0x0020 (0x0020 - 0x0000)
struct TgfCameraPostProcessBlueprintLibrary_DeletePostProcessMaterial final
{
public:
	class UCameraComponent*                       CameraComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeightedBlendables                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCameraPostProcessBlueprintLibrary_DeletePostProcessMaterial) == 0x000008, "Wrong alignment on TgfCameraPostProcessBlueprintLibrary_DeletePostProcessMaterial");
static_assert(sizeof(TgfCameraPostProcessBlueprintLibrary_DeletePostProcessMaterial) == 0x000020, "Wrong size on TgfCameraPostProcessBlueprintLibrary_DeletePostProcessMaterial");
static_assert(offsetof(TgfCameraPostProcessBlueprintLibrary_DeletePostProcessMaterial, CameraComponent) == 0x000000, "Member 'TgfCameraPostProcessBlueprintLibrary_DeletePostProcessMaterial::CameraComponent' has a wrong offset!");
static_assert(offsetof(TgfCameraPostProcessBlueprintLibrary_DeletePostProcessMaterial, Material) == 0x000008, "Member 'TgfCameraPostProcessBlueprintLibrary_DeletePostProcessMaterial::Material' has a wrong offset!");
static_assert(offsetof(TgfCameraPostProcessBlueprintLibrary_DeletePostProcessMaterial, ReturnValue) == 0x000010, "Member 'TgfCameraPostProcessBlueprintLibrary_DeletePostProcessMaterial::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCameraPostProcessBlueprintLibrary.InsertPostProcessMaterial
// 0x0020 (0x0020 - 0x0000)
struct TgfCameraPostProcessBlueprintLibrary_InsertPostProcessMaterial final
{
public:
	class UCameraComponent*                       CameroComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeightedBlendables                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCameraPostProcessBlueprintLibrary_InsertPostProcessMaterial) == 0x000008, "Wrong alignment on TgfCameraPostProcessBlueprintLibrary_InsertPostProcessMaterial");
static_assert(sizeof(TgfCameraPostProcessBlueprintLibrary_InsertPostProcessMaterial) == 0x000020, "Wrong size on TgfCameraPostProcessBlueprintLibrary_InsertPostProcessMaterial");
static_assert(offsetof(TgfCameraPostProcessBlueprintLibrary_InsertPostProcessMaterial, CameroComponent) == 0x000000, "Member 'TgfCameraPostProcessBlueprintLibrary_InsertPostProcessMaterial::CameroComponent' has a wrong offset!");
static_assert(offsetof(TgfCameraPostProcessBlueprintLibrary_InsertPostProcessMaterial, Material) == 0x000008, "Member 'TgfCameraPostProcessBlueprintLibrary_InsertPostProcessMaterial::Material' has a wrong offset!");
static_assert(offsetof(TgfCameraPostProcessBlueprintLibrary_InsertPostProcessMaterial, ReturnValue) == 0x000010, "Member 'TgfCameraPostProcessBlueprintLibrary_InsertPostProcessMaterial::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfReticleWidgetBase.InitializeFromWeapon
// 0x0008 (0x0008 - 0x0000)
struct TgfReticleWidgetBase_InitializeFromWeapon final
{
public:
	class UTgfEquipmentInstance*                  InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfReticleWidgetBase_InitializeFromWeapon) == 0x000008, "Wrong alignment on TgfReticleWidgetBase_InitializeFromWeapon");
static_assert(sizeof(TgfReticleWidgetBase_InitializeFromWeapon) == 0x000008, "Wrong size on TgfReticleWidgetBase_InitializeFromWeapon");
static_assert(offsetof(TgfReticleWidgetBase_InitializeFromWeapon, InWeapon) == 0x000000, "Member 'TgfReticleWidgetBase_InitializeFromWeapon::InWeapon' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.AddTimeDilationConfig
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterAnimationHelperComponent_AddTimeDilationConfig final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_AddTimeDilationConfig) == 0x000004, "Wrong alignment on TgfCharacterAnimationHelperComponent_AddTimeDilationConfig");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_AddTimeDilationConfig) == 0x000008, "Wrong size on TgfCharacterAnimationHelperComponent_AddTimeDilationConfig");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_AddTimeDilationConfig, Duration) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_AddTimeDilationConfig::Duration' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_AddTimeDilationConfig, Rate) == 0x000004, "Member 'TgfCharacterAnimationHelperComponent_AddTimeDilationConfig::Rate' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.AttachProjectileSword
// 0x0100 (0x0100 - 0x0000)
struct TgfCharacterAnimationHelperComponent_AttachProjectileSword final
{
public:
	TSubclassOf<class AActor>                     SwordTemplate;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProjectileActorSpawnParams            Params_0;                                          // 0x0010(0x0070)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FProjectileInitParams                  ProjectileParams;                                  // 0x0080(0x0080)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_AttachProjectileSword) == 0x000010, "Wrong alignment on TgfCharacterAnimationHelperComponent_AttachProjectileSword");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_AttachProjectileSword) == 0x000100, "Wrong size on TgfCharacterAnimationHelperComponent_AttachProjectileSword");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_AttachProjectileSword, SwordTemplate) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_AttachProjectileSword::SwordTemplate' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_AttachProjectileSword, Params_0) == 0x000010, "Member 'TgfCharacterAnimationHelperComponent_AttachProjectileSword::Params_0' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_AttachProjectileSword, ProjectileParams) == 0x000080, "Member 'TgfCharacterAnimationHelperComponent_AttachProjectileSword::ProjectileParams' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.AttachSword
// 0x0010 (0x0010 - 0x0000)
struct TgfCharacterAnimationHelperComponent_AttachSword final
{
public:
	TSubclassOf<class AActor>                     SwordTemplate;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SwordIns;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_AttachSword) == 0x000008, "Wrong alignment on TgfCharacterAnimationHelperComponent_AttachSword");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_AttachSword) == 0x000010, "Wrong size on TgfCharacterAnimationHelperComponent_AttachSword");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_AttachSword, SwordTemplate) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_AttachSword::SwordTemplate' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_AttachSword, SwordIns) == 0x000008, "Member 'TgfCharacterAnimationHelperComponent_AttachSword::SwordIns' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.CrouchMeshTickEnable
// 0x0004 (0x0004 - 0x0000)
struct TgfCharacterAnimationHelperComponent_CrouchMeshTickEnable final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_CrouchMeshTickEnable) == 0x000004, "Wrong alignment on TgfCharacterAnimationHelperComponent_CrouchMeshTickEnable");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_CrouchMeshTickEnable) == 0x000004, "Wrong size on TgfCharacterAnimationHelperComponent_CrouchMeshTickEnable");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_CrouchMeshTickEnable, DelayTime) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_CrouchMeshTickEnable::DelayTime' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.DestroySword
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterAnimationHelperComponent_DestroySword final
{
public:
	int32                                         SwordIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_DestroySword) == 0x000004, "Wrong alignment on TgfCharacterAnimationHelperComponent_DestroySword");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_DestroySword) == 0x000008, "Wrong size on TgfCharacterAnimationHelperComponent_DestroySword");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_DestroySword, SwordIndex) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_DestroySword::SwordIndex' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_DestroySword, bHidden) == 0x000004, "Member 'TgfCharacterAnimationHelperComponent_DestroySword::bHidden' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.EndMimic
// 0x0020 (0x0020 - 0x0000)
struct TgfCharacterAnimationHelperComponent_EndMimic final
{
public:
	struct FGameplayTagContainer                  TagsToRemove;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_EndMimic) == 0x000008, "Wrong alignment on TgfCharacterAnimationHelperComponent_EndMimic");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_EndMimic) == 0x000020, "Wrong size on TgfCharacterAnimationHelperComponent_EndMimic");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_EndMimic, TagsToRemove) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_EndMimic::TagsToRemove' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.GetTagFromBoneName
// 0x0028 (0x0028 - 0x0000)
struct TgfCharacterAnimationHelperComponent_GetTagFromBoneName final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_GetTagFromBoneName) == 0x000008, "Wrong alignment on TgfCharacterAnimationHelperComponent_GetTagFromBoneName");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_GetTagFromBoneName) == 0x000028, "Wrong size on TgfCharacterAnimationHelperComponent_GetTagFromBoneName");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_GetTagFromBoneName, BoneName) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_GetTagFromBoneName::BoneName' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_GetTagFromBoneName, ReturnValue) == 0x000008, "Member 'TgfCharacterAnimationHelperComponent_GetTagFromBoneName::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.HelperActorPlayMontage
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterAnimationHelperComponent_HelperActorPlayMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_HelperActorPlayMontage) == 0x000008, "Wrong alignment on TgfCharacterAnimationHelperComponent_HelperActorPlayMontage");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_HelperActorPlayMontage) == 0x000008, "Wrong size on TgfCharacterAnimationHelperComponent_HelperActorPlayMontage");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_HelperActorPlayMontage, Montage) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_HelperActorPlayMontage::Montage' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.HelperActorStopMontage
// 0x0010 (0x0010 - 0x0000)
struct TgfCharacterAnimationHelperComponent_HelperActorStopMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_HelperActorStopMontage) == 0x000008, "Wrong alignment on TgfCharacterAnimationHelperComponent_HelperActorStopMontage");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_HelperActorStopMontage) == 0x000010, "Wrong size on TgfCharacterAnimationHelperComponent_HelperActorStopMontage");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_HelperActorStopMontage, Montage) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_HelperActorStopMontage::Montage' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_HelperActorStopMontage, BlendOutTime) == 0x000008, "Member 'TgfCharacterAnimationHelperComponent_HelperActorStopMontage::BlendOutTime' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.HelperActorStopMontageByGroup
// 0x000C (0x000C - 0x0000)
struct TgfCharacterAnimationHelperComponent_HelperActorStopMontageByGroup final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_HelperActorStopMontageByGroup) == 0x000004, "Wrong alignment on TgfCharacterAnimationHelperComponent_HelperActorStopMontageByGroup");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_HelperActorStopMontageByGroup) == 0x00000C, "Wrong size on TgfCharacterAnimationHelperComponent_HelperActorStopMontageByGroup");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_HelperActorStopMontageByGroup, GroupName) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_HelperActorStopMontageByGroup::GroupName' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_HelperActorStopMontageByGroup, BlendOutTime) == 0x000008, "Member 'TgfCharacterAnimationHelperComponent_HelperActorStopMontageByGroup::BlendOutTime' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.OnBrokenArm
// 0x0002 (0x0002 - 0x0000)
struct TgfCharacterAnimationHelperComponent_OnBrokenArm final
{
public:
	bool                                          bArmL;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttach;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_OnBrokenArm) == 0x000001, "Wrong alignment on TgfCharacterAnimationHelperComponent_OnBrokenArm");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_OnBrokenArm) == 0x000002, "Wrong size on TgfCharacterAnimationHelperComponent_OnBrokenArm");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_OnBrokenArm, bArmL) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_OnBrokenArm::bArmL' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_OnBrokenArm, bAttach) == 0x000001, "Member 'TgfCharacterAnimationHelperComponent_OnBrokenArm::bAttach' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.OnGameplayTagChange
// 0x000C (0x000C - 0x0000)
struct TgfCharacterAnimationHelperComponent_OnGameplayTagChange final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_OnGameplayTagChange) == 0x000004, "Wrong alignment on TgfCharacterAnimationHelperComponent_OnGameplayTagChange");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_OnGameplayTagChange) == 0x00000C, "Wrong size on TgfCharacterAnimationHelperComponent_OnGameplayTagChange");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_OnGameplayTagChange, Tag) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_OnGameplayTagChange::Tag' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_OnGameplayTagChange, NewCount) == 0x000008, "Member 'TgfCharacterAnimationHelperComponent_OnGameplayTagChange::NewCount' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.OnRep_MimicArg
// 0x0038 (0x0038 - 0x0000)
struct TgfCharacterAnimationHelperComponent_OnRep_MimicArg final
{
public:
	struct FMimicArg                              OldMimicArg;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_OnRep_MimicArg) == 0x000008, "Wrong alignment on TgfCharacterAnimationHelperComponent_OnRep_MimicArg");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_OnRep_MimicArg) == 0x000038, "Wrong size on TgfCharacterAnimationHelperComponent_OnRep_MimicArg");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_OnRep_MimicArg, OldMimicArg) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_OnRep_MimicArg::OldMimicArg' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.RangedWeaponAction
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterAnimationHelperComponent_RangedWeaponAction final
{
public:
	ERangedWeaponActionType                       Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_RangedWeaponAction) == 0x000004, "Wrong alignment on TgfCharacterAnimationHelperComponent_RangedWeaponAction");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_RangedWeaponAction) == 0x000008, "Wrong size on TgfCharacterAnimationHelperComponent_RangedWeaponAction");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_RangedWeaponAction, Action) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_RangedWeaponAction::Action' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_RangedWeaponAction, PlayRate) == 0x000004, "Member 'TgfCharacterAnimationHelperComponent_RangedWeaponAction::PlayRate' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.RemoveTimeDilationConfig
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterAnimationHelperComponent_RemoveTimeDilationConfig final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_RemoveTimeDilationConfig) == 0x000004, "Wrong alignment on TgfCharacterAnimationHelperComponent_RemoveTimeDilationConfig");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_RemoveTimeDilationConfig) == 0x000008, "Wrong size on TgfCharacterAnimationHelperComponent_RemoveTimeDilationConfig");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_RemoveTimeDilationConfig, Duration) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_RemoveTimeDilationConfig::Duration' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_RemoveTimeDilationConfig, Rate) == 0x000004, "Member 'TgfCharacterAnimationHelperComponent_RemoveTimeDilationConfig::Rate' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.SpawnProjectile
// 0x0110 (0x0110 - 0x0000)
struct TgfCharacterAnimationHelperComponent_SpawnProjectile final
{
public:
	TSubclassOf<class AActor>                     ActorTemplate;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProjectileActorSpawnParams            Params_0;                                          // 0x0010(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FProjectileInitParams                  ProjectileParams;                                  // 0x0080(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ATgfProjectileBase*                     ReturnValue;                                       // 0x0100(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_SpawnProjectile) == 0x000010, "Wrong alignment on TgfCharacterAnimationHelperComponent_SpawnProjectile");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_SpawnProjectile) == 0x000110, "Wrong size on TgfCharacterAnimationHelperComponent_SpawnProjectile");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_SpawnProjectile, ActorTemplate) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_SpawnProjectile::ActorTemplate' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_SpawnProjectile, Params_0) == 0x000010, "Member 'TgfCharacterAnimationHelperComponent_SpawnProjectile::Params_0' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_SpawnProjectile, ProjectileParams) == 0x000080, "Member 'TgfCharacterAnimationHelperComponent_SpawnProjectile::ProjectileParams' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_SpawnProjectile, ReturnValue) == 0x000100, "Member 'TgfCharacterAnimationHelperComponent_SpawnProjectile::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.StartHelperActor
// 0x0001 (0x0001 - 0x0000)
struct TgfCharacterAnimationHelperComponent_StartHelperActor final
{
public:
	ESwordMasterSkillType                         Skill;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_StartHelperActor) == 0x000001, "Wrong alignment on TgfCharacterAnimationHelperComponent_StartHelperActor");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_StartHelperActor) == 0x000001, "Wrong size on TgfCharacterAnimationHelperComponent_StartHelperActor");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_StartHelperActor, Skill) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_StartHelperActor::Skill' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.StartMimic
// 0x0030 (0x0030 - 0x0000)
struct TgfCharacterAnimationHelperComponent_StartMimic final
{
public:
	TSubclassOf<class AActor>                     MimicTargetActorTemplate;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToAdd;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollision;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_StartMimic) == 0x000008, "Wrong alignment on TgfCharacterAnimationHelperComponent_StartMimic");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_StartMimic) == 0x000030, "Wrong size on TgfCharacterAnimationHelperComponent_StartMimic");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_StartMimic, MimicTargetActorTemplate) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_StartMimic::MimicTargetActorTemplate' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_StartMimic, TagsToAdd) == 0x000008, "Member 'TgfCharacterAnimationHelperComponent_StartMimic::TagsToAdd' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_StartMimic, bIgnoreCollision) == 0x000028, "Member 'TgfCharacterAnimationHelperComponent_StartMimic::bIgnoreCollision' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.TryChangePhysicalMaterial
// 0x0010 (0x0010 - 0x0000)
struct TgfCharacterAnimationHelperComponent_TryChangePhysicalMaterial final
{
public:
	ETgfCharaPart                                 Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_TryChangePhysicalMaterial) == 0x000008, "Wrong alignment on TgfCharacterAnimationHelperComponent_TryChangePhysicalMaterial");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_TryChangePhysicalMaterial) == 0x000010, "Wrong size on TgfCharacterAnimationHelperComponent_TryChangePhysicalMaterial");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_TryChangePhysicalMaterial, Part) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_TryChangePhysicalMaterial::Part' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_TryChangePhysicalMaterial, Material) == 0x000008, "Member 'TgfCharacterAnimationHelperComponent_TryChangePhysicalMaterial::Material' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.TryPlayCurEquipmentSingleAnimation
// 0x0018 (0x0018 - 0x0000)
struct TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation final
{
public:
	TSubclassOf<class AActor>                     EquipClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Sequence;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation) == 0x000008, "Wrong alignment on TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation) == 0x000018, "Wrong size on TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation, EquipClass) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation::EquipClass' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation, Sequence) == 0x000008, "Member 'TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation::Sequence' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation, PlayRate) == 0x000010, "Member 'TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation::PlayRate' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation, bLooping) == 0x000014, "Member 'TgfCharacterAnimationHelperComponent_TryPlayCurEquipmentSingleAnimation::bLooping' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.WaitToReleaseActor
// 0x0004 (0x0004 - 0x0000)
struct TgfCharacterAnimationHelperComponent_WaitToReleaseActor final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_WaitToReleaseActor) == 0x000004, "Wrong alignment on TgfCharacterAnimationHelperComponent_WaitToReleaseActor");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_WaitToReleaseActor) == 0x000004, "Wrong size on TgfCharacterAnimationHelperComponent_WaitToReleaseActor");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_WaitToReleaseActor, Time) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_WaitToReleaseActor::Time' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.GetHitReactAnimation
// 0x0038 (0x0038 - 0x0000)
struct TgfCharacterAnimationHelperComponent_GetHitReactAnimation final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         Character;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeavyHit;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimConfigDirection                          HitDirection;                                      // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequenceBase*                ReturnValue;                                       // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_GetHitReactAnimation) == 0x000008, "Wrong alignment on TgfCharacterAnimationHelperComponent_GetHitReactAnimation");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_GetHitReactAnimation) == 0x000038, "Wrong size on TgfCharacterAnimationHelperComponent_GetHitReactAnimation");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_GetHitReactAnimation, Tags) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_GetHitReactAnimation::Tags' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_GetHitReactAnimation, Character) == 0x000020, "Member 'TgfCharacterAnimationHelperComponent_GetHitReactAnimation::Character' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_GetHitReactAnimation, bHeavyHit) == 0x000028, "Member 'TgfCharacterAnimationHelperComponent_GetHitReactAnimation::bHeavyHit' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_GetHitReactAnimation, HitDirection) == 0x000029, "Member 'TgfCharacterAnimationHelperComponent_GetHitReactAnimation::HitDirection' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_GetHitReactAnimation, ReturnValue) == 0x000030, "Member 'TgfCharacterAnimationHelperComponent_GetHitReactAnimation::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.GetSocketTransform
// 0x0070 (0x0070 - 0x0000)
struct TgfCharacterAnimationHelperComponent_GetSocketTransform final
{
public:
	int32                                         SwordIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_GetSocketTransform) == 0x000010, "Wrong alignment on TgfCharacterAnimationHelperComponent_GetSocketTransform");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_GetSocketTransform) == 0x000070, "Wrong size on TgfCharacterAnimationHelperComponent_GetSocketTransform");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_GetSocketTransform, SwordIndex) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_GetSocketTransform::SwordIndex' has a wrong offset!");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_GetSocketTransform, ReturnValue) == 0x000010, "Member 'TgfCharacterAnimationHelperComponent_GetSocketTransform::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.GetSocketTransformExtra
// 0x0060 (0x0060 - 0x0000)
struct TgfCharacterAnimationHelperComponent_GetSocketTransformExtra final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_GetSocketTransformExtra) == 0x000010, "Wrong alignment on TgfCharacterAnimationHelperComponent_GetSocketTransformExtra");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_GetSocketTransformExtra) == 0x000060, "Wrong size on TgfCharacterAnimationHelperComponent_GetSocketTransformExtra");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_GetSocketTransformExtra, ReturnValue) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_GetSocketTransformExtra::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterAnimationHelperComponent.GetTimeDilationRate
// 0x0004 (0x0004 - 0x0000)
struct TgfCharacterAnimationHelperComponent_GetTimeDilationRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAnimationHelperComponent_GetTimeDilationRate) == 0x000004, "Wrong alignment on TgfCharacterAnimationHelperComponent_GetTimeDilationRate");
static_assert(sizeof(TgfCharacterAnimationHelperComponent_GetTimeDilationRate) == 0x000004, "Wrong size on TgfCharacterAnimationHelperComponent_GetTimeDilationRate");
static_assert(offsetof(TgfCharacterAnimationHelperComponent_GetTimeDilationRate, ReturnValue) == 0x000000, "Member 'TgfCharacterAnimationHelperComponent_GetTimeDilationRate::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterAvatarComponent.SetFaceConfigServerOnly
// 0x0018 (0x0018 - 0x0000)
struct TgfCharacterAvatarComponent_SetFaceConfigServerOnly final
{
public:
	class FString                                 Part;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterAvatarComponent_SetFaceConfigServerOnly) == 0x000008, "Wrong alignment on TgfCharacterAvatarComponent_SetFaceConfigServerOnly");
static_assert(sizeof(TgfCharacterAvatarComponent_SetFaceConfigServerOnly) == 0x000018, "Wrong size on TgfCharacterAvatarComponent_SetFaceConfigServerOnly");
static_assert(offsetof(TgfCharacterAvatarComponent_SetFaceConfigServerOnly, Part) == 0x000000, "Member 'TgfCharacterAvatarComponent_SetFaceConfigServerOnly::Part' has a wrong offset!");
static_assert(offsetof(TgfCharacterAvatarComponent_SetFaceConfigServerOnly, Param_Index) == 0x000010, "Member 'TgfCharacterAvatarComponent_SetFaceConfigServerOnly::Param_Index' has a wrong offset!");

// Function LyraGame.TgfCharacterAvatarComponent.SetShowHelmet
// 0x0001 (0x0001 - 0x0000)
struct TgfCharacterAvatarComponent_SetShowHelmet final
{
public:
	bool                                          Val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterAvatarComponent_SetShowHelmet) == 0x000001, "Wrong alignment on TgfCharacterAvatarComponent_SetShowHelmet");
static_assert(sizeof(TgfCharacterAvatarComponent_SetShowHelmet) == 0x000001, "Wrong size on TgfCharacterAvatarComponent_SetShowHelmet");
static_assert(offsetof(TgfCharacterAvatarComponent_SetShowHelmet, Val) == 0x000000, "Member 'TgfCharacterAvatarComponent_SetShowHelmet::Val' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.FindCharacterMovementExtensionComponent
// 0x0010 (0x0010 - 0x0000)
struct TgfCharacterMovementExtensionComponent_FindCharacterMovementExtensionComponent final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfCharacterMovementExtensionComponent* ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_FindCharacterMovementExtensionComponent) == 0x000008, "Wrong alignment on TgfCharacterMovementExtensionComponent_FindCharacterMovementExtensionComponent");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_FindCharacterMovementExtensionComponent) == 0x000010, "Wrong size on TgfCharacterMovementExtensionComponent_FindCharacterMovementExtensionComponent");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_FindCharacterMovementExtensionComponent, Actor) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_FindCharacterMovementExtensionComponent::Actor' has a wrong offset!");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_FindCharacterMovementExtensionComponent, ReturnValue) == 0x000008, "Member 'TgfCharacterMovementExtensionComponent_FindCharacterMovementExtensionComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.AddMovementMonitor
// 0x00F0 (0x00F0 - 0x0000)
struct TgfCharacterMovementExtensionComponent_AddMovementMonitor final
{
public:
	struct FTgfMovementMonitorConfig              NewMonitorConfig;                                  // 0x0000(0x00E8)(Parm, NativeAccessSpecifierPublic)
	bool                                          CheckUnique;                                       // 0x00E8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E9(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_AddMovementMonitor) == 0x000008, "Wrong alignment on TgfCharacterMovementExtensionComponent_AddMovementMonitor");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_AddMovementMonitor) == 0x0000F0, "Wrong size on TgfCharacterMovementExtensionComponent_AddMovementMonitor");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_AddMovementMonitor, NewMonitorConfig) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_AddMovementMonitor::NewMonitorConfig' has a wrong offset!");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_AddMovementMonitor, CheckUnique) == 0x0000E8, "Member 'TgfCharacterMovementExtensionComponent_AddMovementMonitor::CheckUnique' has a wrong offset!");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_AddMovementMonitor, ReturnValue) == 0x0000E9, "Member 'TgfCharacterMovementExtensionComponent_AddMovementMonitor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.ForceResetMovementMonitor
// 0x000C (0x000C - 0x0000)
struct TgfCharacterMovementExtensionComponent_ForceResetMovementMonitor final
{
public:
	struct FGameplayTag                           MovementMonitorTag;                                // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedResetTriggerTime;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_ForceResetMovementMonitor) == 0x000004, "Wrong alignment on TgfCharacterMovementExtensionComponent_ForceResetMovementMonitor");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_ForceResetMovementMonitor) == 0x00000C, "Wrong size on TgfCharacterMovementExtensionComponent_ForceResetMovementMonitor");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_ForceResetMovementMonitor, MovementMonitorTag) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_ForceResetMovementMonitor::MovementMonitorTag' has a wrong offset!");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_ForceResetMovementMonitor, bNeedResetTriggerTime) == 0x000008, "Member 'TgfCharacterMovementExtensionComponent_ForceResetMovementMonitor::bNeedResetTriggerTime' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.ForceTriggerMovementMonitor
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterMovementExtensionComponent_ForceTriggerMovementMonitor final
{
public:
	struct FGameplayTag                           MovementMonitorTag;                                // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_ForceTriggerMovementMonitor) == 0x000004, "Wrong alignment on TgfCharacterMovementExtensionComponent_ForceTriggerMovementMonitor");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_ForceTriggerMovementMonitor) == 0x000008, "Wrong size on TgfCharacterMovementExtensionComponent_ForceTriggerMovementMonitor");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_ForceTriggerMovementMonitor, MovementMonitorTag) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_ForceTriggerMovementMonitor::MovementMonitorTag' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.MoveActorBlockedOnLocal
// 0x0020 (0x0020 - 0x0000)
struct TgfCharacterMovementExtensionComponent_MoveActorBlockedOnLocal final
{
public:
	struct FVector                                ClientPos;                                         // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           BlockedActor;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_MoveActorBlockedOnLocal) == 0x000008, "Wrong alignment on TgfCharacterMovementExtensionComponent_MoveActorBlockedOnLocal");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_MoveActorBlockedOnLocal) == 0x000020, "Wrong size on TgfCharacterMovementExtensionComponent_MoveActorBlockedOnLocal");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_MoveActorBlockedOnLocal, ClientPos) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_MoveActorBlockedOnLocal::ClientPos' has a wrong offset!");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_MoveActorBlockedOnLocal, BlockedActor) == 0x000018, "Member 'TgfCharacterMovementExtensionComponent_MoveActorBlockedOnLocal::BlockedActor' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.OnSelectedSnapTargetLocal
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetLocal final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetLocal) == 0x000008, "Wrong alignment on TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetLocal");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetLocal) == 0x000008, "Wrong size on TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetLocal");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetLocal, TargetActor) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetLocal::TargetActor' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.OnSelectedSnapTargetServer
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetServer final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetServer) == 0x000008, "Wrong alignment on TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetServer");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetServer) == 0x000008, "Wrong size on TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetServer");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetServer, TargetActor) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_OnSelectedSnapTargetServer::TargetActor' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.RemoveMovementMonitor
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterMovementExtensionComponent_RemoveMovementMonitor final
{
public:
	struct FGameplayTag                           MovementMonitorTag;                                // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_RemoveMovementMonitor) == 0x000004, "Wrong alignment on TgfCharacterMovementExtensionComponent_RemoveMovementMonitor");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_RemoveMovementMonitor) == 0x000008, "Wrong size on TgfCharacterMovementExtensionComponent_RemoveMovementMonitor");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_RemoveMovementMonitor, MovementMonitorTag) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_RemoveMovementMonitor::MovementMonitorTag' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.ServerCheckSnapTargetValid
// 0x0058 (0x0058 - 0x0000)
struct TgfCharacterMovementExtensionComponent_ServerCheckSnapTargetValid final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfSnapQueryConfig                    SnapQueryConfig;                                   // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_ServerCheckSnapTargetValid) == 0x000008, "Wrong alignment on TgfCharacterMovementExtensionComponent_ServerCheckSnapTargetValid");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_ServerCheckSnapTargetValid) == 0x000058, "Wrong size on TgfCharacterMovementExtensionComponent_ServerCheckSnapTargetValid");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_ServerCheckSnapTargetValid, TargetActor) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_ServerCheckSnapTargetValid::TargetActor' has a wrong offset!");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_ServerCheckSnapTargetValid, SnapQueryConfig) == 0x000008, "Member 'TgfCharacterMovementExtensionComponent_ServerCheckSnapTargetValid::SnapQueryConfig' has a wrong offset!");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_ServerCheckSnapTargetValid, ReturnValue) == 0x000050, "Member 'TgfCharacterMovementExtensionComponent_ServerCheckSnapTargetValid::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.SetIgnorePawnCollision
// 0x0001 (0x0001 - 0x0000)
struct TgfCharacterMovementExtensionComponent_SetIgnorePawnCollision final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_SetIgnorePawnCollision) == 0x000001, "Wrong alignment on TgfCharacterMovementExtensionComponent_SetIgnorePawnCollision");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_SetIgnorePawnCollision) == 0x000001, "Wrong size on TgfCharacterMovementExtensionComponent_SetIgnorePawnCollision");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_SetIgnorePawnCollision, bEnabled) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_SetIgnorePawnCollision::bEnabled' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.TryGetSnapTargetLocal
// 0x0050 (0x0050 - 0x0000)
struct TgfCharacterMovementExtensionComponent_TryGetSnapTargetLocal final
{
public:
	struct FTgfSnapQueryConfig                    SnapQueryConfig;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_TryGetSnapTargetLocal) == 0x000008, "Wrong alignment on TgfCharacterMovementExtensionComponent_TryGetSnapTargetLocal");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_TryGetSnapTargetLocal) == 0x000050, "Wrong size on TgfCharacterMovementExtensionComponent_TryGetSnapTargetLocal");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_TryGetSnapTargetLocal, SnapQueryConfig) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_TryGetSnapTargetLocal::SnapQueryConfig' has a wrong offset!");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_TryGetSnapTargetLocal, ReturnValue) == 0x000048, "Member 'TgfCharacterMovementExtensionComponent_TryGetSnapTargetLocal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.TryingTeleportToFitPos
// 0x0001 (0x0001 - 0x0000)
struct TgfCharacterMovementExtensionComponent_TryingTeleportToFitPos final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_TryingTeleportToFitPos) == 0x000001, "Wrong alignment on TgfCharacterMovementExtensionComponent_TryingTeleportToFitPos");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_TryingTeleportToFitPos) == 0x000001, "Wrong size on TgfCharacterMovementExtensionComponent_TryingTeleportToFitPos");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_TryingTeleportToFitPos, ReturnValue) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_TryingTeleportToFitPos::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.GetCharacterOwner
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterMovementExtensionComponent_GetCharacterOwner final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_GetCharacterOwner) == 0x000008, "Wrong alignment on TgfCharacterMovementExtensionComponent_GetCharacterOwner");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_GetCharacterOwner) == 0x000008, "Wrong size on TgfCharacterMovementExtensionComponent_GetCharacterOwner");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_GetCharacterOwner, ReturnValue) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_GetCharacterOwner::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterMovementExtensionComponent.GetIsPantherState
// 0x0001 (0x0001 - 0x0000)
struct TgfCharacterMovementExtensionComponent_GetIsPantherState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterMovementExtensionComponent_GetIsPantherState) == 0x000001, "Wrong alignment on TgfCharacterMovementExtensionComponent_GetIsPantherState");
static_assert(sizeof(TgfCharacterMovementExtensionComponent_GetIsPantherState) == 0x000001, "Wrong size on TgfCharacterMovementExtensionComponent_GetIsPantherState");
static_assert(offsetof(TgfCharacterMovementExtensionComponent_GetIsPantherState, ReturnValue) == 0x000000, "Member 'TgfCharacterMovementExtensionComponent_GetIsPantherState::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterSummonComponent.AddToSummonActorList
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterSummonComponent_AddToSummonActorList final
{
public:
	class AActor*                                 SummonActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterSummonComponent_AddToSummonActorList) == 0x000008, "Wrong alignment on TgfCharacterSummonComponent_AddToSummonActorList");
static_assert(sizeof(TgfCharacterSummonComponent_AddToSummonActorList) == 0x000008, "Wrong size on TgfCharacterSummonComponent_AddToSummonActorList");
static_assert(offsetof(TgfCharacterSummonComponent_AddToSummonActorList, SummonActor) == 0x000000, "Member 'TgfCharacterSummonComponent_AddToSummonActorList::SummonActor' has a wrong offset!");

// Function LyraGame.TgfCharacterSummonComponent.ApplyEffectToSummonActor
// 0x0018 (0x0018 - 0x0000)
struct TgfCharacterSummonComponent_ApplyEffectToSummonActor final
{
public:
	const class AActor*                           SummonActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    GEs;                                               // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterSummonComponent_ApplyEffectToSummonActor) == 0x000008, "Wrong alignment on TgfCharacterSummonComponent_ApplyEffectToSummonActor");
static_assert(sizeof(TgfCharacterSummonComponent_ApplyEffectToSummonActor) == 0x000018, "Wrong size on TgfCharacterSummonComponent_ApplyEffectToSummonActor");
static_assert(offsetof(TgfCharacterSummonComponent_ApplyEffectToSummonActor, SummonActor) == 0x000000, "Member 'TgfCharacterSummonComponent_ApplyEffectToSummonActor::SummonActor' has a wrong offset!");
static_assert(offsetof(TgfCharacterSummonComponent_ApplyEffectToSummonActor, GEs) == 0x000008, "Member 'TgfCharacterSummonComponent_ApplyEffectToSummonActor::GEs' has a wrong offset!");

// Function LyraGame.TgfCharacterSummonComponent.ApplyEffectToSummonActors
// 0x0010 (0x0010 - 0x0000)
struct TgfCharacterSummonComponent_ApplyEffectToSummonActors final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    GEs;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterSummonComponent_ApplyEffectToSummonActors) == 0x000008, "Wrong alignment on TgfCharacterSummonComponent_ApplyEffectToSummonActors");
static_assert(sizeof(TgfCharacterSummonComponent_ApplyEffectToSummonActors) == 0x000010, "Wrong size on TgfCharacterSummonComponent_ApplyEffectToSummonActors");
static_assert(offsetof(TgfCharacterSummonComponent_ApplyEffectToSummonActors, GEs) == 0x000000, "Member 'TgfCharacterSummonComponent_ApplyEffectToSummonActors::GEs' has a wrong offset!");

// Function LyraGame.TgfCharacterSummonComponent.DestroyAllSummonActorsWithDelay
// 0x0004 (0x0004 - 0x0000)
struct TgfCharacterSummonComponent_DestroyAllSummonActorsWithDelay final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterSummonComponent_DestroyAllSummonActorsWithDelay) == 0x000004, "Wrong alignment on TgfCharacterSummonComponent_DestroyAllSummonActorsWithDelay");
static_assert(sizeof(TgfCharacterSummonComponent_DestroyAllSummonActorsWithDelay) == 0x000004, "Wrong size on TgfCharacterSummonComponent_DestroyAllSummonActorsWithDelay");
static_assert(offsetof(TgfCharacterSummonComponent_DestroyAllSummonActorsWithDelay, DelayTime) == 0x000000, "Member 'TgfCharacterSummonComponent_DestroyAllSummonActorsWithDelay::DelayTime' has a wrong offset!");

// Function LyraGame.TgfCharacterSummonComponent.RemoveFromSummonActorList
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterSummonComponent_RemoveFromSummonActorList final
{
public:
	class AActor*                                 SummonActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterSummonComponent_RemoveFromSummonActorList) == 0x000008, "Wrong alignment on TgfCharacterSummonComponent_RemoveFromSummonActorList");
static_assert(sizeof(TgfCharacterSummonComponent_RemoveFromSummonActorList) == 0x000008, "Wrong size on TgfCharacterSummonComponent_RemoveFromSummonActorList");
static_assert(offsetof(TgfCharacterSummonComponent_RemoveFromSummonActorList, SummonActor) == 0x000000, "Member 'TgfCharacterSummonComponent_RemoveFromSummonActorList::SummonActor' has a wrong offset!");

// Function LyraGame.TgfCharacterSummonComponent.SetDestroySummonsWhenDied
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterSummonComponent_SetDestroySummonsWhenDied final
{
public:
	bool                                          Destroy;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterSummonComponent_SetDestroySummonsWhenDied) == 0x000004, "Wrong alignment on TgfCharacterSummonComponent_SetDestroySummonsWhenDied");
static_assert(sizeof(TgfCharacterSummonComponent_SetDestroySummonsWhenDied) == 0x000008, "Wrong size on TgfCharacterSummonComponent_SetDestroySummonsWhenDied");
static_assert(offsetof(TgfCharacterSummonComponent_SetDestroySummonsWhenDied, Destroy) == 0x000000, "Member 'TgfCharacterSummonComponent_SetDestroySummonsWhenDied::Destroy' has a wrong offset!");
static_assert(offsetof(TgfCharacterSummonComponent_SetDestroySummonsWhenDied, DelayTime) == 0x000004, "Member 'TgfCharacterSummonComponent_SetDestroySummonsWhenDied::DelayTime' has a wrong offset!");

// Function LyraGame.TgfCharacterSummonComponent.SetSummonSource
// 0x0008 (0x0008 - 0x0000)
struct TgfCharacterSummonComponent_SetSummonSource final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterSummonComponent_SetSummonSource) == 0x000008, "Wrong alignment on TgfCharacterSummonComponent_SetSummonSource");
static_assert(sizeof(TgfCharacterSummonComponent_SetSummonSource) == 0x000008, "Wrong size on TgfCharacterSummonComponent_SetSummonSource");
static_assert(offsetof(TgfCharacterSummonComponent_SetSummonSource, Source) == 0x000000, "Member 'TgfCharacterSummonComponent_SetSummonSource::Source' has a wrong offset!");

// Function LyraGame.TgfCharacterSummonComponent.GetSummonActors
// 0x0018 (0x0018 - 0x0000)
struct TgfCharacterSummonComponent_GetSummonActors final
{
public:
	bool                                          Recursively;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterSummonComponent_GetSummonActors) == 0x000008, "Wrong alignment on TgfCharacterSummonComponent_GetSummonActors");
static_assert(sizeof(TgfCharacterSummonComponent_GetSummonActors) == 0x000018, "Wrong size on TgfCharacterSummonComponent_GetSummonActors");
static_assert(offsetof(TgfCharacterSummonComponent_GetSummonActors, Recursively) == 0x000000, "Member 'TgfCharacterSummonComponent_GetSummonActors::Recursively' has a wrong offset!");
static_assert(offsetof(TgfCharacterSummonComponent_GetSummonActors, ReturnValue) == 0x000008, "Member 'TgfCharacterSummonComponent_GetSummonActors::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterSummonComponent.GetSummonActorsCount
// 0x0004 (0x0004 - 0x0000)
struct TgfCharacterSummonComponent_GetSummonActorsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterSummonComponent_GetSummonActorsCount) == 0x000004, "Wrong alignment on TgfCharacterSummonComponent_GetSummonActorsCount");
static_assert(sizeof(TgfCharacterSummonComponent_GetSummonActorsCount) == 0x000004, "Wrong size on TgfCharacterSummonComponent_GetSummonActorsCount");
static_assert(offsetof(TgfCharacterSummonComponent_GetSummonActorsCount, ReturnValue) == 0x000000, "Member 'TgfCharacterSummonComponent_GetSummonActorsCount::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterSummonComponent.GetSummonSource
// 0x0010 (0x0010 - 0x0000)
struct TgfCharacterSummonComponent_GetSummonSource final
{
public:
	bool                                          Recursively;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterSummonComponent_GetSummonSource) == 0x000008, "Wrong alignment on TgfCharacterSummonComponent_GetSummonSource");
static_assert(sizeof(TgfCharacterSummonComponent_GetSummonSource) == 0x000010, "Wrong size on TgfCharacterSummonComponent_GetSummonSource");
static_assert(offsetof(TgfCharacterSummonComponent_GetSummonSource, Recursively) == 0x000000, "Member 'TgfCharacterSummonComponent_GetSummonSource::Recursively' has a wrong offset!");
static_assert(offsetof(TgfCharacterSummonComponent_GetSummonSource, ReturnValue) == 0x000008, "Member 'TgfCharacterSummonComponent_GetSummonSource::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCharacterSummonComponent.IsSummonSource
// 0x0001 (0x0001 - 0x0000)
struct TgfCharacterSummonComponent_IsSummonSource final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCharacterSummonComponent_IsSummonSource) == 0x000001, "Wrong alignment on TgfCharacterSummonComponent_IsSummonSource");
static_assert(sizeof(TgfCharacterSummonComponent_IsSummonSource) == 0x000001, "Wrong size on TgfCharacterSummonComponent_IsSummonSource");
static_assert(offsetof(TgfCharacterSummonComponent_IsSummonSource, ReturnValue) == 0x000000, "Member 'TgfCharacterSummonComponent_IsSummonSource::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraWeaponStateComponent.ClientConfirmTargetData
// 0x0018 (0x0018 - 0x0000)
struct LyraWeaponStateComponent_ClientConfirmTargetData final
{
public:
	uint16                                        UniqueId;                                          // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 HitReplaces;                                       // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWeaponStateComponent_ClientConfirmTargetData) == 0x000008, "Wrong alignment on LyraWeaponStateComponent_ClientConfirmTargetData");
static_assert(sizeof(LyraWeaponStateComponent_ClientConfirmTargetData) == 0x000018, "Wrong size on LyraWeaponStateComponent_ClientConfirmTargetData");
static_assert(offsetof(LyraWeaponStateComponent_ClientConfirmTargetData, UniqueId) == 0x000000, "Member 'LyraWeaponStateComponent_ClientConfirmTargetData::UniqueId' has a wrong offset!");
static_assert(offsetof(LyraWeaponStateComponent_ClientConfirmTargetData, bSuccess) == 0x000002, "Member 'LyraWeaponStateComponent_ClientConfirmTargetData::bSuccess' has a wrong offset!");
static_assert(offsetof(LyraWeaponStateComponent_ClientConfirmTargetData, HitReplaces) == 0x000008, "Member 'LyraWeaponStateComponent_ClientConfirmTargetData::HitReplaces' has a wrong offset!");

// Function LyraGame.TgfCollectableLightComponent.GetCollectable
// 0x0001 (0x0001 - 0x0000)
struct TgfCollectableLightComponent_GetCollectable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCollectableLightComponent_GetCollectable) == 0x000001, "Wrong alignment on TgfCollectableLightComponent_GetCollectable");
static_assert(sizeof(TgfCollectableLightComponent_GetCollectable) == 0x000001, "Wrong size on TgfCollectableLightComponent_GetCollectable");
static_assert(offsetof(TgfCollectableLightComponent_GetCollectable, ReturnValue) == 0x000000, "Member 'TgfCollectableLightComponent_GetCollectable::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfCollectableLightComponent.SetCollectable
// 0x0001 (0x0001 - 0x0000)
struct TgfCollectableLightComponent_SetCollectable final
{
public:
	bool                                          bCollectable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfCollectableLightComponent_SetCollectable) == 0x000001, "Wrong alignment on TgfCollectableLightComponent_SetCollectable");
static_assert(sizeof(TgfCollectableLightComponent_SetCollectable) == 0x000001, "Wrong size on TgfCollectableLightComponent_SetCollectable");
static_assert(offsetof(TgfCollectableLightComponent_SetCollectable, bCollectable) == 0x000000, "Member 'TgfCollectableLightComponent_SetCollectable::bCollectable' has a wrong offset!");

// Function LyraGame.AsyncAction_FinishCameraBlend.FinishCameraBlend
// 0x0018 (0x0018 - 0x0000)
struct AsyncAction_FinishCameraBlend_FinishCameraBlend final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeadTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncAction_FinishCameraBlend*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_FinishCameraBlend_FinishCameraBlend) == 0x000008, "Wrong alignment on AsyncAction_FinishCameraBlend_FinishCameraBlend");
static_assert(sizeof(AsyncAction_FinishCameraBlend_FinishCameraBlend) == 0x000018, "Wrong size on AsyncAction_FinishCameraBlend_FinishCameraBlend");
static_assert(offsetof(AsyncAction_FinishCameraBlend_FinishCameraBlend, WorldContextObject) == 0x000000, "Member 'AsyncAction_FinishCameraBlend_FinishCameraBlend::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_FinishCameraBlend_FinishCameraBlend, LeadTime) == 0x000008, "Member 'AsyncAction_FinishCameraBlend_FinishCameraBlend::LeadTime' has a wrong offset!");
static_assert(offsetof(AsyncAction_FinishCameraBlend_FinishCameraBlend, ReturnValue) == 0x000010, "Member 'AsyncAction_FinishCameraBlend_FinishCameraBlend::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfControllerSteamAchievementComponent.OnOtherResurrect
// 0x0008 (0x0008 - 0x0000)
struct TgfControllerSteamAchievementComponent_OnOtherResurrect final
{
public:
	class ALyraCharacter*                         Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfControllerSteamAchievementComponent_OnOtherResurrect) == 0x000008, "Wrong alignment on TgfControllerSteamAchievementComponent_OnOtherResurrect");
static_assert(sizeof(TgfControllerSteamAchievementComponent_OnOtherResurrect) == 0x000008, "Wrong size on TgfControllerSteamAchievementComponent_OnOtherResurrect");
static_assert(offsetof(TgfControllerSteamAchievementComponent_OnOtherResurrect, Instigator) == 0x000000, "Member 'TgfControllerSteamAchievementComponent_OnOtherResurrect::Instigator' has a wrong offset!");

// Function LyraGame.TgfControllerSteamAchievementComponent.OnPlayerKillEvent
// 0x0088 (0x0088 - 0x0000)
struct TgfControllerSteamAchievementComponent_OnPlayerKillEvent final
{
public:
	struct FGameplayTag                           Channel;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLyraVerbMessage                       InMessage;                                         // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfControllerSteamAchievementComponent_OnPlayerKillEvent) == 0x000008, "Wrong alignment on TgfControllerSteamAchievementComponent_OnPlayerKillEvent");
static_assert(sizeof(TgfControllerSteamAchievementComponent_OnPlayerKillEvent) == 0x000088, "Wrong size on TgfControllerSteamAchievementComponent_OnPlayerKillEvent");
static_assert(offsetof(TgfControllerSteamAchievementComponent_OnPlayerKillEvent, Channel) == 0x000000, "Member 'TgfControllerSteamAchievementComponent_OnPlayerKillEvent::Channel' has a wrong offset!");
static_assert(offsetof(TgfControllerSteamAchievementComponent_OnPlayerKillEvent, InMessage) == 0x000008, "Member 'TgfControllerSteamAchievementComponent_OnPlayerKillEvent::InMessage' has a wrong offset!");

// Function LyraGame.TgfControllerSteamAchievementComponent.OnRebirthOtherMember
// 0x0008 (0x0008 - 0x0000)
struct TgfControllerSteamAchievementComponent_OnRebirthOtherMember final
{
public:
	class AActor*                                 RevivedTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfControllerSteamAchievementComponent_OnRebirthOtherMember) == 0x000008, "Wrong alignment on TgfControllerSteamAchievementComponent_OnRebirthOtherMember");
static_assert(sizeof(TgfControllerSteamAchievementComponent_OnRebirthOtherMember) == 0x000008, "Wrong size on TgfControllerSteamAchievementComponent_OnRebirthOtherMember");
static_assert(offsetof(TgfControllerSteamAchievementComponent_OnRebirthOtherMember, RevivedTarget) == 0x000000, "Member 'TgfControllerSteamAchievementComponent_OnRebirthOtherMember::RevivedTarget' has a wrong offset!");

// Function LyraGame.TgfEnterNpcStateAsyncAction.WaitForGlobalNpcState
// 0x0018 (0x0018 - 0x0000)
struct TgfEnterNpcStateAsyncAction_WaitForGlobalNpcState final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTgfNpcState>               NpcState;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfEnterNpcStateAsyncAction*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEnterNpcStateAsyncAction_WaitForGlobalNpcState) == 0x000008, "Wrong alignment on TgfEnterNpcStateAsyncAction_WaitForGlobalNpcState");
static_assert(sizeof(TgfEnterNpcStateAsyncAction_WaitForGlobalNpcState) == 0x000018, "Wrong size on TgfEnterNpcStateAsyncAction_WaitForGlobalNpcState");
static_assert(offsetof(TgfEnterNpcStateAsyncAction_WaitForGlobalNpcState, WorldContext) == 0x000000, "Member 'TgfEnterNpcStateAsyncAction_WaitForGlobalNpcState::WorldContext' has a wrong offset!");
static_assert(offsetof(TgfEnterNpcStateAsyncAction_WaitForGlobalNpcState, NpcState) == 0x000008, "Member 'TgfEnterNpcStateAsyncAction_WaitForGlobalNpcState::NpcState' has a wrong offset!");
static_assert(offsetof(TgfEnterNpcStateAsyncAction_WaitForGlobalNpcState, ReturnValue) == 0x000010, "Member 'TgfEnterNpcStateAsyncAction_WaitForGlobalNpcState::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.StaticCreateInstance
// 0x0020 (0x0020 - 0x0000)
struct LyraEquipmentManagerComponent_StaticCreateInstance final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraEquipmentInstance>     InstanceType;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraEquipmentInstance*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_StaticCreateInstance) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_StaticCreateInstance");
static_assert(sizeof(LyraEquipmentManagerComponent_StaticCreateInstance) == 0x000020, "Wrong size on LyraEquipmentManagerComponent_StaticCreateInstance");
static_assert(offsetof(LyraEquipmentManagerComponent_StaticCreateInstance, Owner) == 0x000000, "Member 'LyraEquipmentManagerComponent_StaticCreateInstance::Owner' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_StaticCreateInstance, ItemInstance) == 0x000008, "Member 'LyraEquipmentManagerComponent_StaticCreateInstance::ItemInstance' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_StaticCreateInstance, InstanceType) == 0x000010, "Member 'LyraEquipmentManagerComponent_StaticCreateInstance::InstanceType' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_StaticCreateInstance, ReturnValue) == 0x000018, "Member 'LyraEquipmentManagerComponent_StaticCreateInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.EquipItemByDefinition
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_EquipItemByDefinition final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraEquipmentManagerComponent_EquipItemByDefinition) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_EquipItemByDefinition");
static_assert(sizeof(LyraEquipmentManagerComponent_EquipItemByDefinition) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_EquipItemByDefinition");
static_assert(offsetof(LyraEquipmentManagerComponent_EquipItemByDefinition, ItemInstance) == 0x000000, "Member 'LyraEquipmentManagerComponent_EquipItemByDefinition::ItemInstance' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_EquipItemByDefinition, Slot) == 0x000008, "Member 'LyraEquipmentManagerComponent_EquipItemByDefinition::Slot' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.EquipItemByInstance
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_EquipItemByInstance final
{
public:
	class ULyraEquipmentInstance*                 Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraEquipmentManagerComponent_EquipItemByInstance) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_EquipItemByInstance");
static_assert(sizeof(LyraEquipmentManagerComponent_EquipItemByInstance) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_EquipItemByInstance");
static_assert(offsetof(LyraEquipmentManagerComponent_EquipItemByInstance, Instance) == 0x000000, "Member 'LyraEquipmentManagerComponent_EquipItemByInstance::Instance' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_EquipItemByInstance, Slot) == 0x000008, "Member 'LyraEquipmentManagerComponent_EquipItemByInstance::Slot' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.GetFirstInstanceOfType
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_GetFirstInstanceOfType final
{
public:
	TSubclassOf<class ULyraEquipmentInstance>     InstanceType;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraEquipmentInstance*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_GetFirstInstanceOfType) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_GetFirstInstanceOfType");
static_assert(sizeof(LyraEquipmentManagerComponent_GetFirstInstanceOfType) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_GetFirstInstanceOfType");
static_assert(offsetof(LyraEquipmentManagerComponent_GetFirstInstanceOfType, InstanceType) == 0x000000, "Member 'LyraEquipmentManagerComponent_GetFirstInstanceOfType::InstanceType' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_GetFirstInstanceOfType, ReturnValue) == 0x000008, "Member 'LyraEquipmentManagerComponent_GetFirstInstanceOfType::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.UnequipItemByDefinition
// 0x0008 (0x0008 - 0x0000)
struct LyraEquipmentManagerComponent_UnequipItemByDefinition final
{
public:
	TSubclassOf<class ULyraEquipmentDefinition>   EquipClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_UnequipItemByDefinition) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_UnequipItemByDefinition");
static_assert(sizeof(LyraEquipmentManagerComponent_UnequipItemByDefinition) == 0x000008, "Wrong size on LyraEquipmentManagerComponent_UnequipItemByDefinition");
static_assert(offsetof(LyraEquipmentManagerComponent_UnequipItemByDefinition, EquipClass) == 0x000000, "Member 'LyraEquipmentManagerComponent_UnequipItemByDefinition::EquipClass' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.UnequipItemByInstance
// 0x0008 (0x0008 - 0x0000)
struct LyraEquipmentManagerComponent_UnequipItemByInstance final
{
public:
	class ULyraEquipmentInstance*                 Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_UnequipItemByInstance) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_UnequipItemByInstance");
static_assert(sizeof(LyraEquipmentManagerComponent_UnequipItemByInstance) == 0x000008, "Wrong size on LyraEquipmentManagerComponent_UnequipItemByInstance");
static_assert(offsetof(LyraEquipmentManagerComponent_UnequipItemByInstance, Instance) == 0x000000, "Member 'LyraEquipmentManagerComponent_UnequipItemByInstance::Instance' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.UnequipItemByItem
// 0x0008 (0x0008 - 0x0000)
struct LyraEquipmentManagerComponent_UnequipItemByItem final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_UnequipItemByItem) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_UnequipItemByItem");
static_assert(sizeof(LyraEquipmentManagerComponent_UnequipItemByItem) == 0x000008, "Wrong size on LyraEquipmentManagerComponent_UnequipItemByItem");
static_assert(offsetof(LyraEquipmentManagerComponent_UnequipItemByItem, ItemInstance) == 0x000000, "Member 'LyraEquipmentManagerComponent_UnequipItemByItem::ItemInstance' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.UnequipItemByItemAuth
// 0x0008 (0x0008 - 0x0000)
struct LyraEquipmentManagerComponent_UnequipItemByItemAuth final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_UnequipItemByItemAuth) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_UnequipItemByItemAuth");
static_assert(sizeof(LyraEquipmentManagerComponent_UnequipItemByItemAuth) == 0x000008, "Wrong size on LyraEquipmentManagerComponent_UnequipItemByItemAuth");
static_assert(offsetof(LyraEquipmentManagerComponent_UnequipItemByItemAuth, ItemInstance) == 0x000000, "Member 'LyraEquipmentManagerComponent_UnequipItemByItemAuth::ItemInstance' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.UpdateEquipInstance
// 0x0008 (0x0008 - 0x0000)
struct LyraEquipmentManagerComponent_UpdateEquipInstance final
{
public:
	class ULyraEquipmentInstance*                 EquipInstance;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_UpdateEquipInstance) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_UpdateEquipInstance");
static_assert(sizeof(LyraEquipmentManagerComponent_UpdateEquipInstance) == 0x000008, "Wrong size on LyraEquipmentManagerComponent_UpdateEquipInstance");
static_assert(offsetof(LyraEquipmentManagerComponent_UpdateEquipInstance, EquipInstance) == 0x000000, "Member 'LyraEquipmentManagerComponent_UpdateEquipInstance::EquipInstance' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.UpdateItemInstance
// 0x0008 (0x0008 - 0x0000)
struct LyraEquipmentManagerComponent_UpdateItemInstance final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_UpdateItemInstance) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_UpdateItemInstance");
static_assert(sizeof(LyraEquipmentManagerComponent_UpdateItemInstance) == 0x000008, "Wrong size on LyraEquipmentManagerComponent_UpdateItemInstance");
static_assert(offsetof(LyraEquipmentManagerComponent_UpdateItemInstance, ItemInstance) == 0x000000, "Member 'LyraEquipmentManagerComponent_UpdateItemInstance::ItemInstance' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.CanUnequipItemInstance
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_CanUnequipItemInstance final
{
public:
	class ULyraEquipmentInstance*                 Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExchange;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraEquipmentManagerComponent_CanUnequipItemInstance) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_CanUnequipItemInstance");
static_assert(sizeof(LyraEquipmentManagerComponent_CanUnequipItemInstance) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_CanUnequipItemInstance");
static_assert(offsetof(LyraEquipmentManagerComponent_CanUnequipItemInstance, Instance) == 0x000000, "Member 'LyraEquipmentManagerComponent_CanUnequipItemInstance::Instance' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_CanUnequipItemInstance, IsExchange) == 0x000008, "Member 'LyraEquipmentManagerComponent_CanUnequipItemInstance::IsExchange' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_CanUnequipItemInstance, ReturnValue) == 0x000009, "Member 'LyraEquipmentManagerComponent_CanUnequipItemInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.CanUnequipItemInventory
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_CanUnequipItemInventory final
{
public:
	class ULyraInventoryItemInstance*             Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExchange;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraEquipmentManagerComponent_CanUnequipItemInventory) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_CanUnequipItemInventory");
static_assert(sizeof(LyraEquipmentManagerComponent_CanUnequipItemInventory) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_CanUnequipItemInventory");
static_assert(offsetof(LyraEquipmentManagerComponent_CanUnequipItemInventory, Instance) == 0x000000, "Member 'LyraEquipmentManagerComponent_CanUnequipItemInventory::Instance' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_CanUnequipItemInventory, IsExchange) == 0x000008, "Member 'LyraEquipmentManagerComponent_CanUnequipItemInventory::IsExchange' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_CanUnequipItemInventory, ReturnValue) == 0x000009, "Member 'LyraEquipmentManagerComponent_CanUnequipItemInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.CreateInstance
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_CreateInstance final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraEquipmentInstance*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_CreateInstance) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_CreateInstance");
static_assert(sizeof(LyraEquipmentManagerComponent_CreateInstance) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_CreateInstance");
static_assert(offsetof(LyraEquipmentManagerComponent_CreateInstance, ItemInstance) == 0x000000, "Member 'LyraEquipmentManagerComponent_CreateInstance::ItemInstance' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_CreateInstance, ReturnValue) == 0x000008, "Member 'LyraEquipmentManagerComponent_CreateInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.FindFirstItemByDefinition
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_FindFirstItemByDefinition final
{
public:
	TSubclassOf<class ULyraEquipmentDefinition>   EquipDef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraEquipmentInstance*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_FindFirstItemByDefinition) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_FindFirstItemByDefinition");
static_assert(sizeof(LyraEquipmentManagerComponent_FindFirstItemByDefinition) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_FindFirstItemByDefinition");
static_assert(offsetof(LyraEquipmentManagerComponent_FindFirstItemByDefinition, EquipDef) == 0x000000, "Member 'LyraEquipmentManagerComponent_FindFirstItemByDefinition::EquipDef' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_FindFirstItemByDefinition, ReturnValue) == 0x000008, "Member 'LyraEquipmentManagerComponent_FindFirstItemByDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.GetAllEntries
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_GetAllEntries final
{
public:
	TArray<struct FLyraAppliedEquipmentEntry>     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_GetAllEntries) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_GetAllEntries");
static_assert(sizeof(LyraEquipmentManagerComponent_GetAllEntries) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_GetAllEntries");
static_assert(offsetof(LyraEquipmentManagerComponent_GetAllEntries, ReturnValue) == 0x000000, "Member 'LyraEquipmentManagerComponent_GetAllEntries::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.GetAllEquips
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_GetAllEquips final
{
public:
	TArray<class ULyraEquipmentInstance*>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_GetAllEquips) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_GetAllEquips");
static_assert(sizeof(LyraEquipmentManagerComponent_GetAllEquips) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_GetAllEquips");
static_assert(offsetof(LyraEquipmentManagerComponent_GetAllEquips, ReturnValue) == 0x000000, "Member 'LyraEquipmentManagerComponent_GetAllEquips::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.GetEntryIndexByEquipInstance
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_GetEntryIndexByEquipInstance final
{
public:
	class ULyraEquipmentInstance*                 EquipInstance;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraEquipmentManagerComponent_GetEntryIndexByEquipInstance) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_GetEntryIndexByEquipInstance");
static_assert(sizeof(LyraEquipmentManagerComponent_GetEntryIndexByEquipInstance) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_GetEntryIndexByEquipInstance");
static_assert(offsetof(LyraEquipmentManagerComponent_GetEntryIndexByEquipInstance, EquipInstance) == 0x000000, "Member 'LyraEquipmentManagerComponent_GetEntryIndexByEquipInstance::EquipInstance' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_GetEntryIndexByEquipInstance, ReturnValue) == 0x000008, "Member 'LyraEquipmentManagerComponent_GetEntryIndexByEquipInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.GetEntryIndexByItemInstance
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_GetEntryIndexByItemInstance final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraEquipmentManagerComponent_GetEntryIndexByItemInstance) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_GetEntryIndexByItemInstance");
static_assert(sizeof(LyraEquipmentManagerComponent_GetEntryIndexByItemInstance) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_GetEntryIndexByItemInstance");
static_assert(offsetof(LyraEquipmentManagerComponent_GetEntryIndexByItemInstance, ItemInstance) == 0x000000, "Member 'LyraEquipmentManagerComponent_GetEntryIndexByItemInstance::ItemInstance' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_GetEntryIndexByItemInstance, ReturnValue) == 0x000008, "Member 'LyraEquipmentManagerComponent_GetEntryIndexByItemInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.GetEquipInstance
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_GetEquipInstance final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraEquipmentInstance*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_GetEquipInstance) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_GetEquipInstance");
static_assert(sizeof(LyraEquipmentManagerComponent_GetEquipInstance) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_GetEquipInstance");
static_assert(offsetof(LyraEquipmentManagerComponent_GetEquipInstance, Param_Index) == 0x000000, "Member 'LyraEquipmentManagerComponent_GetEquipInstance::Param_Index' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_GetEquipInstance, ReturnValue) == 0x000008, "Member 'LyraEquipmentManagerComponent_GetEquipInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.GetEquipmentInstanceByItemInstance
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_GetEquipmentInstanceByItemInstance final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraEquipmentInstance*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_GetEquipmentInstanceByItemInstance) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_GetEquipmentInstanceByItemInstance");
static_assert(sizeof(LyraEquipmentManagerComponent_GetEquipmentInstanceByItemInstance) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_GetEquipmentInstanceByItemInstance");
static_assert(offsetof(LyraEquipmentManagerComponent_GetEquipmentInstanceByItemInstance, ItemInstance) == 0x000000, "Member 'LyraEquipmentManagerComponent_GetEquipmentInstanceByItemInstance::ItemInstance' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_GetEquipmentInstanceByItemInstance, ReturnValue) == 0x000008, "Member 'LyraEquipmentManagerComponent_GetEquipmentInstanceByItemInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.GetEquipmentInstancesOfType
// 0x0018 (0x0018 - 0x0000)
struct LyraEquipmentManagerComponent_GetEquipmentInstancesOfType final
{
public:
	TSubclassOf<class ULyraEquipmentInstance>     InstanceType;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULyraEquipmentInstance*>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_GetEquipmentInstancesOfType) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_GetEquipmentInstancesOfType");
static_assert(sizeof(LyraEquipmentManagerComponent_GetEquipmentInstancesOfType) == 0x000018, "Wrong size on LyraEquipmentManagerComponent_GetEquipmentInstancesOfType");
static_assert(offsetof(LyraEquipmentManagerComponent_GetEquipmentInstancesOfType, InstanceType) == 0x000000, "Member 'LyraEquipmentManagerComponent_GetEquipmentInstancesOfType::InstanceType' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_GetEquipmentInstancesOfType, ReturnValue) == 0x000008, "Member 'LyraEquipmentManagerComponent_GetEquipmentInstancesOfType::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.GetSlotOfEquipment
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_GetSlotOfEquipment final
{
public:
	const class ULyraEquipmentInstance*           Equipment;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraEquipmentManagerComponent_GetSlotOfEquipment) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_GetSlotOfEquipment");
static_assert(sizeof(LyraEquipmentManagerComponent_GetSlotOfEquipment) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_GetSlotOfEquipment");
static_assert(offsetof(LyraEquipmentManagerComponent_GetSlotOfEquipment, Equipment) == 0x000000, "Member 'LyraEquipmentManagerComponent_GetSlotOfEquipment::Equipment' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_GetSlotOfEquipment, ReturnValue) == 0x000008, "Member 'LyraEquipmentManagerComponent_GetSlotOfEquipment::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.IsEquipSlotEmpty
// 0x0002 (0x0002 - 0x0000)
struct LyraEquipmentManagerComponent_IsEquipSlotEmpty final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraEquipmentManagerComponent_IsEquipSlotEmpty) == 0x000001, "Wrong alignment on LyraEquipmentManagerComponent_IsEquipSlotEmpty");
static_assert(sizeof(LyraEquipmentManagerComponent_IsEquipSlotEmpty) == 0x000002, "Wrong size on LyraEquipmentManagerComponent_IsEquipSlotEmpty");
static_assert(offsetof(LyraEquipmentManagerComponent_IsEquipSlotEmpty, Slot) == 0x000000, "Member 'LyraEquipmentManagerComponent_IsEquipSlotEmpty::Slot' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_IsEquipSlotEmpty, ReturnValue) == 0x000001, "Member 'LyraEquipmentManagerComponent_IsEquipSlotEmpty::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraEquipmentManagerComponent.MatchSlotConfig
// 0x0010 (0x0010 - 0x0000)
struct LyraEquipmentManagerComponent_MatchSlotConfig final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 SlotType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSubType                              WeaponType;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDead;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraEquipmentManagerComponent_MatchSlotConfig) == 0x000008, "Wrong alignment on LyraEquipmentManagerComponent_MatchSlotConfig");
static_assert(sizeof(LyraEquipmentManagerComponent_MatchSlotConfig) == 0x000010, "Wrong size on LyraEquipmentManagerComponent_MatchSlotConfig");
static_assert(offsetof(LyraEquipmentManagerComponent_MatchSlotConfig, ItemInstance) == 0x000000, "Member 'LyraEquipmentManagerComponent_MatchSlotConfig::ItemInstance' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_MatchSlotConfig, SlotType) == 0x000008, "Member 'LyraEquipmentManagerComponent_MatchSlotConfig::SlotType' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_MatchSlotConfig, WeaponType) == 0x000009, "Member 'LyraEquipmentManagerComponent_MatchSlotConfig::WeaponType' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_MatchSlotConfig, bIgnoreDead) == 0x00000A, "Member 'LyraEquipmentManagerComponent_MatchSlotConfig::bIgnoreDead' has a wrong offset!");
static_assert(offsetof(LyraEquipmentManagerComponent_MatchSlotConfig, ReturnValue) == 0x00000B, "Member 'LyraEquipmentManagerComponent_MatchSlotConfig::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.AddBlockingLootSlot
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentManagerComponent_AddBlockingLootSlot final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_AddBlockingLootSlot) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_AddBlockingLootSlot");
static_assert(sizeof(TgfEquipmentManagerComponent_AddBlockingLootSlot) == 0x000001, "Wrong size on TgfEquipmentManagerComponent_AddBlockingLootSlot");
static_assert(offsetof(TgfEquipmentManagerComponent_AddBlockingLootSlot, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_AddBlockingLootSlot::Slot' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.AddDefaultWeapon
// 0x0018 (0x0018 - 0x0000)
struct TgfEquipmentManagerComponent_AddDefaultWeapon final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraInventoryItemInstance*             OutDropInstance;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentManagerComponent_AddDefaultWeapon) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_AddDefaultWeapon");
static_assert(sizeof(TgfEquipmentManagerComponent_AddDefaultWeapon) == 0x000018, "Wrong size on TgfEquipmentManagerComponent_AddDefaultWeapon");
static_assert(offsetof(TgfEquipmentManagerComponent_AddDefaultWeapon, ItemInstance) == 0x000000, "Member 'TgfEquipmentManagerComponent_AddDefaultWeapon::ItemInstance' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_AddDefaultWeapon, OutDropInstance) == 0x000008, "Member 'TgfEquipmentManagerComponent_AddDefaultWeapon::OutDropInstance' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_AddDefaultWeapon, ReturnValue) == 0x000010, "Member 'TgfEquipmentManagerComponent_AddDefaultWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.AddDeltaGearsetLevel
// 0x0008 (0x0008 - 0x0000)
struct TgfEquipmentManagerComponent_AddDeltaGearsetLevel final
{
public:
	int32                                         GearsetId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeltaLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_AddDeltaGearsetLevel) == 0x000004, "Wrong alignment on TgfEquipmentManagerComponent_AddDeltaGearsetLevel");
static_assert(sizeof(TgfEquipmentManagerComponent_AddDeltaGearsetLevel) == 0x000008, "Wrong size on TgfEquipmentManagerComponent_AddDeltaGearsetLevel");
static_assert(offsetof(TgfEquipmentManagerComponent_AddDeltaGearsetLevel, GearsetId) == 0x000000, "Member 'TgfEquipmentManagerComponent_AddDeltaGearsetLevel::GearsetId' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_AddDeltaGearsetLevel, DeltaLevel) == 0x000004, "Member 'TgfEquipmentManagerComponent_AddDeltaGearsetLevel::DeltaLevel' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.ChangeWeaponAnim
// 0x0018 (0x0018 - 0x0000)
struct TgfEquipmentManagerComponent_ChangeWeaponAnim final
{
public:
	ETgfWeaponChangeSlot                          Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTgfWeaponAnimDefinition>   AnimClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfWeaponAnimInstance*                 OldAnimInstance;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_ChangeWeaponAnim) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_ChangeWeaponAnim");
static_assert(sizeof(TgfEquipmentManagerComponent_ChangeWeaponAnim) == 0x000018, "Wrong size on TgfEquipmentManagerComponent_ChangeWeaponAnim");
static_assert(offsetof(TgfEquipmentManagerComponent_ChangeWeaponAnim, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_ChangeWeaponAnim::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ChangeWeaponAnim, AnimClass) == 0x000008, "Member 'TgfEquipmentManagerComponent_ChangeWeaponAnim::AnimClass' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ChangeWeaponAnim, OldAnimInstance) == 0x000010, "Member 'TgfEquipmentManagerComponent_ChangeWeaponAnim::OldAnimInstance' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.CheckAllEquipmentsVaild
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_CheckAllEquipmentsVaild final
{
public:
	TArray<class ULyraInventoryItemInstance*>     OutDropInstances;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_CheckAllEquipmentsVaild) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_CheckAllEquipmentsVaild");
static_assert(sizeof(TgfEquipmentManagerComponent_CheckAllEquipmentsVaild) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_CheckAllEquipmentsVaild");
static_assert(offsetof(TgfEquipmentManagerComponent_CheckAllEquipmentsVaild, OutDropInstances) == 0x000000, "Member 'TgfEquipmentManagerComponent_CheckAllEquipmentsVaild::OutDropInstances' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.CheckStackZeroUnequip
// 0x0002 (0x0002 - 0x0000)
struct TgfEquipmentManagerComponent_CheckStackZeroUnequip final
{
public:
	ETgfWeaponChangeSlot                          Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttemptToRefill;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_CheckStackZeroUnequip) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_CheckStackZeroUnequip");
static_assert(sizeof(TgfEquipmentManagerComponent_CheckStackZeroUnequip) == 0x000002, "Wrong size on TgfEquipmentManagerComponent_CheckStackZeroUnequip");
static_assert(offsetof(TgfEquipmentManagerComponent_CheckStackZeroUnequip, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_CheckStackZeroUnequip::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CheckStackZeroUnequip, bAttemptToRefill) == 0x000001, "Member 'TgfEquipmentManagerComponent_CheckStackZeroUnequip::bAttemptToRefill' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.CheckWeaponAnim
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_CheckWeaponAnim final
{
public:
	class UTgfWeaponAnimInstance*                 OldAnimInstance;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentManagerComponent_CheckWeaponAnim) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_CheckWeaponAnim");
static_assert(sizeof(TgfEquipmentManagerComponent_CheckWeaponAnim) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_CheckWeaponAnim");
static_assert(offsetof(TgfEquipmentManagerComponent_CheckWeaponAnim, OldAnimInstance) == 0x000000, "Member 'TgfEquipmentManagerComponent_CheckWeaponAnim::OldAnimInstance' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CheckWeaponAnim, ReturnValue) == 0x000008, "Member 'TgfEquipmentManagerComponent_CheckWeaponAnim::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.ConsumeItemByWeaponSlot
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          Slot;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreSwitch;                                      // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot");
static_assert(sizeof(TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot");
static_assert(offsetof(TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot, ItemDef) == 0x000000, "Member 'TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot::ItemDef' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot, Nums) == 0x000008, "Member 'TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot::Nums' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot, Slot) == 0x00000C, "Member 'TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot, IgnoreSwitch) == 0x00000D, "Member 'TgfEquipmentManagerComponent_ConsumeItemByWeaponSlot::IgnoreSwitch' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.ExchangeEquipsWithSlots
// 0x0002 (0x0002 - 0x0000)
struct TgfEquipmentManagerComponent_ExchangeEquipsWithSlots final
{
public:
	ETgfEquipSlot                                 Slot1;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot2;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_ExchangeEquipsWithSlots) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_ExchangeEquipsWithSlots");
static_assert(sizeof(TgfEquipmentManagerComponent_ExchangeEquipsWithSlots) == 0x000002, "Wrong size on TgfEquipmentManagerComponent_ExchangeEquipsWithSlots");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipsWithSlots, Slot1) == 0x000000, "Member 'TgfEquipmentManagerComponent_ExchangeEquipsWithSlots::Slot1' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipsWithSlots, Slot2) == 0x000001, "Member 'TgfEquipmentManagerComponent_ExchangeEquipsWithSlots::Slot2' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.ExchangeEquipToInventory
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_ExchangeEquipToInventory final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckInInventory;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentManagerComponent_ExchangeEquipToInventory) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_ExchangeEquipToInventory");
static_assert(sizeof(TgfEquipmentManagerComponent_ExchangeEquipToInventory) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_ExchangeEquipToInventory");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipToInventory, ItemInstance) == 0x000000, "Member 'TgfEquipmentManagerComponent_ExchangeEquipToInventory::ItemInstance' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipToInventory, Slot) == 0x000008, "Member 'TgfEquipmentManagerComponent_ExchangeEquipToInventory::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipToInventory, CheckInInventory) == 0x000009, "Member 'TgfEquipmentManagerComponent_ExchangeEquipToInventory::CheckInInventory' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.ExchangeEquipToInventoryFromLoot
// 0x0030 (0x0030 - 0x0000)
struct TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfEquipmentManagerComponent*          SourceEquipment;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryManagerComponent*          SourceInventory;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 SourceSlot;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PosX;                                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PosY;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot");
static_assert(sizeof(TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot) == 0x000030, "Wrong size on TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot, ItemInstance) == 0x000000, "Member 'TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot::ItemInstance' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot, Slot) == 0x000008, "Member 'TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot, SourceEquipment) == 0x000010, "Member 'TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot::SourceEquipment' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot, SourceInventory) == 0x000018, "Member 'TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot::SourceInventory' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot, SourceSlot) == 0x000020, "Member 'TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot::SourceSlot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot, PosX) == 0x000024, "Member 'TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot::PosX' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot, PosY) == 0x000028, "Member 'TgfEquipmentManagerComponent_ExchangeEquipToInventoryFromLoot::PosY' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.ExchangeWeaponSet
// 0x0004 (0x0004 - 0x0000)
struct TgfEquipmentManagerComponent_ExchangeWeaponSet final
{
public:
	ETgfEquipSlot                                 Set1RightSlot;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Set1LeftSlot;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Set2RightSlot;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Set2LeftSlot;                                      // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_ExchangeWeaponSet) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_ExchangeWeaponSet");
static_assert(sizeof(TgfEquipmentManagerComponent_ExchangeWeaponSet) == 0x000004, "Wrong size on TgfEquipmentManagerComponent_ExchangeWeaponSet");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeWeaponSet, Set1RightSlot) == 0x000000, "Member 'TgfEquipmentManagerComponent_ExchangeWeaponSet::Set1RightSlot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeWeaponSet, Set1LeftSlot) == 0x000001, "Member 'TgfEquipmentManagerComponent_ExchangeWeaponSet::Set1LeftSlot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeWeaponSet, Set2RightSlot) == 0x000002, "Member 'TgfEquipmentManagerComponent_ExchangeWeaponSet::Set2RightSlot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_ExchangeWeaponSet, Set2LeftSlot) == 0x000003, "Member 'TgfEquipmentManagerComponent_ExchangeWeaponSet::Set2LeftSlot' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetAllEquipments
// 0x0018 (0x0018 - 0x0000)
struct TgfEquipmentManagerComponent_GetAllEquipments final
{
public:
	bool                                          bIgnoreAdditional;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTgfEquipmentInstance*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetAllEquipments) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetAllEquipments");
static_assert(sizeof(TgfEquipmentManagerComponent_GetAllEquipments) == 0x000018, "Wrong size on TgfEquipmentManagerComponent_GetAllEquipments");
static_assert(offsetof(TgfEquipmentManagerComponent_GetAllEquipments, bIgnoreAdditional) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetAllEquipments::bIgnoreAdditional' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetAllEquipments, ReturnValue) == 0x000008, "Member 'TgfEquipmentManagerComponent_GetAllEquipments::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetAutoFillWeaponQuility
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_GetAutoFillWeaponQuility final
{
public:
	TArray<ETgfEquipQuality>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetAutoFillWeaponQuility) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetAutoFillWeaponQuility");
static_assert(sizeof(TgfEquipmentManagerComponent_GetAutoFillWeaponQuility) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_GetAutoFillWeaponQuility");
static_assert(offsetof(TgfEquipmentManagerComponent_GetAutoFillWeaponQuility, ReturnValue) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetAutoFillWeaponQuility::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.HasZeroDurabilityEquip
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentManagerComponent_HasZeroDurabilityEquip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_HasZeroDurabilityEquip) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_HasZeroDurabilityEquip");
static_assert(sizeof(TgfEquipmentManagerComponent_HasZeroDurabilityEquip) == 0x000001, "Wrong size on TgfEquipmentManagerComponent_HasZeroDurabilityEquip");
static_assert(offsetof(TgfEquipmentManagerComponent_HasZeroDurabilityEquip, ReturnValue) == 0x000000, "Member 'TgfEquipmentManagerComponent_HasZeroDurabilityEquip::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.OnRep_CurrentWeaponSlot
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentManagerComponent_OnRep_CurrentWeaponSlot final
{
public:
	ETgfWeaponChangeSlot                          OldWeaponSlot;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_OnRep_CurrentWeaponSlot) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_OnRep_CurrentWeaponSlot");
static_assert(sizeof(TgfEquipmentManagerComponent_OnRep_CurrentWeaponSlot) == 0x000001, "Wrong size on TgfEquipmentManagerComponent_OnRep_CurrentWeaponSlot");
static_assert(offsetof(TgfEquipmentManagerComponent_OnRep_CurrentWeaponSlot, OldWeaponSlot) == 0x000000, "Member 'TgfEquipmentManagerComponent_OnRep_CurrentWeaponSlot::OldWeaponSlot' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.RemoveEquipByItemInstance
// 0x0008 (0x0008 - 0x0000)
struct TgfEquipmentManagerComponent_RemoveEquipByItemInstance final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_RemoveEquipByItemInstance) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_RemoveEquipByItemInstance");
static_assert(sizeof(TgfEquipmentManagerComponent_RemoveEquipByItemInstance) == 0x000008, "Wrong size on TgfEquipmentManagerComponent_RemoveEquipByItemInstance");
static_assert(offsetof(TgfEquipmentManagerComponent_RemoveEquipByItemInstance, ItemInstance) == 0x000000, "Member 'TgfEquipmentManagerComponent_RemoveEquipByItemInstance::ItemInstance' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.RemoveEquipBySlot
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentManagerComponent_RemoveEquipBySlot final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_RemoveEquipBySlot) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_RemoveEquipBySlot");
static_assert(sizeof(TgfEquipmentManagerComponent_RemoveEquipBySlot) == 0x000001, "Wrong size on TgfEquipmentManagerComponent_RemoveEquipBySlot");
static_assert(offsetof(TgfEquipmentManagerComponent_RemoveEquipBySlot, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_RemoveEquipBySlot::Slot' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.RemoveEquipToInventory
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentManagerComponent_RemoveEquipToInventory final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_RemoveEquipToInventory) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_RemoveEquipToInventory");
static_assert(sizeof(TgfEquipmentManagerComponent_RemoveEquipToInventory) == 0x000001, "Wrong size on TgfEquipmentManagerComponent_RemoveEquipToInventory");
static_assert(offsetof(TgfEquipmentManagerComponent_RemoveEquipToInventory, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_RemoveEquipToInventory::Slot' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.SetActiveAdditionalSlot
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentManagerComponent_SetActiveAdditionalSlot final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_SetActiveAdditionalSlot) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_SetActiveAdditionalSlot");
static_assert(sizeof(TgfEquipmentManagerComponent_SetActiveAdditionalSlot) == 0x000001, "Wrong size on TgfEquipmentManagerComponent_SetActiveAdditionalSlot");
static_assert(offsetof(TgfEquipmentManagerComponent_SetActiveAdditionalSlot, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_SetActiveAdditionalSlot::Slot' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.SetAutoFillWeaponQuality
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_SetAutoFillWeaponQuality final
{
public:
	TArray<ETgfEquipQuality>                      QualityList;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_SetAutoFillWeaponQuality) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_SetAutoFillWeaponQuality");
static_assert(sizeof(TgfEquipmentManagerComponent_SetAutoFillWeaponQuality) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_SetAutoFillWeaponQuality");
static_assert(offsetof(TgfEquipmentManagerComponent_SetAutoFillWeaponQuality, QualityList) == 0x000000, "Member 'TgfEquipmentManagerComponent_SetAutoFillWeaponQuality::QualityList' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.SetEquipmentVisible
// 0x0004 (0x0004 - 0x0000)
struct TgfEquipmentManagerComponent_SetEquipmentVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowInClient;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAll;                                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponHandType                            RestrictWeapon;                                    // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_SetEquipmentVisible) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_SetEquipmentVisible");
static_assert(sizeof(TgfEquipmentManagerComponent_SetEquipmentVisible) == 0x000004, "Wrong size on TgfEquipmentManagerComponent_SetEquipmentVisible");
static_assert(offsetof(TgfEquipmentManagerComponent_SetEquipmentVisible, bVisible) == 0x000000, "Member 'TgfEquipmentManagerComponent_SetEquipmentVisible::bVisible' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_SetEquipmentVisible, AllowInClient) == 0x000001, "Member 'TgfEquipmentManagerComponent_SetEquipmentVisible::AllowInClient' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_SetEquipmentVisible, bForceAll) == 0x000002, "Member 'TgfEquipmentManagerComponent_SetEquipmentVisible::bForceAll' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_SetEquipmentVisible, RestrictWeapon) == 0x000003, "Member 'TgfEquipmentManagerComponent_SetEquipmentVisible::RestrictWeapon' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.SwitchWeaponSlot
// 0x0002 (0x0002 - 0x0000)
struct TgfEquipmentManagerComponent_SwitchWeaponSlot final
{
public:
	ETgfWeaponChangeSlot                          Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedForce;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_SwitchWeaponSlot) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_SwitchWeaponSlot");
static_assert(sizeof(TgfEquipmentManagerComponent_SwitchWeaponSlot) == 0x000002, "Wrong size on TgfEquipmentManagerComponent_SwitchWeaponSlot");
static_assert(offsetof(TgfEquipmentManagerComponent_SwitchWeaponSlot, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_SwitchWeaponSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_SwitchWeaponSlot, NeedForce) == 0x000001, "Member 'TgfEquipmentManagerComponent_SwitchWeaponSlot::NeedForce' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.CanConsumeItemByWeaponSlot
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          Slot;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot");
static_assert(sizeof(TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot");
static_assert(offsetof(TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot, ItemDef) == 0x000000, "Member 'TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot::ItemDef' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot, Nums) == 0x000008, "Member 'TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot::Nums' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot, Slot) == 0x00000C, "Member 'TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot, ReturnValue) == 0x00000D, "Member 'TgfEquipmentManagerComponent_CanConsumeItemByWeaponSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.CanExchangeEquipsWithSlots
// 0x0003 (0x0003 - 0x0000)
struct TgfEquipmentManagerComponent_CanExchangeEquipsWithSlots final
{
public:
	ETgfEquipSlot                                 Slot1;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot2;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_CanExchangeEquipsWithSlots) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_CanExchangeEquipsWithSlots");
static_assert(sizeof(TgfEquipmentManagerComponent_CanExchangeEquipsWithSlots) == 0x000003, "Wrong size on TgfEquipmentManagerComponent_CanExchangeEquipsWithSlots");
static_assert(offsetof(TgfEquipmentManagerComponent_CanExchangeEquipsWithSlots, Slot1) == 0x000000, "Member 'TgfEquipmentManagerComponent_CanExchangeEquipsWithSlots::Slot1' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CanExchangeEquipsWithSlots, Slot2) == 0x000001, "Member 'TgfEquipmentManagerComponent_CanExchangeEquipsWithSlots::Slot2' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CanExchangeEquipsWithSlots, ReturnValue) == 0x000002, "Member 'TgfEquipmentManagerComponent_CanExchangeEquipsWithSlots::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.CanExchangeEquipToInventory
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_CanExchangeEquipToInventory final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckInInventory;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentManagerComponent_CanExchangeEquipToInventory) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_CanExchangeEquipToInventory");
static_assert(sizeof(TgfEquipmentManagerComponent_CanExchangeEquipToInventory) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_CanExchangeEquipToInventory");
static_assert(offsetof(TgfEquipmentManagerComponent_CanExchangeEquipToInventory, ItemInstance) == 0x000000, "Member 'TgfEquipmentManagerComponent_CanExchangeEquipToInventory::ItemInstance' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CanExchangeEquipToInventory, Slot) == 0x000008, "Member 'TgfEquipmentManagerComponent_CanExchangeEquipToInventory::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CanExchangeEquipToInventory, CheckInInventory) == 0x000009, "Member 'TgfEquipmentManagerComponent_CanExchangeEquipToInventory::CheckInInventory' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CanExchangeEquipToInventory, ReturnValue) == 0x00000A, "Member 'TgfEquipmentManagerComponent_CanExchangeEquipToInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.CanLootUseEquip
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_CanLootUseEquip final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentManagerComponent_CanLootUseEquip) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_CanLootUseEquip");
static_assert(sizeof(TgfEquipmentManagerComponent_CanLootUseEquip) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_CanLootUseEquip");
static_assert(offsetof(TgfEquipmentManagerComponent_CanLootUseEquip, ItemInstance) == 0x000000, "Member 'TgfEquipmentManagerComponent_CanLootUseEquip::ItemInstance' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CanLootUseEquip, Slot) == 0x000008, "Member 'TgfEquipmentManagerComponent_CanLootUseEquip::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CanLootUseEquip, ReturnValue) == 0x000009, "Member 'TgfEquipmentManagerComponent_CanLootUseEquip::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.CanRemoveEquipToInventory
// 0x0002 (0x0002 - 0x0000)
struct TgfEquipmentManagerComponent_CanRemoveEquipToInventory final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_CanRemoveEquipToInventory) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_CanRemoveEquipToInventory");
static_assert(sizeof(TgfEquipmentManagerComponent_CanRemoveEquipToInventory) == 0x000002, "Wrong size on TgfEquipmentManagerComponent_CanRemoveEquipToInventory");
static_assert(offsetof(TgfEquipmentManagerComponent_CanRemoveEquipToInventory, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_CanRemoveEquipToInventory::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_CanRemoveEquipToInventory, ReturnValue) == 0x000001, "Member 'TgfEquipmentManagerComponent_CanRemoveEquipToInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetActiveAdditionalSlot
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentManagerComponent_GetActiveAdditionalSlot final
{
public:
	ETgfEquipSlot                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetActiveAdditionalSlot) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_GetActiveAdditionalSlot");
static_assert(sizeof(TgfEquipmentManagerComponent_GetActiveAdditionalSlot) == 0x000001, "Wrong size on TgfEquipmentManagerComponent_GetActiveAdditionalSlot");
static_assert(offsetof(TgfEquipmentManagerComponent_GetActiveAdditionalSlot, ReturnValue) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetActiveAdditionalSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetAnimWeaponInstances
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_GetAnimWeaponInstances final
{
public:
	class ULyraEquipmentInstance*                 OutRightWeapon;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraEquipmentInstance*                 OutLeftWeapon;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetAnimWeaponInstances) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetAnimWeaponInstances");
static_assert(sizeof(TgfEquipmentManagerComponent_GetAnimWeaponInstances) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_GetAnimWeaponInstances");
static_assert(offsetof(TgfEquipmentManagerComponent_GetAnimWeaponInstances, OutRightWeapon) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetAnimWeaponInstances::OutRightWeapon' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetAnimWeaponInstances, OutLeftWeapon) == 0x000008, "Member 'TgfEquipmentManagerComponent_GetAnimWeaponInstances::OutLeftWeapon' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetAnimWeaponSlot
// 0x0018 (0x0018 - 0x0000)
struct TgfEquipmentManagerComponent_GetAnimWeaponSlot final
{
public:
	struct FTgfWeaponSlot                         ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetAnimWeaponSlot) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetAnimWeaponSlot");
static_assert(sizeof(TgfEquipmentManagerComponent_GetAnimWeaponSlot) == 0x000018, "Wrong size on TgfEquipmentManagerComponent_GetAnimWeaponSlot");
static_assert(offsetof(TgfEquipmentManagerComponent_GetAnimWeaponSlot, ReturnValue) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetAnimWeaponSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetChangeSlotByEquipmentInstance
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_GetChangeSlotByEquipmentInstance final
{
public:
	class ULyraEquipmentInstance*                 WeaponInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentManagerComponent_GetChangeSlotByEquipmentInstance) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetChangeSlotByEquipmentInstance");
static_assert(sizeof(TgfEquipmentManagerComponent_GetChangeSlotByEquipmentInstance) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_GetChangeSlotByEquipmentInstance");
static_assert(offsetof(TgfEquipmentManagerComponent_GetChangeSlotByEquipmentInstance, WeaponInstance) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetChangeSlotByEquipmentInstance::WeaponInstance' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetChangeSlotByEquipmentInstance, ReturnValue) == 0x000008, "Member 'TgfEquipmentManagerComponent_GetChangeSlotByEquipmentInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetChangeSlotByInventoryInstance
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_GetChangeSlotByInventoryInstance final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentManagerComponent_GetChangeSlotByInventoryInstance) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetChangeSlotByInventoryInstance");
static_assert(sizeof(TgfEquipmentManagerComponent_GetChangeSlotByInventoryInstance) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_GetChangeSlotByInventoryInstance");
static_assert(offsetof(TgfEquipmentManagerComponent_GetChangeSlotByInventoryInstance, ItemInstance) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetChangeSlotByInventoryInstance::ItemInstance' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetChangeSlotByInventoryInstance, ReturnValue) == 0x000008, "Member 'TgfEquipmentManagerComponent_GetChangeSlotByInventoryInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetCurrentWeaponAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct TgfEquipmentManagerComponent_GetCurrentWeaponAnimInstance final
{
public:
	class UTgfWeaponAnimInstance*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetCurrentWeaponAnimInstance) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetCurrentWeaponAnimInstance");
static_assert(sizeof(TgfEquipmentManagerComponent_GetCurrentWeaponAnimInstance) == 0x000008, "Wrong size on TgfEquipmentManagerComponent_GetCurrentWeaponAnimInstance");
static_assert(offsetof(TgfEquipmentManagerComponent_GetCurrentWeaponAnimInstance, ReturnValue) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetCurrentWeaponAnimInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetCurrentWeaponInstances
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_GetCurrentWeaponInstances final
{
public:
	class ULyraEquipmentInstance*                 OutRightWeapon;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraEquipmentInstance*                 OutLeftWeapon;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetCurrentWeaponInstances) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetCurrentWeaponInstances");
static_assert(sizeof(TgfEquipmentManagerComponent_GetCurrentWeaponInstances) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_GetCurrentWeaponInstances");
static_assert(offsetof(TgfEquipmentManagerComponent_GetCurrentWeaponInstances, OutRightWeapon) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetCurrentWeaponInstances::OutRightWeapon' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetCurrentWeaponInstances, OutLeftWeapon) == 0x000008, "Member 'TgfEquipmentManagerComponent_GetCurrentWeaponInstances::OutLeftWeapon' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetCurrentWeaponSlot
// 0x0018 (0x0018 - 0x0000)
struct TgfEquipmentManagerComponent_GetCurrentWeaponSlot final
{
public:
	struct FTgfWeaponSlot                         ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetCurrentWeaponSlot) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetCurrentWeaponSlot");
static_assert(sizeof(TgfEquipmentManagerComponent_GetCurrentWeaponSlot) == 0x000018, "Wrong size on TgfEquipmentManagerComponent_GetCurrentWeaponSlot");
static_assert(offsetof(TgfEquipmentManagerComponent_GetCurrentWeaponSlot, ReturnValue) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetCurrentWeaponSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetEquipBySlot
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_GetEquipBySlot final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraEquipmentInstance*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetEquipBySlot) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetEquipBySlot");
static_assert(sizeof(TgfEquipmentManagerComponent_GetEquipBySlot) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_GetEquipBySlot");
static_assert(offsetof(TgfEquipmentManagerComponent_GetEquipBySlot, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetEquipBySlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetEquipBySlot, IgnoreIndex) == 0x000004, "Member 'TgfEquipmentManagerComponent_GetEquipBySlot::IgnoreIndex' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetEquipBySlot, ReturnValue) == 0x000008, "Member 'TgfEquipmentManagerComponent_GetEquipBySlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetGearsetLevel
// 0x0008 (0x0008 - 0x0000)
struct TgfEquipmentManagerComponent_GetGearsetLevel final
{
public:
	int32                                         GearsetId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetGearsetLevel) == 0x000004, "Wrong alignment on TgfEquipmentManagerComponent_GetGearsetLevel");
static_assert(sizeof(TgfEquipmentManagerComponent_GetGearsetLevel) == 0x000008, "Wrong size on TgfEquipmentManagerComponent_GetGearsetLevel");
static_assert(offsetof(TgfEquipmentManagerComponent_GetGearsetLevel, GearsetId) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetGearsetLevel::GearsetId' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetGearsetLevel, ReturnValue) == 0x000004, "Member 'TgfEquipmentManagerComponent_GetGearsetLevel::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetLastWeaponInstances
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_GetLastWeaponInstances final
{
public:
	class ULyraEquipmentInstance*                 OutRightWeapon;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraEquipmentInstance*                 OutLeftWeapon;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetLastWeaponInstances) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetLastWeaponInstances");
static_assert(sizeof(TgfEquipmentManagerComponent_GetLastWeaponInstances) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_GetLastWeaponInstances");
static_assert(offsetof(TgfEquipmentManagerComponent_GetLastWeaponInstances, OutRightWeapon) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetLastWeaponInstances::OutRightWeapon' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetLastWeaponInstances, OutLeftWeapon) == 0x000008, "Member 'TgfEquipmentManagerComponent_GetLastWeaponInstances::OutLeftWeapon' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetSlotWeaponInstances
// 0x0018 (0x0018 - 0x0000)
struct TgfEquipmentManagerComponent_GetSlotWeaponInstances final
{
public:
	ETgfWeaponChangeSlot                          Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraEquipmentInstance*                 OutRightWeapon;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraEquipmentInstance*                 OutLeftWeapon;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetSlotWeaponInstances) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetSlotWeaponInstances");
static_assert(sizeof(TgfEquipmentManagerComponent_GetSlotWeaponInstances) == 0x000018, "Wrong size on TgfEquipmentManagerComponent_GetSlotWeaponInstances");
static_assert(offsetof(TgfEquipmentManagerComponent_GetSlotWeaponInstances, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetSlotWeaponInstances::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetSlotWeaponInstances, OutRightWeapon) == 0x000008, "Member 'TgfEquipmentManagerComponent_GetSlotWeaponInstances::OutRightWeapon' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetSlotWeaponInstances, OutLeftWeapon) == 0x000010, "Member 'TgfEquipmentManagerComponent_GetSlotWeaponInstances::OutLeftWeapon' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetWeaponElement
// 0x0002 (0x0002 - 0x0000)
struct TgfEquipmentManagerComponent_GetWeaponElement final
{
public:
	ETgfUseAttackType                             AttackType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfBattleElement                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetWeaponElement) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_GetWeaponElement");
static_assert(sizeof(TgfEquipmentManagerComponent_GetWeaponElement) == 0x000002, "Wrong size on TgfEquipmentManagerComponent_GetWeaponElement");
static_assert(offsetof(TgfEquipmentManagerComponent_GetWeaponElement, AttackType) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetWeaponElement::AttackType' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetWeaponElement, ReturnValue) == 0x000001, "Member 'TgfEquipmentManagerComponent_GetWeaponElement::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetWeaponInspectMontage
// 0x0028 (0x0028 - 0x0000)
struct TgfEquipmentManagerComponent_GetWeaponInspectMontage final
{
public:
	struct FGameplayTagContainer                  CosmeticTags;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetWeaponInspectMontage) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetWeaponInspectMontage");
static_assert(sizeof(TgfEquipmentManagerComponent_GetWeaponInspectMontage) == 0x000028, "Wrong size on TgfEquipmentManagerComponent_GetWeaponInspectMontage");
static_assert(offsetof(TgfEquipmentManagerComponent_GetWeaponInspectMontage, CosmeticTags) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetWeaponInspectMontage::CosmeticTags' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetWeaponInspectMontage, ReturnValue) == 0x000020, "Member 'TgfEquipmentManagerComponent_GetWeaponInspectMontage::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.GetWeaponInstanceByAnother
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_GetWeaponInstanceByAnother final
{
public:
	class ULyraEquipmentInstance*                 WeaponInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraEquipmentInstance*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_GetWeaponInstanceByAnother) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_GetWeaponInstanceByAnother");
static_assert(sizeof(TgfEquipmentManagerComponent_GetWeaponInstanceByAnother) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_GetWeaponInstanceByAnother");
static_assert(offsetof(TgfEquipmentManagerComponent_GetWeaponInstanceByAnother, WeaponInstance) == 0x000000, "Member 'TgfEquipmentManagerComponent_GetWeaponInstanceByAnother::WeaponInstance' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_GetWeaponInstanceByAnother, ReturnValue) == 0x000008, "Member 'TgfEquipmentManagerComponent_GetWeaponInstanceByAnother::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.IsBothWeaponHidden
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentManagerComponent_IsBothWeaponHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_IsBothWeaponHidden) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_IsBothWeaponHidden");
static_assert(sizeof(TgfEquipmentManagerComponent_IsBothWeaponHidden) == 0x000001, "Wrong size on TgfEquipmentManagerComponent_IsBothWeaponHidden");
static_assert(offsetof(TgfEquipmentManagerComponent_IsBothWeaponHidden, ReturnValue) == 0x000000, "Member 'TgfEquipmentManagerComponent_IsBothWeaponHidden::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.IsLeftWeaponHidden
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentManagerComponent_IsLeftWeaponHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_IsLeftWeaponHidden) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_IsLeftWeaponHidden");
static_assert(sizeof(TgfEquipmentManagerComponent_IsLeftWeaponHidden) == 0x000001, "Wrong size on TgfEquipmentManagerComponent_IsLeftWeaponHidden");
static_assert(offsetof(TgfEquipmentManagerComponent_IsLeftWeaponHidden, ReturnValue) == 0x000000, "Member 'TgfEquipmentManagerComponent_IsLeftWeaponHidden::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.IsLootSlotBlocking
// 0x0002 (0x0002 - 0x0000)
struct TgfEquipmentManagerComponent_IsLootSlotBlocking final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_IsLootSlotBlocking) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_IsLootSlotBlocking");
static_assert(sizeof(TgfEquipmentManagerComponent_IsLootSlotBlocking) == 0x000002, "Wrong size on TgfEquipmentManagerComponent_IsLootSlotBlocking");
static_assert(offsetof(TgfEquipmentManagerComponent_IsLootSlotBlocking, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_IsLootSlotBlocking::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_IsLootSlotBlocking, ReturnValue) == 0x000001, "Member 'TgfEquipmentManagerComponent_IsLootSlotBlocking::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.IsRightWeaponHidden
// 0x0001 (0x0001 - 0x0000)
struct TgfEquipmentManagerComponent_IsRightWeaponHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_IsRightWeaponHidden) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_IsRightWeaponHidden");
static_assert(sizeof(TgfEquipmentManagerComponent_IsRightWeaponHidden) == 0x000001, "Wrong size on TgfEquipmentManagerComponent_IsRightWeaponHidden");
static_assert(offsetof(TgfEquipmentManagerComponent_IsRightWeaponHidden, ReturnValue) == 0x000000, "Member 'TgfEquipmentManagerComponent_IsRightWeaponHidden::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.IsWeaponSlotEmpty
// 0x0002 (0x0002 - 0x0000)
struct TgfEquipmentManagerComponent_IsWeaponSlotEmpty final
{
public:
	ETgfWeaponChangeSlot                          Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfEquipmentManagerComponent_IsWeaponSlotEmpty) == 0x000001, "Wrong alignment on TgfEquipmentManagerComponent_IsWeaponSlotEmpty");
static_assert(sizeof(TgfEquipmentManagerComponent_IsWeaponSlotEmpty) == 0x000002, "Wrong size on TgfEquipmentManagerComponent_IsWeaponSlotEmpty");
static_assert(offsetof(TgfEquipmentManagerComponent_IsWeaponSlotEmpty, Slot) == 0x000000, "Member 'TgfEquipmentManagerComponent_IsWeaponSlotEmpty::Slot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_IsWeaponSlotEmpty, ReturnValue) == 0x000001, "Member 'TgfEquipmentManagerComponent_IsWeaponSlotEmpty::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfEquipmentManagerComponent.MatchAdditionalSlot
// 0x0010 (0x0010 - 0x0000)
struct TgfEquipmentManagerComponent_MatchAdditionalSlot final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 OutSlot;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseConfig;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfEquipmentManagerComponent_MatchAdditionalSlot) == 0x000008, "Wrong alignment on TgfEquipmentManagerComponent_MatchAdditionalSlot");
static_assert(sizeof(TgfEquipmentManagerComponent_MatchAdditionalSlot) == 0x000010, "Wrong size on TgfEquipmentManagerComponent_MatchAdditionalSlot");
static_assert(offsetof(TgfEquipmentManagerComponent_MatchAdditionalSlot, ItemInstance) == 0x000000, "Member 'TgfEquipmentManagerComponent_MatchAdditionalSlot::ItemInstance' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_MatchAdditionalSlot, OutSlot) == 0x000008, "Member 'TgfEquipmentManagerComponent_MatchAdditionalSlot::OutSlot' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_MatchAdditionalSlot, bUseConfig) == 0x000009, "Member 'TgfEquipmentManagerComponent_MatchAdditionalSlot::bUseConfig' has a wrong offset!");
static_assert(offsetof(TgfEquipmentManagerComponent_MatchAdditionalSlot, ReturnValue) == 0x00000A, "Member 'TgfEquipmentManagerComponent_MatchAdditionalSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameFollowUIItem.OnStartByMessage
// 0x0020 (0x0020 - 0x0000)
struct TgfGameFollowUIItem_OnStartByMessage final
{
public:
	struct FHurtNotifyMessage                     Message;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameFollowUIItem_OnStartByMessage) == 0x000008, "Wrong alignment on TgfGameFollowUIItem_OnStartByMessage");
static_assert(sizeof(TgfGameFollowUIItem_OnStartByMessage) == 0x000020, "Wrong size on TgfGameFollowUIItem_OnStartByMessage");
static_assert(offsetof(TgfGameFollowUIItem_OnStartByMessage, Message) == 0x000000, "Member 'TgfGameFollowUIItem_OnStartByMessage::Message' has a wrong offset!");

// Function LyraGame.TgfGameFollowUIManagerComponent.CreateFollowUIItem
// 0x0020 (0x0020 - 0x0000)
struct TgfGameFollowUIManagerComponent_CreateFollowUIItem final
{
public:
	struct FVector                                InWorldPos;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfGameFollowUIItem*                   ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameFollowUIManagerComponent_CreateFollowUIItem) == 0x000008, "Wrong alignment on TgfGameFollowUIManagerComponent_CreateFollowUIItem");
static_assert(sizeof(TgfGameFollowUIManagerComponent_CreateFollowUIItem) == 0x000020, "Wrong size on TgfGameFollowUIManagerComponent_CreateFollowUIItem");
static_assert(offsetof(TgfGameFollowUIManagerComponent_CreateFollowUIItem, InWorldPos) == 0x000000, "Member 'TgfGameFollowUIManagerComponent_CreateFollowUIItem::InWorldPos' has a wrong offset!");
static_assert(offsetof(TgfGameFollowUIManagerComponent_CreateFollowUIItem, ReturnValue) == 0x000018, "Member 'TgfGameFollowUIManagerComponent_CreateFollowUIItem::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility_Rebirth.CheckEquipmentsVaild
// 0x0010 (0x0010 - 0x0000)
struct TgfGameplayAbility_Rebirth_CheckEquipmentsVaild final
{
public:
	TArray<class ULyraInventoryItemInstance*>     DropItems;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_Rebirth_CheckEquipmentsVaild) == 0x000008, "Wrong alignment on TgfGameplayAbility_Rebirth_CheckEquipmentsVaild");
static_assert(sizeof(TgfGameplayAbility_Rebirth_CheckEquipmentsVaild) == 0x000010, "Wrong size on TgfGameplayAbility_Rebirth_CheckEquipmentsVaild");
static_assert(offsetof(TgfGameplayAbility_Rebirth_CheckEquipmentsVaild, DropItems) == 0x000000, "Member 'TgfGameplayAbility_Rebirth_CheckEquipmentsVaild::DropItems' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility_Rebirth.CheckWeaponSlot
// 0x0010 (0x0010 - 0x0000)
struct TgfGameplayAbility_Rebirth_CheckWeaponSlot final
{
public:
	class UTgfInventoryItemInstance*              Param_DropItem;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfWeaponChangeSlot                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAbility_Rebirth_CheckWeaponSlot) == 0x000008, "Wrong alignment on TgfGameplayAbility_Rebirth_CheckWeaponSlot");
static_assert(sizeof(TgfGameplayAbility_Rebirth_CheckWeaponSlot) == 0x000010, "Wrong size on TgfGameplayAbility_Rebirth_CheckWeaponSlot");
static_assert(offsetof(TgfGameplayAbility_Rebirth_CheckWeaponSlot, Param_DropItem) == 0x000000, "Member 'TgfGameplayAbility_Rebirth_CheckWeaponSlot::Param_DropItem' has a wrong offset!");
static_assert(offsetof(TgfGameplayAbility_Rebirth_CheckWeaponSlot, ReturnValue) == 0x000008, "Member 'TgfGameplayAbility_Rebirth_CheckWeaponSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility_Rebirth.DropItem
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAbility_Rebirth_DropItem final
{
public:
	class UTgfInventoryItemInstance*              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_Rebirth_DropItem) == 0x000008, "Wrong alignment on TgfGameplayAbility_Rebirth_DropItem");
static_assert(sizeof(TgfGameplayAbility_Rebirth_DropItem) == 0x000008, "Wrong size on TgfGameplayAbility_Rebirth_DropItem");
static_assert(offsetof(TgfGameplayAbility_Rebirth_DropItem, Item) == 0x000000, "Member 'TgfGameplayAbility_Rebirth_DropItem::Item' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.AddIgnoreTarget
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAura_AddIgnoreTarget final
{
public:
	class ALyraCharacter*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_AddIgnoreTarget) == 0x000008, "Wrong alignment on TgfGameplayAura_AddIgnoreTarget");
static_assert(sizeof(TgfGameplayAura_AddIgnoreTarget) == 0x000008, "Wrong size on TgfGameplayAura_AddIgnoreTarget");
static_assert(offsetof(TgfGameplayAura_AddIgnoreTarget, Target) == 0x000000, "Member 'TgfGameplayAura_AddIgnoreTarget::Target' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.BP_NeedApplyEffect
// 0x0010 (0x0010 - 0x0000)
struct TgfGameplayAura_BP_NeedApplyEffect final
{
public:
	class ALyraCharacter*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayAura_BP_NeedApplyEffect) == 0x000008, "Wrong alignment on TgfGameplayAura_BP_NeedApplyEffect");
static_assert(sizeof(TgfGameplayAura_BP_NeedApplyEffect) == 0x000010, "Wrong size on TgfGameplayAura_BP_NeedApplyEffect");
static_assert(offsetof(TgfGameplayAura_BP_NeedApplyEffect, Target) == 0x000000, "Member 'TgfGameplayAura_BP_NeedApplyEffect::Target' has a wrong offset!");
static_assert(offsetof(TgfGameplayAura_BP_NeedApplyEffect, ReturnValue) == 0x000008, "Member 'TgfGameplayAura_BP_NeedApplyEffect::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.BroadCastGameplayMessage
// 0x0018 (0x0018 - 0x0000)
struct TgfGameplayAura_BroadCastGameplayMessage final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAuraMessageVerb                       Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_BroadCastGameplayMessage) == 0x000008, "Wrong alignment on TgfGameplayAura_BroadCastGameplayMessage");
static_assert(sizeof(TgfGameplayAura_BroadCastGameplayMessage) == 0x000018, "Wrong size on TgfGameplayAura_BroadCastGameplayMessage");
static_assert(offsetof(TgfGameplayAura_BroadCastGameplayMessage, Tag) == 0x000000, "Member 'TgfGameplayAura_BroadCastGameplayMessage::Tag' has a wrong offset!");
static_assert(offsetof(TgfGameplayAura_BroadCastGameplayMessage, Message) == 0x000008, "Member 'TgfGameplayAura_BroadCastGameplayMessage::Message' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.GetCapsuleRadius
// 0x0004 (0x0004 - 0x0000)
struct TgfGameplayAura_GetCapsuleRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_GetCapsuleRadius) == 0x000004, "Wrong alignment on TgfGameplayAura_GetCapsuleRadius");
static_assert(sizeof(TgfGameplayAura_GetCapsuleRadius) == 0x000004, "Wrong size on TgfGameplayAura_GetCapsuleRadius");
static_assert(offsetof(TgfGameplayAura_GetCapsuleRadius, ReturnValue) == 0x000000, "Member 'TgfGameplayAura_GetCapsuleRadius::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.K2_OnAuraAdded
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAura_K2_OnAuraAdded final
{
public:
	class UTgfAuraManagerComponent*               AuraManagerComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_K2_OnAuraAdded) == 0x000008, "Wrong alignment on TgfGameplayAura_K2_OnAuraAdded");
static_assert(sizeof(TgfGameplayAura_K2_OnAuraAdded) == 0x000008, "Wrong size on TgfGameplayAura_K2_OnAuraAdded");
static_assert(offsetof(TgfGameplayAura_K2_OnAuraAdded, AuraManagerComponent) == 0x000000, "Member 'TgfGameplayAura_K2_OnAuraAdded::AuraManagerComponent' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.K2_OnAuraRemoved
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAura_K2_OnAuraRemoved final
{
public:
	class UTgfAuraManagerComponent*               AuraManagerComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_K2_OnAuraRemoved) == 0x000008, "Wrong alignment on TgfGameplayAura_K2_OnAuraRemoved");
static_assert(sizeof(TgfGameplayAura_K2_OnAuraRemoved) == 0x000008, "Wrong size on TgfGameplayAura_K2_OnAuraRemoved");
static_assert(offsetof(TgfGameplayAura_K2_OnAuraRemoved, AuraManagerComponent) == 0x000000, "Member 'TgfGameplayAura_K2_OnAuraRemoved::AuraManagerComponent' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.K2_OnCharacterEnter
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAura_K2_OnCharacterEnter final
{
public:
	class ALyraCharacter*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_K2_OnCharacterEnter) == 0x000008, "Wrong alignment on TgfGameplayAura_K2_OnCharacterEnter");
static_assert(sizeof(TgfGameplayAura_K2_OnCharacterEnter) == 0x000008, "Wrong size on TgfGameplayAura_K2_OnCharacterEnter");
static_assert(offsetof(TgfGameplayAura_K2_OnCharacterEnter, Target) == 0x000000, "Member 'TgfGameplayAura_K2_OnCharacterEnter::Target' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.K2_OnCharacterLeave
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAura_K2_OnCharacterLeave final
{
public:
	class ALyraCharacter*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_K2_OnCharacterLeave) == 0x000008, "Wrong alignment on TgfGameplayAura_K2_OnCharacterLeave");
static_assert(sizeof(TgfGameplayAura_K2_OnCharacterLeave) == 0x000008, "Wrong size on TgfGameplayAura_K2_OnCharacterLeave");
static_assert(offsetof(TgfGameplayAura_K2_OnCharacterLeave, Target) == 0x000000, "Member 'TgfGameplayAura_K2_OnCharacterLeave::Target' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.K2_PreTickAura
// 0x0004 (0x0004 - 0x0000)
struct TgfGameplayAura_K2_PreTickAura final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_K2_PreTickAura) == 0x000004, "Wrong alignment on TgfGameplayAura_K2_PreTickAura");
static_assert(sizeof(TgfGameplayAura_K2_PreTickAura) == 0x000004, "Wrong size on TgfGameplayAura_K2_PreTickAura");
static_assert(offsetof(TgfGameplayAura_K2_PreTickAura, DeltaTime) == 0x000000, "Member 'TgfGameplayAura_K2_PreTickAura::DeltaTime' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.K2_TickAura
// 0x0004 (0x0004 - 0x0000)
struct TgfGameplayAura_K2_TickAura final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_K2_TickAura) == 0x000004, "Wrong alignment on TgfGameplayAura_K2_TickAura");
static_assert(sizeof(TgfGameplayAura_K2_TickAura) == 0x000004, "Wrong size on TgfGameplayAura_K2_TickAura");
static_assert(offsetof(TgfGameplayAura_K2_TickAura, DeltaTime) == 0x000000, "Member 'TgfGameplayAura_K2_TickAura::DeltaTime' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.RemoveIgnoreTarget
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAura_RemoveIgnoreTarget final
{
public:
	class ALyraCharacter*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_RemoveIgnoreTarget) == 0x000008, "Wrong alignment on TgfGameplayAura_RemoveIgnoreTarget");
static_assert(sizeof(TgfGameplayAura_RemoveIgnoreTarget) == 0x000008, "Wrong size on TgfGameplayAura_RemoveIgnoreTarget");
static_assert(offsetof(TgfGameplayAura_RemoveIgnoreTarget, Target) == 0x000000, "Member 'TgfGameplayAura_RemoveIgnoreTarget::Target' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.GetInstigatorAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAura_GetInstigatorAbilitySystemComponent final
{
public:
	class ULyraAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_GetInstigatorAbilitySystemComponent) == 0x000008, "Wrong alignment on TgfGameplayAura_GetInstigatorAbilitySystemComponent");
static_assert(sizeof(TgfGameplayAura_GetInstigatorAbilitySystemComponent) == 0x000008, "Wrong size on TgfGameplayAura_GetInstigatorAbilitySystemComponent");
static_assert(offsetof(TgfGameplayAura_GetInstigatorAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'TgfGameplayAura_GetInstigatorAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.GetOwningActor
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAura_GetOwningActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_GetOwningActor) == 0x000008, "Wrong alignment on TgfGameplayAura_GetOwningActor");
static_assert(sizeof(TgfGameplayAura_GetOwningActor) == 0x000008, "Wrong size on TgfGameplayAura_GetOwningActor");
static_assert(offsetof(TgfGameplayAura_GetOwningActor, ReturnValue) == 0x000000, "Member 'TgfGameplayAura_GetOwningActor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.GetSourceCharacter
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAura_GetSourceCharacter final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_GetSourceCharacter) == 0x000008, "Wrong alignment on TgfGameplayAura_GetSourceCharacter");
static_assert(sizeof(TgfGameplayAura_GetSourceCharacter) == 0x000008, "Wrong size on TgfGameplayAura_GetSourceCharacter");
static_assert(offsetof(TgfGameplayAura_GetSourceCharacter, ReturnValue) == 0x000000, "Member 'TgfGameplayAura_GetSourceCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.GetTargetCharacters
// 0x0010 (0x0010 - 0x0000)
struct TgfGameplayAura_GetTargetCharacters final
{
public:
	TArray<class ALyraCharacter*>                 OutTargets;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_GetTargetCharacters) == 0x000008, "Wrong alignment on TgfGameplayAura_GetTargetCharacters");
static_assert(sizeof(TgfGameplayAura_GetTargetCharacters) == 0x000010, "Wrong size on TgfGameplayAura_GetTargetCharacters");
static_assert(offsetof(TgfGameplayAura_GetTargetCharacters, OutTargets) == 0x000000, "Member 'TgfGameplayAura_GetTargetCharacters::OutTargets' has a wrong offset!");

// Function LyraGame.TgfGameplayAura.GetTotalRunningTime
// 0x0004 (0x0004 - 0x0000)
struct TgfGameplayAura_GetTotalRunningTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAura_GetTotalRunningTime) == 0x000004, "Wrong alignment on TgfGameplayAura_GetTotalRunningTime");
static_assert(sizeof(TgfGameplayAura_GetTotalRunningTime) == 0x000004, "Wrong size on TgfGameplayAura_GetTotalRunningTime");
static_assert(offsetof(TgfGameplayAura_GetTotalRunningTime, ReturnValue) == 0x000000, "Member 'TgfGameplayAura_GetTotalRunningTime::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayCueNotify_Looping.OnTgfApplication
// 0x0110 (0x0110 - 0x0000)
struct TgfGameplayCueNotify_Looping_OnTgfApplication final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTgfGameplayCueNotify_SpawnResult      TgfSpawnResults;                                   // 0x00E8(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedCulling;                                       // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayCueNotify_Looping_OnTgfApplication) == 0x000008, "Wrong alignment on TgfGameplayCueNotify_Looping_OnTgfApplication");
static_assert(sizeof(TgfGameplayCueNotify_Looping_OnTgfApplication) == 0x000110, "Wrong size on TgfGameplayCueNotify_Looping_OnTgfApplication");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfApplication, Target) == 0x000000, "Member 'TgfGameplayCueNotify_Looping_OnTgfApplication::Target' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfApplication, Parameters) == 0x000008, "Member 'TgfGameplayCueNotify_Looping_OnTgfApplication::Parameters' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfApplication, TgfSpawnResults) == 0x0000E8, "Member 'TgfGameplayCueNotify_Looping_OnTgfApplication::TgfSpawnResults' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfApplication, NeedCulling) == 0x000108, "Member 'TgfGameplayCueNotify_Looping_OnTgfApplication::NeedCulling' has a wrong offset!");

// Function LyraGame.TgfGameplayCueNotify_Looping.OnTgfLoopingStart
// 0x0110 (0x0110 - 0x0000)
struct TgfGameplayCueNotify_Looping_OnTgfLoopingStart final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTgfGameplayCueNotify_SpawnResult      TgfSpawnResults;                                   // 0x00E8(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedCulling;                                       // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayCueNotify_Looping_OnTgfLoopingStart) == 0x000008, "Wrong alignment on TgfGameplayCueNotify_Looping_OnTgfLoopingStart");
static_assert(sizeof(TgfGameplayCueNotify_Looping_OnTgfLoopingStart) == 0x000110, "Wrong size on TgfGameplayCueNotify_Looping_OnTgfLoopingStart");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfLoopingStart, Target) == 0x000000, "Member 'TgfGameplayCueNotify_Looping_OnTgfLoopingStart::Target' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfLoopingStart, Parameters) == 0x000008, "Member 'TgfGameplayCueNotify_Looping_OnTgfLoopingStart::Parameters' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfLoopingStart, TgfSpawnResults) == 0x0000E8, "Member 'TgfGameplayCueNotify_Looping_OnTgfLoopingStart::TgfSpawnResults' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfLoopingStart, NeedCulling) == 0x000108, "Member 'TgfGameplayCueNotify_Looping_OnTgfLoopingStart::NeedCulling' has a wrong offset!");

// Function LyraGame.TgfGameplayCueNotify_Looping.OnTgfRecurring
// 0x0110 (0x0110 - 0x0000)
struct TgfGameplayCueNotify_Looping_OnTgfRecurring final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTgfGameplayCueNotify_SpawnResult      TgfSpawnResults;                                   // 0x00E8(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedCulling;                                       // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayCueNotify_Looping_OnTgfRecurring) == 0x000008, "Wrong alignment on TgfGameplayCueNotify_Looping_OnTgfRecurring");
static_assert(sizeof(TgfGameplayCueNotify_Looping_OnTgfRecurring) == 0x000110, "Wrong size on TgfGameplayCueNotify_Looping_OnTgfRecurring");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfRecurring, Target) == 0x000000, "Member 'TgfGameplayCueNotify_Looping_OnTgfRecurring::Target' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfRecurring, Parameters) == 0x000008, "Member 'TgfGameplayCueNotify_Looping_OnTgfRecurring::Parameters' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfRecurring, TgfSpawnResults) == 0x0000E8, "Member 'TgfGameplayCueNotify_Looping_OnTgfRecurring::TgfSpawnResults' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfRecurring, NeedCulling) == 0x000108, "Member 'TgfGameplayCueNotify_Looping_OnTgfRecurring::NeedCulling' has a wrong offset!");

// Function LyraGame.TgfGameplayCueNotify_Looping.OnTgfRemoval
// 0x0110 (0x0110 - 0x0000)
struct TgfGameplayCueNotify_Looping_OnTgfRemoval final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTgfGameplayCueNotify_SpawnResult      TgfSpawnResults;                                   // 0x00E8(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedCulling;                                       // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayCueNotify_Looping_OnTgfRemoval) == 0x000008, "Wrong alignment on TgfGameplayCueNotify_Looping_OnTgfRemoval");
static_assert(sizeof(TgfGameplayCueNotify_Looping_OnTgfRemoval) == 0x000110, "Wrong size on TgfGameplayCueNotify_Looping_OnTgfRemoval");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfRemoval, Target) == 0x000000, "Member 'TgfGameplayCueNotify_Looping_OnTgfRemoval::Target' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfRemoval, Parameters) == 0x000008, "Member 'TgfGameplayCueNotify_Looping_OnTgfRemoval::Parameters' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfRemoval, TgfSpawnResults) == 0x0000E8, "Member 'TgfGameplayCueNotify_Looping_OnTgfRemoval::TgfSpawnResults' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_Looping_OnTgfRemoval, NeedCulling) == 0x000108, "Member 'TgfGameplayCueNotify_Looping_OnTgfRemoval::NeedCulling' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.BoolArrayIdxOf
// 0x0018 (0x0018 - 0x0000)
struct TgfGameWidgetLibrary_BoolArrayIdxOf final
{
public:
	TArray<bool>                                  Array;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Out;                                               // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameWidgetLibrary_BoolArrayIdxOf) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_BoolArrayIdxOf");
static_assert(sizeof(TgfGameWidgetLibrary_BoolArrayIdxOf) == 0x000018, "Wrong size on TgfGameWidgetLibrary_BoolArrayIdxOf");
static_assert(offsetof(TgfGameWidgetLibrary_BoolArrayIdxOf, Array) == 0x000000, "Member 'TgfGameWidgetLibrary_BoolArrayIdxOf::Array' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_BoolArrayIdxOf, Idx) == 0x000010, "Member 'TgfGameWidgetLibrary_BoolArrayIdxOf::Idx' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_BoolArrayIdxOf, Out) == 0x000014, "Member 'TgfGameWidgetLibrary_BoolArrayIdxOf::Out' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_BoolArrayIdxOf, ReturnValue) == 0x000015, "Member 'TgfGameWidgetLibrary_BoolArrayIdxOf::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.BroadcastKeyBindingChange
// 0x0008 (0x0008 - 0x0000)
struct TgfGameWidgetLibrary_BroadcastKeyBindingChange final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_BroadcastKeyBindingChange) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_BroadcastKeyBindingChange");
static_assert(sizeof(TgfGameWidgetLibrary_BroadcastKeyBindingChange) == 0x000008, "Wrong size on TgfGameWidgetLibrary_BroadcastKeyBindingChange");
static_assert(offsetof(TgfGameWidgetLibrary_BroadcastKeyBindingChange, Context) == 0x000000, "Member 'TgfGameWidgetLibrary_BroadcastKeyBindingChange::Context' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.FindInputActionForTag
// 0x0020 (0x0020 - 0x0000)
struct TgfGameWidgetLibrary_FindInputActionForTag final
{
public:
	const class UUserWidget*                      UserWidget;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InputTag;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLogNotFound;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UInputAction*                     ReturnValue;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_FindInputActionForTag) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_FindInputActionForTag");
static_assert(sizeof(TgfGameWidgetLibrary_FindInputActionForTag) == 0x000020, "Wrong size on TgfGameWidgetLibrary_FindInputActionForTag");
static_assert(offsetof(TgfGameWidgetLibrary_FindInputActionForTag, UserWidget) == 0x000000, "Member 'TgfGameWidgetLibrary_FindInputActionForTag::UserWidget' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_FindInputActionForTag, InputTag) == 0x000008, "Member 'TgfGameWidgetLibrary_FindInputActionForTag::InputTag' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_FindInputActionForTag, bLogNotFound) == 0x000010, "Member 'TgfGameWidgetLibrary_FindInputActionForTag::bLogNotFound' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_FindInputActionForTag, ReturnValue) == 0x000018, "Member 'TgfGameWidgetLibrary_FindInputActionForTag::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.FindInputActionForTagByController
// 0x0020 (0x0020 - 0x0000)
struct TgfGameWidgetLibrary_FindInputActionForTagByController final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InputTag;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLogNotFound;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UInputAction*                     ReturnValue;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_FindInputActionForTagByController) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_FindInputActionForTagByController");
static_assert(sizeof(TgfGameWidgetLibrary_FindInputActionForTagByController) == 0x000020, "Wrong size on TgfGameWidgetLibrary_FindInputActionForTagByController");
static_assert(offsetof(TgfGameWidgetLibrary_FindInputActionForTagByController, PlayerController) == 0x000000, "Member 'TgfGameWidgetLibrary_FindInputActionForTagByController::PlayerController' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_FindInputActionForTagByController, InputTag) == 0x000008, "Member 'TgfGameWidgetLibrary_FindInputActionForTagByController::InputTag' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_FindInputActionForTagByController, bLogNotFound) == 0x000010, "Member 'TgfGameWidgetLibrary_FindInputActionForTagByController::bLogNotFound' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_FindInputActionForTagByController, ReturnValue) == 0x000018, "Member 'TgfGameWidgetLibrary_FindInputActionForTagByController::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GameWidgetGetAbilitySystemComponentFromActor
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_GameWidgetGetAbilitySystemComponentFromActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_GameWidgetGetAbilitySystemComponentFromActor) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GameWidgetGetAbilitySystemComponentFromActor");
static_assert(sizeof(TgfGameWidgetLibrary_GameWidgetGetAbilitySystemComponentFromActor) == 0x000010, "Wrong size on TgfGameWidgetLibrary_GameWidgetGetAbilitySystemComponentFromActor");
static_assert(offsetof(TgfGameWidgetLibrary_GameWidgetGetAbilitySystemComponentFromActor, Actor) == 0x000000, "Member 'TgfGameWidgetLibrary_GameWidgetGetAbilitySystemComponentFromActor::Actor' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GameWidgetGetAbilitySystemComponentFromActor, ReturnValue) == 0x000008, "Member 'TgfGameWidgetLibrary_GameWidgetGetAbilitySystemComponentFromActor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetActiveGameplayEffectShowTotalAndRemainTime
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_GetActiveGameplayEffectShowTotalAndRemainTime final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_GetActiveGameplayEffectShowTotalAndRemainTime) == 0x000004, "Wrong alignment on TgfGameWidgetLibrary_GetActiveGameplayEffectShowTotalAndRemainTime");
static_assert(sizeof(TgfGameWidgetLibrary_GetActiveGameplayEffectShowTotalAndRemainTime) == 0x000010, "Wrong size on TgfGameWidgetLibrary_GetActiveGameplayEffectShowTotalAndRemainTime");
static_assert(offsetof(TgfGameWidgetLibrary_GetActiveGameplayEffectShowTotalAndRemainTime, ActiveHandle) == 0x000000, "Member 'TgfGameWidgetLibrary_GetActiveGameplayEffectShowTotalAndRemainTime::ActiveHandle' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetActiveGameplayEffectShowTotalAndRemainTime, RemainTime) == 0x000008, "Member 'TgfGameWidgetLibrary_GetActiveGameplayEffectShowTotalAndRemainTime::RemainTime' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetActiveGameplayEffectShowTotalAndRemainTime, TotalTime) == 0x00000C, "Member 'TgfGameWidgetLibrary_GetActiveGameplayEffectShowTotalAndRemainTime::TotalTime' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetAutoFillQuality
// 0x0018 (0x0018 - 0x0000)
struct TgfGameWidgetLibrary_GetAutoFillQuality final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ETgfEquipQuality>                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_GetAutoFillQuality) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetAutoFillQuality");
static_assert(sizeof(TgfGameWidgetLibrary_GetAutoFillQuality) == 0x000018, "Wrong size on TgfGameWidgetLibrary_GetAutoFillQuality");
static_assert(offsetof(TgfGameWidgetLibrary_GetAutoFillQuality, UserWidget) == 0x000000, "Member 'TgfGameWidgetLibrary_GetAutoFillQuality::UserWidget' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetAutoFillQuality, ReturnValue) == 0x000008, "Member 'TgfGameWidgetLibrary_GetAutoFillQuality::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetCameraFOVAngle
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_GetCameraFOVAngle final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameWidgetLibrary_GetCameraFOVAngle) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetCameraFOVAngle");
static_assert(sizeof(TgfGameWidgetLibrary_GetCameraFOVAngle) == 0x000010, "Wrong size on TgfGameWidgetLibrary_GetCameraFOVAngle");
static_assert(offsetof(TgfGameWidgetLibrary_GetCameraFOVAngle, UserWidget) == 0x000000, "Member 'TgfGameWidgetLibrary_GetCameraFOVAngle::UserWidget' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetCameraFOVAngle, ReturnValue) == 0x000008, "Member 'TgfGameWidgetLibrary_GetCameraFOVAngle::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetCareerAndRaceFromNecklace
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace final
{
public:
	const class ALyraCharacter*                   Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorCareer                               OutCareer;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 OutRace;                                           // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace");
static_assert(sizeof(TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace) == 0x000010, "Wrong size on TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace");
static_assert(offsetof(TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace, Character) == 0x000000, "Member 'TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace::Character' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace, OutCareer) == 0x000008, "Member 'TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace::OutCareer' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace, OutRace) == 0x000009, "Member 'TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace::OutRace' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace, ReturnValue) == 0x00000A, "Member 'TgfGameWidgetLibrary_GetCareerAndRaceFromNecklace::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetCommonInputSubsystem
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_GetCommonInputSubsystem final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonInputSubsystem*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_GetCommonInputSubsystem) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetCommonInputSubsystem");
static_assert(sizeof(TgfGameWidgetLibrary_GetCommonInputSubsystem) == 0x000010, "Wrong size on TgfGameWidgetLibrary_GetCommonInputSubsystem");
static_assert(offsetof(TgfGameWidgetLibrary_GetCommonInputSubsystem, UserWidget) == 0x000000, "Member 'TgfGameWidgetLibrary_GetCommonInputSubsystem::UserWidget' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetCommonInputSubsystem, ReturnValue) == 0x000008, "Member 'TgfGameWidgetLibrary_GetCommonInputSubsystem::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetDisplayCareerAndRace
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_GetDisplayCareerAndRace final
{
public:
	class ALyraCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorCareer                               OutCareer;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRace                                 OutRace;                                           // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameWidgetLibrary_GetDisplayCareerAndRace) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetDisplayCareerAndRace");
static_assert(sizeof(TgfGameWidgetLibrary_GetDisplayCareerAndRace) == 0x000010, "Wrong size on TgfGameWidgetLibrary_GetDisplayCareerAndRace");
static_assert(offsetof(TgfGameWidgetLibrary_GetDisplayCareerAndRace, Character) == 0x000000, "Member 'TgfGameWidgetLibrary_GetDisplayCareerAndRace::Character' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetDisplayCareerAndRace, OutCareer) == 0x000008, "Member 'TgfGameWidgetLibrary_GetDisplayCareerAndRace::OutCareer' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetDisplayCareerAndRace, OutRace) == 0x000009, "Member 'TgfGameWidgetLibrary_GetDisplayCareerAndRace::OutRace' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetEffectCauserByEffectContext
// 0x0020 (0x0020 - 0x0000)
struct TgfGameWidgetLibrary_GetEffectCauserByEffectContext final
{
public:
	struct FGameplayEffectContextHandle           ContextHandle;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_GetEffectCauserByEffectContext) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetEffectCauserByEffectContext");
static_assert(sizeof(TgfGameWidgetLibrary_GetEffectCauserByEffectContext) == 0x000020, "Wrong size on TgfGameWidgetLibrary_GetEffectCauserByEffectContext");
static_assert(offsetof(TgfGameWidgetLibrary_GetEffectCauserByEffectContext, ContextHandle) == 0x000000, "Member 'TgfGameWidgetLibrary_GetEffectCauserByEffectContext::ContextHandle' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetEffectCauserByEffectContext, ReturnValue) == 0x000018, "Member 'TgfGameWidgetLibrary_GetEffectCauserByEffectContext::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetFollowUIManagerComponent
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_GetFollowUIManagerComponent final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfGameFollowUIManagerComponent*       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_GetFollowUIManagerComponent) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetFollowUIManagerComponent");
static_assert(sizeof(TgfGameWidgetLibrary_GetFollowUIManagerComponent) == 0x000010, "Wrong size on TgfGameWidgetLibrary_GetFollowUIManagerComponent");
static_assert(offsetof(TgfGameWidgetLibrary_GetFollowUIManagerComponent, PlayerController) == 0x000000, "Member 'TgfGameWidgetLibrary_GetFollowUIManagerComponent::PlayerController' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetFollowUIManagerComponent, ReturnValue) == 0x000008, "Member 'TgfGameWidgetLibrary_GetFollowUIManagerComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetGameplayTagFromString
// 0x0018 (0x0018 - 0x0000)
struct TgfGameWidgetLibrary_GetGameplayTagFromString final
{
public:
	class FString                                 TagString;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_GetGameplayTagFromString) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetGameplayTagFromString");
static_assert(sizeof(TgfGameWidgetLibrary_GetGameplayTagFromString) == 0x000018, "Wrong size on TgfGameWidgetLibrary_GetGameplayTagFromString");
static_assert(offsetof(TgfGameWidgetLibrary_GetGameplayTagFromString, TagString) == 0x000000, "Member 'TgfGameWidgetLibrary_GetGameplayTagFromString::TagString' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetGameplayTagFromString, ReturnValue) == 0x000010, "Member 'TgfGameWidgetLibrary_GetGameplayTagFromString::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetInputKeyByInputAction
// 0x0028 (0x0028 - 0x0000)
struct TgfGameWidgetLibrary_GetInputKeyByInputAction final
{
public:
	class ULyraLocalPlayer*                       LocalPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_GetInputKeyByInputAction) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetInputKeyByInputAction");
static_assert(sizeof(TgfGameWidgetLibrary_GetInputKeyByInputAction) == 0x000028, "Wrong size on TgfGameWidgetLibrary_GetInputKeyByInputAction");
static_assert(offsetof(TgfGameWidgetLibrary_GetInputKeyByInputAction, LocalPlayer) == 0x000000, "Member 'TgfGameWidgetLibrary_GetInputKeyByInputAction::LocalPlayer' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetInputKeyByInputAction, InputAction) == 0x000008, "Member 'TgfGameWidgetLibrary_GetInputKeyByInputAction::InputAction' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetInputKeyByInputAction, ReturnValue) == 0x000010, "Member 'TgfGameWidgetLibrary_GetInputKeyByInputAction::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetInputKeyTextByInputAction
// 0x0028 (0x0028 - 0x0000)
struct TgfGameWidgetLibrary_GetInputKeyTextByInputAction final
{
public:
	class ULyraLocalPlayer*                       LocalPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_GetInputKeyTextByInputAction) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetInputKeyTextByInputAction");
static_assert(sizeof(TgfGameWidgetLibrary_GetInputKeyTextByInputAction) == 0x000028, "Wrong size on TgfGameWidgetLibrary_GetInputKeyTextByInputAction");
static_assert(offsetof(TgfGameWidgetLibrary_GetInputKeyTextByInputAction, LocalPlayer) == 0x000000, "Member 'TgfGameWidgetLibrary_GetInputKeyTextByInputAction::LocalPlayer' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetInputKeyTextByInputAction, InputAction) == 0x000008, "Member 'TgfGameWidgetLibrary_GetInputKeyTextByInputAction::InputAction' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetInputKeyTextByInputAction, ReturnValue) == 0x000010, "Member 'TgfGameWidgetLibrary_GetInputKeyTextByInputAction::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetLyraCharacter
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_GetLyraCharacter final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_GetLyraCharacter) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetLyraCharacter");
static_assert(sizeof(TgfGameWidgetLibrary_GetLyraCharacter) == 0x000010, "Wrong size on TgfGameWidgetLibrary_GetLyraCharacter");
static_assert(offsetof(TgfGameWidgetLibrary_GetLyraCharacter, UserWidget) == 0x000000, "Member 'TgfGameWidgetLibrary_GetLyraCharacter::UserWidget' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetLyraCharacter, ReturnValue) == 0x000008, "Member 'TgfGameWidgetLibrary_GetLyraCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetMagicPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_GetMagicPercent final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameWidgetLibrary_GetMagicPercent) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetMagicPercent");
static_assert(sizeof(TgfGameWidgetLibrary_GetMagicPercent) == 0x000010, "Wrong size on TgfGameWidgetLibrary_GetMagicPercent");
static_assert(offsetof(TgfGameWidgetLibrary_GetMagicPercent, ASC) == 0x000000, "Member 'TgfGameWidgetLibrary_GetMagicPercent::ASC' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetMagicPercent, ReturnValue) == 0x000008, "Member 'TgfGameWidgetLibrary_GetMagicPercent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetSoulEnergyPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_GetSoulEnergyPercent final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameWidgetLibrary_GetSoulEnergyPercent) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetSoulEnergyPercent");
static_assert(sizeof(TgfGameWidgetLibrary_GetSoulEnergyPercent) == 0x000010, "Wrong size on TgfGameWidgetLibrary_GetSoulEnergyPercent");
static_assert(offsetof(TgfGameWidgetLibrary_GetSoulEnergyPercent, ASC) == 0x000000, "Member 'TgfGameWidgetLibrary_GetSoulEnergyPercent::ASC' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetSoulEnergyPercent, ReturnValue) == 0x000008, "Member 'TgfGameWidgetLibrary_GetSoulEnergyPercent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.GetWidgetViewTarget
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_GetWidgetViewTarget final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_GetWidgetViewTarget) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_GetWidgetViewTarget");
static_assert(sizeof(TgfGameWidgetLibrary_GetWidgetViewTarget) == 0x000010, "Wrong size on TgfGameWidgetLibrary_GetWidgetViewTarget");
static_assert(offsetof(TgfGameWidgetLibrary_GetWidgetViewTarget, UserWidget) == 0x000000, "Member 'TgfGameWidgetLibrary_GetWidgetViewTarget::UserWidget' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_GetWidgetViewTarget, ReturnValue) == 0x000008, "Member 'TgfGameWidgetLibrary_GetWidgetViewTarget::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.Is0penoperationTips
// 0x0001 (0x0001 - 0x0000)
struct TgfGameWidgetLibrary_Is0penoperationTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_Is0penoperationTips) == 0x000001, "Wrong alignment on TgfGameWidgetLibrary_Is0penoperationTips");
static_assert(sizeof(TgfGameWidgetLibrary_Is0penoperationTips) == 0x000001, "Wrong size on TgfGameWidgetLibrary_Is0penoperationTips");
static_assert(offsetof(TgfGameWidgetLibrary_Is0penoperationTips, ReturnValue) == 0x000000, "Member 'TgfGameWidgetLibrary_Is0penoperationTips::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.IsPVPMode
// 0x0010 (0x0010 - 0x0000)
struct TgfGameWidgetLibrary_IsPVPMode final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameWidgetLibrary_IsPVPMode) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_IsPVPMode");
static_assert(sizeof(TgfGameWidgetLibrary_IsPVPMode) == 0x000010, "Wrong size on TgfGameWidgetLibrary_IsPVPMode");
static_assert(offsetof(TgfGameWidgetLibrary_IsPVPMode, PlayerController) == 0x000000, "Member 'TgfGameWidgetLibrary_IsPVPMode::PlayerController' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_IsPVPMode, ReturnValue) == 0x000008, "Member 'TgfGameWidgetLibrary_IsPVPMode::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.RecomputeGameplayEffectStartWorldTimes
// 0x0008 (0x0008 - 0x0000)
struct TgfGameWidgetLibrary_RecomputeGameplayEffectStartWorldTimes final
{
public:
	class ULyraAbilitySystemComponent*            LyraASC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_RecomputeGameplayEffectStartWorldTimes) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_RecomputeGameplayEffectStartWorldTimes");
static_assert(sizeof(TgfGameWidgetLibrary_RecomputeGameplayEffectStartWorldTimes) == 0x000008, "Wrong size on TgfGameWidgetLibrary_RecomputeGameplayEffectStartWorldTimes");
static_assert(offsetof(TgfGameWidgetLibrary_RecomputeGameplayEffectStartWorldTimes, LyraASC) == 0x000000, "Member 'TgfGameWidgetLibrary_RecomputeGameplayEffectStartWorldTimes::LyraASC' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.SetDSAutoFillQuality
// 0x0018 (0x0018 - 0x0000)
struct TgfGameWidgetLibrary_SetDSAutoFillQuality final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ETgfEquipQuality>                      QualityList;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_SetDSAutoFillQuality) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_SetDSAutoFillQuality");
static_assert(sizeof(TgfGameWidgetLibrary_SetDSAutoFillQuality) == 0x000018, "Wrong size on TgfGameWidgetLibrary_SetDSAutoFillQuality");
static_assert(offsetof(TgfGameWidgetLibrary_SetDSAutoFillQuality, UserWidget) == 0x000000, "Member 'TgfGameWidgetLibrary_SetDSAutoFillQuality::UserWidget' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_SetDSAutoFillQuality, QualityList) == 0x000008, "Member 'TgfGameWidgetLibrary_SetDSAutoFillQuality::QualityList' has a wrong offset!");

// Function LyraGame.TgfGameWidgetLibrary.ShowHurtNum
// 0x0028 (0x0028 - 0x0000)
struct TgfGameWidgetLibrary_ShowHurtNum final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHurtNotifyMessage                     Message;                                           // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameWidgetLibrary_ShowHurtNum) == 0x000008, "Wrong alignment on TgfGameWidgetLibrary_ShowHurtNum");
static_assert(sizeof(TgfGameWidgetLibrary_ShowHurtNum) == 0x000028, "Wrong size on TgfGameWidgetLibrary_ShowHurtNum");
static_assert(offsetof(TgfGameWidgetLibrary_ShowHurtNum, PlayerController) == 0x000000, "Member 'TgfGameWidgetLibrary_ShowHurtNum::PlayerController' has a wrong offset!");
static_assert(offsetof(TgfGameWidgetLibrary_ShowHurtNum, Message) == 0x000008, "Member 'TgfGameWidgetLibrary_ShowHurtNum::Message' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.BP_OnBuffAdd
// 0x0018 (0x0018 - 0x0000)
struct TgfHealthBarWidget_BP_OnBuffAdd final
{
public:
	class UTgfGameplayEffect*                     GE;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfHealthBarWidget_BP_OnBuffAdd) == 0x000008, "Wrong alignment on TgfHealthBarWidget_BP_OnBuffAdd");
static_assert(sizeof(TgfHealthBarWidget_BP_OnBuffAdd) == 0x000018, "Wrong size on TgfHealthBarWidget_BP_OnBuffAdd");
static_assert(offsetof(TgfHealthBarWidget_BP_OnBuffAdd, GE) == 0x000000, "Member 'TgfHealthBarWidget_BP_OnBuffAdd::GE' has a wrong offset!");
static_assert(offsetof(TgfHealthBarWidget_BP_OnBuffAdd, ActiveHandle) == 0x000008, "Member 'TgfHealthBarWidget_BP_OnBuffAdd::ActiveHandle' has a wrong offset!");
static_assert(offsetof(TgfHealthBarWidget_BP_OnBuffAdd, RemainTime) == 0x000010, "Member 'TgfHealthBarWidget_BP_OnBuffAdd::RemainTime' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.BP_OnGERemove
// 0x0008 (0x0008 - 0x0000)
struct TgfHealthBarWidget_BP_OnGERemove final
{
public:
	struct FActiveGameplayEffectHandle            GEHandle;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_BP_OnGERemove) == 0x000004, "Wrong alignment on TgfHealthBarWidget_BP_OnGERemove");
static_assert(sizeof(TgfHealthBarWidget_BP_OnGERemove) == 0x000008, "Wrong size on TgfHealthBarWidget_BP_OnGERemove");
static_assert(offsetof(TgfHealthBarWidget_BP_OnGERemove, GEHandle) == 0x000000, "Member 'TgfHealthBarWidget_BP_OnGERemove::GEHandle' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetCurHealth
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetCurHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetCurHealth) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetCurHealth");
static_assert(sizeof(TgfHealthBarWidget_GetCurHealth) == 0x000004, "Wrong size on TgfHealthBarWidget_GetCurHealth");
static_assert(offsetof(TgfHealthBarWidget_GetCurHealth, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetCurHealth::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetCurMagic
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetCurMagic final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetCurMagic) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetCurMagic");
static_assert(sizeof(TgfHealthBarWidget_GetCurMagic) == 0x000004, "Wrong size on TgfHealthBarWidget_GetCurMagic");
static_assert(offsetof(TgfHealthBarWidget_GetCurMagic, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetCurMagic::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetCurNaturalEnergy
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetCurNaturalEnergy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetCurNaturalEnergy) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetCurNaturalEnergy");
static_assert(sizeof(TgfHealthBarWidget_GetCurNaturalEnergy) == 0x000004, "Wrong size on TgfHealthBarWidget_GetCurNaturalEnergy");
static_assert(offsetof(TgfHealthBarWidget_GetCurNaturalEnergy, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetCurNaturalEnergy::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetCurShield
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetCurShield final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetCurShield) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetCurShield");
static_assert(sizeof(TgfHealthBarWidget_GetCurShield) == 0x000004, "Wrong size on TgfHealthBarWidget_GetCurShield");
static_assert(offsetof(TgfHealthBarWidget_GetCurShield, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetCurShield::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetCurSoulEnergy
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetCurSoulEnergy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetCurSoulEnergy) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetCurSoulEnergy");
static_assert(sizeof(TgfHealthBarWidget_GetCurSoulEnergy) == 0x000004, "Wrong size on TgfHealthBarWidget_GetCurSoulEnergy");
static_assert(offsetof(TgfHealthBarWidget_GetCurSoulEnergy, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetCurSoulEnergy::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetHealthPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetHealthPercent) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetHealthPercent");
static_assert(sizeof(TgfHealthBarWidget_GetHealthPercent) == 0x000004, "Wrong size on TgfHealthBarWidget_GetHealthPercent");
static_assert(offsetof(TgfHealthBarWidget_GetHealthPercent, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetHealthPercent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetMagicPercent
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetMagicPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetMagicPercent) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetMagicPercent");
static_assert(sizeof(TgfHealthBarWidget_GetMagicPercent) == 0x000004, "Wrong size on TgfHealthBarWidget_GetMagicPercent");
static_assert(offsetof(TgfHealthBarWidget_GetMagicPercent, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetMagicPercent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetMaxHealth) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetMaxHealth");
static_assert(sizeof(TgfHealthBarWidget_GetMaxHealth) == 0x000004, "Wrong size on TgfHealthBarWidget_GetMaxHealth");
static_assert(offsetof(TgfHealthBarWidget_GetMaxHealth, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetMaxMagic
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetMaxMagic final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetMaxMagic) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetMaxMagic");
static_assert(sizeof(TgfHealthBarWidget_GetMaxMagic) == 0x000004, "Wrong size on TgfHealthBarWidget_GetMaxMagic");
static_assert(offsetof(TgfHealthBarWidget_GetMaxMagic, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetMaxMagic::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetMaxNaturalEnergy
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetMaxNaturalEnergy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetMaxNaturalEnergy) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetMaxNaturalEnergy");
static_assert(sizeof(TgfHealthBarWidget_GetMaxNaturalEnergy) == 0x000004, "Wrong size on TgfHealthBarWidget_GetMaxNaturalEnergy");
static_assert(offsetof(TgfHealthBarWidget_GetMaxNaturalEnergy, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetMaxNaturalEnergy::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetMaxSoulEnergy
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetMaxSoulEnergy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetMaxSoulEnergy) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetMaxSoulEnergy");
static_assert(sizeof(TgfHealthBarWidget_GetMaxSoulEnergy) == 0x000004, "Wrong size on TgfHealthBarWidget_GetMaxSoulEnergy");
static_assert(offsetof(TgfHealthBarWidget_GetMaxSoulEnergy, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetMaxSoulEnergy::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetNaturalEnergyPercent
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetNaturalEnergyPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetNaturalEnergyPercent) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetNaturalEnergyPercent");
static_assert(sizeof(TgfHealthBarWidget_GetNaturalEnergyPercent) == 0x000004, "Wrong size on TgfHealthBarWidget_GetNaturalEnergyPercent");
static_assert(offsetof(TgfHealthBarWidget_GetNaturalEnergyPercent, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetNaturalEnergyPercent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetShieldPercent
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetShieldPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetShieldPercent) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetShieldPercent");
static_assert(sizeof(TgfHealthBarWidget_GetShieldPercent) == 0x000004, "Wrong size on TgfHealthBarWidget_GetShieldPercent");
static_assert(offsetof(TgfHealthBarWidget_GetShieldPercent, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetShieldPercent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.GetSoulEnergyPercent
// 0x0004 (0x0004 - 0x0000)
struct TgfHealthBarWidget_GetSoulEnergyPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_GetSoulEnergyPercent) == 0x000004, "Wrong alignment on TgfHealthBarWidget_GetSoulEnergyPercent");
static_assert(sizeof(TgfHealthBarWidget_GetSoulEnergyPercent) == 0x000004, "Wrong size on TgfHealthBarWidget_GetSoulEnergyPercent");
static_assert(offsetof(TgfHealthBarWidget_GetSoulEnergyPercent, ReturnValue) == 0x000000, "Member 'TgfHealthBarWidget_GetSoulEnergyPercent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfHealthBarWidget.SetCustomAttribute
// 0x0008 (0x0008 - 0x0000)
struct TgfHealthBarWidget_SetCustomAttribute final
{
public:
	class ULyraAbilitySystemComponent*            CustomASC;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfHealthBarWidget_SetCustomAttribute) == 0x000008, "Wrong alignment on TgfHealthBarWidget_SetCustomAttribute");
static_assert(sizeof(TgfHealthBarWidget_SetCustomAttribute) == 0x000008, "Wrong size on TgfHealthBarWidget_SetCustomAttribute");
static_assert(offsetof(TgfHealthBarWidget_SetCustomAttribute, CustomASC) == 0x000000, "Member 'TgfHealthBarWidget_SetCustomAttribute::CustomASC' has a wrong offset!");

// Function LyraGame.TgfInertanceComponent.BlendingToTarget
// 0x0050 (0x0050 - 0x0000)
struct TgfInertanceComponent_BlendingToTarget final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInertanceComponent_BlendingToTarget) == 0x000008, "Wrong alignment on TgfInertanceComponent_BlendingToTarget");
static_assert(sizeof(TgfInertanceComponent_BlendingToTarget) == 0x000050, "Wrong size on TgfInertanceComponent_BlendingToTarget");
static_assert(offsetof(TgfInertanceComponent_BlendingToTarget, DeltaTime) == 0x000000, "Member 'TgfInertanceComponent_BlendingToTarget::DeltaTime' has a wrong offset!");
static_assert(offsetof(TgfInertanceComponent_BlendingToTarget, InLocation) == 0x000008, "Member 'TgfInertanceComponent_BlendingToTarget::InLocation' has a wrong offset!");
static_assert(offsetof(TgfInertanceComponent_BlendingToTarget, Target) == 0x000020, "Member 'TgfInertanceComponent_BlendingToTarget::Target' has a wrong offset!");
static_assert(offsetof(TgfInertanceComponent_BlendingToTarget, ReturnValue) == 0x000038, "Member 'TgfInertanceComponent_BlendingToTarget::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInertanceComponent.SetComponent
// 0x0008 (0x0008 - 0x0000)
struct TgfInertanceComponent_SetComponent final
{
public:
	class USceneComponent*                        InSceneComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInertanceComponent_SetComponent) == 0x000008, "Wrong alignment on TgfInertanceComponent_SetComponent");
static_assert(sizeof(TgfInertanceComponent_SetComponent) == 0x000008, "Wrong size on TgfInertanceComponent_SetComponent");
static_assert(offsetof(TgfInertanceComponent_SetComponent, InSceneComponent) == 0x000000, "Member 'TgfInertanceComponent_SetComponent::InSceneComponent' has a wrong offset!");

// Function LyraGame.TgfInertanceAnimInstance.GetInertanceComponent
// 0x0008 (0x0008 - 0x0000)
struct TgfInertanceAnimInstance_GetInertanceComponent final
{
public:
	class UTgfInertanceComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInertanceAnimInstance_GetInertanceComponent) == 0x000008, "Wrong alignment on TgfInertanceAnimInstance_GetInertanceComponent");
static_assert(sizeof(TgfInertanceAnimInstance_GetInertanceComponent) == 0x000008, "Wrong size on TgfInertanceAnimInstance_GetInertanceComponent");
static_assert(offsetof(TgfInertanceAnimInstance_GetInertanceComponent, ReturnValue) == 0x000000, "Member 'TgfInertanceAnimInstance_GetInertanceComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryCheats.AddBlockingLootSlot
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryCheats_AddBlockingLootSlot final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryCheats_AddBlockingLootSlot) == 0x000004, "Wrong alignment on TgfInventoryCheats_AddBlockingLootSlot");
static_assert(sizeof(TgfInventoryCheats_AddBlockingLootSlot) == 0x000004, "Wrong size on TgfInventoryCheats_AddBlockingLootSlot");
static_assert(offsetof(TgfInventoryCheats_AddBlockingLootSlot, Slot) == 0x000000, "Member 'TgfInventoryCheats_AddBlockingLootSlot::Slot' has a wrong offset!");

// Function LyraGame.TgfInventoryCheats.AddGearsetLevel
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryCheats_AddGearsetLevel final
{
public:
	int32                                         GearsetId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeltaLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryCheats_AddGearsetLevel) == 0x000004, "Wrong alignment on TgfInventoryCheats_AddGearsetLevel");
static_assert(sizeof(TgfInventoryCheats_AddGearsetLevel) == 0x000008, "Wrong size on TgfInventoryCheats_AddGearsetLevel");
static_assert(offsetof(TgfInventoryCheats_AddGearsetLevel, GearsetId) == 0x000000, "Member 'TgfInventoryCheats_AddGearsetLevel::GearsetId' has a wrong offset!");
static_assert(offsetof(TgfInventoryCheats_AddGearsetLevel, DeltaLevel) == 0x000004, "Member 'TgfInventoryCheats_AddGearsetLevel::DeltaLevel' has a wrong offset!");

// Function LyraGame.TgfInventoryCheats.AddItem
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryCheats_AddItem final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryCheats_AddItem) == 0x000008, "Wrong alignment on TgfInventoryCheats_AddItem");
static_assert(sizeof(TgfInventoryCheats_AddItem) == 0x000018, "Wrong size on TgfInventoryCheats_AddItem");
static_assert(offsetof(TgfInventoryCheats_AddItem, AssetName) == 0x000000, "Member 'TgfInventoryCheats_AddItem::AssetName' has a wrong offset!");
static_assert(offsetof(TgfInventoryCheats_AddItem, Nums) == 0x000010, "Member 'TgfInventoryCheats_AddItem::Nums' has a wrong offset!");

// Function LyraGame.TgfInventoryCheats.AddLootItem
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryCheats_AddLootItem final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryCheats_AddLootItem) == 0x000004, "Wrong alignment on TgfInventoryCheats_AddLootItem");
static_assert(sizeof(TgfInventoryCheats_AddLootItem) == 0x000008, "Wrong size on TgfInventoryCheats_AddLootItem");
static_assert(offsetof(TgfInventoryCheats_AddLootItem, ItemId) == 0x000000, "Member 'TgfInventoryCheats_AddLootItem::ItemId' has a wrong offset!");
static_assert(offsetof(TgfInventoryCheats_AddLootItem, Nums) == 0x000004, "Member 'TgfInventoryCheats_AddLootItem::Nums' has a wrong offset!");

// Function LyraGame.TgfInventoryCheats.AddPackage
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryCheats_AddPackage final
{
public:
	int32                                         PackageId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryCheats_AddPackage) == 0x000004, "Wrong alignment on TgfInventoryCheats_AddPackage");
static_assert(sizeof(TgfInventoryCheats_AddPackage) == 0x000004, "Wrong size on TgfInventoryCheats_AddPackage");
static_assert(offsetof(TgfInventoryCheats_AddPackage, PackageId) == 0x000000, "Member 'TgfInventoryCheats_AddPackage::PackageId' has a wrong offset!");

// Function LyraGame.TgfInventoryCheats.InvenChangeSize
// 0x000C (0x000C - 0x0000)
struct TgfInventoryCheats_InvenChangeSize final
{
public:
	int32                                         SizeX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryCheats_InvenChangeSize) == 0x000004, "Wrong alignment on TgfInventoryCheats_InvenChangeSize");
static_assert(sizeof(TgfInventoryCheats_InvenChangeSize) == 0x00000C, "Wrong size on TgfInventoryCheats_InvenChangeSize");
static_assert(offsetof(TgfInventoryCheats_InvenChangeSize, SizeX) == 0x000000, "Member 'TgfInventoryCheats_InvenChangeSize::SizeX' has a wrong offset!");
static_assert(offsetof(TgfInventoryCheats_InvenChangeSize, SizeY) == 0x000004, "Member 'TgfInventoryCheats_InvenChangeSize::SizeY' has a wrong offset!");
static_assert(offsetof(TgfInventoryCheats_InvenChangeSize, Type) == 0x000008, "Member 'TgfInventoryCheats_InvenChangeSize::Type' has a wrong offset!");

// Function LyraGame.TgfInventoryCheats.RemoveItem
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryCheats_RemoveItem final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nums;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryCheats_RemoveItem) == 0x000008, "Wrong alignment on TgfInventoryCheats_RemoveItem");
static_assert(sizeof(TgfInventoryCheats_RemoveItem) == 0x000018, "Wrong size on TgfInventoryCheats_RemoveItem");
static_assert(offsetof(TgfInventoryCheats_RemoveItem, AssetName) == 0x000000, "Member 'TgfInventoryCheats_RemoveItem::AssetName' has a wrong offset!");
static_assert(offsetof(TgfInventoryCheats_RemoveItem, Nums) == 0x000010, "Member 'TgfInventoryCheats_RemoveItem::Nums' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.GetDefaultInventorySize
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryManagerComponent_GetDefaultInventorySize final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryManagerComponent_GetDefaultInventorySize) == 0x000004, "Wrong alignment on TgfInventoryManagerComponent_GetDefaultInventorySize");
static_assert(sizeof(TgfInventoryManagerComponent_GetDefaultInventorySize) == 0x000008, "Wrong size on TgfInventoryManagerComponent_GetDefaultInventorySize");
static_assert(offsetof(TgfInventoryManagerComponent_GetDefaultInventorySize, ReturnValue) == 0x000000, "Member 'TgfInventoryManagerComponent_GetDefaultInventorySize::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.GetDefaultInventorySizeInPVP
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryManagerComponent_GetDefaultInventorySizeInPVP final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryManagerComponent_GetDefaultInventorySizeInPVP) == 0x000004, "Wrong alignment on TgfInventoryManagerComponent_GetDefaultInventorySizeInPVP");
static_assert(sizeof(TgfInventoryManagerComponent_GetDefaultInventorySizeInPVP) == 0x000008, "Wrong size on TgfInventoryManagerComponent_GetDefaultInventorySizeInPVP");
static_assert(offsetof(TgfInventoryManagerComponent_GetDefaultInventorySizeInPVP, ReturnValue) == 0x000000, "Member 'TgfInventoryManagerComponent_GetDefaultInventorySizeInPVP::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.AddItemInstanceWithPosition
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryManagerComponent_AddItemInstanceWithPosition final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Position;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryManagerComponent_AddItemInstanceWithPosition) == 0x000008, "Wrong alignment on TgfInventoryManagerComponent_AddItemInstanceWithPosition");
static_assert(sizeof(TgfInventoryManagerComponent_AddItemInstanceWithPosition) == 0x000018, "Wrong size on TgfInventoryManagerComponent_AddItemInstanceWithPosition");
static_assert(offsetof(TgfInventoryManagerComponent_AddItemInstanceWithPosition, ItemInstance) == 0x000000, "Member 'TgfInventoryManagerComponent_AddItemInstanceWithPosition::ItemInstance' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_AddItemInstanceWithPosition, Position) == 0x000008, "Member 'TgfInventoryManagerComponent_AddItemInstanceWithPosition::Position' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_AddItemInstanceWithPosition, InventoryType) == 0x000010, "Member 'TgfInventoryManagerComponent_AddItemInstanceWithPosition::InventoryType' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.ChangeEntryPosByInstance
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryManagerComponent_ChangeEntryPosByInstance final
{
public:
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Position;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryManagerComponent_ChangeEntryPosByInstance) == 0x000008, "Wrong alignment on TgfInventoryManagerComponent_ChangeEntryPosByInstance");
static_assert(sizeof(TgfInventoryManagerComponent_ChangeEntryPosByInstance) == 0x000018, "Wrong size on TgfInventoryManagerComponent_ChangeEntryPosByInstance");
static_assert(offsetof(TgfInventoryManagerComponent_ChangeEntryPosByInstance, ItemInstance) == 0x000000, "Member 'TgfInventoryManagerComponent_ChangeEntryPosByInstance::ItemInstance' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_ChangeEntryPosByInstance, Position) == 0x000008, "Member 'TgfInventoryManagerComponent_ChangeEntryPosByInstance::Position' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_ChangeEntryPosByInstance, InventoryType) == 0x000010, "Member 'TgfInventoryManagerComponent_ChangeEntryPosByInstance::InventoryType' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.DropAllAddtionalInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryManagerComponent_DropAllAddtionalInventoryItem final
{
public:
	TArray<class ULyraInventoryItemInstance*>     DropItems;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryManagerComponent_DropAllAddtionalInventoryItem) == 0x000008, "Wrong alignment on TgfInventoryManagerComponent_DropAllAddtionalInventoryItem");
static_assert(sizeof(TgfInventoryManagerComponent_DropAllAddtionalInventoryItem) == 0x000010, "Wrong size on TgfInventoryManagerComponent_DropAllAddtionalInventoryItem");
static_assert(offsetof(TgfInventoryManagerComponent_DropAllAddtionalInventoryItem, DropItems) == 0x000000, "Member 'TgfInventoryManagerComponent_DropAllAddtionalInventoryItem::DropItems' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.ExchangeItemInstances
// 0x0028 (0x0028 - 0x0000)
struct TgfInventoryManagerComponent_ExchangeItemInstances final
{
public:
	TArray<class ULyraInventoryItemInstance*>     AddInstances;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ULyraInventoryItemInstance*>     RemoveInstances;                                   // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckInInventory;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryManagerComponent_ExchangeItemInstances) == 0x000008, "Wrong alignment on TgfInventoryManagerComponent_ExchangeItemInstances");
static_assert(sizeof(TgfInventoryManagerComponent_ExchangeItemInstances) == 0x000028, "Wrong size on TgfInventoryManagerComponent_ExchangeItemInstances");
static_assert(offsetof(TgfInventoryManagerComponent_ExchangeItemInstances, AddInstances) == 0x000000, "Member 'TgfInventoryManagerComponent_ExchangeItemInstances::AddInstances' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_ExchangeItemInstances, RemoveInstances) == 0x000010, "Member 'TgfInventoryManagerComponent_ExchangeItemInstances::RemoveInstances' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_ExchangeItemInstances, InventoryType) == 0x000020, "Member 'TgfInventoryManagerComponent_ExchangeItemInstances::InventoryType' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_ExchangeItemInstances, CheckInInventory) == 0x000021, "Member 'TgfInventoryManagerComponent_ExchangeItemInstances::CheckInInventory' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.InitAdditionalInventoryWithSize
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryManagerComponent_InitAdditionalInventoryWithSize final
{
public:
	struct FIntPoint                              InventorySize;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryManagerComponent_InitAdditionalInventoryWithSize) == 0x000004, "Wrong alignment on TgfInventoryManagerComponent_InitAdditionalInventoryWithSize");
static_assert(sizeof(TgfInventoryManagerComponent_InitAdditionalInventoryWithSize) == 0x000008, "Wrong size on TgfInventoryManagerComponent_InitAdditionalInventoryWithSize");
static_assert(offsetof(TgfInventoryManagerComponent_InitAdditionalInventoryWithSize, InventorySize) == 0x000000, "Member 'TgfInventoryManagerComponent_InitAdditionalInventoryWithSize::InventorySize' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.InitInventoryWithSize
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryManagerComponent_InitInventoryWithSize final
{
public:
	struct FIntPoint                              InventorySize;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryManagerComponent_InitInventoryWithSize) == 0x000004, "Wrong alignment on TgfInventoryManagerComponent_InitInventoryWithSize");
static_assert(sizeof(TgfInventoryManagerComponent_InitInventoryWithSize) == 0x000008, "Wrong size on TgfInventoryManagerComponent_InitInventoryWithSize");
static_assert(offsetof(TgfInventoryManagerComponent_InitInventoryWithSize, InventorySize) == 0x000000, "Member 'TgfInventoryManagerComponent_InitInventoryWithSize::InventorySize' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.IsAdditonalInventoryEnable
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryManagerComponent_IsAdditonalInventoryEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryManagerComponent_IsAdditonalInventoryEnable) == 0x000001, "Wrong alignment on TgfInventoryManagerComponent_IsAdditonalInventoryEnable");
static_assert(sizeof(TgfInventoryManagerComponent_IsAdditonalInventoryEnable) == 0x000001, "Wrong size on TgfInventoryManagerComponent_IsAdditonalInventoryEnable");
static_assert(offsetof(TgfInventoryManagerComponent_IsAdditonalInventoryEnable, ReturnValue) == 0x000000, "Member 'TgfInventoryManagerComponent_IsAdditonalInventoryEnable::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.ResizeInventory
// 0x000C (0x000C - 0x0000)
struct TgfInventoryManagerComponent_ResizeInventory final
{
public:
	struct FIntPoint                              NewSize;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryManagerComponent_ResizeInventory) == 0x000004, "Wrong alignment on TgfInventoryManagerComponent_ResizeInventory");
static_assert(sizeof(TgfInventoryManagerComponent_ResizeInventory) == 0x00000C, "Wrong size on TgfInventoryManagerComponent_ResizeInventory");
static_assert(offsetof(TgfInventoryManagerComponent_ResizeInventory, NewSize) == 0x000000, "Member 'TgfInventoryManagerComponent_ResizeInventory::NewSize' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_ResizeInventory, InventoryType) == 0x000008, "Member 'TgfInventoryManagerComponent_ResizeInventory::InventoryType' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.CanExchangeItemInstances
// 0x0028 (0x0028 - 0x0000)
struct TgfInventoryManagerComponent_CanExchangeItemInstances final
{
public:
	TArray<class ULyraInventoryItemInstance*>     AddInstances;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ULyraInventoryItemInstance*>     RemoveInstances;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckInInventory;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryManagerComponent_CanExchangeItemInstances) == 0x000008, "Wrong alignment on TgfInventoryManagerComponent_CanExchangeItemInstances");
static_assert(sizeof(TgfInventoryManagerComponent_CanExchangeItemInstances) == 0x000028, "Wrong size on TgfInventoryManagerComponent_CanExchangeItemInstances");
static_assert(offsetof(TgfInventoryManagerComponent_CanExchangeItemInstances, AddInstances) == 0x000000, "Member 'TgfInventoryManagerComponent_CanExchangeItemInstances::AddInstances' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_CanExchangeItemInstances, RemoveInstances) == 0x000010, "Member 'TgfInventoryManagerComponent_CanExchangeItemInstances::RemoveInstances' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_CanExchangeItemInstances, InventoryType) == 0x000020, "Member 'TgfInventoryManagerComponent_CanExchangeItemInstances::InventoryType' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_CanExchangeItemInstances, CheckInInventory) == 0x000021, "Member 'TgfInventoryManagerComponent_CanExchangeItemInstances::CheckInInventory' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_CanExchangeItemInstances, ReturnValue) == 0x000022, "Member 'TgfInventoryManagerComponent_CanExchangeItemInstances::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.CanResizeInventory
// 0x000C (0x000C - 0x0000)
struct TgfInventoryManagerComponent_CanResizeInventory final
{
public:
	struct FIntPoint                              NewSize;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryManagerComponent_CanResizeInventory) == 0x000004, "Wrong alignment on TgfInventoryManagerComponent_CanResizeInventory");
static_assert(sizeof(TgfInventoryManagerComponent_CanResizeInventory) == 0x00000C, "Wrong size on TgfInventoryManagerComponent_CanResizeInventory");
static_assert(offsetof(TgfInventoryManagerComponent_CanResizeInventory, NewSize) == 0x000000, "Member 'TgfInventoryManagerComponent_CanResizeInventory::NewSize' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_CanResizeInventory, InventoryType) == 0x000008, "Member 'TgfInventoryManagerComponent_CanResizeInventory::InventoryType' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_CanResizeInventory, ReturnValue) == 0x000009, "Member 'TgfInventoryManagerComponent_CanResizeInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.GetEntryByPos
// 0x0038 (0x0038 - 0x0000)
struct TgfInventoryManagerComponent_GetEntryByPos final
{
public:
	struct FIntPoint                              Position;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLyraInventoryEntry                    Entry;                                             // 0x0008(0x0028)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryManagerComponent_GetEntryByPos) == 0x000008, "Wrong alignment on TgfInventoryManagerComponent_GetEntryByPos");
static_assert(sizeof(TgfInventoryManagerComponent_GetEntryByPos) == 0x000038, "Wrong size on TgfInventoryManagerComponent_GetEntryByPos");
static_assert(offsetof(TgfInventoryManagerComponent_GetEntryByPos, Position) == 0x000000, "Member 'TgfInventoryManagerComponent_GetEntryByPos::Position' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_GetEntryByPos, Entry) == 0x000008, "Member 'TgfInventoryManagerComponent_GetEntryByPos::Entry' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_GetEntryByPos, InventoryType) == 0x000030, "Member 'TgfInventoryManagerComponent_GetEntryByPos::InventoryType' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_GetEntryByPos, ReturnValue) == 0x000031, "Member 'TgfInventoryManagerComponent_GetEntryByPos::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.GetItemInstanceByPos
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryManagerComponent_GetItemInstanceByPos final
{
public:
	struct FIntPoint                              Position;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryManagerComponent_GetItemInstanceByPos) == 0x000008, "Wrong alignment on TgfInventoryManagerComponent_GetItemInstanceByPos");
static_assert(sizeof(TgfInventoryManagerComponent_GetItemInstanceByPos) == 0x000018, "Wrong size on TgfInventoryManagerComponent_GetItemInstanceByPos");
static_assert(offsetof(TgfInventoryManagerComponent_GetItemInstanceByPos, Position) == 0x000000, "Member 'TgfInventoryManagerComponent_GetItemInstanceByPos::Position' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_GetItemInstanceByPos, InventoryType) == 0x000008, "Member 'TgfInventoryManagerComponent_GetItemInstanceByPos::InventoryType' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_GetItemInstanceByPos, ReturnValue) == 0x000010, "Member 'TgfInventoryManagerComponent_GetItemInstanceByPos::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.GetItemSize
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryManagerComponent_GetItemSize final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryManagerComponent_GetItemSize) == 0x000008, "Wrong alignment on TgfInventoryManagerComponent_GetItemSize");
static_assert(sizeof(TgfInventoryManagerComponent_GetItemSize) == 0x000010, "Wrong size on TgfInventoryManagerComponent_GetItemSize");
static_assert(offsetof(TgfInventoryManagerComponent_GetItemSize, ItemClass) == 0x000000, "Member 'TgfInventoryManagerComponent_GetItemSize::ItemClass' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_GetItemSize, ReturnValue) == 0x000008, "Member 'TgfInventoryManagerComponent_GetItemSize::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.GetSize
// 0x000C (0x000C - 0x0000)
struct TgfInventoryManagerComponent_GetSize final
{
public:
	ELyraInventoryType                            InventoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryManagerComponent_GetSize) == 0x000004, "Wrong alignment on TgfInventoryManagerComponent_GetSize");
static_assert(sizeof(TgfInventoryManagerComponent_GetSize) == 0x00000C, "Wrong size on TgfInventoryManagerComponent_GetSize");
static_assert(offsetof(TgfInventoryManagerComponent_GetSize, InventoryType) == 0x000000, "Member 'TgfInventoryManagerComponent_GetSize::InventoryType' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_GetSize, ReturnValue) == 0x000004, "Member 'TgfInventoryManagerComponent_GetSize::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.IsPositionValid
// 0x001C (0x001C - 0x0000)
struct TgfInventoryManagerComponent_IsPositionValid final
{
public:
	struct FIntPoint                              Position;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ItemSize;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreIndex;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryManagerComponent_IsPositionValid) == 0x000004, "Wrong alignment on TgfInventoryManagerComponent_IsPositionValid");
static_assert(sizeof(TgfInventoryManagerComponent_IsPositionValid) == 0x00001C, "Wrong size on TgfInventoryManagerComponent_IsPositionValid");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValid, Position) == 0x000000, "Member 'TgfInventoryManagerComponent_IsPositionValid::Position' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValid, ItemSize) == 0x000008, "Member 'TgfInventoryManagerComponent_IsPositionValid::ItemSize' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValid, InventoryType) == 0x000010, "Member 'TgfInventoryManagerComponent_IsPositionValid::InventoryType' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValid, IgnoreIndex) == 0x000014, "Member 'TgfInventoryManagerComponent_IsPositionValid::IgnoreIndex' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValid, ReturnValue) == 0x000018, "Member 'TgfInventoryManagerComponent_IsPositionValid::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.IsPositionValidByItemDef
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryManagerComponent_IsPositionValidByItemDef final
{
public:
	struct FIntPoint                              Position;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryManagerComponent_IsPositionValidByItemDef) == 0x000008, "Wrong alignment on TgfInventoryManagerComponent_IsPositionValidByItemDef");
static_assert(sizeof(TgfInventoryManagerComponent_IsPositionValidByItemDef) == 0x000018, "Wrong size on TgfInventoryManagerComponent_IsPositionValidByItemDef");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValidByItemDef, Position) == 0x000000, "Member 'TgfInventoryManagerComponent_IsPositionValidByItemDef::Position' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValidByItemDef, ItemDef) == 0x000008, "Member 'TgfInventoryManagerComponent_IsPositionValidByItemDef::ItemDef' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValidByItemDef, InventoryType) == 0x000010, "Member 'TgfInventoryManagerComponent_IsPositionValidByItemDef::InventoryType' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValidByItemDef, ReturnValue) == 0x000011, "Member 'TgfInventoryManagerComponent_IsPositionValidByItemDef::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryManagerComponent.IsPositionValidByItemInstance
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryManagerComponent_IsPositionValidByItemInstance final
{
public:
	struct FIntPoint                              Position;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraInventoryItemInstance*             ItemInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InventoryType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryManagerComponent_IsPositionValidByItemInstance) == 0x000008, "Wrong alignment on TgfInventoryManagerComponent_IsPositionValidByItemInstance");
static_assert(sizeof(TgfInventoryManagerComponent_IsPositionValidByItemInstance) == 0x000018, "Wrong size on TgfInventoryManagerComponent_IsPositionValidByItemInstance");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValidByItemInstance, Position) == 0x000000, "Member 'TgfInventoryManagerComponent_IsPositionValidByItemInstance::Position' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValidByItemInstance, ItemInstance) == 0x000008, "Member 'TgfInventoryManagerComponent_IsPositionValidByItemInstance::ItemInstance' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValidByItemInstance, InventoryType) == 0x000010, "Member 'TgfInventoryManagerComponent_IsPositionValidByItemInstance::InventoryType' has a wrong offset!");
static_assert(offsetof(TgfInventoryManagerComponent_IsPositionValidByItemInstance, ReturnValue) == 0x000011, "Member 'TgfInventoryManagerComponent_IsPositionValidByItemInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryRoleWrapper_InGame.CreateInventoryRoleWrapperFromActor
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryRoleWrapper_InGame_CreateInventoryRoleWrapperFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             RoleDisplaytable;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryRoleWrapper_InGame*        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_InGame_CreateInventoryRoleWrapperFromActor) == 0x000008, "Wrong alignment on TgfInventoryRoleWrapper_InGame_CreateInventoryRoleWrapperFromActor");
static_assert(sizeof(TgfInventoryRoleWrapper_InGame_CreateInventoryRoleWrapperFromActor) == 0x000018, "Wrong size on TgfInventoryRoleWrapper_InGame_CreateInventoryRoleWrapperFromActor");
static_assert(offsetof(TgfInventoryRoleWrapper_InGame_CreateInventoryRoleWrapperFromActor, Actor) == 0x000000, "Member 'TgfInventoryRoleWrapper_InGame_CreateInventoryRoleWrapperFromActor::Actor' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_InGame_CreateInventoryRoleWrapperFromActor, RoleDisplaytable) == 0x000008, "Member 'TgfInventoryRoleWrapper_InGame_CreateInventoryRoleWrapperFromActor::RoleDisplaytable' has a wrong offset!");
static_assert(offsetof(TgfInventoryRoleWrapper_InGame_CreateInventoryRoleWrapperFromActor, ReturnValue) == 0x000010, "Member 'TgfInventoryRoleWrapper_InGame_CreateInventoryRoleWrapperFromActor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryRoleWrapper_InGame.GetActorCareer
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryRoleWrapper_InGame_GetActorCareer final
{
public:
	ETgfActorCareer                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_InGame_GetActorCareer) == 0x000001, "Wrong alignment on TgfInventoryRoleWrapper_InGame_GetActorCareer");
static_assert(sizeof(TgfInventoryRoleWrapper_InGame_GetActorCareer) == 0x000001, "Wrong size on TgfInventoryRoleWrapper_InGame_GetActorCareer");
static_assert(offsetof(TgfInventoryRoleWrapper_InGame_GetActorCareer, ReturnValue) == 0x000000, "Member 'TgfInventoryRoleWrapper_InGame_GetActorCareer::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryRoleWrapper_InGame.GetActorRace
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryRoleWrapper_InGame_GetActorRace final
{
public:
	ETgfActorRace                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryRoleWrapper_InGame_GetActorRace) == 0x000001, "Wrong alignment on TgfInventoryRoleWrapper_InGame_GetActorRace");
static_assert(sizeof(TgfInventoryRoleWrapper_InGame_GetActorRace) == 0x000001, "Wrong size on TgfInventoryRoleWrapper_InGame_GetActorRace");
static_assert(offsetof(TgfInventoryRoleWrapper_InGame_GetActorRace, ReturnValue) == 0x000000, "Member 'TgfInventoryRoleWrapper_InGame_GetActorRace::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.AreItemGearable
// 0x0030 (0x0030 - 0x0000)
struct TgfInventoryWrapper_AreItemGearable final
{
public:
	const class UTgfInventoryItemWrapper*         Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTgfInventoryItemWrapper*         Diamond;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutFailReason;                                     // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_AreItemGearable) == 0x000008, "Wrong alignment on TgfInventoryWrapper_AreItemGearable");
static_assert(sizeof(TgfInventoryWrapper_AreItemGearable) == 0x000030, "Wrong size on TgfInventoryWrapper_AreItemGearable");
static_assert(offsetof(TgfInventoryWrapper_AreItemGearable, Item) == 0x000000, "Member 'TgfInventoryWrapper_AreItemGearable::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_AreItemGearable, Diamond) == 0x000008, "Member 'TgfInventoryWrapper_AreItemGearable::Diamond' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_AreItemGearable, OutFailReason) == 0x000010, "Member 'TgfInventoryWrapper_AreItemGearable::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_AreItemGearable, ReturnValue) == 0x000028, "Member 'TgfInventoryWrapper_AreItemGearable::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.AddToInventoryAutoPlacement
// 0x0038 (0x0038 - 0x0000)
struct TgfInventoryWrapper_AddToInventoryAutoPlacement final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ItemInventory;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommit;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutFailReason;                                     // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_AddToInventoryAutoPlacement) == 0x000008, "Wrong alignment on TgfInventoryWrapper_AddToInventoryAutoPlacement");
static_assert(sizeof(TgfInventoryWrapper_AddToInventoryAutoPlacement) == 0x000038, "Wrong size on TgfInventoryWrapper_AddToInventoryAutoPlacement");
static_assert(offsetof(TgfInventoryWrapper_AddToInventoryAutoPlacement, Item) == 0x000000, "Member 'TgfInventoryWrapper_AddToInventoryAutoPlacement::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_AddToInventoryAutoPlacement, ItemInventory) == 0x000008, "Member 'TgfInventoryWrapper_AddToInventoryAutoPlacement::ItemInventory' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_AddToInventoryAutoPlacement, bCommit) == 0x000010, "Member 'TgfInventoryWrapper_AddToInventoryAutoPlacement::bCommit' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_AddToInventoryAutoPlacement, OutFailReason) == 0x000018, "Member 'TgfInventoryWrapper_AddToInventoryAutoPlacement::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_AddToInventoryAutoPlacement, ReturnValue) == 0x000030, "Member 'TgfInventoryWrapper_AddToInventoryAutoPlacement::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.AddToMenu
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryWrapper_AddToMenu final
{
public:
	class UWidget*                                WidgetToAdd;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_AddToMenu) == 0x000008, "Wrong alignment on TgfInventoryWrapper_AddToMenu");
static_assert(sizeof(TgfInventoryWrapper_AddToMenu) == 0x000008, "Wrong size on TgfInventoryWrapper_AddToMenu");
static_assert(offsetof(TgfInventoryWrapper_AddToMenu, WidgetToAdd) == 0x000000, "Member 'TgfInventoryWrapper_AddToMenu::WidgetToAdd' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.CanDiscardEquipment
// 0x0038 (0x0038 - 0x0000)
struct TgfInventoryWrapper_CanDiscardEquipment final
{
public:
	class UTgfEquipmentWrapper*                   Equipment;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTgfEquipmentWrapper*>           OutEquipmentsToDiscard;                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   OutFailReason;                                     // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_CanDiscardEquipment) == 0x000008, "Wrong alignment on TgfInventoryWrapper_CanDiscardEquipment");
static_assert(sizeof(TgfInventoryWrapper_CanDiscardEquipment) == 0x000038, "Wrong size on TgfInventoryWrapper_CanDiscardEquipment");
static_assert(offsetof(TgfInventoryWrapper_CanDiscardEquipment, Equipment) == 0x000000, "Member 'TgfInventoryWrapper_CanDiscardEquipment::Equipment' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_CanDiscardEquipment, OutEquipmentsToDiscard) == 0x000008, "Member 'TgfInventoryWrapper_CanDiscardEquipment::OutEquipmentsToDiscard' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_CanDiscardEquipment, OutFailReason) == 0x000018, "Member 'TgfInventoryWrapper_CanDiscardEquipment::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_CanDiscardEquipment, ReturnValue) == 0x000030, "Member 'TgfInventoryWrapper_CanDiscardEquipment::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.CanDiscardInventoryItem
// 0x0028 (0x0028 - 0x0000)
struct TgfInventoryWrapper_CanDiscardInventoryItem final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutFailReason;                                     // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_CanDiscardInventoryItem) == 0x000008, "Wrong alignment on TgfInventoryWrapper_CanDiscardInventoryItem");
static_assert(sizeof(TgfInventoryWrapper_CanDiscardInventoryItem) == 0x000028, "Wrong size on TgfInventoryWrapper_CanDiscardInventoryItem");
static_assert(offsetof(TgfInventoryWrapper_CanDiscardInventoryItem, Item) == 0x000000, "Member 'TgfInventoryWrapper_CanDiscardInventoryItem::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_CanDiscardInventoryItem, OutFailReason) == 0x000008, "Member 'TgfInventoryWrapper_CanDiscardInventoryItem::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_CanDiscardInventoryItem, ReturnValue) == 0x000020, "Member 'TgfInventoryWrapper_CanDiscardInventoryItem::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.CanTakeoffMainweapon
// 0x0002 (0x0002 - 0x0000)
struct TgfInventoryWrapper_CanTakeoffMainweapon final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_CanTakeoffMainweapon) == 0x000001, "Wrong alignment on TgfInventoryWrapper_CanTakeoffMainweapon");
static_assert(sizeof(TgfInventoryWrapper_CanTakeoffMainweapon) == 0x000002, "Wrong size on TgfInventoryWrapper_CanTakeoffMainweapon");
static_assert(offsetof(TgfInventoryWrapper_CanTakeoffMainweapon, Slot) == 0x000000, "Member 'TgfInventoryWrapper_CanTakeoffMainweapon::Slot' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_CanTakeoffMainweapon, ReturnValue) == 0x000001, "Member 'TgfInventoryWrapper_CanTakeoffMainweapon::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.CheckMyHeirloom
// 0x0028 (0x0028 - 0x0000)
struct TgfInventoryWrapper_CheckMyHeirloom final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutFailReason;                                     // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_CheckMyHeirloom) == 0x000008, "Wrong alignment on TgfInventoryWrapper_CheckMyHeirloom");
static_assert(sizeof(TgfInventoryWrapper_CheckMyHeirloom) == 0x000028, "Wrong size on TgfInventoryWrapper_CheckMyHeirloom");
static_assert(offsetof(TgfInventoryWrapper_CheckMyHeirloom, Item) == 0x000000, "Member 'TgfInventoryWrapper_CheckMyHeirloom::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_CheckMyHeirloom, OutFailReason) == 0x000008, "Member 'TgfInventoryWrapper_CheckMyHeirloom::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_CheckMyHeirloom, ReturnValue) == 0x000020, "Member 'TgfInventoryWrapper_CheckMyHeirloom::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.DropToEquipmentSlot
// 0x0030 (0x0030 - 0x0000)
struct TgfInventoryWrapper_DropToEquipmentSlot final
{
public:
	class UTgfInventoryDragDropOperation*         DragOperation;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommit;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutFailReason;                                     // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_DropToEquipmentSlot) == 0x000008, "Wrong alignment on TgfInventoryWrapper_DropToEquipmentSlot");
static_assert(sizeof(TgfInventoryWrapper_DropToEquipmentSlot) == 0x000030, "Wrong size on TgfInventoryWrapper_DropToEquipmentSlot");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlot, DragOperation) == 0x000000, "Member 'TgfInventoryWrapper_DropToEquipmentSlot::DragOperation' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlot, Slot) == 0x000008, "Member 'TgfInventoryWrapper_DropToEquipmentSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlot, bCommit) == 0x000009, "Member 'TgfInventoryWrapper_DropToEquipmentSlot::bCommit' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlot, SlotId) == 0x00000C, "Member 'TgfInventoryWrapper_DropToEquipmentSlot::SlotId' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlot, OutFailReason) == 0x000010, "Member 'TgfInventoryWrapper_DropToEquipmentSlot::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlot, ReturnValue) == 0x000028, "Member 'TgfInventoryWrapper_DropToEquipmentSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.DropToEquipmentSlotForLua
// 0x0038 (0x0038 - 0x0000)
struct TgfInventoryWrapper_DropToEquipmentSlotForLua final
{
public:
	class UTgfInventoryDragDropOperation*         DragOperation;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommit;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotId;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutFailReason;                                     // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_DropToEquipmentSlotForLua) == 0x000008, "Wrong alignment on TgfInventoryWrapper_DropToEquipmentSlotForLua");
static_assert(sizeof(TgfInventoryWrapper_DropToEquipmentSlotForLua) == 0x000038, "Wrong size on TgfInventoryWrapper_DropToEquipmentSlotForLua");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlotForLua, DragOperation) == 0x000000, "Member 'TgfInventoryWrapper_DropToEquipmentSlotForLua::DragOperation' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlotForLua, Slot) == 0x000008, "Member 'TgfInventoryWrapper_DropToEquipmentSlotForLua::Slot' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlotForLua, bCommit) == 0x00000C, "Member 'TgfInventoryWrapper_DropToEquipmentSlotForLua::bCommit' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlotForLua, SlotId) == 0x000010, "Member 'TgfInventoryWrapper_DropToEquipmentSlotForLua::SlotId' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlotForLua, OutFailReason) == 0x000018, "Member 'TgfInventoryWrapper_DropToEquipmentSlotForLua::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToEquipmentSlotForLua, ReturnValue) == 0x000030, "Member 'TgfInventoryWrapper_DropToEquipmentSlotForLua::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.DropToInventory
// 0x0040 (0x0040 - 0x0000)
struct TgfInventoryWrapper_DropToInventory final
{
public:
	class UTgfInventoryDragDropOperation*         DragOperation;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              DropPosition;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              DropSize;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommit;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotId;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutFailReason;                                     // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_DropToInventory) == 0x000008, "Wrong alignment on TgfInventoryWrapper_DropToInventory");
static_assert(sizeof(TgfInventoryWrapper_DropToInventory) == 0x000040, "Wrong size on TgfInventoryWrapper_DropToInventory");
static_assert(offsetof(TgfInventoryWrapper_DropToInventory, DragOperation) == 0x000000, "Member 'TgfInventoryWrapper_DropToInventory::DragOperation' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToInventory, DropPosition) == 0x000008, "Member 'TgfInventoryWrapper_DropToInventory::DropPosition' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToInventory, DropSize) == 0x000010, "Member 'TgfInventoryWrapper_DropToInventory::DropSize' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToInventory, bCommit) == 0x000018, "Member 'TgfInventoryWrapper_DropToInventory::bCommit' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToInventory, SlotId) == 0x00001C, "Member 'TgfInventoryWrapper_DropToInventory::SlotId' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToInventory, OutFailReason) == 0x000020, "Member 'TgfInventoryWrapper_DropToInventory::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_DropToInventory, ReturnValue) == 0x000038, "Member 'TgfInventoryWrapper_DropToInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.FindCompareTargetForItem
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_FindCompareTargetForItem final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryItemWrapper*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_FindCompareTargetForItem) == 0x000008, "Wrong alignment on TgfInventoryWrapper_FindCompareTargetForItem");
static_assert(sizeof(TgfInventoryWrapper_FindCompareTargetForItem) == 0x000010, "Wrong size on TgfInventoryWrapper_FindCompareTargetForItem");
static_assert(offsetof(TgfInventoryWrapper_FindCompareTargetForItem, Item) == 0x000000, "Member 'TgfInventoryWrapper_FindCompareTargetForItem::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_FindCompareTargetForItem, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_FindCompareTargetForItem::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GearinItem
// 0x0028 (0x0028 - 0x0000)
struct TgfInventoryWrapper_GearinItem final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryItemWrapper*               Diamond;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   FromContext;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 EquipSlot;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GemSlot;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GearinItem) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GearinItem");
static_assert(sizeof(TgfInventoryWrapper_GearinItem) == 0x000028, "Wrong size on TgfInventoryWrapper_GearinItem");
static_assert(offsetof(TgfInventoryWrapper_GearinItem, Item) == 0x000000, "Member 'TgfInventoryWrapper_GearinItem::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GearinItem, ItemContext) == 0x000008, "Member 'TgfInventoryWrapper_GearinItem::ItemContext' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GearinItem, Diamond) == 0x000010, "Member 'TgfInventoryWrapper_GearinItem::Diamond' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GearinItem, FromContext) == 0x000018, "Member 'TgfInventoryWrapper_GearinItem::FromContext' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GearinItem, EquipSlot) == 0x000020, "Member 'TgfInventoryWrapper_GearinItem::EquipSlot' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GearinItem, GemSlot) == 0x000024, "Member 'TgfInventoryWrapper_GearinItem::GemSlot' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetAllEquipments
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_GetAllEquipments final
{
public:
	TArray<class UTgfEquipmentWrapper*>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetAllEquipments) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetAllEquipments");
static_assert(sizeof(TgfInventoryWrapper_GetAllEquipments) == 0x000010, "Wrong size on TgfInventoryWrapper_GetAllEquipments");
static_assert(offsetof(TgfInventoryWrapper_GetAllEquipments, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_GetAllEquipments::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetAverageDefence
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryWrapper_GetAverageDefence final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetAverageDefence) == 0x000004, "Wrong alignment on TgfInventoryWrapper_GetAverageDefence");
static_assert(sizeof(TgfInventoryWrapper_GetAverageDefence) == 0x000004, "Wrong size on TgfInventoryWrapper_GetAverageDefence");
static_assert(offsetof(TgfInventoryWrapper_GetAverageDefence, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_GetAverageDefence::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetAverageDPH
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryWrapper_GetAverageDPH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetAverageDPH) == 0x000004, "Wrong alignment on TgfInventoryWrapper_GetAverageDPH");
static_assert(sizeof(TgfInventoryWrapper_GetAverageDPH) == 0x000004, "Wrong size on TgfInventoryWrapper_GetAverageDPH");
static_assert(offsetof(TgfInventoryWrapper_GetAverageDPH, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_GetAverageDPH::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetCurrentGroup
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryWrapper_GetCurrentGroup final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetCurrentGroup) == 0x000004, "Wrong alignment on TgfInventoryWrapper_GetCurrentGroup");
static_assert(sizeof(TgfInventoryWrapper_GetCurrentGroup) == 0x000004, "Wrong size on TgfInventoryWrapper_GetCurrentGroup");
static_assert(offsetof(TgfInventoryWrapper_GetCurrentGroup, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_GetCurrentGroup::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetEquipmentBySlot
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_GetEquipmentBySlot final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfEquipmentWrapper*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetEquipmentBySlot) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetEquipmentBySlot");
static_assert(sizeof(TgfInventoryWrapper_GetEquipmentBySlot) == 0x000010, "Wrong size on TgfInventoryWrapper_GetEquipmentBySlot");
static_assert(offsetof(TgfInventoryWrapper_GetEquipmentBySlot, Slot) == 0x000000, "Member 'TgfInventoryWrapper_GetEquipmentBySlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GetEquipmentBySlot, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_GetEquipmentBySlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetInventoryItems
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryWrapper_GetInventoryItems final
{
public:
	TArray<class UTgfInventoryItemWrapper*>       OutItems;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bReadFromCache;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_GetInventoryItems) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetInventoryItems");
static_assert(sizeof(TgfInventoryWrapper_GetInventoryItems) == 0x000018, "Wrong size on TgfInventoryWrapper_GetInventoryItems");
static_assert(offsetof(TgfInventoryWrapper_GetInventoryItems, OutItems) == 0x000000, "Member 'TgfInventoryWrapper_GetInventoryItems::OutItems' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GetInventoryItems, bReadFromCache) == 0x000010, "Member 'TgfInventoryWrapper_GetInventoryItems::bReadFromCache' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetInventoryItemsOfPage
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryWrapper_GetInventoryItemsOfPage final
{
public:
	bool                                          bReadFromCache;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTgfInventoryItemWrapper*>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetInventoryItemsOfPage) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetInventoryItemsOfPage");
static_assert(sizeof(TgfInventoryWrapper_GetInventoryItemsOfPage) == 0x000018, "Wrong size on TgfInventoryWrapper_GetInventoryItemsOfPage");
static_assert(offsetof(TgfInventoryWrapper_GetInventoryItemsOfPage, bReadFromCache) == 0x000000, "Member 'TgfInventoryWrapper_GetInventoryItemsOfPage::bReadFromCache' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GetInventoryItemsOfPage, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_GetInventoryItemsOfPage::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetItemFromPosition
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_GetItemFromPosition final
{
public:
	struct FIntPoint                              Position;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryItemWrapper*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetItemFromPosition) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetItemFromPosition");
static_assert(sizeof(TgfInventoryWrapper_GetItemFromPosition) == 0x000010, "Wrong size on TgfInventoryWrapper_GetItemFromPosition");
static_assert(offsetof(TgfInventoryWrapper_GetItemFromPosition, Position) == 0x000000, "Member 'TgfInventoryWrapper_GetItemFromPosition::Position' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GetItemFromPosition, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_GetItemFromPosition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.InvokeDragInitiatedEvent
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryWrapper_InvokeDragInitiatedEvent final
{
public:
	class UTgfInventoryDragDropOperation*         DragOperation;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_InvokeDragInitiatedEvent) == 0x000008, "Wrong alignment on TgfInventoryWrapper_InvokeDragInitiatedEvent");
static_assert(sizeof(TgfInventoryWrapper_InvokeDragInitiatedEvent) == 0x000008, "Wrong size on TgfInventoryWrapper_InvokeDragInitiatedEvent");
static_assert(offsetof(TgfInventoryWrapper_InvokeDragInitiatedEvent, DragOperation) == 0x000000, "Member 'TgfInventoryWrapper_InvokeDragInitiatedEvent::DragOperation' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.IsSoulBoundParts
// 0x0002 (0x0002 - 0x0000)
struct TgfInventoryWrapper_IsSoulBoundParts final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_IsSoulBoundParts) == 0x000001, "Wrong alignment on TgfInventoryWrapper_IsSoulBoundParts");
static_assert(sizeof(TgfInventoryWrapper_IsSoulBoundParts) == 0x000002, "Wrong size on TgfInventoryWrapper_IsSoulBoundParts");
static_assert(offsetof(TgfInventoryWrapper_IsSoulBoundParts, Slot) == 0x000000, "Member 'TgfInventoryWrapper_IsSoulBoundParts::Slot' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_IsSoulBoundParts, ReturnValue) == 0x000001, "Member 'TgfInventoryWrapper_IsSoulBoundParts::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.RemoveEquipmentToInventory
// 0x0030 (0x0030 - 0x0000)
struct TgfInventoryWrapper_RemoveEquipmentToInventory final
{
public:
	class UTgfEquipmentWrapper*                   Equipment;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommit;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutFailReason;                                     // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_RemoveEquipmentToInventory) == 0x000008, "Wrong alignment on TgfInventoryWrapper_RemoveEquipmentToInventory");
static_assert(sizeof(TgfInventoryWrapper_RemoveEquipmentToInventory) == 0x000030, "Wrong size on TgfInventoryWrapper_RemoveEquipmentToInventory");
static_assert(offsetof(TgfInventoryWrapper_RemoveEquipmentToInventory, Equipment) == 0x000000, "Member 'TgfInventoryWrapper_RemoveEquipmentToInventory::Equipment' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_RemoveEquipmentToInventory, bCommit) == 0x000008, "Member 'TgfInventoryWrapper_RemoveEquipmentToInventory::bCommit' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_RemoveEquipmentToInventory, OutFailReason) == 0x000010, "Member 'TgfInventoryWrapper_RemoveEquipmentToInventory::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_RemoveEquipmentToInventory, ReturnValue) == 0x000028, "Member 'TgfInventoryWrapper_RemoveEquipmentToInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.SetCurrentGroup
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryWrapper_SetCurrentGroup final
{
public:
	int32                                         Group;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_SetCurrentGroup) == 0x000004, "Wrong alignment on TgfInventoryWrapper_SetCurrentGroup");
static_assert(sizeof(TgfInventoryWrapper_SetCurrentGroup) == 0x000008, "Wrong size on TgfInventoryWrapper_SetCurrentGroup");
static_assert(offsetof(TgfInventoryWrapper_SetCurrentGroup, Group) == 0x000000, "Member 'TgfInventoryWrapper_SetCurrentGroup::Group' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_SetCurrentGroup, ReturnValue) == 0x000004, "Member 'TgfInventoryWrapper_SetCurrentGroup::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.SetInventoryType
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryWrapper_SetInventoryType final
{
public:
	ETgfInventoryType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_SetInventoryType) == 0x000001, "Wrong alignment on TgfInventoryWrapper_SetInventoryType");
static_assert(sizeof(TgfInventoryWrapper_SetInventoryType) == 0x000001, "Wrong size on TgfInventoryWrapper_SetInventoryType");
static_assert(offsetof(TgfInventoryWrapper_SetInventoryType, Type) == 0x000000, "Member 'TgfInventoryWrapper_SetInventoryType::Type' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.TryAutoStack
// 0x0038 (0x0038 - 0x0000)
struct TgfInventoryWrapper_TryAutoStack final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ItemInventory;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipSlot;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInventory;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommit;                                           // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutFailReason;                                     // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_TryAutoStack) == 0x000008, "Wrong alignment on TgfInventoryWrapper_TryAutoStack");
static_assert(sizeof(TgfInventoryWrapper_TryAutoStack) == 0x000038, "Wrong size on TgfInventoryWrapper_TryAutoStack");
static_assert(offsetof(TgfInventoryWrapper_TryAutoStack, Item) == 0x000000, "Member 'TgfInventoryWrapper_TryAutoStack::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryAutoStack, ItemInventory) == 0x000008, "Member 'TgfInventoryWrapper_TryAutoStack::ItemInventory' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryAutoStack, bEquipSlot) == 0x000010, "Member 'TgfInventoryWrapper_TryAutoStack::bEquipSlot' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryAutoStack, bInventory) == 0x000011, "Member 'TgfInventoryWrapper_TryAutoStack::bInventory' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryAutoStack, bCommit) == 0x000012, "Member 'TgfInventoryWrapper_TryAutoStack::bCommit' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryAutoStack, OutFailReason) == 0x000018, "Member 'TgfInventoryWrapper_TryAutoStack::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryAutoStack, ReturnValue) == 0x000030, "Member 'TgfInventoryWrapper_TryAutoStack::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.TryBeginItemDivide
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryWrapper_TryBeginItemDivide final
{
public:
	class UTgfInventoryItemWrapper*               SourceItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DivideNumber;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfInventoryItemWrapper*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_TryBeginItemDivide) == 0x000008, "Wrong alignment on TgfInventoryWrapper_TryBeginItemDivide");
static_assert(sizeof(TgfInventoryWrapper_TryBeginItemDivide) == 0x000018, "Wrong size on TgfInventoryWrapper_TryBeginItemDivide");
static_assert(offsetof(TgfInventoryWrapper_TryBeginItemDivide, SourceItem) == 0x000000, "Member 'TgfInventoryWrapper_TryBeginItemDivide::SourceItem' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryBeginItemDivide, DivideNumber) == 0x000008, "Member 'TgfInventoryWrapper_TryBeginItemDivide::DivideNumber' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryBeginItemDivide, ReturnValue) == 0x000010, "Member 'TgfInventoryWrapper_TryBeginItemDivide::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.TryCallInventoryLeftClickOverride
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_TryCallInventoryLeftClickOverride final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_TryCallInventoryLeftClickOverride) == 0x000008, "Wrong alignment on TgfInventoryWrapper_TryCallInventoryLeftClickOverride");
static_assert(sizeof(TgfInventoryWrapper_TryCallInventoryLeftClickOverride) == 0x000010, "Wrong size on TgfInventoryWrapper_TryCallInventoryLeftClickOverride");
static_assert(offsetof(TgfInventoryWrapper_TryCallInventoryLeftClickOverride, Item) == 0x000000, "Member 'TgfInventoryWrapper_TryCallInventoryLeftClickOverride::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryCallInventoryLeftClickOverride, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_TryCallInventoryLeftClickOverride::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.TryCallInventoryRightClickOverride
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_TryCallInventoryRightClickOverride final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_TryCallInventoryRightClickOverride) == 0x000008, "Wrong alignment on TgfInventoryWrapper_TryCallInventoryRightClickOverride");
static_assert(sizeof(TgfInventoryWrapper_TryCallInventoryRightClickOverride) == 0x000010, "Wrong size on TgfInventoryWrapper_TryCallInventoryRightClickOverride");
static_assert(offsetof(TgfInventoryWrapper_TryCallInventoryRightClickOverride, Item) == 0x000000, "Member 'TgfInventoryWrapper_TryCallInventoryRightClickOverride::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryCallInventoryRightClickOverride, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_TryCallInventoryRightClickOverride::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.TryMoveToInventory
// 0x0038 (0x0038 - 0x0000)
struct TgfInventoryWrapper_TryMoveToInventory final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ItemInventory;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableStack;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommit;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutFailReason;                                     // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_TryMoveToInventory) == 0x000008, "Wrong alignment on TgfInventoryWrapper_TryMoveToInventory");
static_assert(sizeof(TgfInventoryWrapper_TryMoveToInventory) == 0x000038, "Wrong size on TgfInventoryWrapper_TryMoveToInventory");
static_assert(offsetof(TgfInventoryWrapper_TryMoveToInventory, Item) == 0x000000, "Member 'TgfInventoryWrapper_TryMoveToInventory::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryMoveToInventory, ItemInventory) == 0x000008, "Member 'TgfInventoryWrapper_TryMoveToInventory::ItemInventory' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryMoveToInventory, DisableStack) == 0x000010, "Member 'TgfInventoryWrapper_TryMoveToInventory::DisableStack' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryMoveToInventory, bCommit) == 0x000011, "Member 'TgfInventoryWrapper_TryMoveToInventory::bCommit' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryMoveToInventory, OutFailReason) == 0x000018, "Member 'TgfInventoryWrapper_TryMoveToInventory::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryMoveToInventory, ReturnValue) == 0x000030, "Member 'TgfInventoryWrapper_TryMoveToInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.TryPutOnItem
// 0x0038 (0x0038 - 0x0000)
struct TgfInventoryWrapper_TryPutOnItem final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ItemInventory;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetEmptySlotOnly;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommit;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutFailReason;                                     // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_TryPutOnItem) == 0x000008, "Wrong alignment on TgfInventoryWrapper_TryPutOnItem");
static_assert(sizeof(TgfInventoryWrapper_TryPutOnItem) == 0x000038, "Wrong size on TgfInventoryWrapper_TryPutOnItem");
static_assert(offsetof(TgfInventoryWrapper_TryPutOnItem, Item) == 0x000000, "Member 'TgfInventoryWrapper_TryPutOnItem::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryPutOnItem, ItemInventory) == 0x000008, "Member 'TgfInventoryWrapper_TryPutOnItem::ItemInventory' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryPutOnItem, bTargetEmptySlotOnly) == 0x000010, "Member 'TgfInventoryWrapper_TryPutOnItem::bTargetEmptySlotOnly' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryPutOnItem, bCommit) == 0x000011, "Member 'TgfInventoryWrapper_TryPutOnItem::bCommit' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryPutOnItem, OutFailReason) == 0x000018, "Member 'TgfInventoryWrapper_TryPutOnItem::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryPutOnItem, ReturnValue) == 0x000030, "Member 'TgfInventoryWrapper_TryPutOnItem::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.TryUseItem
// 0x0030 (0x0030 - 0x0000)
struct TgfInventoryWrapper_TryUseItem final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutFailReason;                                     // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_TryUseItem) == 0x000008, "Wrong alignment on TgfInventoryWrapper_TryUseItem");
static_assert(sizeof(TgfInventoryWrapper_TryUseItem) == 0x000030, "Wrong size on TgfInventoryWrapper_TryUseItem");
static_assert(offsetof(TgfInventoryWrapper_TryUseItem, Item) == 0x000000, "Member 'TgfInventoryWrapper_TryUseItem::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryUseItem, Count) == 0x000008, "Member 'TgfInventoryWrapper_TryUseItem::Count' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryUseItem, Param_Index) == 0x00000C, "Member 'TgfInventoryWrapper_TryUseItem::Param_Index' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryUseItem, OutFailReason) == 0x000010, "Member 'TgfInventoryWrapper_TryUseItem::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_TryUseItem, ReturnValue) == 0x000028, "Member 'TgfInventoryWrapper_TryUseItem::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.CanSwapEquipments
// 0x0028 (0x0028 - 0x0000)
struct TgfInventoryWrapper_CanSwapEquipments final
{
public:
	ETgfEquipSlot                                 SlotA;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 SlotB;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutFailReason;                                     // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_CanSwapEquipments) == 0x000008, "Wrong alignment on TgfInventoryWrapper_CanSwapEquipments");
static_assert(sizeof(TgfInventoryWrapper_CanSwapEquipments) == 0x000028, "Wrong size on TgfInventoryWrapper_CanSwapEquipments");
static_assert(offsetof(TgfInventoryWrapper_CanSwapEquipments, SlotA) == 0x000000, "Member 'TgfInventoryWrapper_CanSwapEquipments::SlotA' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_CanSwapEquipments, SlotB) == 0x000001, "Member 'TgfInventoryWrapper_CanSwapEquipments::SlotB' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_CanSwapEquipments, OutFailReason) == 0x000008, "Member 'TgfInventoryWrapper_CanSwapEquipments::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_CanSwapEquipments, ReturnValue) == 0x000020, "Member 'TgfInventoryWrapper_CanSwapEquipments::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.FindBestEquipSlotForItem
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_FindBestEquipSlotForItem final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_FindBestEquipSlotForItem) == 0x000008, "Wrong alignment on TgfInventoryWrapper_FindBestEquipSlotForItem");
static_assert(sizeof(TgfInventoryWrapper_FindBestEquipSlotForItem) == 0x000010, "Wrong size on TgfInventoryWrapper_FindBestEquipSlotForItem");
static_assert(offsetof(TgfInventoryWrapper_FindBestEquipSlotForItem, Item) == 0x000000, "Member 'TgfInventoryWrapper_FindBestEquipSlotForItem::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_FindBestEquipSlotForItem, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_FindBestEquipSlotForItem::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetCharacterCareer
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryWrapper_GetCharacterCareer final
{
public:
	ETgfActorCareer                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetCharacterCareer) == 0x000001, "Wrong alignment on TgfInventoryWrapper_GetCharacterCareer");
static_assert(sizeof(TgfInventoryWrapper_GetCharacterCareer) == 0x000001, "Wrong size on TgfInventoryWrapper_GetCharacterCareer");
static_assert(offsetof(TgfInventoryWrapper_GetCharacterCareer, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_GetCharacterCareer::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetCharacterRace
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryWrapper_GetCharacterRace final
{
public:
	ETgfActorRace                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetCharacterRace) == 0x000001, "Wrong alignment on TgfInventoryWrapper_GetCharacterRace");
static_assert(sizeof(TgfInventoryWrapper_GetCharacterRace) == 0x000001, "Wrong size on TgfInventoryWrapper_GetCharacterRace");
static_assert(offsetof(TgfInventoryWrapper_GetCharacterRace, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_GetCharacterRace::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetCurrentWeaponSlot
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryWrapper_GetCurrentWeaponSlot final
{
public:
	ETgfWeaponChangeSlot                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetCurrentWeaponSlot) == 0x000001, "Wrong alignment on TgfInventoryWrapper_GetCurrentWeaponSlot");
static_assert(sizeof(TgfInventoryWrapper_GetCurrentWeaponSlot) == 0x000001, "Wrong size on TgfInventoryWrapper_GetCurrentWeaponSlot");
static_assert(offsetof(TgfInventoryWrapper_GetCurrentWeaponSlot, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_GetCurrentWeaponSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetEquipmentBySlotCached
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_GetEquipmentBySlotCached final
{
public:
	ETgfEquipSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfEquipmentWrapper*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetEquipmentBySlotCached) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetEquipmentBySlotCached");
static_assert(sizeof(TgfInventoryWrapper_GetEquipmentBySlotCached) == 0x000010, "Wrong size on TgfInventoryWrapper_GetEquipmentBySlotCached");
static_assert(offsetof(TgfInventoryWrapper_GetEquipmentBySlotCached, Slot) == 0x000000, "Member 'TgfInventoryWrapper_GetEquipmentBySlotCached::Slot' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GetEquipmentBySlotCached, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_GetEquipmentBySlotCached::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetEquipSlotOfItem
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_GetEquipSlotOfItem final
{
public:
	const class UTgfInventoryItemWrapper*         Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_GetEquipSlotOfItem) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetEquipSlotOfItem");
static_assert(sizeof(TgfInventoryWrapper_GetEquipSlotOfItem) == 0x000010, "Wrong size on TgfInventoryWrapper_GetEquipSlotOfItem");
static_assert(offsetof(TgfInventoryWrapper_GetEquipSlotOfItem, Item) == 0x000000, "Member 'TgfInventoryWrapper_GetEquipSlotOfItem::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GetEquipSlotOfItem, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_GetEquipSlotOfItem::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetGearsetLevel
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryWrapper_GetGearsetLevel final
{
public:
	int32                                         GearsetId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetGearsetLevel) == 0x000004, "Wrong alignment on TgfInventoryWrapper_GetGearsetLevel");
static_assert(sizeof(TgfInventoryWrapper_GetGearsetLevel) == 0x000008, "Wrong size on TgfInventoryWrapper_GetGearsetLevel");
static_assert(offsetof(TgfInventoryWrapper_GetGearsetLevel, GearsetId) == 0x000000, "Member 'TgfInventoryWrapper_GetGearsetLevel::GearsetId' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GetGearsetLevel, ReturnValue) == 0x000004, "Member 'TgfInventoryWrapper_GetGearsetLevel::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetInventorySize
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryWrapper_GetInventorySize final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetInventorySize) == 0x000004, "Wrong alignment on TgfInventoryWrapper_GetInventorySize");
static_assert(sizeof(TgfInventoryWrapper_GetInventorySize) == 0x000008, "Wrong size on TgfInventoryWrapper_GetInventorySize");
static_assert(offsetof(TgfInventoryWrapper_GetInventorySize, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_GetInventorySize::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetItemPosition
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_GetItemPosition final
{
public:
	const class UTgfInventoryItemWrapper*         Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetItemPosition) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetItemPosition");
static_assert(sizeof(TgfInventoryWrapper_GetItemPosition) == 0x000010, "Wrong size on TgfInventoryWrapper_GetItemPosition");
static_assert(offsetof(TgfInventoryWrapper_GetItemPosition, Item) == 0x000000, "Member 'TgfInventoryWrapper_GetItemPosition::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GetItemPosition, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_GetItemPosition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetItemSize
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_GetItemSize final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetItemSize) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetItemSize");
static_assert(sizeof(TgfInventoryWrapper_GetItemSize) == 0x000010, "Wrong size on TgfInventoryWrapper_GetItemSize");
static_assert(offsetof(TgfInventoryWrapper_GetItemSize, ItemClass) == 0x000000, "Member 'TgfInventoryWrapper_GetItemSize::ItemClass' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GetItemSize, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_GetItemSize::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetItemTooltipWidget
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_GetItemTooltipWidget final
{
public:
	TScriptInterface<class ITooltipWidget>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetItemTooltipWidget) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetItemTooltipWidget");
static_assert(sizeof(TgfInventoryWrapper_GetItemTooltipWidget) == 0x000010, "Wrong size on TgfInventoryWrapper_GetItemTooltipWidget");
static_assert(offsetof(TgfInventoryWrapper_GetItemTooltipWidget, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_GetItemTooltipWidget::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetOverlappedItems
// 0x0020 (0x0020 - 0x0000)
struct TgfInventoryWrapper_GetOverlappedItems final
{
public:
	struct FIntPoint                              Position;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Span;                                              // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTgfInventoryItemWrapper*>       ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetOverlappedItems) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetOverlappedItems");
static_assert(sizeof(TgfInventoryWrapper_GetOverlappedItems) == 0x000020, "Wrong size on TgfInventoryWrapper_GetOverlappedItems");
static_assert(offsetof(TgfInventoryWrapper_GetOverlappedItems, Position) == 0x000000, "Member 'TgfInventoryWrapper_GetOverlappedItems::Position' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GetOverlappedItems, Span) == 0x000008, "Member 'TgfInventoryWrapper_GetOverlappedItems::Span' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_GetOverlappedItems, ReturnValue) == 0x000010, "Member 'TgfInventoryWrapper_GetOverlappedItems::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetOwningCharacter
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryWrapper_GetOwningCharacter final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetOwningCharacter) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetOwningCharacter");
static_assert(sizeof(TgfInventoryWrapper_GetOwningCharacter) == 0x000008, "Wrong size on TgfInventoryWrapper_GetOwningCharacter");
static_assert(offsetof(TgfInventoryWrapper_GetOwningCharacter, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.GetParentInventory
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryWrapper_GetParentInventory final
{
public:
	class UTgfInventoryWrapper*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_GetParentInventory) == 0x000008, "Wrong alignment on TgfInventoryWrapper_GetParentInventory");
static_assert(sizeof(TgfInventoryWrapper_GetParentInventory) == 0x000008, "Wrong size on TgfInventoryWrapper_GetParentInventory");
static_assert(offsetof(TgfInventoryWrapper_GetParentInventory, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_GetParentInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.HasAdditionalInventory
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryWrapper_HasAdditionalInventory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_HasAdditionalInventory) == 0x000001, "Wrong alignment on TgfInventoryWrapper_HasAdditionalInventory");
static_assert(sizeof(TgfInventoryWrapper_HasAdditionalInventory) == 0x000001, "Wrong size on TgfInventoryWrapper_HasAdditionalInventory");
static_assert(offsetof(TgfInventoryWrapper_HasAdditionalInventory, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_HasAdditionalInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.HasBlockTag
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryWrapper_HasBlockTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_HasBlockTag) == 0x000001, "Wrong alignment on TgfInventoryWrapper_HasBlockTag");
static_assert(sizeof(TgfInventoryWrapper_HasBlockTag) == 0x000001, "Wrong size on TgfInventoryWrapper_HasBlockTag");
static_assert(offsetof(TgfInventoryWrapper_HasBlockTag, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_HasBlockTag::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.IsAdditionalInventoryEnable
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryWrapper_IsAdditionalInventoryEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_IsAdditionalInventoryEnable) == 0x000001, "Wrong alignment on TgfInventoryWrapper_IsAdditionalInventoryEnable");
static_assert(sizeof(TgfInventoryWrapper_IsAdditionalInventoryEnable) == 0x000001, "Wrong size on TgfInventoryWrapper_IsAdditionalInventoryEnable");
static_assert(offsetof(TgfInventoryWrapper_IsAdditionalInventoryEnable, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_IsAdditionalInventoryEnable::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.IsMithrillCharacter
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryWrapper_IsMithrillCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_IsMithrillCharacter) == 0x000001, "Wrong alignment on TgfInventoryWrapper_IsMithrillCharacter");
static_assert(sizeof(TgfInventoryWrapper_IsMithrillCharacter) == 0x000001, "Wrong size on TgfInventoryWrapper_IsMithrillCharacter");
static_assert(offsetof(TgfInventoryWrapper_IsMithrillCharacter, ReturnValue) == 0x000000, "Member 'TgfInventoryWrapper_IsMithrillCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.MatchEquipmentWithSlot
// 0x0030 (0x0030 - 0x0000)
struct TgfInventoryWrapper_MatchEquipmentWithSlot final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipSlot                                 Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoughlyMatch;                                     // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutFailReason;                                     // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_MatchEquipmentWithSlot) == 0x000008, "Wrong alignment on TgfInventoryWrapper_MatchEquipmentWithSlot");
static_assert(sizeof(TgfInventoryWrapper_MatchEquipmentWithSlot) == 0x000030, "Wrong size on TgfInventoryWrapper_MatchEquipmentWithSlot");
static_assert(offsetof(TgfInventoryWrapper_MatchEquipmentWithSlot, Item) == 0x000000, "Member 'TgfInventoryWrapper_MatchEquipmentWithSlot::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_MatchEquipmentWithSlot, Slot) == 0x000008, "Member 'TgfInventoryWrapper_MatchEquipmentWithSlot::Slot' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_MatchEquipmentWithSlot, bRoughlyMatch) == 0x000009, "Member 'TgfInventoryWrapper_MatchEquipmentWithSlot::bRoughlyMatch' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_MatchEquipmentWithSlot, OutFailReason) == 0x000010, "Member 'TgfInventoryWrapper_MatchEquipmentWithSlot::OutFailReason' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_MatchEquipmentWithSlot, ReturnValue) == 0x000028, "Member 'TgfInventoryWrapper_MatchEquipmentWithSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper.QueryRequirementForEquipment
// 0x0028 (0x0028 - 0x0000)
struct TgfInventoryWrapper_QueryRequirementForEquipment final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfInventoryRequirementQuery          ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_QueryRequirementForEquipment) == 0x000008, "Wrong alignment on TgfInventoryWrapper_QueryRequirementForEquipment");
static_assert(sizeof(TgfInventoryWrapper_QueryRequirementForEquipment) == 0x000028, "Wrong size on TgfInventoryWrapper_QueryRequirementForEquipment");
static_assert(offsetof(TgfInventoryWrapper_QueryRequirementForEquipment, Item) == 0x000000, "Member 'TgfInventoryWrapper_QueryRequirementForEquipment::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_QueryRequirementForEquipment, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_QueryRequirementForEquipment::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.FindHeroComponent
// 0x0010 (0x0010 - 0x0000)
struct LyraHeroComponent_FindHeroComponent final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraHeroComponent*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHeroComponent_FindHeroComponent) == 0x000008, "Wrong alignment on LyraHeroComponent_FindHeroComponent");
static_assert(sizeof(LyraHeroComponent_FindHeroComponent) == 0x000010, "Wrong size on LyraHeroComponent_FindHeroComponent");
static_assert(offsetof(LyraHeroComponent_FindHeroComponent, Actor) == 0x000000, "Member 'LyraHeroComponent_FindHeroComponent::Actor' has a wrong offset!");
static_assert(offsetof(LyraHeroComponent_FindHeroComponent, ReturnValue) == 0x000008, "Member 'LyraHeroComponent_FindHeroComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.AddLookMovingScaleAndClamp
// 0x0014 (0x0014 - 0x0000)
struct LyraHeroComponent_AddLookMovingScaleAndClamp final
{
public:
	bool                                          AddClamp;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2f                              Clamp;                                             // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddScale;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHeroComponent_AddLookMovingScaleAndClamp) == 0x000004, "Wrong alignment on LyraHeroComponent_AddLookMovingScaleAndClamp");
static_assert(sizeof(LyraHeroComponent_AddLookMovingScaleAndClamp) == 0x000014, "Wrong size on LyraHeroComponent_AddLookMovingScaleAndClamp");
static_assert(offsetof(LyraHeroComponent_AddLookMovingScaleAndClamp, AddClamp) == 0x000000, "Member 'LyraHeroComponent_AddLookMovingScaleAndClamp::AddClamp' has a wrong offset!");
static_assert(offsetof(LyraHeroComponent_AddLookMovingScaleAndClamp, Clamp) == 0x000004, "Member 'LyraHeroComponent_AddLookMovingScaleAndClamp::Clamp' has a wrong offset!");
static_assert(offsetof(LyraHeroComponent_AddLookMovingScaleAndClamp, AddScale) == 0x00000C, "Member 'LyraHeroComponent_AddLookMovingScaleAndClamp::AddScale' has a wrong offset!");
static_assert(offsetof(LyraHeroComponent_AddLookMovingScaleAndClamp, Scale) == 0x000010, "Member 'LyraHeroComponent_AddLookMovingScaleAndClamp::Scale' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.AddMoveInterrputAbilityTag
// 0x0008 (0x0008 - 0x0000)
struct LyraHeroComponent_AddMoveInterrputAbilityTag final
{
public:
	struct FGameplayTag                           AbilityTag;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHeroComponent_AddMoveInterrputAbilityTag) == 0x000004, "Wrong alignment on LyraHeroComponent_AddMoveInterrputAbilityTag");
static_assert(sizeof(LyraHeroComponent_AddMoveInterrputAbilityTag) == 0x000008, "Wrong size on LyraHeroComponent_AddMoveInterrputAbilityTag");
static_assert(offsetof(LyraHeroComponent_AddMoveInterrputAbilityTag, AbilityTag) == 0x000000, "Member 'LyraHeroComponent_AddMoveInterrputAbilityTag::AbilityTag' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.AddMovingScale
// 0x0004 (0x0004 - 0x0000)
struct LyraHeroComponent_AddMovingScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHeroComponent_AddMovingScale) == 0x000004, "Wrong alignment on LyraHeroComponent_AddMovingScale");
static_assert(sizeof(LyraHeroComponent_AddMovingScale) == 0x000004, "Wrong size on LyraHeroComponent_AddMovingScale");
static_assert(offsetof(LyraHeroComponent_AddMovingScale, Value) == 0x000000, "Member 'LyraHeroComponent_AddMovingScale::Value' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.ClearAbilityCameraModeFromServer
// 0x0004 (0x0004 - 0x0000)
struct LyraHeroComponent_ClearAbilityCameraModeFromServer final
{
public:
	struct FGameplayAbilitySpecHandle             OwningSpecHandle;                                  // 0x0000(0x0004)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHeroComponent_ClearAbilityCameraModeFromServer) == 0x000004, "Wrong alignment on LyraHeroComponent_ClearAbilityCameraModeFromServer");
static_assert(sizeof(LyraHeroComponent_ClearAbilityCameraModeFromServer) == 0x000004, "Wrong size on LyraHeroComponent_ClearAbilityCameraModeFromServer");
static_assert(offsetof(LyraHeroComponent_ClearAbilityCameraModeFromServer, OwningSpecHandle) == 0x000000, "Member 'LyraHeroComponent_ClearAbilityCameraModeFromServer::OwningSpecHandle' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.RemoveAnimationMoveScale
// 0x0004 (0x0004 - 0x0000)
struct LyraHeroComponent_RemoveAnimationMoveScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHeroComponent_RemoveAnimationMoveScale) == 0x000004, "Wrong alignment on LyraHeroComponent_RemoveAnimationMoveScale");
static_assert(sizeof(LyraHeroComponent_RemoveAnimationMoveScale) == 0x000004, "Wrong size on LyraHeroComponent_RemoveAnimationMoveScale");
static_assert(offsetof(LyraHeroComponent_RemoveAnimationMoveScale, Scale) == 0x000000, "Member 'LyraHeroComponent_RemoveAnimationMoveScale::Scale' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.RemoveLookMovingScaleAndClamp
// 0x0014 (0x0014 - 0x0000)
struct LyraHeroComponent_RemoveLookMovingScaleAndClamp final
{
public:
	bool                                          AddClamp;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2f                              Clamp;                                             // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddScale;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHeroComponent_RemoveLookMovingScaleAndClamp) == 0x000004, "Wrong alignment on LyraHeroComponent_RemoveLookMovingScaleAndClamp");
static_assert(sizeof(LyraHeroComponent_RemoveLookMovingScaleAndClamp) == 0x000014, "Wrong size on LyraHeroComponent_RemoveLookMovingScaleAndClamp");
static_assert(offsetof(LyraHeroComponent_RemoveLookMovingScaleAndClamp, AddClamp) == 0x000000, "Member 'LyraHeroComponent_RemoveLookMovingScaleAndClamp::AddClamp' has a wrong offset!");
static_assert(offsetof(LyraHeroComponent_RemoveLookMovingScaleAndClamp, Clamp) == 0x000004, "Member 'LyraHeroComponent_RemoveLookMovingScaleAndClamp::Clamp' has a wrong offset!");
static_assert(offsetof(LyraHeroComponent_RemoveLookMovingScaleAndClamp, AddScale) == 0x00000C, "Member 'LyraHeroComponent_RemoveLookMovingScaleAndClamp::AddScale' has a wrong offset!");
static_assert(offsetof(LyraHeroComponent_RemoveLookMovingScaleAndClamp, Scale) == 0x000010, "Member 'LyraHeroComponent_RemoveLookMovingScaleAndClamp::Scale' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.RemoveMoveInterrputAbilityTag
// 0x0008 (0x0008 - 0x0000)
struct LyraHeroComponent_RemoveMoveInterrputAbilityTag final
{
public:
	struct FGameplayTag                           AbilityTag;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHeroComponent_RemoveMoveInterrputAbilityTag) == 0x000004, "Wrong alignment on LyraHeroComponent_RemoveMoveInterrputAbilityTag");
static_assert(sizeof(LyraHeroComponent_RemoveMoveInterrputAbilityTag) == 0x000008, "Wrong size on LyraHeroComponent_RemoveMoveInterrputAbilityTag");
static_assert(offsetof(LyraHeroComponent_RemoveMoveInterrputAbilityTag, AbilityTag) == 0x000000, "Member 'LyraHeroComponent_RemoveMoveInterrputAbilityTag::AbilityTag' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.SetAbilityCameraModeFromServer
// 0x0010 (0x0010 - 0x0000)
struct LyraHeroComponent_SetAbilityCameraModeFromServer final
{
public:
	TSubclassOf<class ULyraCameraMode>            CameraMode;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             OwningSpecHandle;                                  // 0x0008(0x0004)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraHeroComponent_SetAbilityCameraModeFromServer) == 0x000008, "Wrong alignment on LyraHeroComponent_SetAbilityCameraModeFromServer");
static_assert(sizeof(LyraHeroComponent_SetAbilityCameraModeFromServer) == 0x000010, "Wrong size on LyraHeroComponent_SetAbilityCameraModeFromServer");
static_assert(offsetof(LyraHeroComponent_SetAbilityCameraModeFromServer, CameraMode) == 0x000000, "Member 'LyraHeroComponent_SetAbilityCameraModeFromServer::CameraMode' has a wrong offset!");
static_assert(offsetof(LyraHeroComponent_SetAbilityCameraModeFromServer, OwningSpecHandle) == 0x000008, "Member 'LyraHeroComponent_SetAbilityCameraModeFromServer::OwningSpecHandle' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.UpdateInspectTimer
// 0x0004 (0x0004 - 0x0000)
struct LyraHeroComponent_UpdateInspectTimer final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHeroComponent_UpdateInspectTimer) == 0x000004, "Wrong alignment on LyraHeroComponent_UpdateInspectTimer");
static_assert(sizeof(LyraHeroComponent_UpdateInspectTimer) == 0x000004, "Wrong size on LyraHeroComponent_UpdateInspectTimer");
static_assert(offsetof(LyraHeroComponent_UpdateInspectTimer, DeltaTime) == 0x000000, "Member 'LyraHeroComponent_UpdateInspectTimer::DeltaTime' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.DetermineCameraMode
// 0x0008 (0x0008 - 0x0000)
struct LyraHeroComponent_DetermineCameraMode final
{
public:
	TSubclassOf<class ULyraCameraMode>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHeroComponent_DetermineCameraMode) == 0x000008, "Wrong alignment on LyraHeroComponent_DetermineCameraMode");
static_assert(sizeof(LyraHeroComponent_DetermineCameraMode) == 0x000008, "Wrong size on LyraHeroComponent_DetermineCameraMode");
static_assert(offsetof(LyraHeroComponent_DetermineCameraMode, ReturnValue) == 0x000000, "Member 'LyraHeroComponent_DetermineCameraMode::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraHeroComponent.DetermineCameraModeThirdPerson
// 0x0008 (0x0008 - 0x0000)
struct LyraHeroComponent_DetermineCameraModeThirdPerson final
{
public:
	TSubclassOf<class ULyraCameraMode>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHeroComponent_DetermineCameraModeThirdPerson) == 0x000008, "Wrong alignment on LyraHeroComponent_DetermineCameraModeThirdPerson");
static_assert(sizeof(LyraHeroComponent_DetermineCameraModeThirdPerson) == 0x000008, "Wrong size on LyraHeroComponent_DetermineCameraModeThirdPerson");
static_assert(offsetof(LyraHeroComponent_DetermineCameraModeThirdPerson, ReturnValue) == 0x000000, "Member 'LyraHeroComponent_DetermineCameraModeThirdPerson::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper_InGame.CheckLootDisVaild
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryWrapper_InGame_CheckLootDisVaild final
{
public:
	const class ULyraInventoryManagerComponent*   LootInventoryManager;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfInventoryWrapper_InGame_CheckLootDisVaild) == 0x000008, "Wrong alignment on TgfInventoryWrapper_InGame_CheckLootDisVaild");
static_assert(sizeof(TgfInventoryWrapper_InGame_CheckLootDisVaild) == 0x000010, "Wrong size on TgfInventoryWrapper_InGame_CheckLootDisVaild");
static_assert(offsetof(TgfInventoryWrapper_InGame_CheckLootDisVaild, LootInventoryManager) == 0x000000, "Member 'TgfInventoryWrapper_InGame_CheckLootDisVaild::LootInventoryManager' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_InGame_CheckLootDisVaild, ReturnValue) == 0x000008, "Member 'TgfInventoryWrapper_InGame_CheckLootDisVaild::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper_InGame.DropItemInstance
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryWrapper_InGame_DropItemInstance final
{
public:
	class UTgfInventoryItemWrapper*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         OwningCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_InGame_DropItemInstance) == 0x000008, "Wrong alignment on TgfInventoryWrapper_InGame_DropItemInstance");
static_assert(sizeof(TgfInventoryWrapper_InGame_DropItemInstance) == 0x000018, "Wrong size on TgfInventoryWrapper_InGame_DropItemInstance");
static_assert(offsetof(TgfInventoryWrapper_InGame_DropItemInstance, Item) == 0x000000, "Member 'TgfInventoryWrapper_InGame_DropItemInstance::Item' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_InGame_DropItemInstance, OwningCharacter) == 0x000008, "Member 'TgfInventoryWrapper_InGame_DropItemInstance::OwningCharacter' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_InGame_DropItemInstance, ReturnValue) == 0x000010, "Member 'TgfInventoryWrapper_InGame_DropItemInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapper_InGame.OnAttributeChanged
// 0x0040 (0x0040 - 0x0000)
struct TgfInventoryWrapper_InGame_OnAttributeChanged final
{
public:
	class UTgfAttributeComponent*                 AttributeComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapper_InGame_OnAttributeChanged) == 0x000008, "Wrong alignment on TgfInventoryWrapper_InGame_OnAttributeChanged");
static_assert(sizeof(TgfInventoryWrapper_InGame_OnAttributeChanged) == 0x000040, "Wrong size on TgfInventoryWrapper_InGame_OnAttributeChanged");
static_assert(offsetof(TgfInventoryWrapper_InGame_OnAttributeChanged, AttributeComponent) == 0x000000, "Member 'TgfInventoryWrapper_InGame_OnAttributeChanged::AttributeComponent' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapper_InGame_OnAttributeChanged, Attribute) == 0x000008, "Member 'TgfInventoryWrapper_InGame_OnAttributeChanged::Attribute' has a wrong offset!");

// Function LyraGame.TgfInventoryWrapperLibrary_InGame.CreateInventoryWrapperFromActor
// 0x0040 (0x0040 - 0x0000)
struct TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfInventoryType                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               InMainOverlayPanel;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ITooltipWidget>        InItemTooltipWidget;                               // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfInventoryWrapper*                   ParentInventory;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraInventoryType                            InLyraInventoryType;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfInventoryWrapper_InGame*            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor) == 0x000008, "Wrong alignment on TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor");
static_assert(sizeof(TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor) == 0x000040, "Wrong size on TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor");
static_assert(offsetof(TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor, Actor) == 0x000000, "Member 'TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor::Actor' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor, Type) == 0x000008, "Member 'TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor::Type' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor, InMainOverlayPanel) == 0x000010, "Member 'TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor::InMainOverlayPanel' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor, InItemTooltipWidget) == 0x000018, "Member 'TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor::InItemTooltipWidget' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor, ParentInventory) == 0x000028, "Member 'TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor::ParentInventory' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor, InLyraInventoryType) == 0x000030, "Member 'TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor::InLyraInventoryType' has a wrong offset!");
static_assert(offsetof(TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor, ReturnValue) == 0x000038, "Member 'TgfInventoryWrapperLibrary_InGame_CreateInventoryWrapperFromActor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfItemAnimInstance.IsOnDedicatedServer
// 0x0001 (0x0001 - 0x0000)
struct TgfItemAnimInstance_IsOnDedicatedServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfItemAnimInstance_IsOnDedicatedServer) == 0x000001, "Wrong alignment on TgfItemAnimInstance_IsOnDedicatedServer");
static_assert(sizeof(TgfItemAnimInstance_IsOnDedicatedServer) == 0x000001, "Wrong size on TgfItemAnimInstance_IsOnDedicatedServer");
static_assert(offsetof(TgfItemAnimInstance_IsOnDedicatedServer, ReturnValue) == 0x000000, "Member 'TgfItemAnimInstance_IsOnDedicatedServer::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfItemCosmeticComponent.GetAllSkinIDs
// 0x0010 (0x0010 - 0x0000)
struct TgfItemCosmeticComponent_GetAllSkinIDs final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfItemCosmeticComponent_GetAllSkinIDs) == 0x000008, "Wrong alignment on TgfItemCosmeticComponent_GetAllSkinIDs");
static_assert(sizeof(TgfItemCosmeticComponent_GetAllSkinIDs) == 0x000010, "Wrong size on TgfItemCosmeticComponent_GetAllSkinIDs");
static_assert(offsetof(TgfItemCosmeticComponent_GetAllSkinIDs, ReturnValue) == 0x000000, "Member 'TgfItemCosmeticComponent_GetAllSkinIDs::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfItemCosmeticComponent.GetBestFitDefByDefinition
// 0x0018 (0x0018 - 0x0000)
struct TgfItemCosmeticComponent_GetBestFitDefByDefinition final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> Def;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULyraInventoryItemDefinition> ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfItemCosmeticComponent_GetBestFitDefByDefinition) == 0x000008, "Wrong alignment on TgfItemCosmeticComponent_GetBestFitDefByDefinition");
static_assert(sizeof(TgfItemCosmeticComponent_GetBestFitDefByDefinition) == 0x000018, "Wrong size on TgfItemCosmeticComponent_GetBestFitDefByDefinition");
static_assert(offsetof(TgfItemCosmeticComponent_GetBestFitDefByDefinition, Def) == 0x000000, "Member 'TgfItemCosmeticComponent_GetBestFitDefByDefinition::Def' has a wrong offset!");
static_assert(offsetof(TgfItemCosmeticComponent_GetBestFitDefByDefinition, SkinId) == 0x000008, "Member 'TgfItemCosmeticComponent_GetBestFitDefByDefinition::SkinId' has a wrong offset!");
static_assert(offsetof(TgfItemCosmeticComponent_GetBestFitDefByDefinition, ReturnValue) == 0x000010, "Member 'TgfItemCosmeticComponent_GetBestFitDefByDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfItemCosmeticComponent.GetBestFitDefByInstance
// 0x0010 (0x0010 - 0x0000)
struct TgfItemCosmeticComponent_GetBestFitDefByInstance final
{
public:
	const class ULyraInventoryItemInstance*       Instance;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemDefinition> ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfItemCosmeticComponent_GetBestFitDefByInstance) == 0x000008, "Wrong alignment on TgfItemCosmeticComponent_GetBestFitDefByInstance");
static_assert(sizeof(TgfItemCosmeticComponent_GetBestFitDefByInstance) == 0x000010, "Wrong size on TgfItemCosmeticComponent_GetBestFitDefByInstance");
static_assert(offsetof(TgfItemCosmeticComponent_GetBestFitDefByInstance, Instance) == 0x000000, "Member 'TgfItemCosmeticComponent_GetBestFitDefByInstance::Instance' has a wrong offset!");
static_assert(offsetof(TgfItemCosmeticComponent_GetBestFitDefByInstance, ReturnValue) == 0x000008, "Member 'TgfItemCosmeticComponent_GetBestFitDefByInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfItemCosmeticComponent.GetBestFitKillEffect
// 0x0090 (0x0090 - 0x0000)
struct TgfItemCosmeticComponent_GetBestFitKillEffect final
{
public:
	int32                                         SkinId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTgfItemEffectDefinition               ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfItemCosmeticComponent_GetBestFitKillEffect) == 0x000010, "Wrong alignment on TgfItemCosmeticComponent_GetBestFitKillEffect");
static_assert(sizeof(TgfItemCosmeticComponent_GetBestFitKillEffect) == 0x000090, "Wrong size on TgfItemCosmeticComponent_GetBestFitKillEffect");
static_assert(offsetof(TgfItemCosmeticComponent_GetBestFitKillEffect, SkinId) == 0x000000, "Member 'TgfItemCosmeticComponent_GetBestFitKillEffect::SkinId' has a wrong offset!");
static_assert(offsetof(TgfItemCosmeticComponent_GetBestFitKillEffect, ReturnValue) == 0x000010, "Member 'TgfItemCosmeticComponent_GetBestFitKillEffect::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfItemCosmeticComponent.GetSlotSkinId
// 0x0008 (0x0008 - 0x0000)
struct TgfItemCosmeticComponent_GetSlotSkinId final
{
public:
	ETgfSkinSlot                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfSkinCategory                              Category;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfItemCosmeticComponent_GetSlotSkinId) == 0x000004, "Wrong alignment on TgfItemCosmeticComponent_GetSlotSkinId");
static_assert(sizeof(TgfItemCosmeticComponent_GetSlotSkinId) == 0x000008, "Wrong size on TgfItemCosmeticComponent_GetSlotSkinId");
static_assert(offsetof(TgfItemCosmeticComponent_GetSlotSkinId, Type) == 0x000000, "Member 'TgfItemCosmeticComponent_GetSlotSkinId::Type' has a wrong offset!");
static_assert(offsetof(TgfItemCosmeticComponent_GetSlotSkinId, Category) == 0x000001, "Member 'TgfItemCosmeticComponent_GetSlotSkinId::Category' has a wrong offset!");
static_assert(offsetof(TgfItemCosmeticComponent_GetSlotSkinId, ReturnValue) == 0x000004, "Member 'TgfItemCosmeticComponent_GetSlotSkinId::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfItemCosmeticComponent.SetSlotSkinId
// 0x0008 (0x0008 - 0x0000)
struct TgfItemCosmeticComponent_SetSlotSkinId final
{
public:
	ETgfSkinSlot                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfSkinCategory                              SkinCategory;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkinId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfItemCosmeticComponent_SetSlotSkinId) == 0x000004, "Wrong alignment on TgfItemCosmeticComponent_SetSlotSkinId");
static_assert(sizeof(TgfItemCosmeticComponent_SetSlotSkinId) == 0x000008, "Wrong size on TgfItemCosmeticComponent_SetSlotSkinId");
static_assert(offsetof(TgfItemCosmeticComponent_SetSlotSkinId, Type) == 0x000000, "Member 'TgfItemCosmeticComponent_SetSlotSkinId::Type' has a wrong offset!");
static_assert(offsetof(TgfItemCosmeticComponent_SetSlotSkinId, SkinCategory) == 0x000001, "Member 'TgfItemCosmeticComponent_SetSlotSkinId::SkinCategory' has a wrong offset!");
static_assert(offsetof(TgfItemCosmeticComponent_SetSlotSkinId, SkinId) == 0x000004, "Member 'TgfItemCosmeticComponent_SetSlotSkinId::SkinId' has a wrong offset!");

// Function LyraGame.TgfItemCosmeticComponent.SetSlotSkinIdServerOnly
// 0x0008 (0x0008 - 0x0000)
struct TgfItemCosmeticComponent_SetSlotSkinIdServerOnly final
{
public:
	ETgfSkinSlot                                  Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfItemCosmeticComponent_SetSlotSkinIdServerOnly) == 0x000004, "Wrong alignment on TgfItemCosmeticComponent_SetSlotSkinIdServerOnly");
static_assert(sizeof(TgfItemCosmeticComponent_SetSlotSkinIdServerOnly) == 0x000008, "Wrong size on TgfItemCosmeticComponent_SetSlotSkinIdServerOnly");
static_assert(offsetof(TgfItemCosmeticComponent_SetSlotSkinIdServerOnly, Part) == 0x000000, "Member 'TgfItemCosmeticComponent_SetSlotSkinIdServerOnly::Part' has a wrong offset!");
static_assert(offsetof(TgfItemCosmeticComponent_SetSlotSkinIdServerOnly, Param_Index) == 0x000004, "Member 'TgfItemCosmeticComponent_SetSlotSkinIdServerOnly::Param_Index' has a wrong offset!");

// Function LyraGame.TgfItemWidget.FormatCooldownTime
// 0x0018 (0x0018 - 0x0000)
struct TgfItemWidget_FormatCooldownTime final
{
public:
	float                                         CDTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfItemWidget_FormatCooldownTime) == 0x000008, "Wrong alignment on TgfItemWidget_FormatCooldownTime");
static_assert(sizeof(TgfItemWidget_FormatCooldownTime) == 0x000018, "Wrong size on TgfItemWidget_FormatCooldownTime");
static_assert(offsetof(TgfItemWidget_FormatCooldownTime, CDTime) == 0x000000, "Member 'TgfItemWidget_FormatCooldownTime::CDTime' has a wrong offset!");
static_assert(offsetof(TgfItemWidget_FormatCooldownTime, ReturnValue) == 0x000008, "Member 'TgfItemWidget_FormatCooldownTime::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfItemWidget.SetCoolDownTags
// 0x0008 (0x0008 - 0x0000)
struct TgfItemWidget_SetCoolDownTags final
{
public:
	TSubclassOf<class UTgfGameplayAbility>        GAClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfItemWidget_SetCoolDownTags) == 0x000008, "Wrong alignment on TgfItemWidget_SetCoolDownTags");
static_assert(sizeof(TgfItemWidget_SetCoolDownTags) == 0x000008, "Wrong size on TgfItemWidget_SetCoolDownTags");
static_assert(offsetof(TgfItemWidget_SetCoolDownTags, GAClass) == 0x000000, "Member 'TgfItemWidget_SetCoolDownTags::GAClass' has a wrong offset!");

// Function LyraGame.TgfLevelCheats.DsQuitGame
// 0x0004 (0x0004 - 0x0000)
struct TgfLevelCheats_DsQuitGame final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLevelCheats_DsQuitGame) == 0x000004, "Wrong alignment on TgfLevelCheats_DsQuitGame");
static_assert(sizeof(TgfLevelCheats_DsQuitGame) == 0x000004, "Wrong size on TgfLevelCheats_DsQuitGame");
static_assert(offsetof(TgfLevelCheats_DsQuitGame, Type) == 0x000000, "Member 'TgfLevelCheats_DsQuitGame::Type' has a wrong offset!");

// Function LyraGame.TgfLevelCheats.ForceGC
// 0x0002 (0x0002 - 0x0000)
struct TgfLevelCheats_ForceGC final
{
public:
	bool                                          CallServer;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FullPurge;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLevelCheats_ForceGC) == 0x000001, "Wrong alignment on TgfLevelCheats_ForceGC");
static_assert(sizeof(TgfLevelCheats_ForceGC) == 0x000002, "Wrong size on TgfLevelCheats_ForceGC");
static_assert(offsetof(TgfLevelCheats_ForceGC, CallServer) == 0x000000, "Member 'TgfLevelCheats_ForceGC::CallServer' has a wrong offset!");
static_assert(offsetof(TgfLevelCheats_ForceGC, FullPurge) == 0x000001, "Member 'TgfLevelCheats_ForceGC::FullPurge' has a wrong offset!");

// Function LyraGame.TgfLevelCheats.MultiWorldTravel
// 0x0010 (0x0010 - 0x0000)
struct TgfLevelCheats_MultiWorldTravel final
{
public:
	class FString                                 MapPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLevelCheats_MultiWorldTravel) == 0x000008, "Wrong alignment on TgfLevelCheats_MultiWorldTravel");
static_assert(sizeof(TgfLevelCheats_MultiWorldTravel) == 0x000010, "Wrong size on TgfLevelCheats_MultiWorldTravel");
static_assert(offsetof(TgfLevelCheats_MultiWorldTravel, MapPath) == 0x000000, "Member 'TgfLevelCheats_MultiWorldTravel::MapPath' has a wrong offset!");

// Function LyraGame.TgfLevelCheats.PrintPortalLocations
// 0x0004 (0x0004 - 0x0000)
struct TgfLevelCheats_PrintPortalLocations final
{
public:
	int32                                         PortalType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLevelCheats_PrintPortalLocations) == 0x000004, "Wrong alignment on TgfLevelCheats_PrintPortalLocations");
static_assert(sizeof(TgfLevelCheats_PrintPortalLocations) == 0x000004, "Wrong size on TgfLevelCheats_PrintPortalLocations");
static_assert(offsetof(TgfLevelCheats_PrintPortalLocations, PortalType) == 0x000000, "Member 'TgfLevelCheats_PrintPortalLocations::PortalType' has a wrong offset!");

// Function LyraGame.TgfLevelCheats.SetDeathZoneEnabled
// 0x0004 (0x0004 - 0x0000)
struct TgfLevelCheats_SetDeathZoneEnabled final
{
public:
	int32                                         Enabled;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLevelCheats_SetDeathZoneEnabled) == 0x000004, "Wrong alignment on TgfLevelCheats_SetDeathZoneEnabled");
static_assert(sizeof(TgfLevelCheats_SetDeathZoneEnabled) == 0x000004, "Wrong size on TgfLevelCheats_SetDeathZoneEnabled");
static_assert(offsetof(TgfLevelCheats_SetDeathZoneEnabled, Enabled) == 0x000000, "Member 'TgfLevelCheats_SetDeathZoneEnabled::Enabled' has a wrong offset!");

// Function LyraGame.TgfLevelCheats.ShowBattleId
// 0x0001 (0x0001 - 0x0000)
struct TgfLevelCheats_ShowBattleId final
{
public:
	bool                                          bIsShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLevelCheats_ShowBattleId) == 0x000001, "Wrong alignment on TgfLevelCheats_ShowBattleId");
static_assert(sizeof(TgfLevelCheats_ShowBattleId) == 0x000001, "Wrong size on TgfLevelCheats_ShowBattleId");
static_assert(offsetof(TgfLevelCheats_ShowBattleId, bIsShow) == 0x000000, "Member 'TgfLevelCheats_ShowBattleId::bIsShow' has a wrong offset!");

// Function LyraGame.TgfLevelCheats.ShowHurtNum
// 0x0001 (0x0001 - 0x0000)
struct TgfLevelCheats_ShowHurtNum final
{
public:
	bool                                          bIsShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLevelCheats_ShowHurtNum) == 0x000001, "Wrong alignment on TgfLevelCheats_ShowHurtNum");
static_assert(sizeof(TgfLevelCheats_ShowHurtNum) == 0x000001, "Wrong size on TgfLevelCheats_ShowHurtNum");
static_assert(offsetof(TgfLevelCheats_ShowHurtNum, bIsShow) == 0x000000, "Member 'TgfLevelCheats_ShowHurtNum::bIsShow' has a wrong offset!");

// Function LyraGame.TgfLevelCheats.ShowPing
// 0x0001 (0x0001 - 0x0000)
struct TgfLevelCheats_ShowPing final
{
public:
	bool                                          bIsShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLevelCheats_ShowPing) == 0x000001, "Wrong alignment on TgfLevelCheats_ShowPing");
static_assert(sizeof(TgfLevelCheats_ShowPing) == 0x000001, "Wrong size on TgfLevelCheats_ShowPing");
static_assert(offsetof(TgfLevelCheats_ShowPing, bIsShow) == 0x000000, "Member 'TgfLevelCheats_ShowPing::bIsShow' has a wrong offset!");

// Function LyraGame.TgfLevelCheats.SpawnOnePortal
// 0x0004 (0x0004 - 0x0000)
struct TgfLevelCheats_SpawnOnePortal final
{
public:
	int32                                         PortalType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLevelCheats_SpawnOnePortal) == 0x000004, "Wrong alignment on TgfLevelCheats_SpawnOnePortal");
static_assert(sizeof(TgfLevelCheats_SpawnOnePortal) == 0x000004, "Wrong size on TgfLevelCheats_SpawnOnePortal");
static_assert(offsetof(TgfLevelCheats_SpawnOnePortal, PortalType) == 0x000000, "Member 'TgfLevelCheats_SpawnOnePortal::PortalType' has a wrong offset!");

// Function LyraGame.TgfLevelCheats.WaitingRoomCountdown
// 0x0004 (0x0004 - 0x0000)
struct TgfLevelCheats_WaitingRoomCountdown final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLevelCheats_WaitingRoomCountdown) == 0x000004, "Wrong alignment on TgfLevelCheats_WaitingRoomCountdown");
static_assert(sizeof(TgfLevelCheats_WaitingRoomCountdown) == 0x000004, "Wrong size on TgfLevelCheats_WaitingRoomCountdown");
static_assert(offsetof(TgfLevelCheats_WaitingRoomCountdown, Time) == 0x000000, "Member 'TgfLevelCheats_WaitingRoomCountdown::Time' has a wrong offset!");

// Function LyraGame.LyraCharacter.CallFreezeAction
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_CallFreezeAction final
{
public:
	bool                                          bIsFreeze;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_CallFreezeAction) == 0x000001, "Wrong alignment on LyraCharacter_CallFreezeAction");
static_assert(sizeof(LyraCharacter_CallFreezeAction) == 0x000001, "Wrong size on LyraCharacter_CallFreezeAction");
static_assert(offsetof(LyraCharacter_CallFreezeAction, bIsFreeze) == 0x000000, "Member 'LyraCharacter_CallFreezeAction::bIsFreeze' has a wrong offset!");

// Function LyraGame.LyraCharacter.CollectMeshComponents
// 0x0010 (0x0010 - 0x0000)
struct LyraCharacter_CollectMeshComponents final
{
public:
	TArray<class UMeshComponent*>                 Meshes;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_CollectMeshComponents) == 0x000008, "Wrong alignment on LyraCharacter_CollectMeshComponents");
static_assert(sizeof(LyraCharacter_CollectMeshComponents) == 0x000010, "Wrong size on LyraCharacter_CollectMeshComponents");
static_assert(offsetof(LyraCharacter_CollectMeshComponents, Meshes) == 0x000000, "Member 'LyraCharacter_CollectMeshComponents::Meshes' has a wrong offset!");

// Function LyraGame.LyraCharacter.CopyAttachMentActors
// 0x0010 (0x0010 - 0x0000)
struct LyraCharacter_CopyAttachMentActors final
{
public:
	class ALyraCharacter*                         SrcCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 baseClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_CopyAttachMentActors) == 0x000008, "Wrong alignment on LyraCharacter_CopyAttachMentActors");
static_assert(sizeof(LyraCharacter_CopyAttachMentActors) == 0x000010, "Wrong size on LyraCharacter_CopyAttachMentActors");
static_assert(offsetof(LyraCharacter_CopyAttachMentActors, SrcCharacter) == 0x000000, "Member 'LyraCharacter_CopyAttachMentActors::SrcCharacter' has a wrong offset!");
static_assert(offsetof(LyraCharacter_CopyAttachMentActors, baseClass) == 0x000008, "Member 'LyraCharacter_CopyAttachMentActors::baseClass' has a wrong offset!");

// Function LyraGame.LyraCharacter.DestoryAttachMentActors
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_DestoryAttachMentActors final
{
public:
	class UClass*                                 baseClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_DestoryAttachMentActors) == 0x000008, "Wrong alignment on LyraCharacter_DestoryAttachMentActors");
static_assert(sizeof(LyraCharacter_DestoryAttachMentActors) == 0x000008, "Wrong size on LyraCharacter_DestoryAttachMentActors");
static_assert(offsetof(LyraCharacter_DestoryAttachMentActors, baseClass) == 0x000000, "Member 'LyraCharacter_DestoryAttachMentActors::baseClass' has a wrong offset!");

// Function LyraGame.LyraCharacter.DisableAvatarMeshClothSimulation
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_DisableAvatarMeshClothSimulation final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_DisableAvatarMeshClothSimulation) == 0x000001, "Wrong alignment on LyraCharacter_DisableAvatarMeshClothSimulation");
static_assert(sizeof(LyraCharacter_DisableAvatarMeshClothSimulation) == 0x000001, "Wrong size on LyraCharacter_DisableAvatarMeshClothSimulation");
static_assert(offsetof(LyraCharacter_DisableAvatarMeshClothSimulation, bDisable) == 0x000000, "Member 'LyraCharacter_DisableAvatarMeshClothSimulation::bDisable' has a wrong offset!");

// Function LyraGame.LyraCharacter.ExcuteWhenExtractPortal
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_ExcuteWhenExtractPortal final
{
public:
	bool                                          bWaiting;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_ExcuteWhenExtractPortal) == 0x000001, "Wrong alignment on LyraCharacter_ExcuteWhenExtractPortal");
static_assert(sizeof(LyraCharacter_ExcuteWhenExtractPortal) == 0x000001, "Wrong size on LyraCharacter_ExcuteWhenExtractPortal");
static_assert(offsetof(LyraCharacter_ExcuteWhenExtractPortal, bWaiting) == 0x000000, "Member 'LyraCharacter_ExcuteWhenExtractPortal::bWaiting' has a wrong offset!");

// Function LyraGame.LyraCharacter.FastSharedReplication
// 0x0078 (0x0078 - 0x0000)
struct LyraCharacter_FastSharedReplication final
{
public:
	struct FSharedRepMovement                     SharedRepMovement;                                 // 0x0000(0x0078)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_FastSharedReplication) == 0x000008, "Wrong alignment on LyraCharacter_FastSharedReplication");
static_assert(sizeof(LyraCharacter_FastSharedReplication) == 0x000078, "Wrong size on LyraCharacter_FastSharedReplication");
static_assert(offsetof(LyraCharacter_FastSharedReplication, SharedRepMovement) == 0x000000, "Member 'LyraCharacter_FastSharedReplication::SharedRepMovement' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetActiveAvatarActor
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_GetActiveAvatarActor final
{
public:
	class ATgfAvatarActor*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetActiveAvatarActor) == 0x000008, "Wrong alignment on LyraCharacter_GetActiveAvatarActor");
static_assert(sizeof(LyraCharacter_GetActiveAvatarActor) == 0x000008, "Wrong size on LyraCharacter_GetActiveAvatarActor");
static_assert(offsetof(LyraCharacter_GetActiveAvatarActor, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetActiveAvatarActor::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetDebugInfoString
// 0x0010 (0x0010 - 0x0000)
struct LyraCharacter_GetDebugInfoString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetDebugInfoString) == 0x000008, "Wrong alignment on LyraCharacter_GetDebugInfoString");
static_assert(sizeof(LyraCharacter_GetDebugInfoString) == 0x000010, "Wrong size on LyraCharacter_GetDebugInfoString");
static_assert(offsetof(LyraCharacter_GetDebugInfoString, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetDebugInfoString::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetDisplayCareer
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_GetDisplayCareer final
{
public:
	ETgfActorCareer                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetDisplayCareer) == 0x000001, "Wrong alignment on LyraCharacter_GetDisplayCareer");
static_assert(sizeof(LyraCharacter_GetDisplayCareer) == 0x000001, "Wrong size on LyraCharacter_GetDisplayCareer");
static_assert(offsetof(LyraCharacter_GetDisplayCareer, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetDisplayCareer::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetDisplayRace
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_GetDisplayRace final
{
public:
	ETgfActorRace                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetDisplayRace) == 0x000001, "Wrong alignment on LyraCharacter_GetDisplayRace");
static_assert(sizeof(LyraCharacter_GetDisplayRace) == 0x000001, "Wrong size on LyraCharacter_GetDisplayRace");
static_assert(offsetof(LyraCharacter_GetDisplayRace, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetDisplayRace::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.HasInPortalTags
// 0x0002 (0x0002 - 0x0000)
struct LyraCharacter_HasInPortalTags final
{
public:
	EPortalTagType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_HasInPortalTags) == 0x000001, "Wrong alignment on LyraCharacter_HasInPortalTags");
static_assert(sizeof(LyraCharacter_HasInPortalTags) == 0x000002, "Wrong size on LyraCharacter_HasInPortalTags");
static_assert(offsetof(LyraCharacter_HasInPortalTags, Type) == 0x000000, "Member 'LyraCharacter_HasInPortalTags::Type' has a wrong offset!");
static_assert(offsetof(LyraCharacter_HasInPortalTags, ReturnValue) == 0x000001, "Member 'LyraCharacter_HasInPortalTags::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.OnCancelRebirth
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_OnCancelRebirth final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_OnCancelRebirth) == 0x000008, "Wrong alignment on LyraCharacter_OnCancelRebirth");
static_assert(sizeof(LyraCharacter_OnCancelRebirth) == 0x000008, "Wrong size on LyraCharacter_OnCancelRebirth");
static_assert(offsetof(LyraCharacter_OnCancelRebirth, Actor) == 0x000000, "Member 'LyraCharacter_OnCancelRebirth::Actor' has a wrong offset!");

// Function LyraGame.LyraCharacter.OnControllerChangedTeam
// 0x0010 (0x0010 - 0x0000)
struct LyraCharacter_OnControllerChangedTeam final
{
public:
	class UObject*                                TeamAgent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldTeam;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeam;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_OnControllerChangedTeam) == 0x000008, "Wrong alignment on LyraCharacter_OnControllerChangedTeam");
static_assert(sizeof(LyraCharacter_OnControllerChangedTeam) == 0x000010, "Wrong size on LyraCharacter_OnControllerChangedTeam");
static_assert(offsetof(LyraCharacter_OnControllerChangedTeam, TeamAgent) == 0x000000, "Member 'LyraCharacter_OnControllerChangedTeam::TeamAgent' has a wrong offset!");
static_assert(offsetof(LyraCharacter_OnControllerChangedTeam, OldTeam) == 0x000008, "Member 'LyraCharacter_OnControllerChangedTeam::OldTeam' has a wrong offset!");
static_assert(offsetof(LyraCharacter_OnControllerChangedTeam, NewTeam) == 0x00000C, "Member 'LyraCharacter_OnControllerChangedTeam::NewTeam' has a wrong offset!");

// Function LyraGame.LyraCharacter.OnCosmeticViewChanged
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_OnCosmeticViewChanged final
{
public:
	bool                                          IsFirstPerson;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_OnCosmeticViewChanged) == 0x000001, "Wrong alignment on LyraCharacter_OnCosmeticViewChanged");
static_assert(sizeof(LyraCharacter_OnCosmeticViewChanged) == 0x000001, "Wrong size on LyraCharacter_OnCosmeticViewChanged");
static_assert(offsetof(LyraCharacter_OnCosmeticViewChanged, IsFirstPerson) == 0x000000, "Member 'LyraCharacter_OnCosmeticViewChanged::IsFirstPerson' has a wrong offset!");

// Function LyraGame.LyraCharacter.OnDeathFinished
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_OnDeathFinished final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_OnDeathFinished) == 0x000008, "Wrong alignment on LyraCharacter_OnDeathFinished");
static_assert(sizeof(LyraCharacter_OnDeathFinished) == 0x000008, "Wrong size on LyraCharacter_OnDeathFinished");
static_assert(offsetof(LyraCharacter_OnDeathFinished, OwningActor) == 0x000000, "Member 'LyraCharacter_OnDeathFinished::OwningActor' has a wrong offset!");

// Function LyraGame.LyraCharacter.OnDeathStarted
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_OnDeathStarted final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_OnDeathStarted) == 0x000008, "Wrong alignment on LyraCharacter_OnDeathStarted");
static_assert(sizeof(LyraCharacter_OnDeathStarted) == 0x000008, "Wrong size on LyraCharacter_OnDeathStarted");
static_assert(offsetof(LyraCharacter_OnDeathStarted, OwningActor) == 0x000000, "Member 'LyraCharacter_OnDeathStarted::OwningActor' has a wrong offset!");

// Function LyraGame.LyraCharacter.OnFinishRebirth
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_OnFinishRebirth final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_OnFinishRebirth) == 0x000008, "Wrong alignment on LyraCharacter_OnFinishRebirth");
static_assert(sizeof(LyraCharacter_OnFinishRebirth) == 0x000008, "Wrong size on LyraCharacter_OnFinishRebirth");
static_assert(offsetof(LyraCharacter_OnFinishRebirth, Actor) == 0x000000, "Member 'LyraCharacter_OnFinishRebirth::Actor' has a wrong offset!");

// Function LyraGame.LyraCharacter.OnRep_MyTeamID
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_OnRep_MyTeamID final
{
public:
	struct FGenericTeamId                         OldTeamID;                                         // 0x0000(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_OnRep_MyTeamID) == 0x000001, "Wrong alignment on LyraCharacter_OnRep_MyTeamID");
static_assert(sizeof(LyraCharacter_OnRep_MyTeamID) == 0x000001, "Wrong size on LyraCharacter_OnRep_MyTeamID");
static_assert(offsetof(LyraCharacter_OnRep_MyTeamID, OldTeamID) == 0x000000, "Member 'LyraCharacter_OnRep_MyTeamID::OldTeamID' has a wrong offset!");

// Function LyraGame.LyraCharacter.OnStartEscaping
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_OnStartEscaping final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_OnStartEscaping) == 0x000008, "Wrong alignment on LyraCharacter_OnStartEscaping");
static_assert(sizeof(LyraCharacter_OnStartEscaping) == 0x000008, "Wrong size on LyraCharacter_OnStartEscaping");
static_assert(offsetof(LyraCharacter_OnStartEscaping, Actor) == 0x000000, "Member 'LyraCharacter_OnStartEscaping::Actor' has a wrong offset!");

// Function LyraGame.LyraCharacter.OnStartRebirth
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_OnStartRebirth final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_OnStartRebirth) == 0x000008, "Wrong alignment on LyraCharacter_OnStartRebirth");
static_assert(sizeof(LyraCharacter_OnStartRebirth) == 0x000008, "Wrong size on LyraCharacter_OnStartRebirth");
static_assert(offsetof(LyraCharacter_OnStartRebirth, Actor) == 0x000000, "Member 'LyraCharacter_OnStartRebirth::Actor' has a wrong offset!");

// Function LyraGame.LyraCharacter.OnTravelAsSpectator
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_OnTravelAsSpectator final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_OnTravelAsSpectator) == 0x000008, "Wrong alignment on LyraCharacter_OnTravelAsSpectator");
static_assert(sizeof(LyraCharacter_OnTravelAsSpectator) == 0x000008, "Wrong size on LyraCharacter_OnTravelAsSpectator");
static_assert(offsetof(LyraCharacter_OnTravelAsSpectator, Actor) == 0x000000, "Member 'LyraCharacter_OnTravelAsSpectator::Actor' has a wrong offset!");

// Function LyraGame.LyraCharacter.RemoveGameplayEffectWithGrantedTags
// 0x0028 (0x0028 - 0x0000)
struct LyraCharacter_RemoveGameplayEffectWithGrantedTags final
{
public:
	struct FGameplayTagContainer                  WithGrantedTags;                                   // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraCharacter_RemoveGameplayEffectWithGrantedTags) == 0x000008, "Wrong alignment on LyraCharacter_RemoveGameplayEffectWithGrantedTags");
static_assert(sizeof(LyraCharacter_RemoveGameplayEffectWithGrantedTags) == 0x000028, "Wrong size on LyraCharacter_RemoveGameplayEffectWithGrantedTags");
static_assert(offsetof(LyraCharacter_RemoveGameplayEffectWithGrantedTags, WithGrantedTags) == 0x000000, "Member 'LyraCharacter_RemoveGameplayEffectWithGrantedTags::WithGrantedTags' has a wrong offset!");
static_assert(offsetof(LyraCharacter_RemoveGameplayEffectWithGrantedTags, StacksToRemove) == 0x000020, "Member 'LyraCharacter_RemoveGameplayEffectWithGrantedTags::StacksToRemove' has a wrong offset!");

// Function LyraGame.LyraCharacter.ServerRPCChangeGender
// 0x0004 (0x0004 - 0x0000)
struct LyraCharacter_ServerRPCChangeGender final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_ServerRPCChangeGender) == 0x000004, "Wrong alignment on LyraCharacter_ServerRPCChangeGender");
static_assert(sizeof(LyraCharacter_ServerRPCChangeGender) == 0x000004, "Wrong size on LyraCharacter_ServerRPCChangeGender");
static_assert(offsetof(LyraCharacter_ServerRPCChangeGender, Param_Index) == 0x000000, "Member 'LyraCharacter_ServerRPCChangeGender::Param_Index' has a wrong offset!");

// Function LyraGame.LyraCharacter.ServerRPCChangeRace
// 0x0004 (0x0004 - 0x0000)
struct LyraCharacter_ServerRPCChangeRace final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_ServerRPCChangeRace) == 0x000004, "Wrong alignment on LyraCharacter_ServerRPCChangeRace");
static_assert(sizeof(LyraCharacter_ServerRPCChangeRace) == 0x000004, "Wrong size on LyraCharacter_ServerRPCChangeRace");
static_assert(offsetof(LyraCharacter_ServerRPCChangeRace, Param_Index) == 0x000000, "Member 'LyraCharacter_ServerRPCChangeRace::Param_Index' has a wrong offset!");

// Function LyraGame.LyraCharacter.ServerRPCNavigation
// 0x0018 (0x0018 - 0x0000)
struct LyraCharacter_ServerRPCNavigation final
{
public:
	struct FVector                                DstLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_ServerRPCNavigation) == 0x000008, "Wrong alignment on LyraCharacter_ServerRPCNavigation");
static_assert(sizeof(LyraCharacter_ServerRPCNavigation) == 0x000018, "Wrong size on LyraCharacter_ServerRPCNavigation");
static_assert(offsetof(LyraCharacter_ServerRPCNavigation, DstLocation) == 0x000000, "Member 'LyraCharacter_ServerRPCNavigation::DstLocation' has a wrong offset!");

// Function LyraGame.LyraCharacter.ServerRPCNavigationToActor
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_ServerRPCNavigationToActor final
{
public:
	const class AActor*                           Goal;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_ServerRPCNavigationToActor) == 0x000008, "Wrong alignment on LyraCharacter_ServerRPCNavigationToActor");
static_assert(sizeof(LyraCharacter_ServerRPCNavigationToActor) == 0x000008, "Wrong size on LyraCharacter_ServerRPCNavigationToActor");
static_assert(offsetof(LyraCharacter_ServerRPCNavigationToActor, Goal) == 0x000000, "Member 'LyraCharacter_ServerRPCNavigationToActor::Goal' has a wrong offset!");

// Function LyraGame.LyraCharacter.SetAITick
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_SetAITick final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_SetAITick) == 0x000001, "Wrong alignment on LyraCharacter_SetAITick");
static_assert(sizeof(LyraCharacter_SetAITick) == 0x000001, "Wrong size on LyraCharacter_SetAITick");
static_assert(offsetof(LyraCharacter_SetAITick, Enabled) == 0x000000, "Member 'LyraCharacter_SetAITick::Enabled' has a wrong offset!");

// Function LyraGame.LyraCharacter.SetClientTick
// 0x0002 (0x0002 - 0x0000)
struct LyraCharacter_SetClientTick final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfPauseClientTickReason                     Reason;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_SetClientTick) == 0x000001, "Wrong alignment on LyraCharacter_SetClientTick");
static_assert(sizeof(LyraCharacter_SetClientTick) == 0x000002, "Wrong size on LyraCharacter_SetClientTick");
static_assert(offsetof(LyraCharacter_SetClientTick, Enabled) == 0x000000, "Member 'LyraCharacter_SetClientTick::Enabled' has a wrong offset!");
static_assert(offsetof(LyraCharacter_SetClientTick, Reason) == 0x000001, "Member 'LyraCharacter_SetClientTick::Reason' has a wrong offset!");

// Function LyraGame.LyraCharacter.SetClientTick_BP
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_SetClientTick_BP final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_SetClientTick_BP) == 0x000001, "Wrong alignment on LyraCharacter_SetClientTick_BP");
static_assert(sizeof(LyraCharacter_SetClientTick_BP) == 0x000001, "Wrong size on LyraCharacter_SetClientTick_BP");
static_assert(offsetof(LyraCharacter_SetClientTick_BP, Enabled) == 0x000000, "Member 'LyraCharacter_SetClientTick_BP::Enabled' has a wrong offset!");

// Function LyraGame.LyraCharacter.SetComponentTick
// 0x0002 (0x0002 - 0x0000)
struct LyraCharacter_SetComponentTick final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfPauseActorTickReason                      Reason;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_SetComponentTick) == 0x000001, "Wrong alignment on LyraCharacter_SetComponentTick");
static_assert(sizeof(LyraCharacter_SetComponentTick) == 0x000002, "Wrong size on LyraCharacter_SetComponentTick");
static_assert(offsetof(LyraCharacter_SetComponentTick, Enabled) == 0x000000, "Member 'LyraCharacter_SetComponentTick::Enabled' has a wrong offset!");
static_assert(offsetof(LyraCharacter_SetComponentTick, Reason) == 0x000001, "Member 'LyraCharacter_SetComponentTick::Reason' has a wrong offset!");

// Function LyraGame.LyraCharacter.SetComponentTick_BP
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_SetComponentTick_BP final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_SetComponentTick_BP) == 0x000001, "Wrong alignment on LyraCharacter_SetComponentTick_BP");
static_assert(sizeof(LyraCharacter_SetComponentTick_BP) == 0x000001, "Wrong size on LyraCharacter_SetComponentTick_BP");
static_assert(offsetof(LyraCharacter_SetComponentTick_BP, Enabled) == 0x000000, "Member 'LyraCharacter_SetComponentTick_BP::Enabled' has a wrong offset!");

// Function LyraGame.LyraCharacter.SetDisplayCareer
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_SetDisplayCareer final
{
public:
	ETgfActorCareer                               InCareer;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_SetDisplayCareer) == 0x000001, "Wrong alignment on LyraCharacter_SetDisplayCareer");
static_assert(sizeof(LyraCharacter_SetDisplayCareer) == 0x000001, "Wrong size on LyraCharacter_SetDisplayCareer");
static_assert(offsetof(LyraCharacter_SetDisplayCareer, InCareer) == 0x000000, "Member 'LyraCharacter_SetDisplayCareer::InCareer' has a wrong offset!");

// Function LyraGame.LyraCharacter.SetDisplayRace
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_SetDisplayRace final
{
public:
	ETgfActorRace                                 InRace;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_SetDisplayRace) == 0x000001, "Wrong alignment on LyraCharacter_SetDisplayRace");
static_assert(sizeof(LyraCharacter_SetDisplayRace) == 0x000001, "Wrong size on LyraCharacter_SetDisplayRace");
static_assert(offsetof(LyraCharacter_SetDisplayRace, InRace) == 0x000000, "Member 'LyraCharacter_SetDisplayRace::InRace' has a wrong offset!");

// Function LyraGame.LyraCharacter.SetDSMeshTick
// 0x0002 (0x0002 - 0x0000)
struct LyraCharacter_SetDSMeshTick final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfPauseDSMeshTickReason                     Reason;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_SetDSMeshTick) == 0x000001, "Wrong alignment on LyraCharacter_SetDSMeshTick");
static_assert(sizeof(LyraCharacter_SetDSMeshTick) == 0x000002, "Wrong size on LyraCharacter_SetDSMeshTick");
static_assert(offsetof(LyraCharacter_SetDSMeshTick, Enabled) == 0x000000, "Member 'LyraCharacter_SetDSMeshTick::Enabled' has a wrong offset!");
static_assert(offsetof(LyraCharacter_SetDSMeshTick, Reason) == 0x000001, "Member 'LyraCharacter_SetDSMeshTick::Reason' has a wrong offset!");

// Function LyraGame.LyraCharacter.SetFreezeState
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_SetFreezeState final
{
public:
	bool                                          bFreezeState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_SetFreezeState) == 0x000001, "Wrong alignment on LyraCharacter_SetFreezeState");
static_assert(sizeof(LyraCharacter_SetFreezeState) == 0x000001, "Wrong size on LyraCharacter_SetFreezeState");
static_assert(offsetof(LyraCharacter_SetFreezeState, bFreezeState) == 0x000000, "Member 'LyraCharacter_SetFreezeState::bFreezeState' has a wrong offset!");

// Function LyraGame.LyraCharacter.SetGravityScale
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_SetGravityScale final
{
public:
	float                                         Gravity;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheDefault;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedReplicate;                                     // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraCharacter_SetGravityScale) == 0x000004, "Wrong alignment on LyraCharacter_SetGravityScale");
static_assert(sizeof(LyraCharacter_SetGravityScale) == 0x000008, "Wrong size on LyraCharacter_SetGravityScale");
static_assert(offsetof(LyraCharacter_SetGravityScale, Gravity) == 0x000000, "Member 'LyraCharacter_SetGravityScale::Gravity' has a wrong offset!");
static_assert(offsetof(LyraCharacter_SetGravityScale, CacheDefault) == 0x000004, "Member 'LyraCharacter_SetGravityScale::CacheDefault' has a wrong offset!");
static_assert(offsetof(LyraCharacter_SetGravityScale, NeedReplicate) == 0x000005, "Member 'LyraCharacter_SetGravityScale::NeedReplicate' has a wrong offset!");

// Function LyraGame.LyraCharacter.SetUseControllerRotation
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_SetUseControllerRotation final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_SetUseControllerRotation) == 0x000001, "Wrong alignment on LyraCharacter_SetUseControllerRotation");
static_assert(sizeof(LyraCharacter_SetUseControllerRotation) == 0x000001, "Wrong size on LyraCharacter_SetUseControllerRotation");
static_assert(offsetof(LyraCharacter_SetUseControllerRotation, bValue) == 0x000000, "Member 'LyraCharacter_SetUseControllerRotation::bValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.ShouldAddTeammateMarker
// 0x0010 (0x0010 - 0x0000)
struct LyraCharacter_ShouldAddTeammateMarker final
{
public:
	class ALyraCharacter*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Summoned;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreTarget;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreDeath;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraCharacter_ShouldAddTeammateMarker) == 0x000008, "Wrong alignment on LyraCharacter_ShouldAddTeammateMarker");
static_assert(sizeof(LyraCharacter_ShouldAddTeammateMarker) == 0x000010, "Wrong size on LyraCharacter_ShouldAddTeammateMarker");
static_assert(offsetof(LyraCharacter_ShouldAddTeammateMarker, Target) == 0x000000, "Member 'LyraCharacter_ShouldAddTeammateMarker::Target' has a wrong offset!");
static_assert(offsetof(LyraCharacter_ShouldAddTeammateMarker, Summoned) == 0x000008, "Member 'LyraCharacter_ShouldAddTeammateMarker::Summoned' has a wrong offset!");
static_assert(offsetof(LyraCharacter_ShouldAddTeammateMarker, IgnoreTarget) == 0x000009, "Member 'LyraCharacter_ShouldAddTeammateMarker::IgnoreTarget' has a wrong offset!");
static_assert(offsetof(LyraCharacter_ShouldAddTeammateMarker, IgnoreDeath) == 0x00000A, "Member 'LyraCharacter_ShouldAddTeammateMarker::IgnoreDeath' has a wrong offset!");
static_assert(offsetof(LyraCharacter_ShouldAddTeammateMarker, ReturnValue) == 0x00000B, "Member 'LyraCharacter_ShouldAddTeammateMarker::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.ToggleCapsuleCollision
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_ToggleCapsuleCollision final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_ToggleCapsuleCollision) == 0x000001, "Wrong alignment on LyraCharacter_ToggleCapsuleCollision");
static_assert(sizeof(LyraCharacter_ToggleCapsuleCollision) == 0x000001, "Wrong size on LyraCharacter_ToggleCapsuleCollision");
static_assert(offsetof(LyraCharacter_ToggleCapsuleCollision, bEnable) == 0x000000, "Member 'LyraCharacter_ToggleCapsuleCollision::bEnable' has a wrong offset!");

// Function LyraGame.LyraCharacter.TriggerInput
// 0x0010 (0x0010 - 0x0000)
struct LyraCharacter_TriggerInput final
{
public:
	class FString                                 InputStr;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_TriggerInput) == 0x000008, "Wrong alignment on LyraCharacter_TriggerInput");
static_assert(sizeof(LyraCharacter_TriggerInput) == 0x000010, "Wrong size on LyraCharacter_TriggerInput");
static_assert(offsetof(LyraCharacter_TriggerInput, InputStr) == 0x000000, "Member 'LyraCharacter_TriggerInput::InputStr' has a wrong offset!");

// Function LyraGame.LyraCharacter.TriggerInputContinous
// 0x0010 (0x0010 - 0x0000)
struct LyraCharacter_TriggerInputContinous final
{
public:
	class FString                                 InputStr;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_TriggerInputContinous) == 0x000008, "Wrong alignment on LyraCharacter_TriggerInputContinous");
static_assert(sizeof(LyraCharacter_TriggerInputContinous) == 0x000010, "Wrong size on LyraCharacter_TriggerInputContinous");
static_assert(offsetof(LyraCharacter_TriggerInputContinous, InputStr) == 0x000000, "Member 'LyraCharacter_TriggerInputContinous::InputStr' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetActorCareer
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_GetActorCareer final
{
public:
	ETgfActorCareer                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetActorCareer) == 0x000001, "Wrong alignment on LyraCharacter_GetActorCareer");
static_assert(sizeof(LyraCharacter_GetActorCareer) == 0x000001, "Wrong size on LyraCharacter_GetActorCareer");
static_assert(offsetof(LyraCharacter_GetActorCareer, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetActorCareer::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetActorExp
// 0x0004 (0x0004 - 0x0000)
struct LyraCharacter_GetActorExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetActorExp) == 0x000004, "Wrong alignment on LyraCharacter_GetActorExp");
static_assert(sizeof(LyraCharacter_GetActorExp) == 0x000004, "Wrong size on LyraCharacter_GetActorExp");
static_assert(offsetof(LyraCharacter_GetActorExp, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetActorExp::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetActorGender
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_GetActorGender final
{
public:
	ETgfActorGender                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetActorGender) == 0x000001, "Wrong alignment on LyraCharacter_GetActorGender");
static_assert(sizeof(LyraCharacter_GetActorGender) == 0x000001, "Wrong size on LyraCharacter_GetActorGender");
static_assert(offsetof(LyraCharacter_GetActorGender, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetActorGender::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetActorLevel
// 0x0004 (0x0004 - 0x0000)
struct LyraCharacter_GetActorLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetActorLevel) == 0x000004, "Wrong alignment on LyraCharacter_GetActorLevel");
static_assert(sizeof(LyraCharacter_GetActorLevel) == 0x000004, "Wrong size on LyraCharacter_GetActorLevel");
static_assert(offsetof(LyraCharacter_GetActorLevel, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetActorLevel::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetActorRace
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_GetActorRace final
{
public:
	ETgfActorRace                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetActorRace) == 0x000001, "Wrong alignment on LyraCharacter_GetActorRace");
static_assert(sizeof(LyraCharacter_GetActorRace) == 0x000001, "Wrong size on LyraCharacter_GetActorRace");
static_assert(offsetof(LyraCharacter_GetActorRace, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetActorRace::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetActorRoleTypeId
// 0x0004 (0x0004 - 0x0000)
struct LyraCharacter_GetActorRoleTypeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetActorRoleTypeId) == 0x000004, "Wrong alignment on LyraCharacter_GetActorRoleTypeId");
static_assert(sizeof(LyraCharacter_GetActorRoleTypeId) == 0x000004, "Wrong size on LyraCharacter_GetActorRoleTypeId");
static_assert(offsetof(LyraCharacter_GetActorRoleTypeId, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetActorRoleTypeId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetActorStatIdList
// 0x0010 (0x0010 - 0x0000)
struct LyraCharacter_GetActorStatIdList final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetActorStatIdList) == 0x000008, "Wrong alignment on LyraCharacter_GetActorStatIdList");
static_assert(sizeof(LyraCharacter_GetActorStatIdList) == 0x000010, "Wrong size on LyraCharacter_GetActorStatIdList");
static_assert(offsetof(LyraCharacter_GetActorStatIdList, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetActorStatIdList::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetActorType
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_GetActorType final
{
public:
	ETgfActorType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetActorType) == 0x000001, "Wrong alignment on LyraCharacter_GetActorType");
static_assert(sizeof(LyraCharacter_GetActorType) == 0x000001, "Wrong size on LyraCharacter_GetActorType");
static_assert(offsetof(LyraCharacter_GetActorType, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetActorType::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetAvatarComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_GetAvatarComponent final
{
public:
	class UTgfCharacterAvatarComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetAvatarComponent) == 0x000008, "Wrong alignment on LyraCharacter_GetAvatarComponent");
static_assert(sizeof(LyraCharacter_GetAvatarComponent) == 0x000008, "Wrong size on LyraCharacter_GetAvatarComponent");
static_assert(offsetof(LyraCharacter_GetAvatarComponent, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetAvatarComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetCharacterName
// 0x0010 (0x0010 - 0x0000)
struct LyraCharacter_GetCharacterName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetCharacterName) == 0x000008, "Wrong alignment on LyraCharacter_GetCharacterName");
static_assert(sizeof(LyraCharacter_GetCharacterName) == 0x000010, "Wrong size on LyraCharacter_GetCharacterName");
static_assert(offsetof(LyraCharacter_GetCharacterName, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetCharacterName::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetCharacterOpenId
// 0x0010 (0x0010 - 0x0000)
struct LyraCharacter_GetCharacterOpenId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetCharacterOpenId) == 0x000008, "Wrong alignment on LyraCharacter_GetCharacterOpenId");
static_assert(sizeof(LyraCharacter_GetCharacterOpenId) == 0x000010, "Wrong size on LyraCharacter_GetCharacterOpenId");
static_assert(offsetof(LyraCharacter_GetCharacterOpenId, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetCharacterOpenId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetLyraAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_GetLyraAbilitySystemComponent final
{
public:
	class ULyraAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetLyraAbilitySystemComponent) == 0x000008, "Wrong alignment on LyraCharacter_GetLyraAbilitySystemComponent");
static_assert(sizeof(LyraCharacter_GetLyraAbilitySystemComponent) == 0x000008, "Wrong size on LyraCharacter_GetLyraAbilitySystemComponent");
static_assert(offsetof(LyraCharacter_GetLyraAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetLyraAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetLyraPlayerController
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_GetLyraPlayerController final
{
public:
	class ALyraPlayerController*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetLyraPlayerController) == 0x000008, "Wrong alignment on LyraCharacter_GetLyraPlayerController");
static_assert(sizeof(LyraCharacter_GetLyraPlayerController) == 0x000008, "Wrong size on LyraCharacter_GetLyraPlayerController");
static_assert(offsetof(LyraCharacter_GetLyraPlayerController, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetLyraPlayerController::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetLyraPlayerState
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_GetLyraPlayerState final
{
public:
	class ALyraPlayerState*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetLyraPlayerState) == 0x000008, "Wrong alignment on LyraCharacter_GetLyraPlayerState");
static_assert(sizeof(LyraCharacter_GetLyraPlayerState) == 0x000008, "Wrong size on LyraCharacter_GetLyraPlayerState");
static_assert(offsetof(LyraCharacter_GetLyraPlayerState, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetLyraPlayerState::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetRagdollComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacter_GetRagdollComponent final
{
public:
	class UTgfRagdollComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetRagdollComponent) == 0x000008, "Wrong alignment on LyraCharacter_GetRagdollComponent");
static_assert(sizeof(LyraCharacter_GetRagdollComponent) == 0x000008, "Wrong size on LyraCharacter_GetRagdollComponent");
static_assert(offsetof(LyraCharacter_GetRagdollComponent, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetRagdollComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.GetSpawnTransform
// 0x0060 (0x0060 - 0x0000)
struct LyraCharacter_GetSpawnTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_GetSpawnTransform) == 0x000010, "Wrong alignment on LyraCharacter_GetSpawnTransform");
static_assert(sizeof(LyraCharacter_GetSpawnTransform) == 0x000060, "Wrong size on LyraCharacter_GetSpawnTransform");
static_assert(offsetof(LyraCharacter_GetSpawnTransform, ReturnValue) == 0x000000, "Member 'LyraCharacter_GetSpawnTransform::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.HasInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct LyraCharacter_HasInventoryItem final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDefine;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraCharacter_HasInventoryItem) == 0x000008, "Wrong alignment on LyraCharacter_HasInventoryItem");
static_assert(sizeof(LyraCharacter_HasInventoryItem) == 0x000010, "Wrong size on LyraCharacter_HasInventoryItem");
static_assert(offsetof(LyraCharacter_HasInventoryItem, ItemDefine) == 0x000000, "Member 'LyraCharacter_HasInventoryItem::ItemDefine' has a wrong offset!");
static_assert(offsetof(LyraCharacter_HasInventoryItem, ReturnValue) == 0x000008, "Member 'LyraCharacter_HasInventoryItem::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.IsDeadOrDying
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_IsDeadOrDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_IsDeadOrDying) == 0x000001, "Wrong alignment on LyraCharacter_IsDeadOrDying");
static_assert(sizeof(LyraCharacter_IsDeadOrDying) == 0x000001, "Wrong size on LyraCharacter_IsDeadOrDying");
static_assert(offsetof(LyraCharacter_IsDeadOrDying, ReturnValue) == 0x000000, "Member 'LyraCharacter_IsDeadOrDying::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.IsFirstPersonCharacter
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_IsFirstPersonCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_IsFirstPersonCharacter) == 0x000001, "Wrong alignment on LyraCharacter_IsFirstPersonCharacter");
static_assert(sizeof(LyraCharacter_IsFirstPersonCharacter) == 0x000001, "Wrong size on LyraCharacter_IsFirstPersonCharacter");
static_assert(offsetof(LyraCharacter_IsFirstPersonCharacter, ReturnValue) == 0x000000, "Member 'LyraCharacter_IsFirstPersonCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.IsMithrillCharacter
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_IsMithrillCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_IsMithrillCharacter) == 0x000001, "Wrong alignment on LyraCharacter_IsMithrillCharacter");
static_assert(sizeof(LyraCharacter_IsMithrillCharacter) == 0x000001, "Wrong size on LyraCharacter_IsMithrillCharacter");
static_assert(offsetof(LyraCharacter_IsMithrillCharacter, ReturnValue) == 0x000000, "Member 'LyraCharacter_IsMithrillCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.IsNotAlive
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_IsNotAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_IsNotAlive) == 0x000001, "Wrong alignment on LyraCharacter_IsNotAlive");
static_assert(sizeof(LyraCharacter_IsNotAlive) == 0x000001, "Wrong size on LyraCharacter_IsNotAlive");
static_assert(offsetof(LyraCharacter_IsNotAlive, ReturnValue) == 0x000000, "Member 'LyraCharacter_IsNotAlive::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.IsOnlyServerSide
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_IsOnlyServerSide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_IsOnlyServerSide) == 0x000001, "Wrong alignment on LyraCharacter_IsOnlyServerSide");
static_assert(sizeof(LyraCharacter_IsOnlyServerSide) == 0x000001, "Wrong size on LyraCharacter_IsOnlyServerSide");
static_assert(offsetof(LyraCharacter_IsOnlyServerSide, ReturnValue) == 0x000000, "Member 'LyraCharacter_IsOnlyServerSide::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.IsOnlySpectator
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_IsOnlySpectator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_IsOnlySpectator) == 0x000001, "Wrong alignment on LyraCharacter_IsOnlySpectator");
static_assert(sizeof(LyraCharacter_IsOnlySpectator) == 0x000001, "Wrong size on LyraCharacter_IsOnlySpectator");
static_assert(offsetof(LyraCharacter_IsOnlySpectator, ReturnValue) == 0x000000, "Member 'LyraCharacter_IsOnlySpectator::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.IsPendingDeath
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_IsPendingDeath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_IsPendingDeath) == 0x000001, "Wrong alignment on LyraCharacter_IsPendingDeath");
static_assert(sizeof(LyraCharacter_IsPendingDeath) == 0x000001, "Wrong size on LyraCharacter_IsPendingDeath");
static_assert(offsetof(LyraCharacter_IsPendingDeath, ReturnValue) == 0x000000, "Member 'LyraCharacter_IsPendingDeath::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacter.MithrilResurrecting
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacter_MithrilResurrecting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacter_MithrilResurrecting) == 0x000001, "Wrong alignment on LyraCharacter_MithrilResurrecting");
static_assert(sizeof(LyraCharacter_MithrilResurrecting) == 0x000001, "Wrong size on LyraCharacter_MithrilResurrecting");
static_assert(offsetof(LyraCharacter_MithrilResurrecting, ReturnValue) == 0x000000, "Member 'LyraCharacter_MithrilResurrecting::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfLyraInteractComponent.HandleSettingScreenDestruct
// 0x0008 (0x0008 - 0x0000)
struct TgfLyraInteractComponent_HandleSettingScreenDestruct final
{
public:
	class UObject*                                Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLyraInteractComponent_HandleSettingScreenDestruct) == 0x000008, "Wrong alignment on TgfLyraInteractComponent_HandleSettingScreenDestruct");
static_assert(sizeof(TgfLyraInteractComponent_HandleSettingScreenDestruct) == 0x000008, "Wrong size on TgfLyraInteractComponent_HandleSettingScreenDestruct");
static_assert(offsetof(TgfLyraInteractComponent_HandleSettingScreenDestruct, Args) == 0x000000, "Member 'TgfLyraInteractComponent_HandleSettingScreenDestruct::Args' has a wrong offset!");

// Function LyraGame.TgfLyraInteractComponent.RefreshServerSkillInputMethod
// 0x0002 (0x0002 - 0x0000)
struct TgfLyraInteractComponent_RefreshServerSkillInputMethod final
{
public:
	bool                                          InputChargeSkillMethod;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InputMouseTargetingMethod;                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfLyraInteractComponent_RefreshServerSkillInputMethod) == 0x000001, "Wrong alignment on TgfLyraInteractComponent_RefreshServerSkillInputMethod");
static_assert(sizeof(TgfLyraInteractComponent_RefreshServerSkillInputMethod) == 0x000002, "Wrong size on TgfLyraInteractComponent_RefreshServerSkillInputMethod");
static_assert(offsetof(TgfLyraInteractComponent_RefreshServerSkillInputMethod, InputChargeSkillMethod) == 0x000000, "Member 'TgfLyraInteractComponent_RefreshServerSkillInputMethod::InputChargeSkillMethod' has a wrong offset!");
static_assert(offsetof(TgfLyraInteractComponent_RefreshServerSkillInputMethod, InputMouseTargetingMethod) == 0x000001, "Member 'TgfLyraInteractComponent_RefreshServerSkillInputMethod::InputMouseTargetingMethod' has a wrong offset!");

// Function LyraGame.TgfMagicAttributeSet.OnRep_CurMagic
// 0x0010 (0x0010 - 0x0000)
struct TgfMagicAttributeSet_OnRep_CurMagic final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMagicAttributeSet_OnRep_CurMagic) == 0x000008, "Wrong alignment on TgfMagicAttributeSet_OnRep_CurMagic");
static_assert(sizeof(TgfMagicAttributeSet_OnRep_CurMagic) == 0x000010, "Wrong size on TgfMagicAttributeSet_OnRep_CurMagic");
static_assert(offsetof(TgfMagicAttributeSet_OnRep_CurMagic, OldValue) == 0x000000, "Member 'TgfMagicAttributeSet_OnRep_CurMagic::OldValue' has a wrong offset!");

// Function LyraGame.TgfMagicAttributeSet.OnRep_MagicGenerateRate
// 0x0010 (0x0010 - 0x0000)
struct TgfMagicAttributeSet_OnRep_MagicGenerateRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMagicAttributeSet_OnRep_MagicGenerateRate) == 0x000008, "Wrong alignment on TgfMagicAttributeSet_OnRep_MagicGenerateRate");
static_assert(sizeof(TgfMagicAttributeSet_OnRep_MagicGenerateRate) == 0x000010, "Wrong size on TgfMagicAttributeSet_OnRep_MagicGenerateRate");
static_assert(offsetof(TgfMagicAttributeSet_OnRep_MagicGenerateRate, OldValue) == 0x000000, "Member 'TgfMagicAttributeSet_OnRep_MagicGenerateRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfMagicAttributeSet.OnRep_MagicOnHit
// 0x0010 (0x0010 - 0x0000)
struct TgfMagicAttributeSet_OnRep_MagicOnHit final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMagicAttributeSet_OnRep_MagicOnHit) == 0x000008, "Wrong alignment on TgfMagicAttributeSet_OnRep_MagicOnHit");
static_assert(sizeof(TgfMagicAttributeSet_OnRep_MagicOnHit) == 0x000010, "Wrong size on TgfMagicAttributeSet_OnRep_MagicOnHit");
static_assert(offsetof(TgfMagicAttributeSet_OnRep_MagicOnHit, OldValue) == 0x000000, "Member 'TgfMagicAttributeSet_OnRep_MagicOnHit::OldValue' has a wrong offset!");

// Function LyraGame.TgfMagicAttributeSet.OnRep_MagicOnHurt
// 0x0010 (0x0010 - 0x0000)
struct TgfMagicAttributeSet_OnRep_MagicOnHurt final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMagicAttributeSet_OnRep_MagicOnHurt) == 0x000008, "Wrong alignment on TgfMagicAttributeSet_OnRep_MagicOnHurt");
static_assert(sizeof(TgfMagicAttributeSet_OnRep_MagicOnHurt) == 0x000010, "Wrong size on TgfMagicAttributeSet_OnRep_MagicOnHurt");
static_assert(offsetof(TgfMagicAttributeSet_OnRep_MagicOnHurt, OldValue) == 0x000000, "Member 'TgfMagicAttributeSet_OnRep_MagicOnHurt::OldValue' has a wrong offset!");

// Function LyraGame.TgfMagicAttributeSet.OnRep_MagicOnKill
// 0x0010 (0x0010 - 0x0000)
struct TgfMagicAttributeSet_OnRep_MagicOnKill final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMagicAttributeSet_OnRep_MagicOnKill) == 0x000008, "Wrong alignment on TgfMagicAttributeSet_OnRep_MagicOnKill");
static_assert(sizeof(TgfMagicAttributeSet_OnRep_MagicOnKill) == 0x000010, "Wrong size on TgfMagicAttributeSet_OnRep_MagicOnKill");
static_assert(offsetof(TgfMagicAttributeSet_OnRep_MagicOnKill, OldValue) == 0x000000, "Member 'TgfMagicAttributeSet_OnRep_MagicOnKill::OldValue' has a wrong offset!");

// Function LyraGame.TgfMagicAttributeSet.OnRep_MagicOverTime
// 0x0010 (0x0010 - 0x0000)
struct TgfMagicAttributeSet_OnRep_MagicOverTime final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMagicAttributeSet_OnRep_MagicOverTime) == 0x000008, "Wrong alignment on TgfMagicAttributeSet_OnRep_MagicOverTime");
static_assert(sizeof(TgfMagicAttributeSet_OnRep_MagicOverTime) == 0x000010, "Wrong size on TgfMagicAttributeSet_OnRep_MagicOverTime");
static_assert(offsetof(TgfMagicAttributeSet_OnRep_MagicOverTime, OldValue) == 0x000000, "Member 'TgfMagicAttributeSet_OnRep_MagicOverTime::OldValue' has a wrong offset!");

// Function LyraGame.TgfMagicAttributeSet.OnRep_MaxMagicBase
// 0x0010 (0x0010 - 0x0000)
struct TgfMagicAttributeSet_OnRep_MaxMagicBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMagicAttributeSet_OnRep_MaxMagicBase) == 0x000008, "Wrong alignment on TgfMagicAttributeSet_OnRep_MaxMagicBase");
static_assert(sizeof(TgfMagicAttributeSet_OnRep_MaxMagicBase) == 0x000010, "Wrong size on TgfMagicAttributeSet_OnRep_MaxMagicBase");
static_assert(offsetof(TgfMagicAttributeSet_OnRep_MaxMagicBase, OldValue) == 0x000000, "Member 'TgfMagicAttributeSet_OnRep_MaxMagicBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfMagicAttributeSet.OnRep_MaxMagicPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfMagicAttributeSet_OnRep_MaxMagicPercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMagicAttributeSet_OnRep_MaxMagicPercent) == 0x000008, "Wrong alignment on TgfMagicAttributeSet_OnRep_MaxMagicPercent");
static_assert(sizeof(TgfMagicAttributeSet_OnRep_MaxMagicPercent) == 0x000010, "Wrong size on TgfMagicAttributeSet_OnRep_MaxMagicPercent");
static_assert(offsetof(TgfMagicAttributeSet_OnRep_MaxMagicPercent, OldValue) == 0x000000, "Member 'TgfMagicAttributeSet_OnRep_MaxMagicPercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfMagicAttributeSet.GetMaxMagicFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfMagicAttributeSet_GetMaxMagicFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMagicAttributeSet_GetMaxMagicFinal) == 0x000004, "Wrong alignment on TgfMagicAttributeSet_GetMaxMagicFinal");
static_assert(sizeof(TgfMagicAttributeSet_GetMaxMagicFinal) == 0x000004, "Wrong size on TgfMagicAttributeSet_GetMaxMagicFinal");
static_assert(offsetof(TgfMagicAttributeSet_GetMaxMagicFinal, ReturnValue) == 0x000000, "Member 'TgfMagicAttributeSet_GetMaxMagicFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfMagicAttributeSet.IsFullMP
// 0x0001 (0x0001 - 0x0000)
struct TgfMagicAttributeSet_IsFullMP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMagicAttributeSet_IsFullMP) == 0x000001, "Wrong alignment on TgfMagicAttributeSet_IsFullMP");
static_assert(sizeof(TgfMagicAttributeSet_IsFullMP) == 0x000001, "Wrong size on TgfMagicAttributeSet_IsFullMP");
static_assert(offsetof(TgfMagicAttributeSet_IsFullMP, ReturnValue) == 0x000000, "Member 'TgfMagicAttributeSet_IsFullMP::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraControllerComponent_CharacterParts.AddCharacterPart
// 0x0040 (0x0040 - 0x0000)
struct LyraControllerComponent_CharacterParts_AddCharacterPart final
{
public:
	struct FLyraCharacterPart                     NewPart;                                           // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraControllerComponent_CharacterParts_AddCharacterPart) == 0x000008, "Wrong alignment on LyraControllerComponent_CharacterParts_AddCharacterPart");
static_assert(sizeof(LyraControllerComponent_CharacterParts_AddCharacterPart) == 0x000040, "Wrong size on LyraControllerComponent_CharacterParts_AddCharacterPart");
static_assert(offsetof(LyraControllerComponent_CharacterParts_AddCharacterPart, NewPart) == 0x000000, "Member 'LyraControllerComponent_CharacterParts_AddCharacterPart::NewPart' has a wrong offset!");

// Function LyraGame.LyraControllerComponent_CharacterParts.AddTgfSplitPart
// 0x0038 (0x0038 - 0x0000)
struct LyraControllerComponent_CharacterParts_AddTgfSplitPart final
{
public:
	struct FTgfCharaPartChangeConfig              NewPart;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraControllerComponent_CharacterParts_AddTgfSplitPart) == 0x000008, "Wrong alignment on LyraControllerComponent_CharacterParts_AddTgfSplitPart");
static_assert(sizeof(LyraControllerComponent_CharacterParts_AddTgfSplitPart) == 0x000038, "Wrong size on LyraControllerComponent_CharacterParts_AddTgfSplitPart");
static_assert(offsetof(LyraControllerComponent_CharacterParts_AddTgfSplitPart, NewPart) == 0x000000, "Member 'LyraControllerComponent_CharacterParts_AddTgfSplitPart::NewPart' has a wrong offset!");
static_assert(offsetof(LyraControllerComponent_CharacterParts_AddTgfSplitPart, ReturnValue) == 0x000030, "Member 'LyraControllerComponent_CharacterParts_AddTgfSplitPart::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraControllerComponent_CharacterParts.OnPossessedPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct LyraControllerComponent_CharacterParts_OnPossessedPawnChanged final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraControllerComponent_CharacterParts_OnPossessedPawnChanged) == 0x000008, "Wrong alignment on LyraControllerComponent_CharacterParts_OnPossessedPawnChanged");
static_assert(sizeof(LyraControllerComponent_CharacterParts_OnPossessedPawnChanged) == 0x000010, "Wrong size on LyraControllerComponent_CharacterParts_OnPossessedPawnChanged");
static_assert(offsetof(LyraControllerComponent_CharacterParts_OnPossessedPawnChanged, OldPawn) == 0x000000, "Member 'LyraControllerComponent_CharacterParts_OnPossessedPawnChanged::OldPawn' has a wrong offset!");
static_assert(offsetof(LyraControllerComponent_CharacterParts_OnPossessedPawnChanged, NewPawn) == 0x000008, "Member 'LyraControllerComponent_CharacterParts_OnPossessedPawnChanged::NewPawn' has a wrong offset!");

// Function LyraGame.LyraControllerComponent_CharacterParts.RemoveCharacterPart
// 0x0040 (0x0040 - 0x0000)
struct LyraControllerComponent_CharacterParts_RemoveCharacterPart final
{
public:
	struct FLyraCharacterPart                     PartToRemove;                                      // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraControllerComponent_CharacterParts_RemoveCharacterPart) == 0x000008, "Wrong alignment on LyraControllerComponent_CharacterParts_RemoveCharacterPart");
static_assert(sizeof(LyraControllerComponent_CharacterParts_RemoveCharacterPart) == 0x000040, "Wrong size on LyraControllerComponent_CharacterParts_RemoveCharacterPart");
static_assert(offsetof(LyraControllerComponent_CharacterParts_RemoveCharacterPart, PartToRemove) == 0x000000, "Member 'LyraControllerComponent_CharacterParts_RemoveCharacterPart::PartToRemove' has a wrong offset!");

// Function LyraGame.LyraControllerComponent_CharacterParts.RemoveTgfSplitPart
// 0x0001 (0x0001 - 0x0000)
struct LyraControllerComponent_CharacterParts_RemoveTgfSplitPart final
{
public:
	ETgfCharaPart                                 PartEnum;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraControllerComponent_CharacterParts_RemoveTgfSplitPart) == 0x000001, "Wrong alignment on LyraControllerComponent_CharacterParts_RemoveTgfSplitPart");
static_assert(sizeof(LyraControllerComponent_CharacterParts_RemoveTgfSplitPart) == 0x000001, "Wrong size on LyraControllerComponent_CharacterParts_RemoveTgfSplitPart");
static_assert(offsetof(LyraControllerComponent_CharacterParts_RemoveTgfSplitPart, PartEnum) == 0x000000, "Member 'LyraControllerComponent_CharacterParts_RemoveTgfSplitPart::PartEnum' has a wrong offset!");

// Function LyraGame.TgfMapWidgetBase.NativeAbsoluteUVPosToUniformViewportPosition
// 0x0030 (0x0030 - 0x0000)
struct TgfMapWidgetBase_NativeAbsoluteUVPosToUniformViewportPosition final
{
public:
	struct FVector2D                              InAbsoluteUVPos;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InViewportRect;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMapWidgetBase_NativeAbsoluteUVPosToUniformViewportPosition) == 0x000008, "Wrong alignment on TgfMapWidgetBase_NativeAbsoluteUVPosToUniformViewportPosition");
static_assert(sizeof(TgfMapWidgetBase_NativeAbsoluteUVPosToUniformViewportPosition) == 0x000030, "Wrong size on TgfMapWidgetBase_NativeAbsoluteUVPosToUniformViewportPosition");
static_assert(offsetof(TgfMapWidgetBase_NativeAbsoluteUVPosToUniformViewportPosition, InAbsoluteUVPos) == 0x000000, "Member 'TgfMapWidgetBase_NativeAbsoluteUVPosToUniformViewportPosition::InAbsoluteUVPos' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeAbsoluteUVPosToUniformViewportPosition, InViewportRect) == 0x000010, "Member 'TgfMapWidgetBase_NativeAbsoluteUVPosToUniformViewportPosition::InViewportRect' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeAbsoluteUVPosToUniformViewportPosition, ReturnValue) == 0x000020, "Member 'TgfMapWidgetBase_NativeAbsoluteUVPosToUniformViewportPosition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfMapWidgetBase.NativeCalculateUVRect
// 0x0040 (0x0040 - 0x0000)
struct TgfMapWidgetBase_NativeCalculateUVRect final
{
public:
	struct FVector4                               InMapBounds;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InMapUVScale;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMapWidgetBase_NativeCalculateUVRect) == 0x000010, "Wrong alignment on TgfMapWidgetBase_NativeCalculateUVRect");
static_assert(sizeof(TgfMapWidgetBase_NativeCalculateUVRect) == 0x000040, "Wrong size on TgfMapWidgetBase_NativeCalculateUVRect");
static_assert(offsetof(TgfMapWidgetBase_NativeCalculateUVRect, InMapBounds) == 0x000000, "Member 'TgfMapWidgetBase_NativeCalculateUVRect::InMapBounds' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeCalculateUVRect, InMapUVScale) == 0x000020, "Member 'TgfMapWidgetBase_NativeCalculateUVRect::InMapUVScale' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeCalculateUVRect, ReturnValue) == 0x000030, "Member 'TgfMapWidgetBase_NativeCalculateUVRect::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfMapWidgetBase.NativeCheckInPlayerView
// 0x0090 (0x0090 - 0x0000)
struct TgfMapWidgetBase_NativeCheckInPlayerView final
{
public:
	struct FVector                                InActorLoc;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayerViewSize;                                  // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidget*                          InMapArea;                                         // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               InMapBounds;                                       // 0x0030(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InMapUVScale;                                      // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutWidgetPos;                                      // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutBorderPos;                                      // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBorderRotator;                                  // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0xB];                                       // 0x0085(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfMapWidgetBase_NativeCheckInPlayerView) == 0x000010, "Wrong alignment on TgfMapWidgetBase_NativeCheckInPlayerView");
static_assert(sizeof(TgfMapWidgetBase_NativeCheckInPlayerView) == 0x000090, "Wrong size on TgfMapWidgetBase_NativeCheckInPlayerView");
static_assert(offsetof(TgfMapWidgetBase_NativeCheckInPlayerView, InActorLoc) == 0x000000, "Member 'TgfMapWidgetBase_NativeCheckInPlayerView::InActorLoc' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeCheckInPlayerView, InPlayerViewSize) == 0x000018, "Member 'TgfMapWidgetBase_NativeCheckInPlayerView::InPlayerViewSize' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeCheckInPlayerView, InMapArea) == 0x000020, "Member 'TgfMapWidgetBase_NativeCheckInPlayerView::InMapArea' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeCheckInPlayerView, InMapBounds) == 0x000030, "Member 'TgfMapWidgetBase_NativeCheckInPlayerView::InMapBounds' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeCheckInPlayerView, InMapUVScale) == 0x000050, "Member 'TgfMapWidgetBase_NativeCheckInPlayerView::InMapUVScale' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeCheckInPlayerView, OutWidgetPos) == 0x000060, "Member 'TgfMapWidgetBase_NativeCheckInPlayerView::OutWidgetPos' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeCheckInPlayerView, OutBorderPos) == 0x000070, "Member 'TgfMapWidgetBase_NativeCheckInPlayerView::OutBorderPos' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeCheckInPlayerView, OutBorderRotator) == 0x000080, "Member 'TgfMapWidgetBase_NativeCheckInPlayerView::OutBorderRotator' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeCheckInPlayerView, ReturnValue) == 0x000084, "Member 'TgfMapWidgetBase_NativeCheckInPlayerView::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfMapWidgetBase.NativeGetBorderIntersection
// 0x0058 (0x0058 - 0x0000)
struct TgfMapWidgetBase_NativeGetBorderIntersection final
{
public:
	struct FVector2D                              BorderA;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BorderB;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BorderC;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BorderD;                                           // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutIntersectionLoc;                                // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfMapWidgetBase_NativeGetBorderIntersection) == 0x000008, "Wrong alignment on TgfMapWidgetBase_NativeGetBorderIntersection");
static_assert(sizeof(TgfMapWidgetBase_NativeGetBorderIntersection) == 0x000058, "Wrong size on TgfMapWidgetBase_NativeGetBorderIntersection");
static_assert(offsetof(TgfMapWidgetBase_NativeGetBorderIntersection, BorderA) == 0x000000, "Member 'TgfMapWidgetBase_NativeGetBorderIntersection::BorderA' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetBorderIntersection, BorderB) == 0x000010, "Member 'TgfMapWidgetBase_NativeGetBorderIntersection::BorderB' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetBorderIntersection, BorderC) == 0x000020, "Member 'TgfMapWidgetBase_NativeGetBorderIntersection::BorderC' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetBorderIntersection, BorderD) == 0x000030, "Member 'TgfMapWidgetBase_NativeGetBorderIntersection::BorderD' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetBorderIntersection, OutIntersectionLoc) == 0x000040, "Member 'TgfMapWidgetBase_NativeGetBorderIntersection::OutIntersectionLoc' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetBorderIntersection, ReturnValue) == 0x000050, "Member 'TgfMapWidgetBase_NativeGetBorderIntersection::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfMapWidgetBase.NativeGetOutViewBorderViewData
// 0x0078 (0x0078 - 0x0000)
struct TgfMapWidgetBase_NativeGetOutViewBorderViewData final
{
public:
	struct FVector2D                              InLeftBottom;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InLeftTop;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InRightBottom;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InRightTop;                                        // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InTargetLocation;                                  // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InViewCenterLocation;                              // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBorderPlayerRotator;                            // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMapWidgetBase_NativeGetOutViewBorderViewData) == 0x000008, "Wrong alignment on TgfMapWidgetBase_NativeGetOutViewBorderViewData");
static_assert(sizeof(TgfMapWidgetBase_NativeGetOutViewBorderViewData) == 0x000078, "Wrong size on TgfMapWidgetBase_NativeGetOutViewBorderViewData");
static_assert(offsetof(TgfMapWidgetBase_NativeGetOutViewBorderViewData, InLeftBottom) == 0x000000, "Member 'TgfMapWidgetBase_NativeGetOutViewBorderViewData::InLeftBottom' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetOutViewBorderViewData, InLeftTop) == 0x000010, "Member 'TgfMapWidgetBase_NativeGetOutViewBorderViewData::InLeftTop' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetOutViewBorderViewData, InRightBottom) == 0x000020, "Member 'TgfMapWidgetBase_NativeGetOutViewBorderViewData::InRightBottom' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetOutViewBorderViewData, InRightTop) == 0x000030, "Member 'TgfMapWidgetBase_NativeGetOutViewBorderViewData::InRightTop' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetOutViewBorderViewData, InTargetLocation) == 0x000040, "Member 'TgfMapWidgetBase_NativeGetOutViewBorderViewData::InTargetLocation' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetOutViewBorderViewData, InViewCenterLocation) == 0x000050, "Member 'TgfMapWidgetBase_NativeGetOutViewBorderViewData::InViewCenterLocation' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetOutViewBorderViewData, OutBorderPlayerRotator) == 0x000060, "Member 'TgfMapWidgetBase_NativeGetOutViewBorderViewData::OutBorderPlayerRotator' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeGetOutViewBorderViewData, ReturnValue) == 0x000068, "Member 'TgfMapWidgetBase_NativeGetOutViewBorderViewData::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfMapWidgetBase.NativeUpdatePlayerWidgetRenderTransform
// 0x0050 (0x0050 - 0x0000)
struct TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InUVRect;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                InWidget;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UWidget*                          InMapArea;                                         // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               InMapBounds;                                       // 0x0030(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform) == 0x000010, "Wrong alignment on TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform");
static_assert(sizeof(TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform) == 0x000050, "Wrong size on TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform");
static_assert(offsetof(TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform, InActor) == 0x000000, "Member 'TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform::InActor' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform, InUVRect) == 0x000008, "Member 'TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform::InUVRect' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform, InWidget) == 0x000018, "Member 'TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform::InWidget' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform, InMapArea) == 0x000020, "Member 'TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform::InMapArea' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform, InMapBounds) == 0x000030, "Member 'TgfMapWidgetBase_NativeUpdatePlayerWidgetRenderTransform::InMapBounds' has a wrong offset!");

// Function LyraGame.TgfMapWidgetBase.NativeWorldPositionToAbsoluteUVPosition
// 0x0050 (0x0050 - 0x0000)
struct TgfMapWidgetBase_NativeWorldPositionToAbsoluteUVPosition final
{
public:
	struct FVector                                InWorldLoc;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               InMapBounds;                                       // 0x0020(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMapWidgetBase_NativeWorldPositionToAbsoluteUVPosition) == 0x000010, "Wrong alignment on TgfMapWidgetBase_NativeWorldPositionToAbsoluteUVPosition");
static_assert(sizeof(TgfMapWidgetBase_NativeWorldPositionToAbsoluteUVPosition) == 0x000050, "Wrong size on TgfMapWidgetBase_NativeWorldPositionToAbsoluteUVPosition");
static_assert(offsetof(TgfMapWidgetBase_NativeWorldPositionToAbsoluteUVPosition, InWorldLoc) == 0x000000, "Member 'TgfMapWidgetBase_NativeWorldPositionToAbsoluteUVPosition::InWorldLoc' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeWorldPositionToAbsoluteUVPosition, InMapBounds) == 0x000020, "Member 'TgfMapWidgetBase_NativeWorldPositionToAbsoluteUVPosition::InMapBounds' has a wrong offset!");
static_assert(offsetof(TgfMapWidgetBase_NativeWorldPositionToAbsoluteUVPosition, ReturnValue) == 0x000040, "Member 'TgfMapWidgetBase_NativeWorldPositionToAbsoluteUVPosition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfMaterialParameterModifierInterface.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct TgfMaterialParameterModifierInterface_GetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMaterialParameterModifierInterface_GetMesh) == 0x000008, "Wrong alignment on TgfMaterialParameterModifierInterface_GetMesh");
static_assert(sizeof(TgfMaterialParameterModifierInterface_GetMesh) == 0x000008, "Wrong size on TgfMaterialParameterModifierInterface_GetMesh");
static_assert(offsetof(TgfMaterialParameterModifierInterface_GetMesh, ReturnValue) == 0x000000, "Member 'TgfMaterialParameterModifierInterface_GetMesh::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfMaterialParameterModifierInterface.SetMaterialParameter_Float
// 0x000C (0x000C - 0x0000)
struct TgfMaterialParameterModifierInterface_SetMaterialParameter_Float final
{
public:
	class FName                                   Param;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMaterialParameterModifierInterface_SetMaterialParameter_Float) == 0x000004, "Wrong alignment on TgfMaterialParameterModifierInterface_SetMaterialParameter_Float");
static_assert(sizeof(TgfMaterialParameterModifierInterface_SetMaterialParameter_Float) == 0x00000C, "Wrong size on TgfMaterialParameterModifierInterface_SetMaterialParameter_Float");
static_assert(offsetof(TgfMaterialParameterModifierInterface_SetMaterialParameter_Float, Param) == 0x000000, "Member 'TgfMaterialParameterModifierInterface_SetMaterialParameter_Float::Param' has a wrong offset!");
static_assert(offsetof(TgfMaterialParameterModifierInterface_SetMaterialParameter_Float, Value) == 0x000008, "Member 'TgfMaterialParameterModifierInterface_SetMaterialParameter_Float::Value' has a wrong offset!");

// Function LyraGame.TgfMaterialParameterModifierInterface.EnableDynamicMaterial
// 0x0001 (0x0001 - 0x0000)
struct TgfMaterialParameterModifierInterface_EnableDynamicMaterial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMaterialParameterModifierInterface_EnableDynamicMaterial) == 0x000001, "Wrong alignment on TgfMaterialParameterModifierInterface_EnableDynamicMaterial");
static_assert(sizeof(TgfMaterialParameterModifierInterface_EnableDynamicMaterial) == 0x000001, "Wrong size on TgfMaterialParameterModifierInterface_EnableDynamicMaterial");
static_assert(offsetof(TgfMaterialParameterModifierInterface_EnableDynamicMaterial, ReturnValue) == 0x000000, "Member 'TgfMaterialParameterModifierInterface_EnableDynamicMaterial::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraQuickBarComponent.AddItemToSlot
// 0x0010 (0x0010 - 0x0000)
struct LyraQuickBarComponent_AddItemToSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraInventoryItemInstance*             Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraQuickBarComponent_AddItemToSlot) == 0x000008, "Wrong alignment on LyraQuickBarComponent_AddItemToSlot");
static_assert(sizeof(LyraQuickBarComponent_AddItemToSlot) == 0x000010, "Wrong size on LyraQuickBarComponent_AddItemToSlot");
static_assert(offsetof(LyraQuickBarComponent_AddItemToSlot, SlotIndex) == 0x000000, "Member 'LyraQuickBarComponent_AddItemToSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(LyraQuickBarComponent_AddItemToSlot, Item) == 0x000008, "Member 'LyraQuickBarComponent_AddItemToSlot::Item' has a wrong offset!");

// Function LyraGame.LyraQuickBarComponent.RemoveItemFromSlot
// 0x0010 (0x0010 - 0x0000)
struct LyraQuickBarComponent_RemoveItemFromSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraQuickBarComponent_RemoveItemFromSlot) == 0x000008, "Wrong alignment on LyraQuickBarComponent_RemoveItemFromSlot");
static_assert(sizeof(LyraQuickBarComponent_RemoveItemFromSlot) == 0x000010, "Wrong size on LyraQuickBarComponent_RemoveItemFromSlot");
static_assert(offsetof(LyraQuickBarComponent_RemoveItemFromSlot, SlotIndex) == 0x000000, "Member 'LyraQuickBarComponent_RemoveItemFromSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(LyraQuickBarComponent_RemoveItemFromSlot, ReturnValue) == 0x000008, "Member 'LyraQuickBarComponent_RemoveItemFromSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraQuickBarComponent.SetActiveSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraQuickBarComponent_SetActiveSlotIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraQuickBarComponent_SetActiveSlotIndex) == 0x000004, "Wrong alignment on LyraQuickBarComponent_SetActiveSlotIndex");
static_assert(sizeof(LyraQuickBarComponent_SetActiveSlotIndex) == 0x000004, "Wrong size on LyraQuickBarComponent_SetActiveSlotIndex");
static_assert(offsetof(LyraQuickBarComponent_SetActiveSlotIndex, NewIndex) == 0x000000, "Member 'LyraQuickBarComponent_SetActiveSlotIndex::NewIndex' has a wrong offset!");

// Function LyraGame.LyraQuickBarComponent.GetActiveSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraQuickBarComponent_GetActiveSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraQuickBarComponent_GetActiveSlotIndex) == 0x000004, "Wrong alignment on LyraQuickBarComponent_GetActiveSlotIndex");
static_assert(sizeof(LyraQuickBarComponent_GetActiveSlotIndex) == 0x000004, "Wrong size on LyraQuickBarComponent_GetActiveSlotIndex");
static_assert(offsetof(LyraQuickBarComponent_GetActiveSlotIndex, ReturnValue) == 0x000000, "Member 'LyraQuickBarComponent_GetActiveSlotIndex::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraQuickBarComponent.GetActiveSlotItem
// 0x0008 (0x0008 - 0x0000)
struct LyraQuickBarComponent_GetActiveSlotItem final
{
public:
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraQuickBarComponent_GetActiveSlotItem) == 0x000008, "Wrong alignment on LyraQuickBarComponent_GetActiveSlotItem");
static_assert(sizeof(LyraQuickBarComponent_GetActiveSlotItem) == 0x000008, "Wrong size on LyraQuickBarComponent_GetActiveSlotItem");
static_assert(offsetof(LyraQuickBarComponent_GetActiveSlotItem, ReturnValue) == 0x000000, "Member 'LyraQuickBarComponent_GetActiveSlotItem::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraQuickBarComponent.GetNextFreeItemSlot
// 0x0004 (0x0004 - 0x0000)
struct LyraQuickBarComponent_GetNextFreeItemSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraQuickBarComponent_GetNextFreeItemSlot) == 0x000004, "Wrong alignment on LyraQuickBarComponent_GetNextFreeItemSlot");
static_assert(sizeof(LyraQuickBarComponent_GetNextFreeItemSlot) == 0x000004, "Wrong size on LyraQuickBarComponent_GetNextFreeItemSlot");
static_assert(offsetof(LyraQuickBarComponent_GetNextFreeItemSlot, ReturnValue) == 0x000000, "Member 'LyraQuickBarComponent_GetNextFreeItemSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraQuickBarComponent.GetSlots
// 0x0010 (0x0010 - 0x0000)
struct LyraQuickBarComponent_GetSlots final
{
public:
	TArray<class ULyraInventoryItemInstance*>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraQuickBarComponent_GetSlots) == 0x000008, "Wrong alignment on LyraQuickBarComponent_GetSlots");
static_assert(sizeof(LyraQuickBarComponent_GetSlots) == 0x000010, "Wrong size on LyraQuickBarComponent_GetSlots");
static_assert(offsetof(LyraQuickBarComponent_GetSlots, ReturnValue) == 0x000000, "Member 'LyraQuickBarComponent_GetSlots::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfMonsterReaction.ComputeBonePositions
// 0x0010 (0x0010 - 0x0000)
struct TgfMonsterReaction_ComputeBonePositions final
{
public:
	class UTgfMonsterPostAnim*                    MonsterPostProcessAnim;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionIntensity;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMonsterReaction_ComputeBonePositions) == 0x000008, "Wrong alignment on TgfMonsterReaction_ComputeBonePositions");
static_assert(sizeof(TgfMonsterReaction_ComputeBonePositions) == 0x000010, "Wrong size on TgfMonsterReaction_ComputeBonePositions");
static_assert(offsetof(TgfMonsterReaction_ComputeBonePositions, MonsterPostProcessAnim) == 0x000000, "Member 'TgfMonsterReaction_ComputeBonePositions::MonsterPostProcessAnim' has a wrong offset!");
static_assert(offsetof(TgfMonsterReaction_ComputeBonePositions, DirectionIntensity) == 0x000008, "Member 'TgfMonsterReaction_ComputeBonePositions::DirectionIntensity' has a wrong offset!");
static_assert(offsetof(TgfMonsterReaction_ComputeBonePositions, Alpha) == 0x00000C, "Member 'TgfMonsterReaction_ComputeBonePositions::Alpha' has a wrong offset!");

// Function LyraGame.TgfMonsterReaction.ComputeHitDirection
// 0x0008 (0x0008 - 0x0000)
struct TgfMonsterReaction_ComputeHitDirection final
{
public:
	class AActor*                                 FirstChara;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMonsterReaction_ComputeHitDirection) == 0x000008, "Wrong alignment on TgfMonsterReaction_ComputeHitDirection");
static_assert(sizeof(TgfMonsterReaction_ComputeHitDirection) == 0x000008, "Wrong size on TgfMonsterReaction_ComputeHitDirection");
static_assert(offsetof(TgfMonsterReaction_ComputeHitDirection, FirstChara) == 0x000000, "Member 'TgfMonsterReaction_ComputeHitDirection::FirstChara' has a wrong offset!");

// Function LyraGame.TgfMonsterReaction.GetPostProcessAnim
// 0x0008 (0x0008 - 0x0000)
struct TgfMonsterReaction_GetPostProcessAnim final
{
public:
	class UTgfMonsterPostAnim*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfMonsterReaction_GetPostProcessAnim) == 0x000008, "Wrong alignment on TgfMonsterReaction_GetPostProcessAnim");
static_assert(sizeof(TgfMonsterReaction_GetPostProcessAnim) == 0x000008, "Wrong size on TgfMonsterReaction_GetPostProcessAnim");
static_assert(offsetof(TgfMonsterReaction_GetPostProcessAnim, ReturnValue) == 0x000000, "Member 'TgfMonsterReaction_GetPostProcessAnim::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.FindAttributeComponent
// 0x0010 (0x0010 - 0x0000)
struct TgfAttributeComponent_FindAttributeComponent final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfAttributeComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_FindAttributeComponent) == 0x000008, "Wrong alignment on TgfAttributeComponent_FindAttributeComponent");
static_assert(sizeof(TgfAttributeComponent_FindAttributeComponent) == 0x000010, "Wrong size on TgfAttributeComponent_FindAttributeComponent");
static_assert(offsetof(TgfAttributeComponent_FindAttributeComponent, Actor) == 0x000000, "Member 'TgfAttributeComponent_FindAttributeComponent::Actor' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_FindAttributeComponent, ReturnValue) == 0x000008, "Member 'TgfAttributeComponent_FindAttributeComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.AddDamagePartMonitor
// 0x0110 (0x0110 - 0x0000)
struct TgfAttributeComponent_AddDamagePartMonitor final
{
public:
	struct FTgfDamagePartMonitorConfig            NewMonitorConfig;                                  // 0x0000(0x0108)(Parm, NativeAccessSpecifierPublic)
	bool                                          CheckUnique;                                       // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0109(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAttributeComponent_AddDamagePartMonitor) == 0x000008, "Wrong alignment on TgfAttributeComponent_AddDamagePartMonitor");
static_assert(sizeof(TgfAttributeComponent_AddDamagePartMonitor) == 0x000110, "Wrong size on TgfAttributeComponent_AddDamagePartMonitor");
static_assert(offsetof(TgfAttributeComponent_AddDamagePartMonitor, NewMonitorConfig) == 0x000000, "Member 'TgfAttributeComponent_AddDamagePartMonitor::NewMonitorConfig' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_AddDamagePartMonitor, CheckUnique) == 0x000108, "Member 'TgfAttributeComponent_AddDamagePartMonitor::CheckUnique' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_AddDamagePartMonitor, ReturnValue) == 0x000109, "Member 'TgfAttributeComponent_AddDamagePartMonitor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.CheckTriggerDamagePartMonitor
// 0x0058 (0x0058 - 0x0000)
struct TgfAttributeComponent_CheckTriggerDamagePartMonitor final
{
public:
	struct FGameplayTagContainer                  InstigatorTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTags;                                        // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RestrictAssetTag;                                  // 0x0040(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Times;                                             // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTrigger;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_CheckTriggerDamagePartMonitor) == 0x000008, "Wrong alignment on TgfAttributeComponent_CheckTriggerDamagePartMonitor");
static_assert(sizeof(TgfAttributeComponent_CheckTriggerDamagePartMonitor) == 0x000058, "Wrong size on TgfAttributeComponent_CheckTriggerDamagePartMonitor");
static_assert(offsetof(TgfAttributeComponent_CheckTriggerDamagePartMonitor, InstigatorTags) == 0x000000, "Member 'TgfAttributeComponent_CheckTriggerDamagePartMonitor::InstigatorTags' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_CheckTriggerDamagePartMonitor, TargetTags) == 0x000020, "Member 'TgfAttributeComponent_CheckTriggerDamagePartMonitor::TargetTags' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_CheckTriggerDamagePartMonitor, RestrictAssetTag) == 0x000040, "Member 'TgfAttributeComponent_CheckTriggerDamagePartMonitor::RestrictAssetTag' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_CheckTriggerDamagePartMonitor, Damage) == 0x000048, "Member 'TgfAttributeComponent_CheckTriggerDamagePartMonitor::Damage' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_CheckTriggerDamagePartMonitor, Times) == 0x00004C, "Member 'TgfAttributeComponent_CheckTriggerDamagePartMonitor::Times' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_CheckTriggerDamagePartMonitor, ForceTrigger) == 0x000050, "Member 'TgfAttributeComponent_CheckTriggerDamagePartMonitor::ForceTrigger' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_CheckTriggerDamagePartMonitor, ReturnValue) == 0x000054, "Member 'TgfAttributeComponent_CheckTriggerDamagePartMonitor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.ClientDamageDirectionEvent
// 0x0018 (0x0018 - 0x0000)
struct TgfAttributeComponent_ClientDamageDirectionEvent final
{
public:
	float                                         Direction;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGuarded;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageTarget;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_ClientDamageDirectionEvent) == 0x000008, "Wrong alignment on TgfAttributeComponent_ClientDamageDirectionEvent");
static_assert(sizeof(TgfAttributeComponent_ClientDamageDirectionEvent) == 0x000018, "Wrong size on TgfAttributeComponent_ClientDamageDirectionEvent");
static_assert(offsetof(TgfAttributeComponent_ClientDamageDirectionEvent, Direction) == 0x000000, "Member 'TgfAttributeComponent_ClientDamageDirectionEvent::Direction' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_ClientDamageDirectionEvent, bIsGuarded) == 0x000004, "Member 'TgfAttributeComponent_ClientDamageDirectionEvent::bIsGuarded' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_ClientDamageDirectionEvent, DamageInstigator) == 0x000008, "Member 'TgfAttributeComponent_ClientDamageDirectionEvent::DamageInstigator' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_ClientDamageDirectionEvent, DamageTarget) == 0x000010, "Member 'TgfAttributeComponent_ClientDamageDirectionEvent::DamageTarget' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.CopyAttrValueFromASC
// 0x0010 (0x0010 - 0x0000)
struct TgfAttributeComponent_CopyAttrValueFromASC final
{
public:
	class ULyraAbilitySystemComponent*            OtherASC;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedDirect;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAttributeComponent_CopyAttrValueFromASC) == 0x000008, "Wrong alignment on TgfAttributeComponent_CopyAttrValueFromASC");
static_assert(sizeof(TgfAttributeComponent_CopyAttrValueFromASC) == 0x000010, "Wrong size on TgfAttributeComponent_CopyAttrValueFromASC");
static_assert(offsetof(TgfAttributeComponent_CopyAttrValueFromASC, OtherASC) == 0x000000, "Member 'TgfAttributeComponent_CopyAttrValueFromASC::OtherASC' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_CopyAttrValueFromASC, Rate) == 0x000008, "Member 'TgfAttributeComponent_CopyAttrValueFromASC::Rate' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_CopyAttrValueFromASC, NeedDirect) == 0x00000C, "Member 'TgfAttributeComponent_CopyAttrValueFromASC::NeedDirect' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.DamageSelfDestruct
// 0x0001 (0x0001 - 0x0000)
struct TgfAttributeComponent_DamageSelfDestruct final
{
public:
	bool                                          bFellOutOfWorld;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_DamageSelfDestruct) == 0x000001, "Wrong alignment on TgfAttributeComponent_DamageSelfDestruct");
static_assert(sizeof(TgfAttributeComponent_DamageSelfDestruct) == 0x000001, "Wrong size on TgfAttributeComponent_DamageSelfDestruct");
static_assert(offsetof(TgfAttributeComponent_DamageSelfDestruct, bFellOutOfWorld) == 0x000000, "Member 'TgfAttributeComponent_DamageSelfDestruct::bFellOutOfWorld' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.DumpAttrValueFromASC
// 0x0010 (0x0010 - 0x0000)
struct TgfAttributeComponent_DumpAttrValueFromASC final
{
public:
	class ULyraAbilitySystemComponent*            OtherASC;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAttributeComponent_DumpAttrValueFromASC) == 0x000008, "Wrong alignment on TgfAttributeComponent_DumpAttrValueFromASC");
static_assert(sizeof(TgfAttributeComponent_DumpAttrValueFromASC) == 0x000010, "Wrong size on TgfAttributeComponent_DumpAttrValueFromASC");
static_assert(offsetof(TgfAttributeComponent_DumpAttrValueFromASC, OtherASC) == 0x000000, "Member 'TgfAttributeComponent_DumpAttrValueFromASC::OtherASC' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_DumpAttrValueFromASC, Rate) == 0x000008, "Member 'TgfAttributeComponent_DumpAttrValueFromASC::Rate' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.DumpLevelAttr
// 0x0010 (0x0010 - 0x0000)
struct TgfAttributeComponent_DumpLevelAttr final
{
public:
	struct FTgfResetInitAttrArgs                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_DumpLevelAttr) == 0x000004, "Wrong alignment on TgfAttributeComponent_DumpLevelAttr");
static_assert(sizeof(TgfAttributeComponent_DumpLevelAttr) == 0x000010, "Wrong size on TgfAttributeComponent_DumpLevelAttr");
static_assert(offsetof(TgfAttributeComponent_DumpLevelAttr, ReturnValue) == 0x000000, "Member 'TgfAttributeComponent_DumpLevelAttr::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.FinishDeath
// 0x0001 (0x0001 - 0x0000)
struct TgfAttributeComponent_FinishDeath final
{
public:
	bool                                          StopRagdoll;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_FinishDeath) == 0x000001, "Wrong alignment on TgfAttributeComponent_FinishDeath");
static_assert(sizeof(TgfAttributeComponent_FinishDeath) == 0x000001, "Wrong size on TgfAttributeComponent_FinishDeath");
static_assert(offsetof(TgfAttributeComponent_FinishDeath, StopRagdoll) == 0x000000, "Member 'TgfAttributeComponent_FinishDeath::StopRagdoll' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.GetDamagePartMonitor
// 0x0118 (0x0118 - 0x0000)
struct TgfAttributeComponent_GetDamagePartMonitor final
{
public:
	struct FGameplayTag                           AssetTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfDamagePartMonitorConfig            OutConfig;                                         // 0x0008(0x0108)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAttributeComponent_GetDamagePartMonitor) == 0x000008, "Wrong alignment on TgfAttributeComponent_GetDamagePartMonitor");
static_assert(sizeof(TgfAttributeComponent_GetDamagePartMonitor) == 0x000118, "Wrong size on TgfAttributeComponent_GetDamagePartMonitor");
static_assert(offsetof(TgfAttributeComponent_GetDamagePartMonitor, AssetTag) == 0x000000, "Member 'TgfAttributeComponent_GetDamagePartMonitor::AssetTag' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_GetDamagePartMonitor, OutConfig) == 0x000008, "Member 'TgfAttributeComponent_GetDamagePartMonitor::OutConfig' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_GetDamagePartMonitor, ReturnValue) == 0x000110, "Member 'TgfAttributeComponent_GetDamagePartMonitor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.GrantAbilitySet
// 0x0008 (0x0008 - 0x0000)
struct TgfAttributeComponent_GrantAbilitySet final
{
public:
	const class ULyraAbilitySet*                  AbilitySet;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_GrantAbilitySet) == 0x000008, "Wrong alignment on TgfAttributeComponent_GrantAbilitySet");
static_assert(sizeof(TgfAttributeComponent_GrantAbilitySet) == 0x000008, "Wrong size on TgfAttributeComponent_GrantAbilitySet");
static_assert(offsetof(TgfAttributeComponent_GrantAbilitySet, AbilitySet) == 0x000000, "Member 'TgfAttributeComponent_GrantAbilitySet::AbilitySet' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.InitDefault
// 0x0002 (0x0002 - 0x0000)
struct TgfAttributeComponent_InitDefault final
{
public:
	bool                                          NeedReinitAttr;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedResetFirstLevel;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_InitDefault) == 0x000001, "Wrong alignment on TgfAttributeComponent_InitDefault");
static_assert(sizeof(TgfAttributeComponent_InitDefault) == 0x000002, "Wrong size on TgfAttributeComponent_InitDefault");
static_assert(offsetof(TgfAttributeComponent_InitDefault, NeedReinitAttr) == 0x000000, "Member 'TgfAttributeComponent_InitDefault::NeedReinitAttr' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_InitDefault, NeedResetFirstLevel) == 0x000001, "Member 'TgfAttributeComponent_InitDefault::NeedResetFirstLevel' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.InitializeWithAbilitySystem
// 0x0008 (0x0008 - 0x0000)
struct TgfAttributeComponent_InitializeWithAbilitySystem final
{
public:
	class ULyraAbilitySystemComponent*            InASC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_InitializeWithAbilitySystem) == 0x000008, "Wrong alignment on TgfAttributeComponent_InitializeWithAbilitySystem");
static_assert(sizeof(TgfAttributeComponent_InitializeWithAbilitySystem) == 0x000008, "Wrong size on TgfAttributeComponent_InitializeWithAbilitySystem");
static_assert(offsetof(TgfAttributeComponent_InitializeWithAbilitySystem, InASC) == 0x000000, "Member 'TgfAttributeComponent_InitializeWithAbilitySystem::InASC' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.MulticastDeathEvent
// 0x0010 (0x0010 - 0x0000)
struct TgfAttributeComponent_MulticastDeathEvent final
{
public:
	class AActor*                                 DamageInstigator;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageTarget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_MulticastDeathEvent) == 0x000008, "Wrong alignment on TgfAttributeComponent_MulticastDeathEvent");
static_assert(sizeof(TgfAttributeComponent_MulticastDeathEvent) == 0x000010, "Wrong size on TgfAttributeComponent_MulticastDeathEvent");
static_assert(offsetof(TgfAttributeComponent_MulticastDeathEvent, DamageInstigator) == 0x000000, "Member 'TgfAttributeComponent_MulticastDeathEvent::DamageInstigator' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_MulticastDeathEvent, DamageTarget) == 0x000008, "Member 'TgfAttributeComponent_MulticastDeathEvent::DamageTarget' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.OnRep_DeathStateInfo
// 0x00F8 (0x00F8 - 0x0000)
struct TgfAttributeComponent_OnRep_DeathStateInfo final
{
public:
	struct FTgfDeathStateInfo                     OldDeathStateInfo;                                 // 0x0000(0x00F8)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_OnRep_DeathStateInfo) == 0x000008, "Wrong alignment on TgfAttributeComponent_OnRep_DeathStateInfo");
static_assert(sizeof(TgfAttributeComponent_OnRep_DeathStateInfo) == 0x0000F8, "Wrong size on TgfAttributeComponent_OnRep_DeathStateInfo");
static_assert(offsetof(TgfAttributeComponent_OnRep_DeathStateInfo, OldDeathStateInfo) == 0x000000, "Member 'TgfAttributeComponent_OnRep_DeathStateInfo::OldDeathStateInfo' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.RebirthReinitData
// 0x0001 (0x0001 - 0x0000)
struct TgfAttributeComponent_RebirthReinitData final
{
public:
	bool                                          ReinitInventory;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_RebirthReinitData) == 0x000001, "Wrong alignment on TgfAttributeComponent_RebirthReinitData");
static_assert(sizeof(TgfAttributeComponent_RebirthReinitData) == 0x000001, "Wrong size on TgfAttributeComponent_RebirthReinitData");
static_assert(offsetof(TgfAttributeComponent_RebirthReinitData, ReinitInventory) == 0x000000, "Member 'TgfAttributeComponent_RebirthReinitData::ReinitInventory' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.RegistAttrHandlesBP
// 0x0038 (0x0038 - 0x0000)
struct TgfAttributeComponent_RegistAttrHandlesBP final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_RegistAttrHandlesBP) == 0x000008, "Wrong alignment on TgfAttributeComponent_RegistAttrHandlesBP");
static_assert(sizeof(TgfAttributeComponent_RegistAttrHandlesBP) == 0x000038, "Wrong size on TgfAttributeComponent_RegistAttrHandlesBP");
static_assert(offsetof(TgfAttributeComponent_RegistAttrHandlesBP, Attribute) == 0x000000, "Member 'TgfAttributeComponent_RegistAttrHandlesBP::Attribute' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.RegistTagHandlesBP
// 0x0008 (0x0008 - 0x0000)
struct TgfAttributeComponent_RegistTagHandlesBP final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_RegistTagHandlesBP) == 0x000004, "Wrong alignment on TgfAttributeComponent_RegistTagHandlesBP");
static_assert(sizeof(TgfAttributeComponent_RegistTagHandlesBP) == 0x000008, "Wrong size on TgfAttributeComponent_RegistTagHandlesBP");
static_assert(offsetof(TgfAttributeComponent_RegistTagHandlesBP, GameplayTag) == 0x000000, "Member 'TgfAttributeComponent_RegistTagHandlesBP::GameplayTag' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.RemoveDamagePartMonitor
// 0x0008 (0x0008 - 0x0000)
struct TgfAttributeComponent_RemoveDamagePartMonitor final
{
public:
	struct FGameplayTag                           DamagePartMonitorTag;                              // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_RemoveDamagePartMonitor) == 0x000004, "Wrong alignment on TgfAttributeComponent_RemoveDamagePartMonitor");
static_assert(sizeof(TgfAttributeComponent_RemoveDamagePartMonitor) == 0x000008, "Wrong size on TgfAttributeComponent_RemoveDamagePartMonitor");
static_assert(offsetof(TgfAttributeComponent_RemoveDamagePartMonitor, DamagePartMonitorTag) == 0x000000, "Member 'TgfAttributeComponent_RemoveDamagePartMonitor::DamagePartMonitorTag' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.ResetInitAttribute
// 0x0010 (0x0010 - 0x0000)
struct TgfAttributeComponent_ResetInitAttribute final
{
public:
	struct FTgfResetInitAttrArgs                  Args;                                              // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_ResetInitAttribute) == 0x000004, "Wrong alignment on TgfAttributeComponent_ResetInitAttribute");
static_assert(sizeof(TgfAttributeComponent_ResetInitAttribute) == 0x000010, "Wrong size on TgfAttributeComponent_ResetInitAttribute");
static_assert(offsetof(TgfAttributeComponent_ResetInitAttribute, Args) == 0x000000, "Member 'TgfAttributeComponent_ResetInitAttribute::Args' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.SetInitAttribute
// 0x0040 (0x0040 - 0x0000)
struct TgfAttributeComponent_SetInitAttribute final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                Mod;                                               // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfAttributeComponent_SetInitAttribute) == 0x000008, "Wrong alignment on TgfAttributeComponent_SetInitAttribute");
static_assert(sizeof(TgfAttributeComponent_SetInitAttribute) == 0x000040, "Wrong size on TgfAttributeComponent_SetInitAttribute");
static_assert(offsetof(TgfAttributeComponent_SetInitAttribute, Attribute) == 0x000000, "Member 'TgfAttributeComponent_SetInitAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_SetInitAttribute, Value) == 0x000038, "Member 'TgfAttributeComponent_SetInitAttribute::Value' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_SetInitAttribute, Mod) == 0x00003C, "Member 'TgfAttributeComponent_SetInitAttribute::Mod' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.StartDeath
// 0x00F0 (0x00F0 - 0x0000)
struct TgfAttributeComponent_StartDeath final
{
public:
	EAnimConfigDirection                          DeathDirection;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0008(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_StartDeath) == 0x000008, "Wrong alignment on TgfAttributeComponent_StartDeath");
static_assert(sizeof(TgfAttributeComponent_StartDeath) == 0x0000F0, "Wrong size on TgfAttributeComponent_StartDeath");
static_assert(offsetof(TgfAttributeComponent_StartDeath, DeathDirection) == 0x000000, "Member 'TgfAttributeComponent_StartDeath::DeathDirection' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_StartDeath, HitResult) == 0x000008, "Member 'TgfAttributeComponent_StartDeath::HitResult' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.UpdateAIAttributes
// 0x0004 (0x0004 - 0x0000)
struct TgfAttributeComponent_UpdateAIAttributes final
{
public:
	bool                                          bAngleSpeed;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSightDistance;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHearingDistance;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightDistance;                                    // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_UpdateAIAttributes) == 0x000001, "Wrong alignment on TgfAttributeComponent_UpdateAIAttributes");
static_assert(sizeof(TgfAttributeComponent_UpdateAIAttributes) == 0x000004, "Wrong size on TgfAttributeComponent_UpdateAIAttributes");
static_assert(offsetof(TgfAttributeComponent_UpdateAIAttributes, bAngleSpeed) == 0x000000, "Member 'TgfAttributeComponent_UpdateAIAttributes::bAngleSpeed' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_UpdateAIAttributes, bSightDistance) == 0x000001, "Member 'TgfAttributeComponent_UpdateAIAttributes::bSightDistance' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_UpdateAIAttributes, bHearingDistance) == 0x000002, "Member 'TgfAttributeComponent_UpdateAIAttributes::bHearingDistance' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_UpdateAIAttributes, bLightDistance) == 0x000003, "Member 'TgfAttributeComponent_UpdateAIAttributes::bLightDistance' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.GetAttributeSet
// 0x0010 (0x0010 - 0x0000)
struct TgfAttributeComponent_GetAttributeSet final
{
public:
	TSubclassOf<class UAttributeSet>              AttributeSetClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAttributeSet*                    ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_GetAttributeSet) == 0x000008, "Wrong alignment on TgfAttributeComponent_GetAttributeSet");
static_assert(sizeof(TgfAttributeComponent_GetAttributeSet) == 0x000010, "Wrong size on TgfAttributeComponent_GetAttributeSet");
static_assert(offsetof(TgfAttributeComponent_GetAttributeSet, AttributeSetClass) == 0x000000, "Member 'TgfAttributeComponent_GetAttributeSet::AttributeSetClass' has a wrong offset!");
static_assert(offsetof(TgfAttributeComponent_GetAttributeSet, ReturnValue) == 0x000008, "Member 'TgfAttributeComponent_GetAttributeSet::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.GetDeadOrDying
// 0x0001 (0x0001 - 0x0000)
struct TgfAttributeComponent_GetDeadOrDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_GetDeadOrDying) == 0x000001, "Wrong alignment on TgfAttributeComponent_GetDeadOrDying");
static_assert(sizeof(TgfAttributeComponent_GetDeadOrDying) == 0x000001, "Wrong size on TgfAttributeComponent_GetDeadOrDying");
static_assert(offsetof(TgfAttributeComponent_GetDeadOrDying, ReturnValue) == 0x000000, "Member 'TgfAttributeComponent_GetDeadOrDying::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.GetDeathDirection
// 0x0001 (0x0001 - 0x0000)
struct TgfAttributeComponent_GetDeathDirection final
{
public:
	EAnimConfigDirection                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_GetDeathDirection) == 0x000001, "Wrong alignment on TgfAttributeComponent_GetDeathDirection");
static_assert(sizeof(TgfAttributeComponent_GetDeathDirection) == 0x000001, "Wrong size on TgfAttributeComponent_GetDeathDirection");
static_assert(offsetof(TgfAttributeComponent_GetDeathDirection, ReturnValue) == 0x000000, "Member 'TgfAttributeComponent_GetDeathDirection::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.GetDeathState
// 0x0001 (0x0001 - 0x0000)
struct TgfAttributeComponent_GetDeathState final
{
public:
	ETgfDeathState                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_GetDeathState) == 0x000001, "Wrong alignment on TgfAttributeComponent_GetDeathState");
static_assert(sizeof(TgfAttributeComponent_GetDeathState) == 0x000001, "Wrong size on TgfAttributeComponent_GetDeathState");
static_assert(offsetof(TgfAttributeComponent_GetDeathState, ReturnValue) == 0x000000, "Member 'TgfAttributeComponent_GetDeathState::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.GetHitResult
// 0x00E8 (0x00E8 - 0x0000)
struct TgfAttributeComponent_GetHitResult final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x00E8)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_GetHitResult) == 0x000008, "Wrong alignment on TgfAttributeComponent_GetHitResult");
static_assert(sizeof(TgfAttributeComponent_GetHitResult) == 0x0000E8, "Wrong size on TgfAttributeComponent_GetHitResult");
static_assert(offsetof(TgfAttributeComponent_GetHitResult, ReturnValue) == 0x000000, "Member 'TgfAttributeComponent_GetHitResult::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.IsDeadOrDying
// 0x0001 (0x0001 - 0x0000)
struct TgfAttributeComponent_IsDeadOrDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_IsDeadOrDying) == 0x000001, "Wrong alignment on TgfAttributeComponent_IsDeadOrDying");
static_assert(sizeof(TgfAttributeComponent_IsDeadOrDying) == 0x000001, "Wrong size on TgfAttributeComponent_IsDeadOrDying");
static_assert(offsetof(TgfAttributeComponent_IsDeadOrDying, ReturnValue) == 0x000000, "Member 'TgfAttributeComponent_IsDeadOrDying::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.IsNotAlive
// 0x0001 (0x0001 - 0x0000)
struct TgfAttributeComponent_IsNotAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_IsNotAlive) == 0x000001, "Wrong alignment on TgfAttributeComponent_IsNotAlive");
static_assert(sizeof(TgfAttributeComponent_IsNotAlive) == 0x000001, "Wrong size on TgfAttributeComponent_IsNotAlive");
static_assert(offsetof(TgfAttributeComponent_IsNotAlive, ReturnValue) == 0x000000, "Member 'TgfAttributeComponent_IsNotAlive::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.IsOnlySpectator
// 0x0001 (0x0001 - 0x0000)
struct TgfAttributeComponent_IsOnlySpectator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_IsOnlySpectator) == 0x000001, "Wrong alignment on TgfAttributeComponent_IsOnlySpectator");
static_assert(sizeof(TgfAttributeComponent_IsOnlySpectator) == 0x000001, "Wrong size on TgfAttributeComponent_IsOnlySpectator");
static_assert(offsetof(TgfAttributeComponent_IsOnlySpectator, ReturnValue) == 0x000000, "Member 'TgfAttributeComponent_IsOnlySpectator::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttributeComponent.IsPendingDeath
// 0x0001 (0x0001 - 0x0000)
struct TgfAttributeComponent_IsPendingDeath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttributeComponent_IsPendingDeath) == 0x000001, "Wrong alignment on TgfAttributeComponent_IsPendingDeath");
static_assert(sizeof(TgfAttributeComponent_IsPendingDeath) == 0x000001, "Wrong size on TgfAttributeComponent_IsPendingDeath");
static_assert(offsetof(TgfAttributeComponent_IsPendingDeath, ReturnValue) == 0x000000, "Member 'TgfAttributeComponent_IsPendingDeath::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNaturalEnergyAttributeSet.OnRep_CurNaturalEnergy
// 0x0010 (0x0010 - 0x0000)
struct TgfNaturalEnergyAttributeSet_OnRep_CurNaturalEnergy final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNaturalEnergyAttributeSet_OnRep_CurNaturalEnergy) == 0x000008, "Wrong alignment on TgfNaturalEnergyAttributeSet_OnRep_CurNaturalEnergy");
static_assert(sizeof(TgfNaturalEnergyAttributeSet_OnRep_CurNaturalEnergy) == 0x000010, "Wrong size on TgfNaturalEnergyAttributeSet_OnRep_CurNaturalEnergy");
static_assert(offsetof(TgfNaturalEnergyAttributeSet_OnRep_CurNaturalEnergy, OldValue) == 0x000000, "Member 'TgfNaturalEnergyAttributeSet_OnRep_CurNaturalEnergy::OldValue' has a wrong offset!");

// Function LyraGame.TgfNaturalEnergyAttributeSet.OnRep_MaxNaturalEnergyBase
// 0x0010 (0x0010 - 0x0000)
struct TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyBase) == 0x000008, "Wrong alignment on TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyBase");
static_assert(sizeof(TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyBase) == 0x000010, "Wrong size on TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyBase");
static_assert(offsetof(TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyBase, OldValue) == 0x000000, "Member 'TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfNaturalEnergyAttributeSet.OnRep_MaxNaturalEnergyPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyPercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyPercent) == 0x000008, "Wrong alignment on TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyPercent");
static_assert(sizeof(TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyPercent) == 0x000010, "Wrong size on TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyPercent");
static_assert(offsetof(TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyPercent, OldValue) == 0x000000, "Member 'TgfNaturalEnergyAttributeSet_OnRep_MaxNaturalEnergyPercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfNaturalEnergyAttributeSet.OnRep_NaturalEnergyGenerateRate
// 0x0010 (0x0010 - 0x0000)
struct TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyGenerateRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyGenerateRate) == 0x000008, "Wrong alignment on TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyGenerateRate");
static_assert(sizeof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyGenerateRate) == 0x000010, "Wrong size on TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyGenerateRate");
static_assert(offsetof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyGenerateRate, OldValue) == 0x000000, "Member 'TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyGenerateRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfNaturalEnergyAttributeSet.OnRep_NaturalEnergyOnHit
// 0x0010 (0x0010 - 0x0000)
struct TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHit final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHit) == 0x000008, "Wrong alignment on TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHit");
static_assert(sizeof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHit) == 0x000010, "Wrong size on TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHit");
static_assert(offsetof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHit, OldValue) == 0x000000, "Member 'TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHit::OldValue' has a wrong offset!");

// Function LyraGame.TgfNaturalEnergyAttributeSet.OnRep_NaturalEnergyOnHurt
// 0x0010 (0x0010 - 0x0000)
struct TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHurt final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHurt) == 0x000008, "Wrong alignment on TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHurt");
static_assert(sizeof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHurt) == 0x000010, "Wrong size on TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHurt");
static_assert(offsetof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHurt, OldValue) == 0x000000, "Member 'TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnHurt::OldValue' has a wrong offset!");

// Function LyraGame.TgfNaturalEnergyAttributeSet.OnRep_NaturalEnergyOnKill
// 0x0010 (0x0010 - 0x0000)
struct TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnKill final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnKill) == 0x000008, "Wrong alignment on TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnKill");
static_assert(sizeof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnKill) == 0x000010, "Wrong size on TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnKill");
static_assert(offsetof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnKill, OldValue) == 0x000000, "Member 'TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOnKill::OldValue' has a wrong offset!");

// Function LyraGame.TgfNaturalEnergyAttributeSet.OnRep_NaturalEnergyOverTime
// 0x0010 (0x0010 - 0x0000)
struct TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOverTime final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOverTime) == 0x000008, "Wrong alignment on TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOverTime");
static_assert(sizeof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOverTime) == 0x000010, "Wrong size on TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOverTime");
static_assert(offsetof(TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOverTime, OldValue) == 0x000000, "Member 'TgfNaturalEnergyAttributeSet_OnRep_NaturalEnergyOverTime::OldValue' has a wrong offset!");

// Function LyraGame.TgfNaturalEnergyAttributeSet.GetMaxNaturalEnergyFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfNaturalEnergyAttributeSet_GetMaxNaturalEnergyFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNaturalEnergyAttributeSet_GetMaxNaturalEnergyFinal) == 0x000004, "Wrong alignment on TgfNaturalEnergyAttributeSet_GetMaxNaturalEnergyFinal");
static_assert(sizeof(TgfNaturalEnergyAttributeSet_GetMaxNaturalEnergyFinal) == 0x000004, "Wrong size on TgfNaturalEnergyAttributeSet_GetMaxNaturalEnergyFinal");
static_assert(offsetof(TgfNaturalEnergyAttributeSet_GetMaxNaturalEnergyFinal, ReturnValue) == 0x000000, "Member 'TgfNaturalEnergyAttributeSet_GetMaxNaturalEnergyFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNaturalEnergyAttributeSet.IsFullNEP
// 0x0001 (0x0001 - 0x0000)
struct TgfNaturalEnergyAttributeSet_IsFullNEP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNaturalEnergyAttributeSet_IsFullNEP) == 0x000001, "Wrong alignment on TgfNaturalEnergyAttributeSet_IsFullNEP");
static_assert(sizeof(TgfNaturalEnergyAttributeSet_IsFullNEP) == 0x000001, "Wrong size on TgfNaturalEnergyAttributeSet_IsFullNEP");
static_assert(offsetof(TgfNaturalEnergyAttributeSet_IsFullNEP, ReturnValue) == 0x000000, "Member 'TgfNaturalEnergyAttributeSet_IsFullNEP::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcBehavior.DoBehavior
// 0x00B8 (0x00B8 - 0x0000)
struct TgfNpcBehavior_DoBehavior final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     EventData;                                         // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcBehavior_DoBehavior) == 0x000008, "Wrong alignment on TgfNpcBehavior_DoBehavior");
static_assert(sizeof(TgfNpcBehavior_DoBehavior) == 0x0000B8, "Wrong size on TgfNpcBehavior_DoBehavior");
static_assert(offsetof(TgfNpcBehavior_DoBehavior, GameplayTag) == 0x000000, "Member 'TgfNpcBehavior_DoBehavior::GameplayTag' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_DoBehavior, EventData) == 0x000008, "Member 'TgfNpcBehavior_DoBehavior::EventData' has a wrong offset!");

// Function LyraGame.TgfNpcBehavior.DoChecks
// 0x00C0 (0x00C0 - 0x0000)
struct TgfNpcBehavior_DoChecks final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     EventData;                                         // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          PassCheck;                                         // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfNpcBehavior_DoChecks) == 0x000008, "Wrong alignment on TgfNpcBehavior_DoChecks");
static_assert(sizeof(TgfNpcBehavior_DoChecks) == 0x0000C0, "Wrong size on TgfNpcBehavior_DoChecks");
static_assert(offsetof(TgfNpcBehavior_DoChecks, GameplayTag) == 0x000000, "Member 'TgfNpcBehavior_DoChecks::GameplayTag' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_DoChecks, EventData) == 0x000008, "Member 'TgfNpcBehavior_DoChecks::EventData' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_DoChecks, PassCheck) == 0x0000B8, "Member 'TgfNpcBehavior_DoChecks::PassCheck' has a wrong offset!");

// Function LyraGame.TgfNpcBehavior.GetIsEditor
// 0x0001 (0x0001 - 0x0000)
struct TgfNpcBehavior_GetIsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcBehavior_GetIsEditor) == 0x000001, "Wrong alignment on TgfNpcBehavior_GetIsEditor");
static_assert(sizeof(TgfNpcBehavior_GetIsEditor) == 0x000001, "Wrong size on TgfNpcBehavior_GetIsEditor");
static_assert(offsetof(TgfNpcBehavior_GetIsEditor, ReturnValue) == 0x000000, "Member 'TgfNpcBehavior_GetIsEditor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcBehavior.GetOwningActor
// 0x0008 (0x0008 - 0x0000)
struct TgfNpcBehavior_GetOwningActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcBehavior_GetOwningActor) == 0x000008, "Wrong alignment on TgfNpcBehavior_GetOwningActor");
static_assert(sizeof(TgfNpcBehavior_GetOwningActor) == 0x000008, "Wrong size on TgfNpcBehavior_GetOwningActor");
static_assert(offsetof(TgfNpcBehavior_GetOwningActor, ReturnValue) == 0x000000, "Member 'TgfNpcBehavior_GetOwningActor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcBehavior.GetOwningCharacter
// 0x0008 (0x0008 - 0x0000)
struct TgfNpcBehavior_GetOwningCharacter final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcBehavior_GetOwningCharacter) == 0x000008, "Wrong alignment on TgfNpcBehavior_GetOwningCharacter");
static_assert(sizeof(TgfNpcBehavior_GetOwningCharacter) == 0x000008, "Wrong size on TgfNpcBehavior_GetOwningCharacter");
static_assert(offsetof(TgfNpcBehavior_GetOwningCharacter, ReturnValue) == 0x000000, "Member 'TgfNpcBehavior_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcBehavior.GetReceivedEventNumber
// 0x000C (0x000C - 0x0000)
struct TgfNpcBehavior_GetReceivedEventNumber final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcBehavior_GetReceivedEventNumber) == 0x000004, "Wrong alignment on TgfNpcBehavior_GetReceivedEventNumber");
static_assert(sizeof(TgfNpcBehavior_GetReceivedEventNumber) == 0x00000C, "Wrong size on TgfNpcBehavior_GetReceivedEventNumber");
static_assert(offsetof(TgfNpcBehavior_GetReceivedEventNumber, EventTag) == 0x000000, "Member 'TgfNpcBehavior_GetReceivedEventNumber::EventTag' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_GetReceivedEventNumber, ReturnValue) == 0x000008, "Member 'TgfNpcBehavior_GetReceivedEventNumber::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcBehavior.HasReceivedEvent
// 0x000C (0x000C - 0x0000)
struct TgfNpcBehavior_HasReceivedEvent final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfNpcBehavior_HasReceivedEvent) == 0x000004, "Wrong alignment on TgfNpcBehavior_HasReceivedEvent");
static_assert(sizeof(TgfNpcBehavior_HasReceivedEvent) == 0x00000C, "Wrong size on TgfNpcBehavior_HasReceivedEvent");
static_assert(offsetof(TgfNpcBehavior_HasReceivedEvent, EventTag) == 0x000000, "Member 'TgfNpcBehavior_HasReceivedEvent::EventTag' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_HasReceivedEvent, ReturnValue) == 0x000008, "Member 'TgfNpcBehavior_HasReceivedEvent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcBehavior.MoveToNextState
// 0x0008 (0x0008 - 0x0000)
struct TgfNpcBehavior_MoveToNextState final
{
public:
	TSubclassOf<class UTgfNpcState>               NextState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcBehavior_MoveToNextState) == 0x000008, "Wrong alignment on TgfNpcBehavior_MoveToNextState");
static_assert(sizeof(TgfNpcBehavior_MoveToNextState) == 0x000008, "Wrong size on TgfNpcBehavior_MoveToNextState");
static_assert(offsetof(TgfNpcBehavior_MoveToNextState, NextState) == 0x000000, "Member 'TgfNpcBehavior_MoveToNextState::NextState' has a wrong offset!");

// Function LyraGame.TgfNpcBehavior.PlayerEquipsItem
// 0x0018 (0x0018 - 0x0000)
struct TgfNpcBehavior_PlayerEquipsItem final
{
public:
	class ALyraCharacter*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraEquipmentDefinition>   Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfNpcBehavior_PlayerEquipsItem) == 0x000008, "Wrong alignment on TgfNpcBehavior_PlayerEquipsItem");
static_assert(sizeof(TgfNpcBehavior_PlayerEquipsItem) == 0x000018, "Wrong size on TgfNpcBehavior_PlayerEquipsItem");
static_assert(offsetof(TgfNpcBehavior_PlayerEquipsItem, Player) == 0x000000, "Member 'TgfNpcBehavior_PlayerEquipsItem::Player' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_PlayerEquipsItem, Item) == 0x000008, "Member 'TgfNpcBehavior_PlayerEquipsItem::Item' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_PlayerEquipsItem, ReturnValue) == 0x000010, "Member 'TgfNpcBehavior_PlayerEquipsItem::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcBehavior.PlayerHasItems
// 0x0018 (0x0018 - 0x0000)
struct TgfNpcBehavior_PlayerHasItems final
{
public:
	class ALyraCharacter*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemDefinition> Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredNumber;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfNpcBehavior_PlayerHasItems) == 0x000008, "Wrong alignment on TgfNpcBehavior_PlayerHasItems");
static_assert(sizeof(TgfNpcBehavior_PlayerHasItems) == 0x000018, "Wrong size on TgfNpcBehavior_PlayerHasItems");
static_assert(offsetof(TgfNpcBehavior_PlayerHasItems, Player) == 0x000000, "Member 'TgfNpcBehavior_PlayerHasItems::Player' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_PlayerHasItems, Item) == 0x000008, "Member 'TgfNpcBehavior_PlayerHasItems::Item' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_PlayerHasItems, RequiredNumber) == 0x000010, "Member 'TgfNpcBehavior_PlayerHasItems::RequiredNumber' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_PlayerHasItems, ReturnValue) == 0x000014, "Member 'TgfNpcBehavior_PlayerHasItems::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcBehavior.PlayerInventoryHasItems
// 0x0018 (0x0018 - 0x0000)
struct TgfNpcBehavior_PlayerInventoryHasItems final
{
public:
	class ALyraCharacter*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemDefinition> Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredNumber;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfNpcBehavior_PlayerInventoryHasItems) == 0x000008, "Wrong alignment on TgfNpcBehavior_PlayerInventoryHasItems");
static_assert(sizeof(TgfNpcBehavior_PlayerInventoryHasItems) == 0x000018, "Wrong size on TgfNpcBehavior_PlayerInventoryHasItems");
static_assert(offsetof(TgfNpcBehavior_PlayerInventoryHasItems, Player) == 0x000000, "Member 'TgfNpcBehavior_PlayerInventoryHasItems::Player' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_PlayerInventoryHasItems, Item) == 0x000008, "Member 'TgfNpcBehavior_PlayerInventoryHasItems::Item' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_PlayerInventoryHasItems, RequiredNumber) == 0x000010, "Member 'TgfNpcBehavior_PlayerInventoryHasItems::RequiredNumber' has a wrong offset!");
static_assert(offsetof(TgfNpcBehavior_PlayerInventoryHasItems, ReturnValue) == 0x000014, "Member 'TgfNpcBehavior_PlayerInventoryHasItems::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcState.GetOwningActor
// 0x0008 (0x0008 - 0x0000)
struct TgfNpcState_GetOwningActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcState_GetOwningActor) == 0x000008, "Wrong alignment on TgfNpcState_GetOwningActor");
static_assert(sizeof(TgfNpcState_GetOwningActor) == 0x000008, "Wrong size on TgfNpcState_GetOwningActor");
static_assert(offsetof(TgfNpcState_GetOwningActor, ReturnValue) == 0x000000, "Member 'TgfNpcState_GetOwningActor::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcState.GetOwningCharacter
// 0x0008 (0x0008 - 0x0000)
struct TgfNpcState_GetOwningCharacter final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcState_GetOwningCharacter) == 0x000008, "Wrong alignment on TgfNpcState_GetOwningCharacter");
static_assert(sizeof(TgfNpcState_GetOwningCharacter) == 0x000008, "Wrong size on TgfNpcState_GetOwningCharacter");
static_assert(offsetof(TgfNpcState_GetOwningCharacter, ReturnValue) == 0x000000, "Member 'TgfNpcState_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcState.GetReceivedEventNumber
// 0x000C (0x000C - 0x0000)
struct TgfNpcState_GetReceivedEventNumber final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcState_GetReceivedEventNumber) == 0x000004, "Wrong alignment on TgfNpcState_GetReceivedEventNumber");
static_assert(sizeof(TgfNpcState_GetReceivedEventNumber) == 0x00000C, "Wrong size on TgfNpcState_GetReceivedEventNumber");
static_assert(offsetof(TgfNpcState_GetReceivedEventNumber, EventTag) == 0x000000, "Member 'TgfNpcState_GetReceivedEventNumber::EventTag' has a wrong offset!");
static_assert(offsetof(TgfNpcState_GetReceivedEventNumber, ReturnValue) == 0x000008, "Member 'TgfNpcState_GetReceivedEventNumber::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcState.HasReceivedEvent
// 0x000C (0x000C - 0x0000)
struct TgfNpcState_HasReceivedEvent final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfNpcState_HasReceivedEvent) == 0x000004, "Wrong alignment on TgfNpcState_HasReceivedEvent");
static_assert(sizeof(TgfNpcState_HasReceivedEvent) == 0x00000C, "Wrong size on TgfNpcState_HasReceivedEvent");
static_assert(offsetof(TgfNpcState_HasReceivedEvent, EventTag) == 0x000000, "Member 'TgfNpcState_HasReceivedEvent::EventTag' has a wrong offset!");
static_assert(offsetof(TgfNpcState_HasReceivedEvent, ReturnValue) == 0x000008, "Member 'TgfNpcState_HasReceivedEvent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcStateManagerComponent.GetCurrentState
// 0x0008 (0x0008 - 0x0000)
struct TgfNpcStateManagerComponent_GetCurrentState final
{
public:
	class UTgfNpcState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcStateManagerComponent_GetCurrentState) == 0x000008, "Wrong alignment on TgfNpcStateManagerComponent_GetCurrentState");
static_assert(sizeof(TgfNpcStateManagerComponent_GetCurrentState) == 0x000008, "Wrong size on TgfNpcStateManagerComponent_GetCurrentState");
static_assert(offsetof(TgfNpcStateManagerComponent_GetCurrentState, ReturnValue) == 0x000000, "Member 'TgfNpcStateManagerComponent_GetCurrentState::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcStateManagerComponent.GetOwningCharacter
// 0x0008 (0x0008 - 0x0000)
struct TgfNpcStateManagerComponent_GetOwningCharacter final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcStateManagerComponent_GetOwningCharacter) == 0x000008, "Wrong alignment on TgfNpcStateManagerComponent_GetOwningCharacter");
static_assert(sizeof(TgfNpcStateManagerComponent_GetOwningCharacter) == 0x000008, "Wrong size on TgfNpcStateManagerComponent_GetOwningCharacter");
static_assert(offsetof(TgfNpcStateManagerComponent_GetOwningCharacter, ReturnValue) == 0x000000, "Member 'TgfNpcStateManagerComponent_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcStateManagerComponent.IsInState
// 0x0010 (0x0010 - 0x0000)
struct TgfNpcStateManagerComponent_IsInState final
{
public:
	TSubclassOf<class UTgfNpcState>               NpcState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfNpcStateManagerComponent_IsInState) == 0x000008, "Wrong alignment on TgfNpcStateManagerComponent_IsInState");
static_assert(sizeof(TgfNpcStateManagerComponent_IsInState) == 0x000010, "Wrong size on TgfNpcStateManagerComponent_IsInState");
static_assert(offsetof(TgfNpcStateManagerComponent_IsInState, NpcState) == 0x000000, "Member 'TgfNpcStateManagerComponent_IsInState::NpcState' has a wrong offset!");
static_assert(offsetof(TgfNpcStateManagerComponent_IsInState, ReturnValue) == 0x000008, "Member 'TgfNpcStateManagerComponent_IsInState::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfNpcStateManagerComponent.MoveToState
// 0x0008 (0x0008 - 0x0000)
struct TgfNpcStateManagerComponent_MoveToState final
{
public:
	TSubclassOf<class UTgfNpcState>               NextState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfNpcStateManagerComponent_MoveToState) == 0x000008, "Wrong alignment on TgfNpcStateManagerComponent_MoveToState");
static_assert(sizeof(TgfNpcStateManagerComponent_MoveToState) == 0x000008, "Wrong size on TgfNpcStateManagerComponent_MoveToState");
static_assert(offsetof(TgfNpcStateManagerComponent_MoveToState, NextState) == 0x000000, "Member 'TgfNpcStateManagerComponent_MoveToState::NextState' has a wrong offset!");

// Function LyraGame.TgfPlayerGameFlow.ClientTeleportPawn
// 0x0038 (0x0038 - 0x0000)
struct TgfPlayerGameFlow_ClientTeleportPawn final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPlayerGameFlow_ClientTeleportPawn) == 0x000008, "Wrong alignment on TgfPlayerGameFlow_ClientTeleportPawn");
static_assert(sizeof(TgfPlayerGameFlow_ClientTeleportPawn) == 0x000038, "Wrong size on TgfPlayerGameFlow_ClientTeleportPawn");
static_assert(offsetof(TgfPlayerGameFlow_ClientTeleportPawn, Pawn) == 0x000000, "Member 'TgfPlayerGameFlow_ClientTeleportPawn::Pawn' has a wrong offset!");
static_assert(offsetof(TgfPlayerGameFlow_ClientTeleportPawn, Location) == 0x000008, "Member 'TgfPlayerGameFlow_ClientTeleportPawn::Location' has a wrong offset!");
static_assert(offsetof(TgfPlayerGameFlow_ClientTeleportPawn, Rotation) == 0x000020, "Member 'TgfPlayerGameFlow_ClientTeleportPawn::Rotation' has a wrong offset!");

// Function LyraGame.TgfPlayerGameFlow.OnPlayerEnterPortal
// 0x000C (0x000C - 0x0000)
struct TgfPlayerGameFlow_OnPlayerEnterPortal final
{
public:
	struct FTgfEnterPortalParameter               Parameter;                                         // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPlayerGameFlow_OnPlayerEnterPortal) == 0x000004, "Wrong alignment on TgfPlayerGameFlow_OnPlayerEnterPortal");
static_assert(sizeof(TgfPlayerGameFlow_OnPlayerEnterPortal) == 0x00000C, "Wrong size on TgfPlayerGameFlow_OnPlayerEnterPortal");
static_assert(offsetof(TgfPlayerGameFlow_OnPlayerEnterPortal, Parameter) == 0x000000, "Member 'TgfPlayerGameFlow_OnPlayerEnterPortal::Parameter' has a wrong offset!");

// Function LyraGame.TgfPlayerGameFlow.TeleportToChosenPoint
// 0x0001 (0x0001 - 0x0000)
struct TgfPlayerGameFlow_TeleportToChosenPoint final
{
public:
	bool                                          IsDeathPoint;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfPlayerGameFlow_TeleportToChosenPoint) == 0x000001, "Wrong alignment on TgfPlayerGameFlow_TeleportToChosenPoint");
static_assert(sizeof(TgfPlayerGameFlow_TeleportToChosenPoint) == 0x000001, "Wrong size on TgfPlayerGameFlow_TeleportToChosenPoint");
static_assert(offsetof(TgfPlayerGameFlow_TeleportToChosenPoint, IsDeathPoint) == 0x000000, "Member 'TgfPlayerGameFlow_TeleportToChosenPoint::IsDeathPoint' has a wrong offset!");

// Function LyraGame.TgfGearsetInstance.AddGearsetLevel
// 0x0004 (0x0004 - 0x0000)
struct TgfGearsetInstance_AddGearsetLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGearsetInstance_AddGearsetLevel) == 0x000004, "Wrong alignment on TgfGearsetInstance_AddGearsetLevel");
static_assert(sizeof(TgfGearsetInstance_AddGearsetLevel) == 0x000004, "Wrong size on TgfGearsetInstance_AddGearsetLevel");
static_assert(offsetof(TgfGearsetInstance_AddGearsetLevel, Level) == 0x000000, "Member 'TgfGearsetInstance_AddGearsetLevel::Level' has a wrong offset!");

// Function LyraGame.TgfGearsetInstance.GetGearsetLevel
// 0x0004 (0x0004 - 0x0000)
struct TgfGearsetInstance_GetGearsetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGearsetInstance_GetGearsetLevel) == 0x000004, "Wrong alignment on TgfGearsetInstance_GetGearsetLevel");
static_assert(sizeof(TgfGearsetInstance_GetGearsetLevel) == 0x000004, "Wrong size on TgfGearsetInstance_GetGearsetLevel");
static_assert(offsetof(TgfGearsetInstance_GetGearsetLevel, ReturnValue) == 0x000000, "Member 'TgfGearsetInstance_GetGearsetLevel::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfProjectileBase.ApplyProjectileEffect
// 0x00F8 (0x00F8 - 0x0000)
struct TgfProjectileBase_ApplyProjectileEffect final
{
public:
	class AActor*                                 InHitActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             InHitResult;                                       // 0x0008(0x00E8)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          AutoDestroy;                                       // 0x00F0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfProjectileBase_ApplyProjectileEffect) == 0x000008, "Wrong alignment on TgfProjectileBase_ApplyProjectileEffect");
static_assert(sizeof(TgfProjectileBase_ApplyProjectileEffect) == 0x0000F8, "Wrong size on TgfProjectileBase_ApplyProjectileEffect");
static_assert(offsetof(TgfProjectileBase_ApplyProjectileEffect, InHitActor) == 0x000000, "Member 'TgfProjectileBase_ApplyProjectileEffect::InHitActor' has a wrong offset!");
static_assert(offsetof(TgfProjectileBase_ApplyProjectileEffect, InHitResult) == 0x000008, "Member 'TgfProjectileBase_ApplyProjectileEffect::InHitResult' has a wrong offset!");
static_assert(offsetof(TgfProjectileBase_ApplyProjectileEffect, AutoDestroy) == 0x0000F0, "Member 'TgfProjectileBase_ApplyProjectileEffect::AutoDestroy' has a wrong offset!");

// Function LyraGame.TgfProjectileBase.ChangeMesh
// 0x0008 (0x0008 - 0x0000)
struct TgfProjectileBase_ChangeMesh final
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfProjectileBase_ChangeMesh) == 0x000008, "Wrong alignment on TgfProjectileBase_ChangeMesh");
static_assert(sizeof(TgfProjectileBase_ChangeMesh) == 0x000008, "Wrong size on TgfProjectileBase_ChangeMesh");
static_assert(offsetof(TgfProjectileBase_ChangeMesh, Mesh) == 0x000000, "Member 'TgfProjectileBase_ChangeMesh::Mesh' has a wrong offset!");

// Function LyraGame.TgfProjectileBase.CheckGuarded
// 0x0001 (0x0001 - 0x0000)
struct TgfProjectileBase_CheckGuarded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfProjectileBase_CheckGuarded) == 0x000001, "Wrong alignment on TgfProjectileBase_CheckGuarded");
static_assert(sizeof(TgfProjectileBase_CheckGuarded) == 0x000001, "Wrong size on TgfProjectileBase_CheckGuarded");
static_assert(offsetof(TgfProjectileBase_CheckGuarded, ReturnValue) == 0x000000, "Member 'TgfProjectileBase_CheckGuarded::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfProjectileBase.CheckHitInteractEnvironment
// 0x00F0 (0x00F0 - 0x0000)
struct TgfProjectileBase_CheckHitInteractEnvironment final
{
public:
	struct FHitResult                             Result;                                            // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfProjectileBase_CheckHitInteractEnvironment) == 0x000008, "Wrong alignment on TgfProjectileBase_CheckHitInteractEnvironment");
static_assert(sizeof(TgfProjectileBase_CheckHitInteractEnvironment) == 0x0000F0, "Wrong size on TgfProjectileBase_CheckHitInteractEnvironment");
static_assert(offsetof(TgfProjectileBase_CheckHitInteractEnvironment, Result) == 0x000000, "Member 'TgfProjectileBase_CheckHitInteractEnvironment::Result' has a wrong offset!");
static_assert(offsetof(TgfProjectileBase_CheckHitInteractEnvironment, ReturnValue) == 0x0000E8, "Member 'TgfProjectileBase_CheckHitInteractEnvironment::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfProjectileBase.ClientNotifyApplyProjectileEffect
// 0x00F8 (0x00F8 - 0x0000)
struct TgfProjectileBase_ClientNotifyApplyProjectileEffect final
{
public:
	class AActor*                                 InHitActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             InHitResult;                                       // 0x0008(0x00E8)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          AutoDestroy;                                       // 0x00F0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfProjectileBase_ClientNotifyApplyProjectileEffect) == 0x000008, "Wrong alignment on TgfProjectileBase_ClientNotifyApplyProjectileEffect");
static_assert(sizeof(TgfProjectileBase_ClientNotifyApplyProjectileEffect) == 0x0000F8, "Wrong size on TgfProjectileBase_ClientNotifyApplyProjectileEffect");
static_assert(offsetof(TgfProjectileBase_ClientNotifyApplyProjectileEffect, InHitActor) == 0x000000, "Member 'TgfProjectileBase_ClientNotifyApplyProjectileEffect::InHitActor' has a wrong offset!");
static_assert(offsetof(TgfProjectileBase_ClientNotifyApplyProjectileEffect, InHitResult) == 0x000008, "Member 'TgfProjectileBase_ClientNotifyApplyProjectileEffect::InHitResult' has a wrong offset!");
static_assert(offsetof(TgfProjectileBase_ClientNotifyApplyProjectileEffect, AutoDestroy) == 0x0000F0, "Member 'TgfProjectileBase_ClientNotifyApplyProjectileEffect::AutoDestroy' has a wrong offset!");

// Function LyraGame.TgfProjectileBase.Explode
// 0x0040 (0x0040 - 0x0000)
struct TgfProjectileBase_Explode final
{
public:
	TArray<class AActor*>                         OutActors;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          AutoDestroy;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InExcludedActor;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreSelf;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ExplodeCenter;                                     // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfProjectileBase_Explode) == 0x000008, "Wrong alignment on TgfProjectileBase_Explode");
static_assert(sizeof(TgfProjectileBase_Explode) == 0x000040, "Wrong size on TgfProjectileBase_Explode");
static_assert(offsetof(TgfProjectileBase_Explode, OutActors) == 0x000000, "Member 'TgfProjectileBase_Explode::OutActors' has a wrong offset!");
static_assert(offsetof(TgfProjectileBase_Explode, AutoDestroy) == 0x000010, "Member 'TgfProjectileBase_Explode::AutoDestroy' has a wrong offset!");
static_assert(offsetof(TgfProjectileBase_Explode, InExcludedActor) == 0x000018, "Member 'TgfProjectileBase_Explode::InExcludedActor' has a wrong offset!");
static_assert(offsetof(TgfProjectileBase_Explode, IgnoreSelf) == 0x000020, "Member 'TgfProjectileBase_Explode::IgnoreSelf' has a wrong offset!");
static_assert(offsetof(TgfProjectileBase_Explode, ExplodeCenter) == 0x000028, "Member 'TgfProjectileBase_Explode::ExplodeCenter' has a wrong offset!");

// Function LyraGame.TgfProjectileBase.InitGameplayEffectContext
// 0x0080 (0x0080 - 0x0000)
struct TgfProjectileBase_InitGameplayEffectContext final
{
public:
	struct FProjectileInitParams                  Params_0;                                          // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfProjectileBase_InitGameplayEffectContext) == 0x000008, "Wrong alignment on TgfProjectileBase_InitGameplayEffectContext");
static_assert(sizeof(TgfProjectileBase_InitGameplayEffectContext) == 0x000080, "Wrong size on TgfProjectileBase_InitGameplayEffectContext");
static_assert(offsetof(TgfProjectileBase_InitGameplayEffectContext, Params_0) == 0x000000, "Member 'TgfProjectileBase_InitGameplayEffectContext::Params_0' has a wrong offset!");

// Function LyraGame.TgfProjectileAnimDrive.CheckHit
// 0x0004 (0x0004 - 0x0000)
struct TgfProjectileAnimDrive_CheckHit final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfProjectileAnimDrive_CheckHit) == 0x000004, "Wrong alignment on TgfProjectileAnimDrive_CheckHit");
static_assert(sizeof(TgfProjectileAnimDrive_CheckHit) == 0x000004, "Wrong size on TgfProjectileAnimDrive_CheckHit");
static_assert(offsetof(TgfProjectileAnimDrive_CheckHit, DeltaTime) == 0x000000, "Member 'TgfProjectileAnimDrive_CheckHit::DeltaTime' has a wrong offset!");

// Function LyraGame.LyraPlatformEmulationSettings.GetKnownDeviceProfiles
// 0x0010 (0x0010 - 0x0000)
struct LyraPlatformEmulationSettings_GetKnownDeviceProfiles final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlatformEmulationSettings_GetKnownDeviceProfiles) == 0x000008, "Wrong alignment on LyraPlatformEmulationSettings_GetKnownDeviceProfiles");
static_assert(sizeof(LyraPlatformEmulationSettings_GetKnownDeviceProfiles) == 0x000010, "Wrong size on LyraPlatformEmulationSettings_GetKnownDeviceProfiles");
static_assert(offsetof(LyraPlatformEmulationSettings_GetKnownDeviceProfiles, ReturnValue) == 0x000000, "Member 'LyraPlatformEmulationSettings_GetKnownDeviceProfiles::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlatformEmulationSettings.GetKnownPlatformIds
// 0x0010 (0x0010 - 0x0000)
struct LyraPlatformEmulationSettings_GetKnownPlatformIds final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlatformEmulationSettings_GetKnownPlatformIds) == 0x000008, "Wrong alignment on LyraPlatformEmulationSettings_GetKnownPlatformIds");
static_assert(sizeof(LyraPlatformEmulationSettings_GetKnownPlatformIds) == 0x000010, "Wrong size on LyraPlatformEmulationSettings_GetKnownPlatformIds");
static_assert(offsetof(LyraPlatformEmulationSettings_GetKnownPlatformIds, ReturnValue) == 0x000000, "Member 'LyraPlatformEmulationSettings_GetKnownPlatformIds::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfQuickIntoryWidget.OnChangeViewTarget
// 0x0008 (0x0008 - 0x0000)
struct TgfQuickIntoryWidget_OnChangeViewTarget final
{
public:
	class AActor*                                 NewViewTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfQuickIntoryWidget_OnChangeViewTarget) == 0x000008, "Wrong alignment on TgfQuickIntoryWidget_OnChangeViewTarget");
static_assert(sizeof(TgfQuickIntoryWidget_OnChangeViewTarget) == 0x000008, "Wrong size on TgfQuickIntoryWidget_OnChangeViewTarget");
static_assert(offsetof(TgfQuickIntoryWidget_OnChangeViewTarget, NewViewTarget) == 0x000000, "Member 'TgfQuickIntoryWidget_OnChangeViewTarget::NewViewTarget' has a wrong offset!");

// Function LyraGame.TgfRagdollComponent.ApplyPhysicalAnimationProfileBelow
// 0x0014 (0x0014 - 0x0000)
struct TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow final
{
public:
	class FName                                   BodyName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSelf;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearNotFound;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow) == 0x000004, "Wrong alignment on TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow");
static_assert(sizeof(TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow) == 0x000014, "Wrong size on TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow");
static_assert(offsetof(TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow, BodyName) == 0x000000, "Member 'TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow::BodyName' has a wrong offset!");
static_assert(offsetof(TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow, ProfileName) == 0x000008, "Member 'TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow::ProfileName' has a wrong offset!");
static_assert(offsetof(TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow, bIncludeSelf) == 0x000010, "Member 'TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow::bIncludeSelf' has a wrong offset!");
static_assert(offsetof(TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow, bClearNotFound) == 0x000011, "Member 'TgfRagdollComponent_ApplyPhysicalAnimationProfileBelow::bClearNotFound' has a wrong offset!");

// Function LyraGame.TgfRagdollComponent.SetPhysAnimEnabled
// 0x0001 (0x0001 - 0x0000)
struct TgfRagdollComponent_SetPhysAnimEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRagdollComponent_SetPhysAnimEnabled) == 0x000001, "Wrong alignment on TgfRagdollComponent_SetPhysAnimEnabled");
static_assert(sizeof(TgfRagdollComponent_SetPhysAnimEnabled) == 0x000001, "Wrong size on TgfRagdollComponent_SetPhysAnimEnabled");
static_assert(offsetof(TgfRagdollComponent_SetPhysAnimEnabled, Enabled) == 0x000000, "Member 'TgfRagdollComponent_SetPhysAnimEnabled::Enabled' has a wrong offset!");

// Function LyraGame.TgfRagdollComponent.GetPhysAnimComp
// 0x0008 (0x0008 - 0x0000)
struct TgfRagdollComponent_GetPhysAnimComp final
{
public:
	class UPhysicalAnimationComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRagdollComponent_GetPhysAnimComp) == 0x000008, "Wrong alignment on TgfRagdollComponent_GetPhysAnimComp");
static_assert(sizeof(TgfRagdollComponent_GetPhysAnimComp) == 0x000008, "Wrong size on TgfRagdollComponent_GetPhysAnimComp");
static_assert(offsetof(TgfRagdollComponent_GetPhysAnimComp, ReturnValue) == 0x000000, "Member 'TgfRagdollComponent_GetPhysAnimComp::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfRangedWeaponAnimHelperInterface.GetHelperComponent
// 0x0008 (0x0008 - 0x0000)
struct TgfRangedWeaponAnimHelperInterface_GetHelperComponent final
{
public:
	class UTgfRangedWeaponAnimHelperComponent*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRangedWeaponAnimHelperInterface_GetHelperComponent) == 0x000008, "Wrong alignment on TgfRangedWeaponAnimHelperInterface_GetHelperComponent");
static_assert(sizeof(TgfRangedWeaponAnimHelperInterface_GetHelperComponent) == 0x000008, "Wrong size on TgfRangedWeaponAnimHelperInterface_GetHelperComponent");
static_assert(offsetof(TgfRangedWeaponAnimHelperInterface_GetHelperComponent, ReturnValue) == 0x000000, "Member 'TgfRangedWeaponAnimHelperInterface_GetHelperComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfRangedWeaponAnimHelperComponent.ReceiveToggleADS
// 0x0001 (0x0001 - 0x0000)
struct TgfRangedWeaponAnimHelperComponent_ReceiveToggleADS final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRangedWeaponAnimHelperComponent_ReceiveToggleADS) == 0x000001, "Wrong alignment on TgfRangedWeaponAnimHelperComponent_ReceiveToggleADS");
static_assert(sizeof(TgfRangedWeaponAnimHelperComponent_ReceiveToggleADS) == 0x000001, "Wrong size on TgfRangedWeaponAnimHelperComponent_ReceiveToggleADS");
static_assert(offsetof(TgfRangedWeaponAnimHelperComponent_ReceiveToggleADS, bEnable) == 0x000000, "Member 'TgfRangedWeaponAnimHelperComponent_ReceiveToggleADS::bEnable' has a wrong offset!");

// Function LyraGame.TgfRangedWeaponAnimHelperComponent.ToAction
// 0x0008 (0x0008 - 0x0000)
struct TgfRangedWeaponAnimHelperComponent_ToAction final
{
public:
	ERangedWeaponActionType                       Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MontagePlayRate;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRangedWeaponAnimHelperComponent_ToAction) == 0x000004, "Wrong alignment on TgfRangedWeaponAnimHelperComponent_ToAction");
static_assert(sizeof(TgfRangedWeaponAnimHelperComponent_ToAction) == 0x000008, "Wrong size on TgfRangedWeaponAnimHelperComponent_ToAction");
static_assert(offsetof(TgfRangedWeaponAnimHelperComponent_ToAction, Action) == 0x000000, "Member 'TgfRangedWeaponAnimHelperComponent_ToAction::Action' has a wrong offset!");
static_assert(offsetof(TgfRangedWeaponAnimHelperComponent_ToAction, MontagePlayRate) == 0x000004, "Member 'TgfRangedWeaponAnimHelperComponent_ToAction::MontagePlayRate' has a wrong offset!");

// Function LyraGame.TgfRangedWeaponAnimHelperComponent.TryPlayActionMontage
// 0x0008 (0x0008 - 0x0000)
struct TgfRangedWeaponAnimHelperComponent_TryPlayActionMontage final
{
public:
	ERangedWeaponActionType                       Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRangedWeaponAnimHelperComponent_TryPlayActionMontage) == 0x000004, "Wrong alignment on TgfRangedWeaponAnimHelperComponent_TryPlayActionMontage");
static_assert(sizeof(TgfRangedWeaponAnimHelperComponent_TryPlayActionMontage) == 0x000008, "Wrong size on TgfRangedWeaponAnimHelperComponent_TryPlayActionMontage");
static_assert(offsetof(TgfRangedWeaponAnimHelperComponent_TryPlayActionMontage, Action) == 0x000000, "Member 'TgfRangedWeaponAnimHelperComponent_TryPlayActionMontage::Action' has a wrong offset!");
static_assert(offsetof(TgfRangedWeaponAnimHelperComponent_TryPlayActionMontage, Rate) == 0x000004, "Member 'TgfRangedWeaponAnimHelperComponent_TryPlayActionMontage::Rate' has a wrong offset!");

// Function LyraGame.TgfRangedWeaponAnimHelperComponent.GetStatus
// 0x0002 (0x0002 - 0x0000)
struct TgfRangedWeaponAnimHelperComponent_GetStatus final
{
public:
	struct FWeaponAnimStateInfo                   ReturnValue;                                       // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRangedWeaponAnimHelperComponent_GetStatus) == 0x000001, "Wrong alignment on TgfRangedWeaponAnimHelperComponent_GetStatus");
static_assert(sizeof(TgfRangedWeaponAnimHelperComponent_GetStatus) == 0x000002, "Wrong size on TgfRangedWeaponAnimHelperComponent_GetStatus");
static_assert(offsetof(TgfRangedWeaponAnimHelperComponent_GetStatus, ReturnValue) == 0x000000, "Member 'TgfRangedWeaponAnimHelperComponent_GetStatus::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfSkillWidgetBase.BP_OnBuffAdd
// 0x0018 (0x0018 - 0x0000)
struct TgfSkillWidgetBase_BP_OnBuffAdd final
{
public:
	class UTgfGameplayEffect*                     GE;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSkillWidgetBase_BP_OnBuffAdd) == 0x000008, "Wrong alignment on TgfSkillWidgetBase_BP_OnBuffAdd");
static_assert(sizeof(TgfSkillWidgetBase_BP_OnBuffAdd) == 0x000018, "Wrong size on TgfSkillWidgetBase_BP_OnBuffAdd");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnBuffAdd, GE) == 0x000000, "Member 'TgfSkillWidgetBase_BP_OnBuffAdd::GE' has a wrong offset!");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnBuffAdd, ActiveHandle) == 0x000008, "Member 'TgfSkillWidgetBase_BP_OnBuffAdd::ActiveHandle' has a wrong offset!");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnBuffAdd, RemainTime) == 0x000010, "Member 'TgfSkillWidgetBase_BP_OnBuffAdd::RemainTime' has a wrong offset!");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnBuffAdd, TotalTime) == 0x000014, "Member 'TgfSkillWidgetBase_BP_OnBuffAdd::TotalTime' has a wrong offset!");

// Function LyraGame.TgfSkillWidgetBase.BP_OnCooldownStart
// 0x0010 (0x0010 - 0x0000)
struct TgfSkillWidgetBase_BP_OnCooldownStart final
{
public:
	float                                         CooldownTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedHideDuration;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HideDurationLimit;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSkillWidgetBase_BP_OnCooldownStart) == 0x000004, "Wrong alignment on TgfSkillWidgetBase_BP_OnCooldownStart");
static_assert(sizeof(TgfSkillWidgetBase_BP_OnCooldownStart) == 0x000010, "Wrong size on TgfSkillWidgetBase_BP_OnCooldownStart");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnCooldownStart, CooldownTime) == 0x000000, "Member 'TgfSkillWidgetBase_BP_OnCooldownStart::CooldownTime' has a wrong offset!");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnCooldownStart, TotalTime) == 0x000004, "Member 'TgfSkillWidgetBase_BP_OnCooldownStart::TotalTime' has a wrong offset!");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnCooldownStart, bNeedHideDuration) == 0x000008, "Member 'TgfSkillWidgetBase_BP_OnCooldownStart::bNeedHideDuration' has a wrong offset!");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnCooldownStart, HideDurationLimit) == 0x00000C, "Member 'TgfSkillWidgetBase_BP_OnCooldownStart::HideDurationLimit' has a wrong offset!");

// Function LyraGame.TgfSkillWidgetBase.BP_OnGameplayAbilityEnd
// 0x0008 (0x0008 - 0x0000)
struct TgfSkillWidgetBase_BP_OnGameplayAbilityEnd final
{
public:
	class UGameplayAbility*                       GameplayAbility;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSkillWidgetBase_BP_OnGameplayAbilityEnd) == 0x000008, "Wrong alignment on TgfSkillWidgetBase_BP_OnGameplayAbilityEnd");
static_assert(sizeof(TgfSkillWidgetBase_BP_OnGameplayAbilityEnd) == 0x000008, "Wrong size on TgfSkillWidgetBase_BP_OnGameplayAbilityEnd");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnGameplayAbilityEnd, GameplayAbility) == 0x000000, "Member 'TgfSkillWidgetBase_BP_OnGameplayAbilityEnd::GameplayAbility' has a wrong offset!");

// Function LyraGame.TgfSkillWidgetBase.BP_OnGEApply
// 0x0010 (0x0010 - 0x0000)
struct TgfSkillWidgetBase_BP_OnGEApply final
{
public:
	const class UGameplayEffect*                  GE;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSkillWidgetBase_BP_OnGEApply) == 0x000008, "Wrong alignment on TgfSkillWidgetBase_BP_OnGEApply");
static_assert(sizeof(TgfSkillWidgetBase_BP_OnGEApply) == 0x000010, "Wrong size on TgfSkillWidgetBase_BP_OnGEApply");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnGEApply, GE) == 0x000000, "Member 'TgfSkillWidgetBase_BP_OnGEApply::GE' has a wrong offset!");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnGEApply, ActiveHandle) == 0x000008, "Member 'TgfSkillWidgetBase_BP_OnGEApply::ActiveHandle' has a wrong offset!");

// Function LyraGame.TgfSkillWidgetBase.BP_OnGERemove
// 0x0008 (0x0008 - 0x0000)
struct TgfSkillWidgetBase_BP_OnGERemove final
{
public:
	struct FActiveGameplayEffectHandle            GEHandle;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSkillWidgetBase_BP_OnGERemove) == 0x000004, "Wrong alignment on TgfSkillWidgetBase_BP_OnGERemove");
static_assert(sizeof(TgfSkillWidgetBase_BP_OnGERemove) == 0x000008, "Wrong size on TgfSkillWidgetBase_BP_OnGERemove");
static_assert(offsetof(TgfSkillWidgetBase_BP_OnGERemove, GEHandle) == 0x000000, "Member 'TgfSkillWidgetBase_BP_OnGERemove::GEHandle' has a wrong offset!");

// Function LyraGame.TgfSkillWidgetBase.CheckCostEnough
// 0x0001 (0x0001 - 0x0000)
struct TgfSkillWidgetBase_CheckCostEnough final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSkillWidgetBase_CheckCostEnough) == 0x000001, "Wrong alignment on TgfSkillWidgetBase_CheckCostEnough");
static_assert(sizeof(TgfSkillWidgetBase_CheckCostEnough) == 0x000001, "Wrong size on TgfSkillWidgetBase_CheckCostEnough");
static_assert(offsetof(TgfSkillWidgetBase_CheckCostEnough, ReturnValue) == 0x000000, "Member 'TgfSkillWidgetBase_CheckCostEnough::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfSkillWidgetBase.CheckHasAdditionalWeapon
// 0x0001 (0x0001 - 0x0000)
struct TgfSkillWidgetBase_CheckHasAdditionalWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSkillWidgetBase_CheckHasAdditionalWeapon) == 0x000001, "Wrong alignment on TgfSkillWidgetBase_CheckHasAdditionalWeapon");
static_assert(sizeof(TgfSkillWidgetBase_CheckHasAdditionalWeapon) == 0x000001, "Wrong size on TgfSkillWidgetBase_CheckHasAdditionalWeapon");
static_assert(offsetof(TgfSkillWidgetBase_CheckHasAdditionalWeapon, ReturnValue) == 0x000000, "Member 'TgfSkillWidgetBase_CheckHasAdditionalWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfSkillWidgetBase.CheckSkillCanActive
// 0x0001 (0x0001 - 0x0000)
struct TgfSkillWidgetBase_CheckSkillCanActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSkillWidgetBase_CheckSkillCanActive) == 0x000001, "Wrong alignment on TgfSkillWidgetBase_CheckSkillCanActive");
static_assert(sizeof(TgfSkillWidgetBase_CheckSkillCanActive) == 0x000001, "Wrong size on TgfSkillWidgetBase_CheckSkillCanActive");
static_assert(offsetof(TgfSkillWidgetBase_CheckSkillCanActive, ReturnValue) == 0x000000, "Member 'TgfSkillWidgetBase_CheckSkillCanActive::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfSkillWidgetBase.FormatCooldownTime
// 0x0018 (0x0018 - 0x0000)
struct TgfSkillWidgetBase_FormatCooldownTime final
{
public:
	float                                         CDTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSkillWidgetBase_FormatCooldownTime) == 0x000008, "Wrong alignment on TgfSkillWidgetBase_FormatCooldownTime");
static_assert(sizeof(TgfSkillWidgetBase_FormatCooldownTime) == 0x000018, "Wrong size on TgfSkillWidgetBase_FormatCooldownTime");
static_assert(offsetof(TgfSkillWidgetBase_FormatCooldownTime, CDTime) == 0x000000, "Member 'TgfSkillWidgetBase_FormatCooldownTime::CDTime' has a wrong offset!");
static_assert(offsetof(TgfSkillWidgetBase_FormatCooldownTime, ReturnValue) == 0x000008, "Member 'TgfSkillWidgetBase_FormatCooldownTime::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfSkillWidgetBase.StartSkillCooldown
// 0x0008 (0x0008 - 0x0000)
struct TgfSkillWidgetBase_StartSkillCooldown final
{
public:
	float                                         ShowCDTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSkillWidgetBase_StartSkillCooldown) == 0x000004, "Wrong alignment on TgfSkillWidgetBase_StartSkillCooldown");
static_assert(sizeof(TgfSkillWidgetBase_StartSkillCooldown) == 0x000008, "Wrong size on TgfSkillWidgetBase_StartSkillCooldown");
static_assert(offsetof(TgfSkillWidgetBase_StartSkillCooldown, ShowCDTime) == 0x000000, "Member 'TgfSkillWidgetBase_StartSkillCooldown::ShowCDTime' has a wrong offset!");
static_assert(offsetof(TgfSkillWidgetBase_StartSkillCooldown, DelayTime) == 0x000004, "Member 'TgfSkillWidgetBase_StartSkillCooldown::DelayTime' has a wrong offset!");

// Function LyraGame.TgfSnapToTargetDataAsset.GetQueryConfig
// 0x0050 (0x0050 - 0x0000)
struct TgfSnapToTargetDataAsset_GetQueryConfig final
{
public:
	struct FTgfSnapQueryConfig                    OutSnapQueryConfig;                                // 0x0000(0x0048)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfSnapToTargetDataAsset_GetQueryConfig) == 0x000008, "Wrong alignment on TgfSnapToTargetDataAsset_GetQueryConfig");
static_assert(sizeof(TgfSnapToTargetDataAsset_GetQueryConfig) == 0x000050, "Wrong size on TgfSnapToTargetDataAsset_GetQueryConfig");
static_assert(offsetof(TgfSnapToTargetDataAsset_GetQueryConfig, OutSnapQueryConfig) == 0x000000, "Member 'TgfSnapToTargetDataAsset_GetQueryConfig::OutSnapQueryConfig' has a wrong offset!");
static_assert(offsetof(TgfSnapToTargetDataAsset_GetQueryConfig, ReturnValue) == 0x000048, "Member 'TgfSnapToTargetDataAsset_GetQueryConfig::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfSpectatingActor.OnExperienceLoaded
// 0x0008 (0x0008 - 0x0000)
struct TgfSpectatingActor_OnExperienceLoaded final
{
public:
	const class ULyraExperienceDefinition*        Experience;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatingActor_OnExperienceLoaded) == 0x000008, "Wrong alignment on TgfSpectatingActor_OnExperienceLoaded");
static_assert(sizeof(TgfSpectatingActor_OnExperienceLoaded) == 0x000008, "Wrong size on TgfSpectatingActor_OnExperienceLoaded");
static_assert(offsetof(TgfSpectatingActor_OnExperienceLoaded, Experience) == 0x000000, "Member 'TgfSpectatingActor_OnExperienceLoaded::Experience' has a wrong offset!");

// Function LyraGame.TgfSpectatingActor.DetermineCameraMode
// 0x0008 (0x0008 - 0x0000)
struct TgfSpectatingActor_DetermineCameraMode final
{
public:
	TSubclassOf<class ULyraCameraMode>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatingActor_DetermineCameraMode) == 0x000008, "Wrong alignment on TgfSpectatingActor_DetermineCameraMode");
static_assert(sizeof(TgfSpectatingActor_DetermineCameraMode) == 0x000008, "Wrong size on TgfSpectatingActor_DetermineCameraMode");
static_assert(offsetof(TgfSpectatingActor_DetermineCameraMode, ReturnValue) == 0x000000, "Member 'TgfSpectatingActor_DetermineCameraMode::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfSpectatorManagerComponent.AddSpectatingActors
// 0x0008 (0x0008 - 0x0000)
struct TgfSpectatorManagerComponent_AddSpectatingActors final
{
public:
	class ATgfSpectatingActor*                    Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatorManagerComponent_AddSpectatingActors) == 0x000008, "Wrong alignment on TgfSpectatorManagerComponent_AddSpectatingActors");
static_assert(sizeof(TgfSpectatorManagerComponent_AddSpectatingActors) == 0x000008, "Wrong size on TgfSpectatorManagerComponent_AddSpectatingActors");
static_assert(offsetof(TgfSpectatorManagerComponent_AddSpectatingActors, Actor) == 0x000000, "Member 'TgfSpectatorManagerComponent_AddSpectatingActors::Actor' has a wrong offset!");

// Function LyraGame.TgfSpectatorManagerComponent.HandlePlayerDeathMithril
// 0x0001 (0x0001 - 0x0000)
struct TgfSpectatorManagerComponent_HandlePlayerDeathMithril final
{
public:
	bool                                          NeedSpectatePlayer;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatorManagerComponent_HandlePlayerDeathMithril) == 0x000001, "Wrong alignment on TgfSpectatorManagerComponent_HandlePlayerDeathMithril");
static_assert(sizeof(TgfSpectatorManagerComponent_HandlePlayerDeathMithril) == 0x000001, "Wrong size on TgfSpectatorManagerComponent_HandlePlayerDeathMithril");
static_assert(offsetof(TgfSpectatorManagerComponent_HandlePlayerDeathMithril, NeedSpectatePlayer) == 0x000000, "Member 'TgfSpectatorManagerComponent_HandlePlayerDeathMithril::NeedSpectatePlayer' has a wrong offset!");

// Function LyraGame.TgfSpectatorManagerComponent.MithrilRebirthNotice
// 0x0008 (0x0008 - 0x0000)
struct TgfSpectatorManagerComponent_MithrilRebirthNotice final
{
public:
	class ALyraCharacter*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatorManagerComponent_MithrilRebirthNotice) == 0x000008, "Wrong alignment on TgfSpectatorManagerComponent_MithrilRebirthNotice");
static_assert(sizeof(TgfSpectatorManagerComponent_MithrilRebirthNotice) == 0x000008, "Wrong size on TgfSpectatorManagerComponent_MithrilRebirthNotice");
static_assert(offsetof(TgfSpectatorManagerComponent_MithrilRebirthNotice, Target) == 0x000000, "Member 'TgfSpectatorManagerComponent_MithrilRebirthNotice::Target' has a wrong offset!");

// Function LyraGame.TgfSpectatorManagerComponent.OnViewMithrilRebirthExhausted
// 0x0008 (0x0008 - 0x0000)
struct TgfSpectatorManagerComponent_OnViewMithrilRebirthExhausted final
{
public:
	class ALyraCharacter*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatorManagerComponent_OnViewMithrilRebirthExhausted) == 0x000008, "Wrong alignment on TgfSpectatorManagerComponent_OnViewMithrilRebirthExhausted");
static_assert(sizeof(TgfSpectatorManagerComponent_OnViewMithrilRebirthExhausted) == 0x000008, "Wrong size on TgfSpectatorManagerComponent_OnViewMithrilRebirthExhausted");
static_assert(offsetof(TgfSpectatorManagerComponent_OnViewMithrilRebirthExhausted, Target) == 0x000000, "Member 'TgfSpectatorManagerComponent_OnViewMithrilRebirthExhausted::Target' has a wrong offset!");

// Function LyraGame.TgfSpectatorManagerComponent.OnViewTargetDeathFinish
// 0x0008 (0x0008 - 0x0000)
struct TgfSpectatorManagerComponent_OnViewTargetDeathFinish final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatorManagerComponent_OnViewTargetDeathFinish) == 0x000008, "Wrong alignment on TgfSpectatorManagerComponent_OnViewTargetDeathFinish");
static_assert(sizeof(TgfSpectatorManagerComponent_OnViewTargetDeathFinish) == 0x000008, "Wrong size on TgfSpectatorManagerComponent_OnViewTargetDeathFinish");
static_assert(offsetof(TgfSpectatorManagerComponent_OnViewTargetDeathFinish, OwningActor) == 0x000000, "Member 'TgfSpectatorManagerComponent_OnViewTargetDeathFinish::OwningActor' has a wrong offset!");

// Function LyraGame.TgfSpectatorManagerComponent.OnViewTargetExtractPortal
// 0x0008 (0x0008 - 0x0000)
struct TgfSpectatorManagerComponent_OnViewTargetExtractPortal final
{
public:
	class AActor*                                 TargetPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatorManagerComponent_OnViewTargetExtractPortal) == 0x000008, "Wrong alignment on TgfSpectatorManagerComponent_OnViewTargetExtractPortal");
static_assert(sizeof(TgfSpectatorManagerComponent_OnViewTargetExtractPortal) == 0x000008, "Wrong size on TgfSpectatorManagerComponent_OnViewTargetExtractPortal");
static_assert(offsetof(TgfSpectatorManagerComponent_OnViewTargetExtractPortal, TargetPawn) == 0x000000, "Member 'TgfSpectatorManagerComponent_OnViewTargetExtractPortal::TargetPawn' has a wrong offset!");

// Function LyraGame.TgfSpectatorManagerComponent.OpenSpectateNoticeWindow
// 0x0001 (0x0001 - 0x0000)
struct TgfSpectatorManagerComponent_OpenSpectateNoticeWindow final
{
public:
	ESpectatingTargetType                         TargetType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatorManagerComponent_OpenSpectateNoticeWindow) == 0x000001, "Wrong alignment on TgfSpectatorManagerComponent_OpenSpectateNoticeWindow");
static_assert(sizeof(TgfSpectatorManagerComponent_OpenSpectateNoticeWindow) == 0x000001, "Wrong size on TgfSpectatorManagerComponent_OpenSpectateNoticeWindow");
static_assert(offsetof(TgfSpectatorManagerComponent_OpenSpectateNoticeWindow, TargetType) == 0x000000, "Member 'TgfSpectatorManagerComponent_OpenSpectateNoticeWindow::TargetType' has a wrong offset!");

// Function LyraGame.TgfSpectatorManagerComponent.ServerChangeViewTarget
// 0x0010 (0x0010 - 0x0000)
struct TgfSpectatorManagerComponent_ServerChangeViewTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpectatingTargetType                         CurrentType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfSpectatorManagerComponent_ServerChangeViewTarget) == 0x000008, "Wrong alignment on TgfSpectatorManagerComponent_ServerChangeViewTarget");
static_assert(sizeof(TgfSpectatorManagerComponent_ServerChangeViewTarget) == 0x000010, "Wrong size on TgfSpectatorManagerComponent_ServerChangeViewTarget");
static_assert(offsetof(TgfSpectatorManagerComponent_ServerChangeViewTarget, Target) == 0x000000, "Member 'TgfSpectatorManagerComponent_ServerChangeViewTarget::Target' has a wrong offset!");
static_assert(offsetof(TgfSpectatorManagerComponent_ServerChangeViewTarget, CurrentType) == 0x000008, "Member 'TgfSpectatorManagerComponent_ServerChangeViewTarget::CurrentType' has a wrong offset!");

// Function LyraGame.TgfSpectatorManagerComponent.SetCurrentViewTarget
// 0x0008 (0x0008 - 0x0000)
struct TgfSpectatorManagerComponent_SetCurrentViewTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatorManagerComponent_SetCurrentViewTarget) == 0x000008, "Wrong alignment on TgfSpectatorManagerComponent_SetCurrentViewTarget");
static_assert(sizeof(TgfSpectatorManagerComponent_SetCurrentViewTarget) == 0x000008, "Wrong size on TgfSpectatorManagerComponent_SetCurrentViewTarget");
static_assert(offsetof(TgfSpectatorManagerComponent_SetCurrentViewTarget, Target) == 0x000000, "Member 'TgfSpectatorManagerComponent_SetCurrentViewTarget::Target' has a wrong offset!");

// Function LyraGame.TgfSpectatorManagerComponent.TrySpectate
// 0x0001 (0x0001 - 0x0000)
struct TgfSpectatorManagerComponent_TrySpectate final
{
public:
	bool                                          ReverseSelection;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatorManagerComponent_TrySpectate) == 0x000001, "Wrong alignment on TgfSpectatorManagerComponent_TrySpectate");
static_assert(sizeof(TgfSpectatorManagerComponent_TrySpectate) == 0x000001, "Wrong size on TgfSpectatorManagerComponent_TrySpectate");
static_assert(offsetof(TgfSpectatorManagerComponent_TrySpectate, ReverseSelection) == 0x000000, "Member 'TgfSpectatorManagerComponent_TrySpectate::ReverseSelection' has a wrong offset!");

// Function LyraGame.TgfSpectatorManagerComponent.WaitingToSpectate
// 0x0004 (0x0004 - 0x0000)
struct TgfSpectatorManagerComponent_WaitingToSpectate final
{
public:
	bool                                          IgnoreNoTarget;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DirectlySpectate;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedSpectatePlayer;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpectatorManagerComponent_WaitingToSpectate) == 0x000001, "Wrong alignment on TgfSpectatorManagerComponent_WaitingToSpectate");
static_assert(sizeof(TgfSpectatorManagerComponent_WaitingToSpectate) == 0x000004, "Wrong size on TgfSpectatorManagerComponent_WaitingToSpectate");
static_assert(offsetof(TgfSpectatorManagerComponent_WaitingToSpectate, IgnoreNoTarget) == 0x000000, "Member 'TgfSpectatorManagerComponent_WaitingToSpectate::IgnoreNoTarget' has a wrong offset!");
static_assert(offsetof(TgfSpectatorManagerComponent_WaitingToSpectate, DirectlySpectate) == 0x000001, "Member 'TgfSpectatorManagerComponent_WaitingToSpectate::DirectlySpectate' has a wrong offset!");
static_assert(offsetof(TgfSpectatorManagerComponent_WaitingToSpectate, NeedSpectatePlayer) == 0x000002, "Member 'TgfSpectatorManagerComponent_WaitingToSpectate::NeedSpectatePlayer' has a wrong offset!");
static_assert(offsetof(TgfSpectatorManagerComponent_WaitingToSpectate, ReturnValue) == 0x000003, "Member 'TgfSpectatorManagerComponent_WaitingToSpectate::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfStaffBeamDecal.SetBeamDecalPos
// 0x0018 (0x0018 - 0x0000)
struct TgfStaffBeamDecal_SetBeamDecalPos final
{
public:
	struct FVector                                CurrentPos;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaffBeamDecal_SetBeamDecalPos) == 0x000008, "Wrong alignment on TgfStaffBeamDecal_SetBeamDecalPos");
static_assert(sizeof(TgfStaffBeamDecal_SetBeamDecalPos) == 0x000018, "Wrong size on TgfStaffBeamDecal_SetBeamDecalPos");
static_assert(offsetof(TgfStaffBeamDecal_SetBeamDecalPos, CurrentPos) == 0x000000, "Member 'TgfStaffBeamDecal_SetBeamDecalPos::CurrentPos' has a wrong offset!");

// Function LyraGame.TgfStaffBeamDecal.SetBeamDecalRot
// 0x0018 (0x0018 - 0x0000)
struct TgfStaffBeamDecal_SetBeamDecalRot final
{
public:
	struct FVector                                HitNormal;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaffBeamDecal_SetBeamDecalRot) == 0x000008, "Wrong alignment on TgfStaffBeamDecal_SetBeamDecalRot");
static_assert(sizeof(TgfStaffBeamDecal_SetBeamDecalRot) == 0x000018, "Wrong size on TgfStaffBeamDecal_SetBeamDecalRot");
static_assert(offsetof(TgfStaffBeamDecal_SetBeamDecalRot, HitNormal) == 0x000000, "Member 'TgfStaffBeamDecal_SetBeamDecalRot::HitNormal' has a wrong offset!");

// Function LyraGame.TgfStatBlueprintFunctionLibrary.AddActorIntStat
// 0x0018 (0x0018 - 0x0000)
struct TgfStatBlueprintFunctionLibrary_AddActorIntStat final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorIntStatisticType                     Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TypeId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfStatBlueprintFunctionLibrary_AddActorIntStat) == 0x000008, "Wrong alignment on TgfStatBlueprintFunctionLibrary_AddActorIntStat");
static_assert(sizeof(TgfStatBlueprintFunctionLibrary_AddActorIntStat) == 0x000018, "Wrong size on TgfStatBlueprintFunctionLibrary_AddActorIntStat");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorIntStat, Actor) == 0x000000, "Member 'TgfStatBlueprintFunctionLibrary_AddActorIntStat::Actor' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorIntStat, Type) == 0x000008, "Member 'TgfStatBlueprintFunctionLibrary_AddActorIntStat::Type' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorIntStat, TypeId) == 0x00000C, "Member 'TgfStatBlueprintFunctionLibrary_AddActorIntStat::TypeId' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorIntStat, Value) == 0x000010, "Member 'TgfStatBlueprintFunctionLibrary_AddActorIntStat::Value' has a wrong offset!");

// Function LyraGame.TgfStatBlueprintFunctionLibrary.AddActorRelationIntStat
// 0x0020 (0x0020 - 0x0000)
struct TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRelationStatisticType                Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OtherPlayer;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat) == 0x000008, "Wrong alignment on TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat");
static_assert(sizeof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat) == 0x000020, "Wrong size on TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat, Actor) == 0x000000, "Member 'TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat::Actor' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat, Type) == 0x000008, "Member 'TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat::Type' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat, OtherPlayer) == 0x000010, "Member 'TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat::OtherPlayer' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat, Value) == 0x000018, "Member 'TgfStatBlueprintFunctionLibrary_AddActorRelationIntStat::Value' has a wrong offset!");

// Function LyraGame.TgfStatBlueprintFunctionLibrary.AddActorRelationIntStatById
// 0x0028 (0x0028 - 0x0000)
struct TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfActorRelationStatisticType                Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OtherPlayerOpenId;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById) == 0x000008, "Wrong alignment on TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById");
static_assert(sizeof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById) == 0x000028, "Wrong size on TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById, Actor) == 0x000000, "Member 'TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById::Actor' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById, Type) == 0x000008, "Member 'TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById::Type' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById, OtherPlayerOpenId) == 0x000010, "Member 'TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById::OtherPlayerOpenId' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById, Value) == 0x000020, "Member 'TgfStatBlueprintFunctionLibrary_AddActorRelationIntStatById::Value' has a wrong offset!");

// Function LyraGame.TgfStatBlueprintFunctionLibrary.CompareActorTeams
// 0x0020 (0x0020 - 0x0000)
struct TgfStatBlueprintFunctionLibrary_CompareActorTeams final
{
public:
	const class UWorld*                           World;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          A;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          B;                                                 // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraTeamComparison                           ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfStatBlueprintFunctionLibrary_CompareActorTeams) == 0x000008, "Wrong alignment on TgfStatBlueprintFunctionLibrary_CompareActorTeams");
static_assert(sizeof(TgfStatBlueprintFunctionLibrary_CompareActorTeams) == 0x000020, "Wrong size on TgfStatBlueprintFunctionLibrary_CompareActorTeams");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_CompareActorTeams, World) == 0x000000, "Member 'TgfStatBlueprintFunctionLibrary_CompareActorTeams::World' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_CompareActorTeams, A) == 0x000008, "Member 'TgfStatBlueprintFunctionLibrary_CompareActorTeams::A' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_CompareActorTeams, B) == 0x000010, "Member 'TgfStatBlueprintFunctionLibrary_CompareActorTeams::B' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_CompareActorTeams, ReturnValue) == 0x000018, "Member 'TgfStatBlueprintFunctionLibrary_CompareActorTeams::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfStatBlueprintFunctionLibrary.FindSummonMaster
// 0x0010 (0x0010 - 0x0000)
struct TgfStatBlueprintFunctionLibrary_FindSummonMaster final
{
public:
	const class ALyraCharacter*                   Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStatBlueprintFunctionLibrary_FindSummonMaster) == 0x000008, "Wrong alignment on TgfStatBlueprintFunctionLibrary_FindSummonMaster");
static_assert(sizeof(TgfStatBlueprintFunctionLibrary_FindSummonMaster) == 0x000010, "Wrong size on TgfStatBlueprintFunctionLibrary_FindSummonMaster");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_FindSummonMaster, Character) == 0x000000, "Member 'TgfStatBlueprintFunctionLibrary_FindSummonMaster::Character' has a wrong offset!");
static_assert(offsetof(TgfStatBlueprintFunctionLibrary_FindSummonMaster, ReturnValue) == 0x000008, "Member 'TgfStatBlueprintFunctionLibrary_FindSummonMaster::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfStaticInteraction.AddRepObject
// 0x0008 (0x0008 - 0x0000)
struct TgfStaticInteraction_AddRepObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaticInteraction_AddRepObject) == 0x000008, "Wrong alignment on TgfStaticInteraction_AddRepObject");
static_assert(sizeof(TgfStaticInteraction_AddRepObject) == 0x000008, "Wrong size on TgfStaticInteraction_AddRepObject");
static_assert(offsetof(TgfStaticInteraction_AddRepObject, Object) == 0x000000, "Member 'TgfStaticInteraction_AddRepObject::Object' has a wrong offset!");

// Function LyraGame.TgfStaticInteraction.HandleHomelandMoonPhaseChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct TgfStaticInteraction_HandleHomelandMoonPhaseChangeEvent final
{
public:
	class UObject*                                Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaticInteraction_HandleHomelandMoonPhaseChangeEvent) == 0x000008, "Wrong alignment on TgfStaticInteraction_HandleHomelandMoonPhaseChangeEvent");
static_assert(sizeof(TgfStaticInteraction_HandleHomelandMoonPhaseChangeEvent) == 0x000008, "Wrong size on TgfStaticInteraction_HandleHomelandMoonPhaseChangeEvent");
static_assert(offsetof(TgfStaticInteraction_HandleHomelandMoonPhaseChangeEvent, Args) == 0x000000, "Member 'TgfStaticInteraction_HandleHomelandMoonPhaseChangeEvent::Args' has a wrong offset!");

// Function LyraGame.TgfStaticInteraction.K2_HandleHomelandMoonPhaseChangeEvent
// 0x0004 (0x0004 - 0x0000)
struct TgfStaticInteraction_K2_HandleHomelandMoonPhaseChangeEvent final
{
public:
	int32                                         MoonPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaticInteraction_K2_HandleHomelandMoonPhaseChangeEvent) == 0x000004, "Wrong alignment on TgfStaticInteraction_K2_HandleHomelandMoonPhaseChangeEvent");
static_assert(sizeof(TgfStaticInteraction_K2_HandleHomelandMoonPhaseChangeEvent) == 0x000004, "Wrong size on TgfStaticInteraction_K2_HandleHomelandMoonPhaseChangeEvent");
static_assert(offsetof(TgfStaticInteraction_K2_HandleHomelandMoonPhaseChangeEvent, MoonPhase) == 0x000000, "Member 'TgfStaticInteraction_K2_HandleHomelandMoonPhaseChangeEvent::MoonPhase' has a wrong offset!");

// Function LyraGame.TgfStaticInteraction.OnDeathFinished
// 0x0008 (0x0008 - 0x0000)
struct TgfStaticInteraction_OnDeathFinished final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaticInteraction_OnDeathFinished) == 0x000008, "Wrong alignment on TgfStaticInteraction_OnDeathFinished");
static_assert(sizeof(TgfStaticInteraction_OnDeathFinished) == 0x000008, "Wrong size on TgfStaticInteraction_OnDeathFinished");
static_assert(offsetof(TgfStaticInteraction_OnDeathFinished, OwningActor) == 0x000000, "Member 'TgfStaticInteraction_OnDeathFinished::OwningActor' has a wrong offset!");

// Function LyraGame.TgfStaticInteraction.OnDeathStarted
// 0x0008 (0x0008 - 0x0000)
struct TgfStaticInteraction_OnDeathStarted final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaticInteraction_OnDeathStarted) == 0x000008, "Wrong alignment on TgfStaticInteraction_OnDeathStarted");
static_assert(sizeof(TgfStaticInteraction_OnDeathStarted) == 0x000008, "Wrong size on TgfStaticInteraction_OnDeathStarted");
static_assert(offsetof(TgfStaticInteraction_OnDeathStarted, OwningActor) == 0x000000, "Member 'TgfStaticInteraction_OnDeathStarted::OwningActor' has a wrong offset!");

// Function LyraGame.TgfStaticInteraction.RemoveRepObject
// 0x0008 (0x0008 - 0x0000)
struct TgfStaticInteraction_RemoveRepObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaticInteraction_RemoveRepObject) == 0x000008, "Wrong alignment on TgfStaticInteraction_RemoveRepObject");
static_assert(sizeof(TgfStaticInteraction_RemoveRepObject) == 0x000008, "Wrong size on TgfStaticInteraction_RemoveRepObject");
static_assert(offsetof(TgfStaticInteraction_RemoveRepObject, Object) == 0x000000, "Member 'TgfStaticInteraction_RemoveRepObject::Object' has a wrong offset!");

// Function LyraGame.TgfStaticInteraction.GetInterableStatIdList
// 0x0010 (0x0010 - 0x0000)
struct TgfStaticInteraction_GetInterableStatIdList final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaticInteraction_GetInterableStatIdList) == 0x000008, "Wrong alignment on TgfStaticInteraction_GetInterableStatIdList");
static_assert(sizeof(TgfStaticInteraction_GetInterableStatIdList) == 0x000010, "Wrong size on TgfStaticInteraction_GetInterableStatIdList");
static_assert(offsetof(TgfStaticInteraction_GetInterableStatIdList, ReturnValue) == 0x000000, "Member 'TgfStaticInteraction_GetInterableStatIdList::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfStaticInteraction.GetInterableType
// 0x0001 (0x0001 - 0x0000)
struct TgfStaticInteraction_GetInterableType final
{
public:
	ETgfInterableType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaticInteraction_GetInterableType) == 0x000001, "Wrong alignment on TgfStaticInteraction_GetInterableType");
static_assert(sizeof(TgfStaticInteraction_GetInterableType) == 0x000001, "Wrong size on TgfStaticInteraction_GetInterableType");
static_assert(offsetof(TgfStaticInteraction_GetInterableType, ReturnValue) == 0x000000, "Member 'TgfStaticInteraction_GetInterableType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfStaticInteraction.IsDeadOrDying
// 0x0001 (0x0001 - 0x0000)
struct TgfStaticInteraction_IsDeadOrDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaticInteraction_IsDeadOrDying) == 0x000001, "Wrong alignment on TgfStaticInteraction_IsDeadOrDying");
static_assert(sizeof(TgfStaticInteraction_IsDeadOrDying) == 0x000001, "Wrong size on TgfStaticInteraction_IsDeadOrDying");
static_assert(offsetof(TgfStaticInteraction_IsDeadOrDying, ReturnValue) == 0x000000, "Member 'TgfStaticInteraction_IsDeadOrDying::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfStaticInteraction.IsEnableBattle
// 0x0001 (0x0001 - 0x0000)
struct TgfStaticInteraction_IsEnableBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaticInteraction_IsEnableBattle) == 0x000001, "Wrong alignment on TgfStaticInteraction_IsEnableBattle");
static_assert(sizeof(TgfStaticInteraction_IsEnableBattle) == 0x000001, "Wrong size on TgfStaticInteraction_IsEnableBattle");
static_assert(offsetof(TgfStaticInteraction_IsEnableBattle, ReturnValue) == 0x000000, "Member 'TgfStaticInteraction_IsEnableBattle::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfStaticInteraction.IsLightType
// 0x0001 (0x0001 - 0x0000)
struct TgfStaticInteraction_IsLightType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStaticInteraction_IsLightType) == 0x000001, "Wrong alignment on TgfStaticInteraction_IsLightType");
static_assert(sizeof(TgfStaticInteraction_IsLightType) == 0x000001, "Wrong size on TgfStaticInteraction_IsLightType");
static_assert(offsetof(TgfStaticInteraction_IsLightType, ReturnValue) == 0x000000, "Member 'TgfStaticInteraction_IsLightType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfTargetToSnapComponent.GetTargetLocation
// 0x0020 (0x0020 - 0x0000)
struct TgfTargetToSnapComponent_GetTargetLocation final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTargetToSnapComponent_GetTargetLocation) == 0x000008, "Wrong alignment on TgfTargetToSnapComponent_GetTargetLocation");
static_assert(sizeof(TgfTargetToSnapComponent_GetTargetLocation) == 0x000020, "Wrong size on TgfTargetToSnapComponent_GetTargetLocation");
static_assert(offsetof(TgfTargetToSnapComponent_GetTargetLocation, Target) == 0x000000, "Member 'TgfTargetToSnapComponent_GetTargetLocation::Target' has a wrong offset!");
static_assert(offsetof(TgfTargetToSnapComponent_GetTargetLocation, ReturnValue) == 0x000008, "Member 'TgfTargetToSnapComponent_GetTargetLocation::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameMode.ChooseDeathPoint
// 0x0010 (0x0010 - 0x0000)
struct LyraGameMode_ChooseDeathPoint final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameMode_ChooseDeathPoint) == 0x000008, "Wrong alignment on LyraGameMode_ChooseDeathPoint");
static_assert(sizeof(LyraGameMode_ChooseDeathPoint) == 0x000010, "Wrong size on LyraGameMode_ChooseDeathPoint");
static_assert(offsetof(LyraGameMode_ChooseDeathPoint, Player) == 0x000000, "Member 'LyraGameMode_ChooseDeathPoint::Player' has a wrong offset!");
static_assert(offsetof(LyraGameMode_ChooseDeathPoint, ReturnValue) == 0x000008, "Member 'LyraGameMode_ChooseDeathPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameMode.ChooseWaitingPoint
// 0x0010 (0x0010 - 0x0000)
struct LyraGameMode_ChooseWaitingPoint final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameMode_ChooseWaitingPoint) == 0x000008, "Wrong alignment on LyraGameMode_ChooseWaitingPoint");
static_assert(sizeof(LyraGameMode_ChooseWaitingPoint) == 0x000010, "Wrong size on LyraGameMode_ChooseWaitingPoint");
static_assert(offsetof(LyraGameMode_ChooseWaitingPoint, Player) == 0x000000, "Member 'LyraGameMode_ChooseWaitingPoint::Player' has a wrong offset!");
static_assert(offsetof(LyraGameMode_ChooseWaitingPoint, ReturnValue) == 0x000008, "Member 'LyraGameMode_ChooseWaitingPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameMode.DestroyCharacter
// 0x0008 (0x0008 - 0x0000)
struct LyraGameMode_DestroyCharacter final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameMode_DestroyCharacter) == 0x000008, "Wrong alignment on LyraGameMode_DestroyCharacter");
static_assert(sizeof(LyraGameMode_DestroyCharacter) == 0x000008, "Wrong size on LyraGameMode_DestroyCharacter");
static_assert(offsetof(LyraGameMode_DestroyCharacter, Controller) == 0x000000, "Member 'LyraGameMode_DestroyCharacter::Controller' has a wrong offset!");

// Function LyraGame.LyraGameMode.RequestPlayerRestartNextFrame
// 0x0010 (0x0010 - 0x0000)
struct LyraGameMode_RequestPlayerRestartNextFrame final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReset;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraGameMode_RequestPlayerRestartNextFrame) == 0x000008, "Wrong alignment on LyraGameMode_RequestPlayerRestartNextFrame");
static_assert(sizeof(LyraGameMode_RequestPlayerRestartNextFrame) == 0x000010, "Wrong size on LyraGameMode_RequestPlayerRestartNextFrame");
static_assert(offsetof(LyraGameMode_RequestPlayerRestartNextFrame, Controller) == 0x000000, "Member 'LyraGameMode_RequestPlayerRestartNextFrame::Controller' has a wrong offset!");
static_assert(offsetof(LyraGameMode_RequestPlayerRestartNextFrame, bForceReset) == 0x000008, "Member 'LyraGameMode_RequestPlayerRestartNextFrame::bForceReset' has a wrong offset!");

// Function LyraGame.LyraGameMode.SpawnCharacter
// 0x0080 (0x0080 - 0x0000)
struct LyraGameMode_SpawnCharacter final
{
public:
	TSubclassOf<class ALyraAIController>          ControllerClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraAIControllerData*                  ControllerData;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameMode_SpawnCharacter) == 0x000010, "Wrong alignment on LyraGameMode_SpawnCharacter");
static_assert(sizeof(LyraGameMode_SpawnCharacter) == 0x000080, "Wrong size on LyraGameMode_SpawnCharacter");
static_assert(offsetof(LyraGameMode_SpawnCharacter, ControllerClass) == 0x000000, "Member 'LyraGameMode_SpawnCharacter::ControllerClass' has a wrong offset!");
static_assert(offsetof(LyraGameMode_SpawnCharacter, ControllerData) == 0x000008, "Member 'LyraGameMode_SpawnCharacter::ControllerData' has a wrong offset!");
static_assert(offsetof(LyraGameMode_SpawnCharacter, Transform) == 0x000010, "Member 'LyraGameMode_SpawnCharacter::Transform' has a wrong offset!");
static_assert(offsetof(LyraGameMode_SpawnCharacter, TeamId) == 0x000070, "Member 'LyraGameMode_SpawnCharacter::TeamId' has a wrong offset!");
static_assert(offsetof(LyraGameMode_SpawnCharacter, ReturnValue) == 0x000078, "Member 'LyraGameMode_SpawnCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameMode.GetMatchType
// 0x0001 (0x0001 - 0x0000)
struct LyraGameMode_GetMatchType final
{
public:
	ETgfMatchType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameMode_GetMatchType) == 0x000001, "Wrong alignment on LyraGameMode_GetMatchType");
static_assert(sizeof(LyraGameMode_GetMatchType) == 0x000001, "Wrong size on LyraGameMode_GetMatchType");
static_assert(offsetof(LyraGameMode_GetMatchType, ReturnValue) == 0x000000, "Member 'LyraGameMode_GetMatchType::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameMode.GetPawnDataForController
// 0x0010 (0x0010 - 0x0000)
struct LyraGameMode_GetPawnDataForController final
{
public:
	const class AController*                      InController;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ULyraPawnData*                    ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameMode_GetPawnDataForController) == 0x000008, "Wrong alignment on LyraGameMode_GetPawnDataForController");
static_assert(sizeof(LyraGameMode_GetPawnDataForController) == 0x000010, "Wrong size on LyraGameMode_GetPawnDataForController");
static_assert(offsetof(LyraGameMode_GetPawnDataForController, InController) == 0x000000, "Member 'LyraGameMode_GetPawnDataForController::InController' has a wrong offset!");
static_assert(offsetof(LyraGameMode_GetPawnDataForController, ReturnValue) == 0x000008, "Member 'LyraGameMode_GetPawnDataForController::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameMode.IsPvpMatchType
// 0x0001 (0x0001 - 0x0000)
struct LyraGameMode_IsPvpMatchType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameMode_IsPvpMatchType) == 0x000001, "Wrong alignment on LyraGameMode_IsPvpMatchType");
static_assert(sizeof(LyraGameMode_IsPvpMatchType) == 0x000001, "Wrong size on LyraGameMode_IsPvpMatchType");
static_assert(offsetof(LyraGameMode_IsPvpMatchType, ReturnValue) == 0x000000, "Member 'LyraGameMode_IsPvpMatchType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfTestNetRPCs.ClientCall
// 0x0001 (0x0001 - 0x0000)
struct TgfTestNetRPCs_ClientCall final
{
public:
	ECallSource                                   CallSource;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTestNetRPCs_ClientCall) == 0x000001, "Wrong alignment on TgfTestNetRPCs_ClientCall");
static_assert(sizeof(TgfTestNetRPCs_ClientCall) == 0x000001, "Wrong size on TgfTestNetRPCs_ClientCall");
static_assert(offsetof(TgfTestNetRPCs_ClientCall, CallSource) == 0x000000, "Member 'TgfTestNetRPCs_ClientCall::CallSource' has a wrong offset!");

// Function LyraGame.TgfTestNetRPCs.ServerCall
// 0x0001 (0x0001 - 0x0000)
struct TgfTestNetRPCs_ServerCall final
{
public:
	ECallSource                                   CallSource;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTestNetRPCs_ServerCall) == 0x000001, "Wrong alignment on TgfTestNetRPCs_ServerCall");
static_assert(sizeof(TgfTestNetRPCs_ServerCall) == 0x000001, "Wrong size on TgfTestNetRPCs_ServerCall");
static_assert(offsetof(TgfTestNetRPCs_ServerCall, CallSource) == 0x000000, "Member 'TgfTestNetRPCs_ServerCall::CallSource' has a wrong offset!");

// Function LyraGame.AsyncAction_LevelReady.WaitForLevelReady
// 0x0018 (0x0018 - 0x0000)
struct AsyncAction_LevelReady_WaitForLevelReady final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeoutSeconds;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncAction_LevelReady*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_LevelReady_WaitForLevelReady) == 0x000008, "Wrong alignment on AsyncAction_LevelReady_WaitForLevelReady");
static_assert(sizeof(AsyncAction_LevelReady_WaitForLevelReady) == 0x000018, "Wrong size on AsyncAction_LevelReady_WaitForLevelReady");
static_assert(offsetof(AsyncAction_LevelReady_WaitForLevelReady, WorldContextObject) == 0x000000, "Member 'AsyncAction_LevelReady_WaitForLevelReady::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_LevelReady_WaitForLevelReady, TimeoutSeconds) == 0x000008, "Member 'AsyncAction_LevelReady_WaitForLevelReady::TimeoutSeconds' has a wrong offset!");
static_assert(offsetof(AsyncAction_LevelReady_WaitForLevelReady, ReturnValue) == 0x000010, "Member 'AsyncAction_LevelReady_WaitForLevelReady::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.AddThreat
// 0x0010 (0x0010 - 0x0000)
struct TGFThreatManagerComponent_AddThreat final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threat;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFThreatManagerComponent_AddThreat) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_AddThreat");
static_assert(sizeof(TGFThreatManagerComponent_AddThreat) == 0x000010, "Wrong size on TGFThreatManagerComponent_AddThreat");
static_assert(offsetof(TGFThreatManagerComponent_AddThreat, Actor) == 0x000000, "Member 'TGFThreatManagerComponent_AddThreat::Actor' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_AddThreat, Threat) == 0x000008, "Member 'TGFThreatManagerComponent_AddThreat::Threat' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_AddThreat, ReturnValue) == 0x00000C, "Member 'TGFThreatManagerComponent_AddThreat::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.GetHighestThreat
// 0x0010 (0x0010 - 0x0000)
struct TGFThreatManagerComponent_GetHighestThreat final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFThreatManagerComponent_GetHighestThreat) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_GetHighestThreat");
static_assert(sizeof(TGFThreatManagerComponent_GetHighestThreat) == 0x000010, "Wrong size on TGFThreatManagerComponent_GetHighestThreat");
static_assert(offsetof(TGFThreatManagerComponent_GetHighestThreat, Target) == 0x000000, "Member 'TGFThreatManagerComponent_GetHighestThreat::Target' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_GetHighestThreat, ReturnValue) == 0x000008, "Member 'TGFThreatManagerComponent_GetHighestThreat::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.GetLowestThreat
// 0x0010 (0x0010 - 0x0000)
struct TGFThreatManagerComponent_GetLowestThreat final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFThreatManagerComponent_GetLowestThreat) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_GetLowestThreat");
static_assert(sizeof(TGFThreatManagerComponent_GetLowestThreat) == 0x000010, "Wrong size on TGFThreatManagerComponent_GetLowestThreat");
static_assert(offsetof(TGFThreatManagerComponent_GetLowestThreat, Target) == 0x000000, "Member 'TGFThreatManagerComponent_GetLowestThreat::Target' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_GetLowestThreat, ReturnValue) == 0x000008, "Member 'TGFThreatManagerComponent_GetLowestThreat::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.GetSortedTargets
// 0x0018 (0x0018 - 0x0000)
struct TGFThreatManagerComponent_GetSortedTargets final
{
public:
	ETgfMonsterSelectTargetType                   SelectType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ASC;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FThreatInfo>                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFThreatManagerComponent_GetSortedTargets) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_GetSortedTargets");
static_assert(sizeof(TGFThreatManagerComponent_GetSortedTargets) == 0x000018, "Wrong size on TGFThreatManagerComponent_GetSortedTargets");
static_assert(offsetof(TGFThreatManagerComponent_GetSortedTargets, SelectType) == 0x000000, "Member 'TGFThreatManagerComponent_GetSortedTargets::SelectType' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_GetSortedTargets, ASC) == 0x000001, "Member 'TGFThreatManagerComponent_GetSortedTargets::ASC' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_GetSortedTargets, ReturnValue) == 0x000008, "Member 'TGFThreatManagerComponent_GetSortedTargets::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.GetSortedThreat
// 0x0018 (0x0018 - 0x0000)
struct TGFThreatManagerComponent_GetSortedThreat final
{
public:
	bool                                          ASC;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFThreatManagerComponent_GetSortedThreat) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_GetSortedThreat");
static_assert(sizeof(TGFThreatManagerComponent_GetSortedThreat) == 0x000018, "Wrong size on TGFThreatManagerComponent_GetSortedThreat");
static_assert(offsetof(TGFThreatManagerComponent_GetSortedThreat, ASC) == 0x000000, "Member 'TGFThreatManagerComponent_GetSortedThreat::ASC' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_GetSortedThreat, Param_Index) == 0x000004, "Member 'TGFThreatManagerComponent_GetSortedThreat::Param_Index' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_GetSortedThreat, Target) == 0x000008, "Member 'TGFThreatManagerComponent_GetSortedThreat::Target' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_GetSortedThreat, ReturnValue) == 0x000010, "Member 'TGFThreatManagerComponent_GetSortedThreat::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.GetTeamThreat
// 0x0010 (0x0010 - 0x0000)
struct TGFThreatManagerComponent_GetTeamThreat final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFThreatManagerComponent_GetTeamThreat) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_GetTeamThreat");
static_assert(sizeof(TGFThreatManagerComponent_GetTeamThreat) == 0x000010, "Wrong size on TGFThreatManagerComponent_GetTeamThreat");
static_assert(offsetof(TGFThreatManagerComponent_GetTeamThreat, Actor) == 0x000000, "Member 'TGFThreatManagerComponent_GetTeamThreat::Actor' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_GetTeamThreat, ReturnValue) == 0x000008, "Member 'TGFThreatManagerComponent_GetTeamThreat::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.GetTeamThreatList
// 0x0050 (0x0050 - 0x0000)
struct TGFThreatManagerComponent_GetTeamThreatList final
{
public:
	TMap<class AActor*, float>                    ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFThreatManagerComponent_GetTeamThreatList) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_GetTeamThreatList");
static_assert(sizeof(TGFThreatManagerComponent_GetTeamThreatList) == 0x000050, "Wrong size on TGFThreatManagerComponent_GetTeamThreatList");
static_assert(offsetof(TGFThreatManagerComponent_GetTeamThreatList, ReturnValue) == 0x000000, "Member 'TGFThreatManagerComponent_GetTeamThreatList::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.GetThreat
// 0x0010 (0x0010 - 0x0000)
struct TGFThreatManagerComponent_GetThreat final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFThreatManagerComponent_GetThreat) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_GetThreat");
static_assert(sizeof(TGFThreatManagerComponent_GetThreat) == 0x000010, "Wrong size on TGFThreatManagerComponent_GetThreat");
static_assert(offsetof(TGFThreatManagerComponent_GetThreat, Actor) == 0x000000, "Member 'TGFThreatManagerComponent_GetThreat::Actor' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_GetThreat, ReturnValue) == 0x000008, "Member 'TGFThreatManagerComponent_GetThreat::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.GetThreatList
// 0x0050 (0x0050 - 0x0000)
struct TGFThreatManagerComponent_GetThreatList final
{
public:
	TMap<class AActor*, float>                    ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFThreatManagerComponent_GetThreatList) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_GetThreatList");
static_assert(sizeof(TGFThreatManagerComponent_GetThreatList) == 0x000050, "Wrong size on TGFThreatManagerComponent_GetThreatList");
static_assert(offsetof(TGFThreatManagerComponent_GetThreatList, ReturnValue) == 0x000000, "Member 'TGFThreatManagerComponent_GetThreatList::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.GetThreatTarget
// 0x0008 (0x0008 - 0x0000)
struct TGFThreatManagerComponent_GetThreatTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFThreatManagerComponent_GetThreatTarget) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_GetThreatTarget");
static_assert(sizeof(TGFThreatManagerComponent_GetThreatTarget) == 0x000008, "Wrong size on TGFThreatManagerComponent_GetThreatTarget");
static_assert(offsetof(TGFThreatManagerComponent_GetThreatTarget, ReturnValue) == 0x000000, "Member 'TGFThreatManagerComponent_GetThreatTarget::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.HasTeamThreat
// 0x0010 (0x0010 - 0x0000)
struct TGFThreatManagerComponent_HasTeamThreat final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFThreatManagerComponent_HasTeamThreat) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_HasTeamThreat");
static_assert(sizeof(TGFThreatManagerComponent_HasTeamThreat) == 0x000010, "Wrong size on TGFThreatManagerComponent_HasTeamThreat");
static_assert(offsetof(TGFThreatManagerComponent_HasTeamThreat, Actor) == 0x000000, "Member 'TGFThreatManagerComponent_HasTeamThreat::Actor' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_HasTeamThreat, ReturnValue) == 0x000008, "Member 'TGFThreatManagerComponent_HasTeamThreat::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.HasThreat
// 0x0010 (0x0010 - 0x0000)
struct TGFThreatManagerComponent_HasThreat final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFThreatManagerComponent_HasThreat) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_HasThreat");
static_assert(sizeof(TGFThreatManagerComponent_HasThreat) == 0x000010, "Wrong size on TGFThreatManagerComponent_HasThreat");
static_assert(offsetof(TGFThreatManagerComponent_HasThreat, Actor) == 0x000000, "Member 'TGFThreatManagerComponent_HasThreat::Actor' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_HasThreat, ReturnValue) == 0x000008, "Member 'TGFThreatManagerComponent_HasThreat::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.HasThreats
// 0x0001 (0x0001 - 0x0000)
struct TGFThreatManagerComponent_HasThreats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFThreatManagerComponent_HasThreats) == 0x000001, "Wrong alignment on TGFThreatManagerComponent_HasThreats");
static_assert(sizeof(TGFThreatManagerComponent_HasThreats) == 0x000001, "Wrong size on TGFThreatManagerComponent_HasThreats");
static_assert(offsetof(TGFThreatManagerComponent_HasThreats, ReturnValue) == 0x000000, "Member 'TGFThreatManagerComponent_HasThreats::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.RemoveTeamThreat
// 0x0008 (0x0008 - 0x0000)
struct TGFThreatManagerComponent_RemoveTeamThreat final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFThreatManagerComponent_RemoveTeamThreat) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_RemoveTeamThreat");
static_assert(sizeof(TGFThreatManagerComponent_RemoveTeamThreat) == 0x000008, "Wrong size on TGFThreatManagerComponent_RemoveTeamThreat");
static_assert(offsetof(TGFThreatManagerComponent_RemoveTeamThreat, Actor) == 0x000000, "Member 'TGFThreatManagerComponent_RemoveTeamThreat::Actor' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.RemoveThreat
// 0x0010 (0x0010 - 0x0000)
struct TGFThreatManagerComponent_RemoveThreat final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFThreatManagerComponent_RemoveThreat) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_RemoveThreat");
static_assert(sizeof(TGFThreatManagerComponent_RemoveThreat) == 0x000010, "Wrong size on TGFThreatManagerComponent_RemoveThreat");
static_assert(offsetof(TGFThreatManagerComponent_RemoveThreat, Actor) == 0x000000, "Member 'TGFThreatManagerComponent_RemoveThreat::Actor' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_RemoveThreat, ReturnValue) == 0x000008, "Member 'TGFThreatManagerComponent_RemoveThreat::ReturnValue' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.SetTeamThreat
// 0x0010 (0x0010 - 0x0000)
struct TGFThreatManagerComponent_SetTeamThreat final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threat;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFThreatManagerComponent_SetTeamThreat) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_SetTeamThreat");
static_assert(sizeof(TGFThreatManagerComponent_SetTeamThreat) == 0x000010, "Wrong size on TGFThreatManagerComponent_SetTeamThreat");
static_assert(offsetof(TGFThreatManagerComponent_SetTeamThreat, Actor) == 0x000000, "Member 'TGFThreatManagerComponent_SetTeamThreat::Actor' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_SetTeamThreat, Threat) == 0x000008, "Member 'TGFThreatManagerComponent_SetTeamThreat::Threat' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.SetThreatTarget
// 0x0008 (0x0008 - 0x0000)
struct TGFThreatManagerComponent_SetThreatTarget final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TGFThreatManagerComponent_SetThreatTarget) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_SetThreatTarget");
static_assert(sizeof(TGFThreatManagerComponent_SetThreatTarget) == 0x000008, "Wrong size on TGFThreatManagerComponent_SetThreatTarget");
static_assert(offsetof(TGFThreatManagerComponent_SetThreatTarget, Actor) == 0x000000, "Member 'TGFThreatManagerComponent_SetThreatTarget::Actor' has a wrong offset!");

// Function LyraGame.TGFThreatManagerComponent.SyncThreatList
// 0x0010 (0x0010 - 0x0000)
struct TGFThreatManagerComponent_SyncThreatList final
{
public:
	class UTGFThreatManagerComponent*             Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SyncThreatValue;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TGFThreatManagerComponent_SyncThreatList) == 0x000008, "Wrong alignment on TGFThreatManagerComponent_SyncThreatList");
static_assert(sizeof(TGFThreatManagerComponent_SyncThreatList) == 0x000010, "Wrong size on TGFThreatManagerComponent_SyncThreatList");
static_assert(offsetof(TGFThreatManagerComponent_SyncThreatList, Source) == 0x000000, "Member 'TGFThreatManagerComponent_SyncThreatList::Source' has a wrong offset!");
static_assert(offsetof(TGFThreatManagerComponent_SyncThreatList, SyncThreatValue) == 0x000008, "Member 'TGFThreatManagerComponent_SyncThreatList::SyncThreatValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.ACEReportPlayer
// 0x0048 (0x0048 - 0x0000)
struct TgfUIBlueprintLibrary_ACEReportPlayer final
{
public:
	class FString                                 TargetOpenIdAndZoneIdString;                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerNameData                        TargetInPlayerNameData;                            // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class APlayerController*                      SourcePC;                                          // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_ACEReportPlayer) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_ACEReportPlayer");
static_assert(sizeof(TgfUIBlueprintLibrary_ACEReportPlayer) == 0x000048, "Wrong size on TgfUIBlueprintLibrary_ACEReportPlayer");
static_assert(offsetof(TgfUIBlueprintLibrary_ACEReportPlayer, TargetOpenIdAndZoneIdString) == 0x000000, "Member 'TgfUIBlueprintLibrary_ACEReportPlayer::TargetOpenIdAndZoneIdString' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_ACEReportPlayer, TargetInPlayerNameData) == 0x000010, "Member 'TgfUIBlueprintLibrary_ACEReportPlayer::TargetInPlayerNameData' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_ACEReportPlayer, SourcePC) == 0x000040, "Member 'TgfUIBlueprintLibrary_ACEReportPlayer::SourcePC' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.ChangeAnimationCurve
// 0x0020 (0x0020 - 0x0000)
struct TgfUIBlueprintLibrary_ChangeAnimationCurve final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetTrackName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                BindingObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_ChangeAnimationCurve) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_ChangeAnimationCurve");
static_assert(sizeof(TgfUIBlueprintLibrary_ChangeAnimationCurve) == 0x000020, "Wrong size on TgfUIBlueprintLibrary_ChangeAnimationCurve");
static_assert(offsetof(TgfUIBlueprintLibrary_ChangeAnimationCurve, InAnimation) == 0x000000, "Member 'TgfUIBlueprintLibrary_ChangeAnimationCurve::InAnimation' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_ChangeAnimationCurve, TargetTrackName) == 0x000008, "Member 'TgfUIBlueprintLibrary_ChangeAnimationCurve::TargetTrackName' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_ChangeAnimationCurve, BindingObject) == 0x000010, "Member 'TgfUIBlueprintLibrary_ChangeAnimationCurve::BindingObject' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_ChangeAnimationCurve, StartValue) == 0x000018, "Member 'TgfUIBlueprintLibrary_ChangeAnimationCurve::StartValue' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_ChangeAnimationCurve, EndValue) == 0x00001C, "Member 'TgfUIBlueprintLibrary_ChangeAnimationCurve::EndValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetActivityOpened
// 0x0008 (0x0008 - 0x0000)
struct TgfUIBlueprintLibrary_GetActivityOpened final
{
public:
	int32                                         ActivityId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfUIBlueprintLibrary_GetActivityOpened) == 0x000004, "Wrong alignment on TgfUIBlueprintLibrary_GetActivityOpened");
static_assert(sizeof(TgfUIBlueprintLibrary_GetActivityOpened) == 0x000008, "Wrong size on TgfUIBlueprintLibrary_GetActivityOpened");
static_assert(offsetof(TgfUIBlueprintLibrary_GetActivityOpened, ActivityId) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetActivityOpened::ActivityId' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetActivityOpened, ReturnValue) == 0x000004, "Member 'TgfUIBlueprintLibrary_GetActivityOpened::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetAppVersion
// 0x0010 (0x0010 - 0x0000)
struct TgfUIBlueprintLibrary_GetAppVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetAppVersion) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_GetAppVersion");
static_assert(sizeof(TgfUIBlueprintLibrary_GetAppVersion) == 0x000010, "Wrong size on TgfUIBlueprintLibrary_GetAppVersion");
static_assert(offsetof(TgfUIBlueprintLibrary_GetAppVersion, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetAppVersion::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetChargeSkillMethod
// 0x0001 (0x0001 - 0x0000)
struct TgfUIBlueprintLibrary_GetChargeSkillMethod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetChargeSkillMethod) == 0x000001, "Wrong alignment on TgfUIBlueprintLibrary_GetChargeSkillMethod");
static_assert(sizeof(TgfUIBlueprintLibrary_GetChargeSkillMethod) == 0x000001, "Wrong size on TgfUIBlueprintLibrary_GetChargeSkillMethod");
static_assert(offsetof(TgfUIBlueprintLibrary_GetChargeSkillMethod, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetChargeSkillMethod::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetConfiguredServerFrame
// 0x0008 (0x0008 - 0x0000)
struct TgfUIBlueprintLibrary_GetConfiguredServerFrame final
{
public:
	float                                         DefaultValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetConfiguredServerFrame) == 0x000004, "Wrong alignment on TgfUIBlueprintLibrary_GetConfiguredServerFrame");
static_assert(sizeof(TgfUIBlueprintLibrary_GetConfiguredServerFrame) == 0x000008, "Wrong size on TgfUIBlueprintLibrary_GetConfiguredServerFrame");
static_assert(offsetof(TgfUIBlueprintLibrary_GetConfiguredServerFrame, DefaultValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetConfiguredServerFrame::DefaultValue' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetConfiguredServerFrame, ReturnValue) == 0x000004, "Member 'TgfUIBlueprintLibrary_GetConfiguredServerFrame::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetCurrentInputType
// 0x0010 (0x0010 - 0x0000)
struct TgfUIBlueprintLibrary_GetCurrentInputType final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonInputType                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfUIBlueprintLibrary_GetCurrentInputType) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_GetCurrentInputType");
static_assert(sizeof(TgfUIBlueprintLibrary_GetCurrentInputType) == 0x000010, "Wrong size on TgfUIBlueprintLibrary_GetCurrentInputType");
static_assert(offsetof(TgfUIBlueprintLibrary_GetCurrentInputType, Widget) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetCurrentInputType::Widget' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetCurrentInputType, ReturnValue) == 0x000008, "Member 'TgfUIBlueprintLibrary_GetCurrentInputType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetCurrentTimeStamp
// 0x0008 (0x0008 - 0x0000)
struct TgfUIBlueprintLibrary_GetCurrentTimeStamp final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetCurrentTimeStamp) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_GetCurrentTimeStamp");
static_assert(sizeof(TgfUIBlueprintLibrary_GetCurrentTimeStamp) == 0x000008, "Wrong size on TgfUIBlueprintLibrary_GetCurrentTimeStamp");
static_assert(offsetof(TgfUIBlueprintLibrary_GetCurrentTimeStamp, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetCurrentTimeStamp::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetIsShowWeaponOperationTips
// 0x0001 (0x0001 - 0x0000)
struct TgfUIBlueprintLibrary_GetIsShowWeaponOperationTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetIsShowWeaponOperationTips) == 0x000001, "Wrong alignment on TgfUIBlueprintLibrary_GetIsShowWeaponOperationTips");
static_assert(sizeof(TgfUIBlueprintLibrary_GetIsShowWeaponOperationTips) == 0x000001, "Wrong size on TgfUIBlueprintLibrary_GetIsShowWeaponOperationTips");
static_assert(offsetof(TgfUIBlueprintLibrary_GetIsShowWeaponOperationTips, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetIsShowWeaponOperationTips::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetKeyName
// 0x0020 (0x0020 - 0x0000)
struct TgfUIBlueprintLibrary_GetKeyName final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetKeyName) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_GetKeyName");
static_assert(sizeof(TgfUIBlueprintLibrary_GetKeyName) == 0x000020, "Wrong size on TgfUIBlueprintLibrary_GetKeyName");
static_assert(offsetof(TgfUIBlueprintLibrary_GetKeyName, Key) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetKeyName::Key' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetKeyName, ReturnValue) == 0x000018, "Member 'TgfUIBlueprintLibrary_GetKeyName::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetMouseTargetingMethod
// 0x0001 (0x0001 - 0x0000)
struct TgfUIBlueprintLibrary_GetMouseTargetingMethod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetMouseTargetingMethod) == 0x000001, "Wrong alignment on TgfUIBlueprintLibrary_GetMouseTargetingMethod");
static_assert(sizeof(TgfUIBlueprintLibrary_GetMouseTargetingMethod) == 0x000001, "Wrong size on TgfUIBlueprintLibrary_GetMouseTargetingMethod");
static_assert(offsetof(TgfUIBlueprintLibrary_GetMouseTargetingMethod, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetMouseTargetingMethod::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetNameFromPlayerNameData
// 0x0048 (0x0048 - 0x0000)
struct TgfUIBlueprintLibrary_GetNameFromPlayerNameData final
{
public:
	struct FPlayerNameData                        InPlayerNameData;                                  // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsForceUseHiddenName;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetNameFromPlayerNameData) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_GetNameFromPlayerNameData");
static_assert(sizeof(TgfUIBlueprintLibrary_GetNameFromPlayerNameData) == 0x000048, "Wrong size on TgfUIBlueprintLibrary_GetNameFromPlayerNameData");
static_assert(offsetof(TgfUIBlueprintLibrary_GetNameFromPlayerNameData, InPlayerNameData) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetNameFromPlayerNameData::InPlayerNameData' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetNameFromPlayerNameData, bIsForceUseHiddenName) == 0x000030, "Member 'TgfUIBlueprintLibrary_GetNameFromPlayerNameData::bIsForceUseHiddenName' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetNameFromPlayerNameData, ReturnValue) == 0x000038, "Member 'TgfUIBlueprintLibrary_GetNameFromPlayerNameData::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetPingLevelByConfig
// 0x0008 (0x0008 - 0x0000)
struct TgfUIBlueprintLibrary_GetPingLevelByConfig final
{
public:
	float                                         Ping;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetPingLevelByConfig) == 0x000004, "Wrong alignment on TgfUIBlueprintLibrary_GetPingLevelByConfig");
static_assert(sizeof(TgfUIBlueprintLibrary_GetPingLevelByConfig) == 0x000008, "Wrong size on TgfUIBlueprintLibrary_GetPingLevelByConfig");
static_assert(offsetof(TgfUIBlueprintLibrary_GetPingLevelByConfig, Ping) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetPingLevelByConfig::Ping' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetPingLevelByConfig, ReturnValue) == 0x000004, "Member 'TgfUIBlueprintLibrary_GetPingLevelByConfig::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetRoleHeadPortraitIconPathInGame
// 0x0028 (0x0028 - 0x0000)
struct TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame final
{
public:
	int32                                         TypeId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gender;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinColor;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame");
static_assert(sizeof(TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame) == 0x000028, "Wrong size on TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame");
static_assert(offsetof(TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame, TypeId) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame::TypeId' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame, Gender) == 0x000004, "Member 'TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame::Gender' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame, FaceId) == 0x000008, "Member 'TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame::FaceId' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame, SkinColor) == 0x00000C, "Member 'TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame::SkinColor' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame, RowId) == 0x000010, "Member 'TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame::RowId' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame, ReturnValue) == 0x000018, "Member 'TgfUIBlueprintLibrary_GetRoleHeadPortraitIconPathInGame::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetUtcTime
// 0x0008 (0x0008 - 0x0000)
struct TgfUIBlueprintLibrary_GetUtcTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetUtcTime) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_GetUtcTime");
static_assert(sizeof(TgfUIBlueprintLibrary_GetUtcTime) == 0x000008, "Wrong size on TgfUIBlueprintLibrary_GetUtcTime");
static_assert(offsetof(TgfUIBlueprintLibrary_GetUtcTime, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetUtcTime::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.GetWidgetOwnerCharacter
// 0x0010 (0x0010 - 0x0000)
struct TgfUIBlueprintLibrary_GetWidgetOwnerCharacter final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_GetWidgetOwnerCharacter) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_GetWidgetOwnerCharacter");
static_assert(sizeof(TgfUIBlueprintLibrary_GetWidgetOwnerCharacter) == 0x000010, "Wrong size on TgfUIBlueprintLibrary_GetWidgetOwnerCharacter");
static_assert(offsetof(TgfUIBlueprintLibrary_GetWidgetOwnerCharacter, UserWidget) == 0x000000, "Member 'TgfUIBlueprintLibrary_GetWidgetOwnerCharacter::UserWidget' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_GetWidgetOwnerCharacter, ReturnValue) == 0x000008, "Member 'TgfUIBlueprintLibrary_GetWidgetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.IsLinuxVersion
// 0x0001 (0x0001 - 0x0000)
struct TgfUIBlueprintLibrary_IsLinuxVersion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_IsLinuxVersion) == 0x000001, "Wrong alignment on TgfUIBlueprintLibrary_IsLinuxVersion");
static_assert(sizeof(TgfUIBlueprintLibrary_IsLinuxVersion) == 0x000001, "Wrong size on TgfUIBlueprintLibrary_IsLinuxVersion");
static_assert(offsetof(TgfUIBlueprintLibrary_IsLinuxVersion, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_IsLinuxVersion::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.IsTooltipsAttributeAppendRange
// 0x0001 (0x0001 - 0x0000)
struct TgfUIBlueprintLibrary_IsTooltipsAttributeAppendRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_IsTooltipsAttributeAppendRange) == 0x000001, "Wrong alignment on TgfUIBlueprintLibrary_IsTooltipsAttributeAppendRange");
static_assert(sizeof(TgfUIBlueprintLibrary_IsTooltipsAttributeAppendRange) == 0x000001, "Wrong size on TgfUIBlueprintLibrary_IsTooltipsAttributeAppendRange");
static_assert(offsetof(TgfUIBlueprintLibrary_IsTooltipsAttributeAppendRange, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_IsTooltipsAttributeAppendRange::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.IsWolrdTearingDown
// 0x0010 (0x0010 - 0x0000)
struct TgfUIBlueprintLibrary_IsWolrdTearingDown final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfUIBlueprintLibrary_IsWolrdTearingDown) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_IsWolrdTearingDown");
static_assert(sizeof(TgfUIBlueprintLibrary_IsWolrdTearingDown) == 0x000010, "Wrong size on TgfUIBlueprintLibrary_IsWolrdTearingDown");
static_assert(offsetof(TgfUIBlueprintLibrary_IsWolrdTearingDown, UserWidget) == 0x000000, "Member 'TgfUIBlueprintLibrary_IsWolrdTearingDown::UserWidget' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_IsWolrdTearingDown, ReturnValue) == 0x000008, "Member 'TgfUIBlueprintLibrary_IsWolrdTearingDown::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.OpenGuideWindow
// 0x0010 (0x0010 - 0x0000)
struct TgfUIBlueprintLibrary_OpenGuideWindow final
{
public:
	class UUserWidget*                            FromWindow;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_OpenGuideWindow) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_OpenGuideWindow");
static_assert(sizeof(TgfUIBlueprintLibrary_OpenGuideWindow) == 0x000010, "Wrong size on TgfUIBlueprintLibrary_OpenGuideWindow");
static_assert(offsetof(TgfUIBlueprintLibrary_OpenGuideWindow, FromWindow) == 0x000000, "Member 'TgfUIBlueprintLibrary_OpenGuideWindow::FromWindow' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_OpenGuideWindow, ReturnValue) == 0x000008, "Member 'TgfUIBlueprintLibrary_OpenGuideWindow::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.OpenKeyBindingConflictWindow
// 0x0008 (0x0008 - 0x0000)
struct TgfUIBlueprintLibrary_OpenKeyBindingConflictWindow final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_OpenKeyBindingConflictWindow) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_OpenKeyBindingConflictWindow");
static_assert(sizeof(TgfUIBlueprintLibrary_OpenKeyBindingConflictWindow) == 0x000008, "Wrong size on TgfUIBlueprintLibrary_OpenKeyBindingConflictWindow");
static_assert(offsetof(TgfUIBlueprintLibrary_OpenKeyBindingConflictWindow, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_OpenKeyBindingConflictWindow::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.OpenReturnToLobbyConfirmWindow
// 0x0008 (0x0008 - 0x0000)
struct TgfUIBlueprintLibrary_OpenReturnToLobbyConfirmWindow final
{
public:
	class UUserWidget*                            FromWindow;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_OpenReturnToLobbyConfirmWindow) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_OpenReturnToLobbyConfirmWindow");
static_assert(sizeof(TgfUIBlueprintLibrary_OpenReturnToLobbyConfirmWindow) == 0x000008, "Wrong size on TgfUIBlueprintLibrary_OpenReturnToLobbyConfirmWindow");
static_assert(offsetof(TgfUIBlueprintLibrary_OpenReturnToLobbyConfirmWindow, FromWindow) == 0x000000, "Member 'TgfUIBlueprintLibrary_OpenReturnToLobbyConfirmWindow::FromWindow' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.OpenSettingWindow
// 0x0010 (0x0010 - 0x0000)
struct TgfUIBlueprintLibrary_OpenSettingWindow final
{
public:
	class UUserWidget*                            FromWindow;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_OpenSettingWindow) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_OpenSettingWindow");
static_assert(sizeof(TgfUIBlueprintLibrary_OpenSettingWindow) == 0x000010, "Wrong size on TgfUIBlueprintLibrary_OpenSettingWindow");
static_assert(offsetof(TgfUIBlueprintLibrary_OpenSettingWindow, FromWindow) == 0x000000, "Member 'TgfUIBlueprintLibrary_OpenSettingWindow::FromWindow' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_OpenSettingWindow, ReturnValue) == 0x000008, "Member 'TgfUIBlueprintLibrary_OpenSettingWindow::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.PathExists
// 0x0018 (0x0018 - 0x0000)
struct TgfUIBlueprintLibrary_PathExists final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfUIBlueprintLibrary_PathExists) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_PathExists");
static_assert(sizeof(TgfUIBlueprintLibrary_PathExists) == 0x000018, "Wrong size on TgfUIBlueprintLibrary_PathExists");
static_assert(offsetof(TgfUIBlueprintLibrary_PathExists, Path) == 0x000000, "Member 'TgfUIBlueprintLibrary_PathExists::Path' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_PathExists, ReturnValue) == 0x000010, "Member 'TgfUIBlueprintLibrary_PathExists::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.SendHomelandPickupMessage
// 0x0004 (0x0004 - 0x0000)
struct TgfUIBlueprintLibrary_SendHomelandPickupMessage final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_SendHomelandPickupMessage) == 0x000004, "Wrong alignment on TgfUIBlueprintLibrary_SendHomelandPickupMessage");
static_assert(sizeof(TgfUIBlueprintLibrary_SendHomelandPickupMessage) == 0x000004, "Wrong size on TgfUIBlueprintLibrary_SendHomelandPickupMessage");
static_assert(offsetof(TgfUIBlueprintLibrary_SendHomelandPickupMessage, ItemId) == 0x000000, "Member 'TgfUIBlueprintLibrary_SendHomelandPickupMessage::ItemId' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.SendReport
// 0x0090 (0x0090 - 0x0000)
struct TgfUIBlueprintLibrary_SendReport final
{
public:
	struct FReportRecord                          Record;                                            // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_SendReport) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_SendReport");
static_assert(sizeof(TgfUIBlueprintLibrary_SendReport) == 0x000090, "Wrong size on TgfUIBlueprintLibrary_SendReport");
static_assert(offsetof(TgfUIBlueprintLibrary_SendReport, Record) == 0x000000, "Member 'TgfUIBlueprintLibrary_SendReport::Record' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.SetInBattlePing
// 0x0004 (0x0004 - 0x0000)
struct TgfUIBlueprintLibrary_SetInBattlePing final
{
public:
	int32                                         InBattlePing;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_SetInBattlePing) == 0x000004, "Wrong alignment on TgfUIBlueprintLibrary_SetInBattlePing");
static_assert(sizeof(TgfUIBlueprintLibrary_SetInBattlePing) == 0x000004, "Wrong size on TgfUIBlueprintLibrary_SetInBattlePing");
static_assert(offsetof(TgfUIBlueprintLibrary_SetInBattlePing, InBattlePing) == 0x000000, "Member 'TgfUIBlueprintLibrary_SetInBattlePing::InBattlePing' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.SetIsShowWeaponOperationTips
// 0x0001 (0x0001 - 0x0000)
struct TgfUIBlueprintLibrary_SetIsShowWeaponOperationTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_SetIsShowWeaponOperationTips) == 0x000001, "Wrong alignment on TgfUIBlueprintLibrary_SetIsShowWeaponOperationTips");
static_assert(sizeof(TgfUIBlueprintLibrary_SetIsShowWeaponOperationTips) == 0x000001, "Wrong size on TgfUIBlueprintLibrary_SetIsShowWeaponOperationTips");
static_assert(offsetof(TgfUIBlueprintLibrary_SetIsShowWeaponOperationTips, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_SetIsShowWeaponOperationTips::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.ShouldDrawDebug
// 0x0001 (0x0001 - 0x0000)
struct TgfUIBlueprintLibrary_ShouldDrawDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_ShouldDrawDebug) == 0x000001, "Wrong alignment on TgfUIBlueprintLibrary_ShouldDrawDebug");
static_assert(sizeof(TgfUIBlueprintLibrary_ShouldDrawDebug) == 0x000001, "Wrong size on TgfUIBlueprintLibrary_ShouldDrawDebug");
static_assert(offsetof(TgfUIBlueprintLibrary_ShouldDrawDebug, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_ShouldDrawDebug::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.ShouldShutDownHallGlobalEffects
// 0x0001 (0x0001 - 0x0000)
struct TgfUIBlueprintLibrary_ShouldShutDownHallGlobalEffects final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_ShouldShutDownHallGlobalEffects) == 0x000001, "Wrong alignment on TgfUIBlueprintLibrary_ShouldShutDownHallGlobalEffects");
static_assert(sizeof(TgfUIBlueprintLibrary_ShouldShutDownHallGlobalEffects) == 0x000001, "Wrong size on TgfUIBlueprintLibrary_ShouldShutDownHallGlobalEffects");
static_assert(offsetof(TgfUIBlueprintLibrary_ShouldShutDownHallGlobalEffects, bIsOpen) == 0x000000, "Member 'TgfUIBlueprintLibrary_ShouldShutDownHallGlobalEffects::bIsOpen' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.ShouldTakeDeathScreenshot
// 0x0001 (0x0001 - 0x0000)
struct TgfUIBlueprintLibrary_ShouldTakeDeathScreenshot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_ShouldTakeDeathScreenshot) == 0x000001, "Wrong alignment on TgfUIBlueprintLibrary_ShouldTakeDeathScreenshot");
static_assert(sizeof(TgfUIBlueprintLibrary_ShouldTakeDeathScreenshot) == 0x000001, "Wrong size on TgfUIBlueprintLibrary_ShouldTakeDeathScreenshot");
static_assert(offsetof(TgfUIBlueprintLibrary_ShouldTakeDeathScreenshot, ReturnValue) == 0x000000, "Member 'TgfUIBlueprintLibrary_ShouldTakeDeathScreenshot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.ShowToast
// 0x0018 (0x0018 - 0x0000)
struct TgfUIBlueprintLibrary_ShowToast final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_ShowToast) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_ShowToast");
static_assert(sizeof(TgfUIBlueprintLibrary_ShowToast) == 0x000018, "Wrong size on TgfUIBlueprintLibrary_ShowToast");
static_assert(offsetof(TgfUIBlueprintLibrary_ShowToast, Message) == 0x000000, "Member 'TgfUIBlueprintLibrary_ShowToast::Message' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.ShowToastWithActor
// 0x0020 (0x0020 - 0x0000)
struct TgfUIBlueprintLibrary_ShowToastWithActor final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 InputActor;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_ShowToastWithActor) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_ShowToastWithActor");
static_assert(sizeof(TgfUIBlueprintLibrary_ShowToastWithActor) == 0x000020, "Wrong size on TgfUIBlueprintLibrary_ShowToastWithActor");
static_assert(offsetof(TgfUIBlueprintLibrary_ShowToastWithActor, Message) == 0x000000, "Member 'TgfUIBlueprintLibrary_ShowToastWithActor::Message' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_ShowToastWithActor, InputActor) == 0x000018, "Member 'TgfUIBlueprintLibrary_ShowToastWithActor::InputActor' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.ShowToastWithActorAndTime
// 0x0028 (0x0028 - 0x0000)
struct TgfUIBlueprintLibrary_ShowToastWithActorAndTime final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 InputActor;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfUIBlueprintLibrary_ShowToastWithActorAndTime) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_ShowToastWithActorAndTime");
static_assert(sizeof(TgfUIBlueprintLibrary_ShowToastWithActorAndTime) == 0x000028, "Wrong size on TgfUIBlueprintLibrary_ShowToastWithActorAndTime");
static_assert(offsetof(TgfUIBlueprintLibrary_ShowToastWithActorAndTime, Message) == 0x000000, "Member 'TgfUIBlueprintLibrary_ShowToastWithActorAndTime::Message' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_ShowToastWithActorAndTime, InputActor) == 0x000018, "Member 'TgfUIBlueprintLibrary_ShowToastWithActorAndTime::InputActor' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_ShowToastWithActorAndTime, Time) == 0x000020, "Member 'TgfUIBlueprintLibrary_ShowToastWithActorAndTime::Time' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.ShowToastWithObject
// 0x0020 (0x0020 - 0x0000)
struct TgfUIBlueprintLibrary_ShowToastWithObject final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                InputObject;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_ShowToastWithObject) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_ShowToastWithObject");
static_assert(sizeof(TgfUIBlueprintLibrary_ShowToastWithObject) == 0x000020, "Wrong size on TgfUIBlueprintLibrary_ShowToastWithObject");
static_assert(offsetof(TgfUIBlueprintLibrary_ShowToastWithObject, Message) == 0x000000, "Member 'TgfUIBlueprintLibrary_ShowToastWithObject::Message' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_ShowToastWithObject, InputObject) == 0x000018, "Member 'TgfUIBlueprintLibrary_ShowToastWithObject::InputObject' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.TakeDeathScreenshot
// 0x0018 (0x0018 - 0x0000)
struct TgfUIBlueprintLibrary_TakeDeathScreenshot final
{
public:
	class FString                                 OutShotPath;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfUIBlueprintLibrary_TakeDeathScreenshot) == 0x000008, "Wrong alignment on TgfUIBlueprintLibrary_TakeDeathScreenshot");
static_assert(sizeof(TgfUIBlueprintLibrary_TakeDeathScreenshot) == 0x000018, "Wrong size on TgfUIBlueprintLibrary_TakeDeathScreenshot");
static_assert(offsetof(TgfUIBlueprintLibrary_TakeDeathScreenshot, OutShotPath) == 0x000000, "Member 'TgfUIBlueprintLibrary_TakeDeathScreenshot::OutShotPath' has a wrong offset!");
static_assert(offsetof(TgfUIBlueprintLibrary_TakeDeathScreenshot, ReturnValue) == 0x000010, "Member 'TgfUIBlueprintLibrary_TakeDeathScreenshot::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.ToggleGvoiceMic
// 0x0001 (0x0001 - 0x0000)
struct TgfUIBlueprintLibrary_ToggleGvoiceMic final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_ToggleGvoiceMic) == 0x000001, "Wrong alignment on TgfUIBlueprintLibrary_ToggleGvoiceMic");
static_assert(sizeof(TgfUIBlueprintLibrary_ToggleGvoiceMic) == 0x000001, "Wrong size on TgfUIBlueprintLibrary_ToggleGvoiceMic");
static_assert(offsetof(TgfUIBlueprintLibrary_ToggleGvoiceMic, bIsOpen) == 0x000000, "Member 'TgfUIBlueprintLibrary_ToggleGvoiceMic::bIsOpen' has a wrong offset!");

// Function LyraGame.TgfUIBlueprintLibrary.ToggleOptimizationForSceneCapture
// 0x0001 (0x0001 - 0x0000)
struct TgfUIBlueprintLibrary_ToggleOptimizationForSceneCapture final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfUIBlueprintLibrary_ToggleOptimizationForSceneCapture) == 0x000001, "Wrong alignment on TgfUIBlueprintLibrary_ToggleOptimizationForSceneCapture");
static_assert(sizeof(TgfUIBlueprintLibrary_ToggleOptimizationForSceneCapture) == 0x000001, "Wrong size on TgfUIBlueprintLibrary_ToggleOptimizationForSceneCapture");
static_assert(offsetof(TgfUIBlueprintLibrary_ToggleOptimizationForSceneCapture, bIsOpen) == 0x000000, "Member 'TgfUIBlueprintLibrary_ToggleOptimizationForSceneCapture::bIsOpen' has a wrong offset!");

// Function LyraGame.TgfVoiceChatBlueprintLibrary.RegisterVoiceChatActor
// 0x0018 (0x0018 - 0x0000)
struct TgfVoiceChatBlueprintLibrary_RegisterVoiceChatActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfVoiceChatBlueprintLibrary_RegisterVoiceChatActor) == 0x000008, "Wrong alignment on TgfVoiceChatBlueprintLibrary_RegisterVoiceChatActor");
static_assert(sizeof(TgfVoiceChatBlueprintLibrary_RegisterVoiceChatActor) == 0x000018, "Wrong size on TgfVoiceChatBlueprintLibrary_RegisterVoiceChatActor");
static_assert(offsetof(TgfVoiceChatBlueprintLibrary_RegisterVoiceChatActor, Actor) == 0x000000, "Member 'TgfVoiceChatBlueprintLibrary_RegisterVoiceChatActor::Actor' has a wrong offset!");
static_assert(offsetof(TgfVoiceChatBlueprintLibrary_RegisterVoiceChatActor, UserId) == 0x000008, "Member 'TgfVoiceChatBlueprintLibrary_RegisterVoiceChatActor::UserId' has a wrong offset!");

// Function LyraGame.TgfVoiceChatBlueprintLibrary.UnregisterVoiceChatActor
// 0x0008 (0x0008 - 0x0000)
struct TgfVoiceChatBlueprintLibrary_UnregisterVoiceChatActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfVoiceChatBlueprintLibrary_UnregisterVoiceChatActor) == 0x000008, "Wrong alignment on TgfVoiceChatBlueprintLibrary_UnregisterVoiceChatActor");
static_assert(sizeof(TgfVoiceChatBlueprintLibrary_UnregisterVoiceChatActor) == 0x000008, "Wrong size on TgfVoiceChatBlueprintLibrary_UnregisterVoiceChatActor");
static_assert(offsetof(TgfVoiceChatBlueprintLibrary_UnregisterVoiceChatActor, Actor) == 0x000000, "Member 'TgfVoiceChatBlueprintLibrary_UnregisterVoiceChatActor::Actor' has a wrong offset!");

// Function LyraGame.TgfWaitAbilityTask_TargetMovementMode.CreateWaitTargetMovementMode
// 0x0018 (0x0018 - 0x0000)
struct TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 MovementMode;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CustomMode;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfWaitAbilityTask_TargetMovementMode* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode) == 0x000008, "Wrong alignment on TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode");
static_assert(sizeof(TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode) == 0x000018, "Wrong size on TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode");
static_assert(offsetof(TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode, OwningAbility) == 0x000000, "Member 'TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode::OwningAbility' has a wrong offset!");
static_assert(offsetof(TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode, MovementMode) == 0x000008, "Member 'TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode::MovementMode' has a wrong offset!");
static_assert(offsetof(TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode, CustomMode) == 0x000009, "Member 'TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode::CustomMode' has a wrong offset!");
static_assert(offsetof(TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode, ReturnValue) == 0x000010, "Member 'TgfWaitAbilityTask_TargetMovementMode_CreateWaitTargetMovementMode::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWaitAbilityTask_TargetMovementMode.OnMovementModeChange
// 0x0010 (0x0010 - 0x0000)
struct TgfWaitAbilityTask_TargetMovementMode_OnMovementModeChange final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrvMovementMode;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrvCustomMode;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfWaitAbilityTask_TargetMovementMode_OnMovementModeChange) == 0x000008, "Wrong alignment on TgfWaitAbilityTask_TargetMovementMode_OnMovementModeChange");
static_assert(sizeof(TgfWaitAbilityTask_TargetMovementMode_OnMovementModeChange) == 0x000010, "Wrong size on TgfWaitAbilityTask_TargetMovementMode_OnMovementModeChange");
static_assert(offsetof(TgfWaitAbilityTask_TargetMovementMode_OnMovementModeChange, Character) == 0x000000, "Member 'TgfWaitAbilityTask_TargetMovementMode_OnMovementModeChange::Character' has a wrong offset!");
static_assert(offsetof(TgfWaitAbilityTask_TargetMovementMode_OnMovementModeChange, PrvMovementMode) == 0x000008, "Member 'TgfWaitAbilityTask_TargetMovementMode_OnMovementModeChange::PrvMovementMode' has a wrong offset!");
static_assert(offsetof(TgfWaitAbilityTask_TargetMovementMode_OnMovementModeChange, PrvCustomMode) == 0x000009, "Member 'TgfWaitAbilityTask_TargetMovementMode_OnMovementModeChange::PrvCustomMode' has a wrong offset!");

// Function LyraGame.TgfWeaponAnimDefinition.PickIdleAnimation
// 0x0030 (0x0030 - 0x0000)
struct TgfWeaponAnimDefinition_PickIdleAnimation final
{
public:
	struct FGameplayTagContainer                  CosmeticTags;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsRight;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequenceBase*                ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWeaponAnimDefinition_PickIdleAnimation) == 0x000008, "Wrong alignment on TgfWeaponAnimDefinition_PickIdleAnimation");
static_assert(sizeof(TgfWeaponAnimDefinition_PickIdleAnimation) == 0x000030, "Wrong size on TgfWeaponAnimDefinition_PickIdleAnimation");
static_assert(offsetof(TgfWeaponAnimDefinition_PickIdleAnimation, CosmeticTags) == 0x000000, "Member 'TgfWeaponAnimDefinition_PickIdleAnimation::CosmeticTags' has a wrong offset!");
static_assert(offsetof(TgfWeaponAnimDefinition_PickIdleAnimation, bIsRight) == 0x000020, "Member 'TgfWeaponAnimDefinition_PickIdleAnimation::bIsRight' has a wrong offset!");
static_assert(offsetof(TgfWeaponAnimDefinition_PickIdleAnimation, ReturnValue) == 0x000028, "Member 'TgfWeaponAnimDefinition_PickIdleAnimation::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWeaponDefinition.GetWeaponAnimDefinition
// 0x0010 (0x0010 - 0x0000)
struct TgfWeaponDefinition_GetWeaponAnimDefinition final
{
public:
	ETgfEquipSubType                              AssistSlot;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceSingle;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTgfWeaponAnimDefinition>   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWeaponDefinition_GetWeaponAnimDefinition) == 0x000008, "Wrong alignment on TgfWeaponDefinition_GetWeaponAnimDefinition");
static_assert(sizeof(TgfWeaponDefinition_GetWeaponAnimDefinition) == 0x000010, "Wrong size on TgfWeaponDefinition_GetWeaponAnimDefinition");
static_assert(offsetof(TgfWeaponDefinition_GetWeaponAnimDefinition, AssistSlot) == 0x000000, "Member 'TgfWeaponDefinition_GetWeaponAnimDefinition::AssistSlot' has a wrong offset!");
static_assert(offsetof(TgfWeaponDefinition_GetWeaponAnimDefinition, ForceSingle) == 0x000001, "Member 'TgfWeaponDefinition_GetWeaponAnimDefinition::ForceSingle' has a wrong offset!");
static_assert(offsetof(TgfWeaponDefinition_GetWeaponAnimDefinition, ReturnValue) == 0x000008, "Member 'TgfWeaponDefinition_GetWeaponAnimDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraUserFacingExperienceDefinition.CreateHostingRequest
// 0x0008 (0x0008 - 0x0000)
struct LyraUserFacingExperienceDefinition_CreateHostingRequest final
{
public:
	class UCommonSession_HostSessionRequest*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraUserFacingExperienceDefinition_CreateHostingRequest) == 0x000008, "Wrong alignment on LyraUserFacingExperienceDefinition_CreateHostingRequest");
static_assert(sizeof(LyraUserFacingExperienceDefinition_CreateHostingRequest) == 0x000008, "Wrong size on LyraUserFacingExperienceDefinition_CreateHostingRequest");
static_assert(offsetof(LyraUserFacingExperienceDefinition_CreateHostingRequest, ReturnValue) == 0x000000, "Member 'LyraUserFacingExperienceDefinition_CreateHostingRequest::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWidgetFunctionLibrary.GetGridSlotColumnSpan
// 0x0010 (0x0010 - 0x0000)
struct TgfWidgetFunctionLibrary_GetGridSlotColumnSpan final
{
public:
	const class UGridSlot*                        Slot;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfWidgetFunctionLibrary_GetGridSlotColumnSpan) == 0x000008, "Wrong alignment on TgfWidgetFunctionLibrary_GetGridSlotColumnSpan");
static_assert(sizeof(TgfWidgetFunctionLibrary_GetGridSlotColumnSpan) == 0x000010, "Wrong size on TgfWidgetFunctionLibrary_GetGridSlotColumnSpan");
static_assert(offsetof(TgfWidgetFunctionLibrary_GetGridSlotColumnSpan, Slot) == 0x000000, "Member 'TgfWidgetFunctionLibrary_GetGridSlotColumnSpan::Slot' has a wrong offset!");
static_assert(offsetof(TgfWidgetFunctionLibrary_GetGridSlotColumnSpan, ReturnValue) == 0x000008, "Member 'TgfWidgetFunctionLibrary_GetGridSlotColumnSpan::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWidgetFunctionLibrary.GetGridSlotRowSpan
// 0x0010 (0x0010 - 0x0000)
struct TgfWidgetFunctionLibrary_GetGridSlotRowSpan final
{
public:
	const class UGridSlot*                        Slot;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfWidgetFunctionLibrary_GetGridSlotRowSpan) == 0x000008, "Wrong alignment on TgfWidgetFunctionLibrary_GetGridSlotRowSpan");
static_assert(sizeof(TgfWidgetFunctionLibrary_GetGridSlotRowSpan) == 0x000010, "Wrong size on TgfWidgetFunctionLibrary_GetGridSlotRowSpan");
static_assert(offsetof(TgfWidgetFunctionLibrary_GetGridSlotRowSpan, Slot) == 0x000000, "Member 'TgfWidgetFunctionLibrary_GetGridSlotRowSpan::Slot' has a wrong offset!");
static_assert(offsetof(TgfWidgetFunctionLibrary_GetGridSlotRowSpan, ReturnValue) == 0x000008, "Member 'TgfWidgetFunctionLibrary_GetGridSlotRowSpan::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWidgetFunctionLibrary.LoadTextureFromPath
// 0x0018 (0x0018 - 0x0000)
struct TgfWidgetFunctionLibrary_LoadTextureFromPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetFunctionLibrary_LoadTextureFromPath) == 0x000008, "Wrong alignment on TgfWidgetFunctionLibrary_LoadTextureFromPath");
static_assert(sizeof(TgfWidgetFunctionLibrary_LoadTextureFromPath) == 0x000018, "Wrong size on TgfWidgetFunctionLibrary_LoadTextureFromPath");
static_assert(offsetof(TgfWidgetFunctionLibrary_LoadTextureFromPath, Path) == 0x000000, "Member 'TgfWidgetFunctionLibrary_LoadTextureFromPath::Path' has a wrong offset!");
static_assert(offsetof(TgfWidgetFunctionLibrary_LoadTextureFromPath, ReturnValue) == 0x000010, "Member 'TgfWidgetFunctionLibrary_LoadTextureFromPath::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWidgetFunctionLibrary.MakePopupWindowPosition
// 0x0040 (0x0040 - 0x0000)
struct TgfWidgetFunctionLibrary_MakePopupWindowPosition final
{
public:
	struct FVector2D                              AnchorPosition;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AnchorSize;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetFunctionLibrary_MakePopupWindowPosition) == 0x000008, "Wrong alignment on TgfWidgetFunctionLibrary_MakePopupWindowPosition");
static_assert(sizeof(TgfWidgetFunctionLibrary_MakePopupWindowPosition) == 0x000040, "Wrong size on TgfWidgetFunctionLibrary_MakePopupWindowPosition");
static_assert(offsetof(TgfWidgetFunctionLibrary_MakePopupWindowPosition, AnchorPosition) == 0x000000, "Member 'TgfWidgetFunctionLibrary_MakePopupWindowPosition::AnchorPosition' has a wrong offset!");
static_assert(offsetof(TgfWidgetFunctionLibrary_MakePopupWindowPosition, AnchorSize) == 0x000010, "Member 'TgfWidgetFunctionLibrary_MakePopupWindowPosition::AnchorSize' has a wrong offset!");
static_assert(offsetof(TgfWidgetFunctionLibrary_MakePopupWindowPosition, Size) == 0x000020, "Member 'TgfWidgetFunctionLibrary_MakePopupWindowPosition::Size' has a wrong offset!");
static_assert(offsetof(TgfWidgetFunctionLibrary_MakePopupWindowPosition, ReturnValue) == 0x000030, "Member 'TgfWidgetFunctionLibrary_MakePopupWindowPosition::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWidgetFunctionLibrary.MarkInsightAnchor
// 0x0010 (0x0010 - 0x0000)
struct TgfWidgetFunctionLibrary_MarkInsightAnchor final
{
public:
	class FString                                 InsightDataString;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetFunctionLibrary_MarkInsightAnchor) == 0x000008, "Wrong alignment on TgfWidgetFunctionLibrary_MarkInsightAnchor");
static_assert(sizeof(TgfWidgetFunctionLibrary_MarkInsightAnchor) == 0x000010, "Wrong size on TgfWidgetFunctionLibrary_MarkInsightAnchor");
static_assert(offsetof(TgfWidgetFunctionLibrary_MarkInsightAnchor, InsightDataString) == 0x000000, "Member 'TgfWidgetFunctionLibrary_MarkInsightAnchor::InsightDataString' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.AddCanFocusedWidget
// 0x0010 (0x0010 - 0x0000)
struct TgfWidgetGamepadWrapper_AddCanFocusedWidget final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIdx;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfWidgetGamepadWrapper_AddCanFocusedWidget) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapper_AddCanFocusedWidget");
static_assert(sizeof(TgfWidgetGamepadWrapper_AddCanFocusedWidget) == 0x000010, "Wrong size on TgfWidgetGamepadWrapper_AddCanFocusedWidget");
static_assert(offsetof(TgfWidgetGamepadWrapper_AddCanFocusedWidget, UserWidget) == 0x000000, "Member 'TgfWidgetGamepadWrapper_AddCanFocusedWidget::UserWidget' has a wrong offset!");
static_assert(offsetof(TgfWidgetGamepadWrapper_AddCanFocusedWidget, PageIdx) == 0x000008, "Member 'TgfWidgetGamepadWrapper_AddCanFocusedWidget::PageIdx' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.BindCustomNavigation
// 0x0008 (0x0008 - 0x0000)
struct TgfWidgetGamepadWrapper_BindCustomNavigation final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetGamepadWrapper_BindCustomNavigation) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapper_BindCustomNavigation");
static_assert(sizeof(TgfWidgetGamepadWrapper_BindCustomNavigation) == 0x000008, "Wrong size on TgfWidgetGamepadWrapper_BindCustomNavigation");
static_assert(offsetof(TgfWidgetGamepadWrapper_BindCustomNavigation, Widget) == 0x000000, "Member 'TgfWidgetGamepadWrapper_BindCustomNavigation::Widget' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.BP_GetDefaultFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct TgfWidgetGamepadWrapper_BP_GetDefaultFocusWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetGamepadWrapper_BP_GetDefaultFocusWidget) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapper_BP_GetDefaultFocusWidget");
static_assert(sizeof(TgfWidgetGamepadWrapper_BP_GetDefaultFocusWidget) == 0x000008, "Wrong size on TgfWidgetGamepadWrapper_BP_GetDefaultFocusWidget");
static_assert(offsetof(TgfWidgetGamepadWrapper_BP_GetDefaultFocusWidget, ReturnValue) == 0x000000, "Member 'TgfWidgetGamepadWrapper_BP_GetDefaultFocusWidget::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.GetDefaultFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct TgfWidgetGamepadWrapper_GetDefaultFocusWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetGamepadWrapper_GetDefaultFocusWidget) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapper_GetDefaultFocusWidget");
static_assert(sizeof(TgfWidgetGamepadWrapper_GetDefaultFocusWidget) == 0x000008, "Wrong size on TgfWidgetGamepadWrapper_GetDefaultFocusWidget");
static_assert(offsetof(TgfWidgetGamepadWrapper_GetDefaultFocusWidget, ReturnValue) == 0x000000, "Member 'TgfWidgetGamepadWrapper_GetDefaultFocusWidget::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.GetNextFocWidget
// 0x0018 (0x0018 - 0x0000)
struct TgfWidgetGamepadWrapper_GetNextFocWidget final
{
public:
	EUINavigation                                 Navigation;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            FromWidget;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetGamepadWrapper_GetNextFocWidget) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapper_GetNextFocWidget");
static_assert(sizeof(TgfWidgetGamepadWrapper_GetNextFocWidget) == 0x000018, "Wrong size on TgfWidgetGamepadWrapper_GetNextFocWidget");
static_assert(offsetof(TgfWidgetGamepadWrapper_GetNextFocWidget, Navigation) == 0x000000, "Member 'TgfWidgetGamepadWrapper_GetNextFocWidget::Navigation' has a wrong offset!");
static_assert(offsetof(TgfWidgetGamepadWrapper_GetNextFocWidget, FromWidget) == 0x000008, "Member 'TgfWidgetGamepadWrapper_GetNextFocWidget::FromWidget' has a wrong offset!");
static_assert(offsetof(TgfWidgetGamepadWrapper_GetNextFocWidget, ReturnValue) == 0x000010, "Member 'TgfWidgetGamepadWrapper_GetNextFocWidget::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.GetWidgetCenterLocation
// 0x0018 (0x0018 - 0x0000)
struct TgfWidgetGamepadWrapper_GetWidgetCenterLocation final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetGamepadWrapper_GetWidgetCenterLocation) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapper_GetWidgetCenterLocation");
static_assert(sizeof(TgfWidgetGamepadWrapper_GetWidgetCenterLocation) == 0x000018, "Wrong size on TgfWidgetGamepadWrapper_GetWidgetCenterLocation");
static_assert(offsetof(TgfWidgetGamepadWrapper_GetWidgetCenterLocation, Widget) == 0x000000, "Member 'TgfWidgetGamepadWrapper_GetWidgetCenterLocation::Widget' has a wrong offset!");
static_assert(offsetof(TgfWidgetGamepadWrapper_GetWidgetCenterLocation, ReturnValue) == 0x000008, "Member 'TgfWidgetGamepadWrapper_GetWidgetCenterLocation::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.InitWrapper
// 0x0008 (0x0008 - 0x0000)
struct TgfWidgetGamepadWrapper_InitWrapper final
{
public:
	class UUserWidget*                            Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetGamepadWrapper_InitWrapper) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapper_InitWrapper");
static_assert(sizeof(TgfWidgetGamepadWrapper_InitWrapper) == 0x000008, "Wrong size on TgfWidgetGamepadWrapper_InitWrapper");
static_assert(offsetof(TgfWidgetGamepadWrapper_InitWrapper, Owner) == 0x000000, "Member 'TgfWidgetGamepadWrapper_InitWrapper::Owner' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.RemoveCanFocusedWidget
// 0x0010 (0x0010 - 0x0000)
struct TgfWidgetGamepadWrapper_RemoveCanFocusedWidget final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIdx;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfWidgetGamepadWrapper_RemoveCanFocusedWidget) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapper_RemoveCanFocusedWidget");
static_assert(sizeof(TgfWidgetGamepadWrapper_RemoveCanFocusedWidget) == 0x000010, "Wrong size on TgfWidgetGamepadWrapper_RemoveCanFocusedWidget");
static_assert(offsetof(TgfWidgetGamepadWrapper_RemoveCanFocusedWidget, UserWidget) == 0x000000, "Member 'TgfWidgetGamepadWrapper_RemoveCanFocusedWidget::UserWidget' has a wrong offset!");
static_assert(offsetof(TgfWidgetGamepadWrapper_RemoveCanFocusedWidget, PageIdx) == 0x000008, "Member 'TgfWidgetGamepadWrapper_RemoveCanFocusedWidget::PageIdx' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.RemoveDebugPoints
// 0x0008 (0x0008 - 0x0000)
struct TgfWidgetGamepadWrapper_RemoveDebugPoints final
{
public:
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetGamepadWrapper_RemoveDebugPoints) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapper_RemoveDebugPoints");
static_assert(sizeof(TgfWidgetGamepadWrapper_RemoveDebugPoints) == 0x000008, "Wrong size on TgfWidgetGamepadWrapper_RemoveDebugPoints");
static_assert(offsetof(TgfWidgetGamepadWrapper_RemoveDebugPoints, WidgetClass) == 0x000000, "Member 'TgfWidgetGamepadWrapper_RemoveDebugPoints::WidgetClass' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.ShowDebugPoints
// 0x0008 (0x0008 - 0x0000)
struct TgfWidgetGamepadWrapper_ShowDebugPoints final
{
public:
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetGamepadWrapper_ShowDebugPoints) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapper_ShowDebugPoints");
static_assert(sizeof(TgfWidgetGamepadWrapper_ShowDebugPoints) == 0x000008, "Wrong size on TgfWidgetGamepadWrapper_ShowDebugPoints");
static_assert(offsetof(TgfWidgetGamepadWrapper_ShowDebugPoints, WidgetClass) == 0x000000, "Member 'TgfWidgetGamepadWrapper_ShowDebugPoints::WidgetClass' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.GetCommonInputSubsystem
// 0x0008 (0x0008 - 0x0000)
struct TgfWidgetGamepadWrapper_GetCommonInputSubsystem final
{
public:
	class UCommonInputSubsystem*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetGamepadWrapper_GetCommonInputSubsystem) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapper_GetCommonInputSubsystem");
static_assert(sizeof(TgfWidgetGamepadWrapper_GetCommonInputSubsystem) == 0x000008, "Wrong size on TgfWidgetGamepadWrapper_GetCommonInputSubsystem");
static_assert(offsetof(TgfWidgetGamepadWrapper_GetCommonInputSubsystem, ReturnValue) == 0x000000, "Member 'TgfWidgetGamepadWrapper_GetCommonInputSubsystem::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapper.GetCurrentInputType
// 0x0001 (0x0001 - 0x0000)
struct TgfWidgetGamepadWrapper_GetCurrentInputType final
{
public:
	ECommonInputType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetGamepadWrapper_GetCurrentInputType) == 0x000001, "Wrong alignment on TgfWidgetGamepadWrapper_GetCurrentInputType");
static_assert(sizeof(TgfWidgetGamepadWrapper_GetCurrentInputType) == 0x000001, "Wrong size on TgfWidgetGamepadWrapper_GetCurrentInputType");
static_assert(offsetof(TgfWidgetGamepadWrapper_GetCurrentInputType, ReturnValue) == 0x000000, "Member 'TgfWidgetGamepadWrapper_GetCurrentInputType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWidgetGamepadWrapperLibrary.CreateWidgetGamepadWrapper
// 0x0010 (0x0010 - 0x0000)
struct TgfWidgetGamepadWrapperLibrary_CreateWidgetGamepadWrapper final
{
public:
	class UUserWidget*                            Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTgfWidgetGamepadWrapper*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWidgetGamepadWrapperLibrary_CreateWidgetGamepadWrapper) == 0x000008, "Wrong alignment on TgfWidgetGamepadWrapperLibrary_CreateWidgetGamepadWrapper");
static_assert(sizeof(TgfWidgetGamepadWrapperLibrary_CreateWidgetGamepadWrapper) == 0x000010, "Wrong size on TgfWidgetGamepadWrapperLibrary_CreateWidgetGamepadWrapper");
static_assert(offsetof(TgfWidgetGamepadWrapperLibrary_CreateWidgetGamepadWrapper, Owner) == 0x000000, "Member 'TgfWidgetGamepadWrapperLibrary_CreateWidgetGamepadWrapper::Owner' has a wrong offset!");
static_assert(offsetof(TgfWidgetGamepadWrapperLibrary_CreateWidgetGamepadWrapper, ReturnValue) == 0x000008, "Member 'TgfWidgetGamepadWrapperLibrary_CreateWidgetGamepadWrapper::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility_Death.StartDeath
// 0x00F0 (0x00F0 - 0x0000)
struct LyraGameplayAbility_Death_StartDeath final
{
public:
	EAnimConfigDirection                          DeathDirection;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0008(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_Death_StartDeath) == 0x000008, "Wrong alignment on LyraGameplayAbility_Death_StartDeath");
static_assert(sizeof(LyraGameplayAbility_Death_StartDeath) == 0x0000F0, "Wrong size on LyraGameplayAbility_Death_StartDeath");
static_assert(offsetof(LyraGameplayAbility_Death_StartDeath, DeathDirection) == 0x000000, "Member 'LyraGameplayAbility_Death_StartDeath::DeathDirection' has a wrong offset!");
static_assert(offsetof(LyraGameplayAbility_Death_StartDeath, HitResult) == 0x000008, "Member 'LyraGameplayAbility_Death_StartDeath::HitResult' has a wrong offset!");

// Function LyraGame.TgfGameplayCueNotify_BurstLatent.OnTgfBurst
// 0x0110 (0x0110 - 0x0000)
struct TgfGameplayCueNotify_BurstLatent_OnTgfBurst final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTgfGameplayCueNotify_SpawnResult      TgfSpawnResults;                                   // 0x00E8(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedCulling;                                       // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x0109(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayCueNotify_BurstLatent_OnTgfBurst) == 0x000008, "Wrong alignment on TgfGameplayCueNotify_BurstLatent_OnTgfBurst");
static_assert(sizeof(TgfGameplayCueNotify_BurstLatent_OnTgfBurst) == 0x000110, "Wrong size on TgfGameplayCueNotify_BurstLatent_OnTgfBurst");
static_assert(offsetof(TgfGameplayCueNotify_BurstLatent_OnTgfBurst, Target) == 0x000000, "Member 'TgfGameplayCueNotify_BurstLatent_OnTgfBurst::Target' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_BurstLatent_OnTgfBurst, Parameters) == 0x000008, "Member 'TgfGameplayCueNotify_BurstLatent_OnTgfBurst::Parameters' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_BurstLatent_OnTgfBurst, TgfSpawnResults) == 0x0000E8, "Member 'TgfGameplayCueNotify_BurstLatent_OnTgfBurst::TgfSpawnResults' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_BurstLatent_OnTgfBurst, NeedCulling) == 0x000108, "Member 'TgfGameplayCueNotify_BurstLatent_OnTgfBurst::NeedCulling' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_BurstLatent_OnTgfBurst, SurfaceType) == 0x000109, "Member 'TgfGameplayCueNotify_BurstLatent_OnTgfBurst::SurfaceType' has a wrong offset!");

// Function LyraGame.TgfGameplayCueNotify_BurstLatent.PrintRecord
// 0x00F8 (0x00F8 - 0x0000)
struct TgfGameplayCueNotify_BurstLatent_PrintRecord final
{
public:
	class FString                                 TagString;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0018(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayCueNotify_BurstLatent_PrintRecord) == 0x000008, "Wrong alignment on TgfGameplayCueNotify_BurstLatent_PrintRecord");
static_assert(sizeof(TgfGameplayCueNotify_BurstLatent_PrintRecord) == 0x0000F8, "Wrong size on TgfGameplayCueNotify_BurstLatent_PrintRecord");
static_assert(offsetof(TgfGameplayCueNotify_BurstLatent_PrintRecord, TagString) == 0x000000, "Member 'TgfGameplayCueNotify_BurstLatent_PrintRecord::TagString' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_BurstLatent_PrintRecord, Target) == 0x000010, "Member 'TgfGameplayCueNotify_BurstLatent_PrintRecord::Target' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_BurstLatent_PrintRecord, Parameters) == 0x000018, "Member 'TgfGameplayCueNotify_BurstLatent_PrintRecord::Parameters' has a wrong offset!");

// Function LyraGame.TgfGameplayCueNotify_BurstLatent.ShouldPlayGameplayCue
// 0x00E8 (0x00E8 - 0x0000)
struct TgfGameplayCueNotify_BurstLatent_ShouldPlayGameplayCue final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfGameplayCueNotify_BurstLatent_ShouldPlayGameplayCue) == 0x000008, "Wrong alignment on TgfGameplayCueNotify_BurstLatent_ShouldPlayGameplayCue");
static_assert(sizeof(TgfGameplayCueNotify_BurstLatent_ShouldPlayGameplayCue) == 0x0000E8, "Wrong size on TgfGameplayCueNotify_BurstLatent_ShouldPlayGameplayCue");
static_assert(offsetof(TgfGameplayCueNotify_BurstLatent_ShouldPlayGameplayCue, Parameters) == 0x000000, "Member 'TgfGameplayCueNotify_BurstLatent_ShouldPlayGameplayCue::Parameters' has a wrong offset!");
static_assert(offsetof(TgfGameplayCueNotify_BurstLatent_ShouldPlayGameplayCue, ReturnValue) == 0x0000E0, "Member 'TgfGameplayCueNotify_BurstLatent_ShouldPlayGameplayCue::ReturnValue' has a wrong offset!");

// Function LyraGame.AbilityTask_WaitForInteractableTargets_SingleLineTrace.WaitForInteractableTargets_SingleLineTrace
// 0x0110 (0x0110 - 0x0000)
struct AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractionQuery                      Param_InteractionQuery;                            // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	struct FCollisionProfileName                  TraceProfile;                                      // 0x0040(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetingLocationInfo  Param_StartLocation;                               // 0x0050(0x00A0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         InteractionScanRange;                              // 0x00F0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionScanRate;                               // 0x00F4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebug;                                        // 0x00F8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitForInteractableTargets_SingleLineTrace* ReturnValue;                                       // 0x0100(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace) == 0x000010, "Wrong alignment on AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace");
static_assert(sizeof(AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace) == 0x000110, "Wrong size on AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace, Param_InteractionQuery) == 0x000008, "Member 'AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace::Param_InteractionQuery' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace, TraceProfile) == 0x000040, "Member 'AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace::TraceProfile' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace, Param_StartLocation) == 0x000050, "Member 'AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace::Param_StartLocation' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace, InteractionScanRange) == 0x0000F0, "Member 'AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace::InteractionScanRange' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace, InteractionScanRate) == 0x0000F4, "Member 'AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace::InteractionScanRate' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace, bShowDebug) == 0x0000F8, "Member 'AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace::bShowDebug' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace, ReturnValue) == 0x000100, "Member 'AbilityTask_WaitForInteractableTargets_SingleLineTrace_WaitForInteractableTargets_SingleLineTrace::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCombatSet.OnRep_BaseDamage
// 0x0010 (0x0010 - 0x0000)
struct LyraCombatSet_OnRep_BaseDamage final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCombatSet_OnRep_BaseDamage) == 0x000008, "Wrong alignment on LyraCombatSet_OnRep_BaseDamage");
static_assert(sizeof(LyraCombatSet_OnRep_BaseDamage) == 0x000010, "Wrong size on LyraCombatSet_OnRep_BaseDamage");
static_assert(offsetof(LyraCombatSet_OnRep_BaseDamage, OldValue) == 0x000000, "Member 'LyraCombatSet_OnRep_BaseDamage::OldValue' has a wrong offset!");

// Function LyraGame.LyraCombatSet.OnRep_BaseHeal
// 0x0010 (0x0010 - 0x0000)
struct LyraCombatSet_OnRep_BaseHeal final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCombatSet_OnRep_BaseHeal) == 0x000008, "Wrong alignment on LyraCombatSet_OnRep_BaseHeal");
static_assert(sizeof(LyraCombatSet_OnRep_BaseHeal) == 0x000010, "Wrong size on LyraCombatSet_OnRep_BaseHeal");
static_assert(offsetof(LyraCombatSet_OnRep_BaseHeal, OldValue) == 0x000000, "Member 'LyraCombatSet_OnRep_BaseHeal::OldValue' has a wrong offset!");

// Function LyraGame.LyraHealthSet.OnRep_Health
// 0x0010 (0x0010 - 0x0000)
struct LyraHealthSet_OnRep_Health final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHealthSet_OnRep_Health) == 0x000008, "Wrong alignment on LyraHealthSet_OnRep_Health");
static_assert(sizeof(LyraHealthSet_OnRep_Health) == 0x000010, "Wrong size on LyraHealthSet_OnRep_Health");
static_assert(offsetof(LyraHealthSet_OnRep_Health, OldValue) == 0x000000, "Member 'LyraHealthSet_OnRep_Health::OldValue' has a wrong offset!");

// Function LyraGame.LyraHealthSet.OnRep_MaxHealth
// 0x0010 (0x0010 - 0x0000)
struct LyraHealthSet_OnRep_MaxHealth final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHealthSet_OnRep_MaxHealth) == 0x000008, "Wrong alignment on LyraHealthSet_OnRep_MaxHealth");
static_assert(sizeof(LyraHealthSet_OnRep_MaxHealth) == 0x000010, "Wrong size on LyraHealthSet_OnRep_MaxHealth");
static_assert(offsetof(LyraHealthSet_OnRep_MaxHealth, OldValue) == 0x000000, "Member 'LyraHealthSet_OnRep_MaxHealth::OldValue' has a wrong offset!");

// Function LyraGame.LyraMovementSet.OnRep_MoveSpeed
// 0x0010 (0x0010 - 0x0000)
struct LyraMovementSet_OnRep_MoveSpeed final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraMovementSet_OnRep_MoveSpeed) == 0x000008, "Wrong alignment on LyraMovementSet_OnRep_MoveSpeed");
static_assert(sizeof(LyraMovementSet_OnRep_MoveSpeed) == 0x000010, "Wrong size on LyraMovementSet_OnRep_MoveSpeed");
static_assert(offsetof(LyraMovementSet_OnRep_MoveSpeed, OldValue) == 0x000000, "Member 'LyraMovementSet_OnRep_MoveSpeed::OldValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.ApplyAngleSpeedBaseMod
// 0x0004 (0x0004 - 0x0000)
struct TgfAIAttributeSet_ApplyAngleSpeedBaseMod final
{
public:
	float                                         Mod;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_ApplyAngleSpeedBaseMod) == 0x000004, "Wrong alignment on TgfAIAttributeSet_ApplyAngleSpeedBaseMod");
static_assert(sizeof(TgfAIAttributeSet_ApplyAngleSpeedBaseMod) == 0x000004, "Wrong size on TgfAIAttributeSet_ApplyAngleSpeedBaseMod");
static_assert(offsetof(TgfAIAttributeSet_ApplyAngleSpeedBaseMod, Mod) == 0x000000, "Member 'TgfAIAttributeSet_ApplyAngleSpeedBaseMod::Mod' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.OnRep_AngleSpeedBase
// 0x0010 (0x0010 - 0x0000)
struct TgfAIAttributeSet_OnRep_AngleSpeedBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_OnRep_AngleSpeedBase) == 0x000008, "Wrong alignment on TgfAIAttributeSet_OnRep_AngleSpeedBase");
static_assert(sizeof(TgfAIAttributeSet_OnRep_AngleSpeedBase) == 0x000010, "Wrong size on TgfAIAttributeSet_OnRep_AngleSpeedBase");
static_assert(offsetof(TgfAIAttributeSet_OnRep_AngleSpeedBase, OldValue) == 0x000000, "Member 'TgfAIAttributeSet_OnRep_AngleSpeedBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.OnRep_AngleSpeedPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfAIAttributeSet_OnRep_AngleSpeedPercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_OnRep_AngleSpeedPercent) == 0x000008, "Wrong alignment on TgfAIAttributeSet_OnRep_AngleSpeedPercent");
static_assert(sizeof(TgfAIAttributeSet_OnRep_AngleSpeedPercent) == 0x000010, "Wrong size on TgfAIAttributeSet_OnRep_AngleSpeedPercent");
static_assert(offsetof(TgfAIAttributeSet_OnRep_AngleSpeedPercent, OldValue) == 0x000000, "Member 'TgfAIAttributeSet_OnRep_AngleSpeedPercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.OnRep_HearingDistanceBase
// 0x0010 (0x0010 - 0x0000)
struct TgfAIAttributeSet_OnRep_HearingDistanceBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_OnRep_HearingDistanceBase) == 0x000008, "Wrong alignment on TgfAIAttributeSet_OnRep_HearingDistanceBase");
static_assert(sizeof(TgfAIAttributeSet_OnRep_HearingDistanceBase) == 0x000010, "Wrong size on TgfAIAttributeSet_OnRep_HearingDistanceBase");
static_assert(offsetof(TgfAIAttributeSet_OnRep_HearingDistanceBase, OldValue) == 0x000000, "Member 'TgfAIAttributeSet_OnRep_HearingDistanceBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.OnRep_HearingDistancePercent
// 0x0010 (0x0010 - 0x0000)
struct TgfAIAttributeSet_OnRep_HearingDistancePercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_OnRep_HearingDistancePercent) == 0x000008, "Wrong alignment on TgfAIAttributeSet_OnRep_HearingDistancePercent");
static_assert(sizeof(TgfAIAttributeSet_OnRep_HearingDistancePercent) == 0x000010, "Wrong size on TgfAIAttributeSet_OnRep_HearingDistancePercent");
static_assert(offsetof(TgfAIAttributeSet_OnRep_HearingDistancePercent, OldValue) == 0x000000, "Member 'TgfAIAttributeSet_OnRep_HearingDistancePercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.OnRep_LightDistanceBase
// 0x0010 (0x0010 - 0x0000)
struct TgfAIAttributeSet_OnRep_LightDistanceBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_OnRep_LightDistanceBase) == 0x000008, "Wrong alignment on TgfAIAttributeSet_OnRep_LightDistanceBase");
static_assert(sizeof(TgfAIAttributeSet_OnRep_LightDistanceBase) == 0x000010, "Wrong size on TgfAIAttributeSet_OnRep_LightDistanceBase");
static_assert(offsetof(TgfAIAttributeSet_OnRep_LightDistanceBase, OldValue) == 0x000000, "Member 'TgfAIAttributeSet_OnRep_LightDistanceBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.OnRep_LightDistancePercent
// 0x0010 (0x0010 - 0x0000)
struct TgfAIAttributeSet_OnRep_LightDistancePercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_OnRep_LightDistancePercent) == 0x000008, "Wrong alignment on TgfAIAttributeSet_OnRep_LightDistancePercent");
static_assert(sizeof(TgfAIAttributeSet_OnRep_LightDistancePercent) == 0x000010, "Wrong size on TgfAIAttributeSet_OnRep_LightDistancePercent");
static_assert(offsetof(TgfAIAttributeSet_OnRep_LightDistancePercent, OldValue) == 0x000000, "Member 'TgfAIAttributeSet_OnRep_LightDistancePercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.OnRep_SightDistanceBase
// 0x0010 (0x0010 - 0x0000)
struct TgfAIAttributeSet_OnRep_SightDistanceBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_OnRep_SightDistanceBase) == 0x000008, "Wrong alignment on TgfAIAttributeSet_OnRep_SightDistanceBase");
static_assert(sizeof(TgfAIAttributeSet_OnRep_SightDistanceBase) == 0x000010, "Wrong size on TgfAIAttributeSet_OnRep_SightDistanceBase");
static_assert(offsetof(TgfAIAttributeSet_OnRep_SightDistanceBase, OldValue) == 0x000000, "Member 'TgfAIAttributeSet_OnRep_SightDistanceBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.OnRep_SightDistancePercent
// 0x0010 (0x0010 - 0x0000)
struct TgfAIAttributeSet_OnRep_SightDistancePercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_OnRep_SightDistancePercent) == 0x000008, "Wrong alignment on TgfAIAttributeSet_OnRep_SightDistancePercent");
static_assert(sizeof(TgfAIAttributeSet_OnRep_SightDistancePercent) == 0x000010, "Wrong size on TgfAIAttributeSet_OnRep_SightDistancePercent");
static_assert(offsetof(TgfAIAttributeSet_OnRep_SightDistancePercent, OldValue) == 0x000000, "Member 'TgfAIAttributeSet_OnRep_SightDistancePercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.GetAngleSpeedFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfAIAttributeSet_GetAngleSpeedFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_GetAngleSpeedFinal) == 0x000004, "Wrong alignment on TgfAIAttributeSet_GetAngleSpeedFinal");
static_assert(sizeof(TgfAIAttributeSet_GetAngleSpeedFinal) == 0x000004, "Wrong size on TgfAIAttributeSet_GetAngleSpeedFinal");
static_assert(offsetof(TgfAIAttributeSet_GetAngleSpeedFinal, ReturnValue) == 0x000000, "Member 'TgfAIAttributeSet_GetAngleSpeedFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.GetHearingDistanceFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfAIAttributeSet_GetHearingDistanceFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_GetHearingDistanceFinal) == 0x000004, "Wrong alignment on TgfAIAttributeSet_GetHearingDistanceFinal");
static_assert(sizeof(TgfAIAttributeSet_GetHearingDistanceFinal) == 0x000004, "Wrong size on TgfAIAttributeSet_GetHearingDistanceFinal");
static_assert(offsetof(TgfAIAttributeSet_GetHearingDistanceFinal, ReturnValue) == 0x000000, "Member 'TgfAIAttributeSet_GetHearingDistanceFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.GetLightDistanceFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfAIAttributeSet_GetLightDistanceFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_GetLightDistanceFinal) == 0x000004, "Wrong alignment on TgfAIAttributeSet_GetLightDistanceFinal");
static_assert(sizeof(TgfAIAttributeSet_GetLightDistanceFinal) == 0x000004, "Wrong size on TgfAIAttributeSet_GetLightDistanceFinal");
static_assert(offsetof(TgfAIAttributeSet_GetLightDistanceFinal, ReturnValue) == 0x000000, "Member 'TgfAIAttributeSet_GetLightDistanceFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAIAttributeSet.GetSightDistanceFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfAIAttributeSet_GetSightDistanceFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAIAttributeSet_GetSightDistanceFinal) == 0x000004, "Wrong alignment on TgfAIAttributeSet_GetSightDistanceFinal");
static_assert(sizeof(TgfAIAttributeSet_GetSightDistanceFinal) == 0x000004, "Wrong size on TgfAIAttributeSet_GetSightDistanceFinal");
static_assert(offsetof(TgfAIAttributeSet_GetSightDistanceFinal, ReturnValue) == 0x000000, "Member 'TgfAIAttributeSet_GetSightDistanceFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_AdditionalAttackWeight
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_AdditionalAttackWeight final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_AdditionalAttackWeight) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_AdditionalAttackWeight");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_AdditionalAttackWeight) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_AdditionalAttackWeight");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_AdditionalAttackWeight, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_AdditionalAttackWeight::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_AdditionalAttGearLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_AdditionalAttGearLevel final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_AdditionalAttGearLevel) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_AdditionalAttGearLevel");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_AdditionalAttGearLevel) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_AdditionalAttGearLevel");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_AdditionalAttGearLevel, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_AdditionalAttGearLevel::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_AdditionalWeaponAttack
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_AdditionalWeaponAttack final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_AdditionalWeaponAttack) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_AdditionalWeaponAttack");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_AdditionalWeaponAttack) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_AdditionalWeaponAttack");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_AdditionalWeaponAttack, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_AdditionalWeaponAttack::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_AttackBonus
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_AttackBonus final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_AttackBonus) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_AttackBonus");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_AttackBonus) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_AttackBonus");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_AttackBonus, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_AttackBonus::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_AttackBoostRate
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_AttackBoostRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_AttackBoostRate) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_AttackBoostRate");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_AttackBoostRate) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_AttackBoostRate");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_AttackBoostRate, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_AttackBoostRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_CritDamageRate
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_CritDamageRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_CritDamageRate) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_CritDamageRate");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_CritDamageRate) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_CritDamageRate");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_CritDamageRate, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_CritDamageRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_CriticalRate
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_CriticalRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_CriticalRate) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_CriticalRate");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_CriticalRate) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_CriticalRate");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_CriticalRate, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_CriticalRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_DefIgnoreBase
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_DefIgnoreBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_DefIgnoreBase) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_DefIgnoreBase");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_DefIgnoreBase) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_DefIgnoreBase");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_DefIgnoreBase, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_DefIgnoreBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_DefIgnorePercent
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_DefIgnorePercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_DefIgnorePercent) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_DefIgnorePercent");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_DefIgnorePercent) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_DefIgnorePercent");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_DefIgnorePercent, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_DefIgnorePercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementBoostRateDark
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementBoostRateDark final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementBoostRateDark) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementBoostRateDark");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementBoostRateDark) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementBoostRateDark");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementBoostRateDark, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementBoostRateDark::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementBoostRateFire
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementBoostRateFire final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementBoostRateFire) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementBoostRateFire");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementBoostRateFire) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementBoostRateFire");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementBoostRateFire, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementBoostRateFire::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementBoostRateIce
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementBoostRateIce final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementBoostRateIce) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementBoostRateIce");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementBoostRateIce) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementBoostRateIce");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementBoostRateIce, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementBoostRateIce::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementBoostRateLight
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementBoostRateLight final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementBoostRateLight) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementBoostRateLight");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementBoostRateLight) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementBoostRateLight");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementBoostRateLight, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementBoostRateLight::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementBoostRateNone
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementBoostRateNone final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementBoostRateNone) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementBoostRateNone");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementBoostRateNone) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementBoostRateNone");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementBoostRateNone, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementBoostRateNone::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementBoostRateThunder
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementBoostRateThunder final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementBoostRateThunder) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementBoostRateThunder");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementBoostRateThunder) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementBoostRateThunder");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementBoostRateThunder, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementBoostRateThunder::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementResPierceDark
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementResPierceDark final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementResPierceDark) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementResPierceDark");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementResPierceDark) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementResPierceDark");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementResPierceDark, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementResPierceDark::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementResPierceFire
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementResPierceFire final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementResPierceFire) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementResPierceFire");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementResPierceFire) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementResPierceFire");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementResPierceFire, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementResPierceFire::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementResPierceIce
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementResPierceIce final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementResPierceIce) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementResPierceIce");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementResPierceIce) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementResPierceIce");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementResPierceIce, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementResPierceIce::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementResPierceLight
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementResPierceLight final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementResPierceLight) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementResPierceLight");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementResPierceLight) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementResPierceLight");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementResPierceLight, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementResPierceLight::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementResPierceNone
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementResPierceNone final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementResPierceNone) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementResPierceNone");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementResPierceNone) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementResPierceNone");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementResPierceNone, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementResPierceNone::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ElementResPierceThunder
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ElementResPierceThunder final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ElementResPierceThunder) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ElementResPierceThunder");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ElementResPierceThunder) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ElementResPierceThunder");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ElementResPierceThunder, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ElementResPierceThunder::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_EliteBoostRate
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_EliteBoostRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_EliteBoostRate) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_EliteBoostRate");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_EliteBoostRate) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_EliteBoostRate");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_EliteBoostRate, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_EliteBoostRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_ExtraAttGearLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_ExtraAttGearLevel final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_ExtraAttGearLevel) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_ExtraAttGearLevel");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_ExtraAttGearLevel) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_ExtraAttGearLevel");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_ExtraAttGearLevel, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_ExtraAttGearLevel::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_LeftAttackWeight
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_LeftAttackWeight final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_LeftAttackWeight) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_LeftAttackWeight");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_LeftAttackWeight) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_LeftAttackWeight");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_LeftAttackWeight, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_LeftAttackWeight::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_LeftAttGearLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_LeftAttGearLevel final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_LeftAttGearLevel) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_LeftAttGearLevel");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_LeftAttGearLevel) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_LeftAttGearLevel");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_LeftAttGearLevel, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_LeftAttGearLevel::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_LeftWeaponAttack
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_LeftWeaponAttack final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_LeftWeaponAttack) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_LeftWeaponAttack");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_LeftWeaponAttack) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_LeftWeaponAttack");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_LeftWeaponAttack, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_LeftWeaponAttack::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_MoveFactorRate
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_MoveFactorRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_MoveFactorRate) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_MoveFactorRate");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_MoveFactorRate) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_MoveFactorRate");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_MoveFactorRate, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_MoveFactorRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_RightAttackWeight
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_RightAttackWeight final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_RightAttackWeight) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_RightAttackWeight");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_RightAttackWeight) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_RightAttackWeight");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_RightAttackWeight, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_RightAttackWeight::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_RightAttGearLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_RightAttGearLevel final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_RightAttGearLevel) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_RightAttGearLevel");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_RightAttGearLevel) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_RightAttGearLevel");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_RightAttGearLevel, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_RightAttGearLevel::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_RightWeaponAttack
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_RightWeaponAttack final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_RightWeaponAttack) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_RightWeaponAttack");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_RightWeaponAttack) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_RightWeaponAttack");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_RightWeaponAttack, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_RightWeaponAttack::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_SkillBoostRate
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_SkillBoostRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_SkillBoostRate) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_SkillBoostRate");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_SkillBoostRate) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_SkillBoostRate");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_SkillBoostRate, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_SkillBoostRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.OnRep_UncontrolledBoostRate
// 0x0010 (0x0010 - 0x0000)
struct TgfAttackAttributeSet_OnRep_UncontrolledBoostRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_OnRep_UncontrolledBoostRate) == 0x000008, "Wrong alignment on TgfAttackAttributeSet_OnRep_UncontrolledBoostRate");
static_assert(sizeof(TgfAttackAttributeSet_OnRep_UncontrolledBoostRate) == 0x000010, "Wrong size on TgfAttackAttributeSet_OnRep_UncontrolledBoostRate");
static_assert(offsetof(TgfAttackAttributeSet_OnRep_UncontrolledBoostRate, OldValue) == 0x000000, "Member 'TgfAttackAttributeSet_OnRep_UncontrolledBoostRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.GetAttackWeightWithAnim
// 0x0008 (0x0008 - 0x0000)
struct TgfAttackAttributeSet_GetAttackWeightWithAnim final
{
public:
	ETgfUseAttackType                             AttackType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_GetAttackWeightWithAnim) == 0x000004, "Wrong alignment on TgfAttackAttributeSet_GetAttackWeightWithAnim");
static_assert(sizeof(TgfAttackAttributeSet_GetAttackWeightWithAnim) == 0x000008, "Wrong size on TgfAttackAttributeSet_GetAttackWeightWithAnim");
static_assert(offsetof(TgfAttackAttributeSet_GetAttackWeightWithAnim, AttackType) == 0x000000, "Member 'TgfAttackAttributeSet_GetAttackWeightWithAnim::AttackType' has a wrong offset!");
static_assert(offsetof(TgfAttackAttributeSet_GetAttackWeightWithAnim, ReturnValue) == 0x000004, "Member 'TgfAttackAttributeSet_GetAttackWeightWithAnim::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.GetAttGearLevel
// 0x0008 (0x0008 - 0x0000)
struct TgfAttackAttributeSet_GetAttGearLevel final
{
public:
	ETgfUseAttackType                             AttackType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_GetAttGearLevel) == 0x000004, "Wrong alignment on TgfAttackAttributeSet_GetAttGearLevel");
static_assert(sizeof(TgfAttackAttributeSet_GetAttGearLevel) == 0x000008, "Wrong size on TgfAttackAttributeSet_GetAttGearLevel");
static_assert(offsetof(TgfAttackAttributeSet_GetAttGearLevel, AttackType) == 0x000000, "Member 'TgfAttackAttributeSet_GetAttGearLevel::AttackType' has a wrong offset!");
static_assert(offsetof(TgfAttackAttributeSet_GetAttGearLevel, ReturnValue) == 0x000004, "Member 'TgfAttackAttributeSet_GetAttGearLevel::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.GetDefIgnoreFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfAttackAttributeSet_GetDefIgnoreFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_GetDefIgnoreFinal) == 0x000004, "Wrong alignment on TgfAttackAttributeSet_GetDefIgnoreFinal");
static_assert(sizeof(TgfAttackAttributeSet_GetDefIgnoreFinal) == 0x000004, "Wrong size on TgfAttackAttributeSet_GetDefIgnoreFinal");
static_assert(offsetof(TgfAttackAttributeSet_GetDefIgnoreFinal, ReturnValue) == 0x000000, "Member 'TgfAttackAttributeSet_GetDefIgnoreFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.GetElementBoostRate
// 0x0008 (0x0008 - 0x0000)
struct TgfAttackAttributeSet_GetElementBoostRate final
{
public:
	ETgfBattleElement                             Element;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_GetElementBoostRate) == 0x000004, "Wrong alignment on TgfAttackAttributeSet_GetElementBoostRate");
static_assert(sizeof(TgfAttackAttributeSet_GetElementBoostRate) == 0x000008, "Wrong size on TgfAttackAttributeSet_GetElementBoostRate");
static_assert(offsetof(TgfAttackAttributeSet_GetElementBoostRate, Element) == 0x000000, "Member 'TgfAttackAttributeSet_GetElementBoostRate::Element' has a wrong offset!");
static_assert(offsetof(TgfAttackAttributeSet_GetElementBoostRate, ReturnValue) == 0x000004, "Member 'TgfAttackAttributeSet_GetElementBoostRate::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.GetElementResPierce
// 0x0008 (0x0008 - 0x0000)
struct TgfAttackAttributeSet_GetElementResPierce final
{
public:
	ETgfBattleElement                             Element;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_GetElementResPierce) == 0x000004, "Wrong alignment on TgfAttackAttributeSet_GetElementResPierce");
static_assert(sizeof(TgfAttackAttributeSet_GetElementResPierce) == 0x000008, "Wrong size on TgfAttackAttributeSet_GetElementResPierce");
static_assert(offsetof(TgfAttackAttributeSet_GetElementResPierce, Element) == 0x000000, "Member 'TgfAttackAttributeSet_GetElementResPierce::Element' has a wrong offset!");
static_assert(offsetof(TgfAttackAttributeSet_GetElementResPierce, ReturnValue) == 0x000004, "Member 'TgfAttackAttributeSet_GetElementResPierce::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAttackAttributeSet.GetWeaponAttack
// 0x0008 (0x0008 - 0x0000)
struct TgfAttackAttributeSet_GetWeaponAttack final
{
public:
	ETgfUseAttackType                             AttackType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAttackAttributeSet_GetWeaponAttack) == 0x000004, "Wrong alignment on TgfAttackAttributeSet_GetWeaponAttack");
static_assert(sizeof(TgfAttackAttributeSet_GetWeaponAttack) == 0x000008, "Wrong size on TgfAttackAttributeSet_GetWeaponAttack");
static_assert(offsetof(TgfAttackAttributeSet_GetWeaponAttack, AttackType) == 0x000000, "Member 'TgfAttackAttributeSet_GetWeaponAttack::AttackType' has a wrong offset!");
static_assert(offsetof(TgfAttackAttributeSet_GetWeaponAttack, ReturnValue) == 0x000004, "Member 'TgfAttackAttributeSet_GetWeaponAttack::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_BloodingDamage
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_BloodingDamage final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_BloodingDamage) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_BloodingDamage");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_BloodingDamage) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_BloodingDamage");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_BloodingDamage, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_BloodingDamage::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_BloodingDurationBase
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_BloodingDurationBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_BloodingDurationBase) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_BloodingDurationBase");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_BloodingDurationBase) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_BloodingDurationBase");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_BloodingDurationBase, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_BloodingDurationBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_BloodingDurationPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_BloodingDurationPercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_BloodingDurationPercent) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_BloodingDurationPercent");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_BloodingDurationPercent) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_BloodingDurationPercent");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_BloodingDurationPercent, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_BloodingDurationPercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_BloodingIntervalBase
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_BloodingIntervalBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_BloodingIntervalBase) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_BloodingIntervalBase");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_BloodingIntervalBase) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_BloodingIntervalBase");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_BloodingIntervalBase, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_BloodingIntervalBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_BloodingIntervalPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_BloodingIntervalPercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_BloodingIntervalPercent) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_BloodingIntervalPercent");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_BloodingIntervalPercent) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_BloodingIntervalPercent");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_BloodingIntervalPercent, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_BloodingIntervalPercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_BurningDamage
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_BurningDamage final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_BurningDamage) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_BurningDamage");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_BurningDamage) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_BurningDamage");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_BurningDamage, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_BurningDamage::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_BurningIntervalBase
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_BurningIntervalBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_BurningIntervalBase) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_BurningIntervalBase");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_BurningIntervalBase) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_BurningIntervalBase");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_BurningIntervalBase, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_BurningIntervalBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_BurningIntervalPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_BurningIntervalPercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_BurningIntervalPercent) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_BurningIntervalPercent");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_BurningIntervalPercent) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_BurningIntervalPercent");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_BurningIntervalPercent, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_BurningIntervalPercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_BurningStack
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_BurningStack final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_BurningStack) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_BurningStack");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_BurningStack) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_BurningStack");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_BurningStack, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_BurningStack::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_FreezingDurationBase
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_FreezingDurationBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_FreezingDurationBase) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_FreezingDurationBase");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_FreezingDurationBase) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_FreezingDurationBase");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_FreezingDurationBase, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_FreezingDurationBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_FreezingDurationPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_FreezingDurationPercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_FreezingDurationPercent) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_FreezingDurationPercent");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_FreezingDurationPercent) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_FreezingDurationPercent");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_FreezingDurationPercent, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_FreezingDurationPercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_FreezingRateBase
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_FreezingRateBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_FreezingRateBase) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_FreezingRateBase");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_FreezingRateBase) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_FreezingRateBase");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_FreezingRateBase, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_FreezingRateBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_FreezingRatePercent
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_FreezingRatePercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_FreezingRatePercent) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_FreezingRatePercent");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_FreezingRatePercent) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_FreezingRatePercent");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_FreezingRatePercent, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_FreezingRatePercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_KillingMaxLayerAttackBoostRate
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_KillingMaxLayerAttackBoostRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_KillingMaxLayerAttackBoostRate) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_KillingMaxLayerAttackBoostRate");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_KillingMaxLayerAttackBoostRate) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_KillingMaxLayerAttackBoostRate");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_KillingMaxLayerAttackBoostRate, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_KillingMaxLayerAttackBoostRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_KillingMaxLayerCriticalRate
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_KillingMaxLayerCriticalRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_KillingMaxLayerCriticalRate) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_KillingMaxLayerCriticalRate");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_KillingMaxLayerCriticalRate) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_KillingMaxLayerCriticalRate");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_KillingMaxLayerCriticalRate, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_KillingMaxLayerCriticalRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.OnRep_KillingMaxLayerMaxHealthPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfBuffArgAttributeSet_OnRep_KillingMaxLayerMaxHealthPercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_OnRep_KillingMaxLayerMaxHealthPercent) == 0x000008, "Wrong alignment on TgfBuffArgAttributeSet_OnRep_KillingMaxLayerMaxHealthPercent");
static_assert(sizeof(TgfBuffArgAttributeSet_OnRep_KillingMaxLayerMaxHealthPercent) == 0x000010, "Wrong size on TgfBuffArgAttributeSet_OnRep_KillingMaxLayerMaxHealthPercent");
static_assert(offsetof(TgfBuffArgAttributeSet_OnRep_KillingMaxLayerMaxHealthPercent, OldValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_OnRep_KillingMaxLayerMaxHealthPercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.GetBloodingDurationFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfBuffArgAttributeSet_GetBloodingDurationFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_GetBloodingDurationFinal) == 0x000004, "Wrong alignment on TgfBuffArgAttributeSet_GetBloodingDurationFinal");
static_assert(sizeof(TgfBuffArgAttributeSet_GetBloodingDurationFinal) == 0x000004, "Wrong size on TgfBuffArgAttributeSet_GetBloodingDurationFinal");
static_assert(offsetof(TgfBuffArgAttributeSet_GetBloodingDurationFinal, ReturnValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_GetBloodingDurationFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.GetBloodingIntervalFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfBuffArgAttributeSet_GetBloodingIntervalFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_GetBloodingIntervalFinal) == 0x000004, "Wrong alignment on TgfBuffArgAttributeSet_GetBloodingIntervalFinal");
static_assert(sizeof(TgfBuffArgAttributeSet_GetBloodingIntervalFinal) == 0x000004, "Wrong size on TgfBuffArgAttributeSet_GetBloodingIntervalFinal");
static_assert(offsetof(TgfBuffArgAttributeSet_GetBloodingIntervalFinal, ReturnValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_GetBloodingIntervalFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.GetBurningIntervalFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfBuffArgAttributeSet_GetBurningIntervalFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_GetBurningIntervalFinal) == 0x000004, "Wrong alignment on TgfBuffArgAttributeSet_GetBurningIntervalFinal");
static_assert(sizeof(TgfBuffArgAttributeSet_GetBurningIntervalFinal) == 0x000004, "Wrong size on TgfBuffArgAttributeSet_GetBurningIntervalFinal");
static_assert(offsetof(TgfBuffArgAttributeSet_GetBurningIntervalFinal, ReturnValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_GetBurningIntervalFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.GetFreezingDurationFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfBuffArgAttributeSet_GetFreezingDurationFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_GetFreezingDurationFinal) == 0x000004, "Wrong alignment on TgfBuffArgAttributeSet_GetFreezingDurationFinal");
static_assert(sizeof(TgfBuffArgAttributeSet_GetFreezingDurationFinal) == 0x000004, "Wrong size on TgfBuffArgAttributeSet_GetFreezingDurationFinal");
static_assert(offsetof(TgfBuffArgAttributeSet_GetFreezingDurationFinal, ReturnValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_GetFreezingDurationFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBuffArgAttributeSet.GetFreezingRateFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfBuffArgAttributeSet_GetFreezingRateFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBuffArgAttributeSet_GetFreezingRateFinal) == 0x000004, "Wrong alignment on TgfBuffArgAttributeSet_GetFreezingRateFinal");
static_assert(sizeof(TgfBuffArgAttributeSet_GetFreezingRateFinal) == 0x000004, "Wrong size on TgfBuffArgAttributeSet_GetFreezingRateFinal");
static_assert(offsetof(TgfBuffArgAttributeSet_GetFreezingRateFinal, ReturnValue) == 0x000000, "Member 'TgfBuffArgAttributeSet_GetFreezingRateFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.InteractionStatics.GetActorFromInteractableTarget
// 0x0018 (0x0018 - 0x0000)
struct InteractionStatics_GetActorFromInteractableTarget final
{
public:
	TScriptInterface<class IInteractableTarget>   InteractableTarget;                                // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionStatics_GetActorFromInteractableTarget) == 0x000008, "Wrong alignment on InteractionStatics_GetActorFromInteractableTarget");
static_assert(sizeof(InteractionStatics_GetActorFromInteractableTarget) == 0x000018, "Wrong size on InteractionStatics_GetActorFromInteractableTarget");
static_assert(offsetof(InteractionStatics_GetActorFromInteractableTarget, InteractableTarget) == 0x000000, "Member 'InteractionStatics_GetActorFromInteractableTarget::InteractableTarget' has a wrong offset!");
static_assert(offsetof(InteractionStatics_GetActorFromInteractableTarget, ReturnValue) == 0x000010, "Member 'InteractionStatics_GetActorFromInteractableTarget::ReturnValue' has a wrong offset!");

// Function LyraGame.InteractionStatics.GetInteractableTargetsFromActor
// 0x0018 (0x0018 - 0x0000)
struct InteractionStatics_GetInteractableTargetsFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TScriptInterface<class IInteractableTarget>> OutInteractableTargets;                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionStatics_GetInteractableTargetsFromActor) == 0x000008, "Wrong alignment on InteractionStatics_GetInteractableTargetsFromActor");
static_assert(sizeof(InteractionStatics_GetInteractableTargetsFromActor) == 0x000018, "Wrong size on InteractionStatics_GetInteractableTargetsFromActor");
static_assert(offsetof(InteractionStatics_GetInteractableTargetsFromActor, Actor) == 0x000000, "Member 'InteractionStatics_GetInteractableTargetsFromActor::Actor' has a wrong offset!");
static_assert(offsetof(InteractionStatics_GetInteractableTargetsFromActor, OutInteractableTargets) == 0x000008, "Member 'InteractionStatics_GetInteractableTargetsFromActor::OutInteractableTargets' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_AddShield
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_AddShield final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_AddShield) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_AddShield");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_AddShield) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_AddShield");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_AddShield, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_AddShield::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_CalculatedShield
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_CalculatedShield final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_CalculatedShield) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_CalculatedShield");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_CalculatedShield) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_CalculatedShield");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_CalculatedShield, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_CalculatedShield::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_ChestDefGearLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_ChestDefGearLevel final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_ChestDefGearLevel) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_ChestDefGearLevel");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_ChestDefGearLevel) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_ChestDefGearLevel");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_ChestDefGearLevel, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_ChestDefGearLevel::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_CurHealth
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_CurHealth final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_CurHealth) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_CurHealth");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_CurHealth) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_CurHealth");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_CurHealth, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_CurHealth::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_CurShield
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_CurShield final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_CurShield) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_CurShield");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_CurShield) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_CurShield");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_CurShield, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_CurShield::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_DamageReduceRate
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_DamageReduceRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_DamageReduceRate) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_DamageReduceRate");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_DamageReduceRate) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_DamageReduceRate");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_DamageReduceRate, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_DamageReduceRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_DamageVulnerRate
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_DamageVulnerRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_DamageVulnerRate) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_DamageVulnerRate");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_DamageVulnerRate) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_DamageVulnerRate");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_DamageVulnerRate, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_DamageVulnerRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_DefaultDefendValue
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_DefaultDefendValue final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_DefaultDefendValue) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_DefaultDefendValue");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_DefaultDefendValue) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_DefaultDefendValue");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_DefaultDefendValue, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_DefaultDefendValue::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_ElementResistanceRateDark
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_ElementResistanceRateDark final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_ElementResistanceRateDark) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_ElementResistanceRateDark");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_ElementResistanceRateDark) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_ElementResistanceRateDark");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_ElementResistanceRateDark, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_ElementResistanceRateDark::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_ElementResistanceRateFire
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_ElementResistanceRateFire final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_ElementResistanceRateFire) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_ElementResistanceRateFire");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_ElementResistanceRateFire) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_ElementResistanceRateFire");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_ElementResistanceRateFire, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_ElementResistanceRateFire::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_ElementResistanceRateIce
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_ElementResistanceRateIce final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_ElementResistanceRateIce) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_ElementResistanceRateIce");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_ElementResistanceRateIce) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_ElementResistanceRateIce");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_ElementResistanceRateIce, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_ElementResistanceRateIce::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_ElementResistanceRateLight
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_ElementResistanceRateLight final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_ElementResistanceRateLight) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_ElementResistanceRateLight");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_ElementResistanceRateLight) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_ElementResistanceRateLight");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_ElementResistanceRateLight, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_ElementResistanceRateLight::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_ElementResistanceRateNone
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_ElementResistanceRateNone final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_ElementResistanceRateNone) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_ElementResistanceRateNone");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_ElementResistanceRateNone) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_ElementResistanceRateNone");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_ElementResistanceRateNone, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_ElementResistanceRateNone::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_ElementResistanceRateThunder
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_ElementResistanceRateThunder final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_ElementResistanceRateThunder) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_ElementResistanceRateThunder");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_ElementResistanceRateThunder) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_ElementResistanceRateThunder");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_ElementResistanceRateThunder, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_ElementResistanceRateThunder::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_EliteReduceRate
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_EliteReduceRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_EliteReduceRate) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_EliteReduceRate");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_EliteReduceRate) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_EliteReduceRate");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_EliteReduceRate, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_EliteReduceRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_ExtraDefGearLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_ExtraDefGearLevel final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_ExtraDefGearLevel) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_ExtraDefGearLevel");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_ExtraDefGearLevel) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_ExtraDefGearLevel");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_ExtraDefGearLevel, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_ExtraDefGearLevel::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_ExtraGuardedDamageReduceRate
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_ExtraGuardedDamageReduceRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_ExtraGuardedDamageReduceRate) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_ExtraGuardedDamageReduceRate");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_ExtraGuardedDamageReduceRate) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_ExtraGuardedDamageReduceRate");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_ExtraGuardedDamageReduceRate, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_ExtraGuardedDamageReduceRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_HelmetDefGearLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_HelmetDefGearLevel final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_HelmetDefGearLevel) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_HelmetDefGearLevel");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_HelmetDefGearLevel) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_HelmetDefGearLevel");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_HelmetDefGearLevel, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_HelmetDefGearLevel::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_LeftDefendValue
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_LeftDefendValue final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_LeftDefendValue) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_LeftDefendValue");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_LeftDefendValue) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_LeftDefendValue");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_LeftDefendValue, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_LeftDefendValue::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_LeftDefGearLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_LeftDefGearLevel final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_LeftDefGearLevel) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_LeftDefGearLevel");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_LeftDefGearLevel) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_LeftDefGearLevel");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_LeftDefGearLevel, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_LeftDefGearLevel::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_LeftGuardedDamageReduceRate
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_LeftGuardedDamageReduceRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_LeftGuardedDamageReduceRate) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_LeftGuardedDamageReduceRate");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_LeftGuardedDamageReduceRate) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_LeftGuardedDamageReduceRate");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_LeftGuardedDamageReduceRate, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_LeftGuardedDamageReduceRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_LeftShieldAngle
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_LeftShieldAngle final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_LeftShieldAngle) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_LeftShieldAngle");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_LeftShieldAngle) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_LeftShieldAngle");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_LeftShieldAngle, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_LeftShieldAngle::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_MaxHealthBase
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_MaxHealthBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_MaxHealthBase) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_MaxHealthBase");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_MaxHealthBase) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_MaxHealthBase");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_MaxHealthBase, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_MaxHealthBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_MaxHealthExtra
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_MaxHealthExtra final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_MaxHealthExtra) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_MaxHealthExtra");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_MaxHealthExtra) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_MaxHealthExtra");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_MaxHealthExtra, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_MaxHealthExtra::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_MaxHealthPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_MaxHealthPercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_MaxHealthPercent) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_MaxHealthPercent");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_MaxHealthPercent) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_MaxHealthPercent");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_MaxHealthPercent, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_MaxHealthPercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_PermanintShield
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_PermanintShield final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_PermanintShield) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_PermanintShield");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_PermanintShield) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_PermanintShield");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_PermanintShield, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_PermanintShield::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_RightDefendValue
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_RightDefendValue final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_RightDefendValue) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_RightDefendValue");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_RightDefendValue) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_RightDefendValue");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_RightDefendValue, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_RightDefendValue::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_RightDefGearLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_RightDefGearLevel final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_RightDefGearLevel) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_RightDefGearLevel");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_RightDefGearLevel) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_RightDefGearLevel");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_RightDefGearLevel, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_RightDefGearLevel::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_RightGuardedDamageReduceRate
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_RightGuardedDamageReduceRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_RightGuardedDamageReduceRate) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_RightGuardedDamageReduceRate");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_RightGuardedDamageReduceRate) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_RightGuardedDamageReduceRate");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_RightGuardedDamageReduceRate, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_RightGuardedDamageReduceRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_RightShieldAngle
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_RightShieldAngle final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_RightShieldAngle) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_RightShieldAngle");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_RightShieldAngle) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_RightShieldAngle");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_RightShieldAngle, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_RightShieldAngle::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_TrousersDefGearLevel
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_TrousersDefGearLevel final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_TrousersDefGearLevel) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_TrousersDefGearLevel");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_TrousersDefGearLevel) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_TrousersDefGearLevel");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_TrousersDefGearLevel, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_TrousersDefGearLevel::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.OnRep_UncontrolledReduceRate
// 0x0010 (0x0010 - 0x0000)
struct TgfDefendAttributeSet_OnRep_UncontrolledReduceRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_OnRep_UncontrolledReduceRate) == 0x000008, "Wrong alignment on TgfDefendAttributeSet_OnRep_UncontrolledReduceRate");
static_assert(sizeof(TgfDefendAttributeSet_OnRep_UncontrolledReduceRate) == 0x000010, "Wrong size on TgfDefendAttributeSet_OnRep_UncontrolledReduceRate");
static_assert(offsetof(TgfDefendAttributeSet_OnRep_UncontrolledReduceRate, OldValue) == 0x000000, "Member 'TgfDefendAttributeSet_OnRep_UncontrolledReduceRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.GetCurShieldFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfDefendAttributeSet_GetCurShieldFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_GetCurShieldFinal) == 0x000004, "Wrong alignment on TgfDefendAttributeSet_GetCurShieldFinal");
static_assert(sizeof(TgfDefendAttributeSet_GetCurShieldFinal) == 0x000004, "Wrong size on TgfDefendAttributeSet_GetCurShieldFinal");
static_assert(offsetof(TgfDefendAttributeSet_GetCurShieldFinal, ReturnValue) == 0x000000, "Member 'TgfDefendAttributeSet_GetCurShieldFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.GetDefendValueWithAnim
// 0x0008 (0x0008 - 0x0000)
struct TgfDefendAttributeSet_GetDefendValueWithAnim final
{
public:
	bool                                          IsGuarded;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_GetDefendValueWithAnim) == 0x000004, "Wrong alignment on TgfDefendAttributeSet_GetDefendValueWithAnim");
static_assert(sizeof(TgfDefendAttributeSet_GetDefendValueWithAnim) == 0x000008, "Wrong size on TgfDefendAttributeSet_GetDefendValueWithAnim");
static_assert(offsetof(TgfDefendAttributeSet_GetDefendValueWithAnim, IsGuarded) == 0x000000, "Member 'TgfDefendAttributeSet_GetDefendValueWithAnim::IsGuarded' has a wrong offset!");
static_assert(offsetof(TgfDefendAttributeSet_GetDefendValueWithAnim, ReturnValue) == 0x000004, "Member 'TgfDefendAttributeSet_GetDefendValueWithAnim::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.GetDefGearLevel
// 0x0004 (0x0004 - 0x0000)
struct TgfDefendAttributeSet_GetDefGearLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_GetDefGearLevel) == 0x000004, "Wrong alignment on TgfDefendAttributeSet_GetDefGearLevel");
static_assert(sizeof(TgfDefendAttributeSet_GetDefGearLevel) == 0x000004, "Wrong size on TgfDefendAttributeSet_GetDefGearLevel");
static_assert(offsetof(TgfDefendAttributeSet_GetDefGearLevel, ReturnValue) == 0x000000, "Member 'TgfDefendAttributeSet_GetDefGearLevel::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.GetElementResistanceRate
// 0x0008 (0x0008 - 0x0000)
struct TgfDefendAttributeSet_GetElementResistanceRate final
{
public:
	ETgfBattleElement                             Element;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_GetElementResistanceRate) == 0x000004, "Wrong alignment on TgfDefendAttributeSet_GetElementResistanceRate");
static_assert(sizeof(TgfDefendAttributeSet_GetElementResistanceRate) == 0x000008, "Wrong size on TgfDefendAttributeSet_GetElementResistanceRate");
static_assert(offsetof(TgfDefendAttributeSet_GetElementResistanceRate, Element) == 0x000000, "Member 'TgfDefendAttributeSet_GetElementResistanceRate::Element' has a wrong offset!");
static_assert(offsetof(TgfDefendAttributeSet_GetElementResistanceRate, ReturnValue) == 0x000004, "Member 'TgfDefendAttributeSet_GetElementResistanceRate::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.GetFinalElementResistanceRate
// 0x0008 (0x0008 - 0x0000)
struct TgfDefendAttributeSet_GetFinalElementResistanceRate final
{
public:
	ETgfBattleElement                             AttackElement;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfBattleElement                             DefendElement;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_GetFinalElementResistanceRate) == 0x000004, "Wrong alignment on TgfDefendAttributeSet_GetFinalElementResistanceRate");
static_assert(sizeof(TgfDefendAttributeSet_GetFinalElementResistanceRate) == 0x000008, "Wrong size on TgfDefendAttributeSet_GetFinalElementResistanceRate");
static_assert(offsetof(TgfDefendAttributeSet_GetFinalElementResistanceRate, AttackElement) == 0x000000, "Member 'TgfDefendAttributeSet_GetFinalElementResistanceRate::AttackElement' has a wrong offset!");
static_assert(offsetof(TgfDefendAttributeSet_GetFinalElementResistanceRate, DefendElement) == 0x000001, "Member 'TgfDefendAttributeSet_GetFinalElementResistanceRate::DefendElement' has a wrong offset!");
static_assert(offsetof(TgfDefendAttributeSet_GetFinalElementResistanceRate, ReturnValue) == 0x000004, "Member 'TgfDefendAttributeSet_GetFinalElementResistanceRate::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.GetGuardedDamageReduceRate
// 0x0004 (0x0004 - 0x0000)
struct TgfDefendAttributeSet_GetGuardedDamageReduceRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_GetGuardedDamageReduceRate) == 0x000004, "Wrong alignment on TgfDefendAttributeSet_GetGuardedDamageReduceRate");
static_assert(sizeof(TgfDefendAttributeSet_GetGuardedDamageReduceRate) == 0x000004, "Wrong size on TgfDefendAttributeSet_GetGuardedDamageReduceRate");
static_assert(offsetof(TgfDefendAttributeSet_GetGuardedDamageReduceRate, ReturnValue) == 0x000000, "Member 'TgfDefendAttributeSet_GetGuardedDamageReduceRate::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.GetMaxHealthFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfDefendAttributeSet_GetMaxHealthFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_GetMaxHealthFinal) == 0x000004, "Wrong alignment on TgfDefendAttributeSet_GetMaxHealthFinal");
static_assert(sizeof(TgfDefendAttributeSet_GetMaxHealthFinal) == 0x000004, "Wrong size on TgfDefendAttributeSet_GetMaxHealthFinal");
static_assert(offsetof(TgfDefendAttributeSet_GetMaxHealthFinal, ReturnValue) == 0x000000, "Member 'TgfDefendAttributeSet_GetMaxHealthFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.HasHurtPartHeadTag
// 0x0001 (0x0001 - 0x0000)
struct TgfDefendAttributeSet_HasHurtPartHeadTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_HasHurtPartHeadTag) == 0x000001, "Wrong alignment on TgfDefendAttributeSet_HasHurtPartHeadTag");
static_assert(sizeof(TgfDefendAttributeSet_HasHurtPartHeadTag) == 0x000001, "Wrong size on TgfDefendAttributeSet_HasHurtPartHeadTag");
static_assert(offsetof(TgfDefendAttributeSet_HasHurtPartHeadTag, ReturnValue) == 0x000000, "Member 'TgfDefendAttributeSet_HasHurtPartHeadTag::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfDefendAttributeSet.IsFullHP
// 0x0001 (0x0001 - 0x0000)
struct TgfDefendAttributeSet_IsFullHP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfDefendAttributeSet_IsFullHP) == 0x000001, "Wrong alignment on TgfDefendAttributeSet_IsFullHP");
static_assert(sizeof(TgfDefendAttributeSet_IsFullHP) == 0x000001, "Wrong size on TgfDefendAttributeSet_IsFullHP");
static_assert(offsetof(TgfDefendAttributeSet_IsFullHP, ReturnValue) == 0x000000, "Member 'TgfDefendAttributeSet_IsFullHP::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.AddStatTagStack
// 0x000C (0x000C - 0x0000)
struct LyraInventoryItemInstance_AddStatTagStack final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TagCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_AddStatTagStack) == 0x000004, "Wrong alignment on LyraInventoryItemInstance_AddStatTagStack");
static_assert(sizeof(LyraInventoryItemInstance_AddStatTagStack) == 0x00000C, "Wrong size on LyraInventoryItemInstance_AddStatTagStack");
static_assert(offsetof(LyraInventoryItemInstance_AddStatTagStack, Tag) == 0x000000, "Member 'LyraInventoryItemInstance_AddStatTagStack::Tag' has a wrong offset!");
static_assert(offsetof(LyraInventoryItemInstance_AddStatTagStack, TagCount) == 0x000008, "Member 'LyraInventoryItemInstance_AddStatTagStack::TagCount' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.DuplicateItemInstance
// 0x0018 (0x0018 - 0x0000)
struct LyraInventoryItemInstance_DuplicateItemInstance final
{
public:
	class UObject*                                NewOuter;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedSkin;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_DuplicateItemInstance) == 0x000008, "Wrong alignment on LyraInventoryItemInstance_DuplicateItemInstance");
static_assert(sizeof(LyraInventoryItemInstance_DuplicateItemInstance) == 0x000018, "Wrong size on LyraInventoryItemInstance_DuplicateItemInstance");
static_assert(offsetof(LyraInventoryItemInstance_DuplicateItemInstance, NewOuter) == 0x000000, "Member 'LyraInventoryItemInstance_DuplicateItemInstance::NewOuter' has a wrong offset!");
static_assert(offsetof(LyraInventoryItemInstance_DuplicateItemInstance, NeedSkin) == 0x000008, "Member 'LyraInventoryItemInstance_DuplicateItemInstance::NeedSkin' has a wrong offset!");
static_assert(offsetof(LyraInventoryItemInstance_DuplicateItemInstance, ReturnValue) == 0x000010, "Member 'LyraInventoryItemInstance_DuplicateItemInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.OnRep_StackCount
// 0x0004 (0x0004 - 0x0000)
struct LyraInventoryItemInstance_OnRep_StackCount final
{
public:
	int32                                         OldCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_OnRep_StackCount) == 0x000004, "Wrong alignment on LyraInventoryItemInstance_OnRep_StackCount");
static_assert(sizeof(LyraInventoryItemInstance_OnRep_StackCount) == 0x000004, "Wrong size on LyraInventoryItemInstance_OnRep_StackCount");
static_assert(offsetof(LyraInventoryItemInstance_OnRep_StackCount, OldCount) == 0x000000, "Member 'LyraInventoryItemInstance_OnRep_StackCount::OldCount' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.RemoveStatTagStack
// 0x000C (0x000C - 0x0000)
struct LyraInventoryItemInstance_RemoveStatTagStack final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TagCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_RemoveStatTagStack) == 0x000004, "Wrong alignment on LyraInventoryItemInstance_RemoveStatTagStack");
static_assert(sizeof(LyraInventoryItemInstance_RemoveStatTagStack) == 0x00000C, "Wrong size on LyraInventoryItemInstance_RemoveStatTagStack");
static_assert(offsetof(LyraInventoryItemInstance_RemoveStatTagStack, Tag) == 0x000000, "Member 'LyraInventoryItemInstance_RemoveStatTagStack::Tag' has a wrong offset!");
static_assert(offsetof(LyraInventoryItemInstance_RemoveStatTagStack, TagCount) == 0x000008, "Member 'LyraInventoryItemInstance_RemoveStatTagStack::TagCount' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.SetStackCount
// 0x0004 (0x0004 - 0x0000)
struct LyraInventoryItemInstance_SetStackCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_SetStackCount) == 0x000004, "Wrong alignment on LyraInventoryItemInstance_SetStackCount");
static_assert(sizeof(LyraInventoryItemInstance_SetStackCount) == 0x000004, "Wrong size on LyraInventoryItemInstance_SetStackCount");
static_assert(offsetof(LyraInventoryItemInstance_SetStackCount, Value) == 0x000000, "Member 'LyraInventoryItemInstance_SetStackCount::Value' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.CanDiscardStack
// 0x0001 (0x0001 - 0x0000)
struct LyraInventoryItemInstance_CanDiscardStack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_CanDiscardStack) == 0x000001, "Wrong alignment on LyraInventoryItemInstance_CanDiscardStack");
static_assert(sizeof(LyraInventoryItemInstance_CanDiscardStack) == 0x000001, "Wrong size on LyraInventoryItemInstance_CanDiscardStack");
static_assert(offsetof(LyraInventoryItemInstance_CanDiscardStack, ReturnValue) == 0x000000, "Member 'LyraInventoryItemInstance_CanDiscardStack::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.FindFragmentByClass
// 0x0018 (0x0018 - 0x0000)
struct LyraInventoryItemInstance_FindFragmentByClass final
{
public:
	TSubclassOf<class ULyraInventoryItemFragment> FragmentClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedSkined;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ULyraInventoryItemFragment*       ReturnValue;                                       // 0x0010(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_FindFragmentByClass) == 0x000008, "Wrong alignment on LyraInventoryItemInstance_FindFragmentByClass");
static_assert(sizeof(LyraInventoryItemInstance_FindFragmentByClass) == 0x000018, "Wrong size on LyraInventoryItemInstance_FindFragmentByClass");
static_assert(offsetof(LyraInventoryItemInstance_FindFragmentByClass, FragmentClass) == 0x000000, "Member 'LyraInventoryItemInstance_FindFragmentByClass::FragmentClass' has a wrong offset!");
static_assert(offsetof(LyraInventoryItemInstance_FindFragmentByClass, NeedSkined) == 0x000008, "Member 'LyraInventoryItemInstance_FindFragmentByClass::NeedSkined' has a wrong offset!");
static_assert(offsetof(LyraInventoryItemInstance_FindFragmentByClass, ReturnValue) == 0x000010, "Member 'LyraInventoryItemInstance_FindFragmentByClass::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.GetEquipDefinition
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryItemInstance_GetEquipDefinition final
{
public:
	bool                                          NeedSkined;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULyraEquipmentDefinition>   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_GetEquipDefinition) == 0x000008, "Wrong alignment on LyraInventoryItemInstance_GetEquipDefinition");
static_assert(sizeof(LyraInventoryItemInstance_GetEquipDefinition) == 0x000010, "Wrong size on LyraInventoryItemInstance_GetEquipDefinition");
static_assert(offsetof(LyraInventoryItemInstance_GetEquipDefinition, NeedSkined) == 0x000000, "Member 'LyraInventoryItemInstance_GetEquipDefinition::NeedSkined' has a wrong offset!");
static_assert(offsetof(LyraInventoryItemInstance_GetEquipDefinition, ReturnValue) == 0x000008, "Member 'LyraInventoryItemInstance_GetEquipDefinition::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.GetItemDef
// 0x0010 (0x0010 - 0x0000)
struct LyraInventoryItemInstance_GetItemDef final
{
public:
	bool                                          NeedSkined;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULyraInventoryItemDefinition> ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_GetItemDef) == 0x000008, "Wrong alignment on LyraInventoryItemInstance_GetItemDef");
static_assert(sizeof(LyraInventoryItemInstance_GetItemDef) == 0x000010, "Wrong size on LyraInventoryItemInstance_GetItemDef");
static_assert(offsetof(LyraInventoryItemInstance_GetItemDef, NeedSkined) == 0x000000, "Member 'LyraInventoryItemInstance_GetItemDef::NeedSkined' has a wrong offset!");
static_assert(offsetof(LyraInventoryItemInstance_GetItemDef, ReturnValue) == 0x000008, "Member 'LyraInventoryItemInstance_GetItemDef::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.GetItemId
// 0x0004 (0x0004 - 0x0000)
struct LyraInventoryItemInstance_GetItemId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_GetItemId) == 0x000004, "Wrong alignment on LyraInventoryItemInstance_GetItemId");
static_assert(sizeof(LyraInventoryItemInstance_GetItemId) == 0x000004, "Wrong size on LyraInventoryItemInstance_GetItemId");
static_assert(offsetof(LyraInventoryItemInstance_GetItemId, ReturnValue) == 0x000000, "Member 'LyraInventoryItemInstance_GetItemId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.GetSkinItemDef
// 0x0008 (0x0008 - 0x0000)
struct LyraInventoryItemInstance_GetSkinItemDef final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_GetSkinItemDef) == 0x000008, "Wrong alignment on LyraInventoryItemInstance_GetSkinItemDef");
static_assert(sizeof(LyraInventoryItemInstance_GetSkinItemDef) == 0x000008, "Wrong size on LyraInventoryItemInstance_GetSkinItemDef");
static_assert(offsetof(LyraInventoryItemInstance_GetSkinItemDef, ReturnValue) == 0x000000, "Member 'LyraInventoryItemInstance_GetSkinItemDef::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.GetStackCount
// 0x0004 (0x0004 - 0x0000)
struct LyraInventoryItemInstance_GetStackCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_GetStackCount) == 0x000004, "Wrong alignment on LyraInventoryItemInstance_GetStackCount");
static_assert(sizeof(LyraInventoryItemInstance_GetStackCount) == 0x000004, "Wrong size on LyraInventoryItemInstance_GetStackCount");
static_assert(offsetof(LyraInventoryItemInstance_GetStackCount, ReturnValue) == 0x000000, "Member 'LyraInventoryItemInstance_GetStackCount::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.GetStatTagStackCount
// 0x000C (0x000C - 0x0000)
struct LyraInventoryItemInstance_GetStatTagStackCount final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryItemInstance_GetStatTagStackCount) == 0x000004, "Wrong alignment on LyraInventoryItemInstance_GetStatTagStackCount");
static_assert(sizeof(LyraInventoryItemInstance_GetStatTagStackCount) == 0x00000C, "Wrong size on LyraInventoryItemInstance_GetStatTagStackCount");
static_assert(offsetof(LyraInventoryItemInstance_GetStatTagStackCount, Tag) == 0x000000, "Member 'LyraInventoryItemInstance_GetStatTagStackCount::Tag' has a wrong offset!");
static_assert(offsetof(LyraInventoryItemInstance_GetStatTagStackCount, ReturnValue) == 0x000008, "Member 'LyraInventoryItemInstance_GetStatTagStackCount::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryItemInstance.HasStatTag
// 0x000C (0x000C - 0x0000)
struct LyraInventoryItemInstance_HasStatTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraInventoryItemInstance_HasStatTag) == 0x000004, "Wrong alignment on LyraInventoryItemInstance_HasStatTag");
static_assert(sizeof(LyraInventoryItemInstance_HasStatTag) == 0x00000C, "Wrong size on LyraInventoryItemInstance_HasStatTag");
static_assert(offsetof(LyraInventoryItemInstance_HasStatTag, Tag) == 0x000000, "Member 'LyraInventoryItemInstance_HasStatTag::Tag' has a wrong offset!");
static_assert(offsetof(LyraInventoryItemInstance_HasStatTag, ReturnValue) == 0x000008, "Member 'LyraInventoryItemInstance_HasStatTag::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfFirstLevelAttributeSet.IsFirstLevelAttribute
// 0x0040 (0x0040 - 0x0000)
struct TgfFirstLevelAttributeSet_IsFirstLevelAttribute final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfFirstLevelAttributeSet_IsFirstLevelAttribute) == 0x000008, "Wrong alignment on TgfFirstLevelAttributeSet_IsFirstLevelAttribute");
static_assert(sizeof(TgfFirstLevelAttributeSet_IsFirstLevelAttribute) == 0x000040, "Wrong size on TgfFirstLevelAttributeSet_IsFirstLevelAttribute");
static_assert(offsetof(TgfFirstLevelAttributeSet_IsFirstLevelAttribute, Attribute) == 0x000000, "Member 'TgfFirstLevelAttributeSet_IsFirstLevelAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(TgfFirstLevelAttributeSet_IsFirstLevelAttribute, ReturnValue) == 0x000038, "Member 'TgfFirstLevelAttributeSet_IsFirstLevelAttribute::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfFirstLevelAttributeSet.IsSatisfiedAttribute
// 0x0118 (0x0118 - 0x0000)
struct TgfFirstLevelAttributeSet_IsSatisfiedAttribute final
{
public:
	struct FTgfActorRuntimeTalent                 Talent;                                            // 0x0000(0x0108)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ULyraAbilitySystemComponent*            Abs;                                               // 0x0108(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfFirstLevelAttributeSet_IsSatisfiedAttribute) == 0x000008, "Wrong alignment on TgfFirstLevelAttributeSet_IsSatisfiedAttribute");
static_assert(sizeof(TgfFirstLevelAttributeSet_IsSatisfiedAttribute) == 0x000118, "Wrong size on TgfFirstLevelAttributeSet_IsSatisfiedAttribute");
static_assert(offsetof(TgfFirstLevelAttributeSet_IsSatisfiedAttribute, Talent) == 0x000000, "Member 'TgfFirstLevelAttributeSet_IsSatisfiedAttribute::Talent' has a wrong offset!");
static_assert(offsetof(TgfFirstLevelAttributeSet_IsSatisfiedAttribute, Abs) == 0x000108, "Member 'TgfFirstLevelAttributeSet_IsSatisfiedAttribute::Abs' has a wrong offset!");
static_assert(offsetof(TgfFirstLevelAttributeSet_IsSatisfiedAttribute, ReturnValue) == 0x000110, "Member 'TgfFirstLevelAttributeSet_IsSatisfiedAttribute::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfFirstLevelAttributeSet.OnRep_Dexterity
// 0x0010 (0x0010 - 0x0000)
struct TgfFirstLevelAttributeSet_OnRep_Dexterity final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfFirstLevelAttributeSet_OnRep_Dexterity) == 0x000008, "Wrong alignment on TgfFirstLevelAttributeSet_OnRep_Dexterity");
static_assert(sizeof(TgfFirstLevelAttributeSet_OnRep_Dexterity) == 0x000010, "Wrong size on TgfFirstLevelAttributeSet_OnRep_Dexterity");
static_assert(offsetof(TgfFirstLevelAttributeSet_OnRep_Dexterity, OldValue) == 0x000000, "Member 'TgfFirstLevelAttributeSet_OnRep_Dexterity::OldValue' has a wrong offset!");

// Function LyraGame.TgfFirstLevelAttributeSet.OnRep_Faith
// 0x0010 (0x0010 - 0x0000)
struct TgfFirstLevelAttributeSet_OnRep_Faith final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfFirstLevelAttributeSet_OnRep_Faith) == 0x000008, "Wrong alignment on TgfFirstLevelAttributeSet_OnRep_Faith");
static_assert(sizeof(TgfFirstLevelAttributeSet_OnRep_Faith) == 0x000010, "Wrong size on TgfFirstLevelAttributeSet_OnRep_Faith");
static_assert(offsetof(TgfFirstLevelAttributeSet_OnRep_Faith, OldValue) == 0x000000, "Member 'TgfFirstLevelAttributeSet_OnRep_Faith::OldValue' has a wrong offset!");

// Function LyraGame.TgfFirstLevelAttributeSet.OnRep_Intelligence
// 0x0010 (0x0010 - 0x0000)
struct TgfFirstLevelAttributeSet_OnRep_Intelligence final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfFirstLevelAttributeSet_OnRep_Intelligence) == 0x000008, "Wrong alignment on TgfFirstLevelAttributeSet_OnRep_Intelligence");
static_assert(sizeof(TgfFirstLevelAttributeSet_OnRep_Intelligence) == 0x000010, "Wrong size on TgfFirstLevelAttributeSet_OnRep_Intelligence");
static_assert(offsetof(TgfFirstLevelAttributeSet_OnRep_Intelligence, OldValue) == 0x000000, "Member 'TgfFirstLevelAttributeSet_OnRep_Intelligence::OldValue' has a wrong offset!");

// Function LyraGame.TgfFirstLevelAttributeSet.OnRep_Stamina
// 0x0010 (0x0010 - 0x0000)
struct TgfFirstLevelAttributeSet_OnRep_Stamina final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfFirstLevelAttributeSet_OnRep_Stamina) == 0x000008, "Wrong alignment on TgfFirstLevelAttributeSet_OnRep_Stamina");
static_assert(sizeof(TgfFirstLevelAttributeSet_OnRep_Stamina) == 0x000010, "Wrong size on TgfFirstLevelAttributeSet_OnRep_Stamina");
static_assert(offsetof(TgfFirstLevelAttributeSet_OnRep_Stamina, OldValue) == 0x000000, "Member 'TgfFirstLevelAttributeSet_OnRep_Stamina::OldValue' has a wrong offset!");

// Function LyraGame.TgfFirstLevelAttributeSet.OnRep_Strength
// 0x0010 (0x0010 - 0x0000)
struct TgfFirstLevelAttributeSet_OnRep_Strength final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfFirstLevelAttributeSet_OnRep_Strength) == 0x000008, "Wrong alignment on TgfFirstLevelAttributeSet_OnRep_Strength");
static_assert(sizeof(TgfFirstLevelAttributeSet_OnRep_Strength) == 0x000010, "Wrong size on TgfFirstLevelAttributeSet_OnRep_Strength");
static_assert(offsetof(TgfFirstLevelAttributeSet_OnRep_Strength, OldValue) == 0x000000, "Member 'TgfFirstLevelAttributeSet_OnRep_Strength::OldValue' has a wrong offset!");

// Function LyraGame.TgfFirstLevelAttributeSet.OnRep_Will
// 0x0010 (0x0010 - 0x0000)
struct TgfFirstLevelAttributeSet_OnRep_Will final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfFirstLevelAttributeSet_OnRep_Will) == 0x000008, "Wrong alignment on TgfFirstLevelAttributeSet_OnRep_Will");
static_assert(sizeof(TgfFirstLevelAttributeSet_OnRep_Will) == 0x000010, "Wrong size on TgfFirstLevelAttributeSet_OnRep_Will");
static_assert(offsetof(TgfFirstLevelAttributeSet_OnRep_Will, OldValue) == 0x000000, "Member 'TgfFirstLevelAttributeSet_OnRep_Will::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_ExpBoostRateOutOfPortal
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_ExpBoostRateOutOfPortal final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_ExpBoostRateOutOfPortal) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_ExpBoostRateOutOfPortal");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_ExpBoostRateOutOfPortal) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_ExpBoostRateOutOfPortal");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_ExpBoostRateOutOfPortal, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_ExpBoostRateOutOfPortal::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_GainGoldOutOfPortal
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_GainGoldOutOfPortal final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_GainGoldOutOfPortal) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_GainGoldOutOfPortal");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_GainGoldOutOfPortal) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_GainGoldOutOfPortal");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_GainGoldOutOfPortal, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_GainGoldOutOfPortal::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_HealBonus
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_HealBonus final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_HealBonus) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_HealBonus");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_HealBonus) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_HealBonus");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_HealBonus, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_HealBonus::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_HealBoostRate
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_HealBoostRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_HealBoostRate) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_HealBoostRate");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_HealBoostRate) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_HealBoostRate");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_HealBoostRate, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_HealBoostRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_HealOnHit
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_HealOnHit final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_HealOnHit) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_HealOnHit");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_HealOnHit) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_HealOnHit");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_HealOnHit, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_HealOnHit::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_HealOnKill
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_HealOnKill final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_HealOnKill) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_HealOnKill");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_HealOnKill) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_HealOnKill");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_HealOnKill, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_HealOnKill::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_HealOverTime
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_HealOverTime final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_HealOverTime) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_HealOverTime");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_HealOverTime) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_HealOverTime");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_HealOverTime, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_HealOverTime::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_HealReceiveRate
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_HealReceiveRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_HealReceiveRate) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_HealReceiveRate");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_HealReceiveRate) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_HealReceiveRate");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_HealReceiveRate, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_HealReceiveRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_HealWoundRate
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_HealWoundRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_HealWoundRate) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_HealWoundRate");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_HealWoundRate) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_HealWoundRate");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_HealWoundRate, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_HealWoundRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_LifeLeachRate
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_LifeLeachRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_LifeLeachRate) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_LifeLeachRate");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_LifeLeachRate) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_LifeLeachRate");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_LifeLeachRate, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_LifeLeachRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_ResCostReduceRate
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_ResCostReduceRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_ResCostReduceRate) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_ResCostReduceRate");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_ResCostReduceRate) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_ResCostReduceRate");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_ResCostReduceRate, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_ResCostReduceRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_ResGenerateRate
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_ResGenerateRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_ResGenerateRate) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_ResGenerateRate");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_ResGenerateRate) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_ResGenerateRate");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_ResGenerateRate, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_ResGenerateRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_ShieldBonus
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_ShieldBonus final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_ShieldBonus) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_ShieldBonus");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_ShieldBonus) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_ShieldBonus");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_ShieldBonus, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_ShieldBonus::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_ShieldBoostRate
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_ShieldBoostRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_ShieldBoostRate) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_ShieldBoostRate");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_ShieldBoostRate) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_ShieldBoostRate");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_ShieldBoostRate, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_ShieldBoostRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_ShieldReceiveRate
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_ShieldReceiveRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_ShieldReceiveRate) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_ShieldReceiveRate");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_ShieldReceiveRate) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_ShieldReceiveRate");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_ShieldReceiveRate, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_ShieldReceiveRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfRecoverAttributeSet.OnRep_SkillCooldownScaleRate
// 0x0010 (0x0010 - 0x0000)
struct TgfRecoverAttributeSet_OnRep_SkillCooldownScaleRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfRecoverAttributeSet_OnRep_SkillCooldownScaleRate) == 0x000008, "Wrong alignment on TgfRecoverAttributeSet_OnRep_SkillCooldownScaleRate");
static_assert(sizeof(TgfRecoverAttributeSet_OnRep_SkillCooldownScaleRate) == 0x000010, "Wrong size on TgfRecoverAttributeSet_OnRep_SkillCooldownScaleRate");
static_assert(offsetof(TgfRecoverAttributeSet_OnRep_SkillCooldownScaleRate, OldValue) == 0x000000, "Member 'TgfRecoverAttributeSet_OnRep_SkillCooldownScaleRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.ApplySpeedBaseMod
// 0x0004 (0x0004 - 0x0000)
struct TgfSpeedAttributeSet_ApplySpeedBaseMod final
{
public:
	float                                         Mod;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_ApplySpeedBaseMod) == 0x000004, "Wrong alignment on TgfSpeedAttributeSet_ApplySpeedBaseMod");
static_assert(sizeof(TgfSpeedAttributeSet_ApplySpeedBaseMod) == 0x000004, "Wrong size on TgfSpeedAttributeSet_ApplySpeedBaseMod");
static_assert(offsetof(TgfSpeedAttributeSet_ApplySpeedBaseMod, Mod) == 0x000000, "Member 'TgfSpeedAttributeSet_ApplySpeedBaseMod::Mod' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.OnRep_AttackSpeedRate
// 0x0010 (0x0010 - 0x0000)
struct TgfSpeedAttributeSet_OnRep_AttackSpeedRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_OnRep_AttackSpeedRate) == 0x000008, "Wrong alignment on TgfSpeedAttributeSet_OnRep_AttackSpeedRate");
static_assert(sizeof(TgfSpeedAttributeSet_OnRep_AttackSpeedRate) == 0x000010, "Wrong size on TgfSpeedAttributeSet_OnRep_AttackSpeedRate");
static_assert(offsetof(TgfSpeedAttributeSet_OnRep_AttackSpeedRate, OldValue) == 0x000000, "Member 'TgfSpeedAttributeSet_OnRep_AttackSpeedRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.OnRep_DeathZoneTime
// 0x0010 (0x0010 - 0x0000)
struct TgfSpeedAttributeSet_OnRep_DeathZoneTime final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_OnRep_DeathZoneTime) == 0x000008, "Wrong alignment on TgfSpeedAttributeSet_OnRep_DeathZoneTime");
static_assert(sizeof(TgfSpeedAttributeSet_OnRep_DeathZoneTime) == 0x000010, "Wrong size on TgfSpeedAttributeSet_OnRep_DeathZoneTime");
static_assert(offsetof(TgfSpeedAttributeSet_OnRep_DeathZoneTime, OldValue) == 0x000000, "Member 'TgfSpeedAttributeSet_OnRep_DeathZoneTime::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.OnRep_LevelInteractSpeedAdditional
// 0x0010 (0x0010 - 0x0000)
struct TgfSpeedAttributeSet_OnRep_LevelInteractSpeedAdditional final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_OnRep_LevelInteractSpeedAdditional) == 0x000008, "Wrong alignment on TgfSpeedAttributeSet_OnRep_LevelInteractSpeedAdditional");
static_assert(sizeof(TgfSpeedAttributeSet_OnRep_LevelInteractSpeedAdditional) == 0x000010, "Wrong size on TgfSpeedAttributeSet_OnRep_LevelInteractSpeedAdditional");
static_assert(offsetof(TgfSpeedAttributeSet_OnRep_LevelInteractSpeedAdditional, OldValue) == 0x000000, "Member 'TgfSpeedAttributeSet_OnRep_LevelInteractSpeedAdditional::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.OnRep_LevelInteractSpeedRate
// 0x0010 (0x0010 - 0x0000)
struct TgfSpeedAttributeSet_OnRep_LevelInteractSpeedRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_OnRep_LevelInteractSpeedRate) == 0x000008, "Wrong alignment on TgfSpeedAttributeSet_OnRep_LevelInteractSpeedRate");
static_assert(sizeof(TgfSpeedAttributeSet_OnRep_LevelInteractSpeedRate) == 0x000010, "Wrong size on TgfSpeedAttributeSet_OnRep_LevelInteractSpeedRate");
static_assert(offsetof(TgfSpeedAttributeSet_OnRep_LevelInteractSpeedRate, OldValue) == 0x000000, "Member 'TgfSpeedAttributeSet_OnRep_LevelInteractSpeedRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.OnRep_MoveSpeedBase
// 0x0010 (0x0010 - 0x0000)
struct TgfSpeedAttributeSet_OnRep_MoveSpeedBase final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_OnRep_MoveSpeedBase) == 0x000008, "Wrong alignment on TgfSpeedAttributeSet_OnRep_MoveSpeedBase");
static_assert(sizeof(TgfSpeedAttributeSet_OnRep_MoveSpeedBase) == 0x000010, "Wrong size on TgfSpeedAttributeSet_OnRep_MoveSpeedBase");
static_assert(offsetof(TgfSpeedAttributeSet_OnRep_MoveSpeedBase, OldValue) == 0x000000, "Member 'TgfSpeedAttributeSet_OnRep_MoveSpeedBase::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.OnRep_MoveSpeedPercent
// 0x0010 (0x0010 - 0x0000)
struct TgfSpeedAttributeSet_OnRep_MoveSpeedPercent final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_OnRep_MoveSpeedPercent) == 0x000008, "Wrong alignment on TgfSpeedAttributeSet_OnRep_MoveSpeedPercent");
static_assert(sizeof(TgfSpeedAttributeSet_OnRep_MoveSpeedPercent) == 0x000010, "Wrong size on TgfSpeedAttributeSet_OnRep_MoveSpeedPercent");
static_assert(offsetof(TgfSpeedAttributeSet_OnRep_MoveSpeedPercent, OldValue) == 0x000000, "Member 'TgfSpeedAttributeSet_OnRep_MoveSpeedPercent::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.OnRep_RecoverableItemConsumeSpeedRate
// 0x0010 (0x0010 - 0x0000)
struct TgfSpeedAttributeSet_OnRep_RecoverableItemConsumeSpeedRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_OnRep_RecoverableItemConsumeSpeedRate) == 0x000008, "Wrong alignment on TgfSpeedAttributeSet_OnRep_RecoverableItemConsumeSpeedRate");
static_assert(sizeof(TgfSpeedAttributeSet_OnRep_RecoverableItemConsumeSpeedRate) == 0x000010, "Wrong size on TgfSpeedAttributeSet_OnRep_RecoverableItemConsumeSpeedRate");
static_assert(offsetof(TgfSpeedAttributeSet_OnRep_RecoverableItemConsumeSpeedRate, OldValue) == 0x000000, "Member 'TgfSpeedAttributeSet_OnRep_RecoverableItemConsumeSpeedRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.OnRep_SpellCastSpeedAdditional
// 0x0010 (0x0010 - 0x0000)
struct TgfSpeedAttributeSet_OnRep_SpellCastSpeedAdditional final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_OnRep_SpellCastSpeedAdditional) == 0x000008, "Wrong alignment on TgfSpeedAttributeSet_OnRep_SpellCastSpeedAdditional");
static_assert(sizeof(TgfSpeedAttributeSet_OnRep_SpellCastSpeedAdditional) == 0x000010, "Wrong size on TgfSpeedAttributeSet_OnRep_SpellCastSpeedAdditional");
static_assert(offsetof(TgfSpeedAttributeSet_OnRep_SpellCastSpeedAdditional, OldValue) == 0x000000, "Member 'TgfSpeedAttributeSet_OnRep_SpellCastSpeedAdditional::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.OnRep_SpellCastSpeedRate
// 0x0010 (0x0010 - 0x0000)
struct TgfSpeedAttributeSet_OnRep_SpellCastSpeedRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_OnRep_SpellCastSpeedRate) == 0x000008, "Wrong alignment on TgfSpeedAttributeSet_OnRep_SpellCastSpeedRate");
static_assert(sizeof(TgfSpeedAttributeSet_OnRep_SpellCastSpeedRate) == 0x000010, "Wrong size on TgfSpeedAttributeSet_OnRep_SpellCastSpeedRate");
static_assert(offsetof(TgfSpeedAttributeSet_OnRep_SpellCastSpeedRate, OldValue) == 0x000000, "Member 'TgfSpeedAttributeSet_OnRep_SpellCastSpeedRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.OnRep_ThrowableItemConsumeSpeedRate
// 0x0010 (0x0010 - 0x0000)
struct TgfSpeedAttributeSet_OnRep_ThrowableItemConsumeSpeedRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_OnRep_ThrowableItemConsumeSpeedRate) == 0x000008, "Wrong alignment on TgfSpeedAttributeSet_OnRep_ThrowableItemConsumeSpeedRate");
static_assert(sizeof(TgfSpeedAttributeSet_OnRep_ThrowableItemConsumeSpeedRate) == 0x000010, "Wrong size on TgfSpeedAttributeSet_OnRep_ThrowableItemConsumeSpeedRate");
static_assert(offsetof(TgfSpeedAttributeSet_OnRep_ThrowableItemConsumeSpeedRate, OldValue) == 0x000000, "Member 'TgfSpeedAttributeSet_OnRep_ThrowableItemConsumeSpeedRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.OnRep_WeaponChangeSpeedRate
// 0x0010 (0x0010 - 0x0000)
struct TgfSpeedAttributeSet_OnRep_WeaponChangeSpeedRate final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_OnRep_WeaponChangeSpeedRate) == 0x000008, "Wrong alignment on TgfSpeedAttributeSet_OnRep_WeaponChangeSpeedRate");
static_assert(sizeof(TgfSpeedAttributeSet_OnRep_WeaponChangeSpeedRate) == 0x000010, "Wrong size on TgfSpeedAttributeSet_OnRep_WeaponChangeSpeedRate");
static_assert(offsetof(TgfSpeedAttributeSet_OnRep_WeaponChangeSpeedRate, OldValue) == 0x000000, "Member 'TgfSpeedAttributeSet_OnRep_WeaponChangeSpeedRate::OldValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.GetLevelInteractSpeedFinal
// 0x0008 (0x0008 - 0x0000)
struct TgfSpeedAttributeSet_GetLevelInteractSpeedFinal final
{
public:
	float                                         BaseTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_GetLevelInteractSpeedFinal) == 0x000004, "Wrong alignment on TgfSpeedAttributeSet_GetLevelInteractSpeedFinal");
static_assert(sizeof(TgfSpeedAttributeSet_GetLevelInteractSpeedFinal) == 0x000008, "Wrong size on TgfSpeedAttributeSet_GetLevelInteractSpeedFinal");
static_assert(offsetof(TgfSpeedAttributeSet_GetLevelInteractSpeedFinal, BaseTime) == 0x000000, "Member 'TgfSpeedAttributeSet_GetLevelInteractSpeedFinal::BaseTime' has a wrong offset!");
static_assert(offsetof(TgfSpeedAttributeSet_GetLevelInteractSpeedFinal, ReturnValue) == 0x000004, "Member 'TgfSpeedAttributeSet_GetLevelInteractSpeedFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.GetMoveSpeedFinal
// 0x0004 (0x0004 - 0x0000)
struct TgfSpeedAttributeSet_GetMoveSpeedFinal final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_GetMoveSpeedFinal) == 0x000004, "Wrong alignment on TgfSpeedAttributeSet_GetMoveSpeedFinal");
static_assert(sizeof(TgfSpeedAttributeSet_GetMoveSpeedFinal) == 0x000004, "Wrong size on TgfSpeedAttributeSet_GetMoveSpeedFinal");
static_assert(offsetof(TgfSpeedAttributeSet_GetMoveSpeedFinal, ReturnValue) == 0x000000, "Member 'TgfSpeedAttributeSet_GetMoveSpeedFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfSpeedAttributeSet.GetSpellCastSpeedFinal
// 0x0008 (0x0008 - 0x0000)
struct TgfSpeedAttributeSet_GetSpellCastSpeedFinal final
{
public:
	float                                         BaseTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfSpeedAttributeSet_GetSpellCastSpeedFinal) == 0x000004, "Wrong alignment on TgfSpeedAttributeSet_GetSpellCastSpeedFinal");
static_assert(sizeof(TgfSpeedAttributeSet_GetSpellCastSpeedFinal) == 0x000008, "Wrong size on TgfSpeedAttributeSet_GetSpellCastSpeedFinal");
static_assert(offsetof(TgfSpeedAttributeSet_GetSpellCastSpeedFinal, BaseTime) == 0x000000, "Member 'TgfSpeedAttributeSet_GetSpellCastSpeedFinal::BaseTime' has a wrong offset!");
static_assert(offsetof(TgfSpeedAttributeSet_GetSpellCastSpeedFinal, ReturnValue) == 0x000004, "Member 'TgfSpeedAttributeSet_GetSpellCastSpeedFinal::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfStatEffectAttributeSet.OnRep_AttackBoostRateWithFullHealth
// 0x0010 (0x0010 - 0x0000)
struct TgfStatEffectAttributeSet_OnRep_AttackBoostRateWithFullHealth final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStatEffectAttributeSet_OnRep_AttackBoostRateWithFullHealth) == 0x000008, "Wrong alignment on TgfStatEffectAttributeSet_OnRep_AttackBoostRateWithFullHealth");
static_assert(sizeof(TgfStatEffectAttributeSet_OnRep_AttackBoostRateWithFullHealth) == 0x000010, "Wrong size on TgfStatEffectAttributeSet_OnRep_AttackBoostRateWithFullHealth");
static_assert(offsetof(TgfStatEffectAttributeSet_OnRep_AttackBoostRateWithFullHealth, OldValue) == 0x000000, "Member 'TgfStatEffectAttributeSet_OnRep_AttackBoostRateWithFullHealth::OldValue' has a wrong offset!");

// Function LyraGame.TgfStatEffectAttributeSet.OnRep_CriticalRateWithFullHealth
// 0x0010 (0x0010 - 0x0000)
struct TgfStatEffectAttributeSet_OnRep_CriticalRateWithFullHealth final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStatEffectAttributeSet_OnRep_CriticalRateWithFullHealth) == 0x000008, "Wrong alignment on TgfStatEffectAttributeSet_OnRep_CriticalRateWithFullHealth");
static_assert(sizeof(TgfStatEffectAttributeSet_OnRep_CriticalRateWithFullHealth) == 0x000010, "Wrong size on TgfStatEffectAttributeSet_OnRep_CriticalRateWithFullHealth");
static_assert(offsetof(TgfStatEffectAttributeSet_OnRep_CriticalRateWithFullHealth, OldValue) == 0x000000, "Member 'TgfStatEffectAttributeSet_OnRep_CriticalRateWithFullHealth::OldValue' has a wrong offset!");

// Function LyraGame.TgfStatEffectAttributeSet.OnRep_CriticalRateWithHitRunning
// 0x0010 (0x0010 - 0x0000)
struct TgfStatEffectAttributeSet_OnRep_CriticalRateWithHitRunning final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStatEffectAttributeSet_OnRep_CriticalRateWithHitRunning) == 0x000008, "Wrong alignment on TgfStatEffectAttributeSet_OnRep_CriticalRateWithHitRunning");
static_assert(sizeof(TgfStatEffectAttributeSet_OnRep_CriticalRateWithHitRunning) == 0x000010, "Wrong size on TgfStatEffectAttributeSet_OnRep_CriticalRateWithHitRunning");
static_assert(offsetof(TgfStatEffectAttributeSet_OnRep_CriticalRateWithHitRunning, OldValue) == 0x000000, "Member 'TgfStatEffectAttributeSet_OnRep_CriticalRateWithHitRunning::OldValue' has a wrong offset!");

// Function LyraGame.TgfStatEffectAttributeSet.OnRep_HealOverTimeWithHitRunning
// 0x0010 (0x0010 - 0x0000)
struct TgfStatEffectAttributeSet_OnRep_HealOverTimeWithHitRunning final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStatEffectAttributeSet_OnRep_HealOverTimeWithHitRunning) == 0x000008, "Wrong alignment on TgfStatEffectAttributeSet_OnRep_HealOverTimeWithHitRunning");
static_assert(sizeof(TgfStatEffectAttributeSet_OnRep_HealOverTimeWithHitRunning) == 0x000010, "Wrong size on TgfStatEffectAttributeSet_OnRep_HealOverTimeWithHitRunning");
static_assert(offsetof(TgfStatEffectAttributeSet_OnRep_HealOverTimeWithHitRunning, OldValue) == 0x000000, "Member 'TgfStatEffectAttributeSet_OnRep_HealOverTimeWithHitRunning::OldValue' has a wrong offset!");

// Function LyraGame.TgfStatEffectAttributeSet.OnRep_LifeLeachRateWithHitRunning
// 0x0010 (0x0010 - 0x0000)
struct TgfStatEffectAttributeSet_OnRep_LifeLeachRateWithHitRunning final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStatEffectAttributeSet_OnRep_LifeLeachRateWithHitRunning) == 0x000008, "Wrong alignment on TgfStatEffectAttributeSet_OnRep_LifeLeachRateWithHitRunning");
static_assert(sizeof(TgfStatEffectAttributeSet_OnRep_LifeLeachRateWithHitRunning) == 0x000010, "Wrong size on TgfStatEffectAttributeSet_OnRep_LifeLeachRateWithHitRunning");
static_assert(offsetof(TgfStatEffectAttributeSet_OnRep_LifeLeachRateWithHitRunning, OldValue) == 0x000000, "Member 'TgfStatEffectAttributeSet_OnRep_LifeLeachRateWithHitRunning::OldValue' has a wrong offset!");

// Function LyraGame.TgfStatEffectAttributeSet.OnRep_MoveSpeedWithHitRunning
// 0x0010 (0x0010 - 0x0000)
struct TgfStatEffectAttributeSet_OnRep_MoveSpeedWithHitRunning final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfStatEffectAttributeSet_OnRep_MoveSpeedWithHitRunning) == 0x000008, "Wrong alignment on TgfStatEffectAttributeSet_OnRep_MoveSpeedWithHitRunning");
static_assert(sizeof(TgfStatEffectAttributeSet_OnRep_MoveSpeedWithHitRunning) == 0x000010, "Wrong size on TgfStatEffectAttributeSet_OnRep_MoveSpeedWithHitRunning");
static_assert(offsetof(TgfStatEffectAttributeSet_OnRep_MoveSpeedWithHitRunning, OldValue) == 0x000000, "Member 'TgfStatEffectAttributeSet_OnRep_MoveSpeedWithHitRunning::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_AdditionalElementDarkDamageOnCausingHit
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_AdditionalElementDarkDamageOnCausingHit final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementDarkDamageOnCausingHit) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementDarkDamageOnCausingHit");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementDarkDamageOnCausingHit) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementDarkDamageOnCausingHit");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementDarkDamageOnCausingHit, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_AdditionalElementDarkDamageOnCausingHit::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_AdditionalElementFireDamageOnCausingHit
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_AdditionalElementFireDamageOnCausingHit final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementFireDamageOnCausingHit) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementFireDamageOnCausingHit");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementFireDamageOnCausingHit) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementFireDamageOnCausingHit");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementFireDamageOnCausingHit, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_AdditionalElementFireDamageOnCausingHit::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_AdditionalElementIceDamageOnCausingHit
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_AdditionalElementIceDamageOnCausingHit final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementIceDamageOnCausingHit) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementIceDamageOnCausingHit");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementIceDamageOnCausingHit) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementIceDamageOnCausingHit");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementIceDamageOnCausingHit, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_AdditionalElementIceDamageOnCausingHit::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_AdditionalElementLightDamageOnCausingHit
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_AdditionalElementLightDamageOnCausingHit final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementLightDamageOnCausingHit) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementLightDamageOnCausingHit");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementLightDamageOnCausingHit) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementLightDamageOnCausingHit");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementLightDamageOnCausingHit, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_AdditionalElementLightDamageOnCausingHit::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_AdditionalElementNoneDamageOnCausingHit
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_AdditionalElementNoneDamageOnCausingHit final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementNoneDamageOnCausingHit) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementNoneDamageOnCausingHit");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementNoneDamageOnCausingHit) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementNoneDamageOnCausingHit");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementNoneDamageOnCausingHit, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_AdditionalElementNoneDamageOnCausingHit::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_AdditionalElementThunderDamageOnCausingHit
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_AdditionalElementThunderDamageOnCausingHit final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementThunderDamageOnCausingHit) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementThunderDamageOnCausingHit");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementThunderDamageOnCausingHit) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_AdditionalElementThunderDamageOnCausingHit");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_AdditionalElementThunderDamageOnCausingHit, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_AdditionalElementThunderDamageOnCausingHit::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_AdditionalFixedDamageOnCausingHit
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_AdditionalFixedDamageOnCausingHit final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_AdditionalFixedDamageOnCausingHit) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_AdditionalFixedDamageOnCausingHit");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_AdditionalFixedDamageOnCausingHit) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_AdditionalFixedDamageOnCausingHit");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_AdditionalFixedDamageOnCausingHit, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_AdditionalFixedDamageOnCausingHit::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_AddShieldOnCastSkill
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_AddShieldOnCastSkill final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_AddShieldOnCastSkill) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_AddShieldOnCastSkill");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_AddShieldOnCastSkill) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_AddShieldOnCastSkill");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_AddShieldOnCastSkill, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_AddShieldOnCastSkill::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_DamageOnDefendSuccess
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_DamageOnDefendSuccess final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_DamageOnDefendSuccess) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_DamageOnDefendSuccess");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_DamageOnDefendSuccess) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_DamageOnDefendSuccess");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_DamageOnDefendSuccess, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_DamageOnDefendSuccess::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_GainGoldOnKill
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_GainGoldOnKill final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_GainGoldOnKill) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_GainGoldOnKill");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_GainGoldOnKill) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_GainGoldOnKill");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_GainGoldOnKill, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_GainGoldOnKill::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_GainGoldOnOpenChest
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_GainGoldOnOpenChest final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_GainGoldOnOpenChest) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_GainGoldOnOpenChest");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_GainGoldOnOpenChest) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_GainGoldOnOpenChest");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_GainGoldOnOpenChest, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_GainGoldOnOpenChest::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_HealOnDefendSuccess
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_HealOnDefendSuccess final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_HealOnDefendSuccess) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_HealOnDefendSuccess");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_HealOnDefendSuccess) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_HealOnDefendSuccess");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_HealOnDefendSuccess, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_HealOnDefendSuccess::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_HealOnOpenChest
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_HealOnOpenChest final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_HealOnOpenChest) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_HealOnOpenChest");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_HealOnOpenChest) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_HealOnOpenChest");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_HealOnOpenChest, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_HealOnOpenChest::OldValue' has a wrong offset!");

// Function LyraGame.TgfTriggerEffectAttributeSet.OnRep_MagicOnOpenChest
// 0x0010 (0x0010 - 0x0000)
struct TgfTriggerEffectAttributeSet_OnRep_MagicOnOpenChest final
{
public:
	struct FGameplayAttributeData                 OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfTriggerEffectAttributeSet_OnRep_MagicOnOpenChest) == 0x000008, "Wrong alignment on TgfTriggerEffectAttributeSet_OnRep_MagicOnOpenChest");
static_assert(sizeof(TgfTriggerEffectAttributeSet_OnRep_MagicOnOpenChest) == 0x000010, "Wrong size on TgfTriggerEffectAttributeSet_OnRep_MagicOnOpenChest");
static_assert(offsetof(TgfTriggerEffectAttributeSet_OnRep_MagicOnOpenChest, OldValue) == 0x000000, "Member 'TgfTriggerEffectAttributeSet_OnRep_MagicOnOpenChest::OldValue' has a wrong offset!");

// Function LyraGame.TgfExecutionModifier.TurnOnGameplayEffectModifier
// 0x0298 (0x0298 - 0x0000)
struct TgfExecutionModifier_TurnOnGameplayEffectModifier final
{
public:
	struct FGameplayEffectSpec                    Spec;                                              // 0x0000(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfExecutionModifier_TurnOnGameplayEffectModifier) == 0x000008, "Wrong alignment on TgfExecutionModifier_TurnOnGameplayEffectModifier");
static_assert(sizeof(TgfExecutionModifier_TurnOnGameplayEffectModifier) == 0x000298, "Wrong size on TgfExecutionModifier_TurnOnGameplayEffectModifier");
static_assert(offsetof(TgfExecutionModifier_TurnOnGameplayEffectModifier, Spec) == 0x000000, "Member 'TgfExecutionModifier_TurnOnGameplayEffectModifier::Spec' has a wrong offset!");

// Function LyraGame.PickupableStatics.AddPickupToInventory
// 0x0018 (0x0018 - 0x0000)
struct PickupableStatics_AddPickupToInventory final
{
public:
	class ULyraInventoryManagerComponent*         InventoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IPickupable>           Pickup;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PickupableStatics_AddPickupToInventory) == 0x000008, "Wrong alignment on PickupableStatics_AddPickupToInventory");
static_assert(sizeof(PickupableStatics_AddPickupToInventory) == 0x000018, "Wrong size on PickupableStatics_AddPickupToInventory");
static_assert(offsetof(PickupableStatics_AddPickupToInventory, InventoryComponent) == 0x000000, "Member 'PickupableStatics_AddPickupToInventory::InventoryComponent' has a wrong offset!");
static_assert(offsetof(PickupableStatics_AddPickupToInventory, Pickup) == 0x000008, "Member 'PickupableStatics_AddPickupToInventory::Pickup' has a wrong offset!");

// Function LyraGame.PickupableStatics.GetFirstPickupableFromActor
// 0x0018 (0x0018 - 0x0000)
struct PickupableStatics_GetFirstPickupableFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IPickupable>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PickupableStatics_GetFirstPickupableFromActor) == 0x000008, "Wrong alignment on PickupableStatics_GetFirstPickupableFromActor");
static_assert(sizeof(PickupableStatics_GetFirstPickupableFromActor) == 0x000018, "Wrong size on PickupableStatics_GetFirstPickupableFromActor");
static_assert(offsetof(PickupableStatics_GetFirstPickupableFromActor, Actor) == 0x000000, "Member 'PickupableStatics_GetFirstPickupableFromActor::Actor' has a wrong offset!");
static_assert(offsetof(PickupableStatics_GetFirstPickupableFromActor, ReturnValue) == 0x000008, "Member 'PickupableStatics_GetFirstPickupableFromActor::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraContextEffectsLibrary.GetEffects
// 0x0048 (0x0048 - 0x0000)
struct LyraContextEffectsLibrary_GetEffects final
{
public:
	struct FGameplayTag                           Effect;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Context;                                           // 0x0008(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     Sounds;                                            // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UNiagaraSystem*>                 NiagaraSystems;                                    // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraContextEffectsLibrary_GetEffects) == 0x000008, "Wrong alignment on LyraContextEffectsLibrary_GetEffects");
static_assert(sizeof(LyraContextEffectsLibrary_GetEffects) == 0x000048, "Wrong size on LyraContextEffectsLibrary_GetEffects");
static_assert(offsetof(LyraContextEffectsLibrary_GetEffects, Effect) == 0x000000, "Member 'LyraContextEffectsLibrary_GetEffects::Effect' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsLibrary_GetEffects, Context) == 0x000008, "Member 'LyraContextEffectsLibrary_GetEffects::Context' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsLibrary_GetEffects, Sounds) == 0x000028, "Member 'LyraContextEffectsLibrary_GetEffects::Sounds' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsLibrary_GetEffects, NiagaraSystems) == 0x000038, "Member 'LyraContextEffectsLibrary_GetEffects::NiagaraSystems' has a wrong offset!");

// Function LyraGame.LyraPlayerController.ClientEstimatePing
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerController_ClientEstimatePing final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_ClientEstimatePing) == 0x000004, "Wrong alignment on LyraPlayerController_ClientEstimatePing");
static_assert(sizeof(LyraPlayerController_ClientEstimatePing) == 0x000004, "Wrong size on LyraPlayerController_ClientEstimatePing");
static_assert(offsetof(LyraPlayerController_ClientEstimatePing, DeltaTime) == 0x000000, "Member 'LyraPlayerController_ClientEstimatePing::DeltaTime' has a wrong offset!");

// Function LyraGame.LyraPlayerController.ClientPingEstimationReq
// 0x0010 (0x0010 - 0x0000)
struct LyraPlayerController_ClientPingEstimationReq final
{
public:
	int32                                         Version;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ClientCallTime;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_ClientPingEstimationReq) == 0x000008, "Wrong alignment on LyraPlayerController_ClientPingEstimationReq");
static_assert(sizeof(LyraPlayerController_ClientPingEstimationReq) == 0x000010, "Wrong size on LyraPlayerController_ClientPingEstimationReq");
static_assert(offsetof(LyraPlayerController_ClientPingEstimationReq, Version) == 0x000000, "Member 'LyraPlayerController_ClientPingEstimationReq::Version' has a wrong offset!");
static_assert(offsetof(LyraPlayerController_ClientPingEstimationReq, ClientCallTime) == 0x000008, "Member 'LyraPlayerController_ClientPingEstimationReq::ClientCallTime' has a wrong offset!");

// Function LyraGame.LyraPlayerController.GetCurrentViewTarget
// 0x0008 (0x0008 - 0x0000)
struct LyraPlayerController_GetCurrentViewTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_GetCurrentViewTarget) == 0x000008, "Wrong alignment on LyraPlayerController_GetCurrentViewTarget");
static_assert(sizeof(LyraPlayerController_GetCurrentViewTarget) == 0x000008, "Wrong size on LyraPlayerController_GetCurrentViewTarget");
static_assert(offsetof(LyraPlayerController_GetCurrentViewTarget, ReturnValue) == 0x000000, "Member 'LyraPlayerController_GetCurrentViewTarget::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerController.GetPredictPing
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerController_GetPredictPing final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_GetPredictPing) == 0x000004, "Wrong alignment on LyraPlayerController_GetPredictPing");
static_assert(sizeof(LyraPlayerController_GetPredictPing) == 0x000004, "Wrong size on LyraPlayerController_GetPredictPing");
static_assert(offsetof(LyraPlayerController_GetPredictPing, ReturnValue) == 0x000000, "Member 'LyraPlayerController_GetPredictPing::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerController.GetReconnect
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerController_GetReconnect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_GetReconnect) == 0x000001, "Wrong alignment on LyraPlayerController_GetReconnect");
static_assert(sizeof(LyraPlayerController_GetReconnect) == 0x000001, "Wrong size on LyraPlayerController_GetReconnect");
static_assert(offsetof(LyraPlayerController_GetReconnect, ReturnValue) == 0x000000, "Member 'LyraPlayerController_GetReconnect::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerController.GetSpectatorMode
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerController_GetSpectatorMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_GetSpectatorMode) == 0x000001, "Wrong alignment on LyraPlayerController_GetSpectatorMode");
static_assert(sizeof(LyraPlayerController_GetSpectatorMode) == 0x000001, "Wrong size on LyraPlayerController_GetSpectatorMode");
static_assert(offsetof(LyraPlayerController_GetSpectatorMode, ReturnValue) == 0x000000, "Member 'LyraPlayerController_GetSpectatorMode::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerController.IncreaseAndCheckSecurityInvalidCount
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerController_IncreaseAndCheckSecurityInvalidCount final
{
public:
	int32                                         Reason;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_IncreaseAndCheckSecurityInvalidCount) == 0x000004, "Wrong alignment on LyraPlayerController_IncreaseAndCheckSecurityInvalidCount");
static_assert(sizeof(LyraPlayerController_IncreaseAndCheckSecurityInvalidCount) == 0x000004, "Wrong size on LyraPlayerController_IncreaseAndCheckSecurityInvalidCount");
static_assert(offsetof(LyraPlayerController_IncreaseAndCheckSecurityInvalidCount, Reason) == 0x000000, "Member 'LyraPlayerController_IncreaseAndCheckSecurityInvalidCount::Reason' has a wrong offset!");

// Function LyraGame.LyraPlayerController.OnPlayerStateChangedTeam
// 0x0010 (0x0010 - 0x0000)
struct LyraPlayerController_OnPlayerStateChangedTeam final
{
public:
	class UObject*                                TeamAgent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldTeam;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeam;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_OnPlayerStateChangedTeam) == 0x000008, "Wrong alignment on LyraPlayerController_OnPlayerStateChangedTeam");
static_assert(sizeof(LyraPlayerController_OnPlayerStateChangedTeam) == 0x000010, "Wrong size on LyraPlayerController_OnPlayerStateChangedTeam");
static_assert(offsetof(LyraPlayerController_OnPlayerStateChangedTeam, TeamAgent) == 0x000000, "Member 'LyraPlayerController_OnPlayerStateChangedTeam::TeamAgent' has a wrong offset!");
static_assert(offsetof(LyraPlayerController_OnPlayerStateChangedTeam, OldTeam) == 0x000008, "Member 'LyraPlayerController_OnPlayerStateChangedTeam::OldTeam' has a wrong offset!");
static_assert(offsetof(LyraPlayerController_OnPlayerStateChangedTeam, NewTeam) == 0x00000C, "Member 'LyraPlayerController_OnPlayerStateChangedTeam::NewTeam' has a wrong offset!");

// Function LyraGame.LyraPlayerController.ServerCheat
// 0x0010 (0x0010 - 0x0000)
struct LyraPlayerController_ServerCheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_ServerCheat) == 0x000008, "Wrong alignment on LyraPlayerController_ServerCheat");
static_assert(sizeof(LyraPlayerController_ServerCheat) == 0x000010, "Wrong size on LyraPlayerController_ServerCheat");
static_assert(offsetof(LyraPlayerController_ServerCheat, Msg) == 0x000000, "Member 'LyraPlayerController_ServerCheat::Msg' has a wrong offset!");

// Function LyraGame.LyraPlayerController.ServerCheatAll
// 0x0010 (0x0010 - 0x0000)
struct LyraPlayerController_ServerCheatAll final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_ServerCheatAll) == 0x000008, "Wrong alignment on LyraPlayerController_ServerCheatAll");
static_assert(sizeof(LyraPlayerController_ServerCheatAll) == 0x000010, "Wrong size on LyraPlayerController_ServerCheatAll");
static_assert(offsetof(LyraPlayerController_ServerCheatAll, Msg) == 0x000000, "Member 'LyraPlayerController_ServerCheatAll::Msg' has a wrong offset!");

// Function LyraGame.LyraPlayerController.ServerPingEstimationRsp
// 0x0010 (0x0010 - 0x0000)
struct LyraPlayerController_ServerPingEstimationRsp final
{
public:
	int32                                         Version;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallTime;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_ServerPingEstimationRsp) == 0x000008, "Wrong alignment on LyraPlayerController_ServerPingEstimationRsp");
static_assert(sizeof(LyraPlayerController_ServerPingEstimationRsp) == 0x000010, "Wrong size on LyraPlayerController_ServerPingEstimationRsp");
static_assert(offsetof(LyraPlayerController_ServerPingEstimationRsp, Version) == 0x000000, "Member 'LyraPlayerController_ServerPingEstimationRsp::Version' has a wrong offset!");
static_assert(offsetof(LyraPlayerController_ServerPingEstimationRsp, CallTime) == 0x000008, "Member 'LyraPlayerController_ServerPingEstimationRsp::CallTime' has a wrong offset!");

// Function LyraGame.LyraPlayerController.SetIgnoreFlushPressedKeys
// 0x0010 (0x0010 - 0x0000)
struct LyraPlayerController_SetIgnoreFlushPressedKeys final
{
public:
	TArray<class UInputAction*>                   IgnoreInputActions;                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_SetIgnoreFlushPressedKeys) == 0x000008, "Wrong alignment on LyraPlayerController_SetIgnoreFlushPressedKeys");
static_assert(sizeof(LyraPlayerController_SetIgnoreFlushPressedKeys) == 0x000010, "Wrong size on LyraPlayerController_SetIgnoreFlushPressedKeys");
static_assert(offsetof(LyraPlayerController_SetIgnoreFlushPressedKeys, IgnoreInputActions) == 0x000000, "Member 'LyraPlayerController_SetIgnoreFlushPressedKeys::IgnoreInputActions' has a wrong offset!");

// Function LyraGame.LyraPlayerController.SetIsAutoRunning
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerController_SetIsAutoRunning final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_SetIsAutoRunning) == 0x000001, "Wrong alignment on LyraPlayerController_SetIsAutoRunning");
static_assert(sizeof(LyraPlayerController_SetIsAutoRunning) == 0x000001, "Wrong size on LyraPlayerController_SetIsAutoRunning");
static_assert(offsetof(LyraPlayerController_SetIsAutoRunning, bEnabled) == 0x000000, "Member 'LyraPlayerController_SetIsAutoRunning::bEnabled' has a wrong offset!");

// Function LyraGame.LyraPlayerController.Teleport
// 0x0030 (0x0030 - 0x0000)
struct LyraPlayerController_Teleport final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_Teleport) == 0x000008, "Wrong alignment on LyraPlayerController_Teleport");
static_assert(sizeof(LyraPlayerController_Teleport) == 0x000030, "Wrong size on LyraPlayerController_Teleport");
static_assert(offsetof(LyraPlayerController_Teleport, NewLocation) == 0x000000, "Member 'LyraPlayerController_Teleport::NewLocation' has a wrong offset!");
static_assert(offsetof(LyraPlayerController_Teleport, NewRotation) == 0x000018, "Member 'LyraPlayerController_Teleport::NewRotation' has a wrong offset!");

// Function LyraGame.LyraPlayerController.TryToRecordClientReplay
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerController_TryToRecordClientReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_TryToRecordClientReplay) == 0x000001, "Wrong alignment on LyraPlayerController_TryToRecordClientReplay");
static_assert(sizeof(LyraPlayerController_TryToRecordClientReplay) == 0x000001, "Wrong size on LyraPlayerController_TryToRecordClientReplay");
static_assert(offsetof(LyraPlayerController_TryToRecordClientReplay, ReturnValue) == 0x000000, "Member 'LyraPlayerController_TryToRecordClientReplay::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerController.GetIsAutoRunning
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerController_GetIsAutoRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_GetIsAutoRunning) == 0x000001, "Wrong alignment on LyraPlayerController_GetIsAutoRunning");
static_assert(sizeof(LyraPlayerController_GetIsAutoRunning) == 0x000001, "Wrong size on LyraPlayerController_GetIsAutoRunning");
static_assert(offsetof(LyraPlayerController_GetIsAutoRunning, ReturnValue) == 0x000000, "Member 'LyraPlayerController_GetIsAutoRunning::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerController.GetLyraAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraPlayerController_GetLyraAbilitySystemComponent final
{
public:
	class ULyraAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_GetLyraAbilitySystemComponent) == 0x000008, "Wrong alignment on LyraPlayerController_GetLyraAbilitySystemComponent");
static_assert(sizeof(LyraPlayerController_GetLyraAbilitySystemComponent) == 0x000008, "Wrong size on LyraPlayerController_GetLyraAbilitySystemComponent");
static_assert(offsetof(LyraPlayerController_GetLyraAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'LyraPlayerController_GetLyraAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerController.GetLyraHUD
// 0x0008 (0x0008 - 0x0000)
struct LyraPlayerController_GetLyraHUD final
{
public:
	class ALyraHUD*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_GetLyraHUD) == 0x000008, "Wrong alignment on LyraPlayerController_GetLyraHUD");
static_assert(sizeof(LyraPlayerController_GetLyraHUD) == 0x000008, "Wrong size on LyraPlayerController_GetLyraHUD");
static_assert(offsetof(LyraPlayerController_GetLyraHUD, ReturnValue) == 0x000000, "Member 'LyraPlayerController_GetLyraHUD::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerController.GetLyraPlayerState
// 0x0008 (0x0008 - 0x0000)
struct LyraPlayerController_GetLyraPlayerState final
{
public:
	class ALyraPlayerState*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_GetLyraPlayerState) == 0x000008, "Wrong alignment on LyraPlayerController_GetLyraPlayerState");
static_assert(sizeof(LyraPlayerController_GetLyraPlayerState) == 0x000008, "Wrong size on LyraPlayerController_GetLyraPlayerState");
static_assert(offsetof(LyraPlayerController_GetLyraPlayerState, ReturnValue) == 0x000000, "Member 'LyraPlayerController_GetLyraPlayerState::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerController.IsOnlyAliving
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerController_IsOnlyAliving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerController_IsOnlyAliving) == 0x000001, "Wrong alignment on LyraPlayerController_IsOnlyAliving");
static_assert(sizeof(LyraPlayerController_IsOnlyAliving) == 0x000001, "Wrong size on LyraPlayerController_IsOnlyAliving");
static_assert(offsetof(LyraPlayerController_IsOnlyAliving, ReturnValue) == 0x000000, "Member 'LyraPlayerController_IsOnlyAliving::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraContextEffectComponent.AnimMotionEffect_Implementation
// 0x0180 (0x0180 - 0x0000)
struct LyraContextEffectComponent_AnimMotionEffect_Implementation final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MotionEffect;                                      // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        StaticMeshComponent;                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                AnimationSequence;                                 // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitSuccess;                                       // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0058(0x00E8)(ConstParm, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Contexts;                                          // 0x0140(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                VFXScale;                                          // 0x0160(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolume;                                       // 0x0178(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioPitch;                                        // 0x017C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraContextEffectComponent_AnimMotionEffect_Implementation) == 0x000008, "Wrong alignment on LyraContextEffectComponent_AnimMotionEffect_Implementation");
static_assert(sizeof(LyraContextEffectComponent_AnimMotionEffect_Implementation) == 0x000180, "Wrong size on LyraContextEffectComponent_AnimMotionEffect_Implementation");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, bone) == 0x000000, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::bone' has a wrong offset!");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, MotionEffect) == 0x000008, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::MotionEffect' has a wrong offset!");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, StaticMeshComponent) == 0x000010, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, LocationOffset) == 0x000018, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::LocationOffset' has a wrong offset!");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, RotationOffset) == 0x000030, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::RotationOffset' has a wrong offset!");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, AnimationSequence) == 0x000048, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::AnimationSequence' has a wrong offset!");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, bHitSuccess) == 0x000050, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::bHitSuccess' has a wrong offset!");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, HitResult) == 0x000058, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::HitResult' has a wrong offset!");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, Contexts) == 0x000140, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::Contexts' has a wrong offset!");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, VFXScale) == 0x000160, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::VFXScale' has a wrong offset!");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, AudioVolume) == 0x000178, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::AudioVolume' has a wrong offset!");
static_assert(offsetof(LyraContextEffectComponent_AnimMotionEffect_Implementation, AudioPitch) == 0x00017C, "Member 'LyraContextEffectComponent_AnimMotionEffect_Implementation::AudioPitch' has a wrong offset!");

// Function LyraGame.LyraContextEffectComponent.UpdateEffectContexts
// 0x0020 (0x0020 - 0x0000)
struct LyraContextEffectComponent_UpdateEffectContexts final
{
public:
	struct FGameplayTagContainer                  NewEffectContexts;                                 // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraContextEffectComponent_UpdateEffectContexts) == 0x000008, "Wrong alignment on LyraContextEffectComponent_UpdateEffectContexts");
static_assert(sizeof(LyraContextEffectComponent_UpdateEffectContexts) == 0x000020, "Wrong size on LyraContextEffectComponent_UpdateEffectContexts");
static_assert(offsetof(LyraContextEffectComponent_UpdateEffectContexts, NewEffectContexts) == 0x000000, "Member 'LyraContextEffectComponent_UpdateEffectContexts::NewEffectContexts' has a wrong offset!");

// Function LyraGame.LyraContextEffectComponent.UpdateLibraries
// 0x0050 (0x0050 - 0x0000)
struct LyraContextEffectComponent_UpdateLibraries final
{
public:
	TSet<TSoftObjectPtr<class ULyraContextEffectsLibrary>> NewContextEffectsLibraries;                        // 0x0000(0x0050)(Parm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraContextEffectComponent_UpdateLibraries) == 0x000008, "Wrong alignment on LyraContextEffectComponent_UpdateLibraries");
static_assert(sizeof(LyraContextEffectComponent_UpdateLibraries) == 0x000050, "Wrong size on LyraContextEffectComponent_UpdateLibraries");
static_assert(offsetof(LyraContextEffectComponent_UpdateLibraries, NewContextEffectsLibraries) == 0x000000, "Member 'LyraContextEffectComponent_UpdateLibraries::NewContextEffectsLibraries' has a wrong offset!");

// Function LyraGame.LyraAbilitySet.DealAdditionalAbilitySystem
// 0x0088 (0x0088 - 0x0000)
struct LyraAbilitySet_DealAdditionalAbilitySystem final
{
public:
	class ULyraAbilitySystemComponent*            LyraASC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLyraAbilitySet_GrantedHandles         OutGrantedHandles;                                 // 0x0008(0x0080)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySet_DealAdditionalAbilitySystem) == 0x000008, "Wrong alignment on LyraAbilitySet_DealAdditionalAbilitySystem");
static_assert(sizeof(LyraAbilitySet_DealAdditionalAbilitySystem) == 0x000088, "Wrong size on LyraAbilitySet_DealAdditionalAbilitySystem");
static_assert(offsetof(LyraAbilitySet_DealAdditionalAbilitySystem, LyraASC) == 0x000000, "Member 'LyraAbilitySet_DealAdditionalAbilitySystem::LyraASC' has a wrong offset!");
static_assert(offsetof(LyraAbilitySet_DealAdditionalAbilitySystem, OutGrantedHandles) == 0x000008, "Member 'LyraAbilitySet_DealAdditionalAbilitySystem::OutGrantedHandles' has a wrong offset!");

// Function LyraGame.LyraAbilitySet.GetGrantedGameplayAbilityClasses
// 0x0010 (0x0010 - 0x0000)
struct LyraAbilitySet_GetGrantedGameplayAbilityClasses final
{
public:
	TArray<TSubclassOf<class ULyraGameplayAbility>> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySet_GetGrantedGameplayAbilityClasses) == 0x000008, "Wrong alignment on LyraAbilitySet_GetGrantedGameplayAbilityClasses");
static_assert(sizeof(LyraAbilitySet_GetGrantedGameplayAbilityClasses) == 0x000010, "Wrong size on LyraAbilitySet_GetGrantedGameplayAbilityClasses");
static_assert(offsetof(LyraAbilitySet_GetGrantedGameplayAbilityClasses, ReturnValue) == 0x000000, "Member 'LyraAbilitySet_GetGrantedGameplayAbilityClasses::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySet.GiveToAbilitySystem
// 0x0098 (0x0098 - 0x0000)
struct LyraAbilitySet_GiveToAbilitySystem final
{
public:
	class ULyraAbilitySystemComponent*            LyraASC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLyraAbilitySet_GrantedHandles         OutGrantedHandles;                                 // 0x0008(0x0080)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                SourceObject;                                      // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETgfEquipAttrParseType                        AttrParseType;                                     // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraAbilitySet_GiveToAbilitySystem) == 0x000008, "Wrong alignment on LyraAbilitySet_GiveToAbilitySystem");
static_assert(sizeof(LyraAbilitySet_GiveToAbilitySystem) == 0x000098, "Wrong size on LyraAbilitySet_GiveToAbilitySystem");
static_assert(offsetof(LyraAbilitySet_GiveToAbilitySystem, LyraASC) == 0x000000, "Member 'LyraAbilitySet_GiveToAbilitySystem::LyraASC' has a wrong offset!");
static_assert(offsetof(LyraAbilitySet_GiveToAbilitySystem, OutGrantedHandles) == 0x000008, "Member 'LyraAbilitySet_GiveToAbilitySystem::OutGrantedHandles' has a wrong offset!");
static_assert(offsetof(LyraAbilitySet_GiveToAbilitySystem, SourceObject) == 0x000088, "Member 'LyraAbilitySet_GiveToAbilitySystem::SourceObject' has a wrong offset!");
static_assert(offsetof(LyraAbilitySet_GiveToAbilitySystem, AttrParseType) == 0x000090, "Member 'LyraAbilitySet_GiveToAbilitySystem::AttrParseType' has a wrong offset!");

// Function LyraGame.LyraAbilitySet.NeedEnableInAdditionalSlot
// 0x0001 (0x0001 - 0x0000)
struct LyraAbilitySet_NeedEnableInAdditionalSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySet_NeedEnableInAdditionalSlot) == 0x000001, "Wrong alignment on LyraAbilitySet_NeedEnableInAdditionalSlot");
static_assert(sizeof(LyraAbilitySet_NeedEnableInAdditionalSlot) == 0x000001, "Wrong size on LyraAbilitySet_NeedEnableInAdditionalSlot");
static_assert(offsetof(LyraAbilitySet_NeedEnableInAdditionalSlot, ReturnValue) == 0x000000, "Member 'LyraAbilitySet_NeedEnableInAdditionalSlot::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraLocalPlayer.OnCompletedAudioDeviceSwap
// 0x0028 (0x0028 - 0x0000)
struct LyraLocalPlayer_OnCompletedAudioDeviceSwap final
{
public:
	struct FSwapAudioOutputResult                 SwapResult;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLocalPlayer_OnCompletedAudioDeviceSwap) == 0x000008, "Wrong alignment on LyraLocalPlayer_OnCompletedAudioDeviceSwap");
static_assert(sizeof(LyraLocalPlayer_OnCompletedAudioDeviceSwap) == 0x000028, "Wrong size on LyraLocalPlayer_OnCompletedAudioDeviceSwap");
static_assert(offsetof(LyraLocalPlayer_OnCompletedAudioDeviceSwap, SwapResult) == 0x000000, "Member 'LyraLocalPlayer_OnCompletedAudioDeviceSwap::SwapResult' has a wrong offset!");

// Function LyraGame.LyraLocalPlayer.OnControllerChangedTeam
// 0x0010 (0x0010 - 0x0000)
struct LyraLocalPlayer_OnControllerChangedTeam final
{
public:
	class UObject*                                TeamAgent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldTeam;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeam;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLocalPlayer_OnControllerChangedTeam) == 0x000008, "Wrong alignment on LyraLocalPlayer_OnControllerChangedTeam");
static_assert(sizeof(LyraLocalPlayer_OnControllerChangedTeam) == 0x000010, "Wrong size on LyraLocalPlayer_OnControllerChangedTeam");
static_assert(offsetof(LyraLocalPlayer_OnControllerChangedTeam, TeamAgent) == 0x000000, "Member 'LyraLocalPlayer_OnControllerChangedTeam::TeamAgent' has a wrong offset!");
static_assert(offsetof(LyraLocalPlayer_OnControllerChangedTeam, OldTeam) == 0x000008, "Member 'LyraLocalPlayer_OnControllerChangedTeam::OldTeam' has a wrong offset!");
static_assert(offsetof(LyraLocalPlayer_OnControllerChangedTeam, NewTeam) == 0x00000C, "Member 'LyraLocalPlayer_OnControllerChangedTeam::NewTeam' has a wrong offset!");

// Function LyraGame.LyraLocalPlayer.GetLocalSettings
// 0x0008 (0x0008 - 0x0000)
struct LyraLocalPlayer_GetLocalSettings final
{
public:
	class ULyraSettingsLocal*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLocalPlayer_GetLocalSettings) == 0x000008, "Wrong alignment on LyraLocalPlayer_GetLocalSettings");
static_assert(sizeof(LyraLocalPlayer_GetLocalSettings) == 0x000008, "Wrong size on LyraLocalPlayer_GetLocalSettings");
static_assert(offsetof(LyraLocalPlayer_GetLocalSettings, ReturnValue) == 0x000000, "Member 'LyraLocalPlayer_GetLocalSettings::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraLocalPlayer.GetSharedSettings
// 0x0008 (0x0008 - 0x0000)
struct LyraLocalPlayer_GetSharedSettings final
{
public:
	class ULyraSettingsShared*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLocalPlayer_GetSharedSettings) == 0x000008, "Wrong alignment on LyraLocalPlayer_GetSharedSettings");
static_assert(sizeof(LyraLocalPlayer_GetSharedSettings) == 0x000008, "Wrong size on LyraLocalPlayer_GetSharedSettings");
static_assert(offsetof(LyraLocalPlayer_GetSharedSettings, ReturnValue) == 0x000000, "Member 'LyraLocalPlayer_GetSharedSettings::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.AbilityInputTagPressed
// 0x0008 (0x0008 - 0x0000)
struct LyraAbilitySystemComponent_AbilityInputTagPressed final
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_AbilityInputTagPressed) == 0x000004, "Wrong alignment on LyraAbilitySystemComponent_AbilityInputTagPressed");
static_assert(sizeof(LyraAbilitySystemComponent_AbilityInputTagPressed) == 0x000008, "Wrong size on LyraAbilitySystemComponent_AbilityInputTagPressed");
static_assert(offsetof(LyraAbilitySystemComponent_AbilityInputTagPressed, InputTag) == 0x000000, "Member 'LyraAbilitySystemComponent_AbilityInputTagPressed::InputTag' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.AbilityInputTagReleased
// 0x0008 (0x0008 - 0x0000)
struct LyraAbilitySystemComponent_AbilityInputTagReleased final
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_AbilityInputTagReleased) == 0x000004, "Wrong alignment on LyraAbilitySystemComponent_AbilityInputTagReleased");
static_assert(sizeof(LyraAbilitySystemComponent_AbilityInputTagReleased) == 0x000008, "Wrong size on LyraAbilitySystemComponent_AbilityInputTagReleased");
static_assert(offsetof(LyraAbilitySystemComponent_AbilityInputTagReleased, InputTag) == 0x000000, "Member 'LyraAbilitySystemComponent_AbilityInputTagReleased::InputTag' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.AddInputTagDelayOverride
// 0x0010 (0x0010 - 0x0000)
struct LyraAbilitySystemComponent_AddInputTagDelayOverride final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Time;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_AddInputTagDelayOverride) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_AddInputTagDelayOverride");
static_assert(sizeof(LyraAbilitySystemComponent_AddInputTagDelayOverride) == 0x000010, "Wrong size on LyraAbilitySystemComponent_AddInputTagDelayOverride");
static_assert(offsetof(LyraAbilitySystemComponent_AddInputTagDelayOverride, Tag) == 0x000000, "Member 'LyraAbilitySystemComponent_AddInputTagDelayOverride::Tag' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_AddInputTagDelayOverride, Time) == 0x000008, "Member 'LyraAbilitySystemComponent_AddInputTagDelayOverride::Time' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.ApplyDumpedGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct LyraAbilitySystemComponent_ApplyDumpedGameplayEffect final
{
public:
	TArray<struct FTGFDumpedGameplayEffect>       DumpedArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_ApplyDumpedGameplayEffect) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_ApplyDumpedGameplayEffect");
static_assert(sizeof(LyraAbilitySystemComponent_ApplyDumpedGameplayEffect) == 0x000010, "Wrong size on LyraAbilitySystemComponent_ApplyDumpedGameplayEffect");
static_assert(offsetof(LyraAbilitySystemComponent_ApplyDumpedGameplayEffect, DumpedArray) == 0x000000, "Member 'LyraAbilitySystemComponent_ApplyDumpedGameplayEffect::DumpedArray' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.CancelAbilitiesOnOwnClient
// 0x0040 (0x0040 - 0x0000)
struct LyraAbilitySystemComponent_CancelAbilitiesOnOwnClient final
{
public:
	struct FGameplayTagContainer                  WithTags;                                          // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WithoutTags;                                       // 0x0020(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_CancelAbilitiesOnOwnClient) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_CancelAbilitiesOnOwnClient");
static_assert(sizeof(LyraAbilitySystemComponent_CancelAbilitiesOnOwnClient) == 0x000040, "Wrong size on LyraAbilitySystemComponent_CancelAbilitiesOnOwnClient");
static_assert(offsetof(LyraAbilitySystemComponent_CancelAbilitiesOnOwnClient, WithTags) == 0x000000, "Member 'LyraAbilitySystemComponent_CancelAbilitiesOnOwnClient::WithTags' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_CancelAbilitiesOnOwnClient, WithoutTags) == 0x000020, "Member 'LyraAbilitySystemComponent_CancelAbilitiesOnOwnClient::WithoutTags' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.ClientNotifyAbilityFailed
// 0x0028 (0x0028 - 0x0000)
struct LyraAbilitySystemComponent_ClientNotifyAbilityFailed final
{
public:
	const class UGameplayAbility*                 Ability;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  FailureReason;                                     // 0x0008(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_ClientNotifyAbilityFailed) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_ClientNotifyAbilityFailed");
static_assert(sizeof(LyraAbilitySystemComponent_ClientNotifyAbilityFailed) == 0x000028, "Wrong size on LyraAbilitySystemComponent_ClientNotifyAbilityFailed");
static_assert(offsetof(LyraAbilitySystemComponent_ClientNotifyAbilityFailed, Ability) == 0x000000, "Member 'LyraAbilitySystemComponent_ClientNotifyAbilityFailed::Ability' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_ClientNotifyAbilityFailed, FailureReason) == 0x000008, "Member 'LyraAbilitySystemComponent_ClientNotifyAbilityFailed::FailureReason' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.GetAbilityWithTag
// 0x0010 (0x0010 - 0x0000)
struct LyraAbilitySystemComponent_GetAbilityWithTag final
{
public:
	struct FGameplayAbilitySpecHandle             OutHandler;                                        // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraAbilitySystemComponent_GetAbilityWithTag) == 0x000004, "Wrong alignment on LyraAbilitySystemComponent_GetAbilityWithTag");
static_assert(sizeof(LyraAbilitySystemComponent_GetAbilityWithTag) == 0x000010, "Wrong size on LyraAbilitySystemComponent_GetAbilityWithTag");
static_assert(offsetof(LyraAbilitySystemComponent_GetAbilityWithTag, OutHandler) == 0x000000, "Member 'LyraAbilitySystemComponent_GetAbilityWithTag::OutHandler' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_GetAbilityWithTag, Tag) == 0x000004, "Member 'LyraAbilitySystemComponent_GetAbilityWithTag::Tag' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_GetAbilityWithTag, ReturnValue) == 0x00000C, "Member 'LyraAbilitySystemComponent_GetAbilityWithTag::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.GetAllActiveGameplayAbilitys
// 0x0010 (0x0010 - 0x0000)
struct LyraAbilitySystemComponent_GetAllActiveGameplayAbilitys final
{
public:
	TArray<class UGameplayAbility*>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_GetAllActiveGameplayAbilitys) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_GetAllActiveGameplayAbilitys");
static_assert(sizeof(LyraAbilitySystemComponent_GetAllActiveGameplayAbilitys) == 0x000010, "Wrong size on LyraAbilitySystemComponent_GetAllActiveGameplayAbilitys");
static_assert(offsetof(LyraAbilitySystemComponent_GetAllActiveGameplayAbilitys, ReturnValue) == 0x000000, "Member 'LyraAbilitySystemComponent_GetAllActiveGameplayAbilitys::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.GetAttributeComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraAbilitySystemComponent_GetAttributeComponent final
{
public:
	class UTgfAttributeComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_GetAttributeComponent) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_GetAttributeComponent");
static_assert(sizeof(LyraAbilitySystemComponent_GetAttributeComponent) == 0x000008, "Wrong size on LyraAbilitySystemComponent_GetAttributeComponent");
static_assert(offsetof(LyraAbilitySystemComponent_GetAttributeComponent, ReturnValue) == 0x000000, "Member 'LyraAbilitySystemComponent_GetAttributeComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.GetAuraManagerComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraAbilitySystemComponent_GetAuraManagerComponent final
{
public:
	class UTgfAuraManagerComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_GetAuraManagerComponent) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_GetAuraManagerComponent");
static_assert(sizeof(LyraAbilitySystemComponent_GetAuraManagerComponent) == 0x000008, "Wrong size on LyraAbilitySystemComponent_GetAuraManagerComponent");
static_assert(offsetof(LyraAbilitySystemComponent_GetAuraManagerComponent, ReturnValue) == 0x000000, "Member 'LyraAbilitySystemComponent_GetAuraManagerComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.GetCharaMoveExtComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraAbilitySystemComponent_GetCharaMoveExtComponent final
{
public:
	class UTgfCharacterMovementExtensionComponent* ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_GetCharaMoveExtComponent) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_GetCharaMoveExtComponent");
static_assert(sizeof(LyraAbilitySystemComponent_GetCharaMoveExtComponent) == 0x000008, "Wrong size on LyraAbilitySystemComponent_GetCharaMoveExtComponent");
static_assert(offsetof(LyraAbilitySystemComponent_GetCharaMoveExtComponent, ReturnValue) == 0x000000, "Member 'LyraAbilitySystemComponent_GetCharaMoveExtComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.GetGameplayAbilityByDynamicAbilityTag
// 0x0018 (0x0018 - 0x0000)
struct LyraAbilitySystemComponent_GetGameplayAbilityByDynamicAbilityTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGameplayAbility*>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_GetGameplayAbilityByDynamicAbilityTag) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_GetGameplayAbilityByDynamicAbilityTag");
static_assert(sizeof(LyraAbilitySystemComponent_GetGameplayAbilityByDynamicAbilityTag) == 0x000018, "Wrong size on LyraAbilitySystemComponent_GetGameplayAbilityByDynamicAbilityTag");
static_assert(offsetof(LyraAbilitySystemComponent_GetGameplayAbilityByDynamicAbilityTag, Tag) == 0x000000, "Member 'LyraAbilitySystemComponent_GetGameplayAbilityByDynamicAbilityTag::Tag' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_GetGameplayAbilityByDynamicAbilityTag, ReturnValue) == 0x000008, "Member 'LyraAbilitySystemComponent_GetGameplayAbilityByDynamicAbilityTag::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.GetInputDelayTime
// 0x0010 (0x0010 - 0x0000)
struct LyraAbilitySystemComponent_GetInputDelayTime final
{
public:
	const class ULyraGameplayAbility*             Ability;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_GetInputDelayTime) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_GetInputDelayTime");
static_assert(sizeof(LyraAbilitySystemComponent_GetInputDelayTime) == 0x000010, "Wrong size on LyraAbilitySystemComponent_GetInputDelayTime");
static_assert(offsetof(LyraAbilitySystemComponent_GetInputDelayTime, Ability) == 0x000000, "Member 'LyraAbilitySystemComponent_GetInputDelayTime::Ability' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_GetInputDelayTime, ReturnValue) == 0x000008, "Member 'LyraAbilitySystemComponent_GetInputDelayTime::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.GetOwnerLyraCharacter
// 0x0008 (0x0008 - 0x0000)
struct LyraAbilitySystemComponent_GetOwnerLyraCharacter final
{
public:
	class ALyraCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_GetOwnerLyraCharacter) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_GetOwnerLyraCharacter");
static_assert(sizeof(LyraAbilitySystemComponent_GetOwnerLyraCharacter) == 0x000008, "Wrong size on LyraAbilitySystemComponent_GetOwnerLyraCharacter");
static_assert(offsetof(LyraAbilitySystemComponent_GetOwnerLyraCharacter, ReturnValue) == 0x000000, "Member 'LyraAbilitySystemComponent_GetOwnerLyraCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.GiveAbilityByInputTag
// 0x0018 (0x0018 - 0x0000)
struct LyraAbilitySystemComponent_GiveAbilityByInputTag final
{
public:
	TSubclassOf<class UGameplayAbility>           Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InputTag;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityLevel;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_GiveAbilityByInputTag) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_GiveAbilityByInputTag");
static_assert(sizeof(LyraAbilitySystemComponent_GiveAbilityByInputTag) == 0x000018, "Wrong size on LyraAbilitySystemComponent_GiveAbilityByInputTag");
static_assert(offsetof(LyraAbilitySystemComponent_GiveAbilityByInputTag, Ability) == 0x000000, "Member 'LyraAbilitySystemComponent_GiveAbilityByInputTag::Ability' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_GiveAbilityByInputTag, InputTag) == 0x000008, "Member 'LyraAbilitySystemComponent_GiveAbilityByInputTag::InputTag' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_GiveAbilityByInputTag, AbilityLevel) == 0x000010, "Member 'LyraAbilitySystemComponent_GiveAbilityByInputTag::AbilityLevel' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_GiveAbilityByInputTag, ReturnValue) == 0x000014, "Member 'LyraAbilitySystemComponent_GiveAbilityByInputTag::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.InterruptAbility
// 0x0004 (0x0004 - 0x0000)
struct LyraAbilitySystemComponent_InterruptAbility final
{
public:
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_InterruptAbility) == 0x000004, "Wrong alignment on LyraAbilitySystemComponent_InterruptAbility");
static_assert(sizeof(LyraAbilitySystemComponent_InterruptAbility) == 0x000004, "Wrong size on LyraAbilitySystemComponent_InterruptAbility");
static_assert(offsetof(LyraAbilitySystemComponent_InterruptAbility, Handle) == 0x000000, "Member 'LyraAbilitySystemComponent_InterruptAbility::Handle' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.InterruptAbilityByClass
// 0x0008 (0x0008 - 0x0000)
struct LyraAbilitySystemComponent_InterruptAbilityByClass final
{
public:
	TSubclassOf<class UGameplayAbility>           Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_InterruptAbilityByClass) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_InterruptAbilityByClass");
static_assert(sizeof(LyraAbilitySystemComponent_InterruptAbilityByClass) == 0x000008, "Wrong size on LyraAbilitySystemComponent_InterruptAbilityByClass");
static_assert(offsetof(LyraAbilitySystemComponent_InterruptAbilityByClass, Ability) == 0x000000, "Member 'LyraAbilitySystemComponent_InterruptAbilityByClass::Ability' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.InterruptAbilityByTag
// 0x0008 (0x0008 - 0x0000)
struct LyraAbilitySystemComponent_InterruptAbilityByTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_InterruptAbilityByTag) == 0x000004, "Wrong alignment on LyraAbilitySystemComponent_InterruptAbilityByTag");
static_assert(sizeof(LyraAbilitySystemComponent_InterruptAbilityByTag) == 0x000008, "Wrong size on LyraAbilitySystemComponent_InterruptAbilityByTag");
static_assert(offsetof(LyraAbilitySystemComponent_InterruptAbilityByTag, Tag) == 0x000000, "Member 'LyraAbilitySystemComponent_InterruptAbilityByTag::Tag' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.InterruptAbilityByTagContainer
// 0x0020 (0x0020 - 0x0000)
struct LyraAbilitySystemComponent_InterruptAbilityByTagContainer final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_InterruptAbilityByTagContainer) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_InterruptAbilityByTagContainer");
static_assert(sizeof(LyraAbilitySystemComponent_InterruptAbilityByTagContainer) == 0x000020, "Wrong size on LyraAbilitySystemComponent_InterruptAbilityByTagContainer");
static_assert(offsetof(LyraAbilitySystemComponent_InterruptAbilityByTagContainer, TagContainer) == 0x000000, "Member 'LyraAbilitySystemComponent_InterruptAbilityByTagContainer::TagContainer' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.IsAbilityCoolingDown
// 0x0010 (0x0010 - 0x0000)
struct LyraAbilitySystemComponent_IsAbilityCoolingDown final
{
public:
	TSubclassOf<class UGameplayAbility>           Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraAbilitySystemComponent_IsAbilityCoolingDown) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_IsAbilityCoolingDown");
static_assert(sizeof(LyraAbilitySystemComponent_IsAbilityCoolingDown) == 0x000010, "Wrong size on LyraAbilitySystemComponent_IsAbilityCoolingDown");
static_assert(offsetof(LyraAbilitySystemComponent_IsAbilityCoolingDown, Ability) == 0x000000, "Member 'LyraAbilitySystemComponent_IsAbilityCoolingDown::Ability' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_IsAbilityCoolingDown, ReturnValue) == 0x000008, "Member 'LyraAbilitySystemComponent_IsAbilityCoolingDown::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.IsImmuneDamageFromSource
// 0x0030 (0x0030 - 0x0000)
struct LyraAbilitySystemComponent_IsImmuneDamageFromSource final
{
public:
	class ULyraAbilitySystemComponent*            Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AddContainer;                                      // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraAbilitySystemComponent_IsImmuneDamageFromSource) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_IsImmuneDamageFromSource");
static_assert(sizeof(LyraAbilitySystemComponent_IsImmuneDamageFromSource) == 0x000030, "Wrong size on LyraAbilitySystemComponent_IsImmuneDamageFromSource");
static_assert(offsetof(LyraAbilitySystemComponent_IsImmuneDamageFromSource, Source) == 0x000000, "Member 'LyraAbilitySystemComponent_IsImmuneDamageFromSource::Source' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_IsImmuneDamageFromSource, AddContainer) == 0x000008, "Member 'LyraAbilitySystemComponent_IsImmuneDamageFromSource::AddContainer' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_IsImmuneDamageFromSource, ReturnValue) == 0x000028, "Member 'LyraAbilitySystemComponent_IsImmuneDamageFromSource::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.PopAbilityTagClick
// 0x0008 (0x0008 - 0x0000)
struct LyraAbilitySystemComponent_PopAbilityTagClick final
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_PopAbilityTagClick) == 0x000004, "Wrong alignment on LyraAbilitySystemComponent_PopAbilityTagClick");
static_assert(sizeof(LyraAbilitySystemComponent_PopAbilityTagClick) == 0x000008, "Wrong size on LyraAbilitySystemComponent_PopAbilityTagClick");
static_assert(offsetof(LyraAbilitySystemComponent_PopAbilityTagClick, InputTag) == 0x000000, "Member 'LyraAbilitySystemComponent_PopAbilityTagClick::InputTag' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.RemoveAbilityCooldown
// 0x0010 (0x0010 - 0x0000)
struct LyraAbilitySystemComponent_RemoveAbilityCooldown final
{
public:
	TSubclassOf<class UGameplayAbility>           Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraAbilitySystemComponent_RemoveAbilityCooldown) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_RemoveAbilityCooldown");
static_assert(sizeof(LyraAbilitySystemComponent_RemoveAbilityCooldown) == 0x000010, "Wrong size on LyraAbilitySystemComponent_RemoveAbilityCooldown");
static_assert(offsetof(LyraAbilitySystemComponent_RemoveAbilityCooldown, Ability) == 0x000000, "Member 'LyraAbilitySystemComponent_RemoveAbilityCooldown::Ability' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_RemoveAbilityCooldown, ReturnValue) == 0x000008, "Member 'LyraAbilitySystemComponent_RemoveAbilityCooldown::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.RemoveActiveEffectByHandle
// 0x0010 (0x0010 - 0x0000)
struct LyraAbilitySystemComponent_RemoveActiveEffectByHandle final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraAbilitySystemComponent_RemoveActiveEffectByHandle) == 0x000004, "Wrong alignment on LyraAbilitySystemComponent_RemoveActiveEffectByHandle");
static_assert(sizeof(LyraAbilitySystemComponent_RemoveActiveEffectByHandle) == 0x000010, "Wrong size on LyraAbilitySystemComponent_RemoveActiveEffectByHandle");
static_assert(offsetof(LyraAbilitySystemComponent_RemoveActiveEffectByHandle, Handle) == 0x000000, "Member 'LyraAbilitySystemComponent_RemoveActiveEffectByHandle::Handle' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_RemoveActiveEffectByHandle, StacksToRemove) == 0x000008, "Member 'LyraAbilitySystemComponent_RemoveActiveEffectByHandle::StacksToRemove' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_RemoveActiveEffectByHandle, ReturnValue) == 0x00000C, "Member 'LyraAbilitySystemComponent_RemoveActiveEffectByHandle::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.RemoveInputTagDelayOverride
// 0x0008 (0x0008 - 0x0000)
struct LyraAbilitySystemComponent_RemoveInputTagDelayOverride final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_RemoveInputTagDelayOverride) == 0x000004, "Wrong alignment on LyraAbilitySystemComponent_RemoveInputTagDelayOverride");
static_assert(sizeof(LyraAbilitySystemComponent_RemoveInputTagDelayOverride) == 0x000008, "Wrong size on LyraAbilitySystemComponent_RemoveInputTagDelayOverride");
static_assert(offsetof(LyraAbilitySystemComponent_RemoveInputTagDelayOverride, Tag) == 0x000000, "Member 'LyraAbilitySystemComponent_RemoveInputTagDelayOverride::Tag' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.ReportClientTaskProgress
// 0x0018 (0x0018 - 0x0000)
struct LyraAbilitySystemComponent_ReportClientTaskProgress final
{
public:
	ETGFInGameRookieTaskType                      TaskType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALyraCharacter*                         InstigatorCharacter;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Progress;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_ReportClientTaskProgress) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_ReportClientTaskProgress");
static_assert(sizeof(LyraAbilitySystemComponent_ReportClientTaskProgress) == 0x000018, "Wrong size on LyraAbilitySystemComponent_ReportClientTaskProgress");
static_assert(offsetof(LyraAbilitySystemComponent_ReportClientTaskProgress, TaskType) == 0x000000, "Member 'LyraAbilitySystemComponent_ReportClientTaskProgress::TaskType' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_ReportClientTaskProgress, InstigatorCharacter) == 0x000008, "Member 'LyraAbilitySystemComponent_ReportClientTaskProgress::InstigatorCharacter' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_ReportClientTaskProgress, Progress) == 0x000010, "Member 'LyraAbilitySystemComponent_ReportClientTaskProgress::Progress' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.SendGameplayEventToClient
// 0x00B8 (0x00B8 - 0x0000)
struct LyraAbilitySystemComponent_SendGameplayEventToClient final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     Payload;                                           // 0x0008(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_SendGameplayEventToClient) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_SendGameplayEventToClient");
static_assert(sizeof(LyraAbilitySystemComponent_SendGameplayEventToClient) == 0x0000B8, "Wrong size on LyraAbilitySystemComponent_SendGameplayEventToClient");
static_assert(offsetof(LyraAbilitySystemComponent_SendGameplayEventToClient, EventTag) == 0x000000, "Member 'LyraAbilitySystemComponent_SendGameplayEventToClient::EventTag' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_SendGameplayEventToClient, Payload) == 0x000008, "Member 'LyraAbilitySystemComponent_SendGameplayEventToClient::Payload' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.DumpGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct LyraAbilitySystemComponent_DumpGameplayEffect final
{
public:
	TArray<struct FTGFDumpedGameplayEffect>       OutArray;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_DumpGameplayEffect) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_DumpGameplayEffect");
static_assert(sizeof(LyraAbilitySystemComponent_DumpGameplayEffect) == 0x000010, "Wrong size on LyraAbilitySystemComponent_DumpGameplayEffect");
static_assert(offsetof(LyraAbilitySystemComponent_DumpGameplayEffect, OutArray) == 0x000000, "Member 'LyraAbilitySystemComponent_DumpGameplayEffect::OutArray' has a wrong offset!");

// Function LyraGame.LyraAbilitySystemComponent.GetRandomActiveEffects
// 0x0038 (0x0038 - 0x0000)
struct LyraAbilitySystemComponent_GetRandomActiveEffects final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveGameplayEffectHandle>    ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAbilitySystemComponent_GetRandomActiveEffects) == 0x000008, "Wrong alignment on LyraAbilitySystemComponent_GetRandomActiveEffects");
static_assert(sizeof(LyraAbilitySystemComponent_GetRandomActiveEffects) == 0x000038, "Wrong size on LyraAbilitySystemComponent_GetRandomActiveEffects");
static_assert(offsetof(LyraAbilitySystemComponent_GetRandomActiveEffects, Tags) == 0x000000, "Member 'LyraAbilitySystemComponent_GetRandomActiveEffects::Tags' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_GetRandomActiveEffects, Num) == 0x000020, "Member 'LyraAbilitySystemComponent_GetRandomActiveEffects::Num' has a wrong offset!");
static_assert(offsetof(LyraAbilitySystemComponent_GetRandomActiveEffects, ReturnValue) == 0x000028, "Member 'LyraAbilitySystemComponent_GetRandomActiveEffects::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.AddStatTagStack
// 0x000C (0x000C - 0x0000)
struct LyraPlayerState_AddStatTagStack final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_AddStatTagStack) == 0x000004, "Wrong alignment on LyraPlayerState_AddStatTagStack");
static_assert(sizeof(LyraPlayerState_AddStatTagStack) == 0x00000C, "Wrong size on LyraPlayerState_AddStatTagStack");
static_assert(offsetof(LyraPlayerState_AddStatTagStack, Tag) == 0x000000, "Member 'LyraPlayerState_AddStatTagStack::Tag' has a wrong offset!");
static_assert(offsetof(LyraPlayerState_AddStatTagStack, StackCount) == 0x000008, "Member 'LyraPlayerState_AddStatTagStack::StackCount' has a wrong offset!");

// Function LyraGame.LyraPlayerState.ClientBroadcastMessage
// 0x0080 (0x0080 - 0x0000)
struct LyraPlayerState_ClientBroadcastMessage final
{
public:
	struct FLyraVerbMessage                       Message;                                           // 0x0000(0x0080)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_ClientBroadcastMessage) == 0x000008, "Wrong alignment on LyraPlayerState_ClientBroadcastMessage");
static_assert(sizeof(LyraPlayerState_ClientBroadcastMessage) == 0x000080, "Wrong size on LyraPlayerState_ClientBroadcastMessage");
static_assert(offsetof(LyraPlayerState_ClientBroadcastMessage, Message) == 0x000000, "Member 'LyraPlayerState_ClientBroadcastMessage::Message' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetIsDisconnected
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_GetIsDisconnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetIsDisconnected) == 0x000001, "Wrong alignment on LyraPlayerState_GetIsDisconnected");
static_assert(sizeof(LyraPlayerState_GetIsDisconnected) == 0x000001, "Wrong size on LyraPlayerState_GetIsDisconnected");
static_assert(offsetof(LyraPlayerState_GetIsDisconnected, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetIsDisconnected::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetPlayerNameData
// 0x0030 (0x0030 - 0x0000)
struct LyraPlayerState_GetPlayerNameData final
{
public:
	struct FPlayerNameData                        ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetPlayerNameData) == 0x000008, "Wrong alignment on LyraPlayerState_GetPlayerNameData");
static_assert(sizeof(LyraPlayerState_GetPlayerNameData) == 0x000030, "Wrong size on LyraPlayerState_GetPlayerNameData");
static_assert(offsetof(LyraPlayerState_GetPlayerNameData, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetPlayerNameData::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetTeamColor
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_GetTeamColor final
{
public:
	ETgfPVPTeamColor                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetTeamColor) == 0x000001, "Wrong alignment on LyraPlayerState_GetTeamColor");
static_assert(sizeof(LyraPlayerState_GetTeamColor) == 0x000001, "Wrong size on LyraPlayerState_GetTeamColor");
static_assert(offsetof(LyraPlayerState_GetTeamColor, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetTeamColor::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GMSetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct LyraPlayerState_GMSetPlayerName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GMSetPlayerName) == 0x000008, "Wrong alignment on LyraPlayerState_GMSetPlayerName");
static_assert(sizeof(LyraPlayerState_GMSetPlayerName) == 0x000010, "Wrong size on LyraPlayerState_GMSetPlayerName");
static_assert(offsetof(LyraPlayerState_GMSetPlayerName, Param_Name) == 0x000000, "Member 'LyraPlayerState_GMSetPlayerName::Param_Name' has a wrong offset!");

// Function LyraGame.LyraPlayerState.OnRep_FloatStatistics
// 0x0018 (0x0018 - 0x0000)
struct LyraPlayerState_OnRep_FloatStatistics final
{
public:
	struct FPlayerFloatStatisticItemEntry         FloatStatisticItem;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_OnRep_FloatStatistics) == 0x000008, "Wrong alignment on LyraPlayerState_OnRep_FloatStatistics");
static_assert(sizeof(LyraPlayerState_OnRep_FloatStatistics) == 0x000018, "Wrong size on LyraPlayerState_OnRep_FloatStatistics");
static_assert(offsetof(LyraPlayerState_OnRep_FloatStatistics, FloatStatisticItem) == 0x000000, "Member 'LyraPlayerState_OnRep_FloatStatistics::FloatStatisticItem' has a wrong offset!");

// Function LyraGame.LyraPlayerState.OnRep_IntStatistics
// 0x0018 (0x0018 - 0x0000)
struct LyraPlayerState_OnRep_IntStatistics final
{
public:
	struct FPlayerIntStatisticItemEntry           IntStatisticItem;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_OnRep_IntStatistics) == 0x000004, "Wrong alignment on LyraPlayerState_OnRep_IntStatistics");
static_assert(sizeof(LyraPlayerState_OnRep_IntStatistics) == 0x000018, "Wrong size on LyraPlayerState_OnRep_IntStatistics");
static_assert(offsetof(LyraPlayerState_OnRep_IntStatistics, IntStatisticItem) == 0x000000, "Member 'LyraPlayerState_OnRep_IntStatistics::IntStatisticItem' has a wrong offset!");

// Function LyraGame.LyraPlayerState.OnRep_MyTeamID
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_OnRep_MyTeamID final
{
public:
	struct FGenericTeamId                         OldTeamID;                                         // 0x0000(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_OnRep_MyTeamID) == 0x000001, "Wrong alignment on LyraPlayerState_OnRep_MyTeamID");
static_assert(sizeof(LyraPlayerState_OnRep_MyTeamID) == 0x000001, "Wrong size on LyraPlayerState_OnRep_MyTeamID");
static_assert(offsetof(LyraPlayerState_OnRep_MyTeamID, OldTeamID) == 0x000000, "Member 'LyraPlayerState_OnRep_MyTeamID::OldTeamID' has a wrong offset!");

// Function LyraGame.LyraPlayerState.OnRep_RelationIntStatistics
// 0x0028 (0x0028 - 0x0000)
struct LyraPlayerState_OnRep_RelationIntStatistics final
{
public:
	struct FPlayerRelationIntStatisticItemEntry   RelationIntStatisticItem;                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_OnRep_RelationIntStatistics) == 0x000008, "Wrong alignment on LyraPlayerState_OnRep_RelationIntStatistics");
static_assert(sizeof(LyraPlayerState_OnRep_RelationIntStatistics) == 0x000028, "Wrong size on LyraPlayerState_OnRep_RelationIntStatistics");
static_assert(offsetof(LyraPlayerState_OnRep_RelationIntStatistics, RelationIntStatisticItem) == 0x000000, "Member 'LyraPlayerState_OnRep_RelationIntStatistics::RelationIntStatisticItem' has a wrong offset!");

// Function LyraGame.LyraPlayerState.PlayerAddExp
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerState_PlayerAddExp final
{
public:
	int32                                         ExpCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_PlayerAddExp) == 0x000004, "Wrong alignment on LyraPlayerState_PlayerAddExp");
static_assert(sizeof(LyraPlayerState_PlayerAddExp) == 0x000004, "Wrong size on LyraPlayerState_PlayerAddExp");
static_assert(offsetof(LyraPlayerState_PlayerAddExp, ExpCount) == 0x000000, "Member 'LyraPlayerState_PlayerAddExp::ExpCount' has a wrong offset!");

// Function LyraGame.LyraPlayerState.RemoveStatTagStack
// 0x000C (0x000C - 0x0000)
struct LyraPlayerState_RemoveStatTagStack final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_RemoveStatTagStack) == 0x000004, "Wrong alignment on LyraPlayerState_RemoveStatTagStack");
static_assert(sizeof(LyraPlayerState_RemoveStatTagStack) == 0x00000C, "Wrong size on LyraPlayerState_RemoveStatTagStack");
static_assert(offsetof(LyraPlayerState_RemoveStatTagStack, Tag) == 0x000000, "Member 'LyraPlayerState_RemoveStatTagStack::Tag' has a wrong offset!");
static_assert(offsetof(LyraPlayerState_RemoveStatTagStack, StackCount) == 0x000008, "Member 'LyraPlayerState_RemoveStatTagStack::StackCount' has a wrong offset!");

// Function LyraGame.LyraPlayerState.ServerCallEscapeQuit
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_ServerCallEscapeQuit final
{
public:
	bool                                          JudgeTeammateDeathQuit;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_ServerCallEscapeQuit) == 0x000001, "Wrong alignment on LyraPlayerState_ServerCallEscapeQuit");
static_assert(sizeof(LyraPlayerState_ServerCallEscapeQuit) == 0x000001, "Wrong size on LyraPlayerState_ServerCallEscapeQuit");
static_assert(offsetof(LyraPlayerState_ServerCallEscapeQuit, JudgeTeammateDeathQuit) == 0x000000, "Member 'LyraPlayerState_ServerCallEscapeQuit::JudgeTeammateDeathQuit' has a wrong offset!");

// Function LyraGame.LyraPlayerState.SetFloatStatisticsRepType
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_SetFloatStatisticsRepType final
{
public:
	ETgfActorFloatStatisticType                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_SetFloatStatisticsRepType) == 0x000001, "Wrong alignment on LyraPlayerState_SetFloatStatisticsRepType");
static_assert(sizeof(LyraPlayerState_SetFloatStatisticsRepType) == 0x000001, "Wrong size on LyraPlayerState_SetFloatStatisticsRepType");
static_assert(offsetof(LyraPlayerState_SetFloatStatisticsRepType, Type) == 0x000000, "Member 'LyraPlayerState_SetFloatStatisticsRepType::Type' has a wrong offset!");

// Function LyraGame.LyraPlayerState.SetIntStatisticsRepType
// 0x0008 (0x0008 - 0x0000)
struct LyraPlayerState_SetIntStatisticsRepType final
{
public:
	ETgfActorIntStatisticType                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TypeId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_SetIntStatisticsRepType) == 0x000004, "Wrong alignment on LyraPlayerState_SetIntStatisticsRepType");
static_assert(sizeof(LyraPlayerState_SetIntStatisticsRepType) == 0x000008, "Wrong size on LyraPlayerState_SetIntStatisticsRepType");
static_assert(offsetof(LyraPlayerState_SetIntStatisticsRepType, Type) == 0x000000, "Member 'LyraPlayerState_SetIntStatisticsRepType::Type' has a wrong offset!");
static_assert(offsetof(LyraPlayerState_SetIntStatisticsRepType, TypeId) == 0x000004, "Member 'LyraPlayerState_SetIntStatisticsRepType::TypeId' has a wrong offset!");

// Function LyraGame.LyraPlayerState.SetIsDisconnected
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_SetIsDisconnected final
{
public:
	bool                                          IsOk;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_SetIsDisconnected) == 0x000001, "Wrong alignment on LyraPlayerState_SetIsDisconnected");
static_assert(sizeof(LyraPlayerState_SetIsDisconnected) == 0x000001, "Wrong size on LyraPlayerState_SetIsDisconnected");
static_assert(offsetof(LyraPlayerState_SetIsDisconnected, IsOk) == 0x000000, "Member 'LyraPlayerState_SetIsDisconnected::IsOk' has a wrong offset!");

// Function LyraGame.LyraPlayerState.SetPlayerSceneTag
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_SetPlayerSceneTag final
{
public:
	ETgfPlayerSceneTag                            Tag;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_SetPlayerSceneTag) == 0x000001, "Wrong alignment on LyraPlayerState_SetPlayerSceneTag");
static_assert(sizeof(LyraPlayerState_SetPlayerSceneTag) == 0x000001, "Wrong size on LyraPlayerState_SetPlayerSceneTag");
static_assert(offsetof(LyraPlayerState_SetPlayerSceneTag, Tag) == 0x000000, "Member 'LyraPlayerState_SetPlayerSceneTag::Tag' has a wrong offset!");

// Function LyraGame.LyraPlayerState.SetRelationIntStatisticsRepType
// 0x0018 (0x0018 - 0x0000)
struct LyraPlayerState_SetRelationIntStatisticsRepType final
{
public:
	ETgfActorRelationStatisticType                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OpenID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_SetRelationIntStatisticsRepType) == 0x000008, "Wrong alignment on LyraPlayerState_SetRelationIntStatisticsRepType");
static_assert(sizeof(LyraPlayerState_SetRelationIntStatisticsRepType) == 0x000018, "Wrong size on LyraPlayerState_SetRelationIntStatisticsRepType");
static_assert(offsetof(LyraPlayerState_SetRelationIntStatisticsRepType, Type) == 0x000000, "Member 'LyraPlayerState_SetRelationIntStatisticsRepType::Type' has a wrong offset!");
static_assert(offsetof(LyraPlayerState_SetRelationIntStatisticsRepType, OpenID) == 0x000008, "Member 'LyraPlayerState_SetRelationIntStatisticsRepType::OpenID' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetDisconnectedTimeDuration
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerState_GetDisconnectedTimeDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetDisconnectedTimeDuration) == 0x000004, "Wrong alignment on LyraPlayerState_GetDisconnectedTimeDuration");
static_assert(sizeof(LyraPlayerState_GetDisconnectedTimeDuration) == 0x000004, "Wrong size on LyraPlayerState_GetDisconnectedTimeDuration");
static_assert(offsetof(LyraPlayerState_GetDisconnectedTimeDuration, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetDisconnectedTimeDuration::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetIsBanQuit
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_GetIsBanQuit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetIsBanQuit) == 0x000001, "Wrong alignment on LyraPlayerState_GetIsBanQuit");
static_assert(sizeof(LyraPlayerState_GetIsBanQuit) == 0x000001, "Wrong size on LyraPlayerState_GetIsBanQuit");
static_assert(offsetof(LyraPlayerState_GetIsBanQuit, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetIsBanQuit::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetIsDeathQuit
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_GetIsDeathQuit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetIsDeathQuit) == 0x000001, "Wrong alignment on LyraPlayerState_GetIsDeathQuit");
static_assert(sizeof(LyraPlayerState_GetIsDeathQuit) == 0x000001, "Wrong size on LyraPlayerState_GetIsDeathQuit");
static_assert(offsetof(LyraPlayerState_GetIsDeathQuit, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetIsDeathQuit::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetIsEscapeQuit
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_GetIsEscapeQuit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetIsEscapeQuit) == 0x000001, "Wrong alignment on LyraPlayerState_GetIsEscapeQuit");
static_assert(sizeof(LyraPlayerState_GetIsEscapeQuit) == 0x000001, "Wrong size on LyraPlayerState_GetIsEscapeQuit");
static_assert(offsetof(LyraPlayerState_GetIsEscapeQuit, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetIsEscapeQuit::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetIsMithrilCharacter
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_GetIsMithrilCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetIsMithrilCharacter) == 0x000001, "Wrong alignment on LyraPlayerState_GetIsMithrilCharacter");
static_assert(sizeof(LyraPlayerState_GetIsMithrilCharacter) == 0x000001, "Wrong size on LyraPlayerState_GetIsMithrilCharacter");
static_assert(offsetof(LyraPlayerState_GetIsMithrilCharacter, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetIsMithrilCharacter::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetIsSelfQuit
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_GetIsSelfQuit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetIsSelfQuit) == 0x000001, "Wrong alignment on LyraPlayerState_GetIsSelfQuit");
static_assert(sizeof(LyraPlayerState_GetIsSelfQuit) == 0x000001, "Wrong size on LyraPlayerState_GetIsSelfQuit");
static_assert(offsetof(LyraPlayerState_GetIsSelfQuit, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetIsSelfQuit::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetIsTeleportToWaitingRoom
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_GetIsTeleportToWaitingRoom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetIsTeleportToWaitingRoom) == 0x000001, "Wrong alignment on LyraPlayerState_GetIsTeleportToWaitingRoom");
static_assert(sizeof(LyraPlayerState_GetIsTeleportToWaitingRoom) == 0x000001, "Wrong size on LyraPlayerState_GetIsTeleportToWaitingRoom");
static_assert(offsetof(LyraPlayerState_GetIsTeleportToWaitingRoom, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetIsTeleportToWaitingRoom::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetLyraAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraPlayerState_GetLyraAbilitySystemComponent final
{
public:
	class ULyraAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetLyraAbilitySystemComponent) == 0x000008, "Wrong alignment on LyraPlayerState_GetLyraAbilitySystemComponent");
static_assert(sizeof(LyraPlayerState_GetLyraAbilitySystemComponent) == 0x000008, "Wrong size on LyraPlayerState_GetLyraAbilitySystemComponent");
static_assert(offsetof(LyraPlayerState_GetLyraAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetLyraAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetLyraPlayerController
// 0x0008 (0x0008 - 0x0000)
struct LyraPlayerState_GetLyraPlayerController final
{
public:
	class ALyraPlayerController*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetLyraPlayerController) == 0x000008, "Wrong alignment on LyraPlayerState_GetLyraPlayerController");
static_assert(sizeof(LyraPlayerState_GetLyraPlayerController) == 0x000008, "Wrong size on LyraPlayerState_GetLyraPlayerController");
static_assert(offsetof(LyraPlayerState_GetLyraPlayerController, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetLyraPlayerController::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetMithrilRemainingRebirthChances
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerState_GetMithrilRemainingRebirthChances final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetMithrilRemainingRebirthChances) == 0x000004, "Wrong alignment on LyraPlayerState_GetMithrilRemainingRebirthChances");
static_assert(sizeof(LyraPlayerState_GetMithrilRemainingRebirthChances) == 0x000004, "Wrong size on LyraPlayerState_GetMithrilRemainingRebirthChances");
static_assert(offsetof(LyraPlayerState_GetMithrilRemainingRebirthChances, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetMithrilRemainingRebirthChances::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetOpenId
// 0x0010 (0x0010 - 0x0000)
struct LyraPlayerState_GetOpenId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetOpenId) == 0x000008, "Wrong alignment on LyraPlayerState_GetOpenId");
static_assert(sizeof(LyraPlayerState_GetOpenId) == 0x000010, "Wrong size on LyraPlayerState_GetOpenId");
static_assert(offsetof(LyraPlayerState_GetOpenId, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetOpenId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetPlayerConnectionType
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_GetPlayerConnectionType final
{
public:
	ELyraPlayerConnectionType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetPlayerConnectionType) == 0x000001, "Wrong alignment on LyraPlayerState_GetPlayerConnectionType");
static_assert(sizeof(LyraPlayerState_GetPlayerConnectionType) == 0x000001, "Wrong size on LyraPlayerState_GetPlayerConnectionType");
static_assert(offsetof(LyraPlayerState_GetPlayerConnectionType, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetPlayerConnectionType::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetPlayerSceneTag
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_GetPlayerSceneTag final
{
public:
	ETgfPlayerSceneTag                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetPlayerSceneTag) == 0x000001, "Wrong alignment on LyraPlayerState_GetPlayerSceneTag");
static_assert(sizeof(LyraPlayerState_GetPlayerSceneTag) == 0x000001, "Wrong size on LyraPlayerState_GetPlayerSceneTag");
static_assert(offsetof(LyraPlayerState_GetPlayerSceneTag, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetPlayerSceneTag::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetRoleGuid
// 0x0008 (0x0008 - 0x0000)
struct LyraPlayerState_GetRoleGuid final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetRoleGuid) == 0x000008, "Wrong alignment on LyraPlayerState_GetRoleGuid");
static_assert(sizeof(LyraPlayerState_GetRoleGuid) == 0x000008, "Wrong size on LyraPlayerState_GetRoleGuid");
static_assert(offsetof(LyraPlayerState_GetRoleGuid, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetRoleGuid::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetSquadId
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerState_GetSquadId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetSquadId) == 0x000004, "Wrong alignment on LyraPlayerState_GetSquadId");
static_assert(sizeof(LyraPlayerState_GetSquadId) == 0x000004, "Wrong size on LyraPlayerState_GetSquadId");
static_assert(offsetof(LyraPlayerState_GetSquadId, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetSquadId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetStatTagStackCount
// 0x000C (0x000C - 0x0000)
struct LyraPlayerState_GetStatTagStackCount final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetStatTagStackCount) == 0x000004, "Wrong alignment on LyraPlayerState_GetStatTagStackCount");
static_assert(sizeof(LyraPlayerState_GetStatTagStackCount) == 0x00000C, "Wrong size on LyraPlayerState_GetStatTagStackCount");
static_assert(offsetof(LyraPlayerState_GetStatTagStackCount, Tag) == 0x000000, "Member 'LyraPlayerState_GetStatTagStackCount::Tag' has a wrong offset!");
static_assert(offsetof(LyraPlayerState_GetStatTagStackCount, ReturnValue) == 0x000008, "Member 'LyraPlayerState_GetStatTagStackCount::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetTeamId
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerState_GetTeamId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetTeamId) == 0x000004, "Wrong alignment on LyraPlayerState_GetTeamId");
static_assert(sizeof(LyraPlayerState_GetTeamId) == 0x000004, "Wrong size on LyraPlayerState_GetTeamId");
static_assert(offsetof(LyraPlayerState_GetTeamId, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetTeamId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetTotalExp
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerState_GetTotalExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetTotalExp) == 0x000004, "Wrong alignment on LyraPlayerState_GetTotalExp");
static_assert(sizeof(LyraPlayerState_GetTotalExp) == 0x000004, "Wrong size on LyraPlayerState_GetTotalExp");
static_assert(offsetof(LyraPlayerState_GetTotalExp, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetTotalExp::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetUserId
// 0x0008 (0x0008 - 0x0000)
struct LyraPlayerState_GetUserId final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetUserId) == 0x000008, "Wrong alignment on LyraPlayerState_GetUserId");
static_assert(sizeof(LyraPlayerState_GetUserId) == 0x000008, "Wrong size on LyraPlayerState_GetUserId");
static_assert(offsetof(LyraPlayerState_GetUserId, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetUserId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.GetZoneId
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerState_GetZoneId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_GetZoneId) == 0x000004, "Wrong alignment on LyraPlayerState_GetZoneId");
static_assert(sizeof(LyraPlayerState_GetZoneId) == 0x000004, "Wrong size on LyraPlayerState_GetZoneId");
static_assert(offsetof(LyraPlayerState_GetZoneId, ReturnValue) == 0x000000, "Member 'LyraPlayerState_GetZoneId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.HasStatTag
// 0x000C (0x000C - 0x0000)
struct LyraPlayerState_HasStatTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraPlayerState_HasStatTag) == 0x000004, "Wrong alignment on LyraPlayerState_HasStatTag");
static_assert(sizeof(LyraPlayerState_HasStatTag) == 0x00000C, "Wrong size on LyraPlayerState_HasStatTag");
static_assert(offsetof(LyraPlayerState_HasStatTag, Tag) == 0x000000, "Member 'LyraPlayerState_HasStatTag::Tag' has a wrong offset!");
static_assert(offsetof(LyraPlayerState_HasStatTag, ReturnValue) == 0x000008, "Member 'LyraPlayerState_HasStatTag::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerState.NeedIgnoreAlive
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerState_NeedIgnoreAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerState_NeedIgnoreAlive) == 0x000001, "Wrong alignment on LyraPlayerState_NeedIgnoreAlive");
static_assert(sizeof(LyraPlayerState_NeedIgnoreAlive) == 0x000001, "Wrong size on LyraPlayerState_NeedIgnoreAlive");
static_assert(offsetof(LyraPlayerState_NeedIgnoreAlive, ReturnValue) == 0x000000, "Member 'LyraPlayerState_NeedIgnoreAlive::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGlobalAbilitySystem.ApplyAbilityToAll
// 0x0008 (0x0008 - 0x0000)
struct LyraGlobalAbilitySystem_ApplyAbilityToAll final
{
public:
	TSubclassOf<class UGameplayAbility>           Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGlobalAbilitySystem_ApplyAbilityToAll) == 0x000008, "Wrong alignment on LyraGlobalAbilitySystem_ApplyAbilityToAll");
static_assert(sizeof(LyraGlobalAbilitySystem_ApplyAbilityToAll) == 0x000008, "Wrong size on LyraGlobalAbilitySystem_ApplyAbilityToAll");
static_assert(offsetof(LyraGlobalAbilitySystem_ApplyAbilityToAll, Ability) == 0x000000, "Member 'LyraGlobalAbilitySystem_ApplyAbilityToAll::Ability' has a wrong offset!");

// Function LyraGame.LyraGlobalAbilitySystem.ApplyEffectToAll
// 0x0008 (0x0008 - 0x0000)
struct LyraGlobalAbilitySystem_ApplyEffectToAll final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGlobalAbilitySystem_ApplyEffectToAll) == 0x000008, "Wrong alignment on LyraGlobalAbilitySystem_ApplyEffectToAll");
static_assert(sizeof(LyraGlobalAbilitySystem_ApplyEffectToAll) == 0x000008, "Wrong size on LyraGlobalAbilitySystem_ApplyEffectToAll");
static_assert(offsetof(LyraGlobalAbilitySystem_ApplyEffectToAll, Effect) == 0x000000, "Member 'LyraGlobalAbilitySystem_ApplyEffectToAll::Effect' has a wrong offset!");

// Function LyraGame.LyraGlobalAbilitySystem.RemoveAbilityFromAll
// 0x0008 (0x0008 - 0x0000)
struct LyraGlobalAbilitySystem_RemoveAbilityFromAll final
{
public:
	TSubclassOf<class UGameplayAbility>           Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGlobalAbilitySystem_RemoveAbilityFromAll) == 0x000008, "Wrong alignment on LyraGlobalAbilitySystem_RemoveAbilityFromAll");
static_assert(sizeof(LyraGlobalAbilitySystem_RemoveAbilityFromAll) == 0x000008, "Wrong size on LyraGlobalAbilitySystem_RemoveAbilityFromAll");
static_assert(offsetof(LyraGlobalAbilitySystem_RemoveAbilityFromAll, Ability) == 0x000000, "Member 'LyraGlobalAbilitySystem_RemoveAbilityFromAll::Ability' has a wrong offset!");

// Function LyraGame.LyraGlobalAbilitySystem.RemoveEffectFromAll
// 0x0008 (0x0008 - 0x0000)
struct LyraGlobalAbilitySystem_RemoveEffectFromAll final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGlobalAbilitySystem_RemoveEffectFromAll) == 0x000008, "Wrong alignment on LyraGlobalAbilitySystem_RemoveEffectFromAll");
static_assert(sizeof(LyraGlobalAbilitySystem_RemoveEffectFromAll) == 0x000008, "Wrong size on LyraGlobalAbilitySystem_RemoveEffectFromAll");
static_assert(offsetof(LyraGlobalAbilitySystem_RemoveEffectFromAll, Effect) == 0x000000, "Member 'LyraGlobalAbilitySystem_RemoveEffectFromAll::Effect' has a wrong offset!");

// Function LyraGame.LyraPlayerSpawningManagerComponent.GetFirstRandomPlayerStartsInRegion
// 0x0030 (0x0030 - 0x0000)
struct LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStart*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion) == 0x000008, "Wrong alignment on LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion");
static_assert(sizeof(LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion) == 0x000030, "Wrong size on LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion, Controller) == 0x000000, "Member 'LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion::Controller' has a wrong offset!");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion, Center) == 0x000008, "Member 'LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion::Center' has a wrong offset!");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion, Radius) == 0x000020, "Member 'LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion::Radius' has a wrong offset!");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion, ReturnValue) == 0x000028, "Member 'LyraPlayerSpawningManagerComponent_GetFirstRandomPlayerStartsInRegion::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerSpawningManagerComponent.GetRandomPlayerStartOutRegion
// 0x0050 (0x0050 - 0x0000)
struct LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasDeathZone;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DeathZoneCenter;                                   // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathZoneRadius;                                   // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStart*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion) == 0x000008, "Wrong alignment on LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion");
static_assert(sizeof(LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion) == 0x000050, "Wrong size on LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion, Controller) == 0x000000, "Member 'LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion::Controller' has a wrong offset!");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion, Center) == 0x000008, "Member 'LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion::Center' has a wrong offset!");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion, Radius) == 0x000020, "Member 'LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion::Radius' has a wrong offset!");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion, HasDeathZone) == 0x000024, "Member 'LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion::HasDeathZone' has a wrong offset!");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion, DeathZoneCenter) == 0x000028, "Member 'LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion::DeathZoneCenter' has a wrong offset!");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion, DeathZoneRadius) == 0x000040, "Member 'LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion::DeathZoneRadius' has a wrong offset!");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion, ReturnValue) == 0x000048, "Member 'LyraPlayerSpawningManagerComponent_GetRandomPlayerStartOutRegion::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerSpawningManagerComponent.K2_OnFinishRestartPlayer
// 0x0020 (0x0020 - 0x0000)
struct LyraPlayerSpawningManagerComponent_K2_OnFinishRestartPlayer final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRotation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerSpawningManagerComponent_K2_OnFinishRestartPlayer) == 0x000008, "Wrong alignment on LyraPlayerSpawningManagerComponent_K2_OnFinishRestartPlayer");
static_assert(sizeof(LyraPlayerSpawningManagerComponent_K2_OnFinishRestartPlayer) == 0x000020, "Wrong size on LyraPlayerSpawningManagerComponent_K2_OnFinishRestartPlayer");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_K2_OnFinishRestartPlayer, Player) == 0x000000, "Member 'LyraPlayerSpawningManagerComponent_K2_OnFinishRestartPlayer::Player' has a wrong offset!");
static_assert(offsetof(LyraPlayerSpawningManagerComponent_K2_OnFinishRestartPlayer, StartRotation) == 0x000008, "Member 'LyraPlayerSpawningManagerComponent_K2_OnFinishRestartPlayer::StartRotation' has a wrong offset!");

// Function LyraGame.LyraGamePhaseAbility.SetAllActorAliveTime
// 0x0001 (0x0001 - 0x0000)
struct LyraGamePhaseAbility_SetAllActorAliveTime final
{
public:
	bool                                          OnlyRefreshStart;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGamePhaseAbility_SetAllActorAliveTime) == 0x000001, "Wrong alignment on LyraGamePhaseAbility_SetAllActorAliveTime");
static_assert(sizeof(LyraGamePhaseAbility_SetAllActorAliveTime) == 0x000001, "Wrong size on LyraGamePhaseAbility_SetAllActorAliveTime");
static_assert(offsetof(LyraGamePhaseAbility_SetAllActorAliveTime, OnlyRefreshStart) == 0x000000, "Member 'LyraGamePhaseAbility_SetAllActorAliveTime::OnlyRefreshStart' has a wrong offset!");

// Function LyraGame.LyraGamePhaseSubsystem.K2_StartPhase
// 0x0018 (0x0018 - 0x0000)
struct LyraGamePhaseSubsystem_K2_StartPhase final
{
public:
	TSubclassOf<class ULyraGamePhaseAbility>      Phase;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class ULyraGamePhaseAbility* Phase)> PhaseEnded;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGamePhaseSubsystem_K2_StartPhase) == 0x000008, "Wrong alignment on LyraGamePhaseSubsystem_K2_StartPhase");
static_assert(sizeof(LyraGamePhaseSubsystem_K2_StartPhase) == 0x000018, "Wrong size on LyraGamePhaseSubsystem_K2_StartPhase");
static_assert(offsetof(LyraGamePhaseSubsystem_K2_StartPhase, Phase) == 0x000000, "Member 'LyraGamePhaseSubsystem_K2_StartPhase::Phase' has a wrong offset!");
static_assert(offsetof(LyraGamePhaseSubsystem_K2_StartPhase, PhaseEnded) == 0x000008, "Member 'LyraGamePhaseSubsystem_K2_StartPhase::PhaseEnded' has a wrong offset!");

// Function LyraGame.LyraGamePhaseSubsystem.K2_WhenPhaseEnds
// 0x001C (0x001C - 0x0000)
struct LyraGamePhaseSubsystem_K2_WhenPhaseEnds final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhaseTagMatchType                            MatchType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGameplayTag& PhaseTag)> WhenPhaseEnd;                                      // 0x000C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGamePhaseSubsystem_K2_WhenPhaseEnds) == 0x000004, "Wrong alignment on LyraGamePhaseSubsystem_K2_WhenPhaseEnds");
static_assert(sizeof(LyraGamePhaseSubsystem_K2_WhenPhaseEnds) == 0x00001C, "Wrong size on LyraGamePhaseSubsystem_K2_WhenPhaseEnds");
static_assert(offsetof(LyraGamePhaseSubsystem_K2_WhenPhaseEnds, PhaseTag) == 0x000000, "Member 'LyraGamePhaseSubsystem_K2_WhenPhaseEnds::PhaseTag' has a wrong offset!");
static_assert(offsetof(LyraGamePhaseSubsystem_K2_WhenPhaseEnds, MatchType) == 0x000008, "Member 'LyraGamePhaseSubsystem_K2_WhenPhaseEnds::MatchType' has a wrong offset!");
static_assert(offsetof(LyraGamePhaseSubsystem_K2_WhenPhaseEnds, WhenPhaseEnd) == 0x00000C, "Member 'LyraGamePhaseSubsystem_K2_WhenPhaseEnds::WhenPhaseEnd' has a wrong offset!");

// Function LyraGame.LyraGamePhaseSubsystem.K2_WhenPhaseStartsOrIsActive
// 0x001C (0x001C - 0x0000)
struct LyraGamePhaseSubsystem_K2_WhenPhaseStartsOrIsActive final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhaseTagMatchType                            MatchType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGameplayTag& PhaseTag)> WhenPhaseActive;                                   // 0x000C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGamePhaseSubsystem_K2_WhenPhaseStartsOrIsActive) == 0x000004, "Wrong alignment on LyraGamePhaseSubsystem_K2_WhenPhaseStartsOrIsActive");
static_assert(sizeof(LyraGamePhaseSubsystem_K2_WhenPhaseStartsOrIsActive) == 0x00001C, "Wrong size on LyraGamePhaseSubsystem_K2_WhenPhaseStartsOrIsActive");
static_assert(offsetof(LyraGamePhaseSubsystem_K2_WhenPhaseStartsOrIsActive, PhaseTag) == 0x000000, "Member 'LyraGamePhaseSubsystem_K2_WhenPhaseStartsOrIsActive::PhaseTag' has a wrong offset!");
static_assert(offsetof(LyraGamePhaseSubsystem_K2_WhenPhaseStartsOrIsActive, MatchType) == 0x000008, "Member 'LyraGamePhaseSubsystem_K2_WhenPhaseStartsOrIsActive::MatchType' has a wrong offset!");
static_assert(offsetof(LyraGamePhaseSubsystem_K2_WhenPhaseStartsOrIsActive, WhenPhaseActive) == 0x00000C, "Member 'LyraGamePhaseSubsystem_K2_WhenPhaseStartsOrIsActive::WhenPhaseActive' has a wrong offset!");

// Function LyraGame.LyraGamePhaseSubsystem.IsPhaseActive
// 0x000C (0x000C - 0x0000)
struct LyraGamePhaseSubsystem_IsPhaseActive final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraGamePhaseSubsystem_IsPhaseActive) == 0x000004, "Wrong alignment on LyraGamePhaseSubsystem_IsPhaseActive");
static_assert(sizeof(LyraGamePhaseSubsystem_IsPhaseActive) == 0x00000C, "Wrong size on LyraGamePhaseSubsystem_IsPhaseActive");
static_assert(offsetof(LyraGamePhaseSubsystem_IsPhaseActive, PhaseTag) == 0x000000, "Member 'LyraGamePhaseSubsystem_IsPhaseActive::PhaseTag' has a wrong offset!");
static_assert(offsetof(LyraGamePhaseSubsystem_IsPhaseActive, ReturnValue) == 0x000008, "Member 'LyraGamePhaseSubsystem_IsPhaseActive::ReturnValue' has a wrong offset!");

// Function LyraGame.AbilityTask_ApplyTgfMoveToForce.ApplyTgfMoveToForce
// 0x0090 (0x0090 - 0x0000)
struct AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_RootMotionPriority;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Param_TargetLocation;                              // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bUpdateRotation;                             // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Param_TargetRotation;                              // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Param_RotateDuration;                              // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bSetNewMovementMode;                         // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 MovementMode;                                      // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bRestrictSpeedToExpected;                    // 0x0056(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           Param_PathOffsetCurve;                             // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_IgnoreZLimit;                                // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinish;                               // 0x0068(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_ApplyTgfMoveToForce*       ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce) == 0x000008, "Wrong alignment on AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce");
static_assert(sizeof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce) == 0x000090, "Wrong size on AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, OwningAbility) == 0x000000, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, TaskInstanceName) == 0x000008, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, Param_RootMotionPriority) == 0x000010, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::Param_RootMotionPriority' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, Param_TargetLocation) == 0x000018, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::Param_TargetLocation' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, Param_Duration) == 0x000030, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::Param_Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, Param_bUpdateRotation) == 0x000034, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::Param_bUpdateRotation' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, Param_TargetRotation) == 0x000038, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::Param_TargetRotation' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, Param_RotateDuration) == 0x000050, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::Param_RotateDuration' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, Param_bSetNewMovementMode) == 0x000054, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::Param_bSetNewMovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, MovementMode) == 0x000055, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::MovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, Param_bRestrictSpeedToExpected) == 0x000056, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::Param_bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, Param_PathOffsetCurve) == 0x000058, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::Param_PathOffsetCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, Param_IgnoreZLimit) == 0x000060, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::Param_IgnoreZLimit' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, VelocityOnFinishMode) == 0x000064, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, SetVelocityOnFinish) == 0x000068, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::SetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, ClampVelocityOnFinish) == 0x000080, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce, ReturnValue) == 0x000088, "Member 'AbilityTask_ApplyTgfMoveToForce_ApplyTgfMoveToForce::ReturnValue' has a wrong offset!");

// Function LyraGame.AbilityTask_MoveActor.ApplyMoveActor
// 0x0050 (0x0050 - 0x0000)
struct AbilityTask_MoveActor_ApplyMoveActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_RootMotionPriority;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           Param_LocationCurve;                               // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bIsExtractRootMotionCurve;                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bShouldIgnoreZAccumulate;                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bSetNewMovementMode;                         // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 MovementMode;                                      // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bRestrictSpeedToExpected;                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinished;                             // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_MoveActor*                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_MoveActor_ApplyMoveActor) == 0x000008, "Wrong alignment on AbilityTask_MoveActor_ApplyMoveActor");
static_assert(sizeof(AbilityTask_MoveActor_ApplyMoveActor) == 0x000050, "Wrong size on AbilityTask_MoveActor_ApplyMoveActor");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, OwningAbility) == 0x000000, "Member 'AbilityTask_MoveActor_ApplyMoveActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, TaskInstanceName) == 0x000008, "Member 'AbilityTask_MoveActor_ApplyMoveActor::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, Param_RootMotionPriority) == 0x000010, "Member 'AbilityTask_MoveActor_ApplyMoveActor::Param_RootMotionPriority' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, Param_Duration) == 0x000014, "Member 'AbilityTask_MoveActor_ApplyMoveActor::Param_Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, Param_LocationCurve) == 0x000018, "Member 'AbilityTask_MoveActor_ApplyMoveActor::Param_LocationCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, Param_bIsExtractRootMotionCurve) == 0x000020, "Member 'AbilityTask_MoveActor_ApplyMoveActor::Param_bIsExtractRootMotionCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, Param_bShouldIgnoreZAccumulate) == 0x000021, "Member 'AbilityTask_MoveActor_ApplyMoveActor::Param_bShouldIgnoreZAccumulate' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, Param_bSetNewMovementMode) == 0x000022, "Member 'AbilityTask_MoveActor_ApplyMoveActor::Param_bSetNewMovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, MovementMode) == 0x000023, "Member 'AbilityTask_MoveActor_ApplyMoveActor::MovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, Param_bRestrictSpeedToExpected) == 0x000024, "Member 'AbilityTask_MoveActor_ApplyMoveActor::Param_bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, VelocityOnFinishMode) == 0x000025, "Member 'AbilityTask_MoveActor_ApplyMoveActor::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, SetVelocityOnFinished) == 0x000028, "Member 'AbilityTask_MoveActor_ApplyMoveActor::SetVelocityOnFinished' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, ClampVelocityOnFinish) == 0x000040, "Member 'AbilityTask_MoveActor_ApplyMoveActor::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_MoveActor_ApplyMoveActor, ReturnValue) == 0x000048, "Member 'AbilityTask_MoveActor_ApplyMoveActor::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerStartSet.GetTeamId
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerStartSet_GetTeamId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerStartSet_GetTeamId) == 0x000004, "Wrong alignment on LyraPlayerStartSet_GetTeamId");
static_assert(sizeof(LyraPlayerStartSet_GetTeamId) == 0x000004, "Wrong size on LyraPlayerStartSet_GetTeamId");
static_assert(offsetof(LyraPlayerStartSet_GetTeamId, ReturnValue) == 0x000000, "Member 'LyraPlayerStartSet_GetTeamId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerStartSet.SetTeamId
// 0x0004 (0x0004 - 0x0000)
struct LyraPlayerStartSet_SetTeamId final
{
public:
	int32                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerStartSet_SetTeamId) == 0x000004, "Wrong alignment on LyraPlayerStartSet_SetTeamId");
static_assert(sizeof(LyraPlayerStartSet_SetTeamId) == 0x000004, "Wrong size on LyraPlayerStartSet_SetTeamId");
static_assert(offsetof(LyraPlayerStartSet_SetTeamId, Val) == 0x000000, "Member 'LyraPlayerStartSet_SetTeamId::Val' has a wrong offset!");

// Function LyraGame.AbilityTask_SnapToTarget.ApplySnapToTargetTask
// 0x0090 (0x0090 - 0x0000)
struct AbilityTask_SnapToTarget_ApplySnapToTargetTask final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_RootMotionPriority;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_TargetActor;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            TargetLerpSpeedHorizontal;                         // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TargetLerpSpeedVertical;                           // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_TargetRotationLerpSpeed;                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bSetNewMovementMode;                         // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 MovementMode;                                      // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MoveFlags;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bRestrictSpeedToExpected;                    // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LocationCurve;                                     // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RotationCurve;                                     // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Param_TimeMappingCurve;                            // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinish;                               // 0x0068(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bDisableDestinationReachedInterrupt;         // 0x0084(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_SnapToTarget*              ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_SnapToTarget_ApplySnapToTargetTask) == 0x000008, "Wrong alignment on AbilityTask_SnapToTarget_ApplySnapToTargetTask");
static_assert(sizeof(AbilityTask_SnapToTarget_ApplySnapToTargetTask) == 0x000090, "Wrong size on AbilityTask_SnapToTarget_ApplySnapToTargetTask");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, OwningAbility) == 0x000000, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, TaskInstanceName) == 0x000008, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, Param_RootMotionPriority) == 0x000010, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::Param_RootMotionPriority' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, Param_TargetActor) == 0x000018, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::Param_TargetActor' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, Param_Duration) == 0x000020, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::Param_Duration' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, TargetLerpSpeedHorizontal) == 0x000028, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::TargetLerpSpeedHorizontal' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, TargetLerpSpeedVertical) == 0x000030, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::TargetLerpSpeedVertical' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, Param_TargetRotationLerpSpeed) == 0x000038, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::Param_TargetRotationLerpSpeed' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, Param_bSetNewMovementMode) == 0x00003C, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::Param_bSetNewMovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, MovementMode) == 0x00003D, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::MovementMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, MoveFlags) == 0x000040, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::MoveFlags' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, Param_bRestrictSpeedToExpected) == 0x000044, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::Param_bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, LocationCurve) == 0x000048, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::LocationCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, RotationCurve) == 0x000050, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::RotationCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, Param_TimeMappingCurve) == 0x000058, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::Param_TimeMappingCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, VelocityOnFinishMode) == 0x000060, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, SetVelocityOnFinish) == 0x000068, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::SetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, ClampVelocityOnFinish) == 0x000080, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, Param_bDisableDestinationReachedInterrupt) == 0x000084, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::Param_bDisableDestinationReachedInterrupt' has a wrong offset!");
static_assert(offsetof(AbilityTask_SnapToTarget_ApplySnapToTargetTask, ReturnValue) == 0x000088, "Member 'AbilityTask_SnapToTarget_ApplySnapToTargetTask::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilityTask_ApplyConstantDynamicForce.ApplyConstantDynamicForce
// 0x0078 (0x0078 - 0x0000)
struct TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_RootMotionPriority;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Param_WorldDirection;                              // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Strength;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bKeepActorForwardDirection;                  // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bIsAdditive;                                 // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Param_StrengthOverTime;                            // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinish;                               // 0x0050(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bEnableGravity;                              // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfAbilityTask_ApplyConstantDynamicForce* ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce) == 0x000008, "Wrong alignment on TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce");
static_assert(sizeof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce) == 0x000078, "Wrong size on TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, OwningAbility) == 0x000000, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::OwningAbility' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, TaskInstanceName) == 0x000008, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, Param_RootMotionPriority) == 0x000010, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::Param_RootMotionPriority' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, Param_WorldDirection) == 0x000018, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::Param_WorldDirection' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, Param_Strength) == 0x000030, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::Param_Strength' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, Param_Duration) == 0x000034, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::Param_Duration' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, Param_bKeepActorForwardDirection) == 0x000038, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::Param_bKeepActorForwardDirection' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, Param_bIsAdditive) == 0x000039, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::Param_bIsAdditive' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, Param_StrengthOverTime) == 0x000040, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::Param_StrengthOverTime' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, VelocityOnFinishMode) == 0x000048, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, SetVelocityOnFinish) == 0x000050, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::SetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, ClampVelocityOnFinish) == 0x000068, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, Param_bEnableGravity) == 0x00006C, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::Param_bEnableGravity' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce, ReturnValue) == 0x000070, "Member 'TgfAbilityTask_ApplyConstantDynamicForce_ApplyConstantDynamicForce::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfAbilityTask_TrackConstantForce.ApplyTrackConstantForce
// 0x0078 (0x0078 - 0x0000)
struct TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_RootMotionPriority;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_TargetActor;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Strength;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTgfDashTrackingSettings               Param_TrackingSettings;                            // 0x0028(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Param_bIsAdditive;                                 // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Param_StrengthOverTime;                            // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinish;                               // 0x0050(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bEnableGravity;                              // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTgfAbilityTask_TrackConstantForce*     ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce) == 0x000008, "Wrong alignment on TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce");
static_assert(sizeof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce) == 0x000078, "Wrong size on TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, OwningAbility) == 0x000000, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::OwningAbility' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, TaskInstanceName) == 0x000008, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, Param_RootMotionPriority) == 0x000010, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::Param_RootMotionPriority' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, Param_TargetActor) == 0x000018, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::Param_TargetActor' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, Param_Strength) == 0x000020, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::Param_Strength' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, Param_Duration) == 0x000024, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::Param_Duration' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, Param_TrackingSettings) == 0x000028, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::Param_TrackingSettings' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, Param_bIsAdditive) == 0x00003C, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::Param_bIsAdditive' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, Param_StrengthOverTime) == 0x000040, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::Param_StrengthOverTime' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, VelocityOnFinishMode) == 0x000048, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, SetVelocityOnFinish) == 0x000050, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::SetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, ClampVelocityOnFinish) == 0x000068, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, Param_bEnableGravity) == 0x00006C, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::Param_bEnableGravity' has a wrong offset!");
static_assert(offsetof(TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce, ReturnValue) == 0x000070, "Member 'TgfAbilityTask_TrackConstantForce_ApplyTrackConstantForce::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.GetActiveTagAnimSetIndex
// 0x0018 (0x0018 - 0x0000)
struct LyraAnimInstance_GetActiveTagAnimSetIndex final
{
public:
	TArray<struct FGameplayTag>                   Tags;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraAnimInstance_GetActiveTagAnimSetIndex) == 0x000008, "Wrong alignment on LyraAnimInstance_GetActiveTagAnimSetIndex");
static_assert(sizeof(LyraAnimInstance_GetActiveTagAnimSetIndex) == 0x000018, "Wrong size on LyraAnimInstance_GetActiveTagAnimSetIndex");
static_assert(offsetof(LyraAnimInstance_GetActiveTagAnimSetIndex, Tags) == 0x000000, "Member 'LyraAnimInstance_GetActiveTagAnimSetIndex::Tags' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetActiveTagAnimSetIndex, ReturnValue) == 0x000010, "Member 'LyraAnimInstance_GetActiveTagAnimSetIndex::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.GetCurrentWeaponVector
// 0x0048 (0x0048 - 0x0000)
struct LyraAnimInstance_GetCurrentWeaponVector final
{
public:
	struct FVector                                RightVec;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVec;                                             // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ForwardVec;                                        // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAnimInstance_GetCurrentWeaponVector) == 0x000008, "Wrong alignment on LyraAnimInstance_GetCurrentWeaponVector");
static_assert(sizeof(LyraAnimInstance_GetCurrentWeaponVector) == 0x000048, "Wrong size on LyraAnimInstance_GetCurrentWeaponVector");
static_assert(offsetof(LyraAnimInstance_GetCurrentWeaponVector, RightVec) == 0x000000, "Member 'LyraAnimInstance_GetCurrentWeaponVector::RightVec' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetCurrentWeaponVector, UpVec) == 0x000018, "Member 'LyraAnimInstance_GetCurrentWeaponVector::UpVec' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetCurrentWeaponVector, ForwardVec) == 0x000030, "Member 'LyraAnimInstance_GetCurrentWeaponVector::ForwardVec' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.GetFootLand
// 0x00A8 (0x00A8 - 0x0000)
struct LyraAnimInstance_GetFootLand final
{
public:
	struct FFootLandHitInfo                       Right;                                             // 0x0000(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFootLandHitInfo                       Left;                                              // 0x0040(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BipHeight;                                         // 0x0080(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDis;                                            // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelative;                                         // 0x009C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x009D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugRadius;                                       // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraAnimInstance_GetFootLand) == 0x000008, "Wrong alignment on LyraAnimInstance_GetFootLand");
static_assert(sizeof(LyraAnimInstance_GetFootLand) == 0x0000A8, "Wrong size on LyraAnimInstance_GetFootLand");
static_assert(offsetof(LyraAnimInstance_GetFootLand, Right) == 0x000000, "Member 'LyraAnimInstance_GetFootLand::Right' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetFootLand, Left) == 0x000040, "Member 'LyraAnimInstance_GetFootLand::Left' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetFootLand, BipHeight) == 0x000080, "Member 'LyraAnimInstance_GetFootLand::BipHeight' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetFootLand, MaxDis) == 0x000098, "Member 'LyraAnimInstance_GetFootLand::MaxDis' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetFootLand, bRelative) == 0x00009C, "Member 'LyraAnimInstance_GetFootLand::bRelative' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetFootLand, bDebug) == 0x00009D, "Member 'LyraAnimInstance_GetFootLand::bDebug' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetFootLand, DebugRadius) == 0x0000A0, "Member 'LyraAnimInstance_GetFootLand::DebugRadius' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetFootLand, ReturnValue) == 0x0000A4, "Member 'LyraAnimInstance_GetFootLand::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.GetLeftHandSwordLocation
// 0x0028 (0x0028 - 0x0000)
struct LyraAnimInstance_GetLeftHandSwordLocation final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandHelperRate;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugRadius;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAnimInstance_GetLeftHandSwordLocation) == 0x000008, "Wrong alignment on LyraAnimInstance_GetLeftHandSwordLocation");
static_assert(sizeof(LyraAnimInstance_GetLeftHandSwordLocation) == 0x000028, "Wrong size on LyraAnimInstance_GetLeftHandSwordLocation");
static_assert(offsetof(LyraAnimInstance_GetLeftHandSwordLocation, Offset) == 0x000000, "Member 'LyraAnimInstance_GetLeftHandSwordLocation::Offset' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetLeftHandSwordLocation, HandHelperRate) == 0x000004, "Member 'LyraAnimInstance_GetLeftHandSwordLocation::HandHelperRate' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetLeftHandSwordLocation, bDebug) == 0x000008, "Member 'LyraAnimInstance_GetLeftHandSwordLocation::bDebug' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetLeftHandSwordLocation, DebugRadius) == 0x00000C, "Member 'LyraAnimInstance_GetLeftHandSwordLocation::DebugRadius' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetLeftHandSwordLocation, ReturnValue) == 0x000010, "Member 'LyraAnimInstance_GetLeftHandSwordLocation::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.GetWeaponSocketLocation
// 0x0028 (0x0028 - 0x0000)
struct LyraAnimInstance_GetWeaponSocketLocation final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     TemplateBase;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAnimInstance_GetWeaponSocketLocation) == 0x000008, "Wrong alignment on LyraAnimInstance_GetWeaponSocketLocation");
static_assert(sizeof(LyraAnimInstance_GetWeaponSocketLocation) == 0x000028, "Wrong size on LyraAnimInstance_GetWeaponSocketLocation");
static_assert(offsetof(LyraAnimInstance_GetWeaponSocketLocation, SocketName) == 0x000000, "Member 'LyraAnimInstance_GetWeaponSocketLocation::SocketName' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetWeaponSocketLocation, TemplateBase) == 0x000008, "Member 'LyraAnimInstance_GetWeaponSocketLocation::TemplateBase' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetWeaponSocketLocation, ReturnValue) == 0x000010, "Member 'LyraAnimInstance_GetWeaponSocketLocation::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.GetWeaponSocketTransform
// 0x0070 (0x0070 - 0x0000)
struct LyraAnimInstance_GetWeaponSocketTransform final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     TemplateBase;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAnimInstance_GetWeaponSocketTransform) == 0x000010, "Wrong alignment on LyraAnimInstance_GetWeaponSocketTransform");
static_assert(sizeof(LyraAnimInstance_GetWeaponSocketTransform) == 0x000070, "Wrong size on LyraAnimInstance_GetWeaponSocketTransform");
static_assert(offsetof(LyraAnimInstance_GetWeaponSocketTransform, SocketName) == 0x000000, "Member 'LyraAnimInstance_GetWeaponSocketTransform::SocketName' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetWeaponSocketTransform, TemplateBase) == 0x000008, "Member 'LyraAnimInstance_GetWeaponSocketTransform::TemplateBase' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetWeaponSocketTransform, ReturnValue) == 0x000010, "Member 'LyraAnimInstance_GetWeaponSocketTransform::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.Montage_GetModifyPlayRate
// 0x0010 (0x0010 - 0x0000)
struct LyraAnimInstance_Montage_GetModifyPlayRate final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraPlayRateModifyKey                        Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAnimInstance_Montage_GetModifyPlayRate) == 0x000008, "Wrong alignment on LyraAnimInstance_Montage_GetModifyPlayRate");
static_assert(sizeof(LyraAnimInstance_Montage_GetModifyPlayRate) == 0x000010, "Wrong size on LyraAnimInstance_Montage_GetModifyPlayRate");
static_assert(offsetof(LyraAnimInstance_Montage_GetModifyPlayRate, Montage) == 0x000000, "Member 'LyraAnimInstance_Montage_GetModifyPlayRate::Montage' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_Montage_GetModifyPlayRate, Key) == 0x000008, "Member 'LyraAnimInstance_Montage_GetModifyPlayRate::Key' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_Montage_GetModifyPlayRate, ReturnValue) == 0x00000C, "Member 'LyraAnimInstance_Montage_GetModifyPlayRate::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.Montage_SetModifyPlayRate
// 0x0010 (0x0010 - 0x0000)
struct LyraAnimInstance_Montage_SetModifyPlayRate final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELyraPlayRateModifyKey                        Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModifyRate;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAnimInstance_Montage_SetModifyPlayRate) == 0x000008, "Wrong alignment on LyraAnimInstance_Montage_SetModifyPlayRate");
static_assert(sizeof(LyraAnimInstance_Montage_SetModifyPlayRate) == 0x000010, "Wrong size on LyraAnimInstance_Montage_SetModifyPlayRate");
static_assert(offsetof(LyraAnimInstance_Montage_SetModifyPlayRate, Montage) == 0x000000, "Member 'LyraAnimInstance_Montage_SetModifyPlayRate::Montage' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_Montage_SetModifyPlayRate, Key) == 0x000008, "Member 'LyraAnimInstance_Montage_SetModifyPlayRate::Key' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_Montage_SetModifyPlayRate, ModifyRate) == 0x00000C, "Member 'LyraAnimInstance_Montage_SetModifyPlayRate::ModifyRate' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.GetBone2BoneZOffset
// 0x0014 (0x0014 - 0x0000)
struct LyraAnimInstance_GetBone2BoneZOffset final
{
public:
	class FName                                   First;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Second;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAnimInstance_GetBone2BoneZOffset) == 0x000004, "Wrong alignment on LyraAnimInstance_GetBone2BoneZOffset");
static_assert(sizeof(LyraAnimInstance_GetBone2BoneZOffset) == 0x000014, "Wrong size on LyraAnimInstance_GetBone2BoneZOffset");
static_assert(offsetof(LyraAnimInstance_GetBone2BoneZOffset, First) == 0x000000, "Member 'LyraAnimInstance_GetBone2BoneZOffset::First' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetBone2BoneZOffset, Second) == 0x000008, "Member 'LyraAnimInstance_GetBone2BoneZOffset::Second' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetBone2BoneZOffset, ReturnValue) == 0x000010, "Member 'LyraAnimInstance_GetBone2BoneZOffset::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.GetBoneComponentLocationZ
// 0x000C (0x000C - 0x0000)
struct LyraAnimInstance_GetBoneComponentLocationZ final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAnimInstance_GetBoneComponentLocationZ) == 0x000004, "Wrong alignment on LyraAnimInstance_GetBoneComponentLocationZ");
static_assert(sizeof(LyraAnimInstance_GetBoneComponentLocationZ) == 0x00000C, "Wrong size on LyraAnimInstance_GetBoneComponentLocationZ");
static_assert(offsetof(LyraAnimInstance_GetBoneComponentLocationZ, BoneName) == 0x000000, "Member 'LyraAnimInstance_GetBoneComponentLocationZ::BoneName' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetBoneComponentLocationZ, ReturnValue) == 0x000008, "Member 'LyraAnimInstance_GetBoneComponentLocationZ::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.GetBoneTransform
// 0x0070 (0x0070 - 0x0000)
struct LyraAnimInstance_GetBoneTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAnimInstance_GetBoneTransform) == 0x000010, "Wrong alignment on LyraAnimInstance_GetBoneTransform");
static_assert(sizeof(LyraAnimInstance_GetBoneTransform) == 0x000070, "Wrong size on LyraAnimInstance_GetBoneTransform");
static_assert(offsetof(LyraAnimInstance_GetBoneTransform, BoneName) == 0x000000, "Member 'LyraAnimInstance_GetBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetBoneTransform, ReturnValue) == 0x000010, "Member 'LyraAnimInstance_GetBoneTransform::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.GetCurrentDeathAnimationLength
// 0x0004 (0x0004 - 0x0000)
struct LyraAnimInstance_GetCurrentDeathAnimationLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAnimInstance_GetCurrentDeathAnimationLength) == 0x000004, "Wrong alignment on LyraAnimInstance_GetCurrentDeathAnimationLength");
static_assert(sizeof(LyraAnimInstance_GetCurrentDeathAnimationLength) == 0x000004, "Wrong size on LyraAnimInstance_GetCurrentDeathAnimationLength");
static_assert(offsetof(LyraAnimInstance_GetCurrentDeathAnimationLength, ReturnValue) == 0x000000, "Member 'LyraAnimInstance_GetCurrentDeathAnimationLength::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraAnimInstance.GetDeathAnimationLength
// 0x0008 (0x0008 - 0x0000)
struct LyraAnimInstance_GetDeathAnimationLength final
{
public:
	EAnimConfigDirection                          DeathDirection;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraAnimInstance_GetDeathAnimationLength) == 0x000004, "Wrong alignment on LyraAnimInstance_GetDeathAnimationLength");
static_assert(sizeof(LyraAnimInstance_GetDeathAnimationLength) == 0x000008, "Wrong size on LyraAnimInstance_GetDeathAnimationLength");
static_assert(offsetof(LyraAnimInstance_GetDeathAnimationLength, DeathDirection) == 0x000000, "Member 'LyraAnimInstance_GetDeathAnimationLength::DeathDirection' has a wrong offset!");
static_assert(offsetof(LyraAnimInstance_GetDeathAnimationLength, ReturnValue) == 0x000004, "Member 'LyraAnimInstance_GetDeathAnimationLength::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingValueDiscreteDynamic_AudioOutputDevice.DefaultDeviceChanged
// 0x0018 (0x0018 - 0x0000)
struct LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged final
{
public:
	EAudioDeviceChangedRole                       InRole;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceID;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged) == 0x000008, "Wrong alignment on LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged");
static_assert(sizeof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged) == 0x000018, "Wrong size on LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged, InRole) == 0x000000, "Member 'LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged::InRole' has a wrong offset!");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged, DeviceID) == 0x000008, "Member 'LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged::DeviceID' has a wrong offset!");

// Function LyraGame.LyraSettingValueDiscreteDynamic_AudioOutputDevice.DeviceAddedOrRemoved
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved) == 0x000008, "Wrong alignment on LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved");
static_assert(sizeof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved) == 0x000010, "Wrong size on LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved, DeviceID) == 0x000000, "Member 'LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved::DeviceID' has a wrong offset!");

// Function LyraGame.LyraSettingValueDiscreteDynamic_AudioOutputDevice.OnAudioOutputDevicesObtained
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained final
{
public:
	TArray<struct FAudioOutputDeviceInfo>         AvailableDevices;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained) == 0x000008, "Wrong alignment on LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained");
static_assert(sizeof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained) == 0x000010, "Wrong size on LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained, AvailableDevices) == 0x000000, "Member 'LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained::AvailableDevices' has a wrong offset!");

// Function LyraGame.LyraSettingValueDiscreteDynamic_AudioOutputDevice.OnCompletedDeviceSwap
// 0x0028 (0x0028 - 0x0000)
struct LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap final
{
public:
	struct FSwapAudioOutputResult                 SwapResult;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap) == 0x000008, "Wrong alignment on LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap");
static_assert(sizeof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap) == 0x000028, "Wrong size on LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap, SwapResult) == 0x000000, "Member 'LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap::SwapResult' has a wrong offset!");

// Function LyraGame.LyraCameraComponent.FindCameraComponent
// 0x0010 (0x0010 - 0x0000)
struct LyraCameraComponent_FindCameraComponent final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraCameraComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCameraComponent_FindCameraComponent) == 0x000008, "Wrong alignment on LyraCameraComponent_FindCameraComponent");
static_assert(sizeof(LyraCameraComponent_FindCameraComponent) == 0x000010, "Wrong size on LyraCameraComponent_FindCameraComponent");
static_assert(offsetof(LyraCameraComponent_FindCameraComponent, Actor) == 0x000000, "Member 'LyraCameraComponent_FindCameraComponent::Actor' has a wrong offset!");
static_assert(offsetof(LyraCameraComponent_FindCameraComponent, ReturnValue) == 0x000008, "Member 'LyraCameraComponent_FindCameraComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCameraComponent.ChangeAspectRatio
// 0x0008 (0x0008 - 0x0000)
struct LyraCameraComponent_ChangeAspectRatio final
{
public:
	uint32                                        ResX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ResY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCameraComponent_ChangeAspectRatio) == 0x000004, "Wrong alignment on LyraCameraComponent_ChangeAspectRatio");
static_assert(sizeof(LyraCameraComponent_ChangeAspectRatio) == 0x000008, "Wrong size on LyraCameraComponent_ChangeAspectRatio");
static_assert(offsetof(LyraCameraComponent_ChangeAspectRatio, ResX) == 0x000000, "Member 'LyraCameraComponent_ChangeAspectRatio::ResX' has a wrong offset!");
static_assert(offsetof(LyraCameraComponent_ChangeAspectRatio, ResY) == 0x000004, "Member 'LyraCameraComponent_ChangeAspectRatio::ResY' has a wrong offset!");

// Function LyraGame.LyraReplaySubsystem.DoesPlatformSupportReplays
// 0x0001 (0x0001 - 0x0000)
struct LyraReplaySubsystem_DoesPlatformSupportReplays final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplaySubsystem_DoesPlatformSupportReplays) == 0x000001, "Wrong alignment on LyraReplaySubsystem_DoesPlatformSupportReplays");
static_assert(sizeof(LyraReplaySubsystem_DoesPlatformSupportReplays) == 0x000001, "Wrong size on LyraReplaySubsystem_DoesPlatformSupportReplays");
static_assert(offsetof(LyraReplaySubsystem_DoesPlatformSupportReplays, ReturnValue) == 0x000000, "Member 'LyraReplaySubsystem_DoesPlatformSupportReplays::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraReplaySubsystem.CleanupLocalReplays
// 0x0010 (0x0010 - 0x0000)
struct LyraReplaySubsystem_CleanupLocalReplays final
{
public:
	class ULocalPlayer*                           LocalPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumReplaysToKeep;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraReplaySubsystem_CleanupLocalReplays) == 0x000008, "Wrong alignment on LyraReplaySubsystem_CleanupLocalReplays");
static_assert(sizeof(LyraReplaySubsystem_CleanupLocalReplays) == 0x000010, "Wrong size on LyraReplaySubsystem_CleanupLocalReplays");
static_assert(offsetof(LyraReplaySubsystem_CleanupLocalReplays, LocalPlayer) == 0x000000, "Member 'LyraReplaySubsystem_CleanupLocalReplays::LocalPlayer' has a wrong offset!");
static_assert(offsetof(LyraReplaySubsystem_CleanupLocalReplays, NumReplaysToKeep) == 0x000008, "Member 'LyraReplaySubsystem_CleanupLocalReplays::NumReplaysToKeep' has a wrong offset!");

// Function LyraGame.LyraReplaySubsystem.PlayReplay
// 0x0008 (0x0008 - 0x0000)
struct LyraReplaySubsystem_PlayReplay final
{
public:
	class ULyraReplayListEntry*                   Replay;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplaySubsystem_PlayReplay) == 0x000008, "Wrong alignment on LyraReplaySubsystem_PlayReplay");
static_assert(sizeof(LyraReplaySubsystem_PlayReplay) == 0x000008, "Wrong size on LyraReplaySubsystem_PlayReplay");
static_assert(offsetof(LyraReplaySubsystem_PlayReplay, Replay) == 0x000000, "Member 'LyraReplaySubsystem_PlayReplay::Replay' has a wrong offset!");

// Function LyraGame.LyraReplaySubsystem.RecordClientReplay
// 0x0008 (0x0008 - 0x0000)
struct LyraReplaySubsystem_RecordClientReplay final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplaySubsystem_RecordClientReplay) == 0x000008, "Wrong alignment on LyraReplaySubsystem_RecordClientReplay");
static_assert(sizeof(LyraReplaySubsystem_RecordClientReplay) == 0x000008, "Wrong size on LyraReplaySubsystem_RecordClientReplay");
static_assert(offsetof(LyraReplaySubsystem_RecordClientReplay, PlayerController) == 0x000000, "Member 'LyraReplaySubsystem_RecordClientReplay::PlayerController' has a wrong offset!");

// Function LyraGame.LyraReplaySubsystem.RecordReplay
// 0x0008 (0x0008 - 0x0000)
struct LyraReplaySubsystem_RecordReplay final
{
public:
	bool                                          IsClient;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplaySubsystem_RecordReplay) == 0x000004, "Wrong alignment on LyraReplaySubsystem_RecordReplay");
static_assert(sizeof(LyraReplaySubsystem_RecordReplay) == 0x000008, "Wrong size on LyraReplaySubsystem_RecordReplay");
static_assert(offsetof(LyraReplaySubsystem_RecordReplay, IsClient) == 0x000000, "Member 'LyraReplaySubsystem_RecordReplay::IsClient' has a wrong offset!");
static_assert(offsetof(LyraReplaySubsystem_RecordReplay, Param_Index) == 0x000004, "Member 'LyraReplaySubsystem_RecordReplay::Param_Index' has a wrong offset!");

// Function LyraGame.LyraReplaySubsystem.SeekInActiveReplay
// 0x0004 (0x0004 - 0x0000)
struct LyraReplaySubsystem_SeekInActiveReplay final
{
public:
	float                                         TimeInSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplaySubsystem_SeekInActiveReplay) == 0x000004, "Wrong alignment on LyraReplaySubsystem_SeekInActiveReplay");
static_assert(sizeof(LyraReplaySubsystem_SeekInActiveReplay) == 0x000004, "Wrong size on LyraReplaySubsystem_SeekInActiveReplay");
static_assert(offsetof(LyraReplaySubsystem_SeekInActiveReplay, TimeInSeconds) == 0x000000, "Member 'LyraReplaySubsystem_SeekInActiveReplay::TimeInSeconds' has a wrong offset!");

// Function LyraGame.LyraReplaySubsystem.GetReplayCurrentTime
// 0x0004 (0x0004 - 0x0000)
struct LyraReplaySubsystem_GetReplayCurrentTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplaySubsystem_GetReplayCurrentTime) == 0x000004, "Wrong alignment on LyraReplaySubsystem_GetReplayCurrentTime");
static_assert(sizeof(LyraReplaySubsystem_GetReplayCurrentTime) == 0x000004, "Wrong size on LyraReplaySubsystem_GetReplayCurrentTime");
static_assert(offsetof(LyraReplaySubsystem_GetReplayCurrentTime, ReturnValue) == 0x000000, "Member 'LyraReplaySubsystem_GetReplayCurrentTime::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraReplaySubsystem.GetReplayLengthInSeconds
// 0x0004 (0x0004 - 0x0000)
struct LyraReplaySubsystem_GetReplayLengthInSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplaySubsystem_GetReplayLengthInSeconds) == 0x000004, "Wrong alignment on LyraReplaySubsystem_GetReplayLengthInSeconds");
static_assert(sizeof(LyraReplaySubsystem_GetReplayLengthInSeconds) == 0x000004, "Wrong size on LyraReplaySubsystem_GetReplayLengthInSeconds");
static_assert(offsetof(LyraReplaySubsystem_GetReplayLengthInSeconds, ReturnValue) == 0x000000, "Member 'LyraReplaySubsystem_GetReplayLengthInSeconds::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacterMovementComponent.EndPantherState
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacterMovementComponent_EndPantherState final
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacterMovementComponent_EndPantherState) == 0x000001, "Wrong alignment on LyraCharacterMovementComponent_EndPantherState");
static_assert(sizeof(LyraCharacterMovementComponent_EndPantherState) == 0x000001, "Wrong size on LyraCharacterMovementComponent_EndPantherState");
static_assert(offsetof(LyraCharacterMovementComponent_EndPantherState, bClientSimulation) == 0x000000, "Member 'LyraCharacterMovementComponent_EndPantherState::bClientSimulation' has a wrong offset!");

// Function LyraGame.LyraCharacterMovementComponent.GetGroundInfo
// 0x00F8 (0x00F8 - 0x0000)
struct LyraCharacterMovementComponent_GetGroundInfo final
{
public:
	struct FLyraCharacterGroundInfo               ReturnValue;                                       // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacterMovementComponent_GetGroundInfo) == 0x000008, "Wrong alignment on LyraCharacterMovementComponent_GetGroundInfo");
static_assert(sizeof(LyraCharacterMovementComponent_GetGroundInfo) == 0x0000F8, "Wrong size on LyraCharacterMovementComponent_GetGroundInfo");
static_assert(offsetof(LyraCharacterMovementComponent_GetGroundInfo, ReturnValue) == 0x000000, "Member 'LyraCharacterMovementComponent_GetGroundInfo::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCharacterMovementComponent.InitializeWithAbilitySystem
// 0x0008 (0x0008 - 0x0000)
struct LyraCharacterMovementComponent_InitializeWithAbilitySystem final
{
public:
	class ULyraAbilitySystemComponent*            InASC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacterMovementComponent_InitializeWithAbilitySystem) == 0x000008, "Wrong alignment on LyraCharacterMovementComponent_InitializeWithAbilitySystem");
static_assert(sizeof(LyraCharacterMovementComponent_InitializeWithAbilitySystem) == 0x000008, "Wrong size on LyraCharacterMovementComponent_InitializeWithAbilitySystem");
static_assert(offsetof(LyraCharacterMovementComponent_InitializeWithAbilitySystem, InASC) == 0x000000, "Member 'LyraCharacterMovementComponent_InitializeWithAbilitySystem::InASC' has a wrong offset!");

// Function LyraGame.LyraCharacterMovementComponent.SetCanWalkOffLedges
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacterMovementComponent_SetCanWalkOffLedges final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacterMovementComponent_SetCanWalkOffLedges) == 0x000001, "Wrong alignment on LyraCharacterMovementComponent_SetCanWalkOffLedges");
static_assert(sizeof(LyraCharacterMovementComponent_SetCanWalkOffLedges) == 0x000001, "Wrong size on LyraCharacterMovementComponent_SetCanWalkOffLedges");
static_assert(offsetof(LyraCharacterMovementComponent_SetCanWalkOffLedges, bEnabled) == 0x000000, "Member 'LyraCharacterMovementComponent_SetCanWalkOffLedges::bEnabled' has a wrong offset!");

// Function LyraGame.LyraCharacterMovementComponent.SetUseLooseServerDistCheck
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacterMovementComponent_SetUseLooseServerDistCheck final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacterMovementComponent_SetUseLooseServerDistCheck) == 0x000001, "Wrong alignment on LyraCharacterMovementComponent_SetUseLooseServerDistCheck");
static_assert(sizeof(LyraCharacterMovementComponent_SetUseLooseServerDistCheck) == 0x000001, "Wrong size on LyraCharacterMovementComponent_SetUseLooseServerDistCheck");
static_assert(offsetof(LyraCharacterMovementComponent_SetUseLooseServerDistCheck, bEnable) == 0x000000, "Member 'LyraCharacterMovementComponent_SetUseLooseServerDistCheck::bEnable' has a wrong offset!");

// Function LyraGame.LyraCharacterMovementComponent.StartPantherState
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacterMovementComponent_StartPantherState final
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacterMovementComponent_StartPantherState) == 0x000001, "Wrong alignment on LyraCharacterMovementComponent_StartPantherState");
static_assert(sizeof(LyraCharacterMovementComponent_StartPantherState) == 0x000001, "Wrong size on LyraCharacterMovementComponent_StartPantherState");
static_assert(offsetof(LyraCharacterMovementComponent_StartPantherState, bClientSimulation) == 0x000000, "Member 'LyraCharacterMovementComponent_StartPantherState::bClientSimulation' has a wrong offset!");

// Function LyraGame.LyraCharacterMovementComponent.ToggleSimulateTurn
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacterMovementComponent_ToggleSimulateTurn final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacterMovementComponent_ToggleSimulateTurn) == 0x000001, "Wrong alignment on LyraCharacterMovementComponent_ToggleSimulateTurn");
static_assert(sizeof(LyraCharacterMovementComponent_ToggleSimulateTurn) == 0x000001, "Wrong size on LyraCharacterMovementComponent_ToggleSimulateTurn");
static_assert(offsetof(LyraCharacterMovementComponent_ToggleSimulateTurn, bEnable) == 0x000000, "Member 'LyraCharacterMovementComponent_ToggleSimulateTurn::bEnable' has a wrong offset!");

// Function LyraGame.LyraCharacterMovementComponent.IsJumping
// 0x0001 (0x0001 - 0x0000)
struct LyraCharacterMovementComponent_IsJumping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCharacterMovementComponent_IsJumping) == 0x000001, "Wrong alignment on LyraCharacterMovementComponent_IsJumping");
static_assert(sizeof(LyraCharacterMovementComponent_IsJumping) == 0x000001, "Wrong size on LyraCharacterMovementComponent_IsJumping");
static_assert(offsetof(LyraCharacterMovementComponent_IsJumping, ReturnValue) == 0x000000, "Member 'LyraCharacterMovementComponent_IsJumping::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraHealthComponent.FindHealthComponent
// 0x0010 (0x0010 - 0x0000)
struct LyraHealthComponent_FindHealthComponent final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraHealthComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHealthComponent_FindHealthComponent) == 0x000008, "Wrong alignment on LyraHealthComponent_FindHealthComponent");
static_assert(sizeof(LyraHealthComponent_FindHealthComponent) == 0x000010, "Wrong size on LyraHealthComponent_FindHealthComponent");
static_assert(offsetof(LyraHealthComponent_FindHealthComponent, Actor) == 0x000000, "Member 'LyraHealthComponent_FindHealthComponent::Actor' has a wrong offset!");
static_assert(offsetof(LyraHealthComponent_FindHealthComponent, ReturnValue) == 0x000008, "Member 'LyraHealthComponent_FindHealthComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraHealthComponent.InitializeWithAbilitySystem
// 0x0008 (0x0008 - 0x0000)
struct LyraHealthComponent_InitializeWithAbilitySystem final
{
public:
	class ULyraAbilitySystemComponent*            InASC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHealthComponent_InitializeWithAbilitySystem) == 0x000008, "Wrong alignment on LyraHealthComponent_InitializeWithAbilitySystem");
static_assert(sizeof(LyraHealthComponent_InitializeWithAbilitySystem) == 0x000008, "Wrong size on LyraHealthComponent_InitializeWithAbilitySystem");
static_assert(offsetof(LyraHealthComponent_InitializeWithAbilitySystem, InASC) == 0x000000, "Member 'LyraHealthComponent_InitializeWithAbilitySystem::InASC' has a wrong offset!");

// Function LyraGame.LyraHealthComponent.OnRep_DeathState
// 0x0001 (0x0001 - 0x0000)
struct LyraHealthComponent_OnRep_DeathState final
{
public:
	ELyraDeathState                               OldDeathState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHealthComponent_OnRep_DeathState) == 0x000001, "Wrong alignment on LyraHealthComponent_OnRep_DeathState");
static_assert(sizeof(LyraHealthComponent_OnRep_DeathState) == 0x000001, "Wrong size on LyraHealthComponent_OnRep_DeathState");
static_assert(offsetof(LyraHealthComponent_OnRep_DeathState, OldDeathState) == 0x000000, "Member 'LyraHealthComponent_OnRep_DeathState::OldDeathState' has a wrong offset!");

// Function LyraGame.LyraHealthComponent.GetDeathState
// 0x0001 (0x0001 - 0x0000)
struct LyraHealthComponent_GetDeathState final
{
public:
	ELyraDeathState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHealthComponent_GetDeathState) == 0x000001, "Wrong alignment on LyraHealthComponent_GetDeathState");
static_assert(sizeof(LyraHealthComponent_GetDeathState) == 0x000001, "Wrong size on LyraHealthComponent_GetDeathState");
static_assert(offsetof(LyraHealthComponent_GetDeathState, ReturnValue) == 0x000000, "Member 'LyraHealthComponent_GetDeathState::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraHealthComponent.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct LyraHealthComponent_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHealthComponent_GetHealth) == 0x000004, "Wrong alignment on LyraHealthComponent_GetHealth");
static_assert(sizeof(LyraHealthComponent_GetHealth) == 0x000004, "Wrong size on LyraHealthComponent_GetHealth");
static_assert(offsetof(LyraHealthComponent_GetHealth, ReturnValue) == 0x000000, "Member 'LyraHealthComponent_GetHealth::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraHealthComponent.GetHealthNormalized
// 0x0004 (0x0004 - 0x0000)
struct LyraHealthComponent_GetHealthNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHealthComponent_GetHealthNormalized) == 0x000004, "Wrong alignment on LyraHealthComponent_GetHealthNormalized");
static_assert(sizeof(LyraHealthComponent_GetHealthNormalized) == 0x000004, "Wrong size on LyraHealthComponent_GetHealthNormalized");
static_assert(offsetof(LyraHealthComponent_GetHealthNormalized, ReturnValue) == 0x000000, "Member 'LyraHealthComponent_GetHealthNormalized::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraHealthComponent.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct LyraHealthComponent_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHealthComponent_GetMaxHealth) == 0x000004, "Wrong alignment on LyraHealthComponent_GetMaxHealth");
static_assert(sizeof(LyraHealthComponent_GetMaxHealth) == 0x000004, "Wrong size on LyraHealthComponent_GetMaxHealth");
static_assert(offsetof(LyraHealthComponent_GetMaxHealth, ReturnValue) == 0x000000, "Member 'LyraHealthComponent_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraHealthComponent.IsDeadOrDying
// 0x0001 (0x0001 - 0x0000)
struct LyraHealthComponent_IsDeadOrDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraHealthComponent_IsDeadOrDying) == 0x000001, "Wrong alignment on LyraHealthComponent_IsDeadOrDying");
static_assert(sizeof(LyraHealthComponent_IsDeadOrDying) == 0x000001, "Wrong size on LyraHealthComponent_IsDeadOrDying");
static_assert(offsetof(LyraHealthComponent_IsDeadOrDying, ReturnValue) == 0x000000, "Member 'LyraHealthComponent_IsDeadOrDying::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPawn.OnControllerChangedTeam
// 0x0010 (0x0010 - 0x0000)
struct LyraPawn_OnControllerChangedTeam final
{
public:
	class UObject*                                TeamAgent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldTeam;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeam;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawn_OnControllerChangedTeam) == 0x000008, "Wrong alignment on LyraPawn_OnControllerChangedTeam");
static_assert(sizeof(LyraPawn_OnControllerChangedTeam) == 0x000010, "Wrong size on LyraPawn_OnControllerChangedTeam");
static_assert(offsetof(LyraPawn_OnControllerChangedTeam, TeamAgent) == 0x000000, "Member 'LyraPawn_OnControllerChangedTeam::TeamAgent' has a wrong offset!");
static_assert(offsetof(LyraPawn_OnControllerChangedTeam, OldTeam) == 0x000008, "Member 'LyraPawn_OnControllerChangedTeam::OldTeam' has a wrong offset!");
static_assert(offsetof(LyraPawn_OnControllerChangedTeam, NewTeam) == 0x00000C, "Member 'LyraPawn_OnControllerChangedTeam::NewTeam' has a wrong offset!");

// Function LyraGame.LyraPawn.OnRep_MyTeamID
// 0x0001 (0x0001 - 0x0000)
struct LyraPawn_OnRep_MyTeamID final
{
public:
	struct FGenericTeamId                         OldTeamID;                                         // 0x0000(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawn_OnRep_MyTeamID) == 0x000001, "Wrong alignment on LyraPawn_OnRep_MyTeamID");
static_assert(sizeof(LyraPawn_OnRep_MyTeamID) == 0x000001, "Wrong size on LyraPawn_OnRep_MyTeamID");
static_assert(offsetof(LyraPawn_OnRep_MyTeamID, OldTeamID) == 0x000000, "Member 'LyraPawn_OnRep_MyTeamID::OldTeamID' has a wrong offset!");

// Function LyraGame.LyraPawnExtensionComponent.FindPawnExtensionComponent
// 0x0010 (0x0010 - 0x0000)
struct LyraPawnExtensionComponent_FindPawnExtensionComponent final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraPawnExtensionComponent*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnExtensionComponent_FindPawnExtensionComponent) == 0x000008, "Wrong alignment on LyraPawnExtensionComponent_FindPawnExtensionComponent");
static_assert(sizeof(LyraPawnExtensionComponent_FindPawnExtensionComponent) == 0x000010, "Wrong size on LyraPawnExtensionComponent_FindPawnExtensionComponent");
static_assert(offsetof(LyraPawnExtensionComponent_FindPawnExtensionComponent, Actor) == 0x000000, "Member 'LyraPawnExtensionComponent_FindPawnExtensionComponent::Actor' has a wrong offset!");
static_assert(offsetof(LyraPawnExtensionComponent_FindPawnExtensionComponent, ReturnValue) == 0x000008, "Member 'LyraPawnExtensionComponent_FindPawnExtensionComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPawnExtensionComponent.HandleAppearanceCaptureEvent
// 0x0010 (0x0010 - 0x0000)
struct LyraPawnExtensionComponent_HandleAppearanceCaptureEvent final
{
public:
	int64                                         RoleID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SlateBrush;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnExtensionComponent_HandleAppearanceCaptureEvent) == 0x000008, "Wrong alignment on LyraPawnExtensionComponent_HandleAppearanceCaptureEvent");
static_assert(sizeof(LyraPawnExtensionComponent_HandleAppearanceCaptureEvent) == 0x000010, "Wrong size on LyraPawnExtensionComponent_HandleAppearanceCaptureEvent");
static_assert(offsetof(LyraPawnExtensionComponent_HandleAppearanceCaptureEvent, RoleID) == 0x000000, "Member 'LyraPawnExtensionComponent_HandleAppearanceCaptureEvent::RoleID' has a wrong offset!");
static_assert(offsetof(LyraPawnExtensionComponent_HandleAppearanceCaptureEvent, SlateBrush) == 0x000008, "Member 'LyraPawnExtensionComponent_HandleAppearanceCaptureEvent::SlateBrush' has a wrong offset!");

// Function LyraGame.LyraPawnExtensionComponent.HandleSettingScreenDestruct
// 0x0008 (0x0008 - 0x0000)
struct LyraPawnExtensionComponent_HandleSettingScreenDestruct final
{
public:
	class UObject*                                Args;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnExtensionComponent_HandleSettingScreenDestruct) == 0x000008, "Wrong alignment on LyraPawnExtensionComponent_HandleSettingScreenDestruct");
static_assert(sizeof(LyraPawnExtensionComponent_HandleSettingScreenDestruct) == 0x000008, "Wrong size on LyraPawnExtensionComponent_HandleSettingScreenDestruct");
static_assert(offsetof(LyraPawnExtensionComponent_HandleSettingScreenDestruct, Args) == 0x000000, "Member 'LyraPawnExtensionComponent_HandleSettingScreenDestruct::Args' has a wrong offset!");

// Function LyraGame.LyraPawnExtensionComponent.GetLyraAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraPawnExtensionComponent_GetLyraAbilitySystemComponent final
{
public:
	class ULyraAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnExtensionComponent_GetLyraAbilitySystemComponent) == 0x000008, "Wrong alignment on LyraPawnExtensionComponent_GetLyraAbilitySystemComponent");
static_assert(sizeof(LyraPawnExtensionComponent_GetLyraAbilitySystemComponent) == 0x000008, "Wrong size on LyraPawnExtensionComponent_GetLyraAbilitySystemComponent");
static_assert(offsetof(LyraPawnExtensionComponent_GetLyraAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'LyraPawnExtensionComponent_GetLyraAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBattleSecurityComponent.CheckActiveEffectBlocking
// 0x0018 (0x0018 - 0x0000)
struct TgfBattleSecurityComponent_CheckActiveEffectBlocking final
{
public:
	const class UTgfGameplayEffect*               GameplayEffect;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBattleSecurityComponent_CheckActiveEffectBlocking) == 0x000008, "Wrong alignment on TgfBattleSecurityComponent_CheckActiveEffectBlocking");
static_assert(sizeof(TgfBattleSecurityComponent_CheckActiveEffectBlocking) == 0x000018, "Wrong size on TgfBattleSecurityComponent_CheckActiveEffectBlocking");
static_assert(offsetof(TgfBattleSecurityComponent_CheckActiveEffectBlocking, GameplayEffect) == 0x000000, "Member 'TgfBattleSecurityComponent_CheckActiveEffectBlocking::GameplayEffect' has a wrong offset!");
static_assert(offsetof(TgfBattleSecurityComponent_CheckActiveEffectBlocking, Target) == 0x000008, "Member 'TgfBattleSecurityComponent_CheckActiveEffectBlocking::Target' has a wrong offset!");
static_assert(offsetof(TgfBattleSecurityComponent_CheckActiveEffectBlocking, ReturnValue) == 0x000010, "Member 'TgfBattleSecurityComponent_CheckActiveEffectBlocking::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBattleSecurityComponent.CheckActiveSkillBlocking
// 0x0010 (0x0010 - 0x0000)
struct TgfBattleSecurityComponent_CheckActiveSkillBlocking final
{
public:
	const class ULyraGameplayAbility*             GameplayAbility;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfBattleSecurityComponent_CheckActiveSkillBlocking) == 0x000008, "Wrong alignment on TgfBattleSecurityComponent_CheckActiveSkillBlocking");
static_assert(sizeof(TgfBattleSecurityComponent_CheckActiveSkillBlocking) == 0x000010, "Wrong size on TgfBattleSecurityComponent_CheckActiveSkillBlocking");
static_assert(offsetof(TgfBattleSecurityComponent_CheckActiveSkillBlocking, GameplayAbility) == 0x000000, "Member 'TgfBattleSecurityComponent_CheckActiveSkillBlocking::GameplayAbility' has a wrong offset!");
static_assert(offsetof(TgfBattleSecurityComponent_CheckActiveSkillBlocking, ReturnValue) == 0x000008, "Member 'TgfBattleSecurityComponent_CheckActiveSkillBlocking::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfBattleSecurityComponent.InitializeWithAbilitySystem
// 0x0008 (0x0008 - 0x0000)
struct TgfBattleSecurityComponent_InitializeWithAbilitySystem final
{
public:
	class ULyraAbilitySystemComponent*            InASC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBattleSecurityComponent_InitializeWithAbilitySystem) == 0x000008, "Wrong alignment on TgfBattleSecurityComponent_InitializeWithAbilitySystem");
static_assert(sizeof(TgfBattleSecurityComponent_InitializeWithAbilitySystem) == 0x000008, "Wrong size on TgfBattleSecurityComponent_InitializeWithAbilitySystem");
static_assert(offsetof(TgfBattleSecurityComponent_InitializeWithAbilitySystem, InASC) == 0x000000, "Member 'TgfBattleSecurityComponent_InitializeWithAbilitySystem::InASC' has a wrong offset!");

// Function LyraGame.TgfBattleSecurityComponent.UpdateActiveEffectCD
// 0x0010 (0x0010 - 0x0000)
struct TgfBattleSecurityComponent_UpdateActiveEffectCD final
{
public:
	class UTgfGameplayEffect*                     GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALyraCharacter*                         Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBattleSecurityComponent_UpdateActiveEffectCD) == 0x000008, "Wrong alignment on TgfBattleSecurityComponent_UpdateActiveEffectCD");
static_assert(sizeof(TgfBattleSecurityComponent_UpdateActiveEffectCD) == 0x000010, "Wrong size on TgfBattleSecurityComponent_UpdateActiveEffectCD");
static_assert(offsetof(TgfBattleSecurityComponent_UpdateActiveEffectCD, GameplayEffect) == 0x000000, "Member 'TgfBattleSecurityComponent_UpdateActiveEffectCD::GameplayEffect' has a wrong offset!");
static_assert(offsetof(TgfBattleSecurityComponent_UpdateActiveEffectCD, Target) == 0x000008, "Member 'TgfBattleSecurityComponent_UpdateActiveEffectCD::Target' has a wrong offset!");

// Function LyraGame.TgfBattleSecurityComponent.UpdateActiveSkillCD
// 0x0008 (0x0008 - 0x0000)
struct TgfBattleSecurityComponent_UpdateActiveSkillCD final
{
public:
	class ULyraGameplayAbility*                   GameplayAbility;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfBattleSecurityComponent_UpdateActiveSkillCD) == 0x000008, "Wrong alignment on TgfBattleSecurityComponent_UpdateActiveSkillCD");
static_assert(sizeof(TgfBattleSecurityComponent_UpdateActiveSkillCD) == 0x000008, "Wrong size on TgfBattleSecurityComponent_UpdateActiveSkillCD");
static_assert(offsetof(TgfBattleSecurityComponent_UpdateActiveSkillCD, GameplayAbility) == 0x000000, "Member 'TgfBattleSecurityComponent_UpdateActiveSkillCD::GameplayAbility' has a wrong offset!");

// Function LyraGame.LyraCosmeticCheats.AddCharacterPart
// 0x0018 (0x0018 - 0x0000)
struct LyraCosmeticCheats_AddCharacterPart final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuppressNaturalParts;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraCosmeticCheats_AddCharacterPart) == 0x000008, "Wrong alignment on LyraCosmeticCheats_AddCharacterPart");
static_assert(sizeof(LyraCosmeticCheats_AddCharacterPart) == 0x000018, "Wrong size on LyraCosmeticCheats_AddCharacterPart");
static_assert(offsetof(LyraCosmeticCheats_AddCharacterPart, AssetName) == 0x000000, "Member 'LyraCosmeticCheats_AddCharacterPart::AssetName' has a wrong offset!");
static_assert(offsetof(LyraCosmeticCheats_AddCharacterPart, bSuppressNaturalParts) == 0x000010, "Member 'LyraCosmeticCheats_AddCharacterPart::bSuppressNaturalParts' has a wrong offset!");

// Function LyraGame.LyraCosmeticCheats.AddCosmeticSplitPart
// 0x0010 (0x0010 - 0x0000)
struct LyraCosmeticCheats_AddCosmeticSplitPart final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCosmeticCheats_AddCosmeticSplitPart) == 0x000008, "Wrong alignment on LyraCosmeticCheats_AddCosmeticSplitPart");
static_assert(sizeof(LyraCosmeticCheats_AddCosmeticSplitPart) == 0x000010, "Wrong size on LyraCosmeticCheats_AddCosmeticSplitPart");
static_assert(offsetof(LyraCosmeticCheats_AddCosmeticSplitPart, AssetName) == 0x000000, "Member 'LyraCosmeticCheats_AddCosmeticSplitPart::AssetName' has a wrong offset!");

// Function LyraGame.LyraCosmeticCheats.RemoveCosmeticSplitPart
// 0x0010 (0x0010 - 0x0000)
struct LyraCosmeticCheats_RemoveCosmeticSplitPart final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCosmeticCheats_RemoveCosmeticSplitPart) == 0x000008, "Wrong alignment on LyraCosmeticCheats_RemoveCosmeticSplitPart");
static_assert(sizeof(LyraCosmeticCheats_RemoveCosmeticSplitPart) == 0x000010, "Wrong size on LyraCosmeticCheats_RemoveCosmeticSplitPart");
static_assert(offsetof(LyraCosmeticCheats_RemoveCosmeticSplitPart, AssetName) == 0x000000, "Member 'LyraCosmeticCheats_RemoveCosmeticSplitPart::AssetName' has a wrong offset!");

// Function LyraGame.LyraCosmeticCheats.ReplaceCharacterPart
// 0x0018 (0x0018 - 0x0000)
struct LyraCosmeticCheats_ReplaceCharacterPart final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuppressNaturalParts;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraCosmeticCheats_ReplaceCharacterPart) == 0x000008, "Wrong alignment on LyraCosmeticCheats_ReplaceCharacterPart");
static_assert(sizeof(LyraCosmeticCheats_ReplaceCharacterPart) == 0x000018, "Wrong size on LyraCosmeticCheats_ReplaceCharacterPart");
static_assert(offsetof(LyraCosmeticCheats_ReplaceCharacterPart, AssetName) == 0x000000, "Member 'LyraCosmeticCheats_ReplaceCharacterPart::AssetName' has a wrong offset!");
static_assert(offsetof(LyraCosmeticCheats_ReplaceCharacterPart, bSuppressNaturalParts) == 0x000010, "Member 'LyraCosmeticCheats_ReplaceCharacterPart::bSuppressNaturalParts' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.AddCharacterPart
// 0x0048 (0x0048 - 0x0000)
struct LyraPawnComponent_CharacterParts_AddCharacterPart final
{
public:
	struct FLyraCharacterPart                     NewPart;                                           // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLyraCharacterPartHandle               ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraPawnComponent_CharacterParts_AddCharacterPart) == 0x000008, "Wrong alignment on LyraPawnComponent_CharacterParts_AddCharacterPart");
static_assert(sizeof(LyraPawnComponent_CharacterParts_AddCharacterPart) == 0x000048, "Wrong size on LyraPawnComponent_CharacterParts_AddCharacterPart");
static_assert(offsetof(LyraPawnComponent_CharacterParts_AddCharacterPart, NewPart) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_AddCharacterPart::NewPart' has a wrong offset!");
static_assert(offsetof(LyraPawnComponent_CharacterParts_AddCharacterPart, ReturnValue) == 0x000040, "Member 'LyraPawnComponent_CharacterParts_AddCharacterPart::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.AddCharacterPartViaPart
// 0x0040 (0x0040 - 0x0000)
struct LyraPawnComponent_CharacterParts_AddCharacterPartViaPart final
{
public:
	struct FLyraCharacterPart                     NewPart;                                           // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnComponent_CharacterParts_AddCharacterPartViaPart) == 0x000008, "Wrong alignment on LyraPawnComponent_CharacterParts_AddCharacterPartViaPart");
static_assert(sizeof(LyraPawnComponent_CharacterParts_AddCharacterPartViaPart) == 0x000040, "Wrong size on LyraPawnComponent_CharacterParts_AddCharacterPartViaPart");
static_assert(offsetof(LyraPawnComponent_CharacterParts_AddCharacterPartViaPart, NewPart) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_AddCharacterPartViaPart::NewPart' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.ForceUseThirdPersonMesh
// 0x0008 (0x0008 - 0x0000)
struct LyraPawnComponent_CharacterParts_ForceUseThirdPersonMesh final
{
public:
	struct FLyraCharacterPartHandle               Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bThirdPerson;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraPawnComponent_CharacterParts_ForceUseThirdPersonMesh) == 0x000004, "Wrong alignment on LyraPawnComponent_CharacterParts_ForceUseThirdPersonMesh");
static_assert(sizeof(LyraPawnComponent_CharacterParts_ForceUseThirdPersonMesh) == 0x000008, "Wrong size on LyraPawnComponent_CharacterParts_ForceUseThirdPersonMesh");
static_assert(offsetof(LyraPawnComponent_CharacterParts_ForceUseThirdPersonMesh, Handle) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_ForceUseThirdPersonMesh::Handle' has a wrong offset!");
static_assert(offsetof(LyraPawnComponent_CharacterParts_ForceUseThirdPersonMesh, bThirdPerson) == 0x000004, "Member 'LyraPawnComponent_CharacterParts_ForceUseThirdPersonMesh::bThirdPerson' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.GetValidFirstCharacterPartActor
// 0x0008 (0x0008 - 0x0000)
struct LyraPawnComponent_CharacterParts_GetValidFirstCharacterPartActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnComponent_CharacterParts_GetValidFirstCharacterPartActor) == 0x000008, "Wrong alignment on LyraPawnComponent_CharacterParts_GetValidFirstCharacterPartActor");
static_assert(sizeof(LyraPawnComponent_CharacterParts_GetValidFirstCharacterPartActor) == 0x000008, "Wrong size on LyraPawnComponent_CharacterParts_GetValidFirstCharacterPartActor");
static_assert(offsetof(LyraPawnComponent_CharacterParts_GetValidFirstCharacterPartActor, ReturnValue) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_GetValidFirstCharacterPartActor::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.InitializeWithAbilitySystem
// 0x0008 (0x0008 - 0x0000)
struct LyraPawnComponent_CharacterParts_InitializeWithAbilitySystem final
{
public:
	class ULyraAbilitySystemComponent*            InASC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnComponent_CharacterParts_InitializeWithAbilitySystem) == 0x000008, "Wrong alignment on LyraPawnComponent_CharacterParts_InitializeWithAbilitySystem");
static_assert(sizeof(LyraPawnComponent_CharacterParts_InitializeWithAbilitySystem) == 0x000008, "Wrong size on LyraPawnComponent_CharacterParts_InitializeWithAbilitySystem");
static_assert(offsetof(LyraPawnComponent_CharacterParts_InitializeWithAbilitySystem, InASC) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_InitializeWithAbilitySystem::InASC' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.OnPawnForceUseThirdPersonMesh
// 0x0001 (0x0001 - 0x0000)
struct LyraPawnComponent_CharacterParts_OnPawnForceUseThirdPersonMesh final
{
public:
	bool                                          bThirdPerson;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnComponent_CharacterParts_OnPawnForceUseThirdPersonMesh) == 0x000001, "Wrong alignment on LyraPawnComponent_CharacterParts_OnPawnForceUseThirdPersonMesh");
static_assert(sizeof(LyraPawnComponent_CharacterParts_OnPawnForceUseThirdPersonMesh) == 0x000001, "Wrong size on LyraPawnComponent_CharacterParts_OnPawnForceUseThirdPersonMesh");
static_assert(offsetof(LyraPawnComponent_CharacterParts_OnPawnForceUseThirdPersonMesh, bThirdPerson) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_OnPawnForceUseThirdPersonMesh::bThirdPerson' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.RemoveCharacterPart
// 0x0004 (0x0004 - 0x0000)
struct LyraPawnComponent_CharacterParts_RemoveCharacterPart final
{
public:
	struct FLyraCharacterPartHandle               Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnComponent_CharacterParts_RemoveCharacterPart) == 0x000004, "Wrong alignment on LyraPawnComponent_CharacterParts_RemoveCharacterPart");
static_assert(sizeof(LyraPawnComponent_CharacterParts_RemoveCharacterPart) == 0x000004, "Wrong size on LyraPawnComponent_CharacterParts_RemoveCharacterPart");
static_assert(offsetof(LyraPawnComponent_CharacterParts_RemoveCharacterPart, Handle) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_RemoveCharacterPart::Handle' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.RemoveCharacterPartMesh
// 0x0002 (0x0002 - 0x0000)
struct LyraPawnComponent_CharacterParts_RemoveCharacterPartMesh final
{
public:
	ETgfCharaPart                                 PartTypeToRemove;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnComponent_CharacterParts_RemoveCharacterPartMesh) == 0x000001, "Wrong alignment on LyraPawnComponent_CharacterParts_RemoveCharacterPartMesh");
static_assert(sizeof(LyraPawnComponent_CharacterParts_RemoveCharacterPartMesh) == 0x000002, "Wrong size on LyraPawnComponent_CharacterParts_RemoveCharacterPartMesh");
static_assert(offsetof(LyraPawnComponent_CharacterParts_RemoveCharacterPartMesh, PartTypeToRemove) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_RemoveCharacterPartMesh::PartTypeToRemove' has a wrong offset!");
static_assert(offsetof(LyraPawnComponent_CharacterParts_RemoveCharacterPartMesh, ReturnValue) == 0x000001, "Member 'LyraPawnComponent_CharacterParts_RemoveCharacterPartMesh::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.RemoveCharacterPartMeshForActorSpawn
// 0x0002 (0x0002 - 0x0000)
struct LyraPawnComponent_CharacterParts_RemoveCharacterPartMeshForActorSpawn final
{
public:
	ETgfCharaPart                                 PartTypeToRemove;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnComponent_CharacterParts_RemoveCharacterPartMeshForActorSpawn) == 0x000001, "Wrong alignment on LyraPawnComponent_CharacterParts_RemoveCharacterPartMeshForActorSpawn");
static_assert(sizeof(LyraPawnComponent_CharacterParts_RemoveCharacterPartMeshForActorSpawn) == 0x000002, "Wrong size on LyraPawnComponent_CharacterParts_RemoveCharacterPartMeshForActorSpawn");
static_assert(offsetof(LyraPawnComponent_CharacterParts_RemoveCharacterPartMeshForActorSpawn, PartTypeToRemove) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_RemoveCharacterPartMeshForActorSpawn::PartTypeToRemove' has a wrong offset!");
static_assert(offsetof(LyraPawnComponent_CharacterParts_RemoveCharacterPartMeshForActorSpawn, ReturnValue) == 0x000001, "Member 'LyraPawnComponent_CharacterParts_RemoveCharacterPartMeshForActorSpawn::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.RemoveCharacterPartViaPart
// 0x0040 (0x0040 - 0x0000)
struct LyraPawnComponent_CharacterParts_RemoveCharacterPartViaPart final
{
public:
	struct FLyraCharacterPart                     NewPart;                                           // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnComponent_CharacterParts_RemoveCharacterPartViaPart) == 0x000008, "Wrong alignment on LyraPawnComponent_CharacterParts_RemoveCharacterPartViaPart");
static_assert(sizeof(LyraPawnComponent_CharacterParts_RemoveCharacterPartViaPart) == 0x000040, "Wrong size on LyraPawnComponent_CharacterParts_RemoveCharacterPartViaPart");
static_assert(offsetof(LyraPawnComponent_CharacterParts_RemoveCharacterPartViaPart, NewPart) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_RemoveCharacterPartViaPart::NewPart' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.ToggleCharacterPartMeshVisible
// 0x0008 (0x0008 - 0x0000)
struct LyraPawnComponent_CharacterParts_ToggleCharacterPartMeshVisible final
{
public:
	struct FLyraCharacterPartHandle               Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraPawnComponent_CharacterParts_ToggleCharacterPartMeshVisible) == 0x000004, "Wrong alignment on LyraPawnComponent_CharacterParts_ToggleCharacterPartMeshVisible");
static_assert(sizeof(LyraPawnComponent_CharacterParts_ToggleCharacterPartMeshVisible) == 0x000008, "Wrong size on LyraPawnComponent_CharacterParts_ToggleCharacterPartMeshVisible");
static_assert(offsetof(LyraPawnComponent_CharacterParts_ToggleCharacterPartMeshVisible, Handle) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_ToggleCharacterPartMeshVisible::Handle' has a wrong offset!");
static_assert(offsetof(LyraPawnComponent_CharacterParts_ToggleCharacterPartMeshVisible, Visible) == 0x000004, "Member 'LyraPawnComponent_CharacterParts_ToggleCharacterPartMeshVisible::Visible' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.UpdateCharacterAllPartMesh
// 0x0038 (0x0038 - 0x0000)
struct LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMesh final
{
public:
	struct FTgfCharaPartChangeConfig              NewPart;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMesh) == 0x000008, "Wrong alignment on LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMesh");
static_assert(sizeof(LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMesh) == 0x000038, "Wrong size on LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMesh");
static_assert(offsetof(LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMesh, NewPart) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMesh::NewPart' has a wrong offset!");
static_assert(offsetof(LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMesh, ReturnValue) == 0x000030, "Member 'LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMesh::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.UpdateCharacterAllPartMeshForActorSpawn
// 0x0020 (0x0020 - 0x0000)
struct LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMeshForActorSpawn final
{
public:
	struct FTgfCharaPartSpawnActor                SpawnActorInfo;                                    // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMeshForActorSpawn) == 0x000008, "Wrong alignment on LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMeshForActorSpawn");
static_assert(sizeof(LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMeshForActorSpawn) == 0x000020, "Wrong size on LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMeshForActorSpawn");
static_assert(offsetof(LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMeshForActorSpawn, SpawnActorInfo) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMeshForActorSpawn::SpawnActorInfo' has a wrong offset!");
static_assert(offsetof(LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMeshForActorSpawn, ReturnValue) == 0x000018, "Member 'LyraPawnComponent_CharacterParts_UpdateCharacterAllPartMeshForActorSpawn::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.UpdateCharacterPart
// 0x0040 (0x0040 - 0x0000)
struct LyraPawnComponent_CharacterParts_UpdateCharacterPart final
{
public:
	struct FLyraCharacterPartHandle               Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTgfCharaPartChangeConfig              NewPart;                                           // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraPawnComponent_CharacterParts_UpdateCharacterPart) == 0x000008, "Wrong alignment on LyraPawnComponent_CharacterParts_UpdateCharacterPart");
static_assert(sizeof(LyraPawnComponent_CharacterParts_UpdateCharacterPart) == 0x000040, "Wrong size on LyraPawnComponent_CharacterParts_UpdateCharacterPart");
static_assert(offsetof(LyraPawnComponent_CharacterParts_UpdateCharacterPart, Handle) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_UpdateCharacterPart::Handle' has a wrong offset!");
static_assert(offsetof(LyraPawnComponent_CharacterParts_UpdateCharacterPart, NewPart) == 0x000008, "Member 'LyraPawnComponent_CharacterParts_UpdateCharacterPart::NewPart' has a wrong offset!");
static_assert(offsetof(LyraPawnComponent_CharacterParts_UpdateCharacterPart, ReturnValue) == 0x000038, "Member 'LyraPawnComponent_CharacterParts_UpdateCharacterPart::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.GetCharacterPartActors
// 0x0010 (0x0010 - 0x0000)
struct LyraPawnComponent_CharacterParts_GetCharacterPartActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnComponent_CharacterParts_GetCharacterPartActors) == 0x000008, "Wrong alignment on LyraPawnComponent_CharacterParts_GetCharacterPartActors");
static_assert(sizeof(LyraPawnComponent_CharacterParts_GetCharacterPartActors) == 0x000010, "Wrong size on LyraPawnComponent_CharacterParts_GetCharacterPartActors");
static_assert(offsetof(LyraPawnComponent_CharacterParts_GetCharacterPartActors, ReturnValue) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_GetCharacterPartActors::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.GetCombinedTags
// 0x0028 (0x0028 - 0x0000)
struct LyraPawnComponent_CharacterParts_GetCombinedTags final
{
public:
	struct FGameplayTag                           RequiredPrefix;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnComponent_CharacterParts_GetCombinedTags) == 0x000008, "Wrong alignment on LyraPawnComponent_CharacterParts_GetCombinedTags");
static_assert(sizeof(LyraPawnComponent_CharacterParts_GetCombinedTags) == 0x000028, "Wrong size on LyraPawnComponent_CharacterParts_GetCombinedTags");
static_assert(offsetof(LyraPawnComponent_CharacterParts_GetCombinedTags, RequiredPrefix) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_GetCombinedTags::RequiredPrefix' has a wrong offset!");
static_assert(offsetof(LyraPawnComponent_CharacterParts_GetCombinedTags, ReturnValue) == 0x000008, "Member 'LyraPawnComponent_CharacterParts_GetCombinedTags::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPawnComponent_CharacterParts.GetCombinedTagsRealTime
// 0x0028 (0x0028 - 0x0000)
struct LyraPawnComponent_CharacterParts_GetCombinedTagsRealTime final
{
public:
	struct FGameplayTag                           RequiredPrefix;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPawnComponent_CharacterParts_GetCombinedTagsRealTime) == 0x000008, "Wrong alignment on LyraPawnComponent_CharacterParts_GetCombinedTagsRealTime");
static_assert(sizeof(LyraPawnComponent_CharacterParts_GetCombinedTagsRealTime) == 0x000028, "Wrong size on LyraPawnComponent_CharacterParts_GetCombinedTagsRealTime");
static_assert(offsetof(LyraPawnComponent_CharacterParts_GetCombinedTagsRealTime, RequiredPrefix) == 0x000000, "Member 'LyraPawnComponent_CharacterParts_GetCombinedTagsRealTime::RequiredPrefix' has a wrong offset!");
static_assert(offsetof(LyraPawnComponent_CharacterParts_GetCombinedTagsRealTime, ReturnValue) == 0x000008, "Member 'LyraPawnComponent_CharacterParts_GetCombinedTagsRealTime::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraBotCheats.AddAIPlayers
// 0x0004 (0x0004 - 0x0000)
struct LyraBotCheats_AddAIPlayers final
{
public:
	int32                                         AddCnt;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraBotCheats_AddAIPlayers) == 0x000004, "Wrong alignment on LyraBotCheats_AddAIPlayers");
static_assert(sizeof(LyraBotCheats_AddAIPlayers) == 0x000004, "Wrong size on LyraBotCheats_AddAIPlayers");
static_assert(offsetof(LyraBotCheats_AddAIPlayers, AddCnt) == 0x000000, "Member 'LyraBotCheats_AddAIPlayers::AddCnt' has a wrong offset!");

// Function LyraGame.LyraBotCheats.RemoveAIPlayers
// 0x0004 (0x0004 - 0x0000)
struct LyraBotCheats_RemoveAIPlayers final
{
public:
	int32                                         RemoveCnt;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraBotCheats_RemoveAIPlayers) == 0x000004, "Wrong alignment on LyraBotCheats_RemoveAIPlayers");
static_assert(sizeof(LyraBotCheats_RemoveAIPlayers) == 0x000004, "Wrong size on LyraBotCheats_RemoveAIPlayers");
static_assert(offsetof(LyraBotCheats_RemoveAIPlayers, RemoveCnt) == 0x000000, "Member 'LyraBotCheats_RemoveAIPlayers::RemoveCnt' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility_FromEquipment.GetAssociatedEquipment
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAbility_FromEquipment_GetAssociatedEquipment final
{
public:
	class ULyraEquipmentInstance*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_FromEquipment_GetAssociatedEquipment) == 0x000008, "Wrong alignment on TgfGameplayAbility_FromEquipment_GetAssociatedEquipment");
static_assert(sizeof(TgfGameplayAbility_FromEquipment_GetAssociatedEquipment) == 0x000008, "Wrong size on TgfGameplayAbility_FromEquipment_GetAssociatedEquipment");
static_assert(offsetof(TgfGameplayAbility_FromEquipment_GetAssociatedEquipment, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_FromEquipment_GetAssociatedEquipment::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility_FromEquipment.GetAssociatedItem
// 0x0008 (0x0008 - 0x0000)
struct TgfGameplayAbility_FromEquipment_GetAssociatedItem final
{
public:
	class ULyraInventoryItemInstance*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_FromEquipment_GetAssociatedItem) == 0x000008, "Wrong alignment on TgfGameplayAbility_FromEquipment_GetAssociatedItem");
static_assert(sizeof(TgfGameplayAbility_FromEquipment_GetAssociatedItem) == 0x000008, "Wrong size on TgfGameplayAbility_FromEquipment_GetAssociatedItem");
static_assert(offsetof(TgfGameplayAbility_FromEquipment_GetAssociatedItem, ReturnValue) == 0x000000, "Member 'TgfGameplayAbility_FromEquipment_GetAssociatedItem::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraContextEffectsSubsystem.GetContextFromSurfaceType
// 0x0010 (0x0010 - 0x0000)
struct LyraContextEffectsSubsystem_GetContextFromSurfaceType final
{
public:
	EPhysicalSurface                              PhysicalSurface;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Context;                                           // 0x0004(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraContextEffectsSubsystem_GetContextFromSurfaceType) == 0x000004, "Wrong alignment on LyraContextEffectsSubsystem_GetContextFromSurfaceType");
static_assert(sizeof(LyraContextEffectsSubsystem_GetContextFromSurfaceType) == 0x000010, "Wrong size on LyraContextEffectsSubsystem_GetContextFromSurfaceType");
static_assert(offsetof(LyraContextEffectsSubsystem_GetContextFromSurfaceType, PhysicalSurface) == 0x000000, "Member 'LyraContextEffectsSubsystem_GetContextFromSurfaceType::PhysicalSurface' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_GetContextFromSurfaceType, Context) == 0x000004, "Member 'LyraContextEffectsSubsystem_GetContextFromSurfaceType::Context' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_GetContextFromSurfaceType, ReturnValue) == 0x00000C, "Member 'LyraContextEffectsSubsystem_GetContextFromSurfaceType::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraContextEffectsSubsystem.LoadAndAddContextEffectsLibraries
// 0x0058 (0x0058 - 0x0000)
struct LyraContextEffectsSubsystem_LoadAndAddContextEffectsLibraries final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<TSoftObjectPtr<class ULyraContextEffectsLibrary>> ContextEffectsLibraries;                           // 0x0008(0x0050)(Parm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraContextEffectsSubsystem_LoadAndAddContextEffectsLibraries) == 0x000008, "Wrong alignment on LyraContextEffectsSubsystem_LoadAndAddContextEffectsLibraries");
static_assert(sizeof(LyraContextEffectsSubsystem_LoadAndAddContextEffectsLibraries) == 0x000058, "Wrong size on LyraContextEffectsSubsystem_LoadAndAddContextEffectsLibraries");
static_assert(offsetof(LyraContextEffectsSubsystem_LoadAndAddContextEffectsLibraries, OwningActor) == 0x000000, "Member 'LyraContextEffectsSubsystem_LoadAndAddContextEffectsLibraries::OwningActor' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_LoadAndAddContextEffectsLibraries, ContextEffectsLibraries) == 0x000008, "Member 'LyraContextEffectsSubsystem_LoadAndAddContextEffectsLibraries::ContextEffectsLibraries' has a wrong offset!");

// Function LyraGame.LyraContextEffectsSubsystem.SpawnContextEffects
// 0x00B0 (0x00B0 - 0x0000)
struct LyraContextEffectsSubsystem_SpawnContextEffects final
{
public:
	const class AActor*                           SpawningActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPoint;                                       // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Effect;                                            // 0x0048(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Contexts;                                          // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<class UAudioComponent*>                AudioOut;                                          // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UNiagaraComponent*>              NiagaraOut;                                        // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                VFXScale;                                          // 0x0090(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolume;                                       // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioPitch;                                        // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraContextEffectsSubsystem_SpawnContextEffects) == 0x000008, "Wrong alignment on LyraContextEffectsSubsystem_SpawnContextEffects");
static_assert(sizeof(LyraContextEffectsSubsystem_SpawnContextEffects) == 0x0000B0, "Wrong size on LyraContextEffectsSubsystem_SpawnContextEffects");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, SpawningActor) == 0x000000, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::SpawningActor' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, AttachToComponent) == 0x000008, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::AttachToComponent' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, AttachPoint) == 0x000010, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::AttachPoint' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, LocationOffset) == 0x000018, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::LocationOffset' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, RotationOffset) == 0x000030, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::RotationOffset' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, Effect) == 0x000048, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::Effect' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, Contexts) == 0x000050, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::Contexts' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, AudioOut) == 0x000070, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::AudioOut' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, NiagaraOut) == 0x000080, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::NiagaraOut' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, VFXScale) == 0x000090, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::VFXScale' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, AudioVolume) == 0x0000A8, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::AudioVolume' has a wrong offset!");
static_assert(offsetof(LyraContextEffectsSubsystem_SpawnContextEffects, AudioPitch) == 0x0000AC, "Member 'LyraContextEffectsSubsystem_SpawnContextEffects::AudioPitch' has a wrong offset!");

// Function LyraGame.LyraContextEffectsSubsystem.UnloadAndRemoveContextEffectsLibraries
// 0x0008 (0x0008 - 0x0000)
struct LyraContextEffectsSubsystem_UnloadAndRemoveContextEffectsLibraries final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraContextEffectsSubsystem_UnloadAndRemoveContextEffectsLibraries) == 0x000008, "Wrong alignment on LyraContextEffectsSubsystem_UnloadAndRemoveContextEffectsLibraries");
static_assert(sizeof(LyraContextEffectsSubsystem_UnloadAndRemoveContextEffectsLibraries) == 0x000008, "Wrong size on LyraContextEffectsSubsystem_UnloadAndRemoveContextEffectsLibraries");
static_assert(offsetof(LyraContextEffectsSubsystem_UnloadAndRemoveContextEffectsLibraries, OwningActor) == 0x000000, "Member 'LyraContextEffectsSubsystem_UnloadAndRemoveContextEffectsLibraries::OwningActor' has a wrong offset!");

// Function LyraGame.LyraBotCreationComponent.CheatAddBot
// 0x0004 (0x0004 - 0x0000)
struct LyraBotCreationComponent_CheatAddBot final
{
public:
	int32                                         AddBotCnt;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraBotCreationComponent_CheatAddBot) == 0x000004, "Wrong alignment on LyraBotCreationComponent_CheatAddBot");
static_assert(sizeof(LyraBotCreationComponent_CheatAddBot) == 0x000004, "Wrong size on LyraBotCreationComponent_CheatAddBot");
static_assert(offsetof(LyraBotCreationComponent_CheatAddBot, AddBotCnt) == 0x000000, "Member 'LyraBotCreationComponent_CheatAddBot::AddBotCnt' has a wrong offset!");

// Function LyraGame.LyraBotCreationComponent.CheatRemoveBot
// 0x0004 (0x0004 - 0x0000)
struct LyraBotCreationComponent_CheatRemoveBot final
{
public:
	int32                                         RemoveBotCnt;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraBotCreationComponent_CheatRemoveBot) == 0x000004, "Wrong alignment on LyraBotCreationComponent_CheatRemoveBot");
static_assert(sizeof(LyraBotCreationComponent_CheatRemoveBot) == 0x000004, "Wrong size on LyraBotCreationComponent_CheatRemoveBot");
static_assert(offsetof(LyraBotCreationComponent_CheatRemoveBot, RemoveBotCnt) == 0x000000, "Member 'LyraBotCreationComponent_CheatRemoveBot::RemoveBotCnt' has a wrong offset!");

// Function LyraGame.LyraGameState.AddOption
// 0x0004 (0x0004 - 0x0000)
struct LyraGameState_AddOption final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameState_AddOption) == 0x000004, "Wrong alignment on LyraGameState_AddOption");
static_assert(sizeof(LyraGameState_AddOption) == 0x000004, "Wrong size on LyraGameState_AddOption");
static_assert(offsetof(LyraGameState_AddOption, ID) == 0x000000, "Member 'LyraGameState_AddOption::ID' has a wrong offset!");

// Function LyraGame.LyraGameState.GetReplicatedWorldTimeSeconds
// 0x0004 (0x0004 - 0x0000)
struct LyraGameState_GetReplicatedWorldTimeSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameState_GetReplicatedWorldTimeSeconds) == 0x000004, "Wrong alignment on LyraGameState_GetReplicatedWorldTimeSeconds");
static_assert(sizeof(LyraGameState_GetReplicatedWorldTimeSeconds) == 0x000004, "Wrong size on LyraGameState_GetReplicatedWorldTimeSeconds");
static_assert(offsetof(LyraGameState_GetReplicatedWorldTimeSeconds, ReturnValue) == 0x000000, "Member 'LyraGameState_GetReplicatedWorldTimeSeconds::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameState.MulticastMessageToClients
// 0x0080 (0x0080 - 0x0000)
struct LyraGameState_MulticastMessageToClients final
{
public:
	struct FLyraVerbMessage                       Message;                                           // 0x0000(0x0080)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameState_MulticastMessageToClients) == 0x000008, "Wrong alignment on LyraGameState_MulticastMessageToClients");
static_assert(sizeof(LyraGameState_MulticastMessageToClients) == 0x000080, "Wrong size on LyraGameState_MulticastMessageToClients");
static_assert(offsetof(LyraGameState_MulticastMessageToClients, Message) == 0x000000, "Member 'LyraGameState_MulticastMessageToClients::Message' has a wrong offset!");

// Function LyraGame.LyraGameState.MulticastReliableMessageToClients
// 0x0080 (0x0080 - 0x0000)
struct LyraGameState_MulticastReliableMessageToClients final
{
public:
	struct FLyraVerbMessage                       Message;                                           // 0x0000(0x0080)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameState_MulticastReliableMessageToClients) == 0x000008, "Wrong alignment on LyraGameState_MulticastReliableMessageToClients");
static_assert(sizeof(LyraGameState_MulticastReliableMessageToClients) == 0x000080, "Wrong size on LyraGameState_MulticastReliableMessageToClients");
static_assert(offsetof(LyraGameState_MulticastReliableMessageToClients, Message) == 0x000000, "Member 'LyraGameState_MulticastReliableMessageToClients::Message' has a wrong offset!");

// Function LyraGame.LyraGameState.RemoveOption
// 0x0004 (0x0004 - 0x0000)
struct LyraGameState_RemoveOption final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameState_RemoveOption) == 0x000004, "Wrong alignment on LyraGameState_RemoveOption");
static_assert(sizeof(LyraGameState_RemoveOption) == 0x000004, "Wrong size on LyraGameState_RemoveOption");
static_assert(offsetof(LyraGameState_RemoveOption, ID) == 0x000000, "Member 'LyraGameState_RemoveOption::ID' has a wrong offset!");

// Function LyraGame.LyraGameState.SetMatchType
// 0x0001 (0x0001 - 0x0000)
struct LyraGameState_SetMatchType final
{
public:
	ETgfMatchType                                 NewMatchType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameState_SetMatchType) == 0x000001, "Wrong alignment on LyraGameState_SetMatchType");
static_assert(sizeof(LyraGameState_SetMatchType) == 0x000001, "Wrong size on LyraGameState_SetMatchType");
static_assert(offsetof(LyraGameState_SetMatchType, NewMatchType) == 0x000000, "Member 'LyraGameState_SetMatchType::NewMatchType' has a wrong offset!");

// Function LyraGame.LyraGameState.GetLyraAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraGameState_GetLyraAbilitySystemComponent final
{
public:
	class ULyraAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameState_GetLyraAbilitySystemComponent) == 0x000008, "Wrong alignment on LyraGameState_GetLyraAbilitySystemComponent");
static_assert(sizeof(LyraGameState_GetLyraAbilitySystemComponent) == 0x000008, "Wrong size on LyraGameState_GetLyraAbilitySystemComponent");
static_assert(offsetof(LyraGameState_GetLyraAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'LyraGameState_GetLyraAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameState.GetServerFPS
// 0x0004 (0x0004 - 0x0000)
struct LyraGameState_GetServerFPS final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameState_GetServerFPS) == 0x000004, "Wrong alignment on LyraGameState_GetServerFPS");
static_assert(sizeof(LyraGameState_GetServerFPS) == 0x000004, "Wrong size on LyraGameState_GetServerFPS");
static_assert(offsetof(LyraGameState_GetServerFPS, ReturnValue) == 0x000000, "Member 'LyraGameState_GetServerFPS::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameState.HasAllOptions
// 0x0018 (0x0018 - 0x0000)
struct LyraGameState_HasAllOptions final
{
public:
	TArray<int32>                                 IDs;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraGameState_HasAllOptions) == 0x000008, "Wrong alignment on LyraGameState_HasAllOptions");
static_assert(sizeof(LyraGameState_HasAllOptions) == 0x000018, "Wrong size on LyraGameState_HasAllOptions");
static_assert(offsetof(LyraGameState_HasAllOptions, IDs) == 0x000000, "Member 'LyraGameState_HasAllOptions::IDs' has a wrong offset!");
static_assert(offsetof(LyraGameState_HasAllOptions, ReturnValue) == 0x000010, "Member 'LyraGameState_HasAllOptions::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameState.HasAnyOption
// 0x0018 (0x0018 - 0x0000)
struct LyraGameState_HasAnyOption final
{
public:
	TArray<int32>                                 IDs;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraGameState_HasAnyOption) == 0x000008, "Wrong alignment on LyraGameState_HasAnyOption");
static_assert(sizeof(LyraGameState_HasAnyOption) == 0x000018, "Wrong size on LyraGameState_HasAnyOption");
static_assert(offsetof(LyraGameState_HasAnyOption, IDs) == 0x000000, "Member 'LyraGameState_HasAnyOption::IDs' has a wrong offset!");
static_assert(offsetof(LyraGameState_HasAnyOption, ReturnValue) == 0x000010, "Member 'LyraGameState_HasAnyOption::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameState.HasOption
// 0x0008 (0x0008 - 0x0000)
struct LyraGameState_HasOption final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraGameState_HasOption) == 0x000004, "Wrong alignment on LyraGameState_HasOption");
static_assert(sizeof(LyraGameState_HasOption) == 0x000008, "Wrong size on LyraGameState_HasOption");
static_assert(offsetof(LyraGameState_HasOption, ID) == 0x000000, "Member 'LyraGameState_HasOption::ID' has a wrong offset!");
static_assert(offsetof(LyraGameState_HasOption, ReturnValue) == 0x000004, "Member 'LyraGameState_HasOption::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameState.IsHomelandMatchType
// 0x0001 (0x0001 - 0x0000)
struct LyraGameState_IsHomelandMatchType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameState_IsHomelandMatchType) == 0x000001, "Wrong alignment on LyraGameState_IsHomelandMatchType");
static_assert(sizeof(LyraGameState_IsHomelandMatchType) == 0x000001, "Wrong size on LyraGameState_IsHomelandMatchType");
static_assert(offsetof(LyraGameState_IsHomelandMatchType, ReturnValue) == 0x000000, "Member 'LyraGameState_IsHomelandMatchType::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameState.IsPvpMatchType
// 0x0001 (0x0001 - 0x0000)
struct LyraGameState_IsPvpMatchType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameState_IsPvpMatchType) == 0x000001, "Wrong alignment on LyraGameState_IsPvpMatchType");
static_assert(sizeof(LyraGameState_IsPvpMatchType) == 0x000001, "Wrong size on LyraGameState_IsPvpMatchType");
static_assert(offsetof(LyraGameState_IsPvpMatchType, ReturnValue) == 0x000000, "Member 'LyraGameState_IsPvpMatchType::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraGameState.IsPVPSingleMatchType
// 0x0001 (0x0001 - 0x0000)
struct LyraGameState_IsPVPSingleMatchType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameState_IsPVPSingleMatchType) == 0x000001, "Wrong alignment on LyraGameState_IsPVPSingleMatchType");
static_assert(sizeof(LyraGameState_IsPVPSingleMatchType) == 0x000001, "Wrong size on LyraGameState_IsPVPSingleMatchType");
static_assert(offsetof(LyraGameState_IsPVPSingleMatchType, ReturnValue) == 0x000000, "Member 'LyraGameState_IsPVPSingleMatchType::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraRuntimeOptions.GetRuntimeOptions
// 0x0008 (0x0008 - 0x0000)
struct LyraRuntimeOptions_GetRuntimeOptions final
{
public:
	class ULyraRuntimeOptions*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraRuntimeOptions_GetRuntimeOptions) == 0x000008, "Wrong alignment on LyraRuntimeOptions_GetRuntimeOptions");
static_assert(sizeof(LyraRuntimeOptions_GetRuntimeOptions) == 0x000008, "Wrong size on LyraRuntimeOptions_GetRuntimeOptions");
static_assert(offsetof(LyraRuntimeOptions_GetRuntimeOptions, ReturnValue) == 0x000000, "Member 'LyraRuntimeOptions_GetRuntimeOptions::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInputConfig.FindAbilityInputActionForTag
// 0x0018 (0x0018 - 0x0000)
struct LyraInputConfig_FindAbilityInputActionForTag final
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLogNotFound;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UInputAction*                     ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInputConfig_FindAbilityInputActionForTag) == 0x000008, "Wrong alignment on LyraInputConfig_FindAbilityInputActionForTag");
static_assert(sizeof(LyraInputConfig_FindAbilityInputActionForTag) == 0x000018, "Wrong size on LyraInputConfig_FindAbilityInputActionForTag");
static_assert(offsetof(LyraInputConfig_FindAbilityInputActionForTag, InputTag) == 0x000000, "Member 'LyraInputConfig_FindAbilityInputActionForTag::InputTag' has a wrong offset!");
static_assert(offsetof(LyraInputConfig_FindAbilityInputActionForTag, bLogNotFound) == 0x000008, "Member 'LyraInputConfig_FindAbilityInputActionForTag::bLogNotFound' has a wrong offset!");
static_assert(offsetof(LyraInputConfig_FindAbilityInputActionForTag, ReturnValue) == 0x000010, "Member 'LyraInputConfig_FindAbilityInputActionForTag::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInputConfig.FindNativeInputActionForTag
// 0x0018 (0x0018 - 0x0000)
struct LyraInputConfig_FindNativeInputActionForTag final
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLogNotFound;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UInputAction*                     ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInputConfig_FindNativeInputActionForTag) == 0x000008, "Wrong alignment on LyraInputConfig_FindNativeInputActionForTag");
static_assert(sizeof(LyraInputConfig_FindNativeInputActionForTag) == 0x000018, "Wrong size on LyraInputConfig_FindNativeInputActionForTag");
static_assert(offsetof(LyraInputConfig_FindNativeInputActionForTag, InputTag) == 0x000000, "Member 'LyraInputConfig_FindNativeInputActionForTag::InputTag' has a wrong offset!");
static_assert(offsetof(LyraInputConfig_FindNativeInputActionForTag, bLogNotFound) == 0x000008, "Member 'LyraInputConfig_FindNativeInputActionForTag::bLogNotFound' has a wrong offset!");
static_assert(offsetof(LyraInputConfig_FindNativeInputActionForTag, ReturnValue) == 0x000010, "Member 'LyraInputConfig_FindNativeInputActionForTag::ReturnValue' has a wrong offset!");

// Function LyraGame.MappableConfigPairHelper.RegisterPair
// 0x0080 (0x0080 - 0x0000)
struct MappableConfigPairHelper_RegisterPair final
{
public:
	struct FMappableConfigPair                    Pair;                                              // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MappableConfigPairHelper_RegisterPair) == 0x000008, "Wrong alignment on MappableConfigPairHelper_RegisterPair");
static_assert(sizeof(MappableConfigPairHelper_RegisterPair) == 0x000080, "Wrong size on MappableConfigPairHelper_RegisterPair");
static_assert(offsetof(MappableConfigPairHelper_RegisterPair, Pair) == 0x000000, "Member 'MappableConfigPairHelper_RegisterPair::Pair' has a wrong offset!");

// Function LyraGame.MappableConfigPairHelper.UnregisterPair
// 0x0080 (0x0080 - 0x0000)
struct MappableConfigPairHelper_UnregisterPair final
{
public:
	struct FMappableConfigPair                    Pair;                                              // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MappableConfigPairHelper_UnregisterPair) == 0x000008, "Wrong alignment on MappableConfigPairHelper_UnregisterPair");
static_assert(sizeof(MappableConfigPairHelper_UnregisterPair) == 0x000080, "Wrong size on MappableConfigPairHelper_UnregisterPair");
static_assert(offsetof(MappableConfigPairHelper_UnregisterPair, Pair) == 0x000000, "Member 'MappableConfigPairHelper_UnregisterPair::Pair' has a wrong offset!");

// Function LyraGame.TgfGameplayAbility_Interact.UpdateInteractions
// 0x0010 (0x0010 - 0x0000)
struct TgfGameplayAbility_Interact_UpdateInteractions final
{
public:
	TArray<struct FInteractionOption>             InteractiveOptions;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfGameplayAbility_Interact_UpdateInteractions) == 0x000008, "Wrong alignment on TgfGameplayAbility_Interact_UpdateInteractions");
static_assert(sizeof(TgfGameplayAbility_Interact_UpdateInteractions) == 0x000010, "Wrong size on TgfGameplayAbility_Interact_UpdateInteractions");
static_assert(offsetof(TgfGameplayAbility_Interact_UpdateInteractions, InteractiveOptions) == 0x000000, "Member 'TgfGameplayAbility_Interact_UpdateInteractions::InteractiveOptions' has a wrong offset!");

// Function LyraGame.AbilityTask_GrantNearbyInteraction.GrantAbilitiesForNearbyInteractors
// 0x0018 (0x0018 - 0x0000)
struct AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionScanRange;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionScanRate;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_GrantNearbyInteraction*    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors) == 0x000008, "Wrong alignment on AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors");
static_assert(sizeof(AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors) == 0x000018, "Wrong size on AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors");
static_assert(offsetof(AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors, OwningAbility) == 0x000000, "Member 'AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors, InteractionScanRange) == 0x000008, "Member 'AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors::InteractionScanRange' has a wrong offset!");
static_assert(offsetof(AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors, InteractionScanRate) == 0x00000C, "Member 'AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors::InteractionScanRate' has a wrong offset!");
static_assert(offsetof(AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors, ReturnValue) == 0x000010, "Member 'AbilityTask_GrantNearbyInteraction_GrantAbilitiesForNearbyInteractors::ReturnValue' has a wrong offset!");

// Function LyraGame.Pickupable.GetPickupInventory
// 0x0010 (0x0010 - 0x0000)
struct Pickupable_GetPickupInventory final
{
public:
	struct FInventoryPickup                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pickupable_GetPickupInventory) == 0x000008, "Wrong alignment on Pickupable_GetPickupInventory");
static_assert(sizeof(Pickupable_GetPickupInventory) == 0x000010, "Wrong size on Pickupable_GetPickupInventory");
static_assert(offsetof(Pickupable_GetPickupInventory, ReturnValue) == 0x000000, "Member 'Pickupable_GetPickupInventory::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryFunctionLibrary.FindItemDefinitionFragment
// 0x0018 (0x0018 - 0x0000)
struct LyraInventoryFunctionLibrary_FindItemDefinitionFragment final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> ItemDef;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULyraInventoryItemFragment> FragmentClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ULyraInventoryItemFragment*       ReturnValue;                                       // 0x0010(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryFunctionLibrary_FindItemDefinitionFragment) == 0x000008, "Wrong alignment on LyraInventoryFunctionLibrary_FindItemDefinitionFragment");
static_assert(sizeof(LyraInventoryFunctionLibrary_FindItemDefinitionFragment) == 0x000018, "Wrong size on LyraInventoryFunctionLibrary_FindItemDefinitionFragment");
static_assert(offsetof(LyraInventoryFunctionLibrary_FindItemDefinitionFragment, ItemDef) == 0x000000, "Member 'LyraInventoryFunctionLibrary_FindItemDefinitionFragment::ItemDef' has a wrong offset!");
static_assert(offsetof(LyraInventoryFunctionLibrary_FindItemDefinitionFragment, FragmentClass) == 0x000008, "Member 'LyraInventoryFunctionLibrary_FindItemDefinitionFragment::FragmentClass' has a wrong offset!");
static_assert(offsetof(LyraInventoryFunctionLibrary_FindItemDefinitionFragment, ReturnValue) == 0x000010, "Member 'LyraInventoryFunctionLibrary_FindItemDefinitionFragment::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraInventoryFunctionLibrary.IsTwoHandWeapon
// 0x0002 (0x0002 - 0x0000)
struct LyraInventoryFunctionLibrary_IsTwoHandWeapon final
{
public:
	ETgfEquipSubType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraInventoryFunctionLibrary_IsTwoHandWeapon) == 0x000001, "Wrong alignment on LyraInventoryFunctionLibrary_IsTwoHandWeapon");
static_assert(sizeof(LyraInventoryFunctionLibrary_IsTwoHandWeapon) == 0x000002, "Wrong size on LyraInventoryFunctionLibrary_IsTwoHandWeapon");
static_assert(offsetof(LyraInventoryFunctionLibrary_IsTwoHandWeapon, Type) == 0x000000, "Member 'LyraInventoryFunctionLibrary_IsTwoHandWeapon::Type' has a wrong offset!");
static_assert(offsetof(LyraInventoryFunctionLibrary_IsTwoHandWeapon, ReturnValue) == 0x000001, "Member 'LyraInventoryFunctionLibrary_IsTwoHandWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.AddAdditionalAmmoRecover
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_AddAdditionalAmmoRecover final
{
public:
	int32                                         DeltaRecover;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_AddAdditionalAmmoRecover) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_AddAdditionalAmmoRecover");
static_assert(sizeof(TgfInventoryItemInstance_AddAdditionalAmmoRecover) == 0x000004, "Wrong size on TgfInventoryItemInstance_AddAdditionalAmmoRecover");
static_assert(offsetof(TgfInventoryItemInstance_AddAdditionalAmmoRecover, DeltaRecover) == 0x000000, "Member 'TgfInventoryItemInstance_AddAdditionalAmmoRecover::DeltaRecover' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.AddDeltaAmmo
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_AddDeltaAmmo final
{
public:
	int32                                         DeltaAmmo;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_AddDeltaAmmo) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_AddDeltaAmmo");
static_assert(sizeof(TgfInventoryItemInstance_AddDeltaAmmo) == 0x000004, "Wrong size on TgfInventoryItemInstance_AddDeltaAmmo");
static_assert(offsetof(TgfInventoryItemInstance_AddDeltaAmmo, DeltaAmmo) == 0x000000, "Member 'TgfInventoryItemInstance_AddDeltaAmmo::DeltaAmmo' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetAffixDisplayConfig
// 0x0050 (0x0050 - 0x0000)
struct TgfInventoryItemInstance_GetAffixDisplayConfig final
{
public:
	TArray<struct FAffixDisplayConfig>            Out;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            MainBasic;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            TopAffix;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            Gem;                                               // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAffixDisplayConfig>            GearSet;                                           // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetAffixDisplayConfig) == 0x000008, "Wrong alignment on TgfInventoryItemInstance_GetAffixDisplayConfig");
static_assert(sizeof(TgfInventoryItemInstance_GetAffixDisplayConfig) == 0x000050, "Wrong size on TgfInventoryItemInstance_GetAffixDisplayConfig");
static_assert(offsetof(TgfInventoryItemInstance_GetAffixDisplayConfig, Out) == 0x000000, "Member 'TgfInventoryItemInstance_GetAffixDisplayConfig::Out' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemInstance_GetAffixDisplayConfig, MainBasic) == 0x000010, "Member 'TgfInventoryItemInstance_GetAffixDisplayConfig::MainBasic' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemInstance_GetAffixDisplayConfig, TopAffix) == 0x000020, "Member 'TgfInventoryItemInstance_GetAffixDisplayConfig::TopAffix' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemInstance_GetAffixDisplayConfig, Gem) == 0x000030, "Member 'TgfInventoryItemInstance_GetAffixDisplayConfig::Gem' has a wrong offset!");
static_assert(offsetof(TgfInventoryItemInstance_GetAffixDisplayConfig, GearSet) == 0x000040, "Member 'TgfInventoryItemInstance_GetAffixDisplayConfig::GearSet' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetCorruptionId
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_GetCorruptionId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetCorruptionId) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_GetCorruptionId");
static_assert(sizeof(TgfInventoryItemInstance_GetCorruptionId) == 0x000004, "Wrong size on TgfInventoryItemInstance_GetCorruptionId");
static_assert(offsetof(TgfInventoryItemInstance_GetCorruptionId, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetCorruptionId::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetGearLevel
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_GetGearLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetGearLevel) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_GetGearLevel");
static_assert(sizeof(TgfInventoryItemInstance_GetGearLevel) == 0x000004, "Wrong size on TgfInventoryItemInstance_GetGearLevel");
static_assert(offsetof(TgfInventoryItemInstance_GetGearLevel, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetGearLevel::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetHeirloomOwner
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemInstance_GetHeirloomOwner final
{
public:
	struct FTgfPlayerIDKey                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetHeirloomOwner) == 0x000008, "Wrong alignment on TgfInventoryItemInstance_GetHeirloomOwner");
static_assert(sizeof(TgfInventoryItemInstance_GetHeirloomOwner) == 0x000010, "Wrong size on TgfInventoryItemInstance_GetHeirloomOwner");
static_assert(offsetof(TgfInventoryItemInstance_GetHeirloomOwner, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetHeirloomOwner::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetOwnership
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemInstance_GetOwnership final
{
public:
	TArray<struct FTgfPlayerIDKey>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetOwnership) == 0x000008, "Wrong alignment on TgfInventoryItemInstance_GetOwnership");
static_assert(sizeof(TgfInventoryItemInstance_GetOwnership) == 0x000010, "Wrong size on TgfInventoryItemInstance_GetOwnership");
static_assert(offsetof(TgfInventoryItemInstance_GetOwnership, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetOwnership::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetTypeId
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_GetTypeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetTypeId) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_GetTypeId");
static_assert(sizeof(TgfInventoryItemInstance_GetTypeId) == 0x000004, "Wrong size on TgfInventoryItemInstance_GetTypeId");
static_assert(offsetof(TgfInventoryItemInstance_GetTypeId, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetTypeId::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.IsAffixDisplayConfigAttached
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemInstance_IsAffixDisplayConfigAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_IsAffixDisplayConfigAttached) == 0x000001, "Wrong alignment on TgfInventoryItemInstance_IsAffixDisplayConfigAttached");
static_assert(sizeof(TgfInventoryItemInstance_IsAffixDisplayConfigAttached) == 0x000001, "Wrong size on TgfInventoryItemInstance_IsAffixDisplayConfigAttached");
static_assert(offsetof(TgfInventoryItemInstance_IsAffixDisplayConfigAttached, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_IsAffixDisplayConfigAttached::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.SetEquiped
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemInstance_SetEquiped final
{
public:
	bool                                          bEquipped;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_SetEquiped) == 0x000001, "Wrong alignment on TgfInventoryItemInstance_SetEquiped");
static_assert(sizeof(TgfInventoryItemInstance_SetEquiped) == 0x000001, "Wrong size on TgfInventoryItemInstance_SetEquiped");
static_assert(offsetof(TgfInventoryItemInstance_SetEquiped, bEquipped) == 0x000000, "Member 'TgfInventoryItemInstance_SetEquiped::bEquipped' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.SetHeld
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemInstance_SetHeld final
{
public:
	bool                                          bHeld;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_SetHeld) == 0x000001, "Wrong alignment on TgfInventoryItemInstance_SetHeld");
static_assert(sizeof(TgfInventoryItemInstance_SetHeld) == 0x000001, "Wrong size on TgfInventoryItemInstance_SetHeld");
static_assert(offsetof(TgfInventoryItemInstance_SetHeld, bHeld) == 0x000000, "Member 'TgfInventoryItemInstance_SetHeld::bHeld' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_GetAmmoCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetAmmoCount) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_GetAmmoCount");
static_assert(sizeof(TgfInventoryItemInstance_GetAmmoCount) == 0x000004, "Wrong size on TgfInventoryItemInstance_GetAmmoCount");
static_assert(offsetof(TgfInventoryItemInstance_GetAmmoCount, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetAmmoCount::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetAutoAmmoRecover
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_GetAutoAmmoRecover final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetAutoAmmoRecover) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_GetAutoAmmoRecover");
static_assert(sizeof(TgfInventoryItemInstance_GetAutoAmmoRecover) == 0x000004, "Wrong size on TgfInventoryItemInstance_GetAutoAmmoRecover");
static_assert(offsetof(TgfInventoryItemInstance_GetAutoAmmoRecover, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetAutoAmmoRecover::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetBattleElement
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemInstance_GetBattleElement final
{
public:
	ETgfBattleElement                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetBattleElement) == 0x000001, "Wrong alignment on TgfInventoryItemInstance_GetBattleElement");
static_assert(sizeof(TgfInventoryItemInstance_GetBattleElement) == 0x000001, "Wrong size on TgfInventoryItemInstance_GetBattleElement");
static_assert(offsetof(TgfInventoryItemInstance_GetBattleElement, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetBattleElement::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetDurabilityPoint
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_GetDurabilityPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetDurabilityPoint) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_GetDurabilityPoint");
static_assert(sizeof(TgfInventoryItemInstance_GetDurabilityPoint) == 0x000004, "Wrong size on TgfInventoryItemInstance_GetDurabilityPoint");
static_assert(offsetof(TgfInventoryItemInstance_GetDurabilityPoint, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetDurabilityPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetEquipAttrItems
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemInstance_GetEquipAttrItems final
{
public:
	TArray<struct FTgfEquipAttrItem>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetEquipAttrItems) == 0x000008, "Wrong alignment on TgfInventoryItemInstance_GetEquipAttrItems");
static_assert(sizeof(TgfInventoryItemInstance_GetEquipAttrItems) == 0x000010, "Wrong size on TgfInventoryItemInstance_GetEquipAttrItems");
static_assert(offsetof(TgfInventoryItemInstance_GetEquipAttrItems, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetEquipAttrItems::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetGemConfig
// 0x0018 (0x0018 - 0x0000)
struct TgfInventoryItemInstance_GetGemConfig final
{
public:
	struct FItemGemConfig                         ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetGemConfig) == 0x000008, "Wrong alignment on TgfInventoryItemInstance_GetGemConfig");
static_assert(sizeof(TgfInventoryItemInstance_GetGemConfig) == 0x000018, "Wrong size on TgfInventoryItemInstance_GetGemConfig");
static_assert(offsetof(TgfInventoryItemInstance_GetGemConfig, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetGemConfig::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetHoldAttrItems
// 0x0010 (0x0010 - 0x0000)
struct TgfInventoryItemInstance_GetHoldAttrItems final
{
public:
	TArray<struct FTgfEquipAttrItem>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetHoldAttrItems) == 0x000008, "Wrong alignment on TgfInventoryItemInstance_GetHoldAttrItems");
static_assert(sizeof(TgfInventoryItemInstance_GetHoldAttrItems) == 0x000010, "Wrong size on TgfInventoryItemInstance_GetHoldAttrItems");
static_assert(offsetof(TgfInventoryItemInstance_GetHoldAttrItems, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetHoldAttrItems::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetLoosePoint
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_GetLoosePoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetLoosePoint) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_GetLoosePoint");
static_assert(sizeof(TgfInventoryItemInstance_GetLoosePoint) == 0x000004, "Wrong size on TgfInventoryItemInstance_GetLoosePoint");
static_assert(offsetof(TgfInventoryItemInstance_GetLoosePoint, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetLoosePoint::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetMaxDurabilityPoint
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_GetMaxDurabilityPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetMaxDurabilityPoint) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_GetMaxDurabilityPoint");
static_assert(sizeof(TgfInventoryItemInstance_GetMaxDurabilityPoint) == 0x000004, "Wrong size on TgfInventoryItemInstance_GetMaxDurabilityPoint");
static_assert(offsetof(TgfInventoryItemInstance_GetMaxDurabilityPoint, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetMaxDurabilityPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetRestrictLevel
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_GetRestrictLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetRestrictLevel) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_GetRestrictLevel");
static_assert(sizeof(TgfInventoryItemInstance_GetRestrictLevel) == 0x000004, "Wrong size on TgfInventoryItemInstance_GetRestrictLevel");
static_assert(offsetof(TgfInventoryItemInstance_GetRestrictLevel, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetRestrictLevel::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetRoleGuid
// 0x0008 (0x0008 - 0x0000)
struct TgfInventoryItemInstance_GetRoleGuid final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetRoleGuid) == 0x000008, "Wrong alignment on TgfInventoryItemInstance_GetRoleGuid");
static_assert(sizeof(TgfInventoryItemInstance_GetRoleGuid) == 0x000008, "Wrong size on TgfInventoryItemInstance_GetRoleGuid");
static_assert(offsetof(TgfInventoryItemInstance_GetRoleGuid, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetRoleGuid::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.GetTeamId
// 0x0004 (0x0004 - 0x0000)
struct TgfInventoryItemInstance_GetTeamId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_GetTeamId) == 0x000004, "Wrong alignment on TgfInventoryItemInstance_GetTeamId");
static_assert(sizeof(TgfInventoryItemInstance_GetTeamId) == 0x000004, "Wrong size on TgfInventoryItemInstance_GetTeamId");
static_assert(offsetof(TgfInventoryItemInstance_GetTeamId, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_GetTeamId::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.HasDurabilityPoint
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemInstance_HasDurabilityPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_HasDurabilityPoint) == 0x000001, "Wrong alignment on TgfInventoryItemInstance_HasDurabilityPoint");
static_assert(sizeof(TgfInventoryItemInstance_HasDurabilityPoint) == 0x000001, "Wrong size on TgfInventoryItemInstance_HasDurabilityPoint");
static_assert(offsetof(TgfInventoryItemInstance_HasDurabilityPoint, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_HasDurabilityPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemInstance_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_IsEquipped) == 0x000001, "Wrong alignment on TgfInventoryItemInstance_IsEquipped");
static_assert(sizeof(TgfInventoryItemInstance_IsEquipped) == 0x000001, "Wrong size on TgfInventoryItemInstance_IsEquipped");
static_assert(offsetof(TgfInventoryItemInstance_IsEquipped, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_IsEquipped::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.IsHeld
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemInstance_IsHeld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_IsHeld) == 0x000001, "Wrong alignment on TgfInventoryItemInstance_IsHeld");
static_assert(sizeof(TgfInventoryItemInstance_IsHeld) == 0x000001, "Wrong size on TgfInventoryItemInstance_IsHeld");
static_assert(offsetof(TgfInventoryItemInstance_IsHeld, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_IsHeld::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfInventoryItemInstance.IsLockedItem
// 0x0001 (0x0001 - 0x0000)
struct TgfInventoryItemInstance_IsLockedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfInventoryItemInstance_IsLockedItem) == 0x000001, "Wrong alignment on TgfInventoryItemInstance_IsLockedItem");
static_assert(sizeof(TgfInventoryItemInstance_IsLockedItem) == 0x000001, "Wrong size on TgfInventoryItemInstance_IsLockedItem");
static_assert(offsetof(TgfInventoryItemInstance_IsLockedItem, ReturnValue) == 0x000000, "Member 'TgfInventoryItemInstance_IsLockedItem::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraVerbMessageHelpers.CueParametersToVerbMessage
// 0x0160 (0x0160 - 0x0000)
struct LyraVerbMessageHelpers_CueParametersToVerbMessage final
{
public:
	struct FGameplayCueParameters                 Params_0;                                          // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLyraVerbMessage                       ReturnValue;                                       // 0x00E0(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraVerbMessageHelpers_CueParametersToVerbMessage) == 0x000008, "Wrong alignment on LyraVerbMessageHelpers_CueParametersToVerbMessage");
static_assert(sizeof(LyraVerbMessageHelpers_CueParametersToVerbMessage) == 0x000160, "Wrong size on LyraVerbMessageHelpers_CueParametersToVerbMessage");
static_assert(offsetof(LyraVerbMessageHelpers_CueParametersToVerbMessage, Params_0) == 0x000000, "Member 'LyraVerbMessageHelpers_CueParametersToVerbMessage::Params_0' has a wrong offset!");
static_assert(offsetof(LyraVerbMessageHelpers_CueParametersToVerbMessage, ReturnValue) == 0x0000E0, "Member 'LyraVerbMessageHelpers_CueParametersToVerbMessage::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraVerbMessageHelpers.GetPawnFromObject
// 0x0010 (0x0010 - 0x0000)
struct LyraVerbMessageHelpers_GetPawnFromObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraVerbMessageHelpers_GetPawnFromObject) == 0x000008, "Wrong alignment on LyraVerbMessageHelpers_GetPawnFromObject");
static_assert(sizeof(LyraVerbMessageHelpers_GetPawnFromObject) == 0x000010, "Wrong size on LyraVerbMessageHelpers_GetPawnFromObject");
static_assert(offsetof(LyraVerbMessageHelpers_GetPawnFromObject, Object) == 0x000000, "Member 'LyraVerbMessageHelpers_GetPawnFromObject::Object' has a wrong offset!");
static_assert(offsetof(LyraVerbMessageHelpers_GetPawnFromObject, ReturnValue) == 0x000008, "Member 'LyraVerbMessageHelpers_GetPawnFromObject::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraVerbMessageHelpers.GetPlayerControllerFromObject
// 0x0010 (0x0010 - 0x0000)
struct LyraVerbMessageHelpers_GetPlayerControllerFromObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraVerbMessageHelpers_GetPlayerControllerFromObject) == 0x000008, "Wrong alignment on LyraVerbMessageHelpers_GetPlayerControllerFromObject");
static_assert(sizeof(LyraVerbMessageHelpers_GetPlayerControllerFromObject) == 0x000010, "Wrong size on LyraVerbMessageHelpers_GetPlayerControllerFromObject");
static_assert(offsetof(LyraVerbMessageHelpers_GetPlayerControllerFromObject, Object) == 0x000000, "Member 'LyraVerbMessageHelpers_GetPlayerControllerFromObject::Object' has a wrong offset!");
static_assert(offsetof(LyraVerbMessageHelpers_GetPlayerControllerFromObject, ReturnValue) == 0x000008, "Member 'LyraVerbMessageHelpers_GetPlayerControllerFromObject::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraVerbMessageHelpers.GetPlayerStateFromObject
// 0x0010 (0x0010 - 0x0000)
struct LyraVerbMessageHelpers_GetPlayerStateFromObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraVerbMessageHelpers_GetPlayerStateFromObject) == 0x000008, "Wrong alignment on LyraVerbMessageHelpers_GetPlayerStateFromObject");
static_assert(sizeof(LyraVerbMessageHelpers_GetPlayerStateFromObject) == 0x000010, "Wrong size on LyraVerbMessageHelpers_GetPlayerStateFromObject");
static_assert(offsetof(LyraVerbMessageHelpers_GetPlayerStateFromObject, Object) == 0x000000, "Member 'LyraVerbMessageHelpers_GetPlayerStateFromObject::Object' has a wrong offset!");
static_assert(offsetof(LyraVerbMessageHelpers_GetPlayerStateFromObject, ReturnValue) == 0x000008, "Member 'LyraVerbMessageHelpers_GetPlayerStateFromObject::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraVerbMessageHelpers.VerbMessageToCueParameters
// 0x0160 (0x0160 - 0x0000)
struct LyraVerbMessageHelpers_VerbMessageToCueParameters final
{
public:
	struct FLyraVerbMessage                       Message;                                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 ReturnValue;                                       // 0x0080(0x00E0)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraVerbMessageHelpers_VerbMessageToCueParameters) == 0x000008, "Wrong alignment on LyraVerbMessageHelpers_VerbMessageToCueParameters");
static_assert(sizeof(LyraVerbMessageHelpers_VerbMessageToCueParameters) == 0x000160, "Wrong size on LyraVerbMessageHelpers_VerbMessageToCueParameters");
static_assert(offsetof(LyraVerbMessageHelpers_VerbMessageToCueParameters, Message) == 0x000000, "Member 'LyraVerbMessageHelpers_VerbMessageToCueParameters::Message' has a wrong offset!");
static_assert(offsetof(LyraVerbMessageHelpers_VerbMessageToCueParameters, ReturnValue) == 0x000080, "Member 'LyraVerbMessageHelpers_VerbMessageToCueParameters::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPerformanceStatSubsystem.GetCachedStat
// 0x0010 (0x0010 - 0x0000)
struct LyraPerformanceStatSubsystem_GetCachedStat final
{
public:
	ELyraDisplayablePerformanceStat               Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPerformanceStatSubsystem_GetCachedStat) == 0x000008, "Wrong alignment on LyraPerformanceStatSubsystem_GetCachedStat");
static_assert(sizeof(LyraPerformanceStatSubsystem_GetCachedStat) == 0x000010, "Wrong size on LyraPerformanceStatSubsystem_GetCachedStat");
static_assert(offsetof(LyraPerformanceStatSubsystem_GetCachedStat, Stat) == 0x000000, "Member 'LyraPerformanceStatSubsystem_GetCachedStat::Stat' has a wrong offset!");
static_assert(offsetof(LyraPerformanceStatSubsystem_GetCachedStat, ReturnValue) == 0x000008, "Member 'LyraPerformanceStatSubsystem_GetCachedStat::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraCheatManager.AddTagToSelf
// 0x0010 (0x0010 - 0x0000)
struct LyraCheatManager_AddTagToSelf final
{
public:
	class FString                                 TagName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCheatManager_AddTagToSelf) == 0x000008, "Wrong alignment on LyraCheatManager_AddTagToSelf");
static_assert(sizeof(LyraCheatManager_AddTagToSelf) == 0x000010, "Wrong size on LyraCheatManager_AddTagToSelf");
static_assert(offsetof(LyraCheatManager_AddTagToSelf, TagName) == 0x000000, "Member 'LyraCheatManager_AddTagToSelf::TagName' has a wrong offset!");

// Function LyraGame.LyraCheatManager.Cheat
// 0x0010 (0x0010 - 0x0000)
struct LyraCheatManager_Cheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCheatManager_Cheat) == 0x000008, "Wrong alignment on LyraCheatManager_Cheat");
static_assert(sizeof(LyraCheatManager_Cheat) == 0x000010, "Wrong size on LyraCheatManager_Cheat");
static_assert(offsetof(LyraCheatManager_Cheat, Msg) == 0x000000, "Member 'LyraCheatManager_Cheat::Msg' has a wrong offset!");

// Function LyraGame.LyraCheatManager.CheatAll
// 0x0010 (0x0010 - 0x0000)
struct LyraCheatManager_CheatAll final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCheatManager_CheatAll) == 0x000008, "Wrong alignment on LyraCheatManager_CheatAll");
static_assert(sizeof(LyraCheatManager_CheatAll) == 0x000010, "Wrong size on LyraCheatManager_CheatAll");
static_assert(offsetof(LyraCheatManager_CheatAll, Msg) == 0x000000, "Member 'LyraCheatManager_CheatAll::Msg' has a wrong offset!");

// Function LyraGame.LyraCheatManager.DamageSelf
// 0x0004 (0x0004 - 0x0000)
struct LyraCheatManager_DamageSelf final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCheatManager_DamageSelf) == 0x000004, "Wrong alignment on LyraCheatManager_DamageSelf");
static_assert(sizeof(LyraCheatManager_DamageSelf) == 0x000004, "Wrong size on LyraCheatManager_DamageSelf");
static_assert(offsetof(LyraCheatManager_DamageSelf, DamageAmount) == 0x000000, "Member 'LyraCheatManager_DamageSelf::DamageAmount' has a wrong offset!");

// Function LyraGame.LyraCheatManager.HealSelf
// 0x0004 (0x0004 - 0x0000)
struct LyraCheatManager_HealSelf final
{
public:
	float                                         HealAmount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCheatManager_HealSelf) == 0x000004, "Wrong alignment on LyraCheatManager_HealSelf");
static_assert(sizeof(LyraCheatManager_HealSelf) == 0x000004, "Wrong size on LyraCheatManager_HealSelf");
static_assert(offsetof(LyraCheatManager_HealSelf, HealAmount) == 0x000000, "Member 'LyraCheatManager_HealSelf::HealAmount' has a wrong offset!");

// Function LyraGame.LyraCheatManager.HealTarget
// 0x0004 (0x0004 - 0x0000)
struct LyraCheatManager_HealTarget final
{
public:
	float                                         HealAmount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCheatManager_HealTarget) == 0x000004, "Wrong alignment on LyraCheatManager_HealTarget");
static_assert(sizeof(LyraCheatManager_HealTarget) == 0x000004, "Wrong size on LyraCheatManager_HealTarget");
static_assert(offsetof(LyraCheatManager_HealTarget, HealAmount) == 0x000000, "Member 'LyraCheatManager_HealTarget::HealAmount' has a wrong offset!");

// Function LyraGame.LyraCheatManager.RemoveTagFromSelf
// 0x0010 (0x0010 - 0x0000)
struct LyraCheatManager_RemoveTagFromSelf final
{
public:
	class FString                                 TagName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCheatManager_RemoveTagFromSelf) == 0x000008, "Wrong alignment on LyraCheatManager_RemoveTagFromSelf");
static_assert(sizeof(LyraCheatManager_RemoveTagFromSelf) == 0x000010, "Wrong size on LyraCheatManager_RemoveTagFromSelf");
static_assert(offsetof(LyraCheatManager_RemoveTagFromSelf, TagName) == 0x000000, "Member 'LyraCheatManager_RemoveTagFromSelf::TagName' has a wrong offset!");

// Function LyraGame.LyraCheatManager.SetInteractionOutlineWeight
// 0x0004 (0x0004 - 0x0000)
struct LyraCheatManager_SetInteractionOutlineWeight final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCheatManager_SetInteractionOutlineWeight) == 0x000004, "Wrong alignment on LyraCheatManager_SetInteractionOutlineWeight");
static_assert(sizeof(LyraCheatManager_SetInteractionOutlineWeight) == 0x000004, "Wrong size on LyraCheatManager_SetInteractionOutlineWeight");
static_assert(offsetof(LyraCheatManager_SetInteractionOutlineWeight, Weight) == 0x000000, "Member 'LyraCheatManager_SetInteractionOutlineWeight::Weight' has a wrong offset!");

// Function LyraGame.LyraCheatManager.UnlimitedHealth
// 0x0004 (0x0004 - 0x0000)
struct LyraCheatManager_UnlimitedHealth final
{
public:
	int32                                         Enabled;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraCheatManager_UnlimitedHealth) == 0x000004, "Wrong alignment on LyraCheatManager_UnlimitedHealth");
static_assert(sizeof(LyraCheatManager_UnlimitedHealth) == 0x000004, "Wrong size on LyraCheatManager_UnlimitedHealth");
static_assert(offsetof(LyraCheatManager_UnlimitedHealth, Enabled) == 0x000000, "Member 'LyraCheatManager_UnlimitedHealth::Enabled' has a wrong offset!");

// Function LyraGame.LyraPlayerBotController.OnPlayerStateChangedTeam
// 0x0010 (0x0010 - 0x0000)
struct LyraPlayerBotController_OnPlayerStateChangedTeam final
{
public:
	class UObject*                                TeamAgent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldTeam;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeam;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerBotController_OnPlayerStateChangedTeam) == 0x000008, "Wrong alignment on LyraPlayerBotController_OnPlayerStateChangedTeam");
static_assert(sizeof(LyraPlayerBotController_OnPlayerStateChangedTeam) == 0x000010, "Wrong size on LyraPlayerBotController_OnPlayerStateChangedTeam");
static_assert(offsetof(LyraPlayerBotController_OnPlayerStateChangedTeam, TeamAgent) == 0x000000, "Member 'LyraPlayerBotController_OnPlayerStateChangedTeam::TeamAgent' has a wrong offset!");
static_assert(offsetof(LyraPlayerBotController_OnPlayerStateChangedTeam, OldTeam) == 0x000008, "Member 'LyraPlayerBotController_OnPlayerStateChangedTeam::OldTeam' has a wrong offset!");
static_assert(offsetof(LyraPlayerBotController_OnPlayerStateChangedTeam, NewTeam) == 0x00000C, "Member 'LyraPlayerBotController_OnPlayerStateChangedTeam::NewTeam' has a wrong offset!");

// Function LyraGame.LyraPlayerBotController.UpdateTeamAttitude
// 0x0008 (0x0008 - 0x0000)
struct LyraPlayerBotController_UpdateTeamAttitude final
{
public:
	class UAIPerceptionComponent*                 AIPerception;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerBotController_UpdateTeamAttitude) == 0x000008, "Wrong alignment on LyraPlayerBotController_UpdateTeamAttitude");
static_assert(sizeof(LyraPlayerBotController_UpdateTeamAttitude) == 0x000008, "Wrong size on LyraPlayerBotController_UpdateTeamAttitude");
static_assert(offsetof(LyraPlayerBotController_UpdateTeamAttitude, AIPerception) == 0x000000, "Member 'LyraPlayerBotController_UpdateTeamAttitude::AIPerception' has a wrong offset!");

// Function LyraGame.LyraPlayerStart.IsDeathPoint
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerStart_IsDeathPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerStart_IsDeathPoint) == 0x000001, "Wrong alignment on LyraPlayerStart_IsDeathPoint");
static_assert(sizeof(LyraPlayerStart_IsDeathPoint) == 0x000001, "Wrong size on LyraPlayerStart_IsDeathPoint");
static_assert(offsetof(LyraPlayerStart_IsDeathPoint, ReturnValue) == 0x000000, "Member 'LyraPlayerStart_IsDeathPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPlayerStart.IsWaitingPoint
// 0x0001 (0x0001 - 0x0000)
struct LyraPlayerStart_IsWaitingPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlayerStart_IsWaitingPoint) == 0x000001, "Wrong alignment on LyraPlayerStart_IsWaitingPoint");
static_assert(sizeof(LyraPlayerStart_IsWaitingPoint) == 0x000001, "Wrong size on LyraPlayerStart_IsWaitingPoint");
static_assert(offsetof(LyraPlayerStart_IsWaitingPoint, ReturnValue) == 0x000000, "Member 'LyraPlayerStart_IsWaitingPoint::ReturnValue' has a wrong offset!");

// Function LyraGame.AsyncAction_QueryReplays.QueryReplays
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_QueryReplays_QueryReplays final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_QueryReplays*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_QueryReplays_QueryReplays) == 0x000008, "Wrong alignment on AsyncAction_QueryReplays_QueryReplays");
static_assert(sizeof(AsyncAction_QueryReplays_QueryReplays) == 0x000010, "Wrong size on AsyncAction_QueryReplays_QueryReplays");
static_assert(offsetof(AsyncAction_QueryReplays_QueryReplays, PlayerController) == 0x000000, "Member 'AsyncAction_QueryReplays_QueryReplays::PlayerController' has a wrong offset!");
static_assert(offsetof(AsyncAction_QueryReplays_QueryReplays, ReturnValue) == 0x000008, "Member 'AsyncAction_QueryReplays_QueryReplays::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraReplayListEntry.GetDuration
// 0x0008 (0x0008 - 0x0000)
struct LyraReplayListEntry_GetDuration final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplayListEntry_GetDuration) == 0x000008, "Wrong alignment on LyraReplayListEntry_GetDuration");
static_assert(sizeof(LyraReplayListEntry_GetDuration) == 0x000008, "Wrong size on LyraReplayListEntry_GetDuration");
static_assert(offsetof(LyraReplayListEntry_GetDuration, ReturnValue) == 0x000000, "Member 'LyraReplayListEntry_GetDuration::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraReplayListEntry.GetFriendlyName
// 0x0010 (0x0010 - 0x0000)
struct LyraReplayListEntry_GetFriendlyName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplayListEntry_GetFriendlyName) == 0x000008, "Wrong alignment on LyraReplayListEntry_GetFriendlyName");
static_assert(sizeof(LyraReplayListEntry_GetFriendlyName) == 0x000010, "Wrong size on LyraReplayListEntry_GetFriendlyName");
static_assert(offsetof(LyraReplayListEntry_GetFriendlyName, ReturnValue) == 0x000000, "Member 'LyraReplayListEntry_GetFriendlyName::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraReplayListEntry.GetIsLive
// 0x0001 (0x0001 - 0x0000)
struct LyraReplayListEntry_GetIsLive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplayListEntry_GetIsLive) == 0x000001, "Wrong alignment on LyraReplayListEntry_GetIsLive");
static_assert(sizeof(LyraReplayListEntry_GetIsLive) == 0x000001, "Wrong size on LyraReplayListEntry_GetIsLive");
static_assert(offsetof(LyraReplayListEntry_GetIsLive, ReturnValue) == 0x000000, "Member 'LyraReplayListEntry_GetIsLive::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraReplayListEntry.GetNumViewers
// 0x0004 (0x0004 - 0x0000)
struct LyraReplayListEntry_GetNumViewers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplayListEntry_GetNumViewers) == 0x000004, "Wrong alignment on LyraReplayListEntry_GetNumViewers");
static_assert(sizeof(LyraReplayListEntry_GetNumViewers) == 0x000004, "Wrong size on LyraReplayListEntry_GetNumViewers");
static_assert(offsetof(LyraReplayListEntry_GetNumViewers, ReturnValue) == 0x000000, "Member 'LyraReplayListEntry_GetNumViewers::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraReplayListEntry.GetTimestamp
// 0x0008 (0x0008 - 0x0000)
struct LyraReplayListEntry_GetTimestamp final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraReplayListEntry_GetTimestamp) == 0x000008, "Wrong alignment on LyraReplayListEntry_GetTimestamp");
static_assert(sizeof(LyraReplayListEntry_GetTimestamp) == 0x000008, "Wrong size on LyraReplayListEntry_GetTimestamp");
static_assert(offsetof(LyraReplayListEntry_GetTimestamp, ReturnValue) == 0x000000, "Member 'LyraReplayListEntry_GetTimestamp::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingKeyboardInput.ChangeBinding
// 0x0028 (0x0028 - 0x0000)
struct LyraSettingKeyboardInput_ChangeBinding final
{
public:
	int32                                         InKeyBindSlot;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   NewKey;                                            // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraSettingKeyboardInput_ChangeBinding) == 0x000008, "Wrong alignment on LyraSettingKeyboardInput_ChangeBinding");
static_assert(sizeof(LyraSettingKeyboardInput_ChangeBinding) == 0x000028, "Wrong size on LyraSettingKeyboardInput_ChangeBinding");
static_assert(offsetof(LyraSettingKeyboardInput_ChangeBinding, InKeyBindSlot) == 0x000000, "Member 'LyraSettingKeyboardInput_ChangeBinding::InKeyBindSlot' has a wrong offset!");
static_assert(offsetof(LyraSettingKeyboardInput_ChangeBinding, NewKey) == 0x000008, "Member 'LyraSettingKeyboardInput_ChangeBinding::NewKey' has a wrong offset!");
static_assert(offsetof(LyraSettingKeyboardInput_ChangeBinding, ReturnValue) == 0x000020, "Member 'LyraSettingKeyboardInput_ChangeBinding::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingKeyboardInput.SetData
// 0x0140 (0x0140 - 0x0000)
struct LyraSettingKeyboardInput_SetData final
{
public:
	struct FEnhancedActionKeyMapping              BaseMapping;                                       // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UPlayerMappableInputConfig*       InOwningConfig;                                    // 0x0098(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InKeyBindSlot;                                     // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnhancedActionKeyMapping              ReturnValue;                                       // 0x00A8(0x0098)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingKeyboardInput_SetData) == 0x000008, "Wrong alignment on LyraSettingKeyboardInput_SetData");
static_assert(sizeof(LyraSettingKeyboardInput_SetData) == 0x000140, "Wrong size on LyraSettingKeyboardInput_SetData");
static_assert(offsetof(LyraSettingKeyboardInput_SetData, BaseMapping) == 0x000000, "Member 'LyraSettingKeyboardInput_SetData::BaseMapping' has a wrong offset!");
static_assert(offsetof(LyraSettingKeyboardInput_SetData, InOwningConfig) == 0x000098, "Member 'LyraSettingKeyboardInput_SetData::InOwningConfig' has a wrong offset!");
static_assert(offsetof(LyraSettingKeyboardInput_SetData, InKeyBindSlot) == 0x0000A0, "Member 'LyraSettingKeyboardInput_SetData::InKeyBindSlot' has a wrong offset!");
static_assert(offsetof(LyraSettingKeyboardInput_SetData, ReturnValue) == 0x0000A8, "Member 'LyraSettingKeyboardInput_SetData::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingKeyboardInput.GetAllMappedActionsFromKey
// 0x0030 (0x0030 - 0x0000)
struct LyraSettingKeyboardInput_GetAllMappedActionsFromKey final
{
public:
	int32                                         InKeyBindSlot;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutActionNames;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingKeyboardInput_GetAllMappedActionsFromKey) == 0x000008, "Wrong alignment on LyraSettingKeyboardInput_GetAllMappedActionsFromKey");
static_assert(sizeof(LyraSettingKeyboardInput_GetAllMappedActionsFromKey) == 0x000030, "Wrong size on LyraSettingKeyboardInput_GetAllMappedActionsFromKey");
static_assert(offsetof(LyraSettingKeyboardInput_GetAllMappedActionsFromKey, InKeyBindSlot) == 0x000000, "Member 'LyraSettingKeyboardInput_GetAllMappedActionsFromKey::InKeyBindSlot' has a wrong offset!");
static_assert(offsetof(LyraSettingKeyboardInput_GetAllMappedActionsFromKey, Key) == 0x000008, "Member 'LyraSettingKeyboardInput_GetAllMappedActionsFromKey::Key' has a wrong offset!");
static_assert(offsetof(LyraSettingKeyboardInput_GetAllMappedActionsFromKey, OutActionNames) == 0x000020, "Member 'LyraSettingKeyboardInput_GetAllMappedActionsFromKey::OutActionNames' has a wrong offset!");

// Function LyraGame.LyraSettingKeyboardInput.GetKey
// 0x0018 (0x0018 - 0x0000)
struct LyraSettingKeyboardInput_GetKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingKeyboardInput_GetKey) == 0x000008, "Wrong alignment on LyraSettingKeyboardInput_GetKey");
static_assert(sizeof(LyraSettingKeyboardInput_GetKey) == 0x000018, "Wrong size on LyraSettingKeyboardInput_GetKey");
static_assert(offsetof(LyraSettingKeyboardInput_GetKey, ReturnValue) == 0x000000, "Member 'LyraSettingKeyboardInput_GetKey::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingKeyboardInput.GetPrimaryKeyText
// 0x0018 (0x0018 - 0x0000)
struct LyraSettingKeyboardInput_GetPrimaryKeyText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingKeyboardInput_GetPrimaryKeyText) == 0x000008, "Wrong alignment on LyraSettingKeyboardInput_GetPrimaryKeyText");
static_assert(sizeof(LyraSettingKeyboardInput_GetPrimaryKeyText) == 0x000018, "Wrong size on LyraSettingKeyboardInput_GetPrimaryKeyText");
static_assert(offsetof(LyraSettingKeyboardInput_GetPrimaryKeyText, ReturnValue) == 0x000000, "Member 'LyraSettingKeyboardInput_GetPrimaryKeyText::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingKeyboardInput.GetSettingDescription
// 0x0018 (0x0018 - 0x0000)
struct LyraSettingKeyboardInput_GetSettingDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingKeyboardInput_GetSettingDescription) == 0x000008, "Wrong alignment on LyraSettingKeyboardInput_GetSettingDescription");
static_assert(sizeof(LyraSettingKeyboardInput_GetSettingDescription) == 0x000018, "Wrong size on LyraSettingKeyboardInput_GetSettingDescription");
static_assert(offsetof(LyraSettingKeyboardInput_GetSettingDescription, ReturnValue) == 0x000000, "Member 'LyraSettingKeyboardInput_GetSettingDescription::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingKeyboardInput.GetSettingDisplayName
// 0x0018 (0x0018 - 0x0000)
struct LyraSettingKeyboardInput_GetSettingDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingKeyboardInput_GetSettingDisplayName) == 0x000008, "Wrong alignment on LyraSettingKeyboardInput_GetSettingDisplayName");
static_assert(sizeof(LyraSettingKeyboardInput_GetSettingDisplayName) == 0x000018, "Wrong size on LyraSettingKeyboardInput_GetSettingDisplayName");
static_assert(offsetof(LyraSettingKeyboardInput_GetSettingDisplayName, ReturnValue) == 0x000000, "Member 'LyraSettingKeyboardInput_GetSettingDisplayName::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingKeyboardInput.GetSettingName
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingKeyboardInput_GetSettingName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingKeyboardInput_GetSettingName) == 0x000004, "Wrong alignment on LyraSettingKeyboardInput_GetSettingName");
static_assert(sizeof(LyraSettingKeyboardInput_GetSettingName) == 0x000008, "Wrong size on LyraSettingKeyboardInput_GetSettingName");
static_assert(offsetof(LyraSettingKeyboardInput_GetSettingName, ReturnValue) == 0x000000, "Member 'LyraSettingKeyboardInput_GetSettingName::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingValueDiscrete_Resolution.GetAppropriateDiscreteOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptionIndex) == 0x000004, "Wrong alignment on LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptionIndex");
static_assert(sizeof(LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptionIndex) == 0x000004, "Wrong size on LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptionIndex");
static_assert(offsetof(LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptionIndex, ReturnValue) == 0x000000, "Member 'LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptionIndex::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingValueDiscrete_Resolution.GetAppropriateDiscreteOptions
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions) == 0x000008, "Wrong alignment on LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions");
static_assert(sizeof(LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions) == 0x000010, "Wrong size on LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions");
static_assert(offsetof(LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions, ReturnValue) == 0x000000, "Member 'LyraSettingValueDiscrete_Resolution_GetAppropriateDiscreteOptions::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingValueDiscrete_Resolution.SetAppropriateDiscreteOptionByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex) == 0x000004, "Wrong alignment on LyraSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex");
static_assert(sizeof(LyraSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex) == 0x000004, "Wrong size on LyraSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex");
static_assert(offsetof(LyraSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex, Param_Index) == 0x000000, "Member 'LyraSettingValueDiscrete_Resolution_SetAppropriateDiscreteOptionByIndex::Param_Index' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.BindDisplayMonitorChangedDelegate
// 0x0030 (0x0030 - 0x0000)
struct LyraSettingsLocal_BindDisplayMonitorChangedDelegate final
{
public:
	TSoftObjectPtr<class UUserWidget>             Window;                                            // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_BindDisplayMonitorChangedDelegate) == 0x000008, "Wrong alignment on LyraSettingsLocal_BindDisplayMonitorChangedDelegate");
static_assert(sizeof(LyraSettingsLocal_BindDisplayMonitorChangedDelegate) == 0x000030, "Wrong size on LyraSettingsLocal_BindDisplayMonitorChangedDelegate");
static_assert(offsetof(LyraSettingsLocal_BindDisplayMonitorChangedDelegate, Window) == 0x000000, "Member 'LyraSettingsLocal_BindDisplayMonitorChangedDelegate::Window' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.BindVideoSettingModifiedDelegate
// 0x0030 (0x0030 - 0x0000)
struct LyraSettingsLocal_BindVideoSettingModifiedDelegate final
{
public:
	TSoftObjectPtr<class UUserWidget>             Window;                                            // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_BindVideoSettingModifiedDelegate) == 0x000008, "Wrong alignment on LyraSettingsLocal_BindVideoSettingModifiedDelegate");
static_assert(sizeof(LyraSettingsLocal_BindVideoSettingModifiedDelegate) == 0x000030, "Wrong size on LyraSettingsLocal_BindVideoSettingModifiedDelegate");
static_assert(offsetof(LyraSettingsLocal_BindVideoSettingModifiedDelegate, Window) == 0x000000, "Member 'LyraSettingsLocal_BindVideoSettingModifiedDelegate::Window' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetFrameRateLimitIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetFrameRateLimitIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFrameRateLimitIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetFrameRateLimitIndex");
static_assert(sizeof(LyraSettingsLocal_GetFrameRateLimitIndex) == 0x000004, "Wrong size on LyraSettingsLocal_GetFrameRateLimitIndex");
static_assert(offsetof(LyraSettingsLocal_GetFrameRateLimitIndex, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFrameRateLimitIndex::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetResolutionOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetResolutionOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetResolutionOptionIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetResolutionOptionIndex");
static_assert(sizeof(LyraSettingsLocal_GetResolutionOptionIndex) == 0x000004, "Wrong size on LyraSettingsLocal_GetResolutionOptionIndex");
static_assert(offsetof(LyraSettingsLocal_GetResolutionOptionIndex, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetResolutionOptionIndex::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetResolutionOptions
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetResolutionOptions final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetResolutionOptions) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetResolutionOptions");
static_assert(sizeof(LyraSettingsLocal_GetResolutionOptions) == 0x000010, "Wrong size on LyraSettingsLocal_GetResolutionOptions");
static_assert(offsetof(LyraSettingsLocal_GetResolutionOptions, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetResolutionOptions::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetSSModeOptions
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetSSModeOptions final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSSModeOptions) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetSSModeOptions");
static_assert(sizeof(LyraSettingsLocal_GetSSModeOptions) == 0x000010, "Wrong size on LyraSettingsLocal_GetSSModeOptions");
static_assert(offsetof(LyraSettingsLocal_GetSSModeOptions, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSSModeOptions::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.IsDisplayMonitorChanged
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsDisplayMonitorChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsDisplayMonitorChanged) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsDisplayMonitorChanged");
static_assert(sizeof(LyraSettingsLocal_IsDisplayMonitorChanged) == 0x000001, "Wrong size on LyraSettingsLocal_IsDisplayMonitorChanged");
static_assert(offsetof(LyraSettingsLocal_IsDisplayMonitorChanged, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsDisplayMonitorChanged::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.OnFullScreenModeDirty
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_OnFullScreenModeDirty final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_OnFullScreenModeDirty) == 0x000004, "Wrong alignment on LyraSettingsLocal_OnFullScreenModeDirty");
static_assert(sizeof(LyraSettingsLocal_OnFullScreenModeDirty) == 0x000004, "Wrong size on LyraSettingsLocal_OnFullScreenModeDirty");
static_assert(offsetof(LyraSettingsLocal_OnFullScreenModeDirty, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_OnFullScreenModeDirty::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.OnTGFActivateApp
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_OnTGFActivateApp final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_OnTGFActivateApp) == 0x000001, "Wrong alignment on LyraSettingsLocal_OnTGFActivateApp");
static_assert(sizeof(LyraSettingsLocal_OnTGFActivateApp) == 0x000001, "Wrong size on LyraSettingsLocal_OnTGFActivateApp");
static_assert(offsetof(LyraSettingsLocal_OnTGFActivateApp, bActivate) == 0x000000, "Member 'LyraSettingsLocal_OnTGFActivateApp::bActivate' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.ResetKeybindingsToDefault
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsLocal_ResetKeybindingsToDefault final
{
public:
	class ULyraLocalPlayer*                       LocalPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_ResetKeybindingsToDefault) == 0x000008, "Wrong alignment on LyraSettingsLocal_ResetKeybindingsToDefault");
static_assert(sizeof(LyraSettingsLocal_ResetKeybindingsToDefault) == 0x000008, "Wrong size on LyraSettingsLocal_ResetKeybindingsToDefault");
static_assert(offsetof(LyraSettingsLocal_ResetKeybindingsToDefault, LocalPlayer) == 0x000000, "Member 'LyraSettingsLocal_ResetKeybindingsToDefault::LocalPlayer' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.RunAutoBenchmark
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_RunAutoBenchmark final
{
public:
	bool                                          bSaveImmediately;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_RunAutoBenchmark) == 0x000001, "Wrong alignment on LyraSettingsLocal_RunAutoBenchmark");
static_assert(sizeof(LyraSettingsLocal_RunAutoBenchmark) == 0x000001, "Wrong size on LyraSettingsLocal_RunAutoBenchmark");
static_assert(offsetof(LyraSettingsLocal_RunAutoBenchmark, bSaveImmediately) == 0x000000, "Member 'LyraSettingsLocal_RunAutoBenchmark::bSaveImmediately' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetAntiAliasingQualityByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetAntiAliasingQualityByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetAntiAliasingQualityByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetAntiAliasingQualityByIndex");
static_assert(sizeof(LyraSettingsLocal_SetAntiAliasingQualityByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetAntiAliasingQualityByIndex");
static_assert(offsetof(LyraSettingsLocal_SetAntiAliasingQualityByIndex, Param_Index) == 0x000000, "Member 'LyraSettingsLocal_SetAntiAliasingQualityByIndex::Param_Index' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetAudioOutputDeviceId
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_SetAudioOutputDeviceId final
{
public:
	class FString                                 InAudioOutputDeviceId;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetAudioOutputDeviceId) == 0x000008, "Wrong alignment on LyraSettingsLocal_SetAudioOutputDeviceId");
static_assert(sizeof(LyraSettingsLocal_SetAudioOutputDeviceId) == 0x000010, "Wrong size on LyraSettingsLocal_SetAudioOutputDeviceId");
static_assert(offsetof(LyraSettingsLocal_SetAudioOutputDeviceId, InAudioOutputDeviceId) == 0x000000, "Member 'LyraSettingsLocal_SetAudioOutputDeviceId::InAudioOutputDeviceId' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetCameraShakesByMoving
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetCameraShakesByMoving final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetCameraShakesByMoving) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetCameraShakesByMoving");
static_assert(sizeof(LyraSettingsLocal_SetCameraShakesByMoving) == 0x000001, "Wrong size on LyraSettingsLocal_SetCameraShakesByMoving");
static_assert(offsetof(LyraSettingsLocal_SetCameraShakesByMoving, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetCameraShakesByMoving::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetChatMode
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetChatMode final
{
public:
	bool                                          IsAllOpen;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetChatMode) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetChatMode");
static_assert(sizeof(LyraSettingsLocal_SetChatMode) == 0x000001, "Wrong size on LyraSettingsLocal_SetChatMode");
static_assert(offsetof(LyraSettingsLocal_SetChatMode, IsAllOpen) == 0x000000, "Member 'LyraSettingsLocal_SetChatMode::IsAllOpen' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetControllerPlatform
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsLocal_SetControllerPlatform final
{
public:
	class FName                                   InControllerPlatform;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetControllerPlatform) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetControllerPlatform");
static_assert(sizeof(LyraSettingsLocal_SetControllerPlatform) == 0x000008, "Wrong size on LyraSettingsLocal_SetControllerPlatform");
static_assert(offsetof(LyraSettingsLocal_SetControllerPlatform, InControllerPlatform) == 0x000000, "Member 'LyraSettingsLocal_SetControllerPlatform::InControllerPlatform' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetDesiredDeviceProfileQualitySuffix
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix final
{
public:
	class FString                                 InDesiredSuffix;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix) == 0x000008, "Wrong alignment on LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix");
static_assert(sizeof(LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix) == 0x000010, "Wrong size on LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix");
static_assert(offsetof(LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix, InDesiredSuffix) == 0x000000, "Member 'LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix::InDesiredSuffix' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetDialogueVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetDialogueVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetDialogueVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetDialogueVolume");
static_assert(sizeof(LyraSettingsLocal_SetDialogueVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetDialogueVolume");
static_assert(offsetof(LyraSettingsLocal_SetDialogueVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetDialogueVolume::InVolume' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetDisplayGamma
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetDisplayGamma final
{
public:
	float                                         InGamma;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetDisplayGamma) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetDisplayGamma");
static_assert(sizeof(LyraSettingsLocal_SetDisplayGamma) == 0x000004, "Wrong size on LyraSettingsLocal_SetDisplayGamma");
static_assert(offsetof(LyraSettingsLocal_SetDisplayGamma, InGamma) == 0x000000, "Member 'LyraSettingsLocal_SetDisplayGamma::InGamma' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetDLSSEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetDLSSEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetDLSSEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetDLSSEnabled");
static_assert(sizeof(LyraSettingsLocal_SetDLSSEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_SetDLSSEnabled");
static_assert(offsetof(LyraSettingsLocal_SetDLSSEnabled, bEnable) == 0x000000, "Member 'LyraSettingsLocal_SetDLSSEnabled::bEnable' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetFOV
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetFOV final
{
public:
	float                                         InFOV;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFOV) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetFOV");
static_assert(sizeof(LyraSettingsLocal_SetFOV) == 0x000004, "Wrong size on LyraSettingsLocal_SetFOV");
static_assert(offsetof(LyraSettingsLocal_SetFOV, InFOV) == 0x000000, "Member 'LyraSettingsLocal_SetFOV::InFOV' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetFrameRateLimit_Always
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetFrameRateLimit_Always final
{
public:
	float                                         NewLimitFPS;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFrameRateLimit_Always) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetFrameRateLimit_Always");
static_assert(sizeof(LyraSettingsLocal_SetFrameRateLimit_Always) == 0x000004, "Wrong size on LyraSettingsLocal_SetFrameRateLimit_Always");
static_assert(offsetof(LyraSettingsLocal_SetFrameRateLimit_Always, NewLimitFPS) == 0x000000, "Member 'LyraSettingsLocal_SetFrameRateLimit_Always::NewLimitFPS' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetFrameRateLimit_InMenu
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetFrameRateLimit_InMenu final
{
public:
	float                                         NewLimitFPS;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFrameRateLimit_InMenu) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetFrameRateLimit_InMenu");
static_assert(sizeof(LyraSettingsLocal_SetFrameRateLimit_InMenu) == 0x000004, "Wrong size on LyraSettingsLocal_SetFrameRateLimit_InMenu");
static_assert(offsetof(LyraSettingsLocal_SetFrameRateLimit_InMenu, NewLimitFPS) == 0x000000, "Member 'LyraSettingsLocal_SetFrameRateLimit_InMenu::NewLimitFPS' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetFrameRateLimit_OnBattery
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetFrameRateLimit_OnBattery final
{
public:
	float                                         NewLimitFPS;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFrameRateLimit_OnBattery) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetFrameRateLimit_OnBattery");
static_assert(sizeof(LyraSettingsLocal_SetFrameRateLimit_OnBattery) == 0x000004, "Wrong size on LyraSettingsLocal_SetFrameRateLimit_OnBattery");
static_assert(offsetof(LyraSettingsLocal_SetFrameRateLimit_OnBattery, NewLimitFPS) == 0x000000, "Member 'LyraSettingsLocal_SetFrameRateLimit_OnBattery::NewLimitFPS' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetFrameRateLimit_WhenBackgrounded
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded final
{
public:
	float                                         NewLimitFPS;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded");
static_assert(sizeof(LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded) == 0x000004, "Wrong size on LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded");
static_assert(offsetof(LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded, NewLimitFPS) == 0x000000, "Member 'LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded::NewLimitFPS' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetFrameRateLimitByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetFrameRateLimitByIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFrameRateLimitByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetFrameRateLimitByIndex");
static_assert(sizeof(LyraSettingsLocal_SetFrameRateLimitByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetFrameRateLimitByIndex");
static_assert(offsetof(LyraSettingsLocal_SetFrameRateLimitByIndex, InIndex) == 0x000000, "Member 'LyraSettingsLocal_SetFrameRateLimitByIndex::InIndex' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetFSREnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetFSREnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFSREnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetFSREnabled");
static_assert(sizeof(LyraSettingsLocal_SetFSREnabled) == 0x000001, "Wrong size on LyraSettingsLocal_SetFSREnabled");
static_assert(offsetof(LyraSettingsLocal_SetFSREnabled, bEnable) == 0x000000, "Member 'LyraSettingsLocal_SetFSREnabled::bEnable' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetGlobalIlluminationQualityByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetGlobalIlluminationQualityByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetGlobalIlluminationQualityByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetGlobalIlluminationQualityByIndex");
static_assert(sizeof(LyraSettingsLocal_SetGlobalIlluminationQualityByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetGlobalIlluminationQualityByIndex");
static_assert(offsetof(LyraSettingsLocal_SetGlobalIlluminationQualityByIndex, Param_Index) == 0x000000, "Member 'LyraSettingsLocal_SetGlobalIlluminationQualityByIndex::Param_Index' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetHDRAudioModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetHDRAudioModeEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetHDRAudioModeEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetHDRAudioModeEnabled");
static_assert(sizeof(LyraSettingsLocal_SetHDRAudioModeEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_SetHDRAudioModeEnabled");
static_assert(offsetof(LyraSettingsLocal_SetHDRAudioModeEnabled, bEnabled) == 0x000000, "Member 'LyraSettingsLocal_SetHDRAudioModeEnabled::bEnabled' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetHeadphoneModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetHeadphoneModeEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetHeadphoneModeEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetHeadphoneModeEnabled");
static_assert(sizeof(LyraSettingsLocal_SetHeadphoneModeEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_SetHeadphoneModeEnabled");
static_assert(offsetof(LyraSettingsLocal_SetHeadphoneModeEnabled, bEnabled) == 0x000000, "Member 'LyraSettingsLocal_SetHeadphoneModeEnabled::bEnabled' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetIsLiveMode
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetIsLiveMode final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetIsLiveMode) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetIsLiveMode");
static_assert(sizeof(LyraSettingsLocal_SetIsLiveMode) == 0x000001, "Wrong size on LyraSettingsLocal_SetIsLiveMode");
static_assert(offsetof(LyraSettingsLocal_SetIsLiveMode, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetIsLiveMode::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetKilledScreenshotAutoDelete
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetKilledScreenshotAutoDelete final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetKilledScreenshotAutoDelete) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetKilledScreenshotAutoDelete");
static_assert(sizeof(LyraSettingsLocal_SetKilledScreenshotAutoDelete) == 0x000001, "Wrong size on LyraSettingsLocal_SetKilledScreenshotAutoDelete");
static_assert(offsetof(LyraSettingsLocal_SetKilledScreenshotAutoDelete, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetKilledScreenshotAutoDelete::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetKilledScreenshotPath
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_SetKilledScreenshotPath final
{
public:
	class FString                                 NewValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetKilledScreenshotPath) == 0x000008, "Wrong alignment on LyraSettingsLocal_SetKilledScreenshotPath");
static_assert(sizeof(LyraSettingsLocal_SetKilledScreenshotPath) == 0x000010, "Wrong size on LyraSettingsLocal_SetKilledScreenshotPath");
static_assert(offsetof(LyraSettingsLocal_SetKilledScreenshotPath, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetKilledScreenshotPath::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetKilledScreenshotStorageLimit
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetKilledScreenshotStorageLimit final
{
public:
	EStorageLimit                                 NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetKilledScreenshotStorageLimit) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetKilledScreenshotStorageLimit");
static_assert(sizeof(LyraSettingsLocal_SetKilledScreenshotStorageLimit) == 0x000001, "Wrong size on LyraSettingsLocal_SetKilledScreenshotStorageLimit");
static_assert(offsetof(LyraSettingsLocal_SetKilledScreenshotStorageLimit, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetKilledScreenshotStorageLimit::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetMicrophoneVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetMicrophoneVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetMicrophoneVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetMicrophoneVolume");
static_assert(sizeof(LyraSettingsLocal_SetMicrophoneVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetMicrophoneVolume");
static_assert(offsetof(LyraSettingsLocal_SetMicrophoneVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetMicrophoneVolume::InVolume' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetMusicVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetMusicVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetMusicVolume");
static_assert(sizeof(LyraSettingsLocal_SetMusicVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetMusicVolume");
static_assert(offsetof(LyraSettingsLocal_SetMusicVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetMusicVolume::InVolume' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetNumberOfReplaysToKeep
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetNumberOfReplaysToKeep final
{
public:
	int32                                         InNumberOfReplays;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetNumberOfReplaysToKeep) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetNumberOfReplaysToKeep");
static_assert(sizeof(LyraSettingsLocal_SetNumberOfReplaysToKeep) == 0x000004, "Wrong size on LyraSettingsLocal_SetNumberOfReplaysToKeep");
static_assert(offsetof(LyraSettingsLocal_SetNumberOfReplaysToKeep, InNumberOfReplays) == 0x000000, "Member 'LyraSettingsLocal_SetNumberOfReplaysToKeep::InNumberOfReplays' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetOverallVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetOverallVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetOverallVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetOverallVolume");
static_assert(sizeof(LyraSettingsLocal_SetOverallVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetOverallVolume");
static_assert(offsetof(LyraSettingsLocal_SetOverallVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetOverallVolume::InVolume' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetPostProcessQualityByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetPostProcessQualityByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetPostProcessQualityByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetPostProcessQualityByIndex");
static_assert(sizeof(LyraSettingsLocal_SetPostProcessQualityByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetPostProcessQualityByIndex");
static_assert(offsetof(LyraSettingsLocal_SetPostProcessQualityByIndex, Param_Index) == 0x000000, "Member 'LyraSettingsLocal_SetPostProcessQualityByIndex::Param_Index' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetReflectionQualityByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetReflectionQualityByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetReflectionQualityByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetReflectionQualityByIndex");
static_assert(sizeof(LyraSettingsLocal_SetReflectionQualityByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetReflectionQualityByIndex");
static_assert(offsetof(LyraSettingsLocal_SetReflectionQualityByIndex, Param_Index) == 0x000000, "Member 'LyraSettingsLocal_SetReflectionQualityByIndex::Param_Index' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetSafeZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetSafeZone final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSafeZone) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetSafeZone");
static_assert(sizeof(LyraSettingsLocal_SetSafeZone) == 0x000004, "Wrong size on LyraSettingsLocal_SetSafeZone");
static_assert(offsetof(LyraSettingsLocal_SetSafeZone, Value) == 0x000000, "Member 'LyraSettingsLocal_SetSafeZone::Value' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetSaveKillScreenshot
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetSaveKillScreenshot final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSaveKillScreenshot) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetSaveKillScreenshot");
static_assert(sizeof(LyraSettingsLocal_SetSaveKillScreenshot) == 0x000001, "Wrong size on LyraSettingsLocal_SetSaveKillScreenshot");
static_assert(offsetof(LyraSettingsLocal_SetSaveKillScreenshot, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetSaveKillScreenshot::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetShouldAutoRecordReplays
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetShouldAutoRecordReplays final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetShouldAutoRecordReplays) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetShouldAutoRecordReplays");
static_assert(sizeof(LyraSettingsLocal_SetShouldAutoRecordReplays) == 0x000001, "Wrong size on LyraSettingsLocal_SetShouldAutoRecordReplays");
static_assert(offsetof(LyraSettingsLocal_SetShouldAutoRecordReplays, bEnabled) == 0x000000, "Member 'LyraSettingsLocal_SetShouldAutoRecordReplays::bEnabled' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetSoundFXVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetSoundFXVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSoundFXVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetSoundFXVolume");
static_assert(sizeof(LyraSettingsLocal_SetSoundFXVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetSoundFXVolume");
static_assert(offsetof(LyraSettingsLocal_SetSoundFXVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetSoundFXVolume::InVolume' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetSpeakerVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetSpeakerVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSpeakerVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetSpeakerVolume");
static_assert(sizeof(LyraSettingsLocal_SetSpeakerVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetSpeakerVolume");
static_assert(offsetof(LyraSettingsLocal_SetSpeakerVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetSpeakerVolume::InVolume' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetSSModeByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetSSModeByIndex final
{
public:
	int32                                         InEnumIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSSModeByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetSSModeByIndex");
static_assert(sizeof(LyraSettingsLocal_SetSSModeByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetSSModeByIndex");
static_assert(offsetof(LyraSettingsLocal_SetSSModeByIndex, InEnumIndex) == 0x000000, "Member 'LyraSettingsLocal_SetSSModeByIndex::InEnumIndex' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetSuperSamplingMode
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetSuperSamplingMode final
{
public:
	ETGFSSMode                                    SSMode;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSuperSamplingMode) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetSuperSamplingMode");
static_assert(sizeof(LyraSettingsLocal_SetSuperSamplingMode) == 0x000001, "Wrong size on LyraSettingsLocal_SetSuperSamplingMode");
static_assert(offsetof(LyraSettingsLocal_SetSuperSamplingMode, SSMode) == 0x000000, "Member 'LyraSettingsLocal_SetSuperSamplingMode::SSMode' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetTextureQualityByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetTextureQualityByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetTextureQualityByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetTextureQualityByIndex");
static_assert(sizeof(LyraSettingsLocal_SetTextureQualityByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetTextureQualityByIndex");
static_assert(offsetof(LyraSettingsLocal_SetTextureQualityByIndex, Param_Index) == 0x000000, "Member 'LyraSettingsLocal_SetTextureQualityByIndex::Param_Index' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetTGFOverallScalabilityLevelByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetTGFOverallScalabilityLevelByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetTGFOverallScalabilityLevelByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetTGFOverallScalabilityLevelByIndex");
static_assert(sizeof(LyraSettingsLocal_SetTGFOverallScalabilityLevelByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetTGFOverallScalabilityLevelByIndex");
static_assert(offsetof(LyraSettingsLocal_SetTGFOverallScalabilityLevelByIndex, Param_Index) == 0x000000, "Member 'LyraSettingsLocal_SetTGFOverallScalabilityLevelByIndex::Param_Index' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetTGFResolutionByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetTGFResolutionByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetTGFResolutionByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetTGFResolutionByIndex");
static_assert(sizeof(LyraSettingsLocal_SetTGFResolutionByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetTGFResolutionByIndex");
static_assert(offsetof(LyraSettingsLocal_SetTGFResolutionByIndex, Param_Index) == 0x000000, "Member 'LyraSettingsLocal_SetTGFResolutionByIndex::Param_Index' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetTGFWindowModeByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetTGFWindowModeByIndex final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetTGFWindowModeByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetTGFWindowModeByIndex");
static_assert(sizeof(LyraSettingsLocal_SetTGFWindowModeByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetTGFWindowModeByIndex");
static_assert(offsetof(LyraSettingsLocal_SetTGFWindowModeByIndex, Mode) == 0x000000, "Member 'LyraSettingsLocal_SetTGFWindowModeByIndex::Mode' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetViewDistanceQualityByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetViewDistanceQualityByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetViewDistanceQualityByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetViewDistanceQualityByIndex");
static_assert(sizeof(LyraSettingsLocal_SetViewDistanceQualityByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetViewDistanceQualityByIndex");
static_assert(offsetof(LyraSettingsLocal_SetViewDistanceQualityByIndex, Param_Index) == 0x000000, "Member 'LyraSettingsLocal_SetViewDistanceQualityByIndex::Param_Index' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetVisualEffectQualityByIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetVisualEffectQualityByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetVisualEffectQualityByIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetVisualEffectQualityByIndex");
static_assert(sizeof(LyraSettingsLocal_SetVisualEffectQualityByIndex) == 0x000004, "Wrong size on LyraSettingsLocal_SetVisualEffectQualityByIndex");
static_assert(offsetof(LyraSettingsLocal_SetVisualEffectQualityByIndex, Param_Index) == 0x000000, "Member 'LyraSettingsLocal_SetVisualEffectQualityByIndex::Param_Index' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetVoiceChat
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetVoiceChat final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetVoiceChat) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetVoiceChat");
static_assert(sizeof(LyraSettingsLocal_SetVoiceChat) == 0x000001, "Wrong size on LyraSettingsLocal_SetVoiceChat");
static_assert(offsetof(LyraSettingsLocal_SetVoiceChat, IsOn) == 0x000000, "Member 'LyraSettingsLocal_SetVoiceChat::IsOn' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetVoiceChatVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetVoiceChatVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetVoiceChatVolume");
static_assert(sizeof(LyraSettingsLocal_SetVoiceChatVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetVoiceChatVolume");
static_assert(offsetof(LyraSettingsLocal_SetVoiceChatVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetVoiceChatVolume::InVolume' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.SetXeSSEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetXeSSEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetXeSSEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetXeSSEnabled");
static_assert(sizeof(LyraSettingsLocal_SetXeSSEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_SetXeSSEnabled");
static_assert(offsetof(LyraSettingsLocal_SetXeSSEnabled, bEnable) == 0x000000, "Member 'LyraSettingsLocal_SetXeSSEnabled::bEnable' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.UnBindDisplayMonitorChangedDelegate
// 0x0030 (0x0030 - 0x0000)
struct LyraSettingsLocal_UnBindDisplayMonitorChangedDelegate final
{
public:
	TSoftObjectPtr<class UUserWidget>             Window;                                            // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_UnBindDisplayMonitorChangedDelegate) == 0x000008, "Wrong alignment on LyraSettingsLocal_UnBindDisplayMonitorChangedDelegate");
static_assert(sizeof(LyraSettingsLocal_UnBindDisplayMonitorChangedDelegate) == 0x000030, "Wrong size on LyraSettingsLocal_UnBindDisplayMonitorChangedDelegate");
static_assert(offsetof(LyraSettingsLocal_UnBindDisplayMonitorChangedDelegate, Window) == 0x000000, "Member 'LyraSettingsLocal_UnBindDisplayMonitorChangedDelegate::Window' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.UnBindVideoSettingModifiedDelegate
// 0x0030 (0x0030 - 0x0000)
struct LyraSettingsLocal_UnBindVideoSettingModifiedDelegate final
{
public:
	TSoftObjectPtr<class UUserWidget>             Window;                                            // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_UnBindVideoSettingModifiedDelegate) == 0x000008, "Wrong alignment on LyraSettingsLocal_UnBindVideoSettingModifiedDelegate");
static_assert(sizeof(LyraSettingsLocal_UnBindVideoSettingModifiedDelegate) == 0x000030, "Wrong size on LyraSettingsLocal_UnBindVideoSettingModifiedDelegate");
static_assert(offsetof(LyraSettingsLocal_UnBindVideoSettingModifiedDelegate, Window) == 0x000000, "Member 'LyraSettingsLocal_UnBindVideoSettingModifiedDelegate::Window' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.CanModifyHeadphoneModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_CanModifyHeadphoneModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_CanModifyHeadphoneModeEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_CanModifyHeadphoneModeEnabled");
static_assert(sizeof(LyraSettingsLocal_CanModifyHeadphoneModeEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_CanModifyHeadphoneModeEnabled");
static_assert(offsetof(LyraSettingsLocal_CanModifyHeadphoneModeEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_CanModifyHeadphoneModeEnabled::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.CanRunAutoBenchmark
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_CanRunAutoBenchmark final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_CanRunAutoBenchmark) == 0x000001, "Wrong alignment on LyraSettingsLocal_CanRunAutoBenchmark");
static_assert(sizeof(LyraSettingsLocal_CanRunAutoBenchmark) == 0x000001, "Wrong size on LyraSettingsLocal_CanRunAutoBenchmark");
static_assert(offsetof(LyraSettingsLocal_CanRunAutoBenchmark, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_CanRunAutoBenchmark::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetAllRegisteredInputConfigs
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetAllRegisteredInputConfigs final
{
public:
	TArray<struct FLoadedMappableConfigPair>      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetAllRegisteredInputConfigs) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetAllRegisteredInputConfigs");
static_assert(sizeof(LyraSettingsLocal_GetAllRegisteredInputConfigs) == 0x000010, "Wrong size on LyraSettingsLocal_GetAllRegisteredInputConfigs");
static_assert(offsetof(LyraSettingsLocal_GetAllRegisteredInputConfigs, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetAllRegisteredInputConfigs::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetAudioOutputDeviceId
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetAudioOutputDeviceId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetAudioOutputDeviceId) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetAudioOutputDeviceId");
static_assert(sizeof(LyraSettingsLocal_GetAudioOutputDeviceId) == 0x000010, "Wrong size on LyraSettingsLocal_GetAudioOutputDeviceId");
static_assert(offsetof(LyraSettingsLocal_GetAudioOutputDeviceId, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetAudioOutputDeviceId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetCameraShakesByMoving
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetCameraShakesByMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetCameraShakesByMoving) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetCameraShakesByMoving");
static_assert(sizeof(LyraSettingsLocal_GetCameraShakesByMoving) == 0x000001, "Wrong size on LyraSettingsLocal_GetCameraShakesByMoving");
static_assert(offsetof(LyraSettingsLocal_GetCameraShakesByMoving, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetCameraShakesByMoving::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetChatMode
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetChatMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetChatMode) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetChatMode");
static_assert(sizeof(LyraSettingsLocal_GetChatMode) == 0x000001, "Wrong size on LyraSettingsLocal_GetChatMode");
static_assert(offsetof(LyraSettingsLocal_GetChatMode, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetChatMode::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetControllerPlatform
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsLocal_GetControllerPlatform final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetControllerPlatform) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetControllerPlatform");
static_assert(sizeof(LyraSettingsLocal_GetControllerPlatform) == 0x000008, "Wrong size on LyraSettingsLocal_GetControllerPlatform");
static_assert(offsetof(LyraSettingsLocal_GetControllerPlatform, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetControllerPlatform::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetCustomPlayerInputConfig
// 0x0050 (0x0050 - 0x0000)
struct LyraSettingsLocal_GetCustomPlayerInputConfig final
{
public:
	TMap<class FName, struct FKey>                ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetCustomPlayerInputConfig) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetCustomPlayerInputConfig");
static_assert(sizeof(LyraSettingsLocal_GetCustomPlayerInputConfig) == 0x000050, "Wrong size on LyraSettingsLocal_GetCustomPlayerInputConfig");
static_assert(offsetof(LyraSettingsLocal_GetCustomPlayerInputConfig, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetCustomPlayerInputConfig::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetDefaultKilledScreenshotPath
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetDefaultKilledScreenshotPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetDefaultKilledScreenshotPath) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetDefaultKilledScreenshotPath");
static_assert(sizeof(LyraSettingsLocal_GetDefaultKilledScreenshotPath) == 0x000010, "Wrong size on LyraSettingsLocal_GetDefaultKilledScreenshotPath");
static_assert(offsetof(LyraSettingsLocal_GetDefaultKilledScreenshotPath, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetDefaultKilledScreenshotPath::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetDefaultSharpness
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetDefaultSharpness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetDefaultSharpness) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetDefaultSharpness");
static_assert(sizeof(LyraSettingsLocal_GetDefaultSharpness) == 0x000004, "Wrong size on LyraSettingsLocal_GetDefaultSharpness");
static_assert(offsetof(LyraSettingsLocal_GetDefaultSharpness, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetDefaultSharpness::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetDesiredDeviceProfileQualitySuffix
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix");
static_assert(sizeof(LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix) == 0x000010, "Wrong size on LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix");
static_assert(offsetof(LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetDialogueVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetDialogueVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetDialogueVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetDialogueVolume");
static_assert(sizeof(LyraSettingsLocal_GetDialogueVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetDialogueVolume");
static_assert(offsetof(LyraSettingsLocal_GetDialogueVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetDialogueVolume::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetDisplayGamma
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetDisplayGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetDisplayGamma) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetDisplayGamma");
static_assert(sizeof(LyraSettingsLocal_GetDisplayGamma) == 0x000004, "Wrong size on LyraSettingsLocal_GetDisplayGamma");
static_assert(offsetof(LyraSettingsLocal_GetDisplayGamma, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetDisplayGamma::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetDLSSModeIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetDLSSModeIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetDLSSModeIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetDLSSModeIndex");
static_assert(sizeof(LyraSettingsLocal_GetDLSSModeIndex) == 0x000004, "Wrong size on LyraSettingsLocal_GetDLSSModeIndex");
static_assert(offsetof(LyraSettingsLocal_GetDLSSModeIndex, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetDLSSModeIndex::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetFOV
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFOV) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetFOV");
static_assert(sizeof(LyraSettingsLocal_GetFOV) == 0x000004, "Wrong size on LyraSettingsLocal_GetFOV");
static_assert(offsetof(LyraSettingsLocal_GetFOV, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFOV::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetFrameRateLimit_Always
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetFrameRateLimit_Always final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFrameRateLimit_Always) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetFrameRateLimit_Always");
static_assert(sizeof(LyraSettingsLocal_GetFrameRateLimit_Always) == 0x000004, "Wrong size on LyraSettingsLocal_GetFrameRateLimit_Always");
static_assert(offsetof(LyraSettingsLocal_GetFrameRateLimit_Always, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFrameRateLimit_Always::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetFrameRateLimit_InMenu
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetFrameRateLimit_InMenu final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFrameRateLimit_InMenu) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetFrameRateLimit_InMenu");
static_assert(sizeof(LyraSettingsLocal_GetFrameRateLimit_InMenu) == 0x000004, "Wrong size on LyraSettingsLocal_GetFrameRateLimit_InMenu");
static_assert(offsetof(LyraSettingsLocal_GetFrameRateLimit_InMenu, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFrameRateLimit_InMenu::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetFrameRateLimit_OnBattery
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetFrameRateLimit_OnBattery final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFrameRateLimit_OnBattery) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetFrameRateLimit_OnBattery");
static_assert(sizeof(LyraSettingsLocal_GetFrameRateLimit_OnBattery) == 0x000004, "Wrong size on LyraSettingsLocal_GetFrameRateLimit_OnBattery");
static_assert(offsetof(LyraSettingsLocal_GetFrameRateLimit_OnBattery, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFrameRateLimit_OnBattery::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetFrameRateLimit_WhenBackgrounded
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded");
static_assert(sizeof(LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded) == 0x000004, "Wrong size on LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded");
static_assert(offsetof(LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetFrameRateLimitListText
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetFrameRateLimitListText final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFrameRateLimitListText) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetFrameRateLimitListText");
static_assert(sizeof(LyraSettingsLocal_GetFrameRateLimitListText) == 0x000010, "Wrong size on LyraSettingsLocal_GetFrameRateLimitListText");
static_assert(offsetof(LyraSettingsLocal_GetFrameRateLimitListText, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFrameRateLimitListText::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetInputConfigByName
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetInputConfigByName final
{
public:
	class FName                                   ConfigName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPlayerMappableInputConfig*       ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetInputConfigByName) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetInputConfigByName");
static_assert(sizeof(LyraSettingsLocal_GetInputConfigByName) == 0x000010, "Wrong size on LyraSettingsLocal_GetInputConfigByName");
static_assert(offsetof(LyraSettingsLocal_GetInputConfigByName, ConfigName) == 0x000000, "Member 'LyraSettingsLocal_GetInputConfigByName::ConfigName' has a wrong offset!");
static_assert(offsetof(LyraSettingsLocal_GetInputConfigByName, ReturnValue) == 0x000008, "Member 'LyraSettingsLocal_GetInputConfigByName::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetIsLiveMode
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetIsLiveMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetIsLiveMode) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetIsLiveMode");
static_assert(sizeof(LyraSettingsLocal_GetIsLiveMode) == 0x000001, "Wrong size on LyraSettingsLocal_GetIsLiveMode");
static_assert(offsetof(LyraSettingsLocal_GetIsLiveMode, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetIsLiveMode::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetKilledScreenshotAutoDelete
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetKilledScreenshotAutoDelete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetKilledScreenshotAutoDelete) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetKilledScreenshotAutoDelete");
static_assert(sizeof(LyraSettingsLocal_GetKilledScreenshotAutoDelete) == 0x000001, "Wrong size on LyraSettingsLocal_GetKilledScreenshotAutoDelete");
static_assert(offsetof(LyraSettingsLocal_GetKilledScreenshotAutoDelete, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetKilledScreenshotAutoDelete::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetKilledScreenshotPath
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetKilledScreenshotPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetKilledScreenshotPath) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetKilledScreenshotPath");
static_assert(sizeof(LyraSettingsLocal_GetKilledScreenshotPath) == 0x000010, "Wrong size on LyraSettingsLocal_GetKilledScreenshotPath");
static_assert(offsetof(LyraSettingsLocal_GetKilledScreenshotPath, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetKilledScreenshotPath::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetKilledScreenshotStorageLimit
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetKilledScreenshotStorageLimit final
{
public:
	EStorageLimit                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetKilledScreenshotStorageLimit) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetKilledScreenshotStorageLimit");
static_assert(sizeof(LyraSettingsLocal_GetKilledScreenshotStorageLimit) == 0x000001, "Wrong size on LyraSettingsLocal_GetKilledScreenshotStorageLimit");
static_assert(offsetof(LyraSettingsLocal_GetKilledScreenshotStorageLimit, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetKilledScreenshotStorageLimit::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetKilledScreenshotStorageLimitIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetKilledScreenshotStorageLimitIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetKilledScreenshotStorageLimitIndex) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetKilledScreenshotStorageLimitIndex");
static_assert(sizeof(LyraSettingsLocal_GetKilledScreenshotStorageLimitIndex) == 0x000004, "Wrong size on LyraSettingsLocal_GetKilledScreenshotStorageLimitIndex");
static_assert(offsetof(LyraSettingsLocal_GetKilledScreenshotStorageLimitIndex, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetKilledScreenshotStorageLimitIndex::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetMaxResolutionScale
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetMaxResolutionScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetMaxResolutionScale) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetMaxResolutionScale");
static_assert(sizeof(LyraSettingsLocal_GetMaxResolutionScale) == 0x000004, "Wrong size on LyraSettingsLocal_GetMaxResolutionScale");
static_assert(offsetof(LyraSettingsLocal_GetMaxResolutionScale, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetMaxResolutionScale::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetMicrophoneVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetMicrophoneVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetMicrophoneVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetMicrophoneVolume");
static_assert(sizeof(LyraSettingsLocal_GetMicrophoneVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetMicrophoneVolume");
static_assert(offsetof(LyraSettingsLocal_GetMicrophoneVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetMicrophoneVolume::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetMinResolutionScale
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetMinResolutionScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetMinResolutionScale) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetMinResolutionScale");
static_assert(sizeof(LyraSettingsLocal_GetMinResolutionScale) == 0x000004, "Wrong size on LyraSettingsLocal_GetMinResolutionScale");
static_assert(offsetof(LyraSettingsLocal_GetMinResolutionScale, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetMinResolutionScale::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetMusicVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetMusicVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetMusicVolume");
static_assert(sizeof(LyraSettingsLocal_GetMusicVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetMusicVolume");
static_assert(offsetof(LyraSettingsLocal_GetMusicVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetMusicVolume::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetNumberOfReplaysToKeep
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetNumberOfReplaysToKeep final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetNumberOfReplaysToKeep) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetNumberOfReplaysToKeep");
static_assert(sizeof(LyraSettingsLocal_GetNumberOfReplaysToKeep) == 0x000004, "Wrong size on LyraSettingsLocal_GetNumberOfReplaysToKeep");
static_assert(offsetof(LyraSettingsLocal_GetNumberOfReplaysToKeep, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetNumberOfReplaysToKeep::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetOverallLevel
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetOverallLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetOverallLevel) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetOverallLevel");
static_assert(sizeof(LyraSettingsLocal_GetOverallLevel) == 0x000004, "Wrong size on LyraSettingsLocal_GetOverallLevel");
static_assert(offsetof(LyraSettingsLocal_GetOverallLevel, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetOverallLevel::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetOverallVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetOverallVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetOverallVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetOverallVolume");
static_assert(sizeof(LyraSettingsLocal_GetOverallVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetOverallVolume");
static_assert(offsetof(LyraSettingsLocal_GetOverallVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetOverallVolume::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetSafeZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetSafeZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSafeZone) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetSafeZone");
static_assert(sizeof(LyraSettingsLocal_GetSafeZone) == 0x000004, "Wrong size on LyraSettingsLocal_GetSafeZone");
static_assert(offsetof(LyraSettingsLocal_GetSafeZone, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSafeZone::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetSaveKillScreenshot
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetSaveKillScreenshot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSaveKillScreenshot) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetSaveKillScreenshot");
static_assert(sizeof(LyraSettingsLocal_GetSaveKillScreenshot) == 0x000001, "Wrong size on LyraSettingsLocal_GetSaveKillScreenshot");
static_assert(offsetof(LyraSettingsLocal_GetSaveKillScreenshot, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSaveKillScreenshot::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetSoundFXVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetSoundFXVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSoundFXVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetSoundFXVolume");
static_assert(sizeof(LyraSettingsLocal_GetSoundFXVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetSoundFXVolume");
static_assert(offsetof(LyraSettingsLocal_GetSoundFXVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSoundFXVolume::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetSpeakerVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetSpeakerVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSpeakerVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetSpeakerVolume");
static_assert(sizeof(LyraSettingsLocal_GetSpeakerVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetSpeakerVolume");
static_assert(offsetof(LyraSettingsLocal_GetSpeakerVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSpeakerVolume::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetSuperSamplingMode
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetSuperSamplingMode final
{
public:
	ETGFSSMode                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSuperSamplingMode) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetSuperSamplingMode");
static_assert(sizeof(LyraSettingsLocal_GetSuperSamplingMode) == 0x000001, "Wrong size on LyraSettingsLocal_GetSuperSamplingMode");
static_assert(offsetof(LyraSettingsLocal_GetSuperSamplingMode, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSuperSamplingMode::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetSystemResolution
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsLocal_GetSystemResolution final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSystemResolution) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetSystemResolution");
static_assert(sizeof(LyraSettingsLocal_GetSystemResolution) == 0x000008, "Wrong size on LyraSettingsLocal_GetSystemResolution");
static_assert(offsetof(LyraSettingsLocal_GetSystemResolution, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSystemResolution::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetVoiceChat
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetVoiceChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetVoiceChat) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetVoiceChat");
static_assert(sizeof(LyraSettingsLocal_GetVoiceChat) == 0x000001, "Wrong size on LyraSettingsLocal_GetVoiceChat");
static_assert(offsetof(LyraSettingsLocal_GetVoiceChat, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetVoiceChat::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.GetVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetVoiceChatVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetVoiceChatVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetVoiceChatVolume");
static_assert(sizeof(LyraSettingsLocal_GetVoiceChatVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetVoiceChatVolume");
static_assert(offsetof(LyraSettingsLocal_GetVoiceChatVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetVoiceChatVolume::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.IsDLSSEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsDLSSEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsDLSSEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsDLSSEnabled");
static_assert(sizeof(LyraSettingsLocal_IsDLSSEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_IsDLSSEnabled");
static_assert(offsetof(LyraSettingsLocal_IsDLSSEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsDLSSEnabled::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.IsFSREnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsFSREnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsFSREnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsFSREnabled");
static_assert(sizeof(LyraSettingsLocal_IsFSREnabled) == 0x000001, "Wrong size on LyraSettingsLocal_IsFSREnabled");
static_assert(offsetof(LyraSettingsLocal_IsFSREnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsFSREnabled::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.IsHDRAudioModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsHDRAudioModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsHDRAudioModeEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsHDRAudioModeEnabled");
static_assert(sizeof(LyraSettingsLocal_IsHDRAudioModeEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_IsHDRAudioModeEnabled");
static_assert(offsetof(LyraSettingsLocal_IsHDRAudioModeEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsHDRAudioModeEnabled::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.IsHeadphoneModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsHeadphoneModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsHeadphoneModeEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsHeadphoneModeEnabled");
static_assert(sizeof(LyraSettingsLocal_IsHeadphoneModeEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_IsHeadphoneModeEnabled");
static_assert(offsetof(LyraSettingsLocal_IsHeadphoneModeEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsHeadphoneModeEnabled::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.IsSafeZoneSet
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsSafeZoneSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsSafeZoneSet) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsSafeZoneSet");
static_assert(sizeof(LyraSettingsLocal_IsSafeZoneSet) == 0x000001, "Wrong size on LyraSettingsLocal_IsSafeZoneSet");
static_assert(offsetof(LyraSettingsLocal_IsSafeZoneSet, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsSafeZoneSet::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.IsXeSSEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsXeSSEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsXeSSEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsXeSSEnabled");
static_assert(sizeof(LyraSettingsLocal_IsXeSSEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_IsXeSSEnabled");
static_assert(offsetof(LyraSettingsLocal_IsXeSSEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsXeSSEnabled::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.ShouldAutoRecordReplays
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_ShouldAutoRecordReplays final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_ShouldAutoRecordReplays) == 0x000001, "Wrong alignment on LyraSettingsLocal_ShouldAutoRecordReplays");
static_assert(sizeof(LyraSettingsLocal_ShouldAutoRecordReplays) == 0x000001, "Wrong size on LyraSettingsLocal_ShouldAutoRecordReplays");
static_assert(offsetof(LyraSettingsLocal_ShouldAutoRecordReplays, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_ShouldAutoRecordReplays::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsLocal.ShouldRunAutoBenchmarkAtStartup
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup) == 0x000001, "Wrong alignment on LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup");
static_assert(sizeof(LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup) == 0x000001, "Wrong size on LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup");
static_assert(offsetof(LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetAllowAudioInBackgroundSetting
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetAllowAudioInBackgroundSetting final
{
public:
	ELyraAllowBackgroundAudioSetting              NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetAllowAudioInBackgroundSetting) == 0x000001, "Wrong alignment on LyraSettingsShared_SetAllowAudioInBackgroundSetting");
static_assert(sizeof(LyraSettingsShared_SetAllowAudioInBackgroundSetting) == 0x000001, "Wrong size on LyraSettingsShared_SetAllowAudioInBackgroundSetting");
static_assert(offsetof(LyraSettingsShared_SetAllowAudioInBackgroundSetting, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetAllowAudioInBackgroundSetting::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetAllowPrivateChat
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetAllowPrivateChat final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetAllowPrivateChat) == 0x000001, "Wrong alignment on LyraSettingsShared_SetAllowPrivateChat");
static_assert(sizeof(LyraSettingsShared_SetAllowPrivateChat) == 0x000001, "Wrong size on LyraSettingsShared_SetAllowPrivateChat");
static_assert(offsetof(LyraSettingsShared_SetAllowPrivateChat, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetAllowPrivateChat::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetAllowTeamInvite
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetAllowTeamInvite final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetAllowTeamInvite) == 0x000001, "Wrong alignment on LyraSettingsShared_SetAllowTeamInvite");
static_assert(sizeof(LyraSettingsShared_SetAllowTeamInvite) == 0x000001, "Wrong size on LyraSettingsShared_SetAllowTeamInvite");
static_assert(offsetof(LyraSettingsShared_SetAllowTeamInvite, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetAllowTeamInvite::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetChargeSkillMethod
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetChargeSkillMethod final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetChargeSkillMethod) == 0x000001, "Wrong alignment on LyraSettingsShared_SetChargeSkillMethod");
static_assert(sizeof(LyraSettingsShared_SetChargeSkillMethod) == 0x000001, "Wrong size on LyraSettingsShared_SetChargeSkillMethod");
static_assert(offsetof(LyraSettingsShared_SetChargeSkillMethod, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetChargeSkillMethod::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetCheckedActivities
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsShared_SetCheckedActivities final
{
public:
	TArray<int32>                                 Activities;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetCheckedActivities) == 0x000008, "Wrong alignment on LyraSettingsShared_SetCheckedActivities");
static_assert(sizeof(LyraSettingsShared_SetCheckedActivities) == 0x000010, "Wrong size on LyraSettingsShared_SetCheckedActivities");
static_assert(offsetof(LyraSettingsShared_SetCheckedActivities, Activities) == 0x000000, "Member 'LyraSettingsShared_SetCheckedActivities::Activities' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetColorBlindMode
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetColorBlindMode final
{
public:
	EColorBlindMode                               InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetColorBlindMode) == 0x000001, "Wrong alignment on LyraSettingsShared_SetColorBlindMode");
static_assert(sizeof(LyraSettingsShared_SetColorBlindMode) == 0x000001, "Wrong size on LyraSettingsShared_SetColorBlindMode");
static_assert(offsetof(LyraSettingsShared_SetColorBlindMode, InMode) == 0x000000, "Member 'LyraSettingsShared_SetColorBlindMode::InMode' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetColorBlindStrength
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_SetColorBlindStrength final
{
public:
	int32                                         InColorBlindStrength;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetColorBlindStrength) == 0x000004, "Wrong alignment on LyraSettingsShared_SetColorBlindStrength");
static_assert(sizeof(LyraSettingsShared_SetColorBlindStrength) == 0x000004, "Wrong size on LyraSettingsShared_SetColorBlindStrength");
static_assert(offsetof(LyraSettingsShared_SetColorBlindStrength, InColorBlindStrength) == 0x000000, "Member 'LyraSettingsShared_SetColorBlindStrength::InColorBlindStrength' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetDailyLoginCheck
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_SetDailyLoginCheck final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetDailyLoginCheck) == 0x000004, "Wrong alignment on LyraSettingsShared_SetDailyLoginCheck");
static_assert(sizeof(LyraSettingsShared_SetDailyLoginCheck) == 0x000004, "Wrong size on LyraSettingsShared_SetDailyLoginCheck");
static_assert(offsetof(LyraSettingsShared_SetDailyLoginCheck, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetDailyLoginCheck::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetForceFeedbackEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetForceFeedbackEnabled final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetForceFeedbackEnabled) == 0x000001, "Wrong alignment on LyraSettingsShared_SetForceFeedbackEnabled");
static_assert(sizeof(LyraSettingsShared_SetForceFeedbackEnabled) == 0x000001, "Wrong size on LyraSettingsShared_SetForceFeedbackEnabled");
static_assert(offsetof(LyraSettingsShared_SetForceFeedbackEnabled, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetForceFeedbackEnabled::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetGamepadLookStickDeadZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_SetGamepadLookStickDeadZone final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetGamepadLookStickDeadZone) == 0x000004, "Wrong alignment on LyraSettingsShared_SetGamepadLookStickDeadZone");
static_assert(sizeof(LyraSettingsShared_SetGamepadLookStickDeadZone) == 0x000004, "Wrong size on LyraSettingsShared_SetGamepadLookStickDeadZone");
static_assert(offsetof(LyraSettingsShared_SetGamepadLookStickDeadZone, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetGamepadLookStickDeadZone::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetGamepadMoveStickDeadZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_SetGamepadMoveStickDeadZone final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetGamepadMoveStickDeadZone) == 0x000004, "Wrong alignment on LyraSettingsShared_SetGamepadMoveStickDeadZone");
static_assert(sizeof(LyraSettingsShared_SetGamepadMoveStickDeadZone) == 0x000004, "Wrong size on LyraSettingsShared_SetGamepadMoveStickDeadZone");
static_assert(offsetof(LyraSettingsShared_SetGamepadMoveStickDeadZone, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetGamepadMoveStickDeadZone::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetGamepadTargetingSensitivityPreset
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetGamepadTargetingSensitivityPreset final
{
public:
	ELyraGamepadSensitivity                       NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetGamepadTargetingSensitivityPreset) == 0x000001, "Wrong alignment on LyraSettingsShared_SetGamepadTargetingSensitivityPreset");
static_assert(sizeof(LyraSettingsShared_SetGamepadTargetingSensitivityPreset) == 0x000001, "Wrong size on LyraSettingsShared_SetGamepadTargetingSensitivityPreset");
static_assert(offsetof(LyraSettingsShared_SetGamepadTargetingSensitivityPreset, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetGamepadTargetingSensitivityPreset::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetInventoryAutoQuality
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsShared_SetInventoryAutoQuality final
{
public:
	TArray<ETgfEquipQuality>                      NewValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetInventoryAutoQuality) == 0x000008, "Wrong alignment on LyraSettingsShared_SetInventoryAutoQuality");
static_assert(sizeof(LyraSettingsShared_SetInventoryAutoQuality) == 0x000010, "Wrong size on LyraSettingsShared_SetInventoryAutoQuality");
static_assert(offsetof(LyraSettingsShared_SetInventoryAutoQuality, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetInventoryAutoQuality::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetInventoryOpened
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsShared_SetInventoryOpened final
{
public:
	TArray<int64>                                 NewValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetInventoryOpened) == 0x000008, "Wrong alignment on LyraSettingsShared_SetInventoryOpened");
static_assert(sizeof(LyraSettingsShared_SetInventoryOpened) == 0x000010, "Wrong size on LyraSettingsShared_SetInventoryOpened");
static_assert(offsetof(LyraSettingsShared_SetInventoryOpened, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetInventoryOpened::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetInventorySee
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetInventorySee final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetInventorySee) == 0x000001, "Wrong alignment on LyraSettingsShared_SetInventorySee");
static_assert(sizeof(LyraSettingsShared_SetInventorySee) == 0x000001, "Wrong size on LyraSettingsShared_SetInventorySee");
static_assert(offsetof(LyraSettingsShared_SetInventorySee, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetInventorySee::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetInventoryTalentTips
// 0x0018 (0x0018 - 0x0000)
struct LyraSettingsShared_SetInventoryTalentTips final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 NewValue;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetInventoryTalentTips) == 0x000008, "Wrong alignment on LyraSettingsShared_SetInventoryTalentTips");
static_assert(sizeof(LyraSettingsShared_SetInventoryTalentTips) == 0x000018, "Wrong size on LyraSettingsShared_SetInventoryTalentTips");
static_assert(offsetof(LyraSettingsShared_SetInventoryTalentTips, Key) == 0x000000, "Member 'LyraSettingsShared_SetInventoryTalentTips::Key' has a wrong offset!");
static_assert(offsetof(LyraSettingsShared_SetInventoryTalentTips, NewValue) == 0x000008, "Member 'LyraSettingsShared_SetInventoryTalentTips::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetInvertHorizontalAxis
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetInvertHorizontalAxis final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetInvertHorizontalAxis) == 0x000001, "Wrong alignment on LyraSettingsShared_SetInvertHorizontalAxis");
static_assert(sizeof(LyraSettingsShared_SetInvertHorizontalAxis) == 0x000001, "Wrong size on LyraSettingsShared_SetInvertHorizontalAxis");
static_assert(offsetof(LyraSettingsShared_SetInvertHorizontalAxis, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetInvertHorizontalAxis::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetInvertVerticalAxis
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetInvertVerticalAxis final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetInvertVerticalAxis) == 0x000001, "Wrong alignment on LyraSettingsShared_SetInvertVerticalAxis");
static_assert(sizeof(LyraSettingsShared_SetInvertVerticalAxis) == 0x000001, "Wrong size on LyraSettingsShared_SetInvertVerticalAxis");
static_assert(offsetof(LyraSettingsShared_SetInvertVerticalAxis, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetInvertVerticalAxis::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetLookSensitivityPreset
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetLookSensitivityPreset final
{
public:
	ELyraGamepadSensitivity                       NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetLookSensitivityPreset) == 0x000001, "Wrong alignment on LyraSettingsShared_SetLookSensitivityPreset");
static_assert(sizeof(LyraSettingsShared_SetLookSensitivityPreset) == 0x000001, "Wrong size on LyraSettingsShared_SetLookSensitivityPreset");
static_assert(offsetof(LyraSettingsShared_SetLookSensitivityPreset, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetLookSensitivityPreset::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetMithrilInventoryOpened
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsShared_SetMithrilInventoryOpened final
{
public:
	TArray<int64>                                 NewValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetMithrilInventoryOpened) == 0x000008, "Wrong alignment on LyraSettingsShared_SetMithrilInventoryOpened");
static_assert(sizeof(LyraSettingsShared_SetMithrilInventoryOpened) == 0x000010, "Wrong size on LyraSettingsShared_SetMithrilInventoryOpened");
static_assert(offsetof(LyraSettingsShared_SetMithrilInventoryOpened, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetMithrilInventoryOpened::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetMoonInterationTime
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_SetMoonInterationTime final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetMoonInterationTime) == 0x000004, "Wrong alignment on LyraSettingsShared_SetMoonInterationTime");
static_assert(sizeof(LyraSettingsShared_SetMoonInterationTime) == 0x000004, "Wrong size on LyraSettingsShared_SetMoonInterationTime");
static_assert(offsetof(LyraSettingsShared_SetMoonInterationTime, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetMoonInterationTime::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetMouseSensitivityNonSmooth
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsShared_SetMouseSensitivityNonSmooth final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetMouseSensitivityNonSmooth) == 0x000008, "Wrong alignment on LyraSettingsShared_SetMouseSensitivityNonSmooth");
static_assert(sizeof(LyraSettingsShared_SetMouseSensitivityNonSmooth) == 0x000008, "Wrong size on LyraSettingsShared_SetMouseSensitivityNonSmooth");
static_assert(offsetof(LyraSettingsShared_SetMouseSensitivityNonSmooth, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetMouseSensitivityNonSmooth::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetMouseTargetingMethod
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetMouseTargetingMethod final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetMouseTargetingMethod) == 0x000001, "Wrong alignment on LyraSettingsShared_SetMouseTargetingMethod");
static_assert(sizeof(LyraSettingsShared_SetMouseTargetingMethod) == 0x000001, "Wrong size on LyraSettingsShared_SetMouseTargetingMethod");
static_assert(offsetof(LyraSettingsShared_SetMouseTargetingMethod, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetMouseTargetingMethod::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetOpenOperationTips
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetOpenOperationTips final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetOpenOperationTips) == 0x000001, "Wrong alignment on LyraSettingsShared_SetOpenOperationTips");
static_assert(sizeof(LyraSettingsShared_SetOpenOperationTips) == 0x000001, "Wrong size on LyraSettingsShared_SetOpenOperationTips");
static_assert(offsetof(LyraSettingsShared_SetOpenOperationTips, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetOpenOperationTips::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetPrivateRoomInvitePermission
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_SetPrivateRoomInvitePermission final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetPrivateRoomInvitePermission) == 0x000004, "Wrong alignment on LyraSettingsShared_SetPrivateRoomInvitePermission");
static_assert(sizeof(LyraSettingsShared_SetPrivateRoomInvitePermission) == 0x000004, "Wrong size on LyraSettingsShared_SetPrivateRoomInvitePermission");
static_assert(offsetof(LyraSettingsShared_SetPrivateRoomInvitePermission, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetPrivateRoomInvitePermission::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetProcessingTaskIds
// 0x0020 (0x0020 - 0x0000)
struct LyraSettingsShared_SetProcessingTaskIds final
{
public:
	class FString                                 LocalUserKey;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TaskIds;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetProcessingTaskIds) == 0x000008, "Wrong alignment on LyraSettingsShared_SetProcessingTaskIds");
static_assert(sizeof(LyraSettingsShared_SetProcessingTaskIds) == 0x000020, "Wrong size on LyraSettingsShared_SetProcessingTaskIds");
static_assert(offsetof(LyraSettingsShared_SetProcessingTaskIds, LocalUserKey) == 0x000000, "Member 'LyraSettingsShared_SetProcessingTaskIds::LocalUserKey' has a wrong offset!");
static_assert(offsetof(LyraSettingsShared_SetProcessingTaskIds, TaskIds) == 0x000010, "Member 'LyraSettingsShared_SetProcessingTaskIds::TaskIds' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetShowAttributeRange
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetShowAttributeRange final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetShowAttributeRange) == 0x000001, "Wrong alignment on LyraSettingsShared_SetShowAttributeRange");
static_assert(sizeof(LyraSettingsShared_SetShowAttributeRange) == 0x000001, "Wrong size on LyraSettingsShared_SetShowAttributeRange");
static_assert(offsetof(LyraSettingsShared_SetShowAttributeRange, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetShowAttributeRange::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetShowWeaponOperationTips
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetShowWeaponOperationTips final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetShowWeaponOperationTips) == 0x000001, "Wrong alignment on LyraSettingsShared_SetShowWeaponOperationTips");
static_assert(sizeof(LyraSettingsShared_SetShowWeaponOperationTips) == 0x000001, "Wrong size on LyraSettingsShared_SetShowWeaponOperationTips");
static_assert(offsetof(LyraSettingsShared_SetShowWeaponOperationTips, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetShowWeaponOperationTips::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetSquatDownMethod
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetSquatDownMethod final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetSquatDownMethod) == 0x000001, "Wrong alignment on LyraSettingsShared_SetSquatDownMethod");
static_assert(sizeof(LyraSettingsShared_SetSquatDownMethod) == 0x000001, "Wrong size on LyraSettingsShared_SetSquatDownMethod");
static_assert(offsetof(LyraSettingsShared_SetSquatDownMethod, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetSquatDownMethod::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetSubtitlesEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetSubtitlesEnabled final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetSubtitlesEnabled) == 0x000001, "Wrong alignment on LyraSettingsShared_SetSubtitlesEnabled");
static_assert(sizeof(LyraSettingsShared_SetSubtitlesEnabled) == 0x000001, "Wrong size on LyraSettingsShared_SetSubtitlesEnabled");
static_assert(offsetof(LyraSettingsShared_SetSubtitlesEnabled, Value) == 0x000000, "Member 'LyraSettingsShared_SetSubtitlesEnabled::Value' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetTalents
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsShared_SetTalents final
{
public:
	TArray<int32>                                 Talents;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetTalents) == 0x000008, "Wrong alignment on LyraSettingsShared_SetTalents");
static_assert(sizeof(LyraSettingsShared_SetTalents) == 0x000010, "Wrong size on LyraSettingsShared_SetTalents");
static_assert(offsetof(LyraSettingsShared_SetTalents, Talents) == 0x000000, "Member 'LyraSettingsShared_SetTalents::Talents' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetTargetingMultiplierNonSmooth
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsShared_SetTargetingMultiplierNonSmooth final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetTargetingMultiplierNonSmooth) == 0x000008, "Wrong alignment on LyraSettingsShared_SetTargetingMultiplierNonSmooth");
static_assert(sizeof(LyraSettingsShared_SetTargetingMultiplierNonSmooth) == 0x000008, "Wrong size on LyraSettingsShared_SetTargetingMultiplierNonSmooth");
static_assert(offsetof(LyraSettingsShared_SetTargetingMultiplierNonSmooth, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetTargetingMultiplierNonSmooth::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetTriggerHapticsEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetTriggerHapticsEnabled final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetTriggerHapticsEnabled) == 0x000001, "Wrong alignment on LyraSettingsShared_SetTriggerHapticsEnabled");
static_assert(sizeof(LyraSettingsShared_SetTriggerHapticsEnabled) == 0x000001, "Wrong size on LyraSettingsShared_SetTriggerHapticsEnabled");
static_assert(offsetof(LyraSettingsShared_SetTriggerHapticsEnabled, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetTriggerHapticsEnabled::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetTriggerHapticStartPosition
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetTriggerHapticStartPosition final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetTriggerHapticStartPosition) == 0x000001, "Wrong alignment on LyraSettingsShared_SetTriggerHapticStartPosition");
static_assert(sizeof(LyraSettingsShared_SetTriggerHapticStartPosition) == 0x000001, "Wrong size on LyraSettingsShared_SetTriggerHapticStartPosition");
static_assert(offsetof(LyraSettingsShared_SetTriggerHapticStartPosition, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetTriggerHapticStartPosition::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetTriggerHapticStrength
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetTriggerHapticStrength final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetTriggerHapticStrength) == 0x000001, "Wrong alignment on LyraSettingsShared_SetTriggerHapticStrength");
static_assert(sizeof(LyraSettingsShared_SetTriggerHapticStrength) == 0x000001, "Wrong size on LyraSettingsShared_SetTriggerHapticStrength");
static_assert(offsetof(LyraSettingsShared_SetTriggerHapticStrength, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetTriggerHapticStrength::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.SetTriggerPullUsesHapticThreshold
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetTriggerPullUsesHapticThreshold final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetTriggerPullUsesHapticThreshold) == 0x000001, "Wrong alignment on LyraSettingsShared_SetTriggerPullUsesHapticThreshold");
static_assert(sizeof(LyraSettingsShared_SetTriggerPullUsesHapticThreshold) == 0x000001, "Wrong size on LyraSettingsShared_SetTriggerPullUsesHapticThreshold");
static_assert(offsetof(LyraSettingsShared_SetTriggerPullUsesHapticThreshold, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetTriggerPullUsesHapticThreshold::NewValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetAllowAudioInBackgroundSetting
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetAllowAudioInBackgroundSetting final
{
public:
	ELyraAllowBackgroundAudioSetting              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetAllowAudioInBackgroundSetting) == 0x000001, "Wrong alignment on LyraSettingsShared_GetAllowAudioInBackgroundSetting");
static_assert(sizeof(LyraSettingsShared_GetAllowAudioInBackgroundSetting) == 0x000001, "Wrong size on LyraSettingsShared_GetAllowAudioInBackgroundSetting");
static_assert(offsetof(LyraSettingsShared_GetAllowAudioInBackgroundSetting, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetAllowAudioInBackgroundSetting::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetAllowPrivateChat
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetAllowPrivateChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetAllowPrivateChat) == 0x000001, "Wrong alignment on LyraSettingsShared_GetAllowPrivateChat");
static_assert(sizeof(LyraSettingsShared_GetAllowPrivateChat) == 0x000001, "Wrong size on LyraSettingsShared_GetAllowPrivateChat");
static_assert(offsetof(LyraSettingsShared_GetAllowPrivateChat, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetAllowPrivateChat::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetAllowTeamInvite
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetAllowTeamInvite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetAllowTeamInvite) == 0x000001, "Wrong alignment on LyraSettingsShared_GetAllowTeamInvite");
static_assert(sizeof(LyraSettingsShared_GetAllowTeamInvite) == 0x000001, "Wrong size on LyraSettingsShared_GetAllowTeamInvite");
static_assert(offsetof(LyraSettingsShared_GetAllowTeamInvite, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetAllowTeamInvite::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetAttributeTalents
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsShared_GetAttributeTalents final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetAttributeTalents) == 0x000008, "Wrong alignment on LyraSettingsShared_GetAttributeTalents");
static_assert(sizeof(LyraSettingsShared_GetAttributeTalents) == 0x000010, "Wrong size on LyraSettingsShared_GetAttributeTalents");
static_assert(offsetof(LyraSettingsShared_GetAttributeTalents, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetAttributeTalents::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetChargeSkillMethod
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetChargeSkillMethod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetChargeSkillMethod) == 0x000001, "Wrong alignment on LyraSettingsShared_GetChargeSkillMethod");
static_assert(sizeof(LyraSettingsShared_GetChargeSkillMethod) == 0x000001, "Wrong size on LyraSettingsShared_GetChargeSkillMethod");
static_assert(offsetof(LyraSettingsShared_GetChargeSkillMethod, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetChargeSkillMethod::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetCheckedActivities
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsShared_GetCheckedActivities final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetCheckedActivities) == 0x000008, "Wrong alignment on LyraSettingsShared_GetCheckedActivities");
static_assert(sizeof(LyraSettingsShared_GetCheckedActivities) == 0x000010, "Wrong size on LyraSettingsShared_GetCheckedActivities");
static_assert(offsetof(LyraSettingsShared_GetCheckedActivities, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetCheckedActivities::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetColorBlindMode
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetColorBlindMode final
{
public:
	EColorBlindMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetColorBlindMode) == 0x000001, "Wrong alignment on LyraSettingsShared_GetColorBlindMode");
static_assert(sizeof(LyraSettingsShared_GetColorBlindMode) == 0x000001, "Wrong size on LyraSettingsShared_GetColorBlindMode");
static_assert(offsetof(LyraSettingsShared_GetColorBlindMode, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetColorBlindMode::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetColorBlindStrength
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_GetColorBlindStrength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetColorBlindStrength) == 0x000004, "Wrong alignment on LyraSettingsShared_GetColorBlindStrength");
static_assert(sizeof(LyraSettingsShared_GetColorBlindStrength) == 0x000004, "Wrong size on LyraSettingsShared_GetColorBlindStrength");
static_assert(offsetof(LyraSettingsShared_GetColorBlindStrength, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetColorBlindStrength::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetDailyLoginCheck
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_GetDailyLoginCheck final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetDailyLoginCheck) == 0x000004, "Wrong alignment on LyraSettingsShared_GetDailyLoginCheck");
static_assert(sizeof(LyraSettingsShared_GetDailyLoginCheck) == 0x000004, "Wrong size on LyraSettingsShared_GetDailyLoginCheck");
static_assert(offsetof(LyraSettingsShared_GetDailyLoginCheck, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetDailyLoginCheck::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetForceFeedbackEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetForceFeedbackEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetForceFeedbackEnabled) == 0x000001, "Wrong alignment on LyraSettingsShared_GetForceFeedbackEnabled");
static_assert(sizeof(LyraSettingsShared_GetForceFeedbackEnabled) == 0x000001, "Wrong size on LyraSettingsShared_GetForceFeedbackEnabled");
static_assert(offsetof(LyraSettingsShared_GetForceFeedbackEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetForceFeedbackEnabled::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetGamepadLookSensitivityPreset
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetGamepadLookSensitivityPreset final
{
public:
	ELyraGamepadSensitivity                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetGamepadLookSensitivityPreset) == 0x000001, "Wrong alignment on LyraSettingsShared_GetGamepadLookSensitivityPreset");
static_assert(sizeof(LyraSettingsShared_GetGamepadLookSensitivityPreset) == 0x000001, "Wrong size on LyraSettingsShared_GetGamepadLookSensitivityPreset");
static_assert(offsetof(LyraSettingsShared_GetGamepadLookSensitivityPreset, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetGamepadLookSensitivityPreset::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetGamepadLookStickDeadZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_GetGamepadLookStickDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetGamepadLookStickDeadZone) == 0x000004, "Wrong alignment on LyraSettingsShared_GetGamepadLookStickDeadZone");
static_assert(sizeof(LyraSettingsShared_GetGamepadLookStickDeadZone) == 0x000004, "Wrong size on LyraSettingsShared_GetGamepadLookStickDeadZone");
static_assert(offsetof(LyraSettingsShared_GetGamepadLookStickDeadZone, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetGamepadLookStickDeadZone::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetGamepadMoveStickDeadZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_GetGamepadMoveStickDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetGamepadMoveStickDeadZone) == 0x000004, "Wrong alignment on LyraSettingsShared_GetGamepadMoveStickDeadZone");
static_assert(sizeof(LyraSettingsShared_GetGamepadMoveStickDeadZone) == 0x000004, "Wrong size on LyraSettingsShared_GetGamepadMoveStickDeadZone");
static_assert(offsetof(LyraSettingsShared_GetGamepadMoveStickDeadZone, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetGamepadMoveStickDeadZone::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetGamepadTargetingSensitivityPreset
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetGamepadTargetingSensitivityPreset final
{
public:
	ELyraGamepadSensitivity                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetGamepadTargetingSensitivityPreset) == 0x000001, "Wrong alignment on LyraSettingsShared_GetGamepadTargetingSensitivityPreset");
static_assert(sizeof(LyraSettingsShared_GetGamepadTargetingSensitivityPreset) == 0x000001, "Wrong size on LyraSettingsShared_GetGamepadTargetingSensitivityPreset");
static_assert(offsetof(LyraSettingsShared_GetGamepadTargetingSensitivityPreset, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetGamepadTargetingSensitivityPreset::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetInventoryAutoQuality
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsShared_GetInventoryAutoQuality final
{
public:
	TArray<ETgfEquipQuality>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetInventoryAutoQuality) == 0x000008, "Wrong alignment on LyraSettingsShared_GetInventoryAutoQuality");
static_assert(sizeof(LyraSettingsShared_GetInventoryAutoQuality) == 0x000010, "Wrong size on LyraSettingsShared_GetInventoryAutoQuality");
static_assert(offsetof(LyraSettingsShared_GetInventoryAutoQuality, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetInventoryAutoQuality::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetInventoryOpened
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsShared_GetInventoryOpened final
{
public:
	TArray<int64>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetInventoryOpened) == 0x000008, "Wrong alignment on LyraSettingsShared_GetInventoryOpened");
static_assert(sizeof(LyraSettingsShared_GetInventoryOpened) == 0x000010, "Wrong size on LyraSettingsShared_GetInventoryOpened");
static_assert(offsetof(LyraSettingsShared_GetInventoryOpened, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetInventoryOpened::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetInventorySee
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetInventorySee final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetInventorySee) == 0x000001, "Wrong alignment on LyraSettingsShared_GetInventorySee");
static_assert(sizeof(LyraSettingsShared_GetInventorySee) == 0x000001, "Wrong size on LyraSettingsShared_GetInventorySee");
static_assert(offsetof(LyraSettingsShared_GetInventorySee, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetInventorySee::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetInventoryTalentTips
// 0x0018 (0x0018 - 0x0000)
struct LyraSettingsShared_GetInventoryTalentTips final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetInventoryTalentTips) == 0x000008, "Wrong alignment on LyraSettingsShared_GetInventoryTalentTips");
static_assert(sizeof(LyraSettingsShared_GetInventoryTalentTips) == 0x000018, "Wrong size on LyraSettingsShared_GetInventoryTalentTips");
static_assert(offsetof(LyraSettingsShared_GetInventoryTalentTips, Key) == 0x000000, "Member 'LyraSettingsShared_GetInventoryTalentTips::Key' has a wrong offset!");
static_assert(offsetof(LyraSettingsShared_GetInventoryTalentTips, ReturnValue) == 0x000008, "Member 'LyraSettingsShared_GetInventoryTalentTips::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetInvertHorizontalAxis
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetInvertHorizontalAxis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetInvertHorizontalAxis) == 0x000001, "Wrong alignment on LyraSettingsShared_GetInvertHorizontalAxis");
static_assert(sizeof(LyraSettingsShared_GetInvertHorizontalAxis) == 0x000001, "Wrong size on LyraSettingsShared_GetInvertHorizontalAxis");
static_assert(offsetof(LyraSettingsShared_GetInvertHorizontalAxis, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetInvertHorizontalAxis::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetInvertVerticalAxis
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetInvertVerticalAxis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetInvertVerticalAxis) == 0x000001, "Wrong alignment on LyraSettingsShared_GetInvertVerticalAxis");
static_assert(sizeof(LyraSettingsShared_GetInvertVerticalAxis) == 0x000001, "Wrong size on LyraSettingsShared_GetInvertVerticalAxis");
static_assert(offsetof(LyraSettingsShared_GetInvertVerticalAxis, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetInvertVerticalAxis::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetMithrilInventoryOpened
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsShared_GetMithrilInventoryOpened final
{
public:
	TArray<int64>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetMithrilInventoryOpened) == 0x000008, "Wrong alignment on LyraSettingsShared_GetMithrilInventoryOpened");
static_assert(sizeof(LyraSettingsShared_GetMithrilInventoryOpened) == 0x000010, "Wrong size on LyraSettingsShared_GetMithrilInventoryOpened");
static_assert(offsetof(LyraSettingsShared_GetMithrilInventoryOpened, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetMithrilInventoryOpened::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetMoonInterationTime
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_GetMoonInterationTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetMoonInterationTime) == 0x000004, "Wrong alignment on LyraSettingsShared_GetMoonInterationTime");
static_assert(sizeof(LyraSettingsShared_GetMoonInterationTime) == 0x000004, "Wrong size on LyraSettingsShared_GetMoonInterationTime");
static_assert(offsetof(LyraSettingsShared_GetMoonInterationTime, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetMoonInterationTime::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetMouseSensitivityNonSmooth
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsShared_GetMouseSensitivityNonSmooth final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetMouseSensitivityNonSmooth) == 0x000008, "Wrong alignment on LyraSettingsShared_GetMouseSensitivityNonSmooth");
static_assert(sizeof(LyraSettingsShared_GetMouseSensitivityNonSmooth) == 0x000008, "Wrong size on LyraSettingsShared_GetMouseSensitivityNonSmooth");
static_assert(offsetof(LyraSettingsShared_GetMouseSensitivityNonSmooth, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetMouseSensitivityNonSmooth::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetMouseTargetingMethod
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetMouseTargetingMethod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetMouseTargetingMethod) == 0x000001, "Wrong alignment on LyraSettingsShared_GetMouseTargetingMethod");
static_assert(sizeof(LyraSettingsShared_GetMouseTargetingMethod) == 0x000001, "Wrong size on LyraSettingsShared_GetMouseTargetingMethod");
static_assert(offsetof(LyraSettingsShared_GetMouseTargetingMethod, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetMouseTargetingMethod::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetOpenOperationTips
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetOpenOperationTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetOpenOperationTips) == 0x000001, "Wrong alignment on LyraSettingsShared_GetOpenOperationTips");
static_assert(sizeof(LyraSettingsShared_GetOpenOperationTips) == 0x000001, "Wrong size on LyraSettingsShared_GetOpenOperationTips");
static_assert(offsetof(LyraSettingsShared_GetOpenOperationTips, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetOpenOperationTips::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetPrivateRoomInvitePermission
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetPrivateRoomInvitePermission final
{
public:
	ESocialPermission                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetPrivateRoomInvitePermission) == 0x000001, "Wrong alignment on LyraSettingsShared_GetPrivateRoomInvitePermission");
static_assert(sizeof(LyraSettingsShared_GetPrivateRoomInvitePermission) == 0x000001, "Wrong size on LyraSettingsShared_GetPrivateRoomInvitePermission");
static_assert(offsetof(LyraSettingsShared_GetPrivateRoomInvitePermission, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetPrivateRoomInvitePermission::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetPrivateRoomInvitePermissionIndex
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_GetPrivateRoomInvitePermissionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetPrivateRoomInvitePermissionIndex) == 0x000004, "Wrong alignment on LyraSettingsShared_GetPrivateRoomInvitePermissionIndex");
static_assert(sizeof(LyraSettingsShared_GetPrivateRoomInvitePermissionIndex) == 0x000004, "Wrong size on LyraSettingsShared_GetPrivateRoomInvitePermissionIndex");
static_assert(offsetof(LyraSettingsShared_GetPrivateRoomInvitePermissionIndex, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetPrivateRoomInvitePermissionIndex::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetProcessingTaskIds
// 0x0020 (0x0020 - 0x0000)
struct LyraSettingsShared_GetProcessingTaskIds final
{
public:
	class FString                                 LocalUserKey;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetProcessingTaskIds) == 0x000008, "Wrong alignment on LyraSettingsShared_GetProcessingTaskIds");
static_assert(sizeof(LyraSettingsShared_GetProcessingTaskIds) == 0x000020, "Wrong size on LyraSettingsShared_GetProcessingTaskIds");
static_assert(offsetof(LyraSettingsShared_GetProcessingTaskIds, LocalUserKey) == 0x000000, "Member 'LyraSettingsShared_GetProcessingTaskIds::LocalUserKey' has a wrong offset!");
static_assert(offsetof(LyraSettingsShared_GetProcessingTaskIds, ReturnValue) == 0x000010, "Member 'LyraSettingsShared_GetProcessingTaskIds::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetShowAttributeRange
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetShowAttributeRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetShowAttributeRange) == 0x000001, "Wrong alignment on LyraSettingsShared_GetShowAttributeRange");
static_assert(sizeof(LyraSettingsShared_GetShowAttributeRange) == 0x000001, "Wrong size on LyraSettingsShared_GetShowAttributeRange");
static_assert(offsetof(LyraSettingsShared_GetShowAttributeRange, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetShowAttributeRange::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetShowWeaponOperationTips
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetShowWeaponOperationTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetShowWeaponOperationTips) == 0x000001, "Wrong alignment on LyraSettingsShared_GetShowWeaponOperationTips");
static_assert(sizeof(LyraSettingsShared_GetShowWeaponOperationTips) == 0x000001, "Wrong size on LyraSettingsShared_GetShowWeaponOperationTips");
static_assert(offsetof(LyraSettingsShared_GetShowWeaponOperationTips, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetShowWeaponOperationTips::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetSquatDownMethod
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetSquatDownMethod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetSquatDownMethod) == 0x000001, "Wrong alignment on LyraSettingsShared_GetSquatDownMethod");
static_assert(sizeof(LyraSettingsShared_GetSquatDownMethod) == 0x000001, "Wrong size on LyraSettingsShared_GetSquatDownMethod");
static_assert(offsetof(LyraSettingsShared_GetSquatDownMethod, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetSquatDownMethod::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetSubtitlesEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetSubtitlesEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetSubtitlesEnabled) == 0x000001, "Wrong alignment on LyraSettingsShared_GetSubtitlesEnabled");
static_assert(sizeof(LyraSettingsShared_GetSubtitlesEnabled) == 0x000001, "Wrong size on LyraSettingsShared_GetSubtitlesEnabled");
static_assert(offsetof(LyraSettingsShared_GetSubtitlesEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetSubtitlesEnabled::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetTargetingMultiplierNonSmooth
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsShared_GetTargetingMultiplierNonSmooth final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetTargetingMultiplierNonSmooth) == 0x000008, "Wrong alignment on LyraSettingsShared_GetTargetingMultiplierNonSmooth");
static_assert(sizeof(LyraSettingsShared_GetTargetingMultiplierNonSmooth) == 0x000008, "Wrong size on LyraSettingsShared_GetTargetingMultiplierNonSmooth");
static_assert(offsetof(LyraSettingsShared_GetTargetingMultiplierNonSmooth, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetTargetingMultiplierNonSmooth::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetTriggerHapticsEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetTriggerHapticsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetTriggerHapticsEnabled) == 0x000001, "Wrong alignment on LyraSettingsShared_GetTriggerHapticsEnabled");
static_assert(sizeof(LyraSettingsShared_GetTriggerHapticsEnabled) == 0x000001, "Wrong size on LyraSettingsShared_GetTriggerHapticsEnabled");
static_assert(offsetof(LyraSettingsShared_GetTriggerHapticsEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetTriggerHapticsEnabled::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetTriggerHapticStartPosition
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetTriggerHapticStartPosition final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetTriggerHapticStartPosition) == 0x000001, "Wrong alignment on LyraSettingsShared_GetTriggerHapticStartPosition");
static_assert(sizeof(LyraSettingsShared_GetTriggerHapticStartPosition) == 0x000001, "Wrong size on LyraSettingsShared_GetTriggerHapticStartPosition");
static_assert(offsetof(LyraSettingsShared_GetTriggerHapticStartPosition, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetTriggerHapticStartPosition::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetTriggerHapticStrength
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetTriggerHapticStrength final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetTriggerHapticStrength) == 0x000001, "Wrong alignment on LyraSettingsShared_GetTriggerHapticStrength");
static_assert(sizeof(LyraSettingsShared_GetTriggerHapticStrength) == 0x000001, "Wrong size on LyraSettingsShared_GetTriggerHapticStrength");
static_assert(offsetof(LyraSettingsShared_GetTriggerHapticStrength, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetTriggerHapticStrength::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSettingsShared.GetTriggerPullUsesHapticThreshold
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetTriggerPullUsesHapticThreshold final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetTriggerPullUsesHapticThreshold) == 0x000001, "Wrong alignment on LyraSettingsShared_GetTriggerPullUsesHapticThreshold");
static_assert(sizeof(LyraSettingsShared_GetTriggerPullUsesHapticThreshold) == 0x000001, "Wrong size on LyraSettingsShared_GetTriggerPullUsesHapticThreshold");
static_assert(offsetof(LyraSettingsShared_GetTriggerPullUsesHapticThreshold, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetTriggerPullUsesHapticThreshold::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfActorStatisticComponent.AddFloatStat
// 0x0010 (0x0010 - 0x0000)
struct TgfActorStatisticComponent_AddFloatStat final
{
public:
	ETgfActorFloatStatisticType                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfActorStatisticComponent_AddFloatStat) == 0x000008, "Wrong alignment on TgfActorStatisticComponent_AddFloatStat");
static_assert(sizeof(TgfActorStatisticComponent_AddFloatStat) == 0x000010, "Wrong size on TgfActorStatisticComponent_AddFloatStat");
static_assert(offsetof(TgfActorStatisticComponent_AddFloatStat, Type) == 0x000000, "Member 'TgfActorStatisticComponent_AddFloatStat::Type' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_AddFloatStat, Value) == 0x000008, "Member 'TgfActorStatisticComponent_AddFloatStat::Value' has a wrong offset!");

// Function LyraGame.TgfActorStatisticComponent.AddIntStat
// 0x000C (0x000C - 0x0000)
struct TgfActorStatisticComponent_AddIntStat final
{
public:
	ETgfActorIntStatisticType                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TypeId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfActorStatisticComponent_AddIntStat) == 0x000004, "Wrong alignment on TgfActorStatisticComponent_AddIntStat");
static_assert(sizeof(TgfActorStatisticComponent_AddIntStat) == 0x00000C, "Wrong size on TgfActorStatisticComponent_AddIntStat");
static_assert(offsetof(TgfActorStatisticComponent_AddIntStat, Type) == 0x000000, "Member 'TgfActorStatisticComponent_AddIntStat::Type' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_AddIntStat, TypeId) == 0x000004, "Member 'TgfActorStatisticComponent_AddIntStat::TypeId' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_AddIntStat, Value) == 0x000008, "Member 'TgfActorStatisticComponent_AddIntStat::Value' has a wrong offset!");

// Function LyraGame.TgfActorStatisticComponent.AddRelationIntStat
// 0x0020 (0x0020 - 0x0000)
struct TgfActorStatisticComponent_AddRelationIntStat final
{
public:
	ETgfActorRelationStatisticType                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OpenID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfActorStatisticComponent_AddRelationIntStat) == 0x000008, "Wrong alignment on TgfActorStatisticComponent_AddRelationIntStat");
static_assert(sizeof(TgfActorStatisticComponent_AddRelationIntStat) == 0x000020, "Wrong size on TgfActorStatisticComponent_AddRelationIntStat");
static_assert(offsetof(TgfActorStatisticComponent_AddRelationIntStat, Type) == 0x000000, "Member 'TgfActorStatisticComponent_AddRelationIntStat::Type' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_AddRelationIntStat, OpenID) == 0x000008, "Member 'TgfActorStatisticComponent_AddRelationIntStat::OpenID' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_AddRelationIntStat, Value) == 0x000018, "Member 'TgfActorStatisticComponent_AddRelationIntStat::Value' has a wrong offset!");

// Function LyraGame.TgfActorStatisticComponent.FillOssLogPlayerInteraction
// 0x0038 (0x0038 - 0x0000)
struct TgfActorStatisticComponent_FillOssLogPlayerInteraction final
{
public:
	class ALyraCharacter*                         SourceCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InHandleTargetName;                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InHandleLocation;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfActorStatisticComponent_FillOssLogPlayerInteraction) == 0x000008, "Wrong alignment on TgfActorStatisticComponent_FillOssLogPlayerInteraction");
static_assert(sizeof(TgfActorStatisticComponent_FillOssLogPlayerInteraction) == 0x000038, "Wrong size on TgfActorStatisticComponent_FillOssLogPlayerInteraction");
static_assert(offsetof(TgfActorStatisticComponent_FillOssLogPlayerInteraction, SourceCharacter) == 0x000000, "Member 'TgfActorStatisticComponent_FillOssLogPlayerInteraction::SourceCharacter' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_FillOssLogPlayerInteraction, InHandleTargetName) == 0x000008, "Member 'TgfActorStatisticComponent_FillOssLogPlayerInteraction::InHandleTargetName' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_FillOssLogPlayerInteraction, InHandleLocation) == 0x000018, "Member 'TgfActorStatisticComponent_FillOssLogPlayerInteraction::InHandleLocation' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_FillOssLogPlayerInteraction, ItemId) == 0x000030, "Member 'TgfActorStatisticComponent_FillOssLogPlayerInteraction::ItemId' has a wrong offset!");

// Function LyraGame.TgfActorStatisticComponent.GetFloatStat
// 0x0010 (0x0010 - 0x0000)
struct TgfActorStatisticComponent_GetFloatStat final
{
public:
	ETgfActorFloatStatisticType                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfActorStatisticComponent_GetFloatStat) == 0x000008, "Wrong alignment on TgfActorStatisticComponent_GetFloatStat");
static_assert(sizeof(TgfActorStatisticComponent_GetFloatStat) == 0x000010, "Wrong size on TgfActorStatisticComponent_GetFloatStat");
static_assert(offsetof(TgfActorStatisticComponent_GetFloatStat, Type) == 0x000000, "Member 'TgfActorStatisticComponent_GetFloatStat::Type' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_GetFloatStat, ReturnValue) == 0x000008, "Member 'TgfActorStatisticComponent_GetFloatStat::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfActorStatisticComponent.GetIntStat
// 0x000C (0x000C - 0x0000)
struct TgfActorStatisticComponent_GetIntStat final
{
public:
	ETgfActorIntStatisticType                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TypeId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfActorStatisticComponent_GetIntStat) == 0x000004, "Wrong alignment on TgfActorStatisticComponent_GetIntStat");
static_assert(sizeof(TgfActorStatisticComponent_GetIntStat) == 0x00000C, "Wrong size on TgfActorStatisticComponent_GetIntStat");
static_assert(offsetof(TgfActorStatisticComponent_GetIntStat, Type) == 0x000000, "Member 'TgfActorStatisticComponent_GetIntStat::Type' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_GetIntStat, TypeId) == 0x000004, "Member 'TgfActorStatisticComponent_GetIntStat::TypeId' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_GetIntStat, ReturnValue) == 0x000008, "Member 'TgfActorStatisticComponent_GetIntStat::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfActorStatisticComponent.GetRelationIntStat
// 0x0020 (0x0020 - 0x0000)
struct TgfActorStatisticComponent_GetRelationIntStat final
{
public:
	ETgfActorRelationStatisticType                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OpenID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfActorStatisticComponent_GetRelationIntStat) == 0x000008, "Wrong alignment on TgfActorStatisticComponent_GetRelationIntStat");
static_assert(sizeof(TgfActorStatisticComponent_GetRelationIntStat) == 0x000020, "Wrong size on TgfActorStatisticComponent_GetRelationIntStat");
static_assert(offsetof(TgfActorStatisticComponent_GetRelationIntStat, Type) == 0x000000, "Member 'TgfActorStatisticComponent_GetRelationIntStat::Type' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_GetRelationIntStat, OpenID) == 0x000008, "Member 'TgfActorStatisticComponent_GetRelationIntStat::OpenID' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_GetRelationIntStat, ReturnValue) == 0x000018, "Member 'TgfActorStatisticComponent_GetRelationIntStat::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfActorStatisticComponent.SetFloatStat
// 0x0010 (0x0010 - 0x0000)
struct TgfActorStatisticComponent_SetFloatStat final
{
public:
	ETgfActorFloatStatisticType                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfActorStatisticComponent_SetFloatStat) == 0x000008, "Wrong alignment on TgfActorStatisticComponent_SetFloatStat");
static_assert(sizeof(TgfActorStatisticComponent_SetFloatStat) == 0x000010, "Wrong size on TgfActorStatisticComponent_SetFloatStat");
static_assert(offsetof(TgfActorStatisticComponent_SetFloatStat, Type) == 0x000000, "Member 'TgfActorStatisticComponent_SetFloatStat::Type' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_SetFloatStat, Value) == 0x000008, "Member 'TgfActorStatisticComponent_SetFloatStat::Value' has a wrong offset!");

// Function LyraGame.TgfActorStatisticComponent.SetIntStat
// 0x000C (0x000C - 0x0000)
struct TgfActorStatisticComponent_SetIntStat final
{
public:
	ETgfActorIntStatisticType                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TypeId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfActorStatisticComponent_SetIntStat) == 0x000004, "Wrong alignment on TgfActorStatisticComponent_SetIntStat");
static_assert(sizeof(TgfActorStatisticComponent_SetIntStat) == 0x00000C, "Wrong size on TgfActorStatisticComponent_SetIntStat");
static_assert(offsetof(TgfActorStatisticComponent_SetIntStat, Type) == 0x000000, "Member 'TgfActorStatisticComponent_SetIntStat::Type' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_SetIntStat, TypeId) == 0x000004, "Member 'TgfActorStatisticComponent_SetIntStat::TypeId' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_SetIntStat, Value) == 0x000008, "Member 'TgfActorStatisticComponent_SetIntStat::Value' has a wrong offset!");

// Function LyraGame.TgfActorStatisticComponent.SetRelationIntStat
// 0x0020 (0x0020 - 0x0000)
struct TgfActorStatisticComponent_SetRelationIntStat final
{
public:
	ETgfActorRelationStatisticType                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OpenID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TgfActorStatisticComponent_SetRelationIntStat) == 0x000008, "Wrong alignment on TgfActorStatisticComponent_SetRelationIntStat");
static_assert(sizeof(TgfActorStatisticComponent_SetRelationIntStat) == 0x000020, "Wrong size on TgfActorStatisticComponent_SetRelationIntStat");
static_assert(offsetof(TgfActorStatisticComponent_SetRelationIntStat, Type) == 0x000000, "Member 'TgfActorStatisticComponent_SetRelationIntStat::Type' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_SetRelationIntStat, OpenID) == 0x000008, "Member 'TgfActorStatisticComponent_SetRelationIntStat::OpenID' has a wrong offset!");
static_assert(offsetof(TgfActorStatisticComponent_SetRelationIntStat, Value) == 0x000018, "Member 'TgfActorStatisticComponent_SetRelationIntStat::Value' has a wrong offset!");

// Function LyraGame.LyraActorUtilities.SwitchOnNetMode
// 0x0010 (0x0010 - 0x0000)
struct LyraActorUtilities_SwitchOnNetMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintExposedNetMode                      ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraActorUtilities_SwitchOnNetMode) == 0x000008, "Wrong alignment on LyraActorUtilities_SwitchOnNetMode");
static_assert(sizeof(LyraActorUtilities_SwitchOnNetMode) == 0x000010, "Wrong size on LyraActorUtilities_SwitchOnNetMode");
static_assert(offsetof(LyraActorUtilities_SwitchOnNetMode, WorldContextObject) == 0x000000, "Member 'LyraActorUtilities_SwitchOnNetMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LyraActorUtilities_SwitchOnNetMode, ReturnValue) == 0x000008, "Member 'LyraActorUtilities_SwitchOnNetMode::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSystemStatics.FindComponentsByClass
// 0x0028 (0x0028 - 0x0000)
struct LyraSystemStatics_FindComponentsByClass final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeChildActors;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UActorComponent*>                ReturnValue;                                       // 0x0018(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSystemStatics_FindComponentsByClass) == 0x000008, "Wrong alignment on LyraSystemStatics_FindComponentsByClass");
static_assert(sizeof(LyraSystemStatics_FindComponentsByClass) == 0x000028, "Wrong size on LyraSystemStatics_FindComponentsByClass");
static_assert(offsetof(LyraSystemStatics_FindComponentsByClass, TargetActor) == 0x000000, "Member 'LyraSystemStatics_FindComponentsByClass::TargetActor' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_FindComponentsByClass, ComponentClass) == 0x000008, "Member 'LyraSystemStatics_FindComponentsByClass::ComponentClass' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_FindComponentsByClass, bIncludeChildActors) == 0x000010, "Member 'LyraSystemStatics_FindComponentsByClass::bIncludeChildActors' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_FindComponentsByClass, ReturnValue) == 0x000018, "Member 'LyraSystemStatics_FindComponentsByClass::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSystemStatics.GetPrimaryAssetIdFromUserFacingExperienceName
// 0x0020 (0x0020 - 0x0000)
struct LyraSystemStatics_GetPrimaryAssetIdFromUserFacingExperienceName final
{
public:
	class FString                                 AdvertisedExperienceID;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSystemStatics_GetPrimaryAssetIdFromUserFacingExperienceName) == 0x000008, "Wrong alignment on LyraSystemStatics_GetPrimaryAssetIdFromUserFacingExperienceName");
static_assert(sizeof(LyraSystemStatics_GetPrimaryAssetIdFromUserFacingExperienceName) == 0x000020, "Wrong size on LyraSystemStatics_GetPrimaryAssetIdFromUserFacingExperienceName");
static_assert(offsetof(LyraSystemStatics_GetPrimaryAssetIdFromUserFacingExperienceName, AdvertisedExperienceID) == 0x000000, "Member 'LyraSystemStatics_GetPrimaryAssetIdFromUserFacingExperienceName::AdvertisedExperienceID' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_GetPrimaryAssetIdFromUserFacingExperienceName, ReturnValue) == 0x000010, "Member 'LyraSystemStatics_GetPrimaryAssetIdFromUserFacingExperienceName::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSystemStatics.GetTypedSoftObjectReferenceFromPrimaryAssetId
// 0x0048 (0x0048 - 0x0000)
struct LyraSystemStatics_GetTypedSoftObjectReferenceFromPrimaryAssetId final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ExpectedAssetType;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 ReturnValue;                                       // 0x0018(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSystemStatics_GetTypedSoftObjectReferenceFromPrimaryAssetId) == 0x000008, "Wrong alignment on LyraSystemStatics_GetTypedSoftObjectReferenceFromPrimaryAssetId");
static_assert(sizeof(LyraSystemStatics_GetTypedSoftObjectReferenceFromPrimaryAssetId) == 0x000048, "Wrong size on LyraSystemStatics_GetTypedSoftObjectReferenceFromPrimaryAssetId");
static_assert(offsetof(LyraSystemStatics_GetTypedSoftObjectReferenceFromPrimaryAssetId, PrimaryAssetId) == 0x000000, "Member 'LyraSystemStatics_GetTypedSoftObjectReferenceFromPrimaryAssetId::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_GetTypedSoftObjectReferenceFromPrimaryAssetId, ExpectedAssetType) == 0x000010, "Member 'LyraSystemStatics_GetTypedSoftObjectReferenceFromPrimaryAssetId::ExpectedAssetType' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_GetTypedSoftObjectReferenceFromPrimaryAssetId, ReturnValue) == 0x000018, "Member 'LyraSystemStatics_GetTypedSoftObjectReferenceFromPrimaryAssetId::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraSystemStatics.PlayNextGame
// 0x0008 (0x0008 - 0x0000)
struct LyraSystemStatics_PlayNextGame final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSystemStatics_PlayNextGame) == 0x000008, "Wrong alignment on LyraSystemStatics_PlayNextGame");
static_assert(sizeof(LyraSystemStatics_PlayNextGame) == 0x000008, "Wrong size on LyraSystemStatics_PlayNextGame");
static_assert(offsetof(LyraSystemStatics_PlayNextGame, WorldContextObject) == 0x000000, "Member 'LyraSystemStatics_PlayNextGame::WorldContextObject' has a wrong offset!");

// Function LyraGame.LyraSystemStatics.SetColorParameterValueOnAllMeshComponents
// 0x0028 (0x0028 - 0x0000)
struct LyraSystemStatics_SetColorParameterValueOnAllMeshComponents final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParameterValue;                                    // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeChildActors;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraSystemStatics_SetColorParameterValueOnAllMeshComponents) == 0x000008, "Wrong alignment on LyraSystemStatics_SetColorParameterValueOnAllMeshComponents");
static_assert(sizeof(LyraSystemStatics_SetColorParameterValueOnAllMeshComponents) == 0x000028, "Wrong size on LyraSystemStatics_SetColorParameterValueOnAllMeshComponents");
static_assert(offsetof(LyraSystemStatics_SetColorParameterValueOnAllMeshComponents, TargetActor) == 0x000000, "Member 'LyraSystemStatics_SetColorParameterValueOnAllMeshComponents::TargetActor' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_SetColorParameterValueOnAllMeshComponents, ParameterName) == 0x000008, "Member 'LyraSystemStatics_SetColorParameterValueOnAllMeshComponents::ParameterName' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_SetColorParameterValueOnAllMeshComponents, ParameterValue) == 0x000010, "Member 'LyraSystemStatics_SetColorParameterValueOnAllMeshComponents::ParameterValue' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_SetColorParameterValueOnAllMeshComponents, bIncludeChildActors) == 0x000020, "Member 'LyraSystemStatics_SetColorParameterValueOnAllMeshComponents::bIncludeChildActors' has a wrong offset!");

// Function LyraGame.LyraSystemStatics.SetScalarParameterValueOnAllMeshComponents
// 0x0018 (0x0018 - 0x0000)
struct LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParameterValue;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeChildActors;                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents) == 0x000008, "Wrong alignment on LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents");
static_assert(sizeof(LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents) == 0x000018, "Wrong size on LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents");
static_assert(offsetof(LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents, TargetActor) == 0x000000, "Member 'LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents::TargetActor' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents, ParameterName) == 0x000008, "Member 'LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents::ParameterName' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents, ParameterValue) == 0x000010, "Member 'LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents::ParameterValue' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents, bIncludeChildActors) == 0x000014, "Member 'LyraSystemStatics_SetScalarParameterValueOnAllMeshComponents::bIncludeChildActors' has a wrong offset!");

// Function LyraGame.LyraSystemStatics.SetVectorParameterValueOnAllMeshComponents
// 0x0030 (0x0030 - 0x0000)
struct LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ParameterValue;                                    // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeChildActors;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents) == 0x000008, "Wrong alignment on LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents");
static_assert(sizeof(LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents) == 0x000030, "Wrong size on LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents");
static_assert(offsetof(LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents, TargetActor) == 0x000000, "Member 'LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents::TargetActor' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents, ParameterName) == 0x000008, "Member 'LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents::ParameterName' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents, ParameterValue) == 0x000010, "Member 'LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents::ParameterValue' has a wrong offset!");
static_assert(offsetof(LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents, bIncludeChildActors) == 0x000028, "Member 'LyraSystemStatics_SetVectorParameterValueOnAllMeshComponents::bIncludeChildActors' has a wrong offset!");

// Function LyraGame.AsyncAction_ObserveTeam.ObserveTeam
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_ObserveTeam_ObserveTeam final
{
public:
	class UObject*                                TeamAgent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_ObserveTeam*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_ObserveTeam_ObserveTeam) == 0x000008, "Wrong alignment on AsyncAction_ObserveTeam_ObserveTeam");
static_assert(sizeof(AsyncAction_ObserveTeam_ObserveTeam) == 0x000010, "Wrong size on AsyncAction_ObserveTeam_ObserveTeam");
static_assert(offsetof(AsyncAction_ObserveTeam_ObserveTeam, TeamAgent) == 0x000000, "Member 'AsyncAction_ObserveTeam_ObserveTeam::TeamAgent' has a wrong offset!");
static_assert(offsetof(AsyncAction_ObserveTeam_ObserveTeam, ReturnValue) == 0x000008, "Member 'AsyncAction_ObserveTeam_ObserveTeam::ReturnValue' has a wrong offset!");

// Function LyraGame.AsyncAction_ObserveTeam.OnWatchedAgentChangedTeam
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_ObserveTeam_OnWatchedAgentChangedTeam final
{
public:
	class UObject*                                TeamAgent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldTeam;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeam;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_ObserveTeam_OnWatchedAgentChangedTeam) == 0x000008, "Wrong alignment on AsyncAction_ObserveTeam_OnWatchedAgentChangedTeam");
static_assert(sizeof(AsyncAction_ObserveTeam_OnWatchedAgentChangedTeam) == 0x000010, "Wrong size on AsyncAction_ObserveTeam_OnWatchedAgentChangedTeam");
static_assert(offsetof(AsyncAction_ObserveTeam_OnWatchedAgentChangedTeam, TeamAgent) == 0x000000, "Member 'AsyncAction_ObserveTeam_OnWatchedAgentChangedTeam::TeamAgent' has a wrong offset!");
static_assert(offsetof(AsyncAction_ObserveTeam_OnWatchedAgentChangedTeam, OldTeam) == 0x000008, "Member 'AsyncAction_ObserveTeam_OnWatchedAgentChangedTeam::OldTeam' has a wrong offset!");
static_assert(offsetof(AsyncAction_ObserveTeam_OnWatchedAgentChangedTeam, NewTeam) == 0x00000C, "Member 'AsyncAction_ObserveTeam_OnWatchedAgentChangedTeam::NewTeam' has a wrong offset!");

// Function LyraGame.LyraTeamCheats.SetTeam
// 0x0004 (0x0004 - 0x0000)
struct LyraTeamCheats_SetTeam final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamCheats_SetTeam) == 0x000004, "Wrong alignment on LyraTeamCheats_SetTeam");
static_assert(sizeof(LyraTeamCheats_SetTeam) == 0x000004, "Wrong size on LyraTeamCheats_SetTeam");
static_assert(offsetof(LyraTeamCheats_SetTeam, TeamId) == 0x000000, "Member 'LyraTeamCheats_SetTeam::TeamId' has a wrong offset!");

// Function LyraGame.LyraTeamDisplayAsset.ApplyToActor
// 0x0010 (0x0010 - 0x0000)
struct LyraTeamDisplayAsset_ApplyToActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeChildActors;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTeamDisplayAsset_ApplyToActor) == 0x000008, "Wrong alignment on LyraTeamDisplayAsset_ApplyToActor");
static_assert(sizeof(LyraTeamDisplayAsset_ApplyToActor) == 0x000010, "Wrong size on LyraTeamDisplayAsset_ApplyToActor");
static_assert(offsetof(LyraTeamDisplayAsset_ApplyToActor, TargetActor) == 0x000000, "Member 'LyraTeamDisplayAsset_ApplyToActor::TargetActor' has a wrong offset!");
static_assert(offsetof(LyraTeamDisplayAsset_ApplyToActor, bIncludeChildActors) == 0x000008, "Member 'LyraTeamDisplayAsset_ApplyToActor::bIncludeChildActors' has a wrong offset!");

// Function LyraGame.LyraTeamDisplayAsset.ApplyToMaterial
// 0x0008 (0x0008 - 0x0000)
struct LyraTeamDisplayAsset_ApplyToMaterial final
{
public:
	class UMaterialInstanceDynamic*               Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamDisplayAsset_ApplyToMaterial) == 0x000008, "Wrong alignment on LyraTeamDisplayAsset_ApplyToMaterial");
static_assert(sizeof(LyraTeamDisplayAsset_ApplyToMaterial) == 0x000008, "Wrong size on LyraTeamDisplayAsset_ApplyToMaterial");
static_assert(offsetof(LyraTeamDisplayAsset_ApplyToMaterial, Material) == 0x000000, "Member 'LyraTeamDisplayAsset_ApplyToMaterial::Material' has a wrong offset!");

// Function LyraGame.LyraTeamDisplayAsset.ApplyToMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraTeamDisplayAsset_ApplyToMeshComponent final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamDisplayAsset_ApplyToMeshComponent) == 0x000008, "Wrong alignment on LyraTeamDisplayAsset_ApplyToMeshComponent");
static_assert(sizeof(LyraTeamDisplayAsset_ApplyToMeshComponent) == 0x000008, "Wrong size on LyraTeamDisplayAsset_ApplyToMeshComponent");
static_assert(offsetof(LyraTeamDisplayAsset_ApplyToMeshComponent, MeshComponent) == 0x000000, "Member 'LyraTeamDisplayAsset_ApplyToMeshComponent::MeshComponent' has a wrong offset!");

// Function LyraGame.LyraTeamDisplayAsset.ApplyToNiagaraComponent
// 0x0008 (0x0008 - 0x0000)
struct LyraTeamDisplayAsset_ApplyToNiagaraComponent final
{
public:
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamDisplayAsset_ApplyToNiagaraComponent) == 0x000008, "Wrong alignment on LyraTeamDisplayAsset_ApplyToNiagaraComponent");
static_assert(sizeof(LyraTeamDisplayAsset_ApplyToNiagaraComponent) == 0x000008, "Wrong size on LyraTeamDisplayAsset_ApplyToNiagaraComponent");
static_assert(offsetof(LyraTeamDisplayAsset_ApplyToNiagaraComponent, NiagaraComponent) == 0x000000, "Member 'LyraTeamDisplayAsset_ApplyToNiagaraComponent::NiagaraComponent' has a wrong offset!");

// Function LyraGame.LyraTeamStatics.FindTeamFromObject
// 0x0020 (0x0020 - 0x0000)
struct LyraTeamStatics_FindTeamFromObject final
{
public:
	const class UObject*                          Agent;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPartOfTeam;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamId;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraTeamDisplayAsset*                  DisplayAsset;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLogIfNotSet;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTeamStatics_FindTeamFromObject) == 0x000008, "Wrong alignment on LyraTeamStatics_FindTeamFromObject");
static_assert(sizeof(LyraTeamStatics_FindTeamFromObject) == 0x000020, "Wrong size on LyraTeamStatics_FindTeamFromObject");
static_assert(offsetof(LyraTeamStatics_FindTeamFromObject, Agent) == 0x000000, "Member 'LyraTeamStatics_FindTeamFromObject::Agent' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_FindTeamFromObject, bIsPartOfTeam) == 0x000008, "Member 'LyraTeamStatics_FindTeamFromObject::bIsPartOfTeam' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_FindTeamFromObject, TeamId) == 0x00000C, "Member 'LyraTeamStatics_FindTeamFromObject::TeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_FindTeamFromObject, DisplayAsset) == 0x000010, "Member 'LyraTeamStatics_FindTeamFromObject::DisplayAsset' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_FindTeamFromObject, bLogIfNotSet) == 0x000018, "Member 'LyraTeamStatics_FindTeamFromObject::bLogIfNotSet' has a wrong offset!");

// Function LyraGame.LyraTeamStatics.GetTeamColorWithFallback
// 0x0030 (0x0030 - 0x0000)
struct LyraTeamStatics_GetTeamColorWithFallback final
{
public:
	class ULyraTeamDisplayAsset*                  DisplayAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DefaultValue;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamStatics_GetTeamColorWithFallback) == 0x000008, "Wrong alignment on LyraTeamStatics_GetTeamColorWithFallback");
static_assert(sizeof(LyraTeamStatics_GetTeamColorWithFallback) == 0x000030, "Wrong size on LyraTeamStatics_GetTeamColorWithFallback");
static_assert(offsetof(LyraTeamStatics_GetTeamColorWithFallback, DisplayAsset) == 0x000000, "Member 'LyraTeamStatics_GetTeamColorWithFallback::DisplayAsset' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_GetTeamColorWithFallback, ParameterName) == 0x000008, "Member 'LyraTeamStatics_GetTeamColorWithFallback::ParameterName' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_GetTeamColorWithFallback, DefaultValue) == 0x000010, "Member 'LyraTeamStatics_GetTeamColorWithFallback::DefaultValue' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_GetTeamColorWithFallback, ReturnValue) == 0x000020, "Member 'LyraTeamStatics_GetTeamColorWithFallback::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamStatics.GetTeamDisplayAsset
// 0x0018 (0x0018 - 0x0000)
struct LyraTeamStatics_GetTeamDisplayAsset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULyraTeamDisplayAsset*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamStatics_GetTeamDisplayAsset) == 0x000008, "Wrong alignment on LyraTeamStatics_GetTeamDisplayAsset");
static_assert(sizeof(LyraTeamStatics_GetTeamDisplayAsset) == 0x000018, "Wrong size on LyraTeamStatics_GetTeamDisplayAsset");
static_assert(offsetof(LyraTeamStatics_GetTeamDisplayAsset, WorldContextObject) == 0x000000, "Member 'LyraTeamStatics_GetTeamDisplayAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_GetTeamDisplayAsset, TeamId) == 0x000008, "Member 'LyraTeamStatics_GetTeamDisplayAsset::TeamId' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_GetTeamDisplayAsset, ReturnValue) == 0x000010, "Member 'LyraTeamStatics_GetTeamDisplayAsset::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamStatics.GetTeamScalarWithFallback
// 0x0018 (0x0018 - 0x0000)
struct LyraTeamStatics_GetTeamScalarWithFallback final
{
public:
	class ULyraTeamDisplayAsset*                  DisplayAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamStatics_GetTeamScalarWithFallback) == 0x000008, "Wrong alignment on LyraTeamStatics_GetTeamScalarWithFallback");
static_assert(sizeof(LyraTeamStatics_GetTeamScalarWithFallback) == 0x000018, "Wrong size on LyraTeamStatics_GetTeamScalarWithFallback");
static_assert(offsetof(LyraTeamStatics_GetTeamScalarWithFallback, DisplayAsset) == 0x000000, "Member 'LyraTeamStatics_GetTeamScalarWithFallback::DisplayAsset' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_GetTeamScalarWithFallback, ParameterName) == 0x000008, "Member 'LyraTeamStatics_GetTeamScalarWithFallback::ParameterName' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_GetTeamScalarWithFallback, DefaultValue) == 0x000010, "Member 'LyraTeamStatics_GetTeamScalarWithFallback::DefaultValue' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_GetTeamScalarWithFallback, ReturnValue) == 0x000014, "Member 'LyraTeamStatics_GetTeamScalarWithFallback::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTeamStatics.GetTeamTextureWithFallback
// 0x0020 (0x0020 - 0x0000)
struct LyraTeamStatics_GetTeamTextureWithFallback final
{
public:
	class ULyraTeamDisplayAsset*                  DisplayAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               DefaultValue;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTeamStatics_GetTeamTextureWithFallback) == 0x000008, "Wrong alignment on LyraTeamStatics_GetTeamTextureWithFallback");
static_assert(sizeof(LyraTeamStatics_GetTeamTextureWithFallback) == 0x000020, "Wrong size on LyraTeamStatics_GetTeamTextureWithFallback");
static_assert(offsetof(LyraTeamStatics_GetTeamTextureWithFallback, DisplayAsset) == 0x000000, "Member 'LyraTeamStatics_GetTeamTextureWithFallback::DisplayAsset' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_GetTeamTextureWithFallback, ParameterName) == 0x000008, "Member 'LyraTeamStatics_GetTeamTextureWithFallback::ParameterName' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_GetTeamTextureWithFallback, DefaultValue) == 0x000010, "Member 'LyraTeamStatics_GetTeamTextureWithFallback::DefaultValue' has a wrong offset!");
static_assert(offsetof(LyraTeamStatics_GetTeamTextureWithFallback, ReturnValue) == 0x000018, "Member 'LyraTeamStatics_GetTeamTextureWithFallback::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraTabButtonInterface.SetTabLabelInfo
// 0x0110 (0x0110 - 0x0000)
struct LyraTabButtonInterface_SetTabLabelInfo final
{
public:
	struct FLyraTabDescriptor                     TabDescriptor;                                     // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabButtonInterface_SetTabLabelInfo) == 0x000010, "Wrong alignment on LyraTabButtonInterface_SetTabLabelInfo");
static_assert(sizeof(LyraTabButtonInterface_SetTabLabelInfo) == 0x000110, "Wrong size on LyraTabButtonInterface_SetTabLabelInfo");
static_assert(offsetof(LyraTabButtonInterface_SetTabLabelInfo, TabDescriptor) == 0x000000, "Member 'LyraTabButtonInterface_SetTabLabelInfo::TabDescriptor' has a wrong offset!");

// Function LyraGame.LyraWidgetFactory.FindWidgetClassForData
// 0x0010 (0x0010 - 0x0000)
struct LyraWidgetFactory_FindWidgetClassForData final
{
public:
	const class UObject*                          Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWidgetFactory_FindWidgetClassForData) == 0x000008, "Wrong alignment on LyraWidgetFactory_FindWidgetClassForData");
static_assert(sizeof(LyraWidgetFactory_FindWidgetClassForData) == 0x000010, "Wrong size on LyraWidgetFactory_FindWidgetClassForData");
static_assert(offsetof(LyraWidgetFactory_FindWidgetClassForData, Data) == 0x000000, "Member 'LyraWidgetFactory_FindWidgetClassForData::Data' has a wrong offset!");
static_assert(offsetof(LyraWidgetFactory_FindWidgetClassForData, ReturnValue) == 0x000008, "Member 'LyraWidgetFactory_FindWidgetClassForData::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraConfirmationScreen.HandleTapToCloseZoneMouseButtonDown
// 0x0190 (0x0190 - 0x0000)
struct LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown) == 0x000008, "Wrong alignment on LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown");
static_assert(sizeof(LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown) == 0x000190, "Wrong size on LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown");
static_assert(offsetof(LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown, MyGeometry) == 0x000000, "Member 'LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown, MouseEvent) == 0x000040, "Member 'LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown, ReturnValue) == 0x0000D8, "Member 'LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraLoadingScreenSubsystem.SetLoadingScreenContentWidget
// 0x0008 (0x0008 - 0x0000)
struct LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget final
{
public:
	TSubclassOf<class UUserWidget>                NewWidgetClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget) == 0x000008, "Wrong alignment on LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget");
static_assert(sizeof(LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget) == 0x000008, "Wrong size on LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget");
static_assert(offsetof(LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget, NewWidgetClass) == 0x000000, "Member 'LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget::NewWidgetClass' has a wrong offset!");

// Function LyraGame.LyraLoadingScreenSubsystem.GetLoadingScreenContentWidget
// 0x0008 (0x0008 - 0x0000)
struct LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget final
{
public:
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget) == 0x000008, "Wrong alignment on LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget");
static_assert(sizeof(LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget) == 0x000008, "Wrong size on LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget");
static_assert(offsetof(LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget, ReturnValue) == 0x000000, "Member 'LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraFrontendStateComponent.OnUserInitialized
// 0x0030 (0x0030 - 0x0000)
struct LyraFrontendStateComponent_OnUserInitialized final
{
public:
	const class UCommonUserInfo*                  UserInfo;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Error;                                             // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	ECommonUserPrivilege                          RequestedPrivilege;                                // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonUserOnlineContext                      OnlineContext;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraFrontendStateComponent_OnUserInitialized) == 0x000008, "Wrong alignment on LyraFrontendStateComponent_OnUserInitialized");
static_assert(sizeof(LyraFrontendStateComponent_OnUserInitialized) == 0x000030, "Wrong size on LyraFrontendStateComponent_OnUserInitialized");
static_assert(offsetof(LyraFrontendStateComponent_OnUserInitialized, UserInfo) == 0x000000, "Member 'LyraFrontendStateComponent_OnUserInitialized::UserInfo' has a wrong offset!");
static_assert(offsetof(LyraFrontendStateComponent_OnUserInitialized, bSuccess) == 0x000008, "Member 'LyraFrontendStateComponent_OnUserInitialized::bSuccess' has a wrong offset!");
static_assert(offsetof(LyraFrontendStateComponent_OnUserInitialized, Error) == 0x000010, "Member 'LyraFrontendStateComponent_OnUserInitialized::Error' has a wrong offset!");
static_assert(offsetof(LyraFrontendStateComponent_OnUserInitialized, RequestedPrivilege) == 0x000028, "Member 'LyraFrontendStateComponent_OnUserInitialized::RequestedPrivilege' has a wrong offset!");
static_assert(offsetof(LyraFrontendStateComponent_OnUserInitialized, OnlineContext) == 0x000029, "Member 'LyraFrontendStateComponent_OnUserInitialized::OnlineContext' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetAutoRemoveWhenIndicatorComponentIsNull
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull final
{
public:
	bool                                          CanAutomaticallyRemove;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull");
static_assert(sizeof(IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull) == 0x000001, "Wrong size on IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull");
static_assert(offsetof(IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull, CanAutomaticallyRemove) == 0x000000, "Member 'IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull::CanAutomaticallyRemove' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetBoundingBoxAnchor
// 0x0018 (0x0018 - 0x0000)
struct IndicatorDescriptor_SetBoundingBoxAnchor final
{
public:
	struct FVector                                InBoundingBoxAnchor;                               // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetBoundingBoxAnchor) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetBoundingBoxAnchor");
static_assert(sizeof(IndicatorDescriptor_SetBoundingBoxAnchor) == 0x000018, "Wrong size on IndicatorDescriptor_SetBoundingBoxAnchor");
static_assert(offsetof(IndicatorDescriptor_SetBoundingBoxAnchor, InBoundingBoxAnchor) == 0x000000, "Member 'IndicatorDescriptor_SetBoundingBoxAnchor::InBoundingBoxAnchor' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetClampToScreen
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetClampToScreen final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetClampToScreen) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetClampToScreen");
static_assert(sizeof(IndicatorDescriptor_SetClampToScreen) == 0x000001, "Wrong size on IndicatorDescriptor_SetClampToScreen");
static_assert(offsetof(IndicatorDescriptor_SetClampToScreen, bValue) == 0x000000, "Member 'IndicatorDescriptor_SetClampToScreen::bValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetComponentSocketName
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_SetComponentSocketName final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetComponentSocketName) == 0x000004, "Wrong alignment on IndicatorDescriptor_SetComponentSocketName");
static_assert(sizeof(IndicatorDescriptor_SetComponentSocketName) == 0x000008, "Wrong size on IndicatorDescriptor_SetComponentSocketName");
static_assert(offsetof(IndicatorDescriptor_SetComponentSocketName, SocketName) == 0x000000, "Member 'IndicatorDescriptor_SetComponentSocketName::SocketName' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetDataObject
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_SetDataObject final
{
public:
	class UObject*                                InDataObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetDataObject) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetDataObject");
static_assert(sizeof(IndicatorDescriptor_SetDataObject) == 0x000008, "Wrong size on IndicatorDescriptor_SetDataObject");
static_assert(offsetof(IndicatorDescriptor_SetDataObject, InDataObject) == 0x000000, "Member 'IndicatorDescriptor_SetDataObject::InDataObject' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetDesiredVisibility
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetDesiredVisibility final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetDesiredVisibility) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetDesiredVisibility");
static_assert(sizeof(IndicatorDescriptor_SetDesiredVisibility) == 0x000001, "Wrong size on IndicatorDescriptor_SetDesiredVisibility");
static_assert(offsetof(IndicatorDescriptor_SetDesiredVisibility, InVisible) == 0x000000, "Member 'IndicatorDescriptor_SetDesiredVisibility::InVisible' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetHAlign
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetHAlign final
{
public:
	EHorizontalAlignment                          InHAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetHAlign) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetHAlign");
static_assert(sizeof(IndicatorDescriptor_SetHAlign) == 0x000001, "Wrong size on IndicatorDescriptor_SetHAlign");
static_assert(offsetof(IndicatorDescriptor_SetHAlign, InHAlignment) == 0x000000, "Member 'IndicatorDescriptor_SetHAlign::InHAlignment' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetIndicatorClass
// 0x0030 (0x0030 - 0x0000)
struct IndicatorDescriptor_SetIndicatorClass final
{
public:
	TSoftClassPtr<class UClass>                   InIndicatorWidgetClass;                            // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetIndicatorClass) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetIndicatorClass");
static_assert(sizeof(IndicatorDescriptor_SetIndicatorClass) == 0x000030, "Wrong size on IndicatorDescriptor_SetIndicatorClass");
static_assert(offsetof(IndicatorDescriptor_SetIndicatorClass, InIndicatorWidgetClass) == 0x000000, "Member 'IndicatorDescriptor_SetIndicatorClass::InIndicatorWidgetClass' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetPriority
// 0x0004 (0x0004 - 0x0000)
struct IndicatorDescriptor_SetPriority final
{
public:
	int32                                         InPriority;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetPriority) == 0x000004, "Wrong alignment on IndicatorDescriptor_SetPriority");
static_assert(sizeof(IndicatorDescriptor_SetPriority) == 0x000004, "Wrong size on IndicatorDescriptor_SetPriority");
static_assert(offsetof(IndicatorDescriptor_SetPriority, InPriority) == 0x000000, "Member 'IndicatorDescriptor_SetPriority::InPriority' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetProjectionMode
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetProjectionMode final
{
public:
	EActorCanvasProjectionMode                    InProjectionMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetProjectionMode) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetProjectionMode");
static_assert(sizeof(IndicatorDescriptor_SetProjectionMode) == 0x000001, "Wrong size on IndicatorDescriptor_SetProjectionMode");
static_assert(offsetof(IndicatorDescriptor_SetProjectionMode, InProjectionMode) == 0x000000, "Member 'IndicatorDescriptor_SetProjectionMode::InProjectionMode' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetSceneComponent
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_SetSceneComponent final
{
public:
	class USceneComponent*                        InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetSceneComponent) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetSceneComponent");
static_assert(sizeof(IndicatorDescriptor_SetSceneComponent) == 0x000008, "Wrong size on IndicatorDescriptor_SetSceneComponent");
static_assert(offsetof(IndicatorDescriptor_SetSceneComponent, InComponent) == 0x000000, "Member 'IndicatorDescriptor_SetSceneComponent::InComponent' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetScreenSpaceOffset
// 0x0010 (0x0010 - 0x0000)
struct IndicatorDescriptor_SetScreenSpaceOffset final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetScreenSpaceOffset) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetScreenSpaceOffset");
static_assert(sizeof(IndicatorDescriptor_SetScreenSpaceOffset) == 0x000010, "Wrong size on IndicatorDescriptor_SetScreenSpaceOffset");
static_assert(offsetof(IndicatorDescriptor_SetScreenSpaceOffset, Offset) == 0x000000, "Member 'IndicatorDescriptor_SetScreenSpaceOffset::Offset' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetShowClampToScreenArrow
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetShowClampToScreenArrow final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetShowClampToScreenArrow) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetShowClampToScreenArrow");
static_assert(sizeof(IndicatorDescriptor_SetShowClampToScreenArrow) == 0x000001, "Wrong size on IndicatorDescriptor_SetShowClampToScreenArrow");
static_assert(offsetof(IndicatorDescriptor_SetShowClampToScreenArrow, bValue) == 0x000000, "Member 'IndicatorDescriptor_SetShowClampToScreenArrow::bValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetVAlign
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetVAlign final
{
public:
	EVerticalAlignment                            InVAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetVAlign) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetVAlign");
static_assert(sizeof(IndicatorDescriptor_SetVAlign) == 0x000001, "Wrong size on IndicatorDescriptor_SetVAlign");
static_assert(offsetof(IndicatorDescriptor_SetVAlign, InVAlignment) == 0x000000, "Member 'IndicatorDescriptor_SetVAlign::InVAlignment' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.SetWorldPositionOffset
// 0x0018 (0x0018 - 0x0000)
struct IndicatorDescriptor_SetWorldPositionOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetWorldPositionOffset) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetWorldPositionOffset");
static_assert(sizeof(IndicatorDescriptor_SetWorldPositionOffset) == 0x000018, "Wrong size on IndicatorDescriptor_SetWorldPositionOffset");
static_assert(offsetof(IndicatorDescriptor_SetWorldPositionOffset, Offset) == 0x000000, "Member 'IndicatorDescriptor_SetWorldPositionOffset::Offset' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetAutoRemoveWhenIndicatorComponentIsNull
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull");
static_assert(sizeof(IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull) == 0x000001, "Wrong size on IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull");
static_assert(offsetof(IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetBoundingBoxAnchor
// 0x0018 (0x0018 - 0x0000)
struct IndicatorDescriptor_GetBoundingBoxAnchor final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetBoundingBoxAnchor) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetBoundingBoxAnchor");
static_assert(sizeof(IndicatorDescriptor_GetBoundingBoxAnchor) == 0x000018, "Wrong size on IndicatorDescriptor_GetBoundingBoxAnchor");
static_assert(offsetof(IndicatorDescriptor_GetBoundingBoxAnchor, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetBoundingBoxAnchor::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetClampToScreen
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetClampToScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetClampToScreen) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetClampToScreen");
static_assert(sizeof(IndicatorDescriptor_GetClampToScreen) == 0x000001, "Wrong size on IndicatorDescriptor_GetClampToScreen");
static_assert(offsetof(IndicatorDescriptor_GetClampToScreen, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetClampToScreen::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetComponentSocketName
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_GetComponentSocketName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetComponentSocketName) == 0x000004, "Wrong alignment on IndicatorDescriptor_GetComponentSocketName");
static_assert(sizeof(IndicatorDescriptor_GetComponentSocketName) == 0x000008, "Wrong size on IndicatorDescriptor_GetComponentSocketName");
static_assert(offsetof(IndicatorDescriptor_GetComponentSocketName, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetComponentSocketName::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetDataObject
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_GetDataObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetDataObject) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetDataObject");
static_assert(sizeof(IndicatorDescriptor_GetDataObject) == 0x000008, "Wrong size on IndicatorDescriptor_GetDataObject");
static_assert(offsetof(IndicatorDescriptor_GetDataObject, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetDataObject::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetHAlign
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetHAlign final
{
public:
	EHorizontalAlignment                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetHAlign) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetHAlign");
static_assert(sizeof(IndicatorDescriptor_GetHAlign) == 0x000001, "Wrong size on IndicatorDescriptor_GetHAlign");
static_assert(offsetof(IndicatorDescriptor_GetHAlign, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetHAlign::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetIndicatorClass
// 0x0030 (0x0030 - 0x0000)
struct IndicatorDescriptor_GetIndicatorClass final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetIndicatorClass) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetIndicatorClass");
static_assert(sizeof(IndicatorDescriptor_GetIndicatorClass) == 0x000030, "Wrong size on IndicatorDescriptor_GetIndicatorClass");
static_assert(offsetof(IndicatorDescriptor_GetIndicatorClass, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetIndicatorClass::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetIsVisible
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetIsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetIsVisible) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetIsVisible");
static_assert(sizeof(IndicatorDescriptor_GetIsVisible) == 0x000001, "Wrong size on IndicatorDescriptor_GetIsVisible");
static_assert(offsetof(IndicatorDescriptor_GetIsVisible, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetIsVisible::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetPriority
// 0x0004 (0x0004 - 0x0000)
struct IndicatorDescriptor_GetPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetPriority) == 0x000004, "Wrong alignment on IndicatorDescriptor_GetPriority");
static_assert(sizeof(IndicatorDescriptor_GetPriority) == 0x000004, "Wrong size on IndicatorDescriptor_GetPriority");
static_assert(offsetof(IndicatorDescriptor_GetPriority, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetPriority::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetProjectionMode
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetProjectionMode final
{
public:
	EActorCanvasProjectionMode                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetProjectionMode) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetProjectionMode");
static_assert(sizeof(IndicatorDescriptor_GetProjectionMode) == 0x000001, "Wrong size on IndicatorDescriptor_GetProjectionMode");
static_assert(offsetof(IndicatorDescriptor_GetProjectionMode, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetProjectionMode::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetSceneComponent
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_GetSceneComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetSceneComponent) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetSceneComponent");
static_assert(sizeof(IndicatorDescriptor_GetSceneComponent) == 0x000008, "Wrong size on IndicatorDescriptor_GetSceneComponent");
static_assert(offsetof(IndicatorDescriptor_GetSceneComponent, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetSceneComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetScreenSpaceOffset
// 0x0010 (0x0010 - 0x0000)
struct IndicatorDescriptor_GetScreenSpaceOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetScreenSpaceOffset) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetScreenSpaceOffset");
static_assert(sizeof(IndicatorDescriptor_GetScreenSpaceOffset) == 0x000010, "Wrong size on IndicatorDescriptor_GetScreenSpaceOffset");
static_assert(offsetof(IndicatorDescriptor_GetScreenSpaceOffset, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetScreenSpaceOffset::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetShowClampToScreenArrow
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetShowClampToScreenArrow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetShowClampToScreenArrow) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetShowClampToScreenArrow");
static_assert(sizeof(IndicatorDescriptor_GetShowClampToScreenArrow) == 0x000001, "Wrong size on IndicatorDescriptor_GetShowClampToScreenArrow");
static_assert(offsetof(IndicatorDescriptor_GetShowClampToScreenArrow, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetShowClampToScreenArrow::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetVAlign
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetVAlign final
{
public:
	EVerticalAlignment                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetVAlign) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetVAlign");
static_assert(sizeof(IndicatorDescriptor_GetVAlign) == 0x000001, "Wrong size on IndicatorDescriptor_GetVAlign");
static_assert(offsetof(IndicatorDescriptor_GetVAlign, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetVAlign::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorDescriptor.GetWorldPositionOffset
// 0x0018 (0x0018 - 0x0000)
struct IndicatorDescriptor_GetWorldPositionOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetWorldPositionOffset) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetWorldPositionOffset");
static_assert(sizeof(IndicatorDescriptor_GetWorldPositionOffset) == 0x000018, "Wrong size on IndicatorDescriptor_GetWorldPositionOffset");
static_assert(offsetof(IndicatorDescriptor_GetWorldPositionOffset, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetWorldPositionOffset::ReturnValue' has a wrong offset!");

// Function LyraGame.IndicatorLibrary.GetIndicatorManagerComponent
// 0x0010 (0x0010 - 0x0000)
struct IndicatorLibrary_GetIndicatorManagerComponent final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraIndicatorManagerComponent*         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorLibrary_GetIndicatorManagerComponent) == 0x000008, "Wrong alignment on IndicatorLibrary_GetIndicatorManagerComponent");
static_assert(sizeof(IndicatorLibrary_GetIndicatorManagerComponent) == 0x000010, "Wrong size on IndicatorLibrary_GetIndicatorManagerComponent");
static_assert(offsetof(IndicatorLibrary_GetIndicatorManagerComponent, Controller) == 0x000000, "Member 'IndicatorLibrary_GetIndicatorManagerComponent::Controller' has a wrong offset!");
static_assert(offsetof(IndicatorLibrary_GetIndicatorManagerComponent, ReturnValue) == 0x000008, "Member 'IndicatorLibrary_GetIndicatorManagerComponent::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraJoystickWidget.UpdateSitckVector
// 0x0010 (0x0010 - 0x0000)
struct LyraJoystickWidget_UpdateSitckVector final
{
public:
	struct FVector2D                              MoveStickOffset;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraJoystickWidget_UpdateSitckVector) == 0x000008, "Wrong alignment on LyraJoystickWidget_UpdateSitckVector");
static_assert(sizeof(LyraJoystickWidget_UpdateSitckVector) == 0x000010, "Wrong size on LyraJoystickWidget_UpdateSitckVector");
static_assert(offsetof(LyraJoystickWidget_UpdateSitckVector, MoveStickOffset) == 0x000000, "Member 'LyraJoystickWidget_UpdateSitckVector::MoveStickOffset' has a wrong offset!");

// Function LyraGame.LyraTouchRegion.ShouldSimulateInput
// 0x0001 (0x0001 - 0x0000)
struct LyraTouchRegion_ShouldSimulateInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTouchRegion_ShouldSimulateInput) == 0x000001, "Wrong alignment on LyraTouchRegion_ShouldSimulateInput");
static_assert(sizeof(LyraTouchRegion_ShouldSimulateInput) == 0x000001, "Wrong size on LyraTouchRegion_ShouldSimulateInput");
static_assert(offsetof(LyraTouchRegion_ShouldSimulateInput, ReturnValue) == 0x000000, "Member 'LyraTouchRegion_ShouldSimulateInput::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPerfStatWidgetBase.FetchStatValue
// 0x0008 (0x0008 - 0x0000)
struct LyraPerfStatWidgetBase_FetchStatValue final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPerfStatWidgetBase_FetchStatValue) == 0x000008, "Wrong alignment on LyraPerfStatWidgetBase_FetchStatValue");
static_assert(sizeof(LyraPerfStatWidgetBase_FetchStatValue) == 0x000008, "Wrong size on LyraPerfStatWidgetBase_FetchStatValue");
static_assert(offsetof(LyraPerfStatWidgetBase_FetchStatValue, ReturnValue) == 0x000000, "Member 'LyraPerfStatWidgetBase_FetchStatValue::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraPerfStatWidgetBase.GetStatToDisplay
// 0x0001 (0x0001 - 0x0000)
struct LyraPerfStatWidgetBase_GetStatToDisplay final
{
public:
	ELyraDisplayablePerformanceStat               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPerfStatWidgetBase_GetStatToDisplay) == 0x000001, "Wrong alignment on LyraPerfStatWidgetBase_GetStatToDisplay");
static_assert(sizeof(LyraPerfStatWidgetBase_GetStatToDisplay) == 0x000001, "Wrong size on LyraPerfStatWidgetBase_GetStatToDisplay");
static_assert(offsetof(LyraPerfStatWidgetBase_GetStatToDisplay, ReturnValue) == 0x000000, "Member 'LyraPerfStatWidgetBase_GetStatToDisplay::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraWeaponUserInterface.OnWeaponChanged
// 0x0010 (0x0010 - 0x0000)
struct LyraWeaponUserInterface_OnWeaponChanged final
{
public:
	class ULyraWeaponInstance*                    OldWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraWeaponInstance*                    NewWeapon;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWeaponUserInterface_OnWeaponChanged) == 0x000008, "Wrong alignment on LyraWeaponUserInterface_OnWeaponChanged");
static_assert(sizeof(LyraWeaponUserInterface_OnWeaponChanged) == 0x000010, "Wrong size on LyraWeaponUserInterface_OnWeaponChanged");
static_assert(offsetof(LyraWeaponUserInterface_OnWeaponChanged, OldWeapon) == 0x000000, "Member 'LyraWeaponUserInterface_OnWeaponChanged::OldWeapon' has a wrong offset!");
static_assert(offsetof(LyraWeaponUserInterface_OnWeaponChanged, NewWeapon) == 0x000008, "Member 'LyraWeaponUserInterface_OnWeaponChanged::NewWeapon' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility_RangedWeapon.OnRangedWeaponTargetDataReady
// 0x0028 (0x0028 - 0x0000)
struct LyraGameplayAbility_RangedWeapon_OnRangedWeaponTargetDataReady final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_RangedWeapon_OnRangedWeaponTargetDataReady) == 0x000008, "Wrong alignment on LyraGameplayAbility_RangedWeapon_OnRangedWeaponTargetDataReady");
static_assert(sizeof(LyraGameplayAbility_RangedWeapon_OnRangedWeaponTargetDataReady) == 0x000028, "Wrong size on LyraGameplayAbility_RangedWeapon_OnRangedWeaponTargetDataReady");
static_assert(offsetof(LyraGameplayAbility_RangedWeapon_OnRangedWeaponTargetDataReady, TargetData) == 0x000000, "Member 'LyraGameplayAbility_RangedWeapon_OnRangedWeaponTargetDataReady::TargetData' has a wrong offset!");

// Function LyraGame.LyraGameplayAbility_RangedWeapon.GetWeaponInstance
// 0x0008 (0x0008 - 0x0000)
struct LyraGameplayAbility_RangedWeapon_GetWeaponInstance final
{
public:
	class ULyraRangedWeaponInstance*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraGameplayAbility_RangedWeapon_GetWeaponInstance) == 0x000008, "Wrong alignment on LyraGameplayAbility_RangedWeapon_GetWeaponInstance");
static_assert(sizeof(LyraGameplayAbility_RangedWeapon_GetWeaponInstance) == 0x000008, "Wrong size on LyraGameplayAbility_RangedWeapon_GetWeaponInstance");
static_assert(offsetof(LyraGameplayAbility_RangedWeapon_GetWeaponInstance, ReturnValue) == 0x000000, "Member 'LyraGameplayAbility_RangedWeapon_GetWeaponInstance::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraWeaponInstance.GetTimeSinceLastInteractedWith
// 0x0004 (0x0004 - 0x0000)
struct LyraWeaponInstance_GetTimeSinceLastInteractedWith final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWeaponInstance_GetTimeSinceLastInteractedWith) == 0x000004, "Wrong alignment on LyraWeaponInstance_GetTimeSinceLastInteractedWith");
static_assert(sizeof(LyraWeaponInstance_GetTimeSinceLastInteractedWith) == 0x000004, "Wrong size on LyraWeaponInstance_GetTimeSinceLastInteractedWith");
static_assert(offsetof(LyraWeaponInstance_GetTimeSinceLastInteractedWith, ReturnValue) == 0x000000, "Member 'LyraWeaponInstance_GetTimeSinceLastInteractedWith::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraWeaponInstance.PickBestAnimLayer
// 0x0030 (0x0030 - 0x0000)
struct LyraWeaponInstance_PickBestAnimLayer final
{
public:
	bool                                          bEquipped;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CosmeticTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWeaponInstance_PickBestAnimLayer) == 0x000008, "Wrong alignment on LyraWeaponInstance_PickBestAnimLayer");
static_assert(sizeof(LyraWeaponInstance_PickBestAnimLayer) == 0x000030, "Wrong size on LyraWeaponInstance_PickBestAnimLayer");
static_assert(offsetof(LyraWeaponInstance_PickBestAnimLayer, bEquipped) == 0x000000, "Member 'LyraWeaponInstance_PickBestAnimLayer::bEquipped' has a wrong offset!");
static_assert(offsetof(LyraWeaponInstance_PickBestAnimLayer, CosmeticTags) == 0x000008, "Member 'LyraWeaponInstance_PickBestAnimLayer::CosmeticTags' has a wrong offset!");
static_assert(offsetof(LyraWeaponInstance_PickBestAnimLayer, ReturnValue) == 0x000028, "Member 'LyraWeaponInstance_PickBestAnimLayer::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraWeaponInstance.PickBestEquipMontage
// 0x0030 (0x0030 - 0x0000)
struct LyraWeaponInstance_PickBestEquipMontage final
{
public:
	bool                                          bEquipped;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CosmeticTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWeaponInstance_PickBestEquipMontage) == 0x000008, "Wrong alignment on LyraWeaponInstance_PickBestEquipMontage");
static_assert(sizeof(LyraWeaponInstance_PickBestEquipMontage) == 0x000030, "Wrong size on LyraWeaponInstance_PickBestEquipMontage");
static_assert(offsetof(LyraWeaponInstance_PickBestEquipMontage, bEquipped) == 0x000000, "Member 'LyraWeaponInstance_PickBestEquipMontage::bEquipped' has a wrong offset!");
static_assert(offsetof(LyraWeaponInstance_PickBestEquipMontage, CosmeticTags) == 0x000008, "Member 'LyraWeaponInstance_PickBestEquipMontage::CosmeticTags' has a wrong offset!");
static_assert(offsetof(LyraWeaponInstance_PickBestEquipMontage, ReturnValue) == 0x000028, "Member 'LyraWeaponInstance_PickBestEquipMontage::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraWeaponSpawner.GetDefaultStatFromItemDef
// 0x0018 (0x0018 - 0x0000)
struct LyraWeaponSpawner_GetDefaultStatFromItemDef final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> WeaponItemClass;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StatTag;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraWeaponSpawner_GetDefaultStatFromItemDef) == 0x000008, "Wrong alignment on LyraWeaponSpawner_GetDefaultStatFromItemDef");
static_assert(sizeof(LyraWeaponSpawner_GetDefaultStatFromItemDef) == 0x000018, "Wrong size on LyraWeaponSpawner_GetDefaultStatFromItemDef");
static_assert(offsetof(LyraWeaponSpawner_GetDefaultStatFromItemDef, WeaponItemClass) == 0x000000, "Member 'LyraWeaponSpawner_GetDefaultStatFromItemDef::WeaponItemClass' has a wrong offset!");
static_assert(offsetof(LyraWeaponSpawner_GetDefaultStatFromItemDef, StatTag) == 0x000008, "Member 'LyraWeaponSpawner_GetDefaultStatFromItemDef::StatTag' has a wrong offset!");
static_assert(offsetof(LyraWeaponSpawner_GetDefaultStatFromItemDef, ReturnValue) == 0x000010, "Member 'LyraWeaponSpawner_GetDefaultStatFromItemDef::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraWeaponSpawner.AttemptPickUpWeapon
// 0x0008 (0x0008 - 0x0000)
struct LyraWeaponSpawner_AttemptPickUpWeapon final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWeaponSpawner_AttemptPickUpWeapon) == 0x000008, "Wrong alignment on LyraWeaponSpawner_AttemptPickUpWeapon");
static_assert(sizeof(LyraWeaponSpawner_AttemptPickUpWeapon) == 0x000008, "Wrong size on LyraWeaponSpawner_AttemptPickUpWeapon");
static_assert(offsetof(LyraWeaponSpawner_AttemptPickUpWeapon, Pawn) == 0x000000, "Member 'LyraWeaponSpawner_AttemptPickUpWeapon::Pawn' has a wrong offset!");

// Function LyraGame.LyraWeaponSpawner.GiveWeapon
// 0x0018 (0x0018 - 0x0000)
struct LyraWeaponSpawner_GiveWeapon final
{
public:
	TSubclassOf<class ULyraInventoryItemDefinition> WeaponItemClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReceivingPawn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraWeaponSpawner_GiveWeapon) == 0x000008, "Wrong alignment on LyraWeaponSpawner_GiveWeapon");
static_assert(sizeof(LyraWeaponSpawner_GiveWeapon) == 0x000018, "Wrong size on LyraWeaponSpawner_GiveWeapon");
static_assert(offsetof(LyraWeaponSpawner_GiveWeapon, WeaponItemClass) == 0x000000, "Member 'LyraWeaponSpawner_GiveWeapon::WeaponItemClass' has a wrong offset!");
static_assert(offsetof(LyraWeaponSpawner_GiveWeapon, ReceivingPawn) == 0x000008, "Member 'LyraWeaponSpawner_GiveWeapon::ReceivingPawn' has a wrong offset!");
static_assert(offsetof(LyraWeaponSpawner_GiveWeapon, ReturnValue) == 0x000010, "Member 'LyraWeaponSpawner_GiveWeapon::ReturnValue' has a wrong offset!");

// Function LyraGame.LyraWeaponSpawner.OnOverlapBegin
// 0x0108 (0x0108 - 0x0000)
struct LyraWeaponSpawner_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWeaponSpawner_OnOverlapBegin) == 0x000008, "Wrong alignment on LyraWeaponSpawner_OnOverlapBegin");
static_assert(sizeof(LyraWeaponSpawner_OnOverlapBegin) == 0x000108, "Wrong size on LyraWeaponSpawner_OnOverlapBegin");
static_assert(offsetof(LyraWeaponSpawner_OnOverlapBegin, OverlappedComponent) == 0x000000, "Member 'LyraWeaponSpawner_OnOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(LyraWeaponSpawner_OnOverlapBegin, OtherActor) == 0x000008, "Member 'LyraWeaponSpawner_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(LyraWeaponSpawner_OnOverlapBegin, OtherComp) == 0x000010, "Member 'LyraWeaponSpawner_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(LyraWeaponSpawner_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'LyraWeaponSpawner_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(LyraWeaponSpawner_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'LyraWeaponSpawner_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(LyraWeaponSpawner_OnOverlapBegin, SweepHitResult) == 0x000020, "Member 'LyraWeaponSpawner_OnOverlapBegin::SweepHitResult' has a wrong offset!");

// Function LyraGame.TgfWeaponAnimInstance.PickBestWeaponInspectionAnimation
// 0x0028 (0x0028 - 0x0000)
struct TgfWeaponAnimInstance_PickBestWeaponInspectionAnimation final
{
public:
	struct FGameplayTagContainer                  CosmeticTags;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWeaponAnimInstance_PickBestWeaponInspectionAnimation) == 0x000008, "Wrong alignment on TgfWeaponAnimInstance_PickBestWeaponInspectionAnimation");
static_assert(sizeof(TgfWeaponAnimInstance_PickBestWeaponInspectionAnimation) == 0x000028, "Wrong size on TgfWeaponAnimInstance_PickBestWeaponInspectionAnimation");
static_assert(offsetof(TgfWeaponAnimInstance_PickBestWeaponInspectionAnimation, CosmeticTags) == 0x000000, "Member 'TgfWeaponAnimInstance_PickBestWeaponInspectionAnimation::CosmeticTags' has a wrong offset!");
static_assert(offsetof(TgfWeaponAnimInstance_PickBestWeaponInspectionAnimation, ReturnValue) == 0x000020, "Member 'TgfWeaponAnimInstance_PickBestWeaponInspectionAnimation::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWeaponAnimInstance.PickIdleAnimation
// 0x0030 (0x0030 - 0x0000)
struct TgfWeaponAnimInstance_PickIdleAnimation final
{
public:
	struct FGameplayTagContainer                  CosmeticTags;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsRightIdle;                                      // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequenceBase*                ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWeaponAnimInstance_PickIdleAnimation) == 0x000008, "Wrong alignment on TgfWeaponAnimInstance_PickIdleAnimation");
static_assert(sizeof(TgfWeaponAnimInstance_PickIdleAnimation) == 0x000030, "Wrong size on TgfWeaponAnimInstance_PickIdleAnimation");
static_assert(offsetof(TgfWeaponAnimInstance_PickIdleAnimation, CosmeticTags) == 0x000000, "Member 'TgfWeaponAnimInstance_PickIdleAnimation::CosmeticTags' has a wrong offset!");
static_assert(offsetof(TgfWeaponAnimInstance_PickIdleAnimation, bIsRightIdle) == 0x000020, "Member 'TgfWeaponAnimInstance_PickIdleAnimation::bIsRightIdle' has a wrong offset!");
static_assert(offsetof(TgfWeaponAnimInstance_PickIdleAnimation, ReturnValue) == 0x000028, "Member 'TgfWeaponAnimInstance_PickIdleAnimation::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWeaponAnimInstance.PickBestAnimLayer
// 0x0030 (0x0030 - 0x0000)
struct TgfWeaponAnimInstance_PickBestAnimLayer final
{
public:
	bool                                          bEquipped;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CosmeticTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWeaponAnimInstance_PickBestAnimLayer) == 0x000008, "Wrong alignment on TgfWeaponAnimInstance_PickBestAnimLayer");
static_assert(sizeof(TgfWeaponAnimInstance_PickBestAnimLayer) == 0x000030, "Wrong size on TgfWeaponAnimInstance_PickBestAnimLayer");
static_assert(offsetof(TgfWeaponAnimInstance_PickBestAnimLayer, bEquipped) == 0x000000, "Member 'TgfWeaponAnimInstance_PickBestAnimLayer::bEquipped' has a wrong offset!");
static_assert(offsetof(TgfWeaponAnimInstance_PickBestAnimLayer, CosmeticTags) == 0x000008, "Member 'TgfWeaponAnimInstance_PickBestAnimLayer::CosmeticTags' has a wrong offset!");
static_assert(offsetof(TgfWeaponAnimInstance_PickBestAnimLayer, ReturnValue) == 0x000028, "Member 'TgfWeaponAnimInstance_PickBestAnimLayer::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWeaponAnimInstance.PickBestEquipMontage
// 0x0038 (0x0038 - 0x0000)
struct TgfWeaponAnimInstance_PickBestEquipMontage final
{
public:
	bool                                          bEquipped;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CosmeticTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsRight;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWeaponAnimInstance_PickBestEquipMontage) == 0x000008, "Wrong alignment on TgfWeaponAnimInstance_PickBestEquipMontage");
static_assert(sizeof(TgfWeaponAnimInstance_PickBestEquipMontage) == 0x000038, "Wrong size on TgfWeaponAnimInstance_PickBestEquipMontage");
static_assert(offsetof(TgfWeaponAnimInstance_PickBestEquipMontage, bEquipped) == 0x000000, "Member 'TgfWeaponAnimInstance_PickBestEquipMontage::bEquipped' has a wrong offset!");
static_assert(offsetof(TgfWeaponAnimInstance_PickBestEquipMontage, CosmeticTags) == 0x000008, "Member 'TgfWeaponAnimInstance_PickBestEquipMontage::CosmeticTags' has a wrong offset!");
static_assert(offsetof(TgfWeaponAnimInstance_PickBestEquipMontage, IsRight) == 0x000028, "Member 'TgfWeaponAnimInstance_PickBestEquipMontage::IsRight' has a wrong offset!");
static_assert(offsetof(TgfWeaponAnimInstance_PickBestEquipMontage, ReturnValue) == 0x000030, "Member 'TgfWeaponAnimInstance_PickBestEquipMontage::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWeaponInstance.GetAmmoCanAdd
// 0x0004 (0x0004 - 0x0000)
struct TgfWeaponInstance_GetAmmoCanAdd final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWeaponInstance_GetAmmoCanAdd) == 0x000004, "Wrong alignment on TgfWeaponInstance_GetAmmoCanAdd");
static_assert(sizeof(TgfWeaponInstance_GetAmmoCanAdd) == 0x000004, "Wrong size on TgfWeaponInstance_GetAmmoCanAdd");
static_assert(offsetof(TgfWeaponInstance_GetAmmoCanAdd, ReturnValue) == 0x000000, "Member 'TgfWeaponInstance_GetAmmoCanAdd::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWeaponInstance.GetLeftAmmo
// 0x0004 (0x0004 - 0x0000)
struct TgfWeaponInstance_GetLeftAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWeaponInstance_GetLeftAmmo) == 0x000004, "Wrong alignment on TgfWeaponInstance_GetLeftAmmo");
static_assert(sizeof(TgfWeaponInstance_GetLeftAmmo) == 0x000004, "Wrong size on TgfWeaponInstance_GetLeftAmmo");
static_assert(offsetof(TgfWeaponInstance_GetLeftAmmo, ReturnValue) == 0x000000, "Member 'TgfWeaponInstance_GetLeftAmmo::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWeaponInstance.GetSkillEquipType
// 0x0001 (0x0001 - 0x0000)
struct TgfWeaponInstance_GetSkillEquipType final
{
public:
	ETgfWeaponEquipType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWeaponInstance_GetSkillEquipType) == 0x000001, "Wrong alignment on TgfWeaponInstance_GetSkillEquipType");
static_assert(sizeof(TgfWeaponInstance_GetSkillEquipType) == 0x000001, "Wrong size on TgfWeaponInstance_GetSkillEquipType");
static_assert(offsetof(TgfWeaponInstance_GetSkillEquipType, ReturnValue) == 0x000000, "Member 'TgfWeaponInstance_GetSkillEquipType::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWeaponInstance.GetStencilDef
// 0x0001 (0x0001 - 0x0000)
struct TgfWeaponInstance_GetStencilDef final
{
public:
	ETgfStencilRef                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWeaponInstance_GetStencilDef) == 0x000001, "Wrong alignment on TgfWeaponInstance_GetStencilDef");
static_assert(sizeof(TgfWeaponInstance_GetStencilDef) == 0x000001, "Wrong size on TgfWeaponInstance_GetStencilDef");
static_assert(offsetof(TgfWeaponInstance_GetStencilDef, ReturnValue) == 0x000000, "Member 'TgfWeaponInstance_GetStencilDef::ReturnValue' has a wrong offset!");

// Function LyraGame.TgfWeaponInstance.IsHeld
// 0x0001 (0x0001 - 0x0000)
struct TgfWeaponInstance_IsHeld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TgfWeaponInstance_IsHeld) == 0x000001, "Wrong alignment on TgfWeaponInstance_IsHeld");
static_assert(sizeof(TgfWeaponInstance_IsHeld) == 0x000001, "Wrong size on TgfWeaponInstance_IsHeld");
static_assert(offsetof(TgfWeaponInstance_IsHeld, ReturnValue) == 0x000000, "Member 'TgfWeaponInstance_IsHeld::ReturnValue' has a wrong offset!");

}


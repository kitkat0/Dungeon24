#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LISlua425

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "UMG_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class LISlua425.INTLLatentDelegate
// 0x0008 (0x0030 - 0x0028)
class UINTLLatentDelegate final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLatentCallback(int32 ThreadRef);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLatentDelegate">();
	}
	static class UINTLLatentDelegate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UINTLLatentDelegate>();
	}
};
static_assert(alignof(UINTLLatentDelegate) == 0x000008, "Wrong alignment on UINTLLatentDelegate");
static_assert(sizeof(UINTLLatentDelegate) == 0x000030, "Wrong size on UINTLLatentDelegate");

// Class LISlua425.INTLLuaActor
// 0x00B0 (0x0348 - 0x0298)
class AINTLLuaActor final : public AActor
{
public:
	uint8                                         Pad_298[0x90];                                     // 0x0298(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LuaFilePath;                                       // 0x0328(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LuaStateName;                                      // 0x0338(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FINTLLuaBPVar CallLuaMember(const class FString& FunctionName, const TArray<struct FINTLLuaBPVar>& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLuaActor">();
	}
	static class AINTLLuaActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTLLuaActor>();
	}
};
static_assert(alignof(AINTLLuaActor) == 0x000008, "Wrong alignment on AINTLLuaActor");
static_assert(sizeof(AINTLLuaActor) == 0x000348, "Wrong size on AINTLLuaActor");
static_assert(offsetof(AINTLLuaActor, LuaFilePath) == 0x000328, "Member 'AINTLLuaActor::LuaFilePath' has a wrong offset!");
static_assert(offsetof(AINTLLuaActor, LuaStateName) == 0x000338, "Member 'AINTLLuaActor::LuaStateName' has a wrong offset!");

// Class LISlua425.INTLLuaPawn
// 0x00B0 (0x03D0 - 0x0320)
class AINTLLuaPawn final : public APawn
{
public:
	uint8                                         Pad_320[0x90];                                     // 0x0320(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LuaFilePath;                                       // 0x03B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LuaStateName;                                      // 0x03C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FINTLLuaBPVar CallLuaMember(const class FString& FunctionName, const TArray<struct FINTLLuaBPVar>& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLuaPawn">();
	}
	static class AINTLLuaPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTLLuaPawn>();
	}
};
static_assert(alignof(AINTLLuaPawn) == 0x000008, "Wrong alignment on AINTLLuaPawn");
static_assert(sizeof(AINTLLuaPawn) == 0x0003D0, "Wrong size on AINTLLuaPawn");
static_assert(offsetof(AINTLLuaPawn, LuaFilePath) == 0x0003B0, "Member 'AINTLLuaPawn::LuaFilePath' has a wrong offset!");
static_assert(offsetof(AINTLLuaPawn, LuaStateName) == 0x0003C0, "Member 'AINTLLuaPawn::LuaStateName' has a wrong offset!");

// Class LISlua425.INTLLuaCharacter
// 0x00B0 (0x06E0 - 0x0630)
class AINTLLuaCharacter final : public ACharacter
{
public:
	uint8                                         Pad_628[0x90];                                     // 0x0628(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LuaFilePath;                                       // 0x06B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LuaStateName;                                      // 0x06C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D8[0x8];                                      // 0x06D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FINTLLuaBPVar CallLuaMember(const class FString& FunctionName, const TArray<struct FINTLLuaBPVar>& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLuaCharacter">();
	}
	static class AINTLLuaCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTLLuaCharacter>();
	}
};
static_assert(alignof(AINTLLuaCharacter) == 0x000010, "Wrong alignment on AINTLLuaCharacter");
static_assert(sizeof(AINTLLuaCharacter) == 0x0006E0, "Wrong size on AINTLLuaCharacter");
static_assert(offsetof(AINTLLuaCharacter, LuaFilePath) == 0x0006B8, "Member 'AINTLLuaCharacter::LuaFilePath' has a wrong offset!");
static_assert(offsetof(AINTLLuaCharacter, LuaStateName) == 0x0006C8, "Member 'AINTLLuaCharacter::LuaStateName' has a wrong offset!");

// Class LISlua425.INTLLuaController
// 0x00B0 (0x03E0 - 0x0330)
class AINTLLuaController final : public AController
{
public:
	uint8                                         Pad_330[0x90];                                     // 0x0330(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LuaFilePath;                                       // 0x03C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LuaStateName;                                      // 0x03D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FINTLLuaBPVar CallLuaMember(const class FString& FunctionName, const TArray<struct FINTLLuaBPVar>& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLuaController">();
	}
	static class AINTLLuaController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTLLuaController>();
	}
};
static_assert(alignof(AINTLLuaController) == 0x000008, "Wrong alignment on AINTLLuaController");
static_assert(sizeof(AINTLLuaController) == 0x0003E0, "Wrong size on AINTLLuaController");
static_assert(offsetof(AINTLLuaController, LuaFilePath) == 0x0003C0, "Member 'AINTLLuaController::LuaFilePath' has a wrong offset!");
static_assert(offsetof(AINTLLuaController, LuaStateName) == 0x0003D0, "Member 'AINTLLuaController::LuaStateName' has a wrong offset!");

// Class LISlua425.INTLLuaPlayerController
// 0x00B0 (0x0910 - 0x0860)
class AINTLLuaPlayerController final : public APlayerController
{
public:
	uint8                                         Pad_860[0x90];                                     // 0x0860(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LuaFilePath;                                       // 0x08F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LuaStateName;                                      // 0x0900(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FINTLLuaBPVar CallLuaMember(const class FString& FunctionName, const TArray<struct FINTLLuaBPVar>& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLuaPlayerController">();
	}
	static class AINTLLuaPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTLLuaPlayerController>();
	}
};
static_assert(alignof(AINTLLuaPlayerController) == 0x000008, "Wrong alignment on AINTLLuaPlayerController");
static_assert(sizeof(AINTLLuaPlayerController) == 0x000910, "Wrong size on AINTLLuaPlayerController");
static_assert(offsetof(AINTLLuaPlayerController, LuaFilePath) == 0x0008F0, "Member 'AINTLLuaPlayerController::LuaFilePath' has a wrong offset!");
static_assert(offsetof(AINTLLuaPlayerController, LuaStateName) == 0x000900, "Member 'AINTLLuaPlayerController::LuaStateName' has a wrong offset!");

// Class LISlua425.INTLLuaActorComponent
// 0x00C0 (0x0168 - 0x00A8)
class UINTLLuaActorComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0xA0];                                      // 0x00A8(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LuaFilePath;                                       // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LuaStateName;                                      // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FINTLLuaBPVar CallLuaMember(const class FString& FunctionName, const TArray<struct FINTLLuaBPVar>& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLuaActorComponent">();
	}
	static class UINTLLuaActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UINTLLuaActorComponent>();
	}
};
static_assert(alignof(UINTLLuaActorComponent) == 0x000008, "Wrong alignment on UINTLLuaActorComponent");
static_assert(sizeof(UINTLLuaActorComponent) == 0x000168, "Wrong size on UINTLLuaActorComponent");
static_assert(offsetof(UINTLLuaActorComponent, LuaFilePath) == 0x000148, "Member 'UINTLLuaActorComponent::LuaFilePath' has a wrong offset!");
static_assert(offsetof(UINTLLuaActorComponent, LuaStateName) == 0x000158, "Member 'UINTLLuaActorComponent::LuaStateName' has a wrong offset!");

// Class LISlua425.INTLLuaGameModeBase
// 0x00B0 (0x03E8 - 0x0338)
class AINTLLuaGameModeBase final : public AGameModeBase
{
public:
	uint8                                         Pad_338[0x90];                                     // 0x0338(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LuaFilePath;                                       // 0x03C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LuaStateName;                                      // 0x03D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FINTLLuaBPVar CallLuaMember(const class FString& FunctionName, const TArray<struct FINTLLuaBPVar>& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLuaGameModeBase">();
	}
	static class AINTLLuaGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTLLuaGameModeBase>();
	}
};
static_assert(alignof(AINTLLuaGameModeBase) == 0x000008, "Wrong alignment on AINTLLuaGameModeBase");
static_assert(sizeof(AINTLLuaGameModeBase) == 0x0003E8, "Wrong size on AINTLLuaGameModeBase");
static_assert(offsetof(AINTLLuaGameModeBase, LuaFilePath) == 0x0003C8, "Member 'AINTLLuaGameModeBase::LuaFilePath' has a wrong offset!");
static_assert(offsetof(AINTLLuaGameModeBase, LuaStateName) == 0x0003D8, "Member 'AINTLLuaGameModeBase::LuaStateName' has a wrong offset!");

// Class LISlua425.INTLLuaHUD
// 0x00B0 (0x0438 - 0x0388)
class AINTLLuaHUD final : public AHUD
{
public:
	uint8                                         Pad_388[0x90];                                     // 0x0388(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LuaFilePath;                                       // 0x0418(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LuaStateName;                                      // 0x0428(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FINTLLuaBPVar CallLuaMember(const class FString& FunctionName, const TArray<struct FINTLLuaBPVar>& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLuaHUD">();
	}
	static class AINTLLuaHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTLLuaHUD>();
	}
};
static_assert(alignof(AINTLLuaHUD) == 0x000008, "Wrong alignment on AINTLLuaHUD");
static_assert(sizeof(AINTLLuaHUD) == 0x000438, "Wrong size on AINTLLuaHUD");
static_assert(offsetof(AINTLLuaHUD, LuaFilePath) == 0x000418, "Member 'AINTLLuaHUD::LuaFilePath' has a wrong offset!");
static_assert(offsetof(AINTLLuaHUD, LuaStateName) == 0x000428, "Member 'AINTLLuaHUD::LuaStateName' has a wrong offset!");

// Class LISlua425.LuaTableObjectInterfaceINTL
// 0x0000 (0x0028 - 0x0028)
class ILuaTableObjectInterfaceINTL final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LuaTableObjectInterfaceINTL">();
	}
	static class ILuaTableObjectInterfaceINTL* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILuaTableObjectInterfaceINTL>();
	}
};
static_assert(alignof(ILuaTableObjectInterfaceINTL) == 0x000008, "Wrong alignment on ILuaTableObjectInterfaceINTL");
static_assert(sizeof(ILuaTableObjectInterfaceINTL) == 0x000028, "Wrong size on ILuaTableObjectInterfaceINTL");

// Class LISlua425.INTLLuaBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UINTLLuaBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FINTLLuaBPVar CallToLua(class UObject* WorldContextObject, const class FString& FunctionName, const class FString& StateName);
	static struct FINTLLuaBPVar CallToLuaWithArgs(class UObject* WorldContextObject, const class FString& FunctionName, const TArray<struct FINTLLuaBPVar>& Args, const class FString& StateName);
	static struct FINTLLuaBPVar CreateVarFromBool(bool Value);
	static struct FINTLLuaBPVar CreateVarFromInt(int32 Value);
	static struct FINTLLuaBPVar CreateVarFromNumber(float Value);
	static struct FINTLLuaBPVar CreateVarFromObject(class UObject* WorldContextObject, class UObject* Value);
	static struct FINTLLuaBPVar CreateVarFromString(const class FString& Value);
	static bool GetBoolFromVar(const struct FINTLLuaBPVar& Value, int32 Param_Index);
	static int32 GetIntFromVar(const struct FINTLLuaBPVar& Value, int32 Param_Index);
	static float GetNumberFromVar(const struct FINTLLuaBPVar& Value, int32 Param_Index);
	static class UObject* GetObjectFromVar(const struct FINTLLuaBPVar& Value, int32 Param_Index);
	static class FString GetStringFromVar(const struct FINTLLuaBPVar& Value, int32 Param_Index);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLuaBlueprintLibrary">();
	}
	static class UINTLLuaBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UINTLLuaBlueprintLibrary>();
	}
};
static_assert(alignof(UINTLLuaBlueprintLibrary) == 0x000008, "Wrong alignment on UINTLLuaBlueprintLibrary");
static_assert(sizeof(UINTLLuaBlueprintLibrary) == 0x000028, "Wrong size on UINTLLuaBlueprintLibrary");

// Class LISlua425.INTLLuaDelegate
// 0x0010 (0x0038 - 0x0028)
class UINTLLuaDelegate final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EventTrigger();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLuaDelegate">();
	}
	static class UINTLLuaDelegate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UINTLLuaDelegate>();
	}
};
static_assert(alignof(UINTLLuaDelegate) == 0x000008, "Wrong alignment on UINTLLuaDelegate");
static_assert(sizeof(UINTLLuaDelegate) == 0x000038, "Wrong size on UINTLLuaDelegate");

// Class LISlua425.INTLLuaUserWidget
// 0x00F0 (0x0368 - 0x0278)
class UINTLLuaUserWidget final : public UUserWidget
{
public:
	uint8                                         Pad_278[0x90];                                     // 0x0278(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LuaFilePath;                                       // 0x0308(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LuaStateName;                                      // 0x0318(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x40];                                     // 0x0328(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FINTLLuaBPVar CallLuaMember(const class FString& FunctionName, const TArray<struct FINTLLuaBPVar>& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"INTLLuaUserWidget">();
	}
	static class UINTLLuaUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UINTLLuaUserWidget>();
	}
};
static_assert(alignof(UINTLLuaUserWidget) == 0x000008, "Wrong alignment on UINTLLuaUserWidget");
static_assert(sizeof(UINTLLuaUserWidget) == 0x000368, "Wrong size on UINTLLuaUserWidget");
static_assert(offsetof(UINTLLuaUserWidget, LuaFilePath) == 0x000308, "Member 'UINTLLuaUserWidget::LuaFilePath' has a wrong offset!");
static_assert(offsetof(UINTLLuaUserWidget, LuaStateName) == 0x000318, "Member 'UINTLLuaUserWidget::LuaStateName' has a wrong offset!");

}


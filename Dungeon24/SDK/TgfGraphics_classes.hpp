#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TgfGraphics

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "TgfGraphics_structs.hpp"


namespace SDK
{

// Class TgfGraphics.TgfAssetUserData
// 0x0018 (0x0040 - 0x0028)
class UTgfAssetUserData : public UAssetUserData
{
public:
	TArray<class UDataLayerAsset*>                DataLayerAssets;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bLODMaxForCollision;                               // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfAssetUserData">();
	}
	static class UTgfAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTgfAssetUserData>();
	}
};
static_assert(alignof(UTgfAssetUserData) == 0x000008, "Wrong alignment on UTgfAssetUserData");
static_assert(sizeof(UTgfAssetUserData) == 0x000040, "Wrong size on UTgfAssetUserData");
static_assert(offsetof(UTgfAssetUserData, DataLayerAssets) == 0x000028, "Member 'UTgfAssetUserData::DataLayerAssets' has a wrong offset!");
static_assert(offsetof(UTgfAssetUserData, bLODMaxForCollision) == 0x000038, "Member 'UTgfAssetUserData::bLODMaxForCollision' has a wrong offset!");

// Class TgfGraphics.TgfCoreDelegateSubsystem
// 0x0010 (0x0040 - 0x0030)
class UTgfCoreDelegateSubsystem final : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_             TgfOnBeginFrame;                                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfCoreDelegateSubsystem">();
	}
	static class UTgfCoreDelegateSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTgfCoreDelegateSubsystem>();
	}
};
static_assert(alignof(UTgfCoreDelegateSubsystem) == 0x000008, "Wrong alignment on UTgfCoreDelegateSubsystem");
static_assert(sizeof(UTgfCoreDelegateSubsystem) == 0x000040, "Wrong size on UTgfCoreDelegateSubsystem");
static_assert(offsetof(UTgfCoreDelegateSubsystem, TgfOnBeginFrame) == 0x000030, "Member 'UTgfCoreDelegateSubsystem::TgfOnBeginFrame' has a wrong offset!");

// Class TgfGraphics.TgfDataLayerActivator
// 0x0010 (0x02A8 - 0x0298)
class ATgfDataLayerActivator final : public AActor
{
public:
	TArray<class UDataLayerAsset*>                DataLayersToDeactivate;                            // 0x0298(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfDataLayerActivator">();
	}
	static class ATgfDataLayerActivator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATgfDataLayerActivator>();
	}
};
static_assert(alignof(ATgfDataLayerActivator) == 0x000008, "Wrong alignment on ATgfDataLayerActivator");
static_assert(sizeof(ATgfDataLayerActivator) == 0x0002A8, "Wrong size on ATgfDataLayerActivator");
static_assert(offsetof(ATgfDataLayerActivator, DataLayersToDeactivate) == 0x000298, "Member 'ATgfDataLayerActivator::DataLayersToDeactivate' has a wrong offset!");

// Class TgfGraphics.TgfEnvLightOverrideVolume
// 0x0028 (0x02F8 - 0x02D0)
class ATgfEnvLightOverrideVolume final : public AVolume
{
public:
	uint8                                         Pad_2D0[0x1];                                      // 0x02D0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableOverride;                                   // 0x02D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnableOverrideInsideVolume;                       // 0x02D2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D3[0x1];                                      // 0x02D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendRadius;                                       // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      DirectionalLightPtr;                               // 0x02E0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x10];                                     // 0x02E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfEnvLightOverrideVolume">();
	}
	static class ATgfEnvLightOverrideVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATgfEnvLightOverrideVolume>();
	}
};
static_assert(alignof(ATgfEnvLightOverrideVolume) == 0x000008, "Wrong alignment on ATgfEnvLightOverrideVolume");
static_assert(sizeof(ATgfEnvLightOverrideVolume) == 0x0002F8, "Wrong size on ATgfEnvLightOverrideVolume");
static_assert(offsetof(ATgfEnvLightOverrideVolume, bEnableOverride) == 0x0002D1, "Member 'ATgfEnvLightOverrideVolume::bEnableOverride' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightOverrideVolume, bEnableOverrideInsideVolume) == 0x0002D2, "Member 'ATgfEnvLightOverrideVolume::bEnableOverrideInsideVolume' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightOverrideVolume, BlendRadius) == 0x0002D4, "Member 'ATgfEnvLightOverrideVolume::BlendRadius' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightOverrideVolume, DirectionalLightPtr) == 0x0002E0, "Member 'ATgfEnvLightOverrideVolume::DirectionalLightPtr' has a wrong offset!");

// Class TgfGraphics.TgfEnvLightScalabilityObserver
// 0x0048 (0x02E0 - 0x0298)
class ATgfEnvLightScalabilityObserver final : public AActor
{
public:
	bool                                          bEnableTuning;                                     // 0x0298(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bTuningAccordingToGIAndShadow;                     // 0x0299(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29A[0x2];                                      // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bFoundLightActor;                                  // 0x029C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bTuningSkyLight;                                   // 0x02A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkyLightIntensityLow;                              // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SkyLightIntensityMid;                              // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SkyLightIntensityHigh;                             // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SkyLightIntensity;                                 // 0x02B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASkyLight*                              SkyLightPtr;                                       // 0x02B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bTuningDirectionalLight;                           // 0x02C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionalLightIntensityLow;                      // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DirectionalLightIntensityMid;                      // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DirectionalLightIntensityHigh;                     // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DirectionalLightIntensity;                         // 0x02D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      DirectionalLightPtr;                               // 0x02D8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfEnvLightScalabilityObserver">();
	}
	static class ATgfEnvLightScalabilityObserver* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATgfEnvLightScalabilityObserver>();
	}
};
static_assert(alignof(ATgfEnvLightScalabilityObserver) == 0x000008, "Wrong alignment on ATgfEnvLightScalabilityObserver");
static_assert(sizeof(ATgfEnvLightScalabilityObserver) == 0x0002E0, "Wrong size on ATgfEnvLightScalabilityObserver");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, bEnableTuning) == 0x000298, "Member 'ATgfEnvLightScalabilityObserver::bEnableTuning' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, bTuningAccordingToGIAndShadow) == 0x000299, "Member 'ATgfEnvLightScalabilityObserver::bTuningAccordingToGIAndShadow' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, bFoundLightActor) == 0x00029C, "Member 'ATgfEnvLightScalabilityObserver::bFoundLightActor' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, bTuningSkyLight) == 0x0002A0, "Member 'ATgfEnvLightScalabilityObserver::bTuningSkyLight' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, SkyLightIntensityLow) == 0x0002A4, "Member 'ATgfEnvLightScalabilityObserver::SkyLightIntensityLow' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, SkyLightIntensityMid) == 0x0002A8, "Member 'ATgfEnvLightScalabilityObserver::SkyLightIntensityMid' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, SkyLightIntensityHigh) == 0x0002AC, "Member 'ATgfEnvLightScalabilityObserver::SkyLightIntensityHigh' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, SkyLightIntensity) == 0x0002B0, "Member 'ATgfEnvLightScalabilityObserver::SkyLightIntensity' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, SkyLightPtr) == 0x0002B8, "Member 'ATgfEnvLightScalabilityObserver::SkyLightPtr' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, bTuningDirectionalLight) == 0x0002C0, "Member 'ATgfEnvLightScalabilityObserver::bTuningDirectionalLight' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, DirectionalLightIntensityLow) == 0x0002C4, "Member 'ATgfEnvLightScalabilityObserver::DirectionalLightIntensityLow' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, DirectionalLightIntensityMid) == 0x0002C8, "Member 'ATgfEnvLightScalabilityObserver::DirectionalLightIntensityMid' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, DirectionalLightIntensityHigh) == 0x0002CC, "Member 'ATgfEnvLightScalabilityObserver::DirectionalLightIntensityHigh' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, DirectionalLightIntensity) == 0x0002D0, "Member 'ATgfEnvLightScalabilityObserver::DirectionalLightIntensity' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScalabilityObserver, DirectionalLightPtr) == 0x0002D8, "Member 'ATgfEnvLightScalabilityObserver::DirectionalLightPtr' has a wrong offset!");

// Class TgfGraphics.TgfEnvLightScenario
// 0x0028 (0x02F8 - 0x02D0)
class ATgfEnvLightScenario final : public AVolume
{
public:
	class ADirectionalLight*                      DirectionalLightPtr;                               // 0x02D0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASkyLight*                              SkyLightPtr;                                       // 0x02D8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AExponentialHeightFog*                  ExponentialHeightFogPtr;                           // 0x02E0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASkyAtmosphere*                         SkyAtmospherePtr;                                  // 0x02E8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfEnvLightScenario">();
	}
	static class ATgfEnvLightScenario* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATgfEnvLightScenario>();
	}
};
static_assert(alignof(ATgfEnvLightScenario) == 0x000008, "Wrong alignment on ATgfEnvLightScenario");
static_assert(sizeof(ATgfEnvLightScenario) == 0x0002F8, "Wrong size on ATgfEnvLightScenario");
static_assert(offsetof(ATgfEnvLightScenario, DirectionalLightPtr) == 0x0002D0, "Member 'ATgfEnvLightScenario::DirectionalLightPtr' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScenario, SkyLightPtr) == 0x0002D8, "Member 'ATgfEnvLightScenario::SkyLightPtr' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScenario, ExponentialHeightFogPtr) == 0x0002E0, "Member 'ATgfEnvLightScenario::ExponentialHeightFogPtr' has a wrong offset!");
static_assert(offsetof(ATgfEnvLightScenario, SkyAtmospherePtr) == 0x0002E8, "Member 'ATgfEnvLightScenario::SkyAtmospherePtr' has a wrong offset!");

// Class TgfGraphics.TgfEnvLightSubsystem
// 0x0028 (0x0058 - 0x0030)
class UTgfEnvLightSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfEnvLightSubsystem">();
	}
	static class UTgfEnvLightSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTgfEnvLightSubsystem>();
	}
};
static_assert(alignof(UTgfEnvLightSubsystem) == 0x000008, "Wrong alignment on UTgfEnvLightSubsystem");
static_assert(sizeof(UTgfEnvLightSubsystem) == 0x000058, "Wrong size on UTgfEnvLightSubsystem");

// Class TgfGraphics.TgfGraphicsReplicateActor
// 0x0118 (0x03B0 - 0x0298)
class ATgfGraphicsReplicateActor final : public AActor
{
public:
	struct FTgfInteractableLightArray             TgfInteractableLightArray;                         // 0x0298(0x0118)(Net, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfGraphicsReplicateActor">();
	}
	static class ATgfGraphicsReplicateActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATgfGraphicsReplicateActor>();
	}
};
static_assert(alignof(ATgfGraphicsReplicateActor) == 0x000008, "Wrong alignment on ATgfGraphicsReplicateActor");
static_assert(sizeof(ATgfGraphicsReplicateActor) == 0x0003B0, "Wrong size on ATgfGraphicsReplicateActor");
static_assert(offsetof(ATgfGraphicsReplicateActor, TgfInteractableLightArray) == 0x000298, "Member 'ATgfGraphicsReplicateActor::TgfInteractableLightArray' has a wrong offset!");

// Class TgfGraphics.TgfHLODPointLightComponent
// 0x0020 (0x0440 - 0x0420)
class UTgfHLODPointLightComponent final : public UPointLightComponent
{
public:
	uint8                                         Pad_420[0x8];                                      // 0x0420(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SrcLightPath;                                      // 0x0428(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SrcLightPathHash;                                  // 0x0438(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfHLODPointLightComponent">();
	}
	static class UTgfHLODPointLightComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTgfHLODPointLightComponent>();
	}
};
static_assert(alignof(UTgfHLODPointLightComponent) == 0x000010, "Wrong alignment on UTgfHLODPointLightComponent");
static_assert(sizeof(UTgfHLODPointLightComponent) == 0x000440, "Wrong size on UTgfHLODPointLightComponent");
static_assert(offsetof(UTgfHLODPointLightComponent, SrcLightPath) == 0x000428, "Member 'UTgfHLODPointLightComponent::SrcLightPath' has a wrong offset!");
static_assert(offsetof(UTgfHLODPointLightComponent, SrcLightPathHash) == 0x000438, "Member 'UTgfHLODPointLightComponent::SrcLightPathHash' has a wrong offset!");

// Class TgfGraphics.TgfHLODSpotLightComponent
// 0x0020 (0x0450 - 0x0430)
class UTgfHLODSpotLightComponent final : public USpotLightComponent
{
public:
	class FString                                 SrcLightPath;                                      // 0x0430(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SrcLightPathHash;                                  // 0x0440(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_444[0xC];                                      // 0x0444(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfHLODSpotLightComponent">();
	}
	static class UTgfHLODSpotLightComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTgfHLODSpotLightComponent>();
	}
};
static_assert(alignof(UTgfHLODSpotLightComponent) == 0x000010, "Wrong alignment on UTgfHLODSpotLightComponent");
static_assert(sizeof(UTgfHLODSpotLightComponent) == 0x000450, "Wrong size on UTgfHLODSpotLightComponent");
static_assert(offsetof(UTgfHLODSpotLightComponent, SrcLightPath) == 0x000430, "Member 'UTgfHLODSpotLightComponent::SrcLightPath' has a wrong offset!");
static_assert(offsetof(UTgfHLODSpotLightComponent, SrcLightPathHash) == 0x000440, "Member 'UTgfHLODSpotLightComponent::SrcLightPathHash' has a wrong offset!");

// Class TgfGraphics.TgfInteractableLightSubsystem
// 0x0058 (0x0088 - 0x0030)
class UTgfInteractableLightSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x58];                                      // 0x0030(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetLightState(class ATgfStaticInteraction* StaticInteraction);
	void ToggleInteractableLight(class ATgfStaticInteraction* StaticInteraction, bool bLightOn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfInteractableLightSubsystem">();
	}
	static class UTgfInteractableLightSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTgfInteractableLightSubsystem>();
	}
};
static_assert(alignof(UTgfInteractableLightSubsystem) == 0x000008, "Wrong alignment on UTgfInteractableLightSubsystem");
static_assert(sizeof(UTgfInteractableLightSubsystem) == 0x000088, "Wrong size on UTgfInteractableLightSubsystem");

// Class TgfGraphics.TgfLevelStreamingSubsystem
// 0x0038 (0x0068 - 0x0030)
class UTgfLevelStreamingSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             TgfOnLevelsChanged;                                // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TgfOnLevelsAllLoaded;                              // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bLevelsAllLoaded;                                  // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfLevelStreamingSubsystem">();
	}
	static class UTgfLevelStreamingSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTgfLevelStreamingSubsystem>();
	}
};
static_assert(alignof(UTgfLevelStreamingSubsystem) == 0x000008, "Wrong alignment on UTgfLevelStreamingSubsystem");
static_assert(sizeof(UTgfLevelStreamingSubsystem) == 0x000068, "Wrong size on UTgfLevelStreamingSubsystem");
static_assert(offsetof(UTgfLevelStreamingSubsystem, TgfOnLevelsChanged) == 0x000040, "Member 'UTgfLevelStreamingSubsystem::TgfOnLevelsChanged' has a wrong offset!");
static_assert(offsetof(UTgfLevelStreamingSubsystem, TgfOnLevelsAllLoaded) == 0x000050, "Member 'UTgfLevelStreamingSubsystem::TgfOnLevelsAllLoaded' has a wrong offset!");
static_assert(offsetof(UTgfLevelStreamingSubsystem, bLevelsAllLoaded) == 0x000060, "Member 'UTgfLevelStreamingSubsystem::bLevelsAllLoaded' has a wrong offset!");

// Class TgfGraphics.TgfWorldPartitionOverrideVolume
// 0x0018 (0x02E8 - 0x02D0)
class ATgfWorldPartitionOverrideVolume final : public AVolume
{
public:
	float                                         InstanceHLODLoadRange;                             // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MergeHLODLoadRange;                                // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x10];                                     // 0x02D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfWorldPartitionOverrideVolume">();
	}
	static class ATgfWorldPartitionOverrideVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATgfWorldPartitionOverrideVolume>();
	}
};
static_assert(alignof(ATgfWorldPartitionOverrideVolume) == 0x000008, "Wrong alignment on ATgfWorldPartitionOverrideVolume");
static_assert(sizeof(ATgfWorldPartitionOverrideVolume) == 0x0002E8, "Wrong size on ATgfWorldPartitionOverrideVolume");
static_assert(offsetof(ATgfWorldPartitionOverrideVolume, InstanceHLODLoadRange) == 0x0002D0, "Member 'ATgfWorldPartitionOverrideVolume::InstanceHLODLoadRange' has a wrong offset!");
static_assert(offsetof(ATgfWorldPartitionOverrideVolume, MergeHLODLoadRange) == 0x0002D4, "Member 'ATgfWorldPartitionOverrideVolume::MergeHLODLoadRange' has a wrong offset!");

// Class TgfGraphics.TgfWorldPartitionScalabilitySubsystem
// 0x0000 (0x0030 - 0x0030)
class UTgfWorldPartitionScalabilitySubsystem final : public UGameInstanceSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TgfWorldPartitionScalabilitySubsystem">();
	}
	static class UTgfWorldPartitionScalabilitySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTgfWorldPartitionScalabilitySubsystem>();
	}
};
static_assert(alignof(UTgfWorldPartitionScalabilitySubsystem) == 0x000008, "Wrong alignment on UTgfWorldPartitionScalabilitySubsystem");
static_assert(sizeof(UTgfWorldPartitionScalabilitySubsystem) == 0x000030, "Wrong size on UTgfWorldPartitionScalabilitySubsystem");

}

